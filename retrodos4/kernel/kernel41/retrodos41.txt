     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 15/12/2023 - Retro DOS v4.1 (Previous: 08/10/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FC14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2B14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]9E02              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]9E02              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [A512]9E02              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [D014]9E02              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;;mov	ax,offset Skip
  2103                                  		;mov	ax,Skip
  2104                                  		;push	ax
  2105                                  		; 08/10/2023
  2106 000008E6 68[EF08]                		push	Skip
  2107 000008E9 06                      		push	es
  2108 000008EA 57                      		push	di		; API far call address
  2109 000008EB B80100                  		mov	ax, 1		; SetFocus function number
  2110 000008EE CB                      		retf			; do the call
  2111                                  ;-----------------------------------------------------------------------------
  2112                                  
  2113                                  Skip:					
  2114 000008EF 58                      		pop	ax
  2115 000008F0 5B                      		pop	bx
  2116 000008F1 07                      		pop	es
  2117 000008F2 5F                      		pop	di
  2118 000008F3 CB                      		retf
  2119                                  
  2120                                  ;End WIN386 support
  2121                                  
  2122                                  ; ----------------------------------------------------------------------------
  2123                                  
  2124                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2125                                  
  2126                                  ; 09/12/2022
  2127                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2128                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2129                                  ; (followings are in sysinit segment)
  2130                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2131                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2132                                  ;DEVICELIST	equ 273h
  2133                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2134                                  ;MEMORYSIZE	equ 292h	
  2135                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2136                                  ;DEFAULTDRIVE	equ 296h
  2137                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2138                                  ;;currentdoslocation equ 271h
  2139                                  ;CURRENTDOSLOCATION equ 271h
  2140                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2141                                  ;SYSINITSTART	equ 267h
  2142                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2143                                  ; 18/10/2022
  2144                                  ;toomanydrivesflag equ 3FFh 
  2145                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2146                                  
  2147                                  ; ----------------------------------------------------------------------------
  2148                                  
  2149 000008F4 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2150                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2151                                  					; (procedure in	SYSINIT	segment)
  2152                                  ; 17/10/2022
  2153 000008F6 [1C0A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2154 000008F8 3B04                    		dw SYSINITSEG	
  2155                                  
  2156                                  ;SR;
  2157                                  ; A communication block has been setup between the DOS and the BIOS. All
  2158                                  ;the data starting from SysinitPresent will be part of the data block. 
  2159                                  ;Right now, this is the only data being communicated. It can be expanded 
  2160                                  ;later to add more stuff
  2161                                  
  2162 000008FA 00                      SysinitPresent:	db 0			
  2163 000008FB 0000                    endfloppy:	db 0, 0
  2164                                  
  2165                                  ; ----------------------------------------------------------------------------			
  2166                                  
  2167                                  ; Bios_Data ends
  2168                                  	
  2169                                  ; Possibly disposable BIOS data
  2170                                  ; This data follows the	regular	BIOS data,
  2171                                  ; and is part of the same group.
  2172                                  
  2173 000008FD 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2173 00000906 202000             
  2174                                  					; null volume id
  2175 00000909 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2175 00000912 202000             
  2176                                  					; vid scratch buffer
  2177 00000915 80                      harddrv:	db 80h			
  2178                                  
  2179                                  end96tpi:
  2180                                  
  2181                                  ;;*********************************************************************
  2182                                  ;;memory allocation for bdss
  2183                                  ;;*********************************************************************
  2184                                  ;
  2185                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2186                                  ;
  2187                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2188                                  ;
  2189                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2190                                  
  2191 00000916 FFFF                    bdss:		dw 0FFFFh		
  2192 00000918 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2192 00000921 0210000000F8       
  2193 00000927 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2193 00000930 000000000000000003 
  2194 00000939 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2194 00000942 00000000000000     
  2195 00000949 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2195 00000952 000000000000000000 
  2196 0000095B 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2196 00000964 4E414D45           
  2197 00000968 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2197 00000971 46415431           
  2198 00000975 3220202000              		db 32h,	20h, 20h, 20h, 0
  2199 0000097A FFFF                    		dw 0FFFFh
  2200 0000097C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2200 00000985 0210000000F8       
  2201 0000098B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2201 00000994 000000000000000003 
  2202 0000099D 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2202 000009A6 00000000000000     
  2203 000009AD 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2203 000009B6 000000000000000000 
  2204 000009BF 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2204 000009C8 4E414D45           
  2205 000009CC 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2205 000009D5 46415431           
  2206 000009D9 3220202000              		db 32h,	20h, 20h, 20h, 0
  2207 000009DE FFFF                    		dw 0FFFFh
  2208 000009E0 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2208 000009E9 0210000000F8       
  2209 000009EF 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2209 000009F8 000000000000000003 
  2210 00000A01 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2210 00000A0A 00000000000000     
  2211 00000A11 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2211 00000A1A 000000000000000000 
  2212 00000A23 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2212 00000A2C 4E414D45           
  2213 00000A30 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2213 00000A39 46415431           
  2214 00000A3D 3220202000              		db 32h,	20h, 20h, 20h, 0
  2215 00000A42 FFFF                    		dw 0FFFFh
  2216 00000A44 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2216 00000A4D 0210000000F8       
  2217 00000A53 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2217 00000A5C 000000000000000003 
  2218 00000A65 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2218 00000A6E 00000000000000     
  2219 00000A75 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2219 00000A7E 000000000000000000 
  2220 00000A87 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2220 00000A90 4E414D45           
  2221 00000A94 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2221 00000A9D 46415431           
  2222 00000AA1 3220202000              		db 32h,	20h, 20h, 20h, 0
  2223 00000AA6 FFFF                    		dw 0FFFFh
  2224 00000AA8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2224 00000AB1 0210000000F8       
  2225 00000AB7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2225 00000AC0 000000000000000003 
  2226 00000AC9 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2226 00000AD2 00000000000000     
  2227 00000AD9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2227 00000AE2 000000000000000000 
  2228 00000AEB 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2228 00000AF4 4E414D45           
  2229 00000AF8 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2229 00000B01 46415431           
  2230 00000B05 3220202000              		db 32h,	20h, 20h, 20h, 0
  2231 00000B0A FFFF                    		dw 0FFFFh
  2232 00000B0C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2232 00000B15 0210000000F8       
  2233 00000B1B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2233 00000B24 000000000000000003 
  2234 00000B2D 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2234 00000B36 00000000000000     
  2235 00000B3D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2235 00000B46 000000000000000000 
  2236 00000B4F 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2236 00000B58 4E414D45           
  2237 00000B5C 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2237 00000B65 46415431           
  2238 00000B69 3220202000              		db 32h,	20h, 20h, 20h, 0
  2239 00000B6E FFFF                    		dw 0FFFFh
  2240 00000B70 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2240 00000B79 0210000000F8       
  2241 00000B7F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2241 00000B88 000000000000000003 
  2242 00000B91 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2242 00000B9A 00000000000000     
  2243 00000BA1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2243 00000BAA 000000000000000000 
  2244 00000BB3 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2244 00000BBC 4E414D45           
  2245 00000BC0 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2245 00000BC9 46415431           
  2246 00000BCD 3220202000              		db 32h,	20h, 20h, 20h, 0
  2247 00000BD2 FFFF                    		dw 0FFFFh
  2248 00000BD4 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2248 00000BDD 0210000000F8       
  2249 00000BE3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2249 00000BEC 000000000000000003 
  2250 00000BF5 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2250 00000BFE 00000000000000     
  2251 00000C05 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2251 00000C0E 000000000000000000 
  2252 00000C17 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2252 00000C20 4E414D45           
  2253 00000C24 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2253 00000C2D 46415431           
  2254 00000C31 3220202000              		db 32h,	20h, 20h, 20h, 0
  2255 00000C36 FFFF                    		dw 0FFFFh
  2256 00000C38 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2256 00000C41 0210000000F8       
  2257 00000C47 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2257 00000C50 000000000000000003 
  2258 00000C59 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2258 00000C62 00000000000000     
  2259 00000C69 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2259 00000C72 000000000000000000 
  2260 00000C7B 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2260 00000C84 4E414D45           
  2261 00000C88 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2261 00000C91 46415431           
  2262 00000C95 3220202000              		db 32h,	20h, 20h, 20h, 0
  2263 00000C9A FFFF                    		dw 0FFFFh
  2264 00000C9C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2264 00000CA5 0210000000F8       
  2265 00000CAB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2265 00000CB4 000000000000000003 
  2266 00000CBD 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2266 00000CC6 00000000000000     
  2267 00000CCD 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2267 00000CD6 000000000000000000 
  2268 00000CDF 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2268 00000CE8 4E414D45           
  2269 00000CEC 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2269 00000CF5 46415431           
  2270 00000CF9 3220202000              		db 32h,	20h, 20h, 20h, 0
  2271 00000CFE FFFF                    		dw 0FFFFh
  2272 00000D00 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2272 00000D09 0210000000F8       
  2273 00000D0F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2273 00000D18 000000000000000003 
  2274 00000D21 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2274 00000D2A 00000000000000     
  2275 00000D31 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2275 00000D3A 000000000000000000 
  2276 00000D43 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2276 00000D4C 4E414D45           
  2277 00000D50 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2277 00000D59 46415431           
  2278 00000D5D 3220202000              		db 32h,	20h, 20h, 20h, 0
  2279 00000D62 FFFF                    		dw 0FFFFh
  2280 00000D64 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2280 00000D6D 0210000000F8       
  2281 00000D73 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2281 00000D7C 000000000000000003 
  2282 00000D85 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2282 00000D8E 00000000000000     
  2283 00000D95 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2283 00000D9E 000000000000000000 
  2284 00000DA7 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2284 00000DB0 4E414D45           
  2285 00000DB4 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2285 00000DBD 46415431           
  2286 00000DC1 3220202000              		db 32h,	20h, 20h, 20h, 0
  2287 00000DC6 FFFF                    		dw 0FFFFh
  2288 00000DC8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2288 00000DD1 0210000000F8       
  2289 00000DD7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2289 00000DE0 000000000000000003 
  2290 00000DE9 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2290 00000DF2 00000000000000     
  2291 00000DF9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2291 00000E02 000000000000000000 
  2292 00000E0B 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2292 00000E14 4E414D45           
  2293 00000E18 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2293 00000E21 46415431           
  2294 00000E25 3220202000              		db 32h,	20h, 20h, 20h, 0
  2295 00000E2A FFFF                    		dw 0FFFFh
  2296 00000E2C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2296 00000E35 0210000000F8       
  2297 00000E3B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2297 00000E44 000000000000000003 
  2298 00000E4D 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2298 00000E56 00000000000000     
  2299 00000E5D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2299 00000E66 000000000000000000 
  2300 00000E6F 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2300 00000E78 4E414D45           
  2301 00000E7C 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2301 00000E85 46415431           
  2302 00000E89 3220202000              		db 32h,	20h, 20h, 20h, 0
  2303 00000E8E FFFF                    		dw 0FFFFh
  2304 00000E90 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2304 00000E99 0210000000F8       
  2305 00000E9F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2305 00000EA8 000000000000000003 
  2306 00000EB1 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2306 00000EBA 00000000000000     
  2307 00000EC1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2307 00000ECA 000000000000000000 
  2308 00000ED3 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2308 00000EDC 4E414D45           
  2309 00000EE0 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2309 00000EE9 46415431           
  2310 00000EED 3220202000              		db 32h,	20h, 20h, 20h, 0
  2311 00000EF2 FFFF                    		dw 0FFFFh
  2312 00000EF4 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2312 00000EFD 0210000000F8       
  2313 00000F03 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2313 00000F0C 000000000000000003 
  2314 00000F15 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2314 00000F1E 00000000000000     
  2315 00000F25 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2315 00000F2E 000000000000000000 
  2316 00000F37 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2316 00000F40 4E414D45           
  2317 00000F44 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2317 00000F4D 46415431           
  2318 00000F51 3220202000              		db 32h,	20h, 20h, 20h, 0
  2319 00000F56 FFFF                    		dw 0FFFFh
  2320 00000F58 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2320 00000F61 0210000000F8       
  2321 00000F67 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2321 00000F70 000000000000000003 
  2322 00000F79 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2322 00000F82 00000000000000     
  2323 00000F89 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2323 00000F92 000000000000000000 
  2324 00000F9B 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2324 00000FA4 4E414D45           
  2325 00000FA8 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2325 00000FB1 46415431           
  2326 00000FB5 3220202000              		db 32h,	20h, 20h, 20h, 0
  2327 00000FBA FFFF                    		dw 0FFFFh
  2328 00000FBC 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2328 00000FC5 0210000000F8       
  2329 00000FCB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2329 00000FD4 000000000000000003 
  2330 00000FDD 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2330 00000FE6 00000000000000     
  2331 00000FED 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2331 00000FF6 000000000000000000 
  2332 00000FFF 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2332 00001008 4E414D45           
  2333 0000100C 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2333 00001015 46415431           
  2334 00001019 3220202000              		db 32h,	20h, 20h, 20h, 0
  2335 0000101E FFFF                    		dw 0FFFFh
  2336 00001020 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2336 00001029 0210000000F8       
  2337 0000102F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2337 00001038 000000000000000003 
  2338 00001041 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2338 0000104A 00000000000000     
  2339 00001051 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2339 0000105A 000000000000000000 
  2340 00001063 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2340 0000106C 4E414D45           
  2341 00001070 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2341 00001079 46415431           
  2342 0000107D 3220202000              		db 32h,	20h, 20h, 20h, 0
  2343 00001082 FFFF                    		dw 0FFFFh
  2344 00001084 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2344 0000108D 0210000000F8       
  2345 00001093 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2345 0000109C 000000000000000003 
  2346 000010A5 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2346 000010AE 00000000000000     
  2347 000010B5 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2347 000010BE 000000000000000000 
  2348 000010C7 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2348 000010D0 4E414D45           
  2349 000010D4 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2349 000010DD 46415431           
  2350 000010E1 3220202000              		db 32h,	20h, 20h, 20h, 0
  2351 000010E6 FFFF                    		dw 0FFFFh
  2352 000010E8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2352 000010F1 0210000000F8       
  2353 000010F7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2353 00001100 000000000000000003 
  2354 00001109 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2354 00001112 00000000000000     
  2355 00001119 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2355 00001122 000000000000000000 
  2356 0000112B 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2356 00001134 4E414D45           
  2357 00001138 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2357 00001141 46415431           
  2358 00001145 3220202000              		db 32h,	20h, 20h, 20h, 0
  2359 0000114A FFFF                    		dw 0FFFFh
  2360 0000114C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2360 00001155 0210000000F8       
  2361 0000115B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2361 00001164 000000000000000003 
  2362 0000116D 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2362 00001176 00000000000000     
  2363 0000117D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2363 00001186 000000000000000000 
  2364 0000118F 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2364 00001198 4E414D45           
  2365 0000119C 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2365 000011A5 46415431           
  2366 000011A9 3220202000              		db 32h,	20h, 20h, 20h, 0
  2367 000011AE FFFF                    		dw 0FFFFh
  2368 000011B0 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2368 000011B9 0210000000F8       
  2369 000011BF 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2369 000011C8 000000000000000003 
  2370 000011D1 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2370 000011DA 00000000000000     
  2371 000011E1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2371 000011EA 000000000000000000 
  2372 000011F3 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2372 000011FC 4E414D45           
  2373 00001200 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2373 00001209 46415431           
  2374 0000120D 3220202000              		db 32h,	20h, 20h, 20h, 0
  2375 00001212 FFFF                    		dw 0FFFFh
  2376 00001214 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2376 0000121D 0210000000F8       
  2377 00001223 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2377 0000122C 000000000000000003 
  2378 00001235 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2378 0000123E 00000000000000     
  2379 00001245 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2379 0000124E 000000000000000000 
  2380 00001257 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2380 00001260 4E414D45           
  2381 00001264 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2381 0000126D 46415431           
  2382 00001271 3220202000              		db 32h,	20h, 20h, 20h, 0
  2383 00001276 FFFF                    		dw 0FFFFh
  2384 00001278 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2384 00001281 0210000000F8       
  2385 00001287 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2385 00001290 000000000000000003 
  2386 00001299 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2386 000012A2 00000000000000     
  2387 000012A9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2387 000012B2 000000000000000000 
  2388 000012BB 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2388 000012C4 4E414D45           
  2389 000012C8 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2389 000012D1 46415431           
  2390 000012D5 3220202000              		db 32h,	20h, 20h, 20h, 0
  2391 000012DA 00                      		db 0
  2392                                  
  2393                                  ;---------------------------------------------------------------------------
  2394                                  ; Possibly disposable data, goes at end of data group
  2395                                  ;***************************************************************************
  2396                                  
  2397                                  ; Possibly disposable data, goes at end of data group
  2398                                  
  2399                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2400                                  ;
  2401                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2402                                  ;		(dl) = drive number (80h or 81h).
  2403                                  ;		(dh) = head number.
  2404                                  ;		(ch) = cylinder number.
  2405                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2406                                  ;		(al) = number of sectors.
  2407                                  ;		(es:bx) = address of read buffer.
  2408                                  ;		for more on register contents see rom bios listing.
  2409                                  ;		stack set up for return by an iret.
  2410                                  ;
  2411                                  ;	exit:	(ah) = status of current operation.
  2412                                  ;		(cy) = 1 if failed, 0 if successful.
  2413                                  ;		for other register contents see rom bios listing.
  2414                                  ;
  2415                                  ;	uses:	
  2416                                  ;
  2417                                  ;
  2418                                  ;	warning: uses old13 vector for non-read calls.
  2419                                  ;		does direct calls to the at rom.
  2420                                  ;		does segment arithmatic.
  2421                                  ;
  2422                                  ;	effects: performs disk i/o operation.
  2423                                  
  2424                                  ; 16/10/2022
  2425                                  ; 28/05/2019
  2426                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2427                                  
  2428                                  ;* offsets into cmd_block for registers
  2429                                  
  2430                                  pre_comp equ 0	;write pre-compensation
  2431                                  sec_cnt	 equ 1	;sector count
  2432                                  sec_num	 equ 2	;sector number
  2433                                  cyl_low	 equ 3	;cylinder number, low part
  2434                                  cyl_high equ 4	;cylinder number, high part
  2435                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2436                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2437                                  cmd_reg  equ 6	;command register
  2438                                  
  2439                                  ; 01/10/2022
  2440                                  disk_status1	equ 74h
  2441                                  hf_num		equ 75h
  2442                                  control_byte	equ 76h
  2443                                  
  2444                                  ibm_disk_io:				
  2445 000012DB 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2446 000012DE 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2447 000012E0 80FC02                  		cmp	ah, 2
  2448 000012E3 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2449 000012E5 80FC0A                  		cmp	ah, 0Ah
  2450 000012E8 7405                    		jz	short atd2	; and call 0Ah (read long).
  2451                                  atd1:
  2452 000012EA 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2453                                  		;jmp	cs:Old13	; use rom int 13h handler
  2454                                  ;-----------------------------------------------------------------------------
  2455                                  
  2456                                  atd2:					
  2457 000012EF 53                      		push	bx
  2458 000012F0 51                      		push	cx
  2459 000012F1 52                      		push	dx
  2460 000012F2 57                      		push	di
  2461 000012F3 1E                      		push	ds
  2462 000012F4 06                      		push	es
  2463 000012F5 50                      		push	ax
  2464 000012F6 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2465                                  					; establish bios segment addressing
  2466 000012F9 8ED8                    		mov	ds, ax
  2467                                  		; 16/10/2022
  2468 000012FB C606740000              		mov	byte [disk_status1], 0
  2469                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2470                                  					; initially no error code.
  2471 00001300 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2472 00001303 3A167500                		cmp	dl, [hf_num]
  2473                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2474 00001307 7207                    		jb	short atd3	; disk number in range
  2475                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2476 00001309 C606740001              		mov	byte [disk_status1], 1
  2477 0000130E EB20                    		jmp	short atd4	; disk number out of range error,
  2478                                  					; return
  2479                                  ; ----------------------------------------------------------------------------
  2480                                  
  2481                                  atd3:					
  2482 00001310 53                      		push	bx
  2483 00001311 8CC0                    		mov	ax, es
  2484 00001313 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2485 00001316 01D8                    		add	ax, bx
  2486 00001318 8EC0                    		mov	es, ax
  2487 0000131A 5B                      		pop	bx
  2488 0000131B 83E30F                  		and	bx, 0Fh
  2489 0000131E 0E                      		push	cs
  2490 0000131F E8DF00                  		call	check_dma
  2491 00001322 720C                    		jb	short atd4	; abort if dma across segment boundary
  2492 00001324 58                      		pop	ax
  2493 00001325 50                      		push	ax
  2494 00001326 E81A00                  		call	setcmd		; set up command block for disk op
  2495 00001329 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2496 0000132C EE                      		out	dx, al		; write out command modifier
  2497 0000132D E86B00                  		call	docmd		; carry out command
  2498                                  ; ----------------------------------------------------------------------------
  2499                                  
  2500                                  atd4:	
  2501                                  
  2502                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2503                                  ;	      and save a couple bytes while were at it.
  2504                                  				
  2505 00001330 58                      		pop	ax
  2506                                  		;mov	ah, ds:74h	; [disk_status1]
  2507 00001331 8A267400                		mov	ah, [disk_status1]
  2508 00001335 08E4                    		or	ah, ah
  2509 00001337 7401                    		jz	short atd5
  2510 00001339 F9                      		stc
  2511                                  atd5:					
  2512 0000133A 07                      		pop	es
  2513 0000133B 1F                      		pop	ds
  2514 0000133C 5F                      		pop	di
  2515 0000133D 5A                      		pop	dx
  2516 0000133E 59                      		pop	cx
  2517 0000133F 5B                      		pop	bx
  2518 00001340 CA0200                  		retf	2		; far return, dropping flags
  2519                                  
  2520                                  ; =============== S U B	R O U T	I N E ========================================
  2521                                  
  2522                                  ;***	setcmd - set up cmd_block for the disk operation
  2523                                  ;
  2524                                  ;	entry:	(ds) = bios data segment.
  2525                                  ;		(es:bx) in seg:000x form.
  2526                                  ;		other registers as in int 13h call
  2527                                  ;	
  2528                                  ;	exit:	cmd_block set up for disk read call.
  2529                                  ;		control_byte set up for disk operation.
  2530                                  ;		(al) = control byte modifier
  2531                                  ;
  2532                                  ;	sets the fields of cmd_block using the register contents
  2533                                  ;	and the contents of the disk parameter block for the given drive.
  2534                                  ;
  2535                                  ;	warning: (ax) destroyed.
  2536                                  ;		does direct calls to the at rom.
  2537                                  
  2538                                  setcmd:		; proc near		
  2539                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2540                                  		; 16/10/2022
  2541 00001343 A24300                  		mov	[cmd_block+sec_cnt], al
  2542                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2543 00001346 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2544 0000134B 80FC02                  		cmp	ah, 2
  2545 0000134E 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2546 00001350 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2547                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2548                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2549                                  setc1:					
  2550 00001355 88C8                    		mov	al, cl
  2551 00001357 243F                    		and	al, 3Fh		; mask sector number
  2552                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2553                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2554 00001359 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2555 0000135C 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2556 00001360 88C8                    		mov	al, cl
  2557 00001362 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2558                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2559 00001365 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2560 00001368 89D0                    		mov	ax, dx
  2561 0000136A C0E004                  		shl	al, 4		; drive	number
  2562 0000136D 80E40F                  		and	ah, 0Fh
  2563 00001370 08E0                    		or	al, ah		; head number
  2564 00001372 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2565                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2566 00001374 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2567 00001377 06                      		push	es
  2568 00001378 53                      		push	bx
  2569 00001379 0E                      		push	cs
  2570 0000137A E85C00                  		call	get_vec
  2571 0000137D 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2572                                  			 		; write pre-comp from disk parameters
  2573 00001381 C1E802                  		shr	ax, 2
  2574                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2575 00001384 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2576                                  					; only use low part
  2577 00001387 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2578                                  					; control byte modifier
  2579 0000138B 5B                      		pop	bx
  2580 0000138C 07                      		pop	es
  2581                                  		;mov	ah, ds:76h	; [control_byte]
  2582 0000138D 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2583 00001391 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2584 00001394 08C4                    		or	ah, al
  2585                                  		;mov	ds:76h,	ah
  2586 00001396 88267600                		mov	[control_byte], ah ; mov [76h],al
  2587 0000139A C3                      		retn
  2588                                  
  2589                                  ; =============== S U B	R O U T	I N E ========================================
  2590                                  
  2591                                  ;***	docmd - carry out read operation to at hard disk
  2592                                  ;
  2593                                  ;	entry:	(es:bx) = address for read in data.
  2594                                  ;		cmd_block set up for disk read.
  2595                                  ;
  2596                                  ;	exit:	buffer at (es:bx) contains data read.
  2597                                  ;		disk_status1 set to error code (0 if success).
  2598                                  ;
  2599                                  ;	
  2600                                  ;
  2601                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2602                                  ;		no check is made for dma boundary overrun.
  2603                                  ;
  2604                                  ;	effects: programs disk controller.
  2605                                  ;		performs disk input.
  2606                                  
  2607                                  docmd:		; proc near		
  2608 0000139B 89DF                    		mov	di, bx
  2609 0000139D 0E                      		push	cs
  2610 0000139E E84000                  		call	command
  2611 000013A1 7535                    		jnz	short doc3
  2612                                  doc1:					
  2613 000013A3 0E                      		push	cs
  2614 000013A4 E84200                  		call	waitt		; wait for controller to complete read
  2615 000013A7 752F                    		jnz	short doc3
  2616 000013A9 B90001                  		mov	cx, 256		; 256 words per sector
  2617 000013AC BAF001                  		mov	dx, 1F0h	; hf_port
  2618 000013AF FC                      		cld			; string op goes up
  2619 000013B0 FA                      		cli			; disable interrupts
  2620                                  					; (bug was forgetting this)
  2621                                  
  2622                                  ;	M062 -- some of these old machines have intermittent failures
  2623                                  ;		when the read is done at full speed. Instead of using
  2624                                  ;		a string rep instruction, we'll use a loop. There is
  2625                                  ;		a slight performance hit, but it only affects these
  2626                                  ;		very old machines with an exact date code match, and
  2627                                  ;		it makes said machines more reliable
  2628                                  ;
  2629                                  ;M062	repz	insw		;read in sector
  2630                                  
  2631                                  rsct_loop:				
  2632 000013B1 6D                      		insw
  2633 000013B2 E2FD                    		loop	rsct_loop
  2634 000013B4 FB                      		sti
  2635                                  		; 16/10/2022
  2636 000013B5 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2637                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2638                                  					; (ds =	40h)
  2639 000013BA 7410                    		jz	short doc2	; no ecc bytes to read.
  2640 000013BC 0E                      		push	cs
  2641 000013BD E83100                  		call	wait_drq	; wait for controller to complete read
  2642 000013C0 7216                    		jb	short doc3
  2643 000013C2 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2644 000013C5 BAF001                  		mov	dx, 1F0h	; hf_port
  2645 000013C8 FA                      		cli
  2646 000013C9 F36C                    		rep insb		; read in ecc
  2647 000013CB FB                      		sti
  2648                                  doc2:					
  2649 000013CC 0E                      		push	cs
  2650 000013CD E82900                  		call	check_status
  2651 000013D0 7506                    		jnz	short doc3	; operation failed
  2652                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2653 000013D2 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2654 000013D6 75CB                    		jnz	short doc1	; loop while more sectors to read
  2655                                  doc3:					
  2656 000013D8 C3                      		retn
  2657                                  
  2658                                  ; =============== S U B	R O U T	I N E ========================================
  2659                                  
  2660                                  ;***	define where the rom routines are actually located
  2661                                  ;	   in the buggy old AT BIOS that we might need to
  2662                                  ;	   install a special level of int13 handler for
  2663                                  
  2664                                  ; 16/10/2022
  2665                                  
  2666                                  romsegment 	equ 0F000h  ; segment
  2667                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2668                                  romwait		equ 2E7Fh   ; offset in romsegment
  2669                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2670                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2671                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2672                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2673                                  romfret		equ 0FF65h  ; far return in rom	
  2674                                  
  2675                                  ;***	get_vec - get pointer to hard disk parameters.
  2676                                  ;
  2677                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2678                                  ;
  2679                                  ;	exit:	(es:bx) = address of disk parameters table.
  2680                                  ;
  2681                                  ;	uses:	ax for segment computation.
  2682                                  ;
  2683                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2684                                  ;	or 70h (disk 1).
  2685                                  ;	
  2686                                  ;	warning: (ax) destroyed.
  2687                                  ;		this does a direct call to the at rom.
  2688                                  
  2689                                  get_vec:	; proc near		
  2690                                  		;push	0FF65h		; romfret ; far	return in rom
  2691                                  		;jmp	far ptr	0F000h:2F8Eh
  2692                                  		; 16/10/2022
  2693 000013D9 6865FF                  		push	romfret		; far return in rom
  2694 000013DC EA8E2F00F0              		jmp	romsegment:romget_vec
  2695                                  
  2696                                  ; =============== S U B	R O U T	I N E ========================================
  2697                                  
  2698                                  ;***	command - send contents of cmd_block to disk controller.
  2699                                  ;
  2700                                  ;	entry:	control_byte 
  2701                                  ;		cmd_block - set up with values for hard disk controller.
  2702                                  ;
  2703                                  ;	exit:	disk_status1 = error code.
  2704                                  ;		nz if error, zr for no error.
  2705                                  ;
  2706                                  ;
  2707                                  ;	warning: (ax), (cx), (dx) destroyed.
  2708                                  ;		does a direct call to the at rom.
  2709                                  ;
  2710                                  ;	effects: programs disk controller.
  2711                                  
  2712                                  command:	; proc near		
  2713                                  		;push	0FF65h		; romfret ; far	return in rom
  2714                                  		;jmp	far ptr	0F000h:2E1Eh
  2715                                  		; 16/10/2022
  2716 000013E1 6865FF                  		push	romfret		; far return in rom
  2717 000013E4 EA1E2E00F0              		jmp	romsegment:romcommand
  2718                                  
  2719                                  ; =============== S U B	R O U T	I N E ========================================
  2720                                  
  2721                                  ;***	waitt - wait for disk interrupt
  2722                                  ;
  2723                                  ;	entry:	nothing.
  2724                                  ;
  2725                                  ;	exit:	disk_status1 = error code.
  2726                                  ;		nz if error, zr if no error.
  2727                                  ;
  2728                                  ;
  2729                                  ;	warning: (ax), (bl), (cx) destroyed.
  2730                                  ;		does a direct call to the at rom.
  2731                                  ;		
  2732                                  ;	effects: calls int 15h, function 9000h.
  2733                                  
  2734                                  waitt:		; proc near		
  2735                                  		;push	0FF65h		; romfret ; far	return in rom
  2736                                  		;jmp	far ptr	0F000h:2E7Fh
  2737                                  		; 16/10/2022
  2738 000013E9 6865FF                  		push	romfret		; far return in rom
  2739 000013EC EA7F2E00F0              		jmp	romsegment:romwait
  2740                                  
  2741                                  ; =============== S U B	R O U T	I N E ========================================
  2742                                  
  2743                                  ;***	wait_drq - wait for data request.
  2744                                  ;
  2745                                  ;	entry:	nothing.
  2746                                  ;
  2747                                  ;	exit:	disk_status1 = error code.
  2748                                  ;		cy if error, nc if no error.
  2749                                  ;
  2750                                  ;	warning: (al), (cx), (dx) destroyed.
  2751                                  ;		does a direct call to the at rom.
  2752                                  
  2753                                  wait_drq:	; proc near		
  2754                                  		;push	0FF65h		; romfret ; far	return in rom
  2755                                  		;jmp	far ptr	0F000h:2EE2h
  2756                                  		; 16/10/2022
  2757 000013F1 6865FF                  		push	romfret		; far return in rom
  2758 000013F4 EAE22E00F0              		jmp	romsegment:romwait_drq
  2759                                  
  2760                                  ; =============== S U B	R O U T	I N E ========================================
  2761                                  
  2762                                  ;***	check_status - check hard disk status.
  2763                                  ;
  2764                                  ;	entry:	nothing.
  2765                                  ;
  2766                                  ;	exit:	disk_status1 = error code.
  2767                                  ;		nz if error, zr if no error.
  2768                                  ;
  2769                                  ;	warning: (ax), (cx), (dx) destroyed.
  2770                                  ;		does a direct call to the at rom.
  2771                                  
  2772                                  check_status:	; proc near		
  2773                                  		;push	0FF65h		; romfret ; far	return in rom
  2774                                  		;jmp	far ptr	0F000h:2EF8h
  2775                                  		; 16/10/2022
  2776 000013F9 6865FF                  		push	romfret		; far return in rom
  2777 000013FC EAF82E00F0              		jmp	romsegment:romcheck_status
  2778                                  
  2779                                  ; =============== S U B	R O U T	I N E ========================================
  2780                                  
  2781                                  ;***	check_dma - check for dma overrun 64k segment.
  2782                                  ;
  2783                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2784                                  ;		cmd_block set up for operation.
  2785                                  ;
  2786                                  ;	exit:	disk_status1 - error code.
  2787                                  ;		cy if error, nc if no error.
  2788                                  ;
  2789                                  ;	warning: does a direct call to the at rom.
  2790                                  
  2791                                  check_dma:	; proc near		
  2792                                  		;push	0FF65h		; romfret ; far	return in rom
  2793                                  		;jmp	far ptr	0F000h:2F69h
  2794                                  		; 16/10/2022
  2795 00001401 6865FF                  		push	romfret		; far return in rom
  2796 00001404 EA692F00F0              		jmp	romsegment:romcheck_dma
  2797                                  
  2798                                  ;-----------------------------------------------------------------------------
  2799                                  
  2800                                  endatrom:
  2801                                  
  2802                                  ; ----------------------------------------------------------------------------
  2803                                  
  2804                                  ;; M015 -- begin changes
  2805                                  ;;
  2806                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2807                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2808                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2809                                  ;; If our init code detects this error, it will install this
  2810                                  ;; special Int13 hook through the same mechanism that was set
  2811                                  ;; up for the IBM patch above. This code is also dynamically
  2812                                  ;; relocated by MSINIT.
  2813                                  
  2814                                  compaq_disk_io:
  2815 00001409 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2816                                  					;
  2817                                  					; the following	label defines the end of the at	rom patch.
  2818                                  					; this is used at configuration	time.
  2819                                  					;
  2820                                  					; warning!!!
  2821                                  					; this code will be dynamically	relocated by msinit
  2822 0000140C 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2823                                  no_hookit:				
  2824                                  		;jmp	cs:Old13
  2825                                  		; 16/10/2022
  2826 0000140E 2EFF2E[0601]            		jmp	far [cs:Old13]
  2827                                  
  2828                                  ; ----------------------------------------------------------------------------
  2829                                  
  2830                                  mebbe_hookit:				
  2831 00001413 80FA80                  		cmp	dl, 80h
  2832 00001416 72F6                    		jb	short no_hookit
  2833 00001418 1E                      		push	ds
  2834 00001419 50                      		push	ax
  2835 0000141A B84000                  		mov	ax, 40h
  2836 0000141D 8ED8                    		mov	ds, ax
  2837 0000141F 58                      		pop	ax
  2838 00001420 9C                      		pushf
  2839                                  		;call	cs:Old13
  2840                                  		; 16/10/2022
  2841 00001421 2EFF1E[0601]            		call	far [cs:Old13]
  2842 00001426 1F                      		pop	ds
  2843 00001427 CA0200                  		retf	2
  2844                                  
  2845                                  ; ----------------------------------------------------------------------------
  2846                                  
  2847 0000142A 00                      end_compaq_i13hook: db 0			
  2848                                  
  2849                                  ; =============== S U B	R O U T	I N E ========================================
  2850                                  
  2851                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2852                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2853                                  
  2854                                  daycnt_to_day:	; proc far
  2855                                  
  2856                                  ; entry: [daycnt] = number of days since 1-1-80
  2857                                  ;
  2858                                  ; return: ch - century in bcd
  2859                                  ;	  cl - year in bcd
  2860                                  ;	  dh - month in bcd
  2861                                  ;	  dl - day in bcd
  2862                                  
  2863                                  		; 16/10/2022		
  2864 0000142B 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2865 00001430 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2866                                  					; # days from 1-1-1980 to 1-1-2000
  2867 00001437 730E                    		jnb	short century20
  2868 00001439 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2869 0000143F 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2870 00001445 EB13                    		jmp	short years
  2871                                  ; ----------------------------------------------------------------------------
  2872                                  		
  2873                                  century20:				
  2874 00001447 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2875 0000144D 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2876 00001453 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2877                                  					; adjust daycnt
  2878                                  years:					
  2879 0000145A 31D2                    		xor	dx, dx
  2880 0000145C 2EA1[F004]              		mov	ax, [cs:daycnt]
  2881 00001460 BBB505                  		mov	bx, 1461	; (366+365*3)
  2882                                  					; # of days in a Leap year block
  2883 00001463 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2884 00001465 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2885 0000146A B304                    		mov	bl, 4
  2886 0000146C F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2887 0000146E 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2888 00001473 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2889 00001478 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2890 0000147F 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2891 00001481 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2892 00001486 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2893 0000148D B90300                  		mov	cx, 3		; And next three years are normal
  2894                                  regularyear:				
  2895 00001490 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2896 00001497 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2897 00001499 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2898 0000149E 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2899 000014A5 E2E9                    		loop	regularyear	; }
  2900                                  					;
  2901                                  					; should never fall through loop
  2902                                  leapyear:				
  2903 000014A7 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2904                                  					; change month table.
  2905                                  yeardone:				
  2906 000014AD 31DB                    		xor	bx, bx
  2907 000014AF 31D2                    		xor	dx, dx
  2908 000014B1 2EA1[F004]              		mov	ax, [cs:daycnt]
  2909                                  		;mov	si, offset month_tab
  2910 000014B5 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2911 000014B8 B90C00                  		mov	cx, 12
  2912                                  months:					
  2913 000014BB FEC3                    		inc	bl
  2914                                  
  2915                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2916                                  		;mov	dl, [cs:si]
  2917                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2918                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2919                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2920                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2921                                  		
  2922 000014BD 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2923 000014BF 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2924                                  					; dh=0
  2925 000014C1 7605                    		jbe	short month_done
  2926 000014C3 46                      		inc	si		; next month
  2927 000014C4 29D0                    		sub	ax, dx		; adjust daycnt
  2928 000014C6 E2F3                    		loop	months		;
  2929                                  					; should never fall through loop
  2930                                  month_done:				
  2931 000014C8 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2932                                  					; restore month table value
  2933 000014CE 88DA                    		mov	dl, bl
  2934 000014D0 2E8A36[F504]            		mov	dh, [cs:base_year]
  2935 000014D5 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2936 000014DA 2EFF1E[0205]            		call	far [cs:bintobcd]
  2937                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2938                                  					; dl = bcd day,	al = month
  2939 000014DF 86D0                    		xchg	dl, al
  2940 000014E1 2EFF1E[0205]            		call	far [cs:bintobcd]
  2941                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2942 000014E6 86F0                    		xchg	dh, al
  2943 000014E8 2EFF1E[0205]            		call	far [cs:bintobcd]
  2944                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2945 000014ED 86C8                    		xchg	cl, al
  2946 000014EF 2EFF1E[0205]            		call	far [cs:bintobcd]
  2947                                  		;call	cs:bintobcd	; ch = bcd century
  2948 000014F4 88C5                    		mov	ch, al
  2949 000014F6 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2950 000014FB CB                      		retf
  2951                                  
  2952                                  enddaycnttoday:	
  2953                                  
  2954                                  ; =============== S U B	R O U T	I N E ========================================
  2955                                  
  2956                                  bin_to_bcd:	; proc far		; real time clock support
  2957                                  
  2958                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2959                                  ;into a bcd value in al. ah destroyed.	
  2960                                  		
  2961 000014FC 51                      		push	cx		
  2962 000014FD D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2963 000014FF B104                    		mov	cl, 4
  2964 00001501 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2965 00001503 08E0                    		or	al, ah
  2966 00001505 59                      		pop	cx
  2967 00001506 CB                      		retf
  2968                                  
  2969                                  ; ----------------------------------------------------------------------------
  2970                                  
  2971                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2972                                  ; resume facility. the system clock needs to be reset after resume.
  2973                                  
  2974                                  ; the following routine is executed at resume time when the system
  2975                                  ; powered on after suspension. it reads the real time clock and
  2976                                  ; resets the system time and date, and then irets.
  2977                                  
  2978                                  ; warning!!! this code will be dynamically relocated by msinit.
  2979                                  
  2980                                  int6c:					
  2981 00001507 0E                      		push	cs
  2982 00001508 1F                      		pop	ds
  2983 00001509 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2984 0000150D 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2985 00001511 9D                      		popf
  2986 00001512 E81300                  		call	read_real_date	; get the date from the clock
  2987 00001515 FA                      		cli
  2988 00001516 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2989 0000151A FB                      		sti
  2990 0000151B E8CB00                  		call	read_real_time	; get the time from the	rtc
  2991 0000151E FA                      		cli
  2992 0000151F B401                    		mov	ah, 1
  2993 00001521 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2994                                  					; CX:DX	= clock	count
  2995                                  					; Return: time of day set
  2996 00001523 FB                      		sti
  2997                                  		;jmp	int6c_ret_addr	; long jump
  2998                                  		; 16/10/2022
  2999 00001524 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  3000                                  
  3001                                  ; =============== S U B	R O U T	I N E ========================================
  3002                                  
  3003                                  ;   read_real_date reads real-time clock for date and returns the number
  3004                                  ;   of days elapsed since 1-1-80 in si
  3005                                  
  3006                                  read_real_date:	; proc near		
  3007 00001528 50                      		push	ax
  3008 00001529 51                      		push	cx
  3009 0000152A 52                      		push	dx
  3010 0000152B 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3011 0000152D CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3012                                  					; Return: CX:DX	= clock	count
  3013                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3014                                  					; midnight
  3015                                  					; Otherwise, AL	> 0
  3016 0000152F 5A                      		pop	dx
  3017 00001530 59                      		pop	cx
  3018 00001531 58                      		pop	ax
  3019 00001532 50                      		push	ax
  3020 00001533 53                      		push	bx
  3021 00001534 51                      		push	cx
  3022 00001535 52                      		push	dx
  3023 00001536 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3024                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3025 0000153D B404                    		mov	ah, 4
  3026 0000153F CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3027                                  					; Return: DL = day in BCD
  3028                                  					; DH = month in	BCD
  3029                                  					; CL = year in BCD
  3030                                  					; CH = century (19h or 20h)
  3031 00001541 7303                    		jnb	short read_ok
  3032 00001543 E99300                  		jmp	r_d_ret
  3033                                  ;-----------------------------------------------------------------------------
  3034                                  
  3035                                  read_ok:				
  3036 00001546 882E[BF06]              		mov	[bin_date_time], ch
  3037 0000154A 880E[C006]              		mov	[bin_date_time+1], cl
  3038 0000154E 8836[C106]              		mov	[bin_date_time+2], dh
  3039 00001552 8816[C206]              		mov	[bin_date_time+3], dl
  3040 00001556 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3041 0000155D E84201                  		call	bcd_verify	; verify bcd values in range
  3042 00001560 7277                    		jb	short r_d_ret	;  some	value out of range
  3043 00001562 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3044 00001569 E8E600                  		call	date_verify
  3045 0000156C 726B                    		jb	short r_d_ret
  3046 0000156E 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3047 00001575 E8AA00                  		call	in_bin
  3048 00001578 A0[C006]                		mov	al, [bin_date_time+1]
  3049 0000157B 98                      		cbw
  3050 0000157C 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3051 00001581 7503                    		jnz	short century_19 ; no
  3052 00001583 83C064                  		add	ax, 100		; add in a century
  3053                                  
  3054                                  century_19:				
  3055 00001586 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3056 00001589 B104                    		mov	cl, 4		; leap year every 4
  3057 0000158B F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3058 0000158D 88E3                    		mov	bl, ah		; save odd years
  3059 0000158F 98                      		cbw			; zero ah
  3060 00001590 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3061                                  					; # of days in leap year blocks
  3062 00001593 F7E1                    		mul	cx
  3063 00001595 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3064 00001599 88D8                    		mov	al, bl		; get odd years	count
  3065 0000159B 98                      		cbw
  3066 0000159C 09C0                    		or	ax, ax
  3067 0000159E 740C                    		jz	short leap_year
  3068 000015A0 B96D01                  		mov	cx, 365		; days in year
  3069 000015A3 F7E1                    		mul	cx
  3070 000015A5 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3071 000015AA EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3072                                  					; possibly account for a leap day
  3073                                  ;-----------------------------------------------------------------------------
  3074                                  
  3075                                  leap_year:				
  3076 000015AC 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3077 000015B1 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3078                                  leap_adjustment:			
  3079 000015B3 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3080                                  no_leap_adjustment:			
  3081 000015B8 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3082 000015BC 30ED                    		xor	ch, ch
  3083 000015BE 49                      		dec	cx		; because of offset from day 1,	not day	0
  3084 000015BF 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3085 000015C4 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3086 000015C8 30ED                    		xor	ch, ch
  3087 000015CA 49                      		dec	cx		; january starts at offset 0
  3088 000015CB D1E1                    		shl	cx, 1		; word offset
  3089 000015CD BE[C306]                		mov	si, month_table
  3090 000015D0 01CE                    		add	si, cx
  3091                                  		; 16/10/2022
  3092                                  		; ds must be same with cs here, if so..
  3093                                  		; what for cs: prefixes are used !?)
  3094                                  		; mov	ax, [cs:si]
  3095                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3096 000015D2 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3097                                  					; get #	days in	previous months
  3098 000015D4 2E0106[DB06]            		add	[cs:daycnt2], ax
  3099                                  r_d_ret:				
  3100 000015D9 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3101 000015DE 5A                      		pop	dx
  3102 000015DF 59                      		pop	cx
  3103 000015E0 5B                      		pop	bx
  3104 000015E1 58                      		pop	ax
  3105 000015E2 C3                      		retn
  3106                                  
  3107                                  ;-----------------------------------------------------------------------------
  3108                                  
  3109                                  r_t_retj:				
  3110 000015E3 31C9                    		xor	cx, cx
  3111 000015E5 31D2                    		xor	dx, dx
  3112 000015E7 EB38                    		jmp	short r_t_ret
  3113                                  
  3114                                  ; =============== S U B	R O U T	I N E ========================================
  3115                                  
  3116                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3117                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3118                                  
  3119                                  read_real_time:	; proc near		
  3120 000015E9 B402                    		mov	ah, 2
  3121 000015EB CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3122                                  					; Return: CH = hours in	BCD
  3123                                  					; CL = minutes in BCD
  3124                                  					; DH = seconds in BCD
  3125 000015ED 72F4                    		jb	short r_t_retj
  3126 000015EF 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3127 000015F3 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3128 000015F7 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3129 000015FB C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3130 00001600 E89F00                  		call	bcd_verify
  3131 00001603 72DE                    		jb	short r_t_retj
  3132 00001605 E88500                  		call	time_verify
  3133 00001608 72D9                    		jb	short r_t_retj
  3134 0000160A E81500                  		call	in_bin		; from bcd to bin
  3135 0000160D 8A2E[BF06]              		mov	ch, [bin_date_time]
  3136 00001611 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3137 00001615 8A36[C106]              		mov	dh, [bin_date_time+2]
  3138 00001619 8A16[C206]              		mov	dl, [bin_date_time+3]
  3139                                  		; 16/10/2022
  3140                                  		; 17/09/2022
  3141                                  		; 31/05/2019
  3142 0000161D FF1E[E206]              		call	far [ttticks] 
  3143                                  		;call	dword ptr ttticks ; note: indirect far call
  3144                                  					; cx:dx	= number of ticks
  3145                                  					; (at 18.2 ticks per sec.)
  3146                                  r_t_ret:				
  3147 00001621 C3                      		retn
  3148                                  
  3149                                  ; =============== S U B	R O U T	I N E =======================================
  3150                                  
  3151                                  ;   in_bin converts bin_date_time values from bcd to bin
  3152                                  
  3153                                  in_bin:		; proc near		
  3154 00001622 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3155 00001625 E81F00                  		call	bcd_to_bin
  3156 00001628 A2[BF06]                		mov	[bin_date_time], al
  3157 0000162B A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3158 0000162E E81600                  		call	bcd_to_bin
  3159 00001631 A2[C006]                		mov	[bin_date_time+1], al
  3160 00001634 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3161 00001637 E80D00                  		call	bcd_to_bin
  3162 0000163A A2[C106]                		mov	[bin_date_time+2], al
  3163 0000163D A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3164 00001640 E80400                  		call	bcd_to_bin
  3165 00001643 A2[C206]                		mov	[bin_date_time+3], al
  3166 00001646 C3                      		retn
  3167                                  
  3168                                  ; =============== S U B	R O U T	I N E =======================================
  3169                                  
  3170                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3171                                  ;   a binary representation in al
  3172                                  ;   ah is destroyed
  3173                                  
  3174                                  bcd_to_bin:	; proc near		
  3175 00001647 88C4                    		mov	ah, al
  3176 00001649 240F                    		and	al, 0Fh
  3177 0000164B B104                    		mov	cl, 4
  3178 0000164D D2EC                    		shr	ah, cl
  3179 0000164F D50A                    		aad
  3180 00001651 C3                      		retn
  3181                                  
  3182                                  ; =============== S U B	R O U T	I N E ========================================
  3183                                  
  3184                                  ;   date_verify loosely checks bcd date values to be in range
  3185                                  ;   in bin_date_time
  3186                                  
  3187                                  date_verify:	; proc near		
  3188 00001652 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3189 00001657 7732                    		ja	short date_error
  3190 00001659 740E                    		jz	short century_20 ; jmp in 21th century
  3191 0000165B 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3192                                  		;jb	short date_error
  3193                                  		; 12/12/2022
  3194 00001660 722A                    		jb	short date_err2
  3195 00001662 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3196                                  		;jb	short date_error
  3197                                  		; 12/12/2022
  3198 00001667 7223                    		jb	short date_err2
  3199                                  century_20:				
  3200 00001669 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3201 0000166E 771B                    		ja	short date_error
  3202 00001670 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3203 00001675 7714                    		ja	short date_error
  3204 00001677 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3205                                  		;jbe	short date_error
  3206 0000167C 760D                    		jna	short date_error
  3207 0000167E 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3208 00001683 7706                    		ja	short date_error
  3209                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3210                                  		;;jbe	short date_error
  3211                                  		;jna	short date_error
  3212                                  		; 12/12/2022
  3213                                  		; cf=0
  3214                                  		;clc
  3215                                  		; 12/12/2022
  3216 00001685 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3217 0000168A C3                      		retn
  3218                                  ;-----------------------------------------------------------------------------
  3219                                  
  3220                                  date_error:				
  3221 0000168B F9                      		stc
  3222                                  date_err2:
  3223 0000168C C3                      		retn
  3224                                  
  3225                                  ; =============== S U B	R O U T	I N E ========================================
  3226                                  
  3227                                  ; time_verify very loosely checks bcd date values to be in range
  3228                                  ; in bin_date_time
  3229                                  
  3230                                  time_verify:	; proc near		
  3231 0000168D 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3232 00001692 770C                    		ja	short time_error
  3233 00001694 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3234 00001699 7705                    		ja	short time_error
  3235                                  		; 12/12/2022h
  3236                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3237                                  		;ja	short time_error
  3238                                  		;clc
  3239                                  		;retn
  3240                                  		; 12/12/2022
  3241 0000169B 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3242                                  time_error:
  3243                                  bv_error:	
  3244 000016A0 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3245 000016A1 C3                      		retn
  3246                                  
  3247                                  ; ----------------------------------------------------------------------------
  3248                                  
  3249                                  ;time_error:				
  3250                                  		;stc
  3251                                  		;retn
  3252                                  
  3253                                  ; =============== S U B	R O U T	I N E ========================================
  3254                                  
  3255                                  ;   bcd_verify checks values in bin_date_time to be valid
  3256                                  ;   bcd numerals.  carry set if any nibble out of range
  3257                                  
  3258                                  bcd_verify:	; proc near		
  3259 000016A2 B90400                  		mov	cx, 4		; 4 bytes to check
  3260 000016A5 BB[BF06]                		mov	bx, bin_date_time
  3261                                  bv_loop:				
  3262 000016A8 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3263 000016AA 88C4                    		mov	ah, al
  3264 000016AC 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3265                                  					; is 1's place in range?
  3266 000016AF 3C0A                    		cmp	al, 10
  3267 000016B1 77ED                    		ja	short bv_error	; jmp out of range
  3268 000016B3 D0EC                    		shr	ah, 1
  3269 000016B5 D0EC                    		shr	ah, 1
  3270 000016B7 D0EC                    		shr	ah, 1
  3271 000016B9 D0EC                    		shr	ah, 1
  3272 000016BB 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3273 000016BE 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3274 000016C1 77DD                    		ja	short bv_error	; jmp out of range
  3275 000016C3 43                      		inc	bx		; next byte
  3276 000016C4 49                      		dec	cx
  3277 000016C5 75E1                    		jnz	short bv_loop
  3278 000016C7 F8                      		clc			; set success flag
  3279 000016C8 C3                      		retn
  3280                                  ; ----------------------------------------------------------------------------
  3281                                  
  3282                                  		; 12/12/2022
  3283                                  ;bv_error:				
  3284                                  		;stc			; set error flag
  3285                                  		;retn
  3286                                  
  3287                                  ; ----------------------------------------------------------------------------
  3288                                  
  3289                                  endk09:
  3290                                  
  3291                                  ; ----------------------------------------------------------------------------
  3292                                  
  3293                                  ;------------------------------------------------------------------------
  3294                                  ;									:
  3295                                  ;	System initialization						:
  3296                                  ;									:
  3297                                  ;	The entry conditions are established by the bootstrap		:
  3298                                  ;	loader and are considered unknown. The following jobs		:
  3299                                  ;	will be performed by this module:				:
  3300                                  ;									:
  3301                                  ;	1.	All device initialization is performed			:
  3302                                  ;	2.	A local stack is set up and DS:SI are set		:
  3303                                  ;		to point to an initialization table. Then		:
  3304                                  ;		an inter-segment call is made to the first		:
  3305                                  ;		byte of the dos 					:
  3306                                  ;	3.	Once the dos returns from this call the ds		:
  3307                                  ;		register has been set up to point to the start		:
  3308                                  ;		of free memory. The initialization will then		:
  3309                                  ;		load the command program into this area 		:
  3310                                  ;		beginning at 100 hex and transfer control to		:
  3311                                  ;		this program.						:
  3312                                  ;									:
  3313                                  ;------------------------------------------------------------------------
  3314                                  
  3315                                  ; 01/10/2022
  3316                                  ; 08/01/2018 - Retro DOS v4.0
  3317                                  
  3318                                  ; drvfat must be the first location of freeable space!
  3319                                  
  3320                                  
  3321 000016C9 90                      align 2
  3322                                  		;db 90h
  3323                                  
  3324                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3325                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3326                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3327                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3328                                  	
  3329 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3330                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3331                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3332                                  ;doscnt:	dw 0			; how many sectors to read
  3333 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3334                                  ;fatloc:	dw 0			; seg addr of fat sector
  3335 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3336 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3337                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3338                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3339                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3340                                  
  3341                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3342                                  ; call to determine drive parameters.
  3343                                  
  3344 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3345 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3346 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3347 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3348                                  
  3349                                  ; ----------------------------------------------------------------------------
  3350                                  
  3351 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3352 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3353 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3354 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3355 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3356                                  					; the assumption of total fat size <= 128 kb,
  3357                                  					; and the maximum size of fat entry = 16 bit.
  3358                                  
  3359 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3359 00001705 00                 
  3360                                  					; for compatibility.
  3361 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3361 0000170F 00                 
  3362                                  					; fbig = 40h
  3363 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3363 00001719 00                 
  3364 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3364 00001723 00                 
  3365 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3365 0000172D 00                 
  3366 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3366 00001737 00                 
  3367 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3367 00001741 00                 
  3368                                  					
  3369                                  ; ----------------------------------------------------------------------------
  3370                                  
  3371                                  ;******************************************************
  3372                                  ;variables for mini disk initialization
  3373                                  ;******************************************************
  3374                                  
  3375                                  ; 01/10/2022
  3376                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3377                                  
  3378 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3379 00001743 00                      hnum:		db 0			; real number of hardfiles
  3380 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3381 00001746 [1609]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3382                                  					; of bds table. needed to figure out
  3383                                  					; the dosdatasg address.
  3384 00001748 0000                    mini_hdlim:	dw 0			
  3385 0000174A 0000                    mini_seclim:	dw 0
  3386                                  
  3387                                  ;end of mini disk init variables **********************
  3388                                  
  3389                                  ; ----------------------------------------------------------------------------
  3390                                  			
  3391 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3392                                  
  3393                                  ; 13/12/2022
  3394                                  %if 0
  3395                                  
  3396                                  ;align 2
  3397                                  		db  90h	
  3398                                  
  3399                                  ; the following are the recommended bpbs for the media that we know of so far.
  3400                                  
  3401                                  ;struc bpbx
  3402                                  ;   resw 1 ; 512
  3403                                  ;   resb 1
  3404                                  ;   resw 1 ; 1
  3405                                  ;   resb 1 ; 2
  3406                                  ;   resw 1
  3407                                  ;   resw 1
  3408                                  ;   resb 1
  3409                                  ;   resw 1
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; 2
  3412                                  ;   resw 1
  3413                                  ;   resw 1 ; hidden sector high
  3414                                  ;   resd 1 ; extended total sectors
  3415                                  ;.size:
  3416                                  ;endstruc
  3417                                  
  3418                                  ; 08/01/2019 - Retro DOS v4.0
  3419                                  
  3420                                  ; 20/04/2019
  3421                                  
  3422                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3423                                  
  3424                                  ; 09/12/2022
  3425                                  BPB48T:
  3426                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3427                                  		; 48 tpi diskettes	;
  3428                                  		dw	512		; physical sector size in bytes
  3429                                  		db	2		; sectors/allocation unit
  3430                                  		dw	1		; reserved sectors for dos
  3431                                  		db	2		; number of allocation tables
  3432                                  		dw	112		; number of directory entries
  3433                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3434                                  		db	0FDh		; media descriptor
  3435                                  		dw	2		; number of fat sectors
  3436                                  		dw	9		; sectors per track
  3437                                  		dw	2		; heads
  3438                                  		dw	0		; hidden sector count (low word)
  3439                                  		dw	0		; hidden sector (high)
  3440                                  		dw	0		; number of sectors (low)
  3441                                  		dw	0		; number of sectors (high)					
  3442                                  
  3443                                  		db 90h
  3444                                  ;align 2
  3445                                  BPB96T:
  3446                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3447                                  		; 96 tpi diskettes	;
  3448                                  		dw	512		; physical sector size in bytes
  3449                                  		db	1		; sectors/allocation unit
  3450                                  		dw	1		; reserved sectors for dos
  3451                                  		db	2		; number of allocation tables
  3452                                  		dw	224		; number of directory entries
  3453                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3454                                  		db	0F9h		; media descriptor
  3455                                  		dw	7		; number of fat sectors
  3456                                  		dw	15		; sectors per track
  3457                                  		dw	2		; heads
  3458                                  		dw	0		; hidden sector count (low word)
  3459                                  		dw	0		; hidden sector (high)
  3460                                  		dw	0		; number of sectors (low)
  3461                                  		dw	0		; number of sectors (high)
  3462                                  
  3463                                  		db 90h
  3464                                  ;align 2
  3465                                  BPB35:
  3466                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3467                                  		; 3.5" diskettes - 720 KB ;		
  3468                                  		dw	512		; physical sector size in bytes
  3469                                  		db	2		; sectors/allocation unit
  3470                                  		dw	1		; reserved sectors for dos
  3471                                  		db	2		; number of allocation tables
  3472                                  		dw	112		; number of directory entries
  3473                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3474                                  		db	0F9h		; media descriptor
  3475                                  		dw	3		; number of fat sectors
  3476                                  		dw	9		; sectors per track
  3477                                  		dw	2		; heads
  3478                                  		dw	0		; hidden sector count (low word)
  3479                                  		dw	0		; hidden sector (high)
  3480                                  		dw	0		; number of sectors (low)
  3481                                  		dw	0		; number of sectors (high)
  3482                                  
  3483                                  		db 90h
  3484                                  ;align 2
  3485                                  
  3486                                  ;align 2
  3487                                  ;BPB144:
  3488                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3489                                  ;
  3490                                  ;		dw	512		; physical sector size in bytes
  3491                                  ;		db	1		; sectors/allocation unit
  3492                                  ;		dw	1		; reserved sectors for dos
  3493                                  ;		db	2		; number of allocation tables
  3494                                  ;		dw	224		; number of directory entries
  3495                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3496                                  ;		db	0F0h		; media descriptor
  3497                                  ;		dw	9		; number of fat sectors
  3498                                  ;		dw	18		; sectors per track
  3499                                  ;		dw	2		; heads
  3500                                  ;		dw	0		; hidden sector count (low word)
  3501                                  ;		dw	0		; hidden sector (high)
  3502                                  ;		dw	0		; number of sectors (low)
  3503                                  ;		dw	0		; number of sectors (high)
  3504                                  ;
  3505                                  ;		db 90h
  3506                                  ;align 2
  3507                                  
  3508                                  BPB288:
  3509                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3510                                  		; 3.5" diskettes - 2.88 MB ;	 
  3511                                  		dw	512		; physical sector size in bytes
  3512                                  		db	2		; sectors/allocation unit
  3513                                  		dw	1		; reserved sectors for dos
  3514                                  		db	2		; number of allocation tables
  3515                                  		dw	240		; number of directory entries
  3516                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3517                                  		db	0F0h		; media descriptor
  3518                                  		dw	3		; number of fat sectors
  3519                                  		dw	9		; sectors per track
  3520                                  		dw	2		; heads
  3521                                  		dw	0		; hidden sector count (low word)
  3522                                  		dw	0		; hidden sector (high)
  3523                                  		dw	0		; number of sectors (low)
  3524                                  		dw	0		; number of sectors (high)
  3525                                  
  3526                                  		db 90h			;
  3527                                  ;align 2
  3528                                  
  3529                                  %endif
  3530                                  
  3531                                  ; ----------------------------------------------------------------------------
  3532                                  					; align	2
  3533                                  ; 09/12/2022
  3534                                  %if 0
  3535                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3536                                  		dw bpb96t		; 96tpi	drives
  3537                                  		dw bpb35		; 3.5" drives
  3538                                  		dw bpb35		; unused 8" diskette
  3539                                  		dw bpb35		; unused 8" diskette
  3540                                  		dw bpb35		; used for hard	disk
  3541                                  		dw bpb35		; used for tape	drive
  3542                                  		dw bpb35		; FFOTHER
  3543                                  		dw bpb35		; ERIMO
  3544                                  		dw bpb288		; 2.88MB drive
  3545                                  		;
  3546                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3547                                  %endif
  3548                                  
  3549                                  ; 13/12/2022
  3550                                  %if 0
  3551                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3552                                  		dw BPB96T		; 96tpi	drives
  3553                                  		dw BPB35		; 3.5" drives
  3554                                  		dw BPB35		; unused 8" diskette
  3555                                  		dw BPB35		; unused 8" diskette
  3556                                  		dw BPB35		; used for hard	disk
  3557                                  		dw BPB35		; used for tape	drive
  3558                                  		dw BPB35		; FFOTHER
  3559                                  		dw BPB35		; ERIMO
  3560                                  		dw BPB288		; 2.88MB drive
  3561                                  		;
  3562                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3563                                  
  3564                                  %endif
  3565                                  
  3566                                  ; ----------------------------------------------------------------------------
  3567                                  
  3568                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3569                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3570                                  ;	  will not yet be moved to its final resting place, so we know
  3571                                  ;	  it'll be low.
  3572                                  ;
  3573                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3574                                  ;	  the function you want to call in Bios_Code. This routine will
  3575                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3576                                  ;	  will get executed when the utility function finishes. It will
  3577                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3578                                  ;	  and a retf
  3579                                  
  3580                                  ; 16/10/2022
  3581                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3582                                  ; 09/12/2022
  3583                                  BC_RETF equ bc_retf
  3584                                  
  3585                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3586                                  					; 2C7h:0C8h = 70h:2638h
  3587 00001755 [C800]                  		dw BC_RETF
  3588                                  
  3589                                  ; ----------------------------------------------------------------------------
  3590                                  
  3591                                  call_bios_code:	; proc far			
  3592 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3593                                  					; set up near return to far return
  3594 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3595 00001761 55                      		push	bp		; save offset of utility function
  3596 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3597                                  
  3598                                  ; ----------------------------------------------------------------------------
  3599                                  		
  3600                                  		; 20/12/2022
  3601                                  ;flp_drvs	db 0			
  3602                                  
  3603                                  ; ----------------------------------------------------------------------------
  3604                                  
  3605                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3606                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3607                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3608                                  
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  ; entry point from boot sector
  3611                                  ;-----------------------------------------------------------------------------
  3612                                  
  3613                                  init:		; 27/12/2018
  3614                                  		; MSDOS 6.0 (MSINIT.ASM)
  3615                                  		;=============================================================
  3616                                  		;
  3617                                  		; entry from boot sector. the register contents are:
  3618                                  		;
  3619                                  		;   dl = int 13 drive number we booted from
  3620                                  		;   ch = media byte
  3621                                  		;   bx = first data sector on disk.
  3622                                  		;   ax = first data sector (high)
  3623                                  		;   di = sectors/fat for the boot media.
  3624                                  
  3625                                  		; 07/04/2018
  3626                                  		;=============================================================
  3627                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3628                                                  ; DL = [bsDriveNumber]
  3629                                  		; DH = [bsMedia]
  3630                                  		; AX = [bsSectors] ; Total sectors
  3631                                  		; DS = 0, SS = 0
  3632                                  		; BP = 7C00h
  3633                                  
  3634                                  		; 29/09/2023
  3635                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  3636                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  3637                                  	
  3638                                  ; 20/12/2022
  3639                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3640                                  %if 0	
  3641                                  		cli
  3642                                  
  3643                                  		push	ax
  3644                                  		xor	ax, ax
  3645                                  		mov	ds, ax
  3646                                  		pop	ax
  3647                                  %endif
  3648                                  
  3649                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3650                                  
  3651                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3652                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3653                                  
  3654                                  ;-----------------------------------------------------------------------------
  3655                                  ; initialization - stage 1
  3656                                  ;-----------------------------------------------------------------------------
  3657                                  ; 02/06/2018 - Retro DOS v3.0
  3658                                  		
  3659                                  		; 21/12/2022
  3660                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3661                                  		;mov	bx, 60h
  3662                                  		;mov	es, bx
  3663                                  		;mov	si, bp
  3664                                  		;sub	di, di
  3665                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3666                                  		;;mov	cl, 35
  3667                                  		;rep	movsw
  3668                                  
  3669 00001763 0E                      		push	cs
  3670 00001764 1F                      		pop	ds
  3671                                  
  3672                                  		; 20/03/2019 - Retro DOS v4.0
  3673                                  		;cli		; turn interrupts off while manupulating stack
  3674                                  		;mov	ss, cx	; set stack segment register
  3675 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3676                                  		;sti		; turn interrupts on
  3677                                  
  3678                                  		; 27/03/2018
  3679                                  		;mov	cx, KERNEL_SIZE	; words !
  3680                                  
  3681                                  		; 20/03/2019
  3682 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3683                                  
  3684                                  		; 21/12/2022
  3685                                  		; 07/04/2018
  3686 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3687                                  		;mov	bl, KERNEL_SEGMENT
  3688 0000176E 8EC3                    		mov	es, bx
  3689 00001770 31FF                    		xor	di, di
  3690 00001772 89FE                    		mov	si, di
  3691                                  		
  3692                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3693                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3694 00001774 F3A5                    		rep	movsw
  3695                                  
  3696                                  		; 20/03/2019 - Retro DOS v4.0
  3697 00001776 53                      		push	bx
  3698 00001777 68[7B17]                		push	init0
  3699 0000177A CB                      		retf
  3700                                  init0:	
  3701                                  		; 20/12/2022
  3702                                  		; (combined kernel file > 64KB)
  3703                                  
  3704                                  		; 20/03/2019
  3705 0000177B B520                    		mov	ch, 20h
  3706 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3707                                  		;mov	cx, 1070h
  3708 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3709 00001782 8EC1                    		mov	es, cx
  3710                                  		
  3711                                  		; 21/12/2022
  3712                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3713                                  		; 28/09/2023
  3714                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  3715                                  
  3716                                  		;mov	cx, KERNEL_SIZE - 32768
  3717                                  		; 28/09/2023 (BugFix)
  3718 00001784 B97D01                  		mov	cx, NXWORDCOUNT
  3719                                  		;shr	cx, 1 ; 28/09/2023
  3720                                  		;xor	si, si
  3721                                  		;xor	di, di
  3722 00001787 F3A5                    		rep	movsw
  3723                                  
  3724                                  		; 28/09/2023
  3725                                  		;; 17/06/2018 
  3726                                  		;mov	ds, bx
  3727                                  		;; 21/03/2019
  3728                                  		;mov	es, bx
  3729                                  ;init0:
  3730                                  ;		;push	es
  3731                                  ;		push	bx ; 20/03/2019
  3732                                  ;		push	init1 ; 07/04/2018
  3733                                  ;		retf	; jump to 0070h:init1
  3734                                  ;init:
  3735                                  init1:
  3736                                  		; 20/12/2022
  3737                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3738                                  		; for full MSDOS compatibility.
  3739                                  
  3740 00001789 8EC1                    		mov	es, cx ; 0
  3741 0000178B 8ED9                    		mov	ds, cx ; 0
  3742                                  
  3743 0000178D B82205                  		mov	ax, SEC9
  3744                                  
  3745                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3746 00001790 B378                    		mov	bl, 1Eh*4
  3747                                  				; INT 1Eh points to diskette parms table
  3748                                  
  3749                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3750                                   		; (do not move the DPT if is not original ROMBIOS table)
  3751                                  
  3752                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3753                                  		;;jnz	short mov_dpt
  3754                                  
  3755                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3756                                  		;je	short dont_mov_dpt
  3757                                  
  3758                                  		;mov	si, [bx] ; [1Eh*4]		
  3759                                  ;mov_dpt:
  3760                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3761 00001792 C537                    		lds	si, [bx]
  3762 00001794 89C7                    		mov	di, ax  ; SEC9
  3763 00001796 B10B                    		mov	cl, 11
  3764                                  		;cld
  3765 00001798 F3A4                    		rep	movsb
  3766                                  
  3767                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3768 0000179A 8ED9                    		mov	ds, cx ; 0
  3769 0000179C 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3770 0000179E 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3771                                  ;dont_mov_dpt:
  3772                                  
  3773                                  ; 20/12/2022 - Retro DOS v4.0
  3774                                  %if 0
  3775                                  		; 27/12/2018 - Retro DOS v4.0
  3776                                  		; 'Starting MS-DOS...' message
  3777                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3778                                  		; (0070h:96A3h)
  3779                                  
  3780                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3781                                  		mov     ah, 0Eh
  3782                                  		;bh = 0
  3783                                          	mov     bl, 7		; "normal" attribute and page
  3784                                  startmsg_nxt_chr:  
  3785                                  		lodsb
  3786                                  		or	al, al
  3787                                          	jz	short startmsg_ok
  3788                                         
  3789                                  		int	10h		; video write
  3790                                          	jmp	short startmsg_nxt_chr
  3791                                  
  3792                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3793                                  
  3794                                  startmsg_ok:
  3795                                  
  3796                                  %endif
  3797                                  
  3798                                  ;-----------------------------------------------------------------------------
  3799                                  ; initialization - stage 2
  3800                                  ;-----------------------------------------------------------------------------
  3801                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3802                                  
  3803                                  
  3804                                  ; 19/03/2018
  3805                                  ; Retro DOS v2.0 (24/02/2018)
  3806                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3807                                  
  3808                                  ;------------------------------------------------------------------------
  3809                                  ;									:
  3810                                  ;	System initialization						:
  3811                                  ;									:
  3812                                  ;	The entry conditions are established by the bootstrap		:
  3813                                  ;	loader and are considered unknown. The following jobs		:
  3814                                  ;	will be performed by this module:				:
  3815                                  ;									:
  3816                                  ;	1.	All device initialization is performed			:
  3817                                  ;	2.	A local stack is set up and DS:SI are set		:
  3818                                  ;		to point to an initialization table. Then		:
  3819                                  ;		an inter-segment call is made to the first		:
  3820                                  ;		byte of the dos 					:
  3821                                  ;	3.	Once the dos returns from this call the ds		:
  3822                                  ;		register has been set up to point to the start		:
  3823                                  ;		of free memory. The initialization will then		:
  3824                                  ;		load the command program into this area 		:
  3825                                  ;		beginning at 100 hex and transfer control to		:
  3826                                  ;		this program.						:
  3827                                  ;									:
  3828                                  ;------------------------------------------------------------------------
  3829                                  		
  3830                                  		; 20/12/2022
  3831                                  		; ----------------------
  3832                                  		; Registers
  3833                                  		; ----------------------
  3834                                  		; DL = [bsDriveNumber]
  3835                                  		; DH = [bsMedia]
  3836                                  		; DS = 0, ES = 0, SS = 0
  3837                                  		; BP = 7C00h
  3838                                  		; SP = 700h
  3839                                  		; ----------------------
  3840                                  		; CX = 0				
  3841                                  
  3842                                  ; 02/10/2022 - 20/12/2022
  3843                                  ; ------------------------------------------------------------------------------
  3844                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3845                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3846                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3847                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3848                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3849                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3850                                  ; ------------------------------------------------------------------------------
  3851                                  
  3852                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3853                                  ;
  3854                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3855                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3856                                  ;;	data sector of the bios.
  3857                                  ;
  3858                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3859                                  ;		mov	[cs:bios_l], bx
  3860                                  
  3861                                  ; with the following information from msload, we don't need the
  3862                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3863                                  ;     limitation of msbio.com file.
  3864                                  
  3865                                  		; 14/12/2023
  3866                                  		; 21/12/2022
  3867                                  		;cli
  3868                                  
  3869 000017A1 0E                      		push	cs		; Save a peck of interrupt vectors...
  3870 000017A2 07                      		pop	es
  3871                                  		;push	cx
  3872                                  		;push	di
  3873                                  		; 20/12/2022
  3874 000017A3 B105                    		mov	cl, 5
  3875                                  		;mov	cx, 5		; NUMROMVECTORS
  3876                                  					; no. of rom vectors to	be saved
  3877                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3878 000017A5 BE[0001]                		mov	si, RomVectors
  3879                                  
  3880                                  		; 14/12/2023
  3881 000017A8 FA                      		cli
  3882                                  next_int_:		
  3883 000017A9 2E                      		cs	; 16/10/2022
  3884 000017AA AC                      		lodsb		
  3885                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3886 000017AB 98                      		cbw			; ax = interrupt number
  3887 000017AC D1E0                    		shl	ax, 1
  3888 000017AE D1E0                    		shl	ax, 1		; int no * 4
  3889 000017B0 89C7                    		mov	di, ax		; interrupt vector address
  3890 000017B2 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3891                                  					; saving address in di
  3892                                  		;lodsw			; movsw
  3893                                  		;stosw
  3894                                  		;lodsw			; movsw
  3895                                  		;stosw			; save the vector
  3896                                  		; 20/12/2022
  3897 000017B4 A5                      		movsw
  3898 000017B5 A5                      		movsw		
  3899                                  
  3900 000017B6 87F7                    		xchg	si, di
  3901 000017B8 E2EF                    		loop	next_int_
  3902                                  		
  3903                                  		;pop	di
  3904                                  		;pop	cx
  3905                                  
  3906                                  ; we need to save int13 in two places in case we are running on an at.
  3907                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3908                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3909                                  ; rom int13 routine, we must have that rom address also stored away.
  3910                                  
  3911                                  		; 20/12/2022
  3912                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3913                                  		;mov	[cs:Orig13], ax
  3914                                  		;mov	ax, [cs:Old13+2]
  3915                                  		;mov	[cs:Orig13+2], ax
  3916                                  
  3917                                  		; 14/12/2023
  3918                                  		;cli
  3919                                  
  3920                                  		; 16/10/2022
  3921 000017BA C7064C00[7407]          		mov	word [13h*4], block13
  3922                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3923                                  					; set up int 13	for new	action
  3924 000017C0 8C0E4E00                		mov	[13h*4+2], cs
  3925                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3926 000017C4 C7065400[4808]          		mov	word [15h*4], Int15
  3927                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3928                                  					; set up int 15	for new	action
  3929 000017CA 8C0E5600                		mov	[15h*4+2], cs
  3930                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3931 000017CE C7066400[F907]          		mov	word [19h*4], int19
  3932                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3933                                  					; set up int 19	for new	action
  3934 000017D4 8C0E6600                		mov	[19h*4+2], cs
  3935                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3936                                  
  3937                                  		; 20/12/2022
  3938 000017D8 0E                      		push	cs
  3939 000017D9 1F                      		pop	ds
  3940                                  		
  3941 000017DA A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3942 000017DD A3[B400]                		mov	[Orig13], ax
  3943 000017E0 A1[0801]                		mov	ax, [Old13+2]
  3944 000017E3 A3[B600]                		mov	[Orig13+2], ax
  3945                                  					; ;
  3946 000017E6 FB                      		sti
  3947 000017E7 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3948                                  					; Return: AX = equipment flag bits
  3949                                  
  3950                                  ; we have to support a system that does not have any diskette
  3951                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3952                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3953                                  ; otherwise, the system has only hardfiles.
  3954                                  ;
  3955                                  ; important thing is that still, for compatibility reason, the drive letter
  3956                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3957                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3958                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3959                                  ; drives will get "invalid drive letter ..." message. we are going to
  3960                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3961                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3962                                  
  3963                                  ; check the register returned by the equipment determination interrupt
  3964                                  ; we have to handle the case of no diskettes in the system by faking
  3965                                  ; two dummy drives.
  3966                                  ;
  3967                                  ; if the register indicates that we do have floppy drives we don't need
  3968                                  ; to do anything special.
  3969                                  ;
  3970                                  ; if the register indicates that we don't have any floppy drives then
  3971                                  ; what we need to do is set the fakefloppydrv variable, change the
  3972                                  ; register to say that we do have floppy drives and then go to execute
  3973                                  ; the code which starts at notsingle. this is because we can skip the
  3974                                  ; code given below which tries to find if there are one or two drives
  3975                                  ; since we already know about this.
  3976                                  
  3977                                  		; 06/05/2019 - Retro DOS v4.0
  3978 000017E9 88C1                    		mov	cl, al
  3979                                  
  3980                                  		; 12/12/2022
  3981 000017EB A801                    		test	al, 1
  3982                                  		;test	ax, 1		; floppy drives	present	?
  3983 000017ED 751E                    		jnz	short normalfloppydrv ;	yes.
  3984                                  
  3985                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3986                                  ; whether it is an old ROM BIOS or a new one
  3987                                  ;
  3988                                  ; WARNING !!!
  3989                                  ;
  3990                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3991                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3992                                  
  3993                                  		; 20/12/2022
  3994                                  		;push	ax
  3995                                  		;push	bx
  3996                                  		;push	cx
  3997 000017EF 52                      		push	dx
  3998                                  		;push	di
  3999 000017F0 06                      		push	es
  4000 000017F1 B408                    		mov	ah, 8
  4001 000017F3 B200                    		mov	dl, 0
  4002 000017F5 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4003                                  					; DL = drive number
  4004                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4005                                  					; DL = number of consecutive drives
  4006                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4007 000017F7 7202                    		jc	short _gdskp_error
  4008                                  		;;mov	[cs:flp_drvs], dl
  4009                                  		; 20/12/2022
  4010                                  		; ds = cs
  4011                                  		;mov	[flp_drvs], dl
  4012 000017F9 88D1                    		mov	cl, dl
  4013                                  _gdskp_error:	
  4014                                  		; 20/12/2022			
  4015 000017FB 07                      		pop	es
  4016                                  		;pop	di
  4017 000017FC 5A                      		pop	dx
  4018                                  		;pop	cx
  4019                                  		;pop	bx
  4020                                  		;pop	ax
  4021                                  		
  4022 000017FD 720E                    		jc	short normalfloppydrv
  4023                                  					; if error it is an old ROM BIOS
  4024                                  					; so, lets assume that ROM BIOS lied
  4025                                  		; 20/12/2022
  4026                                  		; ds = cs
  4027                                  		;cmp	byte [flp_drvs], 0
  4028                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4029                                  		;jz	short _set_fake_flpdrv
  4030                                  		;;mov	al, [cs:flp_drvs]
  4031                                  		;mov	al, [flp_drvs]
  4032                                  		;;dec	al		; make it zero based
  4033                                  		;; 18/12/2022
  4034                                  		;dec	ax
  4035                                  		;jmp	short got_num_flp_drvs
  4036                                  		
  4037                                  		; 20/12/2022
  4038 000017FF 08C9                    		or	cl, cl ; [flp_drvs]
  4039 00001801 7403                    		jz	short _set_fake_flpdrv		
  4040 00001803 49                      		dec	cx	
  4041 00001804 EB0B                    		jmp	short got_num_flp_drvs
  4042                                  ; ----------------------------------------------------------------------------
  4043                                  
  4044                                  _set_fake_flpdrv:
  4045                                  		; 20/12/2022
  4046                                  		; ds = cs
  4047                                  		;inc	cl	; cl = 1
  4048                                  		; 14/12/2023
  4049 00001806 41                      		inc	cx	; cl = 1
  4050 00001807 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4051                                  		;mov	byte [fakefloppydrv], 1
  4052                                  		;;mov	byte [cs:fakefloppydrv], 1
  4053                                  					; we don't have any floppy drives.
  4054                                  		; 20/12/2022
  4055                                  		;mov	ax, 1
  4056 0000180B EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4057                                  ; ----------------------------------------------------------------------------
  4058                                  
  4059                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4060                                  		; 20/12/2022
  4061                                  		;rol	al, 1		; there	exist floppy drives.
  4062                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4063 0000180D D0C1                    		rol	cl, 1
  4064 0000180F D0C1                    		rol	cl, 1
  4065                                  got_num_flp_drvs:			
  4066                                  		;;and	ax, 3		; only look at bits 0 &	1
  4067                                  		; 18/12/2022
  4068                                  		;and	al, 3
  4069                                  		; 20/12/2022
  4070 00001811 80E103                  		and	cl, 3
  4071 00001814 7505                    		jnz	short notsingle	; zero means single drive system
  4072                                  		; 20/12/2022
  4073 00001816 41                      		inc	cx
  4074                                  		;inc	ax		; pretend it's a two drive system
  4075                                  settwodrive:				; set this to two fakedrives
  4076                                  		; 20/12/2022
  4077                                  		; ds = cs
  4078 00001817 FE06[7800]              		inc	byte [single]
  4079                                  		;inc	byte [cs:single] ; remember this
  4080                                  notsingle:	
  4081                                  		; 20/12/2022
  4082                                  		;inc	ax		; ax has number	of drives, 2-4
  4083                                  		;			; is also 0 indexed boot drive if we
  4084                                  		;			; booted off hard file
  4085                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4086                                  
  4087                                  		; 20/12/2022
  4088                                  		;inc	cl	; cl >= 2
  4089                                  		; 14/12/2023
  4090 0000181B 41                      		inc	cx	; cl >= 2
  4091                                  
  4092                                  ; 16/10/2022
  4093                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4094                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4095                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4096                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4097                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4098                                  SEC9	EQU	522h	; address of disk parameters
  4099                                  CHROUT	EQU	29h
  4100                                  LSTDRV	EQU     504h
  4101                                  
  4102                                  ; determine whether we booted from floppy or hard disk...
  4103                                  
  4104                                  		; 20/12/2022
  4105 0000181C 88C8                    		mov	al, cl	; 26/05/2019
  4106                                  
  4107 0000181E F6C280                  		test	dl, 80h		; boot from floppy ?
  4108 00001821 7502                    		jnz	short gothrd	; no.
  4109 00001823 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4110                                  gothrd:					
  4111                                  
  4112                                  ; MSDOS 6.0
  4113                                  ;   ax = 0-based drive we booted from
  4114                                  ;   bios_l, bios_h set.
  4115                                  ;   cl = number of floppies including fake one
  4116                                  ;   ch = media byte
  4117                                  
  4118                                  ; Retro DOS 4.0 - 27/12/2018 
  4119                                  ;  (from Retro DOS v2.0 boot sector)
  4120                                  ;   dl = int 13 drive number we booted from
  4121                                  ;   dh = media byte
  4122                                  
  4123                                  		; 20/12/2022
  4124 00001825 88F5                    		mov	ch, dh		; 01/07/2018
  4125                                  
  4126                                  		; cl = number of floppies
  4127                                  		; ch = media byte
  4128                                  
  4129                                  		; set up local stack
  4130                                  
  4131                                  		; 20/12/2022
  4132                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4133                                  					; bios_l, bios_h set.
  4134                                  					; cl = number of floppies including fake one
  4135                                  					; ch = media byte
  4136                                  		; 20/12/2022
  4137                                  		; es = ds = cs
  4138                                  		; ss = 0
  4139                                  		; sp = 700h
  4140                                  
  4141                                  		; 20/12/2022
  4142                                  		;cli
  4143                                  		;mov	ss, dx		; set stack segment and stack pointer
  4144                                  		;mov	sp, 700h
  4145                                  		;sti
  4146                                  
  4147 00001827 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4148                                  		
  4149 00001828 88EC                    		mov	ah, ch		; FAT ID to AH
  4150 0000182A 50                      		push	ax ; (**)	; save boot drive number and media byte
  4151                                  		
  4152                                  ; let model_byte, secondary_model_byte be set here!!!
  4153                                  
  4154 0000182B B4C0                    		mov	ah, 0C0h
  4155 0000182D CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4156 0000182F 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4157 00001831 80FC00                  		cmp	ah, 0
  4158 00001834 7510                    		jnz	short no_rom_system_conf
  4159                                  
  4160                                  ;		; 20/12/2022
  4161                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4162                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4163                                  ;
  4164                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4165                                  ;
  4166                                  ;		on return:
  4167                                  ;		CF = 0 if successful
  4168                                  ;		   = 1 if error
  4169                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4170                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4171                                  ;
  4172                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4173                                  ;
  4174                                  ;		Offset Size	     Description
  4175                                  ;
  4176                                  ;		  00   word   length of descriptor (8 minimum)
  4177                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4178                                  ;		  03   byte   secondary model byte
  4179                                  ;		  04   byte   BIOS revision level (zero based)
  4180                                  ;		  05   byte   feature information, see below
  4181                                  ;		  06   dword  reserved
  4182                                  
  4183                                  		; 20/12/2022
  4184                                  		; ds = cs
  4185 00001836 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4186 0000183A A2[3E06]                		mov	[model_byte], al
  4187                                  		;mov	[cs:model_byte], al
  4188                                  					; get/save model byte
  4189 0000183D 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4190 00001841 A2[3F06]                		mov	[secondary_model_byte], al
  4191                                  		;mov	[cs:secondary_model_byte], al
  4192                                  					; get/save secondary model byte
  4193 00001844 EB0C                    		jmp	short turn_timer_on
  4194                                  ;-----------------------------------------------------------------------------
  4195                                  
  4196                                  no_rom_system_conf:			
  4197 00001846 BEFFFF                  		mov	si, 0FFFFh
  4198 00001849 8EC6                    		mov	es, si
  4199                                  		; 20/12/2022
  4200 0000184B 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4201 0000184F A2[3E06]                		mov	[model_byte], al
  4202                                  		;mov	[cs:model_byte], al ; save model byte
  4203                                  turn_timer_on:				
  4204 00001852 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4205 00001854 E620                    		out	20h, al		; Interrupt controller,	8259A.
  4206                                  					; AKPORT
  4207                                  
  4208                                  ; some olivetti m24 machines have an 8530 serial communications
  4209                                  ; chip installed at io address 50h and 52h. if we're running
  4210                                  ; on one of those, we must inhibit the normal aux port initialization
  4211                                  
  4212                                  		; 20/12/2022
  4213                                  		; ds = cs
  4214 00001856 803E[3E06]00            		cmp	byte [model_byte], 0
  4215                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4216 0000185B 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4217                                  					; (except olivetti m24)
  4218 0000185D E466                    		in	al, 66h		; is 8530 installed?
  4219 0000185F A820                    		test	al, 20h
  4220 00001861 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4221 00001863 B00F                    		mov	al, 0Fh		; double check
  4222 00001865 E650                    		out	50h, al
  4223 00001867 E450                    		in	al, 50h
  4224 00001869 A801                    		test	al, 1		; this test was	copied from olivetti
  4225 0000186B 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4226                                  
  4227                                  not_olivetti_m24:
  4228 0000186D B003                    		mov	al, 3		; init com4
  4229 0000186F E87308                  		call	aux_init
  4230 00001872 B002                    		mov	al, 2		; init com3
  4231 00001874 E86E08                  		call	aux_init
  4232 00001877 B001                    		mov	al, 1		; init com2
  4233 00001879 E86908                  		call	aux_init
  4234 0000187C 30C0                    		xor	al, al		; init com1
  4235 0000187E E86408                  		call	aux_init
  4236                                  
  4237                                  skip_aux_port_init:			
  4238 00001881 B002                    		mov	al, 2		; init lpt3
  4239 00001883 E85708                  		call	print_init
  4240 00001886 B001                    		mov	al, 1		; init lpt2
  4241 00001888 E85208                  		call	print_init
  4242 0000188B 30C0                    		xor	al, al		; init lpt1
  4243 0000188D E84D08                  		call	print_init
  4244                                  
  4245 00001890 31D2                    		xor	dx, dx	; 0
  4246 00001892 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4247 00001894 8EC2                    		mov	es, dx
  4248 00001896 31C0                    		xor	ax, ax
  4249                                  		; 16/10/2022
  4250 00001898 BF3405                  		mov	di, INITSPOT	; 0534h
  4251                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4252                                  					; IBM wants 4 zeros here
  4253 0000189B AB                      		stosw
  4254 0000189C AB                      		stosw
  4255 0000189D 8CC8                    		mov	ax, cs		; fetch	segment
  4256 0000189F C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4257                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4258                                  					; break	entry point
  4259 000018A5 A36E00                  		mov	[BRKADR+2], ax		
  4260                                  		;mov	ds:6Eh,	ax	; vector for break
  4261 000018A8 C706A400[6207]          		mov	word [CHROUT*4], outchr
  4262                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4263 000018AE A3A600                  		mov	[CHROUT*4+2], ax
  4264                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4265                                  
  4266 000018B1 BF0400                  		mov	di, 4
  4267 000018B4 BB[F406]                		mov	bx, intret ; 19/10/2022
  4268                                  		;mov	bx, offset intret ; intret (cs:intret)
  4269                                  					; will initialize rest of interrupts
  4270 000018B7 93                      		xchg	ax, bx
  4271 000018B8 AB                      		stosw			; location 4
  4272 000018B9 93                      		xchg	ax, bx		; cs:
  4273 000018BA AB                      		stosw			; int 1	; location 6
  4274 000018BB 83C704                  		add	di, 4
  4275 000018BE 93                      		xchg	ax, bx
  4276 000018BF AB                      		stosw			; location 12
  4277 000018C0 93                      		xchg	ax, bx		; cs:
  4278 000018C1 AB                      		stosw			; int 3	; location 14
  4279 000018C2 93                      		xchg	ax, bx
  4280 000018C3 AB                      		stosw			; location 16
  4281 000018C4 93                      		xchg	ax, bx		; cs:
  4282 000018C5 AB                      		stosw			; int 4	; location 18
  4283                                  
  4284                                  
  4285                                  ;		; 20/12/2022
  4286                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4287                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4288                                  ;	
  4289                                  ;		50:00	byte	Print screen status byte
  4290                                  ;				 00 = PrtSc not active,
  4291                                  ;				 01 = PrtSc in progress
  4292                                  ;				 FF = error
  4293                                  ;		50:01  3 bytes	Used by BASIC
  4294                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4295                                  ;		50:05  10bytes	POST work area
  4296                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4297                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4298                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4299                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4300                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4301                                  ;		50:20	word	DOS dynamic storage
  4302                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4303                                  ;		50:30	4bytes	MODE command
  4304                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4305                                  
  4306 000018C6 89160005                		mov	[0500h], dx ; 0
  4307                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4308 000018CA 89160405                		mov	[LSTDRV], dx	; [0504h]
  4309                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4310                                  
  4311                                  ; we need to initialize the cs:motorstartup variable from the disk
  4312                                  ; parameter table at sec9. the offsets in this table are defined in
  4313                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4314                                  
  4315 000018CE A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4316                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4317                                  					; [522h+0Ah]
  4318                                  		; 20/12/2022
  4319                                  		; ds = 0
  4320                                  
  4321 000018D1 2EA2[2601]              		mov	[cs:motorstartup], al
  4322 000018D5 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4323 000018DB 720B                    		jb	short no_diddle	; no
  4324 000018DD C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4325                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4326                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4327 000018E3 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4328                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4329                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4330                                  no_diddle:				
  4331 000018E8 CD12                    		int	12h		; MEMORY SIZE -
  4332                                  					; Return: AX = number of contiguous 1K blocks of memory
  4333 000018EA B106                    		mov	cl, 6
  4334 000018EC D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4335                                  		
  4336                                  		; 20/12/2022
  4337                                  		; 03/07/2018 - 27/12/2018
  4338                                  		;pop	cx ; (**)
  4339                                  		;mov	[cs:drvfat], cx
  4340                                  		
  4341 000018EE 50                      		push	ax ; (*)	; save real top	of memory
  4342                                  
  4343                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4344                                  
  4345                                  ;M068 - BEGIN
  4346                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4347                                  
  4348                                  		; 20/12/2022
  4349                                  		; ds = 0
  4350                                  
  4351                                  		;push	ds
  4352                                  		;push	bx		; pushes not required but since this
  4353                                  					; happens to be a last minute change
  4354                                  					; & since it is only init code.
  4355                                  		;xor	bx, bx
  4356                                  		;mov	ds, bx
  4357                                  
  4358                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  4359                                  		;mov	bx, [2Fh*4]
  4360                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4361                                  		;mov	ds, [2Fh*4+2]
  4362                                  		; 29/09/2023
  4363 000018EF C51EBC00                		lds	bx, [2Fh*4]
  4364                                  
  4365 000018F3 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4366                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4367 000018F8 750F                    		jnz	short SkipRPL
  4368 000018FA 807F054C                		cmp	byte [bx+5], 'L'
  4369                                  		;cmp	byte ptr [bx+5], 'L'
  4370 000018FE 7509                    		jnz	short SkipRPL
  4371 00001900 89C2                    		mov	dx, ax		; get TOM into DX
  4372 00001902 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4373 00001905 CD2F                    		int	2Fh		; Get new TOM from any RPL
  4374 00001907 89D0                    		mov	ax, dx
  4375                                  SkipRPL:	
  4376                                  		; 20/12/2022
  4377                                  		;pop	bx
  4378                                  		;pop	ds
  4379                                  
  4380                                  ;M068 - END
  4381                                  		; 20/12/2022
  4382                                  		; 27/12/2018
  4383 00001909 0E                      		push	cs
  4384 0000190A 1F                      		pop	ds
  4385                                  
  4386                                  		; 18/03/2019 - Retro DOS v4.0
  4387                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4388                                  		;mov	[cs:fatloc], ax	; location to read fat
  4389                                  
  4390                                  		; 01/07/2018
  4391                                  		; 08/04/2018
  4392                                  		; 28/03/2018
  4393                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4394 0000190B 83E840                  		sub	ax, 64
  4395 0000190E A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4396                                  		;mov	[cs:init_bootseg], ax
  4397                                  
  4398                                  		; 27/12/2018 - Retro DOS v4.0
  4399                                  		;;pop	ax ; (*)	; get back real top of memory
  4400                                  		;pop	dx ; (*)
  4401                                  		; 29/09/2023 (BugFix)
  4402 00001911 58                      		pop	ax ; (*)	; get back real top of memory
  4403                                  
  4404                                  		; 20/12/2022
  4405                                  		; 27/12/2018
  4406 00001912 59                      		pop	cx ; (**)
  4407 00001913 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4408                                  
  4409                                  		; 20/12/2022
  4410                                  
  4411                                  		;mov	dx, 46Dh	; SYSINIT segment
  4412 00001917 BA3B04                  		mov	dx, SYSINITSEG	; 17/10/2022
  4413 0000191A 8EDA                    		mov	ds, dx
  4414                                  
  4415                                  ; set pointer to resident device driver chain
  4416                                  
  4417                                  		; 17/10/2022
  4418 0000191C C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4419                                  		;mov	word [273h], res_dev_list
  4420                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4421                                  					; [SYSINIT+DEVICE_LIST]
  4422 00001922 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4423                                  		;mov	[275h], cs
  4424                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4425                                  
  4426 00001926 A3[9202]                		mov	[MEMORYSIZE], ax
  4427                                  		;mov	[292h], ax
  4428                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4429                                  
  4430 00001929 FEC1                    		inc	cl
  4431 0000192B 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4432                                  		;mov	[296h], cl
  4433                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4434                                  
  4435 0000192F C706[7102]BA07          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4436                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4437                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4438                                  					; dos_load_seg
  4439                                  
  4440                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4441                                  ; printer cards. we initialize this value to point to an iret only if
  4442                                  ;
  4443                                  ; 1) the original segment points to storage inside valid ram.
  4444                                  ;
  4445                                  ; 2) the original segment is 0F000:xxxx
  4446                                  
  4447                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4448                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4449                                  		;mov	es, ax
  4450                                  		; 20/12/2022
  4451                                  		;push	ds ; SYSINITSEG
  4452                                  		;pop	es
  4453 00001935 8EC2                    		mov	es, dx ; SYSINITSEG
  4454 00001937 31C0                    		xor	ax, ax ; 0
  4455 00001939 8ED8                    		mov	ds, ax		; segment 0
  4456                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4457 0000193B A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4458                                  		; 18/10/2022
  4459 0000193E 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4460                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4461 00001943 7605                    		jbe	short resetintf
  4462 00001945 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4463 00001948 750A                    		jnz	short keepintf
  4464                                  resetintf:	
  4465 0000194A C7063C00[F406]          		mov	word [0Fh*4], intret			
  4466                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4467 00001950 8C0E3E00                		mov	word [0Fh*4+2], cs
  4468                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4469                                  keepintf:				
  4470                                  ; end important
  4471                                  
  4472                                  ; 17/10/2022
  4473                                  ; 28/12/2018 - Retro DOS v4.0
  4474                                  
  4475                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4476                                  ;
  4477                                  ; we will check if the system has ibm extended keyboard by
  4478                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4479                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4480                                  ; for the extended keyboard function. use cx as the temporary register.
  4481                                  
  4482                                  		; 20/12/2022
  4483                                  		; ds = 0
  4484                                  		;xor	cx, cx
  4485                                  		;mov	ds, cx
  4486                                  
  4487 00001954 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4488                                  
  4489                                  		; 20/12/2022
  4490                                  		; 20/03/2019
  4491 00001958 0E                      		push	cs
  4492 00001959 1F                      		pop	ds
  4493                                  
  4494                                  		;test	cl, 00010000b ; 10h
  4495 0000195A F6C110                  		test	cl, 10h		; extended keyboard ?
  4496 0000195D 740A                    		jz	short org_key	; no, original keyboard
  4497                                  
  4498                                  		; 20/12/2022
  4499                                  		;  ds = cs
  4500 0000195F C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4501 00001964 C606[E604]11            		mov	byte [keysts_func], 11h
  4502                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4503                                  		;mov	byte [cs:keysts_func], 11h
  4504                                  					; change for extended keyboard functions
  4505                                  org_key:
  4506                                  
  4507                                  ; 02/06/2018 - Retro DOS v3.0
  4508                                  
  4509                                  ;**************************************************************
  4510                                  ;	will initialize the number of drives
  4511                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4512                                  ;	the indications are as follows:
  4513                                  ;
  4514                                  ;	bits	7	6	drives
  4515                                  ;		0	0	1
  4516                                  ;		0	1	2
  4517                                  ;		1	0	3
  4518                                  ;		1	1	4
  4519                                  ;**************************************************************
  4520                                  		
  4521                                  		; 20/12/2022
  4522                                  		; ds = cs		
  4523                                  		;push	cs
  4524                                  		;pop	ds
  4525                                  		; 21/12/2022
  4526                                  		;push	cs
  4527                                  		;pop	es
  4528                                  
  4529 00001969 E8BA08                  		call	cmos_clock_read	; If cmos clock	exists,
  4530                                  					; then set the system time according to	that.
  4531                                  					; also,	reset the cmos clock rate.
  4532                                  		; 18/10/2022
  4533                                  		;mov	word ptr BData_start, offset harddrv ;
  4534                                  					; set up pointer to hdrive
  4535                                  		; 02/10/2022
  4536 0000196C C706[0000][1509]        		mov	word [hdrv_pat], harddrv 
  4537                                  		
  4538                                  		; 20/12/2022
  4539                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4540 00001972 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4541 00001973 30E4                    		xor	ah, ah		; chuck	fat id byte
  4542 00001975 A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4543 00001978 A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4544 0000197B D1E0                    		shl	ax, 1
  4545 0000197D 0106[4417]              		add	[last_dskdrv_table], ax
  4546                                  
  4547                                  		; 14/12/2023
  4548                                  		; 13/12/2023 - Retro DOS v4.1 IO.SYS
  4549                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS
  4550                                  		; ---------------------------------- 
  4551                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM)
  4552                                  		; ((MSDOS 6.22 IO.SYS & PCDOS 7.1 IBMBIO.COM))
  4553                                  		; ........
  4554 00001981 1E                      		push    ds
  4555 00001982 B800F0                  		mov     ax, 0F000h
  4556 00001985 8ED8                    		mov     ds, ax
  4557                                  
  4558 00001987 813EEAFF434F            		cmp	word [0FFEAh], 'CO' ; 'COMPAQ'
  4559 0000198D 751F                    		jne	short skip_mode2
  4560 0000198F 813EECFF4D50            		cmp	word [0FFECh], 'MP'
  4561 00001995 7517                    		jne	short skip_mode2
  4562 00001997 813EEEFF4151            		cmp	word [0FFEEh], 'AQ'
  4563 0000199D 750F                    		jne	short skip_mode2
  4564                                  
  4565 0000199F B800E4                  		mov	ax, 0E400h	; get advanced system info (COMPAQ ROMBIOS)
  4566 000019A2 CD15                    		int	15h
  4567 000019A4 7208                    		jc	short skip_mode2
  4568                                  		; 10/12/2023
  4569                                  		; PCDOS 7.1 IBMBIO.COM
  4570                                  		;or	bx, 0           ; or bx,40h ; enable mode 2
  4571                                  					; (MSDOS 6.0)
  4572                                  		; MSDOS 6.22 IO.SYS
  4573 000019A6 83CB40                  		or	bx, 40h		; enable mode 2 (dual harddisk controller)
  4574 000019A9 B880E4                  		mov	ax, 0E480h      ; set advanced system info (COMPAQ ROMBIOS)
  4575 000019AC CD15                    		int	15h
  4576                                  skip_mode2:
  4577 000019AE 1F                      		pop	ds
  4578                                  		; ........
  4579                                  
  4580 000019AF B280                    		mov	dl, 80h
  4581 000019B1 B408                    		mov	ah, 8
  4582 000019B3 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4583                                  					; DL = drive number
  4584                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4585                                  					; DL = number of consecutive drives
  4586                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4587 000019B5 7204                    		jc	short enddrv
  4588 000019B7 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4589                                  enddrv:
  4590                                  		; 21/12/2022
  4591 000019BB 0E                      		push	cs
  4592 000019BC 07                      		pop	es
  4593                                  
  4594                                  ; scan the list of drives to determine their type. we have three flavors of
  4595                                  ; diskette drives:
  4596                                  ;
  4597                                  ;   48tpi drives    we do nothing special for them
  4598                                  ;   96tpi drives    mark the fact that they have changeline support.
  4599                                  ;   3.5"  drives    mark changeline support and small.
  4600                                  ;
  4601                                  ; the following code uses registers for certain values:
  4602                                  ;
  4603                                  ;   dl - physical drive
  4604                                  ;   ds:di - points to current bds
  4605                                  ;   cx - flag bits for bds
  4606                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4607                                  					
  4608 000019BD 30D2                    		xor	dl, dl
  4609                                  
  4610                                  		; 20/12/2022
  4611                                  		; ds = cs
  4612                                  		; 17/06/2018		 
  4613                                  		;push	cs
  4614                                  		;pop	ds
  4615                                  
  4616 000019BF C606[2C01]09            		mov	byte [eot], 9
  4617 000019C4 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4618                                  					; to set aside two bdss	for the	two fake floppy	drives
  4619                                  
  4620                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4621                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4622                                  
  4623                                  ; check to see if we are faking floppy drives. if not we don't
  4624                                  ; do anything special. if we are faking floppy drives we need
  4625                                  ; to set aside two bdss for the two fake floppy drives. we
  4626                                  ; don't need to initalise any fields though. so starting at start_bds
  4627                                  ; use the link field in the bds structure to go to the second bds
  4628                                  ; in the list and initalise it's link field to -1 to set the end of
  4629                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4630                                  ; the bds for harddrives.
  4631                                  
  4632 000019C7 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4633 000019CC 750B                    		jnz	short loop_drive
  4634 000019CE 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4635                                  					; di <-	first bds link
  4636 000019D0 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4637                                  					; di <-	second bds link
  4638 000019D2 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4639 000019D6 E90801                  		jmp	dohard		; allocate/initialise bds for harddrives
  4640                                  ;-----------------------------------------------------------------------------
  4641                                  
  4642                                  loop_drive:				
  4643 000019D9 3A16[7500]              		cmp	dl, [drvmax]
  4644 000019DD 7203                    		jb	short got_more
  4645 000019DF E9FB00                  		jmp	done_drives
  4646                                  ;-----------------------------------------------------------------------------
  4647                                  
  4648                                  got_more:				
  4649                                  		; 14/12/2023
  4650                                  		;xor	cx, cx		; zero all flags
  4651                                  
  4652 000019E2 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4653                                  					; get next bds
  4654 000019E4 B600                    		mov	dh, 0		; ff48tpi
  4655                                  					; set form factor to 48	tpi
  4656 000019E6 C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  4657                                  		
  4658                                  		; 21/12/2022
  4659                                  		;push	ds
  4660                                  		;push	di
  4661                                  		; 14/12/2023 ; *
  4662                                  		;push	cx ; *+ ; cx = 0
  4663 000019EB 52                      		push	dx ; *+
  4664 000019EC 57                      		push	di ; *
  4665 000019ED 06                      		push	es ; es=cs=ds ; 21/12/2022
  4666                                  		; 14/12/2023
  4667 000019EE 52                      		push	dx ; *++
  4668                                  
  4669 000019EF B408                    		mov	ah, 8
  4670 000019F1 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4671                                  					; DL = drive number
  4672                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4673                                  					; DL = number of consecutive drives
  4674                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4675                                  		; 14/12/2023
  4676 000019F3 5B                      		pop	bx ; *++
  4677                                  		;jc	short noparmsfromrom
  4678                                  		; 14/12/2023
  4679 000019F4 7303                    		jnc	short chk_pfr
  4680 000019F6 E98000                  		jmp	noparmsfromrom
  4681                                  
  4682                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4683                                  ; in this case, we are going to put bogus informations to bds table.
  4684                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4685                                  ; they are calculated at the later time. this is just for the diagnostic
  4686                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4687                                  ; this should only happen with drive b.
  4688                                  
  4689                                  chk_pfr:
  4690 000019F9 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4691 000019FC 7505                    		jnz	short pfr_ok
  4692                                  
  4693                                  		;mov	ch, 39		; rom gave wrong info.
  4694                                  		;mov	cl, 9		; let's default to 360k.
  4695                                  		; 20/12/2022
  4696 000019FE B90927                  		mov	cx, 2709h
  4697                                  
  4698 00001A01 B601                    		mov	dh, 1
  4699                                  pfr_ok:					
  4700 00001A03 FEC6                    		inc	dh		; make number of heads 1-based
  4701 00001A05 FEC5                    		inc	ch		; make number of cylinders 1-based
  4702 00001A07 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4703 00001A0B 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4704 00001A0E 880E[D116]              		mov	[sec_trk], cl
  4705 00001A12 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4706                                  
  4707                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4708                                  
  4709 00001A16 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4710                                  		;jbe	short eot_ok
  4711                                  		; 09/12/2022
  4712                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4713                                  		; 14/08/2023
  4714 00001A1A 7604                    		jbe	short eotok
  4715 00001A1C 880E[2C01]              		mov	[eot], cl
  4716                                  ;eot_ok:					
  4717                                  eotok:
  4718                                  
  4719                                  ; 14/12/2023
  4720                                  ; 13/12/2023 ('chk_changeline' procedure)
  4721                                  %if 0
  4722                                  		pop	es ; es=cs=ds ; 21/12/2022
  4723                                  		pop	di ; 13/12/2023 ; *
  4724                                  		; 13/12/2023 ; *
  4725                                  		pop	dx ; *+
  4726                                  		;pop	cx ; *+
  4727                                  		;pop	di
  4728                                  		; 21/12/2022
  4729                                  		;pop	ds
  4730                                  
  4731                                  		; 14/12/2023
  4732                                  		; 13/12/2023 - Retro DOS v4.0 & v4.1 IO.SYS - BugFix ; +*+
  4733                                  		; (MSDOS 5.0 IO.SYS - BIOSDATA:1AAAh)
  4734                                  
  4735                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS - BugFix ; +*+
  4736                                  		; (MSDOS 5.0 & MSDOS 6.22 IO.SYS both have a bug here,
  4737                                  		;  they does not save CX,DX registers before INT 13h func 15h)
  4738                                  		; (this is also a ROMBIOS bug, some ROMBIOSs return number
  4739                                  		;  of sectors in cx:dx pair while others restore cx:dx)
  4740                                  		;  -- ref: Ralf Brown's Interrupt List --
  4741                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:1AF0h))
  4742                                  		; ((PCDOS 7.1 IBMBIO.COM - BIOSDATA:2119h))
  4743                                  		; (This BUG does not exist in PCDOS 7.1 IBMBIO.COM)
  4744                                  
  4745                                  		; 13/12/2023
  4746                                  		;push	cx ; *+ ; save flags (cx=0)
  4747                                  		;push	dx ; *+ ; save drive number (DL)
  4748                                  		; bl = dl = drive number ; *++
  4749                                  
  4750                                  ; Check	for presence of	changeline
  4751                                  
  4752                                  		mov	ah, 15h
  4753                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4754                                  					; DL = drive ID
  4755                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4756                                  					; CX:DX	= number of sectors on the media
  4757                                  		; 13/12/2023
  4758                                  		;pop	dx ; *+ ; restore drive number (in DL)
  4759                                  		;pop	cx ; *+ ; restore flags (cx=0)
  4760                                  		mov	cx, 0 ; 13/12/2023
  4761                                  		mov	dx, bx ; *++ ; bl = drive number
  4762                                  		jc	short changeline_done
  4763                                  
  4764                                  		cmp	ah, 2		; check	for presence of	changeline
  4765                                  		jnz	short changeline_done
  4766                                  
  4767                                  ; we have a drive with change line support.
  4768                                  
  4769                                  		or	cl, 2		; fchangeline
  4770                                  					; signal type
  4771                                  		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4772                                  %endif
  4773                                  		; 14/12/2023
  4774 00001A20 E83800                  		call	chk_changeline
  4775                                  		;jc	short changeline_done
  4776                                  
  4777                                  ; we now try to set up the form factor for the types of media that we know
  4778                                  ; and can recognise. for the rest, we set the form factor as "other".
  4779                                  
  4780                                  changeline_done:			
  4781 00001A23 803E[D216]28            		cmp	byte [num_cyln], 40
  4782 00001A28 750B                    		jnz	short try_80
  4783 00001A2A 803E[D116]09            		cmp	byte [sec_trk], 9
  4784 00001A2F 765F                    		jbe	short nextdrive
  4785                                  gotother:				
  4786 00001A31 B607                    		mov	dh, 7		; ffOther
  4787                                  					; we have a "strange" medium
  4788 00001A33 EB5B                    		jmp	short nextdrive
  4789                                  ;-----------------------------------------------------------------------------
  4790                                  
  4791                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4792                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4793                                  
  4794                                  try_80:					
  4795 00001A35 803E[D216]50            		cmp	byte [num_cyln], 80
  4796 00001A3A 75F5                    		jnz	short gotother
  4797 00001A3C B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4798 00001A3E 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4799 00001A43 744B                    		jz	short nextdrive	; yeah,	go update
  4800                                  
  4801                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4802                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4803                                  		;mov	dh, ff144
  4804                                  		;cmp	byte [sec_trk], 18
  4805                                  		;je	short nextdrive
  4806                                  
  4807 00001A45 803E[D116]0F            		cmp	byte [sec_trk], 15
  4808 00001A4A 740B                    		jz	short got96
  4809                                  		
  4810 00001A4C 803E[D116]09            		cmp	byte [sec_trk], 9
  4811 00001A51 75DE                    		jnz	short gotother
  4812                                  		
  4813 00001A53 B602                    		mov	dh, 2 ; ffSmall
  4814 00001A55 EB39                    		jmp	short nextdrive
  4815                                  ; ----------------------------------------------------------------------------
  4816                                  
  4817                                  got96:					
  4818 00001A57 B601                    		mov	dh, 1 ; ff96tpi
  4819 00001A59 EB35                    		jmp	short nextdrive
  4820                                  
  4821                                  ; ----------------------------------------------------------------------------
  4822                                  		
  4823                                  		; 14/12/2023
  4824                                  		; 13/12/2023 - Retro DOS v4.1 IO.SYS
  4825                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS
  4826                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4827                                  		; check change line feature (and set fhave96 if there is)
  4828                                  		; (common procedure for 'eotok:' and 'noparmsfromrom:')
  4829                                  chk_changeline:
  4830 00001A5B 59                      		pop	cx ; near call return address
  4831                                  
  4832 00001A5C 07                      		pop	es ; es=cs=ds ; 21/12/2022
  4833 00001A5D 5F                      		pop	di ; 12/12/2023 ; *
  4834                                  		; 12/12/2023 ; *
  4835 00001A5E 5A                      		pop	dx ; *+
  4836                                  
  4837 00001A5F 51                      		push	cx ; near call return address
  4838                                  
  4839                                  ; Check	for presence of	changeline
  4840                                  
  4841                                  		; 12/12/2023 - BugFix ; * ; +*+
  4842                                  		; (MSDOS 6.22 IO.SYS has a bug here,
  4843                                  		;  it does not save CX,DX registers before INT 13h func 15h)
  4844                                  		; (this is also a ROMBIOS bug, some ROMBIOSs return number
  4845                                  		;  of sectors in cx:dx pair while others restore cx:dx)
  4846                                  		;  -- ref: Ralf Brown's Interrupt List --
  4847                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:1AF0h))
  4848                                  		; ((PCDOS 7.1 IBMBIO.COM - BIOSDATA:2119h))
  4849                                  		; (This BUG does not exist in PCDOS 7.1 IBMBIO.COM)
  4850                                  
  4851                                  		; 12/12/2023
  4852                                  		;push	dx ; *+ ; save drive number (DL) - Retro DOS v4.2
  4853                                  		; bl = dl = drive number ; *++
  4854                                  
  4855 00001A60 B415                    		mov	ah, 15h
  4856 00001A62 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4857                                  					; DL = drive ID
  4858                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4859                                  					; CX:DX	= number of sectors on the media
  4860                                  		; 12/12/2023
  4861                                  		;pop	dx ; *+ ; restore drive number (in DL)
  4862 00001A64 B90000                  		mov	cx, 0  ; flags
  4863 00001A67 89DA                    		mov	dx, bx ; *++ ; bl = drive number
  4864 00001A69 720D                    		jc	short chk_chgl_1
  4865                                  
  4866 00001A6B 80FC02                  		cmp	ah, 2		; is there changeline?
  4867 00001A6E 7508                    		jne	short chk_chgl_2 ; *
  4868                                  
  4869 00001A70 80C902                  		or	cl, 2
  4870                                  		;or	cl, ah ; 2
  4871 00001A73 C606[7700]01            		mov	byte [fhave96], 1 ; fchangeline
  4872                                  		; cf = 0
  4873                                  chk_chgl_1:
  4874                                  chk_chgl_2:
  4875 00001A78 C3                      		retn
  4876                                  
  4877                                  ;chk_chgl_2:	; *
  4878                                  ;		; 10/12/2023
  4879                                  ;		; ah = 1 ; harddisk type (ah = 3) return not possible here for floppies 
  4880                                  ;		;stc
  4881                                  ;		; cf = 1
  4882                                  ;		retn
  4883                                  
  4884                                  ; ----------------------------------------------------------------------------
  4885                                  
  4886                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4887                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4888                                  
  4889                                  noparmsfromrom:
  4890                                  
  4891                                  ; 14/12/2023				
  4892                                  ; 13/12/2023 ('chk_changeline' procedure)
  4893                                  %if 0				
  4894                                  		pop	es ; es=cs=ds ; 21/12/2022
  4895                                  		; 13/12/2023
  4896                                  		; bl = drive number ; *++
  4897                                  		; 13/12/2023 ; *
  4898                                  		pop	di ; *
  4899                                  		pop	dx ; *+
  4900                                  		;pop	cx ; *+ ; cx = 0 ; 13/12/2023
  4901                                  		; 13/12/2023
  4902                                  		;pop	di
  4903                                  		; 21/12/2022
  4904                                  		;pop	ds
  4905                                  
  4906                                  		mov	ah, 15h
  4907                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4908                                  					; DL = drive ID
  4909                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4910                                  					; CX:DX	= number of sectors on the media
  4911                                  		; 13/12/2023 - BugFix ; +*+
  4912                                  		; (MSDOS 5.0 & 6.22 IO.SYS bug) ; +*+
  4913                                  		; (some ROMBIOSs fix this BUG but return with false)
  4914                                  		; -- ref: Ralf Brown's Interrupt List --
  4915                                  		;pop	cx ; *+
  4916                                  		mov	cx, 0 ; 13/12/2023
  4917                                  		mov	dx, bx ; *++
  4918                                  		jc	short nextdrive
  4919                                  
  4920                                  		cmp	ah, 2		; is there changeline?
  4921                                  		jnz	short nextdrive
  4922                                  
  4923                                  		or	cl, 2
  4924                                  		mov	byte [fhave96], 1 ; fchangeline
  4925                                  %endif
  4926                                  		; 14/12/2023
  4927 00001A79 E8DFFF                  		call	chk_changeline
  4928 00001A7C 7212                    		jc	short nextdrive
  4929                                  		
  4930                                  		; change line support, [fhave96] = 1
  4931                                  
  4932 00001A7E C606[D216]50            		mov	byte [num_cyln], 80
  4933 00001A83 B601                    		mov	dh, 1
  4934 00001A85 B00F                    		mov	al, 15
  4935 00001A87 3A06[2C01]              		cmp	al, [eot]
  4936 00001A8B 7603                    		jbe	short nextdrive
  4937 00001A8D A2[2C01]                		mov	[eot], al
  4938                                  ; ----------------------------------------------------------------------------
  4939                                  
  4940                                  ;eot_ok2:
  4941                                  nextdrive:				
  4942 00001A90 80C920                  		or	cl, 20h	; fi_own_physical
  4943                                  					; set this true	for all	drives
  4944 00001A93 88D7                    		mov	bh, dl		; save int13 drive number
  4945                                  
  4946                                  ; we need to do special things if we have a single drive system and are setting
  4947                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4948                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4949                                  ; we detect the presence of this situation by examining the flag single for the
  4950                                  ; value 2.
  4951 00001A95 803E[7800]02            		cmp	byte [single], 2
  4952 00001A9A 7505                    		jnz	short not_special
  4953 00001A9C FECF                    		dec	bh		; int13	drive number same for logical drive
  4954 00001A9E 80F120                  		xor	cl, 20h	; fi_own_physical
  4955                                  					; reset	ownership flag for logical drive
  4956                                  not_special:
  4957                                  
  4958                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4959                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4960                                  ; form factor is of type "ffother".
  4961                                  				
  4962 00001AA1 31C0                    		xor	ax, ax		; fill BDS for drive
  4963 00001AA3 A0[D016]                		mov	al, [num_heads]
  4964 00001AA6 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4965 00001AA9 A0[D116]                		mov	al, [sec_trk]
  4966 00001AAC 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4967 00001AAF 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4968 00001AB2 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4969 00001AB5 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4970 00001AB8 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4971 00001ABB 8A1E[D216]              		mov	bl, [num_cyln]
  4972 00001ABF 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4973 00001AC2 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4974 00001AC7 7510                    		jnz	short no_single
  4975                                  		; 14/12/2023
  4976 00001AC9 FE06[7800]              		inc	byte [single]	; [single] = 2
  4977                                  		;mov	byte [single], 2 ; Don't forget we have
  4978                                  					; single drive system
  4979                                  		; 18/12/2022
  4980 00001ACD 80C910                  		or	cl, 10h
  4981                                  		;or	cx, 10h	; fi_am_mult
  4982                                  					; set that this	is one of several drives
  4983 00001AD0 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4984                                  					; save flags
  4985 00001AD3 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4986                                  					; move to next BDS in list
  4987 00001AD5 FEC2                    		inc	dl		; add a	number
  4988 00001AD7 EBB7                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4989                                  ; ----------------------------------------------------------------------------
  4990                                  
  4991                                  no_single:				
  4992                                  		;inc	dl
  4993                                  		; 18/12/2022
  4994 00001AD9 42                      		inc	dx
  4995 00001ADA E9FCFE                  		jmp	loop_drive
  4996                                  ; ----------------------------------------------------------------------------
  4997                                  
  4998                                  done_drives:	
  4999                                  		;mov	word [di+BDS.link], -1			
  5000 00001ADD C705FFFF                		mov	word [di], -1	; set link to null
  5001                                  
  5002                                  ; set up all the hard drives in	the system
  5003                                  
  5004                                  		; 20/12/2022
  5005                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  5006                                  dohard:					
  5007 00001AE1 8A36[4317]              		mov	dh, [hnum]
  5008 00001AE5 08F6                    		or	dh, dh		; done if no hardfiles
  5009 00001AE7 7459                    		jz	short static_configure
  5010 00001AE9 B280                    		mov	dl, 80h
  5011                                  dohard1:				
  5012 00001AEB 52                      		push	dx
  5013 00001AEC 8B3E[4617]              		mov	di, [end_of_bdss]
  5014 00001AF0 8A1E[7500]              		mov	bl, [drvmax]
  5015 00001AF4 B700                    		mov	bh, 0		; first	primary	partition (or active)
  5016 00001AF6 E8BC01                  		call	sethard
  5017 00001AF9 7208                    		jb	short hardfile_err
  5018 00001AFB E8DE06                  		call	dmax_check	; error	if already 26 drives
  5019 00001AFE 7303                    		jnb	short hardfile_err
  5020 00001B00 E8EE06                  		call	xinstall_bds	; insert new bds into linked list
  5021                                  hardfile_err:
  5022 00001B03 5A                      		pop	dx
  5023                                  		;inc	dl		; next hard drive
  5024                                  		; 14/12/2023
  5025 00001B04 42                      		inc	dx
  5026 00001B05 FECE                    		dec	dh
  5027 00001B07 75E2                    		jnz	short dohard1
  5028                                  
  5029                                  ; end of physical drive	initialization
  5030                                  
  5031                                  ; *** do not change the position of the following statement.
  5032                                  ; *** domini routine will use [drvmax] value for the start of the logical
  5033                                  ; *** drive number of mini disk(s).
  5034                                  					
  5035 00001B09 E8E205                  		call	domini		; for setting up mini disks, if found
  5036                                  
  5037                                  ; -- begin added section
  5038                                  
  5039 00001B0C 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  5040 00001B10 B280                    		mov	dl, 80h
  5041                                  dohardx1:				
  5042 00001B12 B701                    		mov	bh, 1		; do all subsequent primary partitions
  5043                                  dohardx2:				
  5044 00001B14 52                      		push	dx
  5045 00001B15 53                      		push	bx
  5046 00001B16 8B3E[4617]              		mov	di, [end_of_bdss]
  5047 00001B1A 8A1E[7500]              		mov	bl, [drvmax]
  5048 00001B1E E89401                  		call	sethard
  5049 00001B21 720E                    		jb	short dohardx4	; move to next hardfile	if error
  5050 00001B23 E8B606                  		call	dmax_check	; make sure <=26 drives
  5051 00001B26 7309                    		jnb	short dohardx4	; skip if error
  5052 00001B28 E8C606                  		call	xinstall_bds	; insert new bds into linked list
  5053 00001B2B 5B                      		pop	bx		; get partition	number
  5054 00001B2C 5A                      		pop	dx		; restore physical drive counts
  5055 00001B2D FEC7                    		inc	bh
  5056 00001B2F EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  5057                                  ; ----------------------------------------------------------------------------
  5058                                  
  5059                                  dohardx4:
  5060 00001B31 5B                      		pop	bx		; unjunk partition number from stack
  5061 00001B32 5A                      		pop	dx		; restore physical drive counts
  5062                                  		;inc	dl		; next hard drive
  5063                                  		; 14/12/2023
  5064 00001B33 42                      		inc	dx
  5065 00001B34 FECE                    		dec	dh
  5066 00001B36 75DA                    		jnz	short dohardx1
  5067                                  
  5068                                  ; -- end changed section
  5069                                  
  5070                                  ;******************************************************************************
  5071                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  5072                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  5073                                  ; than two diskette drives
  5074                                  ;
  5075                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  5076                                  ;		as usual and then rescan the bds chain to adjust the  drive
  5077                                  ;		letters. to do this, scan for disk drives and assign logical
  5078                                  ;		drive number starting from 2 and then rescan diskette drives
  5079                                  ;		and assign next to the last logical drive number of last disk
  5080                                  ;		drive to the 3rd and 4th diskette drives.
  5081                                  ;******************************************************************************
  5082                                  
  5083 00001B38 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  5084                                  		;jbe	short static_configure ; no - no need for remapping
  5085 00001B3D 7603                    		jbe	short no_remap
  5086 00001B3F E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  5087                                  no_remap:
  5088                                  
  5089                                  ; End of drive initialization.
  5090                                  
  5091                                  ; ----------------------------------------------------------------------------
  5092                                  
  5093                                  ;we now decide, based on the configurations available so far, what
  5094                                  ;code or data we need to keep as a stay resident code. the following table
  5095                                  ;shows the configurations under consideration. they are listed in the order
  5096                                  ;of their current position memory.
  5097                                  ;
  5098                                  ;configuration will be done in two ways:
  5099                                  ;
  5100                                  ;first, we are going to set "static configuration". static configuration will
  5101                                  ;consider from basic configuration to endof96tpi configuration. the result
  5102                                  ;of static configuration will be the address the dynamic configuration will
  5103                                  ;use to start with.
  5104                                  ;
  5105                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  5106                                  ;involves possible relocation of code or data. dynamic configuration routine
  5107                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  5108                                  ;code individually. after these operation, [dosdatasg] will be set.
  5109                                  ;this will be the place sysinit routine will relocate msdos module for good.
  5110                                  
  5111                                  ; -- begin changed section
  5112                                  ;
  5113                                  ;   1.	 basic configuration for msbio (endfloppy)
  5114                                  ;   2.   end96tpi	; a system that supports "change line error"
  5115                                  ;   3.	 end of bdss	; end of bdss for hard disks
  5116                                  ;   4.	 endatrom	;some of at rom fix module.
  5117                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  5118                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  5119                                  ;
  5120                                  
  5121                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  5122                                  
  5123                                  static_configure:			
  5124 00001B42 8B3E[4617]              		mov	di, [end_of_bdss]
  5125 00001B46 81FF[1609]              		cmp	di, bdss	; 19/10/2022
  5126                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  5127 00001B4A 750D                    		jnz	short dynamic_configure	; that's the end, then
  5128                                  		; 18/10/2022
  5129 00001B4C BF[1609]                		mov	di, end96tpi
  5130                                  		;mov	di, offset harddrv ; end96tpi
  5131                                  					; keep everything up to	end96tpi
  5132 00001B4F 803E[7700]00            		cmp	byte [fhave96], 0
  5133 00001B54 7503                    		jnz	short dynamic_configure
  5134                                  		
  5135 00001B56 BF[FB08]                		mov	di, endfloppy
  5136                                  dynamic_configure:
  5137                                  		; 20/12/2022
  5138                                  		;push	cs
  5139                                  		;pop	es
  5140                                  		
  5141                                  		; 14/12/2023
  5142                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2268h)
  5143                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C34h)
  5144                                  		; (MSDOS 5.0 IO.SYS - BIOSDATA:1BEEh)
  5145 00001B59 FC                      		cld	; clear direction flag is not necessary here !?
  5146                                  			; because there will not be a running program
  5147                                  			; which will set direction flag as backward (std)
  5148                                  
  5149                                  ; -- end changed section
  5150                                  
  5151                                  		; 20/12/2022
  5152                                  		; ds = cs <> es
  5153                                  		; ss = 0
  5154                                  		; sp = 700h
  5155                                  
  5156                                  		; 14/12/2023
  5157 00001B5A BE00F0                  		mov	si, 0F000h
  5158 00001B5D 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  5159                                  
  5160 00001B5F 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  5161                                  		;jnz	short checkcmosclock
  5162                                  		; 14/12/2023
  5163 00001B64 751E                    		jnz	short checkcompaqbug ; no
  5164 00001B66 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  5165                                  		;jz	short checkcmosclock
  5166 00001B6B 7417                    		jz	short checkcompaqbug
  5167 00001B6D 97                      		xchg	ax, di		; save allocation pointer in ax
  5168                                  		; 14/12/2023
  5169                                  		;mov	si, 0F000h
  5170                                  		;mov	es, si		; ES ->	ROM BIOS segment
  5171 00001B6E BE[4C17]                		mov	si, bios_date	; "01/10/84"
  5172 00001B71 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  5173 00001B74 B90900                  		mov	cx, 9		; bdate_l
  5174                                  					; Only patch ROM for bios 01/10/84
  5175 00001B77 F3A6                    		repe cmpsb		; check	for date + zero	on end
  5176 00001B79 97                      		xchg	ax, di		; restore allocation pointer
  5177                                  
  5178                                  ; M015 -- begin changes
  5179                                  
  5180                                  		;jnz	short checkcmosclock
  5181                                  		; 02/10/2022
  5182 00001B7A 7508                    		jnz	short checkcompaqbug
  5183                                  
  5184                                  ; install at rom fix
  5185                                  
  5186                                  		; 19/10/2022
  5187                                  		;mov	cx, offset endatrom
  5188 00001B7C B9[0914]                		mov	cx, endatrom
  5189                                  		;mov	si, offset ibm_disk_io
  5190 00001B7F BE[DB12]                		mov	si, ibm_disk_io
  5191 00001B82 EB46                    		jmp	short install_int13_patch
  5192                                  ; ----------------------------------------------------------------------------
  5193                                  
  5194                                  ; M065 -- begin changes
  5195                                  ;
  5196                                  ; On certain systems with Western Digital disk controllers, the
  5197                                  ; following detection scheme caused an unpredictable and serious
  5198                                  ; failure. In particular, they've implemented a nonstandard
  5199                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5200                                  ; what happens to be at es:[bx] and other memory locations indexed
  5201                                  ; off of it.
  5202                                  ;
  5203                                  ; Compaq was unable to tell us exactly which kind of systems have
  5204                                  ; the bug, except that they guarantee that the bug was fixed in
  5205                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5206                                  ; string, and then look for date codes before 08/04/86 to decide
  5207                                  ; when to install the hook.
  5208                                  
  5209                                  ;checkcmosclock:
  5210                                  ; 02/10/2022				
  5211                                  checkcompaqbug:
  5212                                  		; 20/12/2022
  5213                                  		; es = 0F000h
  5214                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5215                                  		;mov	es, ax
  5216                                  
  5217                                  		; 19/10/2022
  5218 00001B84 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5219                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5220 00001B8B 754B                    		jnz	short not_compaq_patch
  5221 00001B8D 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5222                                  		;cmp	word ptr es:0FFECh, 'PM'
  5223 00001B94 7542                    		jnz	short not_compaq_patch
  5224 00001B96 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5225                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5226 00001B9D 7539                    		jnz	short not_compaq_patch
  5227                                  
  5228                                  ; We're running on a COMPAQ. Now look at the date code.
  5229                                  
  5230 00001B9F 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5231 00001BA3 86E0                    		xchg	ah, al
  5232 00001BA5 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5233                                  		;cmp	ax, '86'        ; 3836h
  5234                                  					; is it	86?
  5235 00001BA8 772E                    		ja	short not_compaq_patch
  5236 00001BAA 7218                    		jb	short do_compaq_patch
  5237 00001BAC 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5238 00001BB0 86E0                    		xchg	ah, al
  5239 00001BB2 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5240                                  		;cmp	ax, '08'        ; 3038h
  5241                                  					; is it	08?
  5242 00001BB5 7721                    		ja	short not_compaq_patch
  5243 00001BB7 720B                    		jb	short do_compaq_patch
  5244 00001BB9 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5245 00001BBD 86E0                    		xchg	ah, al
  5246 00001BBF 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5247                                  		;cmp	ax, '04'        ; 3034h
  5248                                  					; is it	04?
  5249 00001BC2 7314                    		jnb	short not_compaq_patch
  5250                                  
  5251                                  do_compaq_patch:			
  5252 00001BC4 B9[2A14]                		mov	cx, end_compaq_i13hook
  5253                                  		;mov	si, endatrom
  5254                                  		; 14/12/2023
  5255 00001BC7 BE[0914]                		mov	si, compaq_disk_io ; endatrom
  5256                                  
  5257                                  install_int13_patch:			
  5258 00001BCA 0E                      		push	cs
  5259 00001BCB 07                      		pop	es
  5260                                  		; 18/10/2022
  5261 00001BCC 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5262 00001BD0 8C0E[B600]              		mov	[Orig13+2], cs
  5263 00001BD4 29F1                    		sub	cx, si		; size of rom fix module
  5264 00001BD6 F3A4                    		rep movsb		; relocate it
  5265                                  
  5266                                  ; M065 -- end changes
  5267                                  
  5268                                  ; ----------------------------------------------------------------------------
  5269                                  not_compaq_patch:			; M065
  5270                                  		; 17/10/2022
  5271                                  checkcmosclock:	
  5272                                  		; 18/10/2022		
  5273 00001BD8 0E                      		push	cs
  5274 00001BD9 07                      		pop	es
  5275                                  
  5276                                  		; 20/12/2022
  5277                                  		; ds = cs = es
  5278                                  		; ss = 0
  5279                                  		; sp = 700h
  5280                                  
  5281 00001BDA 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5282 00001BDF 7518                    		jnz	short checkk09	; no
  5283                                  
  5284 00001BE1 893E[0605]              		mov	word [daycnttoday], di
  5285                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5286 00001BE5 B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5287 00001BE8 BE[2B14]                		mov	si, daycnt_to_day
  5288 00001BEB F3A4                    		rep movsb
  5289 00001BED 893E[0205]              		mov	word [bintobcd], di
  5290                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5291                                  					; let original segment stay
  5292 00001BF1 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5293 00001BF4 BE[FC14]                		mov	si, bin_to_bcd
  5294 00001BF7 F3A4                    		rep movsb
  5295                                  checkk09:				
  5296 00001BF9 57                      		push	di ; ? ; save ? ; 20/12/2022
  5297 00001BFA B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5298 00001BFD B301                    		mov	bl, 1		; wait for 1 clock tick
  5299 00001BFF 268A3D                  		mov	bh, [es:di]
  5300 00001C02 F9                      		stc			; Assume we will fail
  5301 00001C03 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5302                                  					; AL = condition type, BH = condition compare or mask value
  5303                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5304                                  					; DX = I/O port	address	if AL bit 4 set
  5305                                  					; 14/12/2023
  5306                                  					; ES:DI = user byte if AL bit 4 clear
  5307 00001C05 5F                      		pop	di ; ?
  5308 00001C06 721B                    		jc	short configdone ; 20/12/2022
  5309                                  
  5310 00001C08 C606[7900]01            		mov	byte [fhavek09], 1
  5311                                  					; remember we have a k09 type
  5312 00001C0D 1E                      		push	ds
  5313 00001C0E 31C0                    		xor	ax, ax
  5314 00001C10 8ED8                    		mov	ds, ax
  5315                                  		
  5316 00001C12 893EB001                		mov	[6Ch*4], di
  5317                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5318                                  					; new int 6ch handler
  5319                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5320 00001C16 8C0EB201                		mov	word [6Ch*4+2], cs
  5321 00001C1A 1F                      		pop	ds
  5322                                  		; 20/12/2022
  5323                                  		; ds = cs = es
  5324 00001C1B BE[0715]                		mov	si, int6c
  5325 00001C1E B9C201                  		mov	cx, endk09-int6c ; 459
  5326                                  		;mov	cx, 459		; endk09 - int6c
  5327                                  					; size of k09 routine
  5328 00001C21 F3A4                    		rep movsb		;
  5329                                  					; set up config	stuff for sysinit
  5330                                  ; ----------------------------------------------------------------------------
  5331                                  ; Set up config stuff for SYSINIT
  5332                                  
  5333                                  ; 17/10/2022
  5334                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5335                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5336                                  ; 09/12/2022
  5337                                  SETDRIVE equ SetDrive
  5338                                  GETBP equ GetBp
  5339                                  		
  5340                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5341                                  configdone:
  5342                                  		; 14/12/2023
  5343                                  		; ds = cs
  5344                                  		;push	cs		; di is	final ending address of	msbio.
  5345                                  		;pop	ds
  5346                                  		
  5347 00001C23 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5348                                  		; 10/12/2022
  5349                                  		;shr	di, 1
  5350                                  		;shr	di, 1
  5351                                  		;shr	di, 1
  5352                                  		;shr	di, 1
  5353 00001C26 B104                    		mov	cl, 4
  5354 00001C28 D3EF                    		shr	di, cl		
  5355                                  		; 10/12/2022
  5356                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5357                                  		; 19/10/2022 - Temporary !
  5358                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5359                                  		; 14/08/2023
  5360 00001C2A 83C770                  		add	di, 70h
  5361 00001C2D 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5362                                  
  5363                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5364                                  
  5365                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5366                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5367                                  	     
  5368                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5369                                  
  5370                                  ; 14/12/2023
  5371                                  ; ----------------------------------------------------------------------------
  5372                                  ; ----------------------------------------------------------------------------
  5373                                  %if 0
  5374                                  		mov	ax, [drvfat]	; get drive and	fat id
  5375                                  		; 22/12/2022
  5376                                  		; Note: SETDRIVES uses AL (drive number) only
  5377                                  		mov	bp, SETDRIVE
  5378                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5379                                  					; at 2C7h:4D7h = 70h:2A47h
  5380                                  		push	cs		; simulate far call
  5381                                  		call	call_bios_code	; get bds for drive
  5382                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5383                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5384                                  		push	cs
  5385                                  		call	call_bios_code
  5386                                  
  5387                                  	; resort to funky old segment definitions for now
  5388                                  
  5389                                  		; 22/12/2022
  5390                                  		;push	es		; copy bds to ds:di
  5391                                  		;pop	ds
  5392                                  
  5393                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5394                                  	;
  5395                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5396                                  	;	  back. Apparently it was what actually setup es: for the following
  5397                                  	; cas----
  5398                                  
  5399                                  		; 22/12/2022
  5400                                  		;xor	di, di
  5401                                  		;mov	al, [es:di]	; get fat id byte
  5402                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5403                                  		;mov	[es:drvfat+1], al
  5404                                  		;mov	ax, [es:drvfat]
  5405                                  		
  5406                                  		; 22/12/2022
  5407                                  		; ds = cs
  5408                                  	;;;	mov	al, [drvfat]
  5409                                  
  5410                                  	; cas -- why do a SECOND setdrive here???
  5411                                  
  5412                                  		; 22/12/2022
  5413                                  		;push	es		; save whatever's in es
  5414                                  		;push	ds		; copy bds to es:di
  5415                                  		;pop	es
  5416                                  		;push	cs		; copy Bios_Data to ds
  5417                                  		;pop	ds
  5418                                  	
  5419                                  	; 22/12/2022
  5420                                  	;;;	mov	bp, SETDRIVE
  5421                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5422                                  	;;;	push	cs		; simulate far call
  5423                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5424                                  	
  5425                                  		; 22/12/2022
  5426                                  		;push	es		; copy bds back to ds:di
  5427                                  		;pop	ds
  5428                                  		;pop	es		; pop whatever was in es
  5429                                  
  5430                                  	; Now we load in the MSDOS.SYS file
  5431                                  
  5432                                  	; 22/12/2022
  5433                                  	; -----
  5434                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5435                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5436                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5437                                  	;				; get size of fat on media
  5438                                  	;	;mov	es:16DEh, bl
  5439                                  	;	mov	[es:fbigfat], bl
  5440                                  	;	mov	cl, [di+8]
  5441                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5442                                  	;	;sub	es:16D8h, ax
  5443                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5444                                  	;				; need a logical sector number that will
  5445                                  	;				; be used by getclus(diskrd procedure)
  5446                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5447                                  	;	;sbb	es:16DAh, ax
  5448                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5449                                  	; -----
  5450                                  		
  5451                                  	; -----	; 22/12/2022
  5452                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5453                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5454                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5455                                  					; get size of fat on media
  5456                                  		mov	[fbigfat], bl
  5457                                  		mov	cl, [es:di+8]
  5458                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5459                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5460                                  					; need a logical sector number that will
  5461                                  					; be used by getclus(diskrd procedure)
  5462                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5463                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5464                                  	; ------
  5465                                  
  5466                                  		xor	ch, ch	 ; cx = sectors/cluster
  5467                                  
  5468                                  	; the boot program has left the directory at 0:500h
  5469                                  
  5470                                  		push	ds
  5471                                  		xor	di, di
  5472                                  		mov	ds, di
  5473                                  		mov	bx, [53Ah]
  5474                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5475                                  					; (First cluster field of 2nd dir entry
  5476                                  					; of root directory in the buffer at 500h)
  5477                                  		pop	ds
  5478                                  loadit:
  5479                                  		mov	ax, SYSINITSEG	; 46Dh
  5480                                  		;mov	ax, 46Dh	; sysinit segment
  5481                                  		mov	es, ax
  5482                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5483                                  		;mov	es, [es:271h]
  5484                                  
  5485                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5486                                  ; ----------------------------------------------------------------------------
  5487                                  ;iseof:
  5488                                  		;;test	byte [cs:fbigfat], fbig
  5489                                  		;test	byte [cs:fbigfat], 40h ; fbig
  5490                                  		; 12/12/2023
  5491                                  		; ds = cs
  5492                                  		test	byte [fbigfat], 40h ; fbig
  5493                                  		jnz	short eofbig
  5494                                  		cmp	bx, 0FF7h
  5495                                  		jmp	short iseofx
  5496                                  ; ----------------------------------------------------------------------------
  5497                                  
  5498                                  eofbig:
  5499                                  		cmp	bx, 0FFF7h
  5500                                  iseofx:
  5501                                  		jb	short loadit	; keep loading until cluster = eof
  5502                                  %endif
  5503                                  ; ----------------------------------------------------------------------------
  5504                                  ; ----------------------------------------------------------------------------
  5505                                  
  5506 00001C31 E8F003                  		call	setdrvparms	; 
  5507                                  
  5508                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5509                                  		;jmp	far 46Dh:267h
  5510 00001C34 EA[6702]3B04            		jmp	SYSINITSEG:SYSINITSTART
  5511                                  
  5512                                  ; =============== S U B	R O U T	I N E ========================================
  5513                                  
  5514                                  ; Following are subroutines to support resident device driver initialization
  5515                                  ;
  5516                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5517                                  
  5518                                  ;	M035 -- begin changed section
  5519                                  
  5520                                  ;******************************************************************************
  5521                                  ; module name: remap
  5522                                  ;
  5523                                  ; descriptive name: all the code for himem that could be separated from msbio
  5524                                  ;
  5525                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5526                                  ;	     letters) if more than two diskette drives on the system.
  5527                                  ;
  5528                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5529                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5530                                  ;	       letters. to do this, scan for disk drives and assign logical
  5531                                  ;	       drive number starting from 2 and then rescan diskette drives
  5532                                  ;	       and assign next to the last logical drive number of last disk
  5533                                  ;	       drive to the 3rd and 4th diskette drives.
  5534                                  
  5535                                  ; input:       none
  5536                                  ; exit:	drive letters have been remapped in bds chain
  5537                                  ; exit error:  none
  5538                                  ; called from: msinit
  5539                                  ;
  5540                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5541                                  ;	  found in the system
  5542                                  ;	  this function assumes that there are no more than 26 drives assigned
  5543                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5544                                  ;	  this function assumes that the first entries in the chain are
  5545                                  ;	   floppy drives, and all the rest are hard drives
  5546                                  ;	  will alter the boot drive if necessary to reflect remapping
  5547                                  ;
  5548                                  ;******************************************************************************
  5549                                  
  5550                                  ; 17/10/2022
  5551                                  ; 02/10/2022
  5552                                  
  5553                                  remap:		; proc near
  5554                                  
  5555                                  		; 15/12/2023
  5556                                  		; ds = cs
  5557                                  		;mov	di, [cs:start_bds] ; get first bds
  5558 00001C39 8B3E[1901]              		mov	di, [start_bds]
  5559                                  
  5560                                  ; search for 1st fixed disk physical drive num
  5561                                  
  5562                                  drive_loop:
  5563 00001C3D 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5564                                  					; first	hard disk??
  5565 00001C41 7409                    		jz	short fdrv_found ; yes,	continue
  5566 00001C43 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5567                                  					; get next bds,	assume segment
  5568 00001C45 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  5569 00001C48 75F3                    		jnz	short drive_loop ; loop	if not
  5570 00001C4A EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5571                                  
  5572                                  ;------------------------------------------------------------------------------
  5573                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5574                                  ;logical drive nums to 3, 4, 5 etc.
  5575                                  ;------------------------------------------------------------------------------
  5576                                  
  5577                                  fdrv_found:
  5578 00001C4C B002                    		mov	al, 2		; start	with logical drv num=2
  5579                                  fdrv_loop:
  5580 00001C4E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5581 00001C51 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5582                                  					; ds:di--> next	bds
  5583                                  		;inc	al		; set num for next drive
  5584                                  		; 18/12/2022
  5585 00001C53 40                      		inc	ax
  5586 00001C54 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  5587 00001C57 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  5588                                  
  5589                                  ;------------------------------------------------------------------------------
  5590                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5591                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5592                                  ; any more.
  5593                                  ;------------------------------------------------------------------------------
  5594                                  
  5595                                  		;mov	di, [cs:start_bds] ; [start_bds]
  5596                                  		; 15/12/2023
  5597 00001C59 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  5598 00001C5D 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5599                                  					; ds:di-->bds2
  5600                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5601 00001C5F 8A26[2501]              		mov	ah, [dsktnum]
  5602 00001C63 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5603                                  remap_loop1:
  5604 00001C66 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5605                                  					; set new num to next floppy
  5606 00001C68 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5607 00001C6B FEC0                    		inc	al		; new number for next floppy
  5608 00001C6D FECC                    		dec	ah		; count down extra floppies
  5609 00001C6F 75F5                    		jnz	short remap_loop1
  5610                                  
  5611                                  ; now we've got to adjust the boot drive if we reassigned it
  5612                                  
  5613                                  		; 15/12/2023
  5614                                  		;mov	al, [cs:drvfat]
  5615 00001C71 A0[CA16]                		mov	al, [drvfat]
  5616 00001C74 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5617 00001C76 721D                    		jb	short rmap_exit
  5618                                  		;sub	al, [cs:dsktnum]
  5619 00001C78 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  5620 00001C7C 7204                    		jb	short remap_boot_flop ;	brif so
  5621                                  
  5622                                  ; we've got to remap the boot hard drive
  5623                                  ; subtract the number of EXTRA floppies from it
  5624                                  
  5625 00001C7E 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5626 00001C80 EB04                    		jmp	short remap_change_boot_drv
  5627                                  ; ---------------------------------------------------------------------------
  5628                                  
  5629                                  ; we've got to remap the boot floppy.
  5630                                  ; add the number of hard drive partitions to it
  5631                                  
  5632                                  remap_boot_flop:
  5633                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5634                                  		; 15/12/2023
  5635 00001C82 0206[7500]              		add	al, [drvmax]
  5636                                  remap_change_boot_drv:			
  5637                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  5638 00001C86 A2[CA16]                		mov	[drvfat], al
  5639 00001C89 FEC0                    		inc	al
  5640 00001C8B 1E                      		push	ds
  5641 00001C8C BF3B04                  		mov	di, SYSINITSEG	; 46Dh
  5642                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  5643                                  		;;mov	di, 46Dh	; SYSINIT segment
  5644 00001C8F 8EDF                    		mov	ds, di
  5645 00001C91 A2[9602]                		mov	[DEFAULTDRIVE], al
  5646                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5647                                  					; pass it to sysinit as	well
  5648 00001C94 1F                      		pop	ds ; ds = cs
  5649                                  rmap_exit:
  5650 00001C95 C3                      		retn
  5651                                  
  5652                                  ; =============== S U B	R O U T	I N E =======================================
  5653                                  
  5654                                  ; 17/10/2022
  5655                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5656                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5657                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5658                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5659                                  ;**************************************************
  5660                                  ; getboot - get the boot sector for a hard disk
  5661                                  ;
  5662                                  ; Reads the boot sector from a specified drive into
  5663                                  ; a buffer at the top of memory.
  5664                                  ;
  5665                                  ; dl = int13 drive number to read boot sector for
  5666                                  ;**************************************************
  5667                                  
  5668                                  ; 17/10/2022
  5669                                  bootbias equ 200h
  5670                                  
  5671                                  getboot:	; proc near
  5672                                  		
  5673                                  		; 15/12/2023
  5674                                  		; ds = cs
  5675                                  		
  5676                                  		; 08/04/2018
  5677                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5678                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5679                                  		; 02/10/2022 - Retro DOS v4.0
  5680                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5681                                  
  5682                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  5683                                  		; 15/12/2023
  5684 00001C96 A1[CD16]                		mov	ax, [init_bootseg]
  5685 00001C99 8EC0                    		mov	es, ax
  5686                                  
  5687                                  		; 17/10/2022
  5688 00001C9B BB0002                  		mov	bx, bootbias ; 200h
  5689                                  		;mov	bx, 200h	; bootbias
  5690                                  					; load BX, ES:BX is where sector goes
  5691 00001C9E B80102                  		mov	ax, 201h
  5692 00001CA1 30F6                    		xor	dh, dh
  5693 00001CA3 B90100                  		mov	cx, 1
  5694 00001CA6 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5695                                  					; AL = number of sectors to read, CH = track, CL = sector
  5696                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5697                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5698 00001CA8 7209                    		jb	short erret
  5699                                  		; 17/10/2022
  5700 00001CAA 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5701                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5702                                  					; Dave Litton magic word?
  5703 00001CB1 7401                    		jz	short norm_ret	; yes
  5704                                  erret:
  5705 00001CB3 F9                      		stc
  5706                                  norm_ret:
  5707 00001CB4 C3                      		retn
  5708                                  
  5709                                  ; =============== S U B	R O U T	I N E =======================================
  5710                                  
  5711                                  ; 28/12/2018 - Retro DOS v4.0 
  5712                                  
  5713                                  ;***************************************************************************
  5714                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5715                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5716                                  ;   our own logical sectors start. we also read in our boot sector to
  5717                                  ;   determine version number
  5718                                  ;
  5719                                  ;   inputs:	dl is rom drive number (80...)
  5720                                  ;		bh is partition number (0....) 
  5721                                  ;		ds:di points to bds
  5722                                  ;   outputs:	carry clear -> bpb is filled in
  5723                                  ;		carry set   -> bpb is left uninitialized due to error
  5724                                  ;	trashes (at least) si, cx
  5725                                  ;	MUST PRESERVE ES:!!!!
  5726                                  ;***************************************************************************
  5727                                  
  5728                                  sethard:	; proc near		
  5729                                  		; 14/08/2023
  5730                                  		; ds = cs = BIOSDATA
  5731 00001CB5 57                      		push	di
  5732 00001CB6 53                      		push	bx
  5733                                  		;push	ds  ; ds = cs = BIOSDATA ; 14/08/2023
  5734 00001CB7 06                      		push	es
  5735 00001CB8 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5736 00001CBB 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5737 00001CBE 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5738                                  					; fnon_removable
  5739 00001CC2 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5740                                  					; ffHardFile
  5741 00001CC6 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5742 00001CCB 88FE                    		mov	dh, bh		; partition number
  5743 00001CCD 52                      		push	dx
  5744 00001CCE B408                    		mov	ah, 8
  5745 00001CD0 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5746                                  					; DL = drive number
  5747                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5748                                  					; DL = number of consecutive drives
  5749                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5750 00001CD2 FEC6                    		inc	dh
  5751 00001CD4 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5752 00001CD7 5A                      		pop	dx
  5753 00001CD8 7263                    		jb	short setret	; error	if no hard disk
  5754 00001CDA 80E13F                  		and	cl, 3Fh
  5755 00001CDD 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5756 00001CE0 52                      		push	dx		; save partition number
  5757 00001CE1 E8B2FF                  		call	getboot
  5758 00001CE4 5A                      		pop	dx		; restore partition number
  5759 00001CE5 7256                    		jb	short setret
  5760 00001CE7 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5761                                  
  5762                                  ; The first 'active' partition is 00, the second is 01....
  5763                                  ;   then the remainder of the 'primary' but non-active partitions
  5764                                  
  5765                                  act_part:				
  5766 00001CEA 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5767 00001CEF 7418                    		jz	short no_act	; no
  5768 00001CF1 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5769 00001CF5 740C                    		jz	short got_good_act
  5770 00001CF7 26803F04                		cmp	byte [es:bx], 4
  5771 00001CFB 7406                    		jz	short got_good_act
  5772 00001CFD 26803F06                		cmp	byte [es:bx], 6
  5773 00001D01 7506                    		jnz	short no_act
  5774                                  got_good_act:				
  5775 00001D03 08F6                    		or	dh, dh		; is this our target partition #?
  5776 00001D05 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5777 00001D07 FECE                    		dec	dh		; count	down
  5778                                  no_act:					
  5779 00001D09 83C310                  		add	bx, 16
  5780 00001D0C 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5781                                  					; last entry done?
  5782 00001D10 75D8                    		jnz	short act_part	; no, process next entry
  5783 00001D12 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5784                                  					; restore original value of bx
  5785                                  
  5786                                  ; Now scan the non-active partitions
  5787                                  
  5788                                  get_primary:				
  5789 00001D15 26F647FC80              		test	byte [es:bx-4], 80h
  5790 00001D1A 7518                    		jnz	short not_prim	; we've already scanned
  5791                                  					; the ACTIVE ones
  5792 00001D1C 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5793 00001D20 740C                    		jz	short got_prim
  5794 00001D22 26803F04                		cmp	byte [es:bx], 4
  5795 00001D26 7406                    		jz	short got_prim
  5796 00001D28 26803F06                		cmp	byte [es:bx], 6
  5797 00001D2C 7506                    		jnz	short not_prim
  5798                                  got_prim:				
  5799 00001D2E 08F6                    		or	dh, dh		; is this our target partition?
  5800 00001D30 740F                    		jz	short set2
  5801 00001D32 FECE                    		dec	dh
  5802                                  not_prim:				
  5803 00001D34 83C310                  		add	bx, 16
  5804 00001D37 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5805 00001D3B 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5806                                  setret:					
  5807 00001D3D F9                      		stc			; error	return
  5808 00001D3E E9A002                  		jmp	ret_hard_err
  5809                                  
  5810                                  ; ---------------------------------------------------------------------------
  5811                                  
  5812                                  ;  until we get the real logical boot record and get the bpb,
  5813                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5814                                  ;  for the convenience of the computation.
  5815                                  ;
  5816                                  ;  at the end of this procedure, if a bpb information is gotten from
  5817                                  ;  the valid boot record, then we are going to use those bpb information
  5818                                  ;  without change.
  5819                                  ;
  5820                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5821                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5822                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5823                                  
  5824                                  set2:					
  5825                                  		; 14/08/2023
  5826                                  		; ds = cs = BIOSDATA segment (0070h)
  5827 00001D41 8816[CF16]              		mov	[rom_drv_num], dl
  5828                                  		;mov	[cs:rom_drv_num], dl
  5829                                  			; save the rom bios drive number we are handling now.
  5830 00001D45 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5831 00001D49 268B5706                		mov	dx, [es:bx+6]
  5832                                  
  5833                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5834                                  ; sectors should be allowed	
  5835                                  
  5836 00001D4D 83E801                  		sub	ax, 1
  5837 00001D50 83DA00                  		sbb	dx, 0
  5838 00001D53 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5839 00001D57 2613570A                		adc	dx, [es:bx+10]
  5840 00001D5B 7305                    		jnb	short okdrive
  5841 00001D5D 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5842                                  okdrive:				
  5843 00001D62 268B4704                		mov	ax, [es:bx+4]
  5844 00001D66 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5845                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5846 00001D69 268B4706                		mov	ax, [es:bx+6]
  5847 00001D6D 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5848 00001D70 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5849 00001D74 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5850 00001D78 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5851 00001D7B 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5852                                  					; bpb->maxsec =	p->partitionlength
  5853 00001D7E 83FA00                  		cmp	dx, 0
  5854 00001D81 7705                    		ja	short okdrive_1
  5855 00001D83 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5856 00001D86 72B5                    		jb	short setret	; return -1;
  5857                                  okdrive_1:				
  5858 00001D88 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5859 00001D8B 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5860 00001D8E 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5861                                  					; usually equal	to the # of sec/trk.
  5862 00001D90 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5863 00001D93 50                      		push	ax
  5864 00001D94 89D0                    		mov	ax, dx
  5865 00001D96 31D2                    		xor	dx, dx
  5866 00001D98 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5867                                  					; (track)temp_h:ax + (sector)dx
  5868                                  		; 17/10/2022
  5869                                  		;mov	[cs:temp_h], ax
  5870                                  		; 14/08/2023 (ds=cs)
  5871 00001D9A A3[2905]                		mov	[temp_h], ax
  5872 00001D9D 58                      		pop	ax
  5873 00001D9E F7F3                    		div	bx
  5874 00001DA0 88D1                    		mov	cl, dl
  5875 00001DA2 FEC1                    		inc	cl
  5876 00001DA4 31DB                    		xor	bx, bx
  5877 00001DA6 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5878 00001DA9 50                      		push	ax
  5879 00001DAA 31D2                    		xor	dx, dx
  5880                                  		;mov	ax, [cs:temp_h]
  5881 00001DAC A1[2905]                		mov	ax, [temp_h] ; 14/08/2023
  5882 00001DAF F7F3                    		div	bx
  5883                                  		;mov	[cs:temp_h], ax
  5884 00001DB1 A3[2905]                		mov	[temp_h], ax ; 14/08/2023
  5885 00001DB4 58                      		pop	ax
  5886 00001DB5 F7F3                    		div	bx		; dl is head, ax is cylinder
  5887                                  		; 14/08/2023 (ds=cs)
  5888 00001DB7 833E[2905]00            		cmp	word [temp_h], 0
  5889                                  		;cmp	word [cs:temp_h], 0
  5890 00001DBC 775F                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5891 00001DBE 3D0004                  		cmp	ax, 1024
  5892 00001DC1 775A                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5893                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5894                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5895                                  			; ('ja' must be 'jnb')
  5896                                  okdrive_2:
  5897                                   		; 28/07/2019
  5898                                  ; dl is head.
  5899                                  ; ax is cylinder
  5900                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5901                                  
  5902                                  ;*** for mini disks ***
  5903                                  
  5904 00001DC3 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5905                                  					; check	for mini disk
  5906 00001DC7 7503                    		jnz	short oknotmini	; not mini disk.
  5907 00001DC9 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5908                                  					; set the physical track number
  5909                                  oknotmini:
  5910                                  ;*** end of added logic for mini disk
  5911                                  				
  5912 00001DCC D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5913 00001DCE D0CC                    		ror	ah, 1		; two bits of upper byte
  5914 00001DD0 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5915 00001DD3 08E1                    		or	cl, ah		; move two bits	to correct spot
  5916 00001DD5 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5917                                  					; cl is	sector + 2 high	bits of	cylinder
  5918 00001DD7 88D6                    		mov	dh, dl		; dh is	head
  5919                                  		
  5920                                  		; 14/08/2023 (ds=cs)
  5921 00001DD9 8A16[CF16]              		mov	dl, [rom_drv_num]
  5922                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  5923                                  
  5924                                  
  5925                                  ; cl is sector + 2 high bits of cylinder
  5926                                  ; ch is low 8 bits of cylinder
  5927                                  ; dh is head
  5928                                  ; dl is drive
  5929                                  
  5930                                  ; for convenience, we are going to read the logical boot sector
  5931                                  ; into cs:disksector area.
  5932                                  
  5933                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5934                                  ; is to be read in is cs:disksector.
  5935                                  
  5936 00001DDD 0E                      		push	cs
  5937 00001DDE 07                      		pop	es
  5938 00001DDF BB[4E01]                		mov	bx, disksector	; for convenience,
  5939                                  					; we are going to read the logical boot	sector
  5940                                  					; into cs:disksector area.
  5941 00001DE2 B80102                  		mov	ax, 201h
  5942 00001DE5 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5943                                  					; AL = number of sectors to read, CH = track, CL = sector
  5944                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5945                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5946                                  
  5947                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5948                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5949                                  ; media if we recognize the version number.
  5950                                  
  5951                                  		; 14/08/2023
  5952                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  5953                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  5954 00001DE7 53                      		push	bx
  5955 00001DE8 50                      		push	ax
  5956                                  		; 14/08/2023
  5957                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  5958 00001DE9 803FE9                  		cmp	byte [bx], 0E9h
  5959                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5960 00001DEC 740B                    		jz	short check_1_ok ; yes
  5961 00001DEE 803FEB                  		cmp	byte [bx], 0EBh
  5962                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5963 00001DF1 7525                    		jnz	short invalid_boot_record ; no
  5964 00001DF3 807F0290                		cmp	byte [bx+2], 90h
  5965                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5966 00001DF7 751F                    		jnz	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  5967                                  check_1_ok:	
  5968                                  		; 14/08/2023			
  5969 00001DF9 BB[5901]                		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  5970                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5971                                  					; point	to the bpb in the boot record
  5972                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5973 00001DFC 8A470A                  		mov	al, [bx+10] ; 14/08/2023 
  5974                                  					; get the mediadescriptor byte
  5975 00001DFF 24F0                    		and	al, 0F0h	; mask off low nibble
  5976 00001E01 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5977 00001E03 7513                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5978                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5979 00001E05 813F0002                		cmp	word [bx], 512 ; 14/08/2023
  5980 00001E09 750D                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5981                                  
  5982                                  check2_ok:				; yes, mediadescriptor ok.
  5983 00001E0B 8A4702                  		mov	al, [bx+2] ; 14/08/2023
  5984                                  		;mov	al, [cs:bx+2]	; now make sure that
  5985                                  					; the sectorspercluster	is
  5986                                  					; a power of 2
  5987                                  					;
  5988                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5989                                  					; get the sectorspercluster
  5990 00001E0E 08C0                    		or	al, al		; is it	zero?
  5991 00001E10 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5992                                  
  5993                                  ck_power_of_two:			
  5994 00001E12 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5995 00001E14 73FC                    		jnb	short ck_power_of_two
  5996 00001E16 740B                    		jz	short valid_boot_record
  5997                                  
  5998                                  invalid_boot_record:			
  5999 00001E18 58                      		pop	ax
  6000 00001E19 5B                      		pop	bx
  6001 00001E1A E90F01                  		jmp	unknown		; jump to invalid boot record
  6002                                  					; unformatted or illegal media.
  6003                                  	; 14/08/2023	
  6004                                  ; ---------------------------------------------------------------------------
  6005                                  setret_brdg:				
  6006 00001E1D E91DFF                  		jmp	setret
  6007                                  ; ---------------------------------------------------------------------------
  6008                                  
  6009                                  unknown3_0_j:				
  6010 00001E20 E90D01                  		jmp	unknown3_0	; legally formatted media,
  6011                                  					; although, content might be bad.
  6012                                  ; ---------------------------------------------------------------------------
  6013                                  
  6014                                  valid_boot_record:			
  6015 00001E23 58                      		pop	ax
  6016 00001E24 5B                      		pop	bx
  6017                                  
  6018                                  ; Signature found. Now check version.
  6019                                  
  6020                                  		; 14/08/2023
  6021 00001E25 817F08322E              		cmp	word [bx+8], '2.'
  6022                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  6023                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  6024 00001E2A 7506                    		jnz	short try5
  6025 00001E2C 807F0A30                		cmp	byte [bx+10], '0'
  6026                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  6027                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  6028                                  		; 14/08/2023
  6029                                  		;jnz	short try5
  6030                                  		;jmp	short copybpb
  6031 00001E30 7425                    		jz	short copybpb
  6032                                  
  6033                                  	; 14/08/2023
  6034                                  ; ---------------------------------------------------------------------------
  6035                                  ;
  6036                                  ;setret_brdg:				
  6037                                  ;		jmp	setret
  6038                                  ; ---------------------------------------------------------------------------
  6039                                  ;
  6040                                  ;unknown3_0_j:				
  6041                                  ;		jmp	unknown3_0	; legally formatted media,
  6042                                  ;					; although, content might be bad.
  6043                                  ; ---------------------------------------------------------------------------
  6044                                  
  6045                                  try5:					
  6046 00001E32 E8B001                  		call	cover_fdisk_bug
  6047                                  
  6048                                  ; see if it is an os2 signature
  6049                                  
  6050                                  		; 14/08/2023
  6051                                  		; ds = cs = BIOSDATA segment
  6052 00001E35 817F08302E              		cmp	word [bx+8], '0.'
  6053                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  6054                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  6055 00001E3A 750C                    		jnz	short no_os2
  6056 00001E3C 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  6057                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  6058 00001E3F 2C31                    		sub	al, '1'
  6059                                  		;sub	al, 31h		; '1'
  6060 00001E41 24FE                    		and	al, 0FEh
  6061 00001E43 7412                    		jz	short copybpb	; accept either	'1' or '2'
  6062 00001E45 E9E400                  		jmp	unknown
  6063                                  ; ---------------------------------------------------------------------------
  6064                                  
  6065                                  ; no os2 signature, this is to check for real dos versions
  6066                                  
  6067                                  no_os2:					
  6068                                  		; 14/08/2023
  6069                                  		; ds = cs = BIOSDATA
  6070 00001E48 817F08332E              		cmp	word [bx+8], '3.'			
  6071                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  6072                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  6073 00001E4D 72D1                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  6074                                  					; do not trust it, but still legal.
  6075 00001E4F 7506                    		jnz	short copybpb	; honor	os2 boot record
  6076                                  					; or dos 4.0 version
  6077 00001E51 807F0A31                		cmp	byte [bx+10], '1' ; 14/08/2023
  6078                                  		;cmp	byte [cs:bx+10], '1'
  6079                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  6080 00001E55 72C9                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  6081                                  copybpb:
  6082                                  
  6083                                  ; 03/10/2022
  6084                                  
  6085                                  ; we have a valid boot sector. use the bpb in it to build the
  6086                                  ; bpb in bios. it is assumed that only
  6087                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  6088                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  6089                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  6090                                  ; need to be set (all other values in already). fbigfat is also set.
  6091                                  
  6092                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  6093                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  6094                                  ; and system id according to the boot record.
  6095                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  6096                                  
  6097                                  		; 10/12/2022
  6098                                  		; (number of FATs optimization)
  6099 00001E57 BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  6100                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  6101                                  		;mov	cl, [cs:si+05h]
  6102                                  		; 14/08/2023
  6103                                  		; ds = cs = BIOSDATA segment (0070h)
  6104 00001E5A 8A4C05                  		mov	cl, [si+05h] ; number of FATs
  6105                                  
  6106 00001E5D 807C1B29                		cmp	byte [si+1Bh], 29h ; 14/08/2023
  6107                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  6108                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  6109                                  					; [disksector+EXT_BOOT.SIG]
  6110                                  					; EXT_BOOT_SIGNATURE
  6111 00001E61 7542                    		jnz	short copybpb_fat ; conventional fat system
  6112                                  
  6113                                  		; 03/10/2022
  6114                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  6115                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  6116                                  		;	     number of FATs must be 2 ; =*?=
  6117                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  6118                                  		;
  6119                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  6120                                  
  6121                                  		; 10/12/2022
  6122                                  		;cmp	byte [cs:disksector+10h], 0
  6123                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  6124                                  		;jnz	short copybpb_fat ; a fat system.
  6125 00001E63 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  6126 00001E65 753E                    		jnz	short copybpb_fat ; a fat system.
  6127                                  
  6128                                  ; non fat based	media.
  6129                                  
  6130 00001E67 57                      		push	di
  6131                                  		; 14/08/2023
  6132                                  		;push	ds  ; ds = cs = BIOSDATA segment
  6133 00001E68 1E                      		push	ds
  6134 00001E69 07                      		pop	es
  6135                                  		; 14/08/2023
  6136                                  		; ds = cs
  6137                                  		;push	cs
  6138                                  		;pop	ds
  6139                                  
  6140                                  		; 10/12/2022
  6141                                  		; (number of FATs optimization)
  6142                                  		; SI = disksector+11
  6143                                  		; 17/10/2022
  6144                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6145                                  		;mov	si, disksector+11
  6146 00001E6A 83C706                  		add	di, 6		; add di,BDS.BPB
  6147                                  
  6148                                  ; just for completeness, we'll make sure that total_sectors and
  6149                                  ; big_total_sectors aren't both zero. I've seen examples of
  6150                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  6151                                  ; got that way. If it occurs, then use the values from the
  6152                                  ; partition table.
  6153                                  
  6154                                  		; 18/12/2022
  6155 00001E6D 29C9                    		sub	cx, cx 
  6156                                  
  6157                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  6158                                  		;jnz	short already_nonz 
  6159                                  		;			; how about big_total?
  6160                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  6161                                  		;jnz	short already_nonz ; we're okay if any are != 0
  6162                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6163                                  		;jnz	short already_nonz
  6164                                  
  6165                                  		; 14/08/2023
  6166                                  		; ds = cs = BIOSDATA segment (0070h)
  6167                                  
  6168                                  		; 18/12/2022
  6169                                  		;cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  6170                                  		; 14/08/2023
  6171 00001E6F 394C08                  		cmp	[si+8], cx ; 0
  6172 00001E72 751C                    		jnz	short already_nonz
  6173                                  					     	; how about big_total?
  6174                                  		;cmp	[cs:si+15h], cx ; 0 	; [cs:si+EBPB.BIGTOTALSECTORS]
  6175                                  		; 14/08/2023
  6176 00001E74 394C15                  		cmp	[si+15h], cx ; 0
  6177 00001E77 7517                    		jnz	short already_nonz	; we're okay if any are != 0
  6178                                  		;cmp	[cs:si+17h], cx ; 0  	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6179 00001E79 394C17                  		cmp	[si+17h], cx ; 0
  6180 00001E7C 7512                    		jnz	short already_nonz
  6181                                  
  6182                                  ; now let's copy the values from the partition table (now in the BDS)
  6183                                  ; into the BPB in the boot sector buffer, before they get copied back.
  6184                                  
  6185 00001E7E 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  6186                                  		; 14/08/2023
  6187                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  6188 00001E81 894408                  		mov	[si+8], ax
  6189 00001E84 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  6190                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  6191 00001E87 894415                  		mov	[si+15h], ax
  6192 00001E8A 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  6193                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6194 00001E8D 894417                  		mov	[si+17h], ax
  6195                                  
  6196                                  already_nonz:	
  6197                                  		; 18/12/2022
  6198                                  		; cx = 0
  6199 00001E90 B119                    		mov	cl, 25		
  6200                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  6201 00001E92 F3A4                    		rep movsb
  6202 00001E94 1F                      		pop	ds
  6203 00001E95 5F                      		pop	di
  6204 00001E96 06                      		push	es
  6205 00001E97 1E                      		push	ds
  6206 00001E98 07                      		pop	es
  6207 00001E99 0E                      		push	cs
  6208 00001E9A 1F                      		pop	ds
  6209                                  		; 14/08/2023
  6210 00001E9B BD[3607]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  6211                                  		; 18/12/2022
  6212                                  		;mov	bp, mov_media_ids
  6213                                  		;;mov	bp, 751h	; mov_media_ids
  6214                                  					; at 2C7h:751h = 70h:2CC1h
  6215                                  					; set volume id, systemid, serial.
  6216 00001E9E 0E                      		push	cs		; simulate far call
  6217 00001E9F E8B5F8                  		call	call_bios_code
  6218                                  		; 14/08/2023
  6219                                  		; ds = cs = es
  6220                                  		;push	es
  6221                                  		;pop	ds
  6222                                  		;pop	es
  6223 00001EA2 E93501                  		jmp	goodret
  6224                                  ; ---------------------------------------------------------------------------
  6225                                  
  6226                                  ; ****** cas ---
  6227                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  6228                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  6229                                  ; happens with some frequency -- perhaps through some OS/2 setup
  6230                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  6231                                  ; from the boot sector into the DPB anyway, we've just been using
  6232                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  6233                                  ; we'll go ahead and copy it into the DPB, except in the case
  6234                                  ; that it equals zero, in which case we just use the values in
  6235                                  ; the DPB from the partition table.
  6236                                  
  6237                                  ; 17/10/2022
  6238                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  6239                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  6240                                  ; 09/12/2022
  6241                                  MOVMEDIAIDS equ mov_media_ids
  6242                                  CLEARIDS equ clear_ids
  6243                                  ; 11/09/2023
  6244                                  CLEARIDS_X equ clear_ids_x
  6245                                  
  6246                                  copybpb_fat:
  6247                                  		; 10/12/2022
  6248                                  		; (number of FATs optimization)
  6249                                  		; SI = disksector+11				
  6250                                  		; 17/10/2022
  6251                                  		;mov	si, disksector+11
  6252                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6253                                  					; cs:si	-> bpb in boot
  6254 00001EA5 31D2                    		xor	dx, dx
  6255                                  		; 14/08/2023
  6256                                  		; ds = cs = BIOSDATA segment (0070h)
  6257 00001EA7 8B4408                  		mov	ax, [si+8]
  6258                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6259                                  					; get totsec from boot sec
  6260 00001EAA 09C0                    		or	ax, ax
  6261 00001EAC 7514                    		jnz	short copy_totsec ; if non zero, use that
  6262 00001EAE 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  6263                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6264                                  					; get the big version
  6265                                  					; (32 bit total	sectors)
  6266 00001EB1 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  6267                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6268                                  		; 10/12/2022
  6269                                  		; (number of FATs optimization)
  6270                                  		; CL = number of FATs (2 or 1) 
  6271 00001EB4 89D3                    		mov	bx, dx		; see if it is a big zero
  6272 00001EB6 09C3                    		or	bx, ax
  6273 00001EB8 7508                    		jnz	short copy_totsec
  6274                                  			; screw it. it was bogus.
  6275 00001EBA 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6276 00001EBD 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6277 00001EC0 EB06                    		jmp	short fat_big_small
  6278                                  
  6279                                  		;mov	cx, dx
  6280                                  		;or	cx, ax		; see if it is a big zero
  6281                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6282                                  copy_totsec:				
  6283 00001EC2 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6284                                  					; make DPB match boot sec
  6285 00001EC5 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6286                                  
  6287                                  		; 10/12/2022
  6288                                  ;totsec_already_set:			
  6289                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6290                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6291                                  
  6292                                  ; determine fat entry size.
  6293                                  
  6294                                  fat_big_small:
  6295                                  
  6296                                  ;at this moment dx;ax = total sector number
  6297                                  
  6298                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6299                                  ;from the BPB on the disk
  6300                                  				
  6301                                  		; 14/08/2023
  6302                                  		; ds = cs = BIOSDATA segment (0070h)
  6303                                  				
  6304 00001EC8 8B5C03                  		mov	bx, [si+3]
  6305                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6306                                  					; get #reserved_sectors	from BPB
  6307 00001ECB 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6308                                  					; update BDS field
  6309 00001ECE 29D8                    		sub	ax, bx
  6310 00001ED0 83DA00                  		sbb	dx, 0		; update the count
  6311                                  		; 14/08/2023
  6312 00001ED3 8B5C0B                  		mov	bx, [si+0Bh]
  6313                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6314                                  					; bx = sectors/fat
  6315 00001ED6 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6316                                  					; set in bds bpb
  6317                                  		; 10/12/2022
  6318                                  		; (number of FATs optimization)
  6319                                  		; CL = number of FATs (2 or 1) 
  6320                                  		;dec	cl ; *
  6321                                  		; 18/12/2022
  6322 00001ED9 49                      		dec	cx ; *
  6323 00001EDA D3E3                    		shl	bx, cl
  6324                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6325                                  		
  6326 00001EDC 29D8                    		sub	ax, bx		; sub #	fat sectors
  6327 00001EDE 83DA00                  		sbb	dx, 0
  6328 00001EE1 8B5C06                  		mov	bx, [si+6] ; 14/08/2023
  6329                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6330                                  					; # root entries
  6331 00001EE4 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6332                                  					; set in bds bpb
  6333 00001EE7 B104                    		mov	cl, 4
  6334 00001EE9 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6335 00001EEB 29D8                    		sub	ax, bx		; sub #	dir sectors
  6336 00001EED 83DA00                  		sbb	dx, 0		;
  6337                                  					; dx:ax	now contains the
  6338                                  					; # of data sectors
  6339 00001EF0 31C9                    		xor	cx, cx ; *
  6340 00001EF2 8A4C02                  		mov	cl, [si+2] ; 14/08/2023
  6341                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6342                                  					; sectors per cluster
  6343 00001EF5 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6344                                  					; set in bios bpb
  6345 00001EF8 50                      		push	ax
  6346 00001EF9 89D0                    		mov	ax, dx
  6347 00001EFB 31D2                    		xor	dx, dx
  6348 00001EFD F7F1                    		div	cx		; cx = sectors per cluster
  6349                                  		; 14/08/2023 (ds=cs)
  6350 00001EFF A3[2905]                		mov	[temp_h], ax
  6351                                  		;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6352                                  					; # clusters.
  6353 00001F02 58                      		pop	ax
  6354 00001F03 F7F1                    		div	cx
  6355                                  		;cmp	word [cs:temp_h], 0
  6356 00001F05 833E[2905]00            		cmp	word [temp_h], 0 ; 14/08/2023
  6357 00001F0A 7718                    		ja	short toobig_ret ; too big cluster number
  6358 00001F0C 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6359                                  					; is this 16-bit fat?
  6360 00001F0F 7205                    		jb	short copymediaid ; no,	small fat
  6361                                  		; 17/10/2022
  6362 00001F11 800E[CC16]40            		or	byte [fbigfat], 40h
  6363                                  		;or	ds:fbigfat, 40h	; fbig
  6364                                  					; 16 bit fat
  6365                                  copymediaid:				
  6366 00001F16 06                      		push	es
  6367 00001F17 1E                      		push	ds
  6368 00001F18 07                      		pop	es
  6369                                  		; 14/08/2023
  6370                                  		; ds = cs = BIOSDATA
  6371                                  		;push	cs
  6372                                  		;pop	ds
  6373                                  		; 17/10/2022
  6374 00001F19 BD[3607]                		mov	bp, MOVMEDIAIDS
  6375                                  		;mov	bp, 751h	; mov_media_ids
  6376                                  					; at 2C7h:751h = 70h:2CC1h
  6377                                  					; copy filesys_id, volume label
  6378 00001F1C 0E                      		push	cs		; simulate far call
  6379 00001F1D E837F8                  		call	call_bios_code
  6380                                  		; 14/08/2023
  6381                                  		;push	es
  6382                                  		;pop	ds
  6383 00001F20 07                      		pop	es
  6384 00001F21 E99800                  		jmp	massage_bpb	; now final check for bpb info
  6385                                  					; and return.
  6386                                  ; ---------------------------------------------------------------------------
  6387                                  
  6388                                  toobig_ret:				
  6389                                  		; 14/08/2023 (ds=cs=BIOSDATA)
  6390 00001F24 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  6391                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  6392                                  					; too big (32 bit clust #) for FAT16
  6393 00001F29 E9AE00                  		jmp	goodret		; still	drive letter is	assigned
  6394                                  					; but useless. to big for
  6395                                  					; current pc dos fat file system
  6396                                  ; ---------------------------------------------------------------------------
  6397                                  
  6398                                  unknown:	
  6399                                  		; 12/12/2022
  6400 00001F2C 804D2402                		or	byte [di+24h], 02h			
  6401                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6402                                  					; unformatted_media
  6403                                  					; Set unformatted media	flag.
  6404                                  
  6405                                  ; the boot signature may not be	recognizable,
  6406                                  ; but we should	try and	read it	anyway.
  6407                                  
  6408                                  unknown3_0:				
  6409 00001F30 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6410                                  					; [di+BDS.totalsecs32+2]
  6411 00001F33 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6412 00001F36 BE[FC16]                		mov	si, disktable2
  6413                                  
  6414                                  scan:					
  6415                                  		;cmp	dx, [cs:si]	; total sectors hw
  6416                                  		; 14/08/2023 (ds=cs)
  6417 00001F39 3B14                    		cmp	dx, [si] 
  6418 00001F3B 720C                    		jb	short gotparm
  6419 00001F3D 7705                    		ja	short scan_next
  6420                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  6421 00001F3F 3B4402                  		cmp	ax, [si+2]
  6422 00001F42 7605                    		jbe	short gotparm
  6423                                  
  6424                                  scan_next:				
  6425 00001F44 83C60A                  		add	si, 10		; 5*2
  6426 00001F47 EBF0                    		jmp	short scan	; covers upto 512 mb media
  6427                                  ; ---------------------------------------------------------------------------
  6428                                  
  6429                                  gotparm:				
  6430 00001F49 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6431                                  		;or	ds:fbigfat, cl
  6432                                  		; 17/10/2022
  6433 00001F4C 080E[CC16]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  6434                                  		; 14/08/2023
  6435                                  		; ds = cs = BIOSDATA
  6436 00001F50 8B4C04                  		mov	cx, [si+4]
  6437                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6438                                  					; cl = log base 2 of ch
  6439 00001F53 8B5406                  		mov	dx, [si+6]
  6440                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  6441                                  
  6442                                  ; now calculate size of fat table
  6443                                  
  6444 00001F56 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6445                                  					; save number of (root)	dir entries
  6446 00001F59 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6447 00001F5C 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6448 00001F5F 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6449                                  					; save sectors per cluster
  6450                                  		; 17/10/2022
  6451 00001F62 F606[CC16]40            		test	byte [fbigfat], 40h
  6452                                  		;test	ds:fbigfat, 40h	; fbig
  6453                                  					; if (fbigfat)
  6454 00001F67 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6455                                  
  6456                                  ; we don't need to change "small fat" logic since it is gauranteed
  6457                                  ; that double word total sector will not use 12 bit fat (unless
  6458                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6459                                  ; so in this case we assume dx = 0 !!
  6460                                  
  6461 00001F69 31DB                    		xor	bx, bx		; (12 bit fat)
  6462 00001F6B 88EB                    		mov	bl, ch
  6463 00001F6D 4B                      		dec	bx
  6464 00001F6E 01C3                    		add	bx, ax		; dx=0
  6465 00001F70 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6466 00001F72 43                      		inc	bx		; BDS.secperclus
  6467 00001F73 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6468 00001F76 89DE                    		mov	si, bx
  6469 00001F78 D1EB                    		shr	bx, 1
  6470 00001F7A 01F3                    		add	bx, si
  6471 00001F7C 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6472 00001F80 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6473 00001F82 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6474                                  					; save number of fat sectors
  6475 00001F85 EB35                    		jmp	short massage_bpb
  6476                                  ; ---------------------------------------------------------------------------
  6477                                  
  6478                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6479                                  
  6480                                  dobig:					
  6481 00001F87 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6482 00001F89 52                      		push	dx		; save total sectors (high)
  6483 00001F8A 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6484 00001F8D D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6485 00001F8F 29D0                    		sub	ax, dx
  6486 00001F91 5A                      		pop	dx
  6487 00001F92 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6488 00001F95 83E801                  		sub	ax, 1
  6489 00001F98 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6490                                  					; total	secs - reserved	secs - root dir	secs
  6491 00001F9B B302                    		mov	bl, 2
  6492 00001F9D 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6493                                  					; bx = 256 * BDS.secperclus + 2
  6494                                  
  6495                                  ; I don't understand why to add bx here!!!
  6496                                  
  6497                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6498                                  		; 27/09/2022
  6499                                  		; (Microsoft FAT32 File	System Specification,
  6500                                  		; December 2000, Page 21)
  6501                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6502                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6503                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6504                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6505                                  		
  6506                                  					; dx:ax = TmpVal1, bx = TmpVal2
  6507 00001FA0 01D8                    		add	ax, bx		; 
  6508 00001FA2 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  6509 00001FA5 83E801                  		sub	ax, 1		
  6510 00001FA8 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  6511                                  
  6512                                  ; assuming dx in the table will never be bigger than bx.
  6513                                  
  6514 00001FAB F7F3                    		div	bx		; BDS.fatsecs =
  6515                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6516 00001FAD 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6517                                  					; number of fat	sectors
  6518                                  
  6519                                  ; now, set the default filesys_id, volume label, serial number
  6520                                  
  6521                                  		; 14/08/2023
  6522                                  		; [di+1Fh] = [fbigfat]
  6523                                  		;
  6524                                  		;;mov	bl, ds:fbigfat
  6525                                  		;; 17/10/2022
  6526                                  		;mov	bl, [fbigfat]
  6527                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6528                                  
  6529                                  		; 14/08/2023
  6530                                  		;push	ds ; ds = cs = BIOSDATA
  6531 00001FB0 1E                      		push	ds
  6532 00001FB1 07                      		pop	es
  6533                                  		; 14/08/2023 
  6534                                  		; ds = cs = BIOSDATA
  6535                                  		;push	cs
  6536                                  		;pop	ds
  6537                                  		; 11/09/2023
  6538 00001FB2 A0[CC16]                		mov	al, [fbigfat]
  6539 00001FB5 BD[D005]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  6540                                  		; 17/10/2022
  6541                                  		;mov	bp, CLEARIDS
  6542                                  		;;mov	bp, 5D9h	; clear_ids
  6543                                  					; at 2C7h:5D9h = 70h:2B49h
  6544                                  					; at BIOSCODE:06ABh
  6545                                  					;	in PCDOS 7.1 IBMBIO.COM
  6546 00001FB8 0E                      		push	cs
  6547 00001FB9 E89BF7                  		call	call_bios_code
  6548                                  
  6549                                  		; 14/08/2023
  6550                                  		;pop	ds ; ds = cs = BIOSDATA
  6551                                  
  6552                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6553                                  ; set according to the partition information. we are going to
  6554                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6555                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6556                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6557                                  ; we don't do this for the bpb information from the boot record. we
  6558                                  ; are not going to change the bpb information from the boot record.
  6559                                  
  6560                                  massage_bpb:
  6561                                  		; 14/08/2023
  6562                                  		; [di+1Fh] = [fbigfat]
  6563                                  		;
  6564                                  		;; 12/12/2022
  6565                                  		;mov	bl, [fbigfat]
  6566                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6567                                  		;			; set size of fat on media
  6568                                  		;
  6569 00001FBC 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6570 00001FBF 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6571                                  		; 11/09/2023
  6572 00001FC2 09D2                    		or	dx, dx
  6573 00001FC4 7514                    		jnz	short goodret	
  6574                                  		;cmp	dx, 0		; double word total sectors?
  6575                                  		;;ja	short goodret	; don't have to change it.
  6576                                  		;; 12/12/2022
  6577                                  		;ja	short short goodret2
  6578                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6579                                  		;ja	short goodret	; don't have to change it.
  6580                                  		; 12/12/2022
  6581 00001FC6 395519                  		cmp	[di+19h], dx ; 0
  6582                                  		;ja	short goodret2
  6583 00001FC9 770F                    		ja	short goodret	; 11/09/2023
  6584 00001FCB 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6585                                  		;jb	short goodret
  6586                                  		; 12/12/2022
  6587                                  		;jc	short goodret
  6588 00001FCE 7209                    		jc	short goodret_clc ; 11/09/2023
  6589 00001FD0 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6590 00001FD3 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6591                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6592                                  		; 12/12/2022
  6593 00001FD6 89551B                  		mov	[di+1Bh], dx ; 0
  6594                                  goodret_clc:
  6595                                  		; 11/09/2023
  6596 00001FD9 F8                      		clc 
  6597                                  goodret:
  6598                                  		;mov	bl, ds:fbigfat
  6599                                  		; 11/09/2023
  6600                                  		; 12/12/2022
  6601                                  		; 17/10/2022
  6602 00001FDA 8A1E[CC16]              		mov	bl, [fbigfat]
  6603 00001FDE 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6604                                  					; set size of fat on media
  6605                                  		; 11/09/2023
  6606                                  		;clc
  6607                                  ret_hard_err:
  6608                                  		; 12/12/2022
  6609                                  goodret2:
  6610 00001FE1 07                      		pop	es
  6611                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  6612 00001FE2 5B                      		pop	bx
  6613 00001FE3 5F                      		pop	di
  6614 00001FE4 C3                      		retn
  6615                                  
  6616                                  ; =============== S U B	R O U T	I N E =======================================
  6617                                  
  6618                                  ; 15/10/2022
  6619                                  
  6620                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6621                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6622                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6623                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6624                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6625                                  
  6626                                  		; 17/10/2022
  6627                                  cover_fdisk_bug:	
  6628                                  		; 14/08/2023		; ds = cs
  6629 00001FE5 50                      		push	ax
  6630 00001FE6 52                      		push	dx
  6631 00001FE7 56                      		push	si
  6632                                  		; 14/08/2023
  6633 00001FE8 803E[7401]29            		cmp	byte [disksector+26h], 29h
  6634                                  		;cmp	byte [cs:disksector+26h], 29h
  6635                                  					; [disksector+EXT_BOOT.SIG],
  6636                                  					; EXT_BOOT_SIGNATURE
  6637 00001FED 742B                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6638 00001FEF 817F073130              		cmp	word [bx+7], 3031h
  6639                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6640 00001FF4 7506                    		jnz	short cfb_chk_totalsecs ; 14/08/2023
  6641 00001FF6 807F0A30                		cmp	byte [bx+10], '0'
  6642                                  		;cmp	byte [cs:bx+10], '0'
  6643 00001FFA 751E                    		jnz	short cfb_retit
  6644                                  cfb_chk_totalsecs:
  6645                                  		; 17/10/2022		
  6646 00001FFC BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6647                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6648                                  		; 14/08/2023
  6649 00001FFF 837C0800                		cmp	word [si+8], 0
  6650                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6651                                  					; just to make sure.
  6652 00002003 7415                    		jz	short cfb_retit
  6653                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6654                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6655                                  		; 14/08/2023
  6656 00002005 8B4408                  		mov	ax, [si+8]
  6657 00002008 034411                  		add	ax, [si+11h]
  6658                                  
  6659 0000200B 730D                    		jnb	short cfb_retit
  6660 0000200D 750B                    		jnz	short cfb_retit
  6661                                  					; if carry set and ax=0
  6662 0000200F FF4C08                  		dec	word [si+8]
  6663                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  6664                                  					; then decrease	BPB_TOTALSECTORS by 1
  6665 00002012 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6666 00002016 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6667                                  cfb_retit:				
  6668 0000201A 5E                      		pop	si
  6669 0000201B 5A                      		pop	dx
  6670 0000201C 58                      		pop	ax
  6671 0000201D C3                      		retn
  6672                                  
  6673                                  ; ---------------------------------------------------------------------------
  6674                                  
  6675 0000201E 0200                    word2:		dw 2
  6676 00002020 0300                    word3:		dw 3
  6677 00002022 0002                    word512:	dw 512
  6678                                  
  6679                                  ; =============== S U B	R O U T	I N E =======================================
  6680                                  
  6681                                  ; 15/10/2022
  6682                                  
  6683                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6684                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6685                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6686                                  ; as the bpb on the drive.
  6687                                  ;
  6688                                  ; no attempt is made to preserve registers since we are going to jump to
  6689                                  ; sysinit straight after this routine.
  6690                                  
  6691                                  setdrvparms:
  6692                                  		; 14/12/2023
  6693                                  		; ds = cs
  6694 00002024 31DB                    		xor	bx, bx
  6695                                  		; 18/10/2022
  6696 00002026 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6697                                  _next_bds:				
  6698 0000202A 06                      		push	es
  6699 0000202B 57                      		push	di
  6700 0000202C 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6701 00002030 80FB05                  		cmp	bl, 5		; ffHardFile
  6702 00002033 753E                    		jnz	short nothardff
  6703 00002035 31D2                    		xor	dx, dx
  6704 00002037 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6705 0000203B 09C0                    		or	ax, ax
  6706 0000203D 7508                    		jnz	short get_ccyl
  6707 0000203F 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6708 00002043 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6709                                  
  6710                                  get_ccyl:				
  6711 00002047 52                      		push	dx
  6712 00002048 50                      		push	ax
  6713 00002049 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6714 0000204D 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6715                                  					; assume sectors per cyl. < 64k.
  6716 00002051 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6717 00002053 58                      		pop	ax
  6718 00002054 5A                      		pop	dx		; dx:ax	= total	sectors
  6719 00002055 50                      		push	ax
  6720 00002056 89D0                    		mov	ax, dx
  6721 00002058 31D2                    		xor	dx, dx
  6722 0000205A F7F1                    		div	cx
  6723                                  
  6724                                  		; 14/12/2023  ; !*!
  6725                                  		; (data segment may not be same with code segment here)
  6726 0000205C 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6727                                  
  6728 00002060 58                      		pop	ax
  6729 00002061 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6730 00002063 09D2                    		or	dx, dx
  6731 00002065 7401                    		jz	short no_cyl_rnd ; came out even
  6732 00002067 40                      		inc	ax		; round	up
  6733                                  
  6734                                  no_cyl_rnd:				
  6735 00002068 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6736 0000206C 06                      		push	es
  6737 0000206D 1F                      		pop	ds  ; !*! ; 14/12/2023
  6738 0000206E 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6739                                  					; ds:si	-> bpb for hard	file
  6740 00002071 EB55                    		jmp	short set_recbpb
  6741                                  ; ---------------------------------------------------------------------------
  6742                                  
  6743                                  nothardff:				
  6744 00002073 0E                      		push	cs
  6745 00002074 1F                      		pop	ds
  6746                                  
  6747                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6748                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6749                                  
  6750                                  		; 10/12/2022
  6751                                  		; ds = cs
  6752                                  		; 17/10/2022 (ds=cs)
  6753 00002075 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6754                                  		;cmp	byte [cs:fakefloppydrv], 1
  6755 0000207A 7454                    		jz	short go_to_next_bds
  6756 0000207C 80FB07                  		cmp	bl, 7		; ffother
  6757                                  					; special case "other" type of medium
  6758 0000207F 753D                    		jnz	short not_process_other
  6759                                  process_other:
  6760 00002081 31D2                    		xor	dx, dx
  6761 00002083 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6762 00002086 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6763 00002089 F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6764 0000208C 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6765                                  					; have the total number of sectors
  6766 0000208F 48                      		dec	ax
  6767 00002090 B201                    		mov	dl, 1
  6768                                  _again:					
  6769 00002092 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6770 00002095 7206                    		jb	short _@@
  6771 00002097 D1E8                    		shr	ax, 1
  6772 00002099 D0E2                    		shl	dl, 1
  6773 0000209B EBF5                    		jmp	short _again
  6774                                  ; ---------------------------------------------------------------------------
  6775                                  
  6776                                  _@@:					
  6777 0000209D 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6778 000020A0 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6779 000020A2 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6780                                  __@@:					
  6781 000020A7 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6782                                  
  6783                                  ; logic to get the sectors/fat area.
  6784                                  ; fat entry is assumed to be 1.5 bytes!!!
  6785                                  
  6786                                  		; 10/12/2022
  6787                                  		; ds = cs
  6788                                  		; 17/10/2022 (ds=cs)
  6789 000020AA F726[2020]              		mul	word [word3]
  6790 000020AE F736[1E20]              		div	word [word2]
  6791 000020B2 31D2                    		xor	dx, dx
  6792 000020B4 F736[2220]              		div	word [word512]
  6793                                  		;
  6794                                  		; 10/12/2022
  6795                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6796                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6797                                  		;xor	dx, dx
  6798                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6799                                  		;
  6800 000020B8 40                      		inc	ax		; + 1
  6801                                  no_round_up:
  6802 000020B9 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6803 000020BC EB12                    		jmp	short go_to_next_bds
  6804                                  ; ---------------------------------------------------------------------------
  6805                                  
  6806                                  not_process_other:			
  6807 000020BE D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6808                                  		;mov	si, bpbtable
  6809                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6810                                  		; 09/12/2022
  6811                                  		;mov	si, BPBTABLE
  6812                                  		;mov	si, [bx+si]	; get address of bpb
  6813                                  		; 10/12/2022
  6814                                  		;mov	si, [BPBTABLE+bx]
  6815                                  		; 13/12/2022
  6816                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6817                                  		; 14/08/2023
  6818                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6819                                  							; correct offset
  6820 000020C0 8BB7[CC72]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6821                                  		
  6822                                  		; 28/08/2023
  6823 000020C4 81C6B03C                		add	si, SYSINIT_OFFSET
  6824                                  set_recbpb:				
  6825 000020C8 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6826                                  					; es:di	-> recbpb
  6827 000020CB B91900                  		mov	cx, 25		; bpbx.size
  6828 000020CE F3A4                    		rep movsb		; move (size bpbx) bytes	
  6829                                  go_to_next_bds:				
  6830 000020D0 5F                      		pop	di
  6831 000020D1 07                      		pop	es		; restore pointer to bds
  6832 000020D2 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6833 000020D5 83FFFF                  		cmp	di, 0FFFFh	; -1
  6834 000020D8 740A                    		jz	short got_end_of_bds_chain
  6835 000020DA E94DFF                  		jmp	_next_bds
  6836                                  ; ---------------------------------------------------------------------------
  6837                                  
  6838                                  		; 18/12/2022
  6839                                  ;got_end_of_bds_chain:			
  6840                                  		;retn
  6841                                  
  6842                                  ; =============== S U B	R O U T	I N E =======================================
  6843                                  
  6844                                  ; 15/10/2022
  6845                                  ; 30/12/2018 - Retro DOS v4.0
  6846                                  
  6847                                  ; al = device number
  6848                                  
  6849                                  print_init:	
  6850 000020DD 98                      		cbw
  6851 000020DE 89C2                    		mov	dx, ax
  6852 000020E0 B401                    		mov	ah, 1
  6853 000020E2 CD17                    		int	17h		; PRINTER - INITIALIZE
  6854                                  					; DX = printer port (0-3)
  6855                                  					; Return: AH = status
  6856                                  got_end_of_bds_chain:	; 18/12/2022
  6857 000020E4 C3                      		retn
  6858                                  
  6859                                  ; =============== S U B	R O U T	I N E =======================================
  6860                                  
  6861                                  ; al = device number
  6862                                  
  6863                                  aux_init:
  6864 000020E5 98                      		cbw
  6865 000020E6 89C2                    		mov	dx, ax
  6866                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6867                                  					; 2400,n,1,8 (msequ.inc)
  6868                                  		;mov	ah, 0
  6869                                  		; 10/12/2022
  6870 000020E8 B8A300                  		mov	ax, 00A3h
  6871 000020EB CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6872                                  					; 	AL = initializing parameters,
  6873                                  					;	DX = port number (0-3)
  6874                                  					; Return: AH = RS-232 status code bits,
  6875                                  					;	  AL = modem status bits
  6876 000020ED C3                      		retn
  6877                                  
  6878                                  ; =============== S U B	R O U T	I N E =======================================
  6879                                  
  6880                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6881                                  ; 30/12/2018 - Retro DOS v4.0
  6882                                  ; 03/06/2018 - Retro DOS v3.0
  6883                                  ; (19/03/2018 - Retro DOS v2.0)
  6884                                  
  6885                                  ; domini **********************************************************************
  6886                                  ;
  6887                                  ;mini disk initialization routine. called right after dohard
  6888                                  ;modified for >2 hardfile support
  6889                                  ;
  6890                                  ; **cs=ds=es=datagrp
  6891                                  ;
  6892                                  ; **domini will search for every extended partition in the system, and
  6893                                  ;   initialize it.
  6894                                  ;
  6895                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6896                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6897                                  ;   address of bdsm table.
  6898                                  ;
  6899                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6900                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6901                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6902                                  ;
  6903                                  ; **domini will use the same routine in sethard routine after label set2 to
  6904                                  ;   save coding.
  6905                                  ;
  6906                                  ; **drvmax determined in dohard routine will be used for the next
  6907                                  ;   available logical mini disk drive number.
  6908                                  ;
  6909                                  ; input: drvmax, dskdrvs
  6910                                  ;
  6911                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6912                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6913                                  ;
  6914                                  ; called modules:
  6915                                  ;		  getboot
  6916                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6917                                  ;
  6918                                  ;		  setmini (new, it will use set2 routine)
  6919                                  ;
  6920                                  ; variables used: end_of_bdsm
  6921                                  ;		  rom_minidisk_num
  6922                                  ;		  mini_hdlim, mini_seclim
  6923                                  ;		  BDS_STRUC, start_bds
  6924                                  ;
  6925                                  ;******************************************************************************
  6926                                  
  6927                                  		; 19/10/2022
  6928                                  domini:	
  6929 000020EE 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6930                                  		; 10/12/2022
  6931 000020F2 20F6                    		and	dh, dh
  6932                                  		;cmp	dh, 0
  6933 000020F4 7431                    		jz	short dominiret	; no hard file?	then exit.
  6934 000020F6 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6935                                  domini_loop:				
  6936 000020F8 52                      		push	dx
  6937 000020F9 8816[4217]              		mov	[rom_minidisk_num], dl
  6938 000020FD B408                    		mov	ah, 8
  6939 000020FF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6940                                  					; DL = drive number
  6941                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6942                                  					; DL = number of consecutive drives
  6943                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6944 00002101 FEC6                    		inc	dh
  6945 00002103 31C0                    		xor	ax, ax
  6946 00002105 88F0                    		mov	al, dh
  6947 00002107 A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6948 0000210A 80E13F                  		and	cl, 3Fh
  6949 0000210D 88C8                    		mov	al, cl
  6950 0000210F A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6951 00002112 06                      		push	es
  6952 00002113 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6953 00002117 E87CFB                  		call	getboot		; read master boot record into
  6954                                  					; initbootsegment:bootbias
  6955 0000211A 7203                    		jb	short domininext
  6956 0000211C E80900                  		call	find_mini_partition
  6957                                  domininext:				
  6958 0000211F 07                      		pop	es
  6959 00002120 5A                      		pop	dx
  6960 00002121 FEC2                    		inc	dl		; next hard file
  6961 00002123 FECE                    		dec	dh
  6962 00002125 75D1                    		jnz	short domini_loop
  6963                                  dominiret:				
  6964 00002127 C3                      		retn
  6965                                  
  6966                                  ; =============== S U B	R O U T	I N E =======================================
  6967                                  
  6968                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6969                                  ; 30/12/2018 - Retro DOS v4.0
  6970                                  
  6971                                  ;find_mini_partition tries to find every extended partition on a disk.
  6972                                  ;at entry:	di -> bdsm entry
  6973                                  ;		es:bx -> 07c0:bootbias - master boot record
  6974                                  ;		rom_minidisk_num - rom drive number
  6975                                  ;		drvmax - logical drive number
  6976                                  ;		mini_hdlim, mini_seclim
  6977                                  ;
  6978                                  ;called routine: setmini which uses set2 (in sethard routine)
  6979                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6980                                  
  6981                                  
  6982                                  find_mini_partition:	
  6983 00002128 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6984                                  fmpnext:				
  6985 0000212C 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6986 00002130 740A                    		jz	short fmpgot
  6987 00002132 83C310                  		add	bx, 16
  6988 00002135 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6989 00002139 75F1                    		jnz	short fmpnext
  6990                                  		;jmp	short fmpnextfound ; extended partition	not found
  6991                                  		; 18/12/2022
  6992                                  fmpnextfound:
  6993 0000213B C3                      		retn
  6994                                  
  6995                                  ;		; 30/07/2019 - Retro DOS v3.2
  6996                                  ;		jb	short fmpnext
  6997                                  ;fmpret:
  6998                                  ;		retn	; 29/05/2019
  6999                                  
  7000                                  ; ---------------------------------------------------------------------------
  7001                                  
  7002                                  		; 19/10/2022
  7003                                  fmpgot:					; found my partition.				
  7004 0000213C E89D00                  		call	dmax_check	; check	for drvmax already 26
  7005 0000213F 73FA                    		jnb	short fmpnextfound ; done if too many
  7006 00002141 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  7007 00002145 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  7008                                  		; 10/12/2022
  7009 0000214A 804D2301                		or	byte [di+23h], 1
  7010                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  7011                                  					; fNon_Removable
  7012 0000214E C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  7013                                  					; ffHardFile
  7014 00002152 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  7015 00002157 A1[4817]                		mov	ax, [mini_hdlim]
  7016 0000215A 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  7017 0000215D A1[4A17]                		mov	ax, [mini_seclim]
  7018 00002160 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  7019 00002163 A0[4217]                		mov	al, [rom_minidisk_num]
  7020 00002166 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  7021                                  					; set physical number
  7022 00002169 A0[7500]                		mov	al, [drvmax]
  7023 0000216C 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7024                                  					; set logical number
  7025 0000216F 26837F0A00              		cmp	word [es:bx+10], 0
  7026 00002174 7707                    		ja	short fmpgot_cont
  7027 00002176 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  7028                                  					; only lower word is meaningful.
  7029 0000217B 72BE                    		jb	short fmpnextfound
  7030                                  					; should be bigger than 64 sectors at least
  7031                                  fmpgot_cont:				
  7032 0000217D 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  7033 00002180 268A7702                		mov	dh, [es:bx+2]	; cylinder
  7034 00002184 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  7035 00002187 D0C6                    		rol	dh, 1
  7036 00002189 D0C6                    		rol	dh, 1
  7037 0000218B 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  7038 0000218F 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  7039                                  					; set hidden trks
  7040 00002192 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  7041 00002196 268A7701                		mov	dh, [es:bx+1]	; head
  7042 0000219A 8A16[4217]              		mov	dl, [rom_minidisk_num]
  7043 0000219E BB0002                  		mov	bx, 200h	; bootbias
  7044 000021A1 B80102                  		mov	ax, 201h
  7045 000021A4 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7046                                  					; AL = number of sectors to read, CH = track, CL = sector
  7047                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7048                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7049 000021A6 7293                    		jb	short fmpnextfound
  7050 000021A8 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7051                                  
  7052                                  		; 14/08/2023
  7053                                  		;push	es
  7054 000021AB E80800                  		call	setmini		; install a mini disk.
  7055                                  					; bx value saved.
  7056                                  		;pop	es  ; 14/08/2023
  7057 000021AE 7203                    		jb	short fmpnextchain
  7058 000021B0 E83E00                  		call	xinstall_bds	; -- install the bdsm into table
  7059                                  fmpnextchain:				
  7060 000021B3 E976FF                  		jmp	fmpnext		; let's find out
  7061                                  					; if we	have any chained partition
  7062                                  ; ---------------------------------------------------------------------------
  7063                                  
  7064                                  		; 18/12/2022
  7065                                  ;fmpnextfound:				
  7066                                  		;retn
  7067                                  
  7068                                  ; =============== S U B	R O U T	I N E =======================================
  7069                                  
  7070                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7071                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  7072                                  
  7073                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  7074                                  	
  7075 000021B6 57                      		push	di
  7076 000021B7 53                      		push	bx
  7077                                  		; 14/08/2023
  7078                                  		; ds = cs = BIOSDATA segment
  7079                                  		;push	ds
  7080 000021B8 06                      		push	es
  7081                                  setmini_1:				
  7082 000021B9 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  7083 000021BD 741A                    		jz	short setmini_2
  7084 000021BF 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  7085 000021C3 7414                    		jz	short setmini_2
  7086 000021C5 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  7087 000021C9 740E                    		jz	short setmini_2
  7088 000021CB 83C310                  		add	bx, 16
  7089 000021CE 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7090 000021D2 75E5                    		jnz	short setmini_1
  7091 000021D4 F9                      		stc
  7092 000021D5 07                      		pop	es
  7093                                  		; 14/08/2023
  7094                                  		;pop	ds
  7095 000021D6 5B                      		pop	bx
  7096 000021D7 5F                      		pop	di
  7097 000021D8 C3                      		retn
  7098                                  
  7099                                  ; ---------------------------------------------------------------------------
  7100                                  setmini_2:				
  7101 000021D9 E965FB                  		jmp	set2		; branch into middle of sethard
  7102                                  
  7103                                  ; =============== S U B	R O U T	I N E =======================================
  7104                                  
  7105                                  ; 15/10/2022
  7106                                  ; 28/12/2018 - Retro DOS v4.0
  7107                                  ;
  7108                                  ; dmax_check --- call this when we want to install a new drive.
  7109                                  ;		it checks for drvmax < 26 to see if there is
  7110                                  ;		a drive letter left.
  7111                                  ;
  7112                                  ;	drvmax < 26 : carry SET!
  7113                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  7114                                  ;			trash ax
  7115                                  
  7116                                  dmax_check:	
  7117 000021DC 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  7118 000021E1 720D                    		jb	short dmax_ok	; return with carry if okay
  7119 000021E3 06                      		push	es
  7120                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  7121 000021E4 B83B04                  		mov	ax, SYSINITSEG	; 17/10/2022	
  7122 000021E7 8EC0                    		mov	es, ax
  7123                                  		; 18/10/2022
  7124 000021E9 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  7125                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  7126                                  					; set message flag
  7127                                  					; [SYSINIT+toomanydrivesflag]
  7128 000021EF 07                      		pop	es
  7129                                  
  7130                                  		;;push	es
  7131                                  		;;mov	ax,SYSINIT_SEG
  7132                                  		;;mov	es,ax
  7133                                  		;;mov	byte [es:toomanydrivesflag],1
  7134                                  					; set message flag
  7135                                  		;;pop	es
  7136                                  		;
  7137                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  7138                                  dmax_ok:				
  7139 000021F0 C3                      		retn
  7140                                  
  7141                                  ; =============== S U B	R O U T	I N E =======================================
  7142                                  
  7143                                  ; 18/10/2022
  7144                                  ; 15/10/2022
  7145                                  ; 28/12/2018 - Retro DOS v4.0						
  7146                                  ;								 
  7147                                  ;	link next bds (at ds:di) into the chain. assume that the
  7148                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  7149                                  ;	  dskdrv_table, and end_of_bdss.	
  7150                                  
  7151                                  xinstall_bds:		
  7152 000021F1 56                      		push	si
  7153 000021F2 53                      		push	bx
  7154 000021F3 8B36[1901]              		mov	si, [start_bds]	; get first bds
  7155                                  xinstall_bds_1:				
  7156 000021F7 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  7157 000021FA 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  7158                                  		;mov	si, [si+BDS.link]
  7159 000021FC 8B34                    		mov	si, [si]	; chain	through	list
  7160 000021FE EBF7                    		jmp	short xinstall_bds_1
  7161                                  ; ---------------------------------------------------------------------------
  7162                                  
  7163                                  xinstall_bds_2:				
  7164                                  		;mov	[si+BDS.link], di
  7165 00002200 893C                    		mov	[si], di
  7166                                  		;mov	[si+BDS.link+2], ds
  7167 00002202 8C5C02                  		mov	[si+2], ds
  7168                                  		;mov	word [di+BDS.link], -1
  7169 00002205 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  7170                                  		;mov	[di+BDS.link+2], ds
  7171 00002209 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  7172                                  		; 20/03/2019 - Retro DOS v4.0
  7173                                  		;lea	bx, [di+BDS.BPB]
  7174 0000220C 8D5D06                  		lea	bx, [di+6]
  7175 0000220F 8B36[4417]              		mov	si, [last_dskdrv_table]
  7176 00002213 891C                    		mov	[si], bx
  7177 00002215 8306[4417]02            		add	word [last_dskdrv_table], 2
  7178 0000221A FE06[7500]              		inc	byte [drvmax]
  7179 0000221E 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  7180 00002223 5B                      		pop	bx
  7181 00002224 5E                      		pop	si
  7182 00002225 C3                      		retn
  7183                                  
  7184                                  ; =============== S U B	R O U T	I N E =======================================
  7185                                  
  7186                                  ; 17/10/2022
  7187                                  ; 15/10/2022
  7188                                  ; 28/12/2018 - Retro DOS v4.0
  7189                                  ; 03/06/2018 - Retro DOS v3.0
  7190                                  
  7191                                  cmos_clock_read:	
  7192 00002226 50                      		push	ax
  7193 00002227 51                      		push	cx
  7194 00002228 52                      		push	dx
  7195 00002229 55                      		push	bp
  7196 0000222A 31ED                    		xor	bp, bp
  7197                                  loop_clock:				
  7198 0000222C 31C9                    		xor	cx, cx
  7199 0000222E 31D2                    		xor	dx, dx
  7200 00002230 B402                    		mov	ah, 2
  7201 00002232 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  7202                                  					; Return: CH = hours in	BCD
  7203                                  					; CL = minutes in BCD
  7204                                  					; DH = seconds in BCD
  7205 00002234 83F900                  		cmp	cx, 0
  7206 00002237 7512                    		jnz	short clock_present
  7207 00002239 83FA00                  		cmp	dx, 0
  7208 0000223C 750D                    		jnz	short clock_present
  7209 0000223E 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  7210 00002241 741C                    		jz	short no_readdate ; was	at zero	setting.
  7211 00002243 45                      		inc	bp		; only perform delay once.
  7212 00002244 B90040                  		mov	cx, 4000h	; 16384
  7213                                  delay:					
  7214 00002247 E2FE                    		loop	delay
  7215 00002249 EBE1                    		jmp	short loop_clock
  7216                                  ; ---------------------------------------------------------------------------
  7217                                  
  7218                                  clock_present:				
  7219 0000224B 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  7220 00002251 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  7221                                  					; possibly destroyed by	cp dos and
  7222                                  					; post routine did not restore that.
  7223 00002254 56                      		push	si
  7224 00002255 E8D0F2                  		call	read_real_date	; read real-time clock for date
  7225 00002258 FA                      		cli
  7226                                  		;mov	ds:daycnt, si	; set system date
  7227 00002259 8936[F004]              		mov	[daycnt], si
  7228 0000225D FB                      		sti
  7229 0000225E 5E                      		pop	si
  7230                                  
  7231                                  no_readdate:				
  7232 0000225F 5D                      		pop	bp
  7233 00002260 5A                      		pop	dx
  7234 00002261 59                      		pop	cx
  7235 00002262 58                      		pop	ax
  7236 00002263 C3                      		retn
  7237                                  
  7238                                  ; ---------------------------------------------------------------------------
  7239                                  
  7240                                  ; the following code is written by jack gulley in engineering group.
  7241                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  7242                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  7243                                  ; the cmos clock rate are still slow which slow down disk operations
  7244                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  7245                                  ; to fix this problem at the request of cp dos.
  7246                                  ;
  7247                                  ; the program is modified to be run on msinit. equates are defined
  7248                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  7249                                  ;
  7250                                  ;  the following code cmosck is used to insure that the cmos has not
  7251                                  ;	had its rate controls left in an invalid state on older at's.
  7252                                  ;
  7253                                  ;	it checks for an at model byte "fc" with a submodel type of
  7254                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  7255                                  ;	bits in case post has not done it. this initilization routine
  7256                                  ;	is only needed once when dos loads. it should be run as soon
  7257                                  ;	as possible to prevent slow diskette access.
  7258                                  ;
  7259                                  ;	this code exposes one to dos clearing cmos setup done by a
  7260                                  ;	resident program that hides and re-boots the system.
  7261                                  
  7262                                  cmosck:					; check and reset rtc rate bits	
  7263                                  
  7264                                  ;model byte and submodel byte were already determined in msinit.
  7265                                  
  7266                                  	; 16/06/2018 - Retro DOS v3.0
  7267                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  7268                                  			
  7269 00002264 50                      		push	ax
  7270 00002265 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  7271 0000226B 7525                    		jnz	short cmosck9	; Exit if not an AT model
  7272 0000226D 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  7273                                  					; Is it 06 for the industral AT ?
  7274 00002273 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  7275 00002275 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  7276                                  					; Is it 00, 01, 02, or 03 ?
  7277 0000227B 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  7278                                  					; Also,Secondary_model_byte = 0 
  7279                                  					;   when AH=0C0h, int 15h failed.
  7280                                  					;	RESET THE CMOS PERIODIC RATE 
  7281                                  					;  Model=FC submodel=00,01,02,03 or 06 
  7282                                  cmosck4:				
  7283 0000227D B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7284                                  					; NMI disabled on return
  7285 0000227F B426                    		mov	ah, 26h		; 00100110b
  7286                                  					; Set divider &	rate selection
  7287 00002281 E83000                  		call	cmos_write
  7288 00002284 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7289                                  					; NMI disabled on return
  7290 00002286 E80B00                  		call	cmos_read
  7291 00002289 2407                    		and	al, 7		; 00000111b
  7292                                  					; clear	SET,PIE,AIE,UIE,SQWE
  7293 0000228B 88C4                    		mov	ah, al
  7294 0000228D B00B                    		mov	al, 0Bh		; cmos_reg_b
  7295                                  					; NMI enabled on return
  7296 0000228F E82200                  		call	cmos_write
  7297                                  cmosck9:				
  7298 00002292 58                      		pop	ax
  7299 00002293 C3                      		retn
  7300                                  
  7301                                  ; =============== S U B	R O U T	I N E =======================================
  7302                                  
  7303                                  ;--- CMOS_READ -----------------------------------------------------------------
  7304                                  ;		read byte from cmos system clock configuration table	       :
  7305                                  ;									       :
  7306                                  ; input: (al)=	cmos table address to be read				       :
  7307                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7308                                  ;		bits 6-0 = address of table location to read		       :
  7309                                  ;									       :
  7310                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7311                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  7312                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7313                                  ;		the cmos address register is pointed to a default value and    :
  7314                                  ;		the interrupt flag restored to the entry state on return.      :
  7315                                  ;		only the (al) register and the nmi state is changed.	       :
  7316                                  ;-------------------------------------------------------------------------------
  7317                                  
  7318                                  cmos_read:				; read location (al) into (al)	
  7319 00002294 9C                      		pushf
  7320 00002295 FA                      		cli
  7321 00002296 53                      		push	bx
  7322 00002297 50                      		push	ax		; AL = cmos table address to be	read
  7323 00002298 0C80                    		or	al, 80h
  7324 0000229A E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7325                                  					; RTC Seconds
  7326 0000229C 90                      		nop			; (undocumented	delay needed)
  7327 0000229D E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7328 0000229F 89C3                    		mov	bx, ax
  7329 000022A1 58                      		pop	ax
  7330 000022A2 2480                    		and	al, 80h
  7331 000022A4 0C0F                    		or	al, 0Fh
  7332 000022A6 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7333                                  					; RTC Seconds
  7334 000022A8 90                      		nop
  7335 000022A9 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7336 000022AB 89D8                    		mov	ax, bx
  7337 000022AD 5B                      		pop	bx
  7338 000022AE 0E                      		push	cs		; *place code segment in stack and
  7339 000022AF E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7340 000022B2 C3                      		retn			; return with flags restored
  7341                                  
  7342                                  ; ---------------------------------------------------------------------------
  7343                                  
  7344                                  cmos_popf:				
  7345 000022B3 CF                      		iret			; popf for level b- parts
  7346                                  					; return far and restore flags
  7347                                  
  7348                                  ; =============== S U B	R O U T	I N E =======================================
  7349                                  
  7350                                  ;--- cmos_write ----------------------------------------------------------------
  7351                                  ;		write byte to cmos system clock configuration table	       :
  7352                                  ;									       :
  7353                                  ; input: (al)=	cmos table address to be written to			       :
  7354                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7355                                  ;		bits 6-0 = address of table location to write		       :
  7356                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7357                                  ;									       :
  7358                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7359                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7360                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7361                                  ;		the cmos address register is pointed to a default value and    :
  7362                                  ;		the interrupt flag restored to the entry state on return.      :
  7363                                  ;		only the cmos location and the nmi state is changed.	       :
  7364                                  ;-------------------------------------------------------------------------------
  7365                                  
  7366                                  cmos_write:				; write (ah) to location (al)	
  7367 000022B4 9C                      		pushf			; write (ah) to location (al)
  7368 000022B5 50                      		push	ax		; save work register values
  7369 000022B6 FA                      		cli
  7370 000022B7 50                      		push	ax		; save user nmi	state
  7371 000022B8 0C80                    		or	al, 80h		; disable nmi for us
  7372 000022BA E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7373                                  					; RTC Seconds
  7374 000022BC 90                      		nop
  7375 000022BD 88E0                    		mov	al, ah
  7376 000022BF E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7377 000022C1 58                      		pop	ax		; get user nmi
  7378 000022C2 2480                    		and	al, 80h
  7379 000022C4 0C0F                    		or	al, 0Fh
  7380 000022C6 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7381                                  					; RTC Seconds
  7382 000022C8 90                      		nop
  7383 000022C9 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7384 000022CB 58                      		pop	ax		; restore work registers
  7385 000022CC 0E                      		push	cs		; *place code segment in stack and
  7386 000022CD E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  7387 000022D0 C3                      		retn
  7388                                  
  7389                                  ; 21/12/2022
  7390                                  ; ---------------------------------------------------------------------------
  7391                                  ; ---------------------------------------------------------------------------
  7392                                  %if 0
  7393                                  
  7394                                  ; ---------------------------------------------------------------------------
  7395                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7396                                  ; ---------------------------------------------------------------------------
  7397                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7398                                  ; ---------------------------------------------------------------------------
  7399                                  
  7400                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7401                                  ;
  7402                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7403                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7404                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7405                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7406                                  
  7407                                  ; =============== S U B	R O U T	I N E =======================================
  7408                                  
  7409                                  ; GetClus, read in a cluster at a specified address
  7410                                  ;
  7411                                  ;  bx = cluster to read
  7412                                  ;  cx = sectors per cluster
  7413                                  ;  es:di = load location
  7414                                  
  7415                                  ; 17/10/2022
  7416                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7417                                  ; 09/12/2022
  7418                                  DISKRD equ diskrd
  7419                                  
  7420                                  		; 17/10/2022
  7421                                  getclus:
  7422                                  		; 14/12/2023
  7423                                  		; 13/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0 IO.SYS)
  7424                                  		; ds = cs
  7425                                  				
  7426                                  		push	cx
  7427                                  		push	di
  7428                                  		;mov	[cs:doscnt], cx
  7429                                  		mov	[doscnt], cx ; 13/12/2023
  7430                                  		mov	ax, bx
  7431                                  		dec	ax
  7432                                  		dec	ax
  7433                                  		mul	cx		; convert to logical sector
  7434                                  					; dx:ax	= matching logical sector number
  7435                                  					;	  starting from the data sector
  7436                                  		;add	ax, [cs:bios_l]
  7437                                  		;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7438                                  		; 13/12/2023
  7439                                  		add	ax, [bios_l]
  7440                                  		adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
  7441                                  unpack:					
  7442                                  		push	ds ; ds = cs ; 13/12/2023
  7443                                  		push	dx ; * ; 13/12/2023
  7444                                  		push	ax
  7445                                  		push	bx
  7446                                  		;mov	si, [cs:fatloc]
  7447                                  		mov	si, [fatloc] ; 13/12/2023
  7448                                  		mov	ds, si
  7449                                  		mov	si, bx		; next cluster
  7450                                  		test	byte [cs:fbigfat], 40h	; fbig
  7451                                  					; 16 bit fat?
  7452                                  		jnz	short unpack16	; yes
  7453                                  		shr	si, 1		; 12 bit fat. si=si/2
  7454                                  					; si = clus + clus/2
  7455                                  		add	si, bx		;
  7456                                  					; (si =	byte offset of the cluster in the FAT)
  7457                                  		;push	dx ; 13/12/2023
  7458                                  		xor	dx, dx
  7459                                  		; 12/12/2023
  7460                                  		; ds = FAT buffer segment
  7461                                  		call	get_fat_sector
  7462                                  		;pop	dx ; 12/12/2023
  7463                                  
  7464                                  		mov	ax, [bx]	; save it into ax
  7465                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7466                                  		; 25/06/2023
  7467                                  		;mov	al, [bx]	; splitted fat
  7468                                  
  7469                                  		; 13/12/2023
  7470                                  		;mov	[cs:temp_cluster], al
  7471                                  		push	ax ; **	; al = low 8 bits of 12 bits cluster number
  7472                                  
  7473                                  		inc	si		; (next	byte)
  7474                                  
  7475                                  		;push	dx ; 13/12/2023
  7476                                  		xor	dx, dx
  7477                                  		call	get_fat_sector
  7478                                  		;pop	dx ; 13/12/2023
  7479                                  
  7480                                  		;mov	al, ds:0
  7481                                  		; 13/12/2023
  7482                                  		; ds = FAT buffer segment
  7483                                  		;mov	al, [0] ; 19/10/2022
  7484                                  		;mov	[cs:temp_cluster+1], al
  7485                                  		;mov	ax, [cs:temp_cluster]
  7486                                  		; 13/12/2023
  7487                                  		;mov	al, [cs:temp_cluster]
  7488                                  		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
  7489                                  		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
  7490                                  even_odd:				
  7491                                  		pop	bx		; restore old fat entry	value
  7492                                  		push	bx		; save it right	away.
  7493                                  		shr	bx, 1		; was it even or odd?
  7494                                  		jnb	short havclus	; it was even.
  7495                                  		shr	ax, 1		; odd. massage fat value and keep
  7496                                  					; the highest 12 bits.
  7497                                  		shr	ax, 1
  7498                                  		shr	ax, 1
  7499                                  		shr	ax, 1
  7500                                  havclus:				
  7501                                  		mov	bx, ax		; now bx = new fat entry.
  7502                                  		and	bx, 0FFFh	; keep low 12 bits.
  7503                                  		jmp	short unpackx
  7504                                  ; ---------------------------------------------------------------------------
  7505                                  
  7506                                  unpack16:				
  7507                                  		;push	dx	; 13/12/2023	
  7508                                  		xor	dx, dx ; 0
  7509                                  		shl	si, 1		; extend to 32 bit offset
  7510                                  		;adc	dx, 0
  7511                                  		; 13/12/2023
  7512                                  		rcl	dx, 1
  7513                                  
  7514                                  		; 13/12/2023
  7515                                  		; ds = FAT buffer segment
  7516                                  		call	get_fat_sector
  7517                                  		;pop	dx	; 13/12/2023
  7518                                  		mov	bx, [bx]	;
  7519                                  					; bx = new fat entry.
  7520                                  unpackx:				
  7521                                  		pop	si		; restore old bx value into si
  7522                                  		pop	ax		; restore logical sector (low)
  7523                                  		pop	dx ; * ; 13/12/2023
  7524                                  		pop	ds
  7525                                  		; 13/12/2023
  7526                                  		; (this is a fast kernel loading method by the MSDOS programmer)
  7527                                  		; ((consequtive clusters --> consequtive sectors))
  7528                                  		; ds = cs
  7529                                  		sub	si, bx
  7530                                  		cmp	si, -1		; one apart? (consequtive?)
  7531                                  					; (current = previous+1)
  7532                                  		jnz	short getcl2	; no, read [doscnt] sectors 
  7533                                  		;add	[cs:doscnt], cx
  7534                                  		add	[doscnt], cx ; 13/12/2023 ; add to read count
  7535                                  		jmp	short unpack
  7536                                  ; ---------------------------------------------------------------------------
  7537                                  
  7538                                  getcl2:					
  7539                                  		push	bx
  7540                                  		push	dx		; sector to read (high)
  7541                                  		push	ax		; sector to read (low)
  7542                                  
  7543                                  		; 13/12/2023
  7544                                  		; ds = cs
  7545                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
  7546                                  		;mov	cx, [cs:doscnt]
  7547                                  		mov	ax, [drvfat]	; get drive and	fat spec
  7548                                  		mov	cx, [doscnt]
  7549                                  
  7550                                  		pop	dx		; sector to read for diskrd (low)
  7551                                  		;pop	word [cs:start_sec_h]
  7552                                  		; 13/12/2023
  7553                                  		pop	word [start_sec_h]
  7554                                  					; sector to read for diskrd (high)
  7555                                  		; 13/12/2023
  7556                                  		; ds = cs
  7557                                  		;push	ds
  7558                                  		;push	cs
  7559                                  		;pop	ds
  7560                                  
  7561                                  		push	cs		; simulate far call
  7562                                  		; 17/10/2022
  7563                                  		mov	bp, DISKRD	; 8E5h
  7564                                  		;mov	bp, 8E5h	; offset diskrd
  7565                                  					; 2C7h:8E5h = 70h:2E55h
  7566                                  		call	call_bios_code	; read the clusters
  7567                                  		
  7568                                  		;pop	ds
  7569                                  		; 13/12/2023
  7570                                  		; ds = cs
  7571                                  		pop	bx
  7572                                  		pop	di
  7573                                  
  7574                                  		;mov	ax, [cs:doscnt]	; get number of	sectors	read
  7575                                  		; 13/12/2023
  7576                                  		mov	ax, [doscnt]
  7577                                  		xchg	ah, al		; multiply by 256
  7578                                  		shl	ax, 1		; times	2 equal	512
  7579                                  		add	di, ax		; update load location
  7580                                  		pop	cx		; restore sectors/cluster
  7581                                  		retn
  7582                                  
  7583                                  ; =============== S U B	R O U T	I N E =======================================
  7584                                  
  7585                                  
  7586                                  ;function: find and read the corresponding fat sector into ds:0
  7587                                  ;
  7588                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7589                                  ;     ds - fatloc segment
  7590                                  ;     cs:drvfat - logical drive number, fat id
  7591                                  ;     cs:md_sectorsize
  7592                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7593                                  ;
  7594                                  ;out). corresponding fat sector read in.
  7595                                  ;      bx = offset value from fatlog segment.
  7596                                  ;      other registera saved.
  7597                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7598                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7599                                  ;      should save this byte, and read the next fat sector to get the rest
  7600                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7601                                  
  7602                                  		; 17/10/2022
  7603                                  get_fat_sector:	
  7604                                  		; 14/12/2023
  7605                                  		; 13/12/2023
  7606                                  		; ds = fat buffer segment
  7607                                  
  7608                                  		; 13/12/2023
  7609                                  		;push	ax ; (not necessary)
  7610                                  		push	cx ; read count (sectors per cluster)
  7611                                  		push	di ; IBMDOS.COM/MSDOS.SYS load offset
  7612                                  		push	si ; FAT offset value (from fat entry 0)
  7613                                  		push	es ; IBMDOS.COM/MSDOS.SYS load segment
  7614                                  		push	ds ; FAT buffer segment
  7615                                  
  7616                                  		; 13/12/2023
  7617                                  		push	cs
  7618                                  		pop	ds
  7619                                  
  7620                                  		mov	ax, si
  7621                                  		;;mov	cx, [cs:md_sectorsize] ; 512
  7622                                  		; 13/12/2023
  7623                                  		;mov	cx, [md_sectorsize] ; 512
  7624                                  		;div	cx		; ax = sector number, dx = offset
  7625                                  		; 13/12/2023
  7626                                  		;nop
  7627                                  
  7628                                  		; 13/12/2023
  7629                                  		div	word [md_sectorsize] ; 512
  7630                                  
  7631                                  		; ax = FAT sector (sequence/index) number
  7632                                  		; dx = cluster number offset
  7633                                  
  7634                                  		; Get rid of the assumption that
  7635                                  		; there	is only	one reserved sector
  7636                                  
  7637                                  		; 13/12/2023 ; *
  7638                                  		;push	es ; *
  7639                                  		;push	ds ; *
  7640                                  		;push	di ; *
  7641                                  		push	ax
  7642                                  		;push	cs ; *
  7643                                  		;pop	ds ; *
  7644                                  
  7645                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
  7646                                  		; 13/12/2023
  7647                                  		mov	ax, [drvfat]	; get drive # and FAT id 
  7648                                  		mov	bp, SETDRIVE
  7649                                  		;;mov	bp, 4D7h	; setdrive
  7650                                  					; at 2C7h:4D7h = 70h:2A47h
  7651                                  		push	cs		; simulate far call
  7652                                  		call	call_bios_code	; get bds for drive
  7653                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7654                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7655                                  					; add #reserved_sectors
  7656                                  		; 13/12/2023
  7657                                  		;pop	di ; *
  7658                                  		;pop	ds ; *
  7659                                  		;pop	es ; *
  7660                                  
  7661                                  		; 13/12/2023
  7662                                  		; ds = cs
  7663                                  		cmp	ax, [last_fat_sec_num]
  7664                                  		;cmp	ax, [cs:last_fat_sec_num]
  7665                                  		jz	short gfs_split_chk ; don't need to read it again.
  7666                                  		mov	[last_fat_sec_num], ax
  7667                                  		;mov	[cs:last_fat_sec_num], ax
  7668                                  					; sector number
  7669                                  					; (in the partition, without hidden sectors)
  7670                                  		; 13/12/2023
  7671                                  		pop	es ; FAT buffer segment (DS on top of the stack)
  7672                                  		push	es ; (put it on top of the stack again)
  7673                                  
  7674                                  		push	dx ; cluster number offset
  7675                                  
  7676                                  		; 13/12/2023
  7677                                  		xor	cx, cx
  7678                                  		mov	[start_sec_h], cx ;0 
  7679                                  		;mov	word [cs:start_sec_h], 0 
  7680                                  					; prepare to read the fat sector
  7681                                  					; start_sec_h is always	0 for fat sector.
  7682                                  		mov	dx, ax
  7683                                  		; 13/12/2023
  7684                                  		inc	cx ; cx = 1
  7685                                  		;mov	cx, 1		; 1 sector read
  7686                                  		;mov	ax, [cs:drvfat]
  7687                                  		mov	ax, [drvfat]
  7688                                  		;push	ds
  7689                                  		;pop	es
  7690                                  
  7691                                  		xor	di, di	; 0	; es:di	-> fatloc segment:0
  7692                                  		
  7693                                  		; 13/12/2023
  7694                                  		;push	ds
  7695                                  		;push	cs
  7696                                  		;pop	ds
  7697                                  		
  7698                                  		push	cs		; simulate far call
  7699                                  		mov	bp, DISKRD	; 8E5h
  7700                                  		;mov	bp, 8E5h	; offset diskrd
  7701                                  					; 2C7h:8E5h = 70h:2E55h
  7702                                  		call	call_bios_code
  7703                                  
  7704                                  		; 13/12/2023
  7705                                  		;pop	ds
  7706                                  		; ds = cs = biosdata segment
  7707                                  
  7708                                  		pop	dx ; cluster number offset 
  7709                                  
  7710                                  gfs_split_chk:
  7711                                  		; 13/12/2023
  7712                                  		;mov	cx, [cs:md_sectorsize] ; 512
  7713                                  		mov	cx, [md_sectorsize]
  7714                                  ;gfs_split_chk:				
  7715                                  		dec	cx		; 511
  7716                                  		cmp	dx, cx		; if offset points to the
  7717                                  					; last byte of this sector,
  7718                                  					; then splitted	entry.
  7719                                  		mov	bx, dx		; set bx to dx
  7720                                  		
  7721                                  		; 13/12/2023
  7722                                  		; bx = dx = cluster number offset in the FAT buffer
  7723                                  		pop	ds ; FAT buffer segment
  7724                                  		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
  7725                                  		pop	si ; FAT offset value (from fat entry 0)
  7726                                  		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
  7727                                  		pop	cx ; read count (sectors per cluster)
  7728                                  		;pop	ax
  7729                                  
  7730                                  		retn
  7731                                  ; 15/10/2022
  7732                                  ;Bios_Data_Init	ends
  7733                                  
  7734                                  %endif
  7735                                  ; ---------------------------------------------------------------------------
  7736                                  ; ---------------------------------------------------------------------------
  7737                                  
  7738                                  		; 09/12/2022
  7739                                  		;db 0
  7740                                  
  7741                                  numbertodiv	equ ($-BData_start)
  7742                                  numbertomod	equ (numbertodiv % 16)
  7743                                  
  7744                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
  7745 000022D1 00<rep Fh>              		times (16-numbertomod) db 0
  7746                                  %endif
  7747                                  
  7748                                  ;align 16
  7749                                  
  7750                                  ; 09/12/2022
  7751                                  IOSYSCODESEGOFF equ $ - BData_start
  7752                                  ; 29/09/2023
  7753                                  ;IOSYSCODESEGOFF equ $-$$
  7754                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7755                                  
  7756                                  ; 28/09/2023
  7757                                  S1SIZE equ $-$$
  7758                                  
  7759                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7760                                  ; ---------------------------------------------------------------------------
  7761                                  		;db 4 dup(0)
  7762                                  ; 09/12/2022		
  7763                                  ;		times 4 db 0	; 19/10/2022
  7764                                  ; ---------------------------------------------------------------------------
  7765                                  
  7766                                  ;============================================================================
  7767                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7768                                  ;============================================================================
  7769                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7770                                  
  7771                                  section .BIOSCODE vstart=0  
  7772                                  
  7773                                  BCode_start:	 ; 09/12/2022
  7774                                   
  7775                                  ; 02/10/2022
  7776                                  
  7777                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7778                                  ;----------------------------------------------------------------------------
  7779                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7780                                  ;----------------------------------------------------------------------------
  7781                                  
  7782                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7783 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7784 00000030 7000                    BiosDataWord:	dw 70h
  7785                                  
  7786                                  ; 15/10/2022
  7787                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7788                                  ; 09/12/2022
  7789                                  BIOSDATAWORD	equ BiosDataWord
  7790                                  
  7791                                  ; ---------------------------------------------------------------------------
  7792                                  
  7793                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7794                                  
  7795                                  ;************************************************************************
  7796                                  ;*									*
  7797                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7798                                  ;*	  trashes di, cx, es						*
  7799                                  ;*									*
  7800                                  ;*	cas -- should be made disposable!				*
  7801                                  ;*									*
  7802                                  ;************************************************************************
  7803                                  
  7804                                  _seg_reinit:
  7805 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7806                                  					; at 2C7h:30h or 70h:25A0h
  7807                                  		;mov	di, (offset cdev+2)
  7808 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7809 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7810                                  
  7811                                  _seg_reinit_1:				
  7812 0000003D AB                      		stosw			; modify Bios_Code entry points
  7813 0000003E 47                      		inc	di
  7814 0000003F 47                      		inc	di
  7815 00000040 E2FB                    		loop	_seg_reinit_1
  7816 00000042 CB                      		retf
  7817                                  
  7818                                  ; ---------------------------------------------------------------------------
  7819                                  
  7820                                  ; 15/10/2022
  7821                                  
  7822                                  ;************************************************************************
  7823                                  ;*									*
  7824                                  ;*	chardev_entry - main device driver dispatch routine		*
  7825                                  ;*	   called with a dummy parameter block on the stack		*
  7826                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7827                                  ;*									*
  7828                                  ;*	will eventually take care of doing the transitions in		*
  7829                                  ;*	   out of Bios_Code						*
  7830                                  ;*									*
  7831                                  ;************************************************************************
  7832                                  
  7833                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7834 00000043 56                      		push	si
  7835 00000044 50                      		push	ax
  7836 00000045 51                      		push	cx
  7837 00000046 52                      		push	dx
  7838 00000047 57                      		push	di
  7839 00000048 55                      		push	bp
  7840 00000049 1E                      		push	ds
  7841 0000004A 06                      		push	es
  7842 0000004B 53                      		push	bx
  7843 0000004C 89E5                    		mov	bp, sp
  7844 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7845                                  		;;mov	ds, word [cs:0030h]
  7846                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7847 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7848 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7849 00000059 A2[2100]                		mov	[auxnum], al
  7850 0000005C 8826[E704]              		mov	[printdev], ah
  7851 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7852 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7853 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7854 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7855 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7856 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7857                                  		; 17/10/2022
  7858 00000076 81FE[9604]              		cmp	si, DSKTBL
  7859                                  		;cmp	si, 4A2h	; dsktbl
  7860                                  					; at 2C7h:4A2h = 70h:2A12h
  7861 0000007A 7517                    		jnz	short no_sector32_mapping
  7862                                  
  7863                                  ; Special case for 32-bit start sector number:
  7864                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7865                                  ;      set high 16 bits of secnum to 0
  7866                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7867                                  ;
  7868                                  ; pass high word of sector number in start_sec_h, low word in dx
  7869                                  ;
  7870                                  ; note: start_l and start_h are the offsets within the io_request packet
  7871                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7872                                  ;	  it has been used.
  7873                                  ;
  7874                                  ; note: remember not to destroy the registers which have been set up before
  7875                                  
  7876                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7877 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7878 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7879 00000085 750C                    		jnz	short no_sector32_mapping
  7880 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7881                                  					; 32 bits dsk req
  7882                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7883 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7884 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7885                                  					; dx = packet.start_l
  7886                                  no_sector32_mapping:			
  7887 00000093 97                      		xchg	ax, di
  7888 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7889 00000098 2E3A04                  		cmp	al, cs:[si]
  7890 0000009B 732C                    		jnb	short command_error
  7891 0000009D 98                      		cbw			; note that al <= 15 means ok
  7892 0000009E D1E0                    		shl	ax, 1
  7893 000000A0 01C6                    		add	si, ax
  7894 000000A2 97                      		xchg	ax, di
  7895 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7896 000000A7 FC                      		cld
  7897                                  		; 17/10/2022
  7898 000000A8 2EFF5401                		call	near [cs:si+1]
  7899                                  		;call	word ptr cs:si+1
  7900 000000AC 7202                    		jb	short already_got_ah_status
  7901 000000AE B401                    		mov	ah, 1
  7902                                  already_got_ah_status:
  7903                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7904                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7905                                  					; cas note: shouldn't be needed!
  7906 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7907                                  		;lds	bx, ds:ptrsav
  7908 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7909 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7910                                  					; mark operation complete
  7911 000000BC 5B                      		pop	bx
  7912 000000BD 07                      		pop	es
  7913 000000BE 1F                      		pop	ds
  7914 000000BF 5D                      		pop	bp
  7915 000000C0 5F                      		pop	di
  7916 000000C1 5A                      		pop	dx
  7917 000000C2 59                      		pop	cx
  7918 000000C3 58                      		pop	ax
  7919 000000C4 5E                      		pop	si
  7920 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7921                                  	
  7922                                  		; fall through into bc_retf
  7923                                  ; ---------------------------------------------------------------------------	
  7924                                  bc_retf:
  7925 000000C8 CB                      		retf
  7926                                  ; ---------------------------------------------------------------------------
  7927                                  
  7928                                  command_error:				
  7929 000000C9 E80900                  		call	bc_cmderr
  7930 000000CC EBE2                    		jmp	short already_got_ah_status
  7931                                  ; 15/10/2022
  7932                                  ; 01/05/2019
  7933                                  
  7934                                  ;----------------------------------------------------------------------------
  7935                                  ; The following piece of hack is for supporting CP/M compatibility
  7936                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7937                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7938                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7939                                  ; high.
  7940                                  ;----------------------------------------------------------------------------
  7941                                  
  7942                                  		;db 7 dup(0)
  7943                                  
  7944                                  		; 15/10/2022
  7945                                  
  7946 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7947                                  
  7948 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7949                                  				;  which is the CP/M call 5 entry point
  7950                                  		
  7951                                  
  7952                                  ; ---------------------------------------------------------------------------
  7953                                  
  7954                                  ;	exit - all routines return through this path
  7955                                  
  7956                                  bc_cmderr:				
  7957 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7958                                  					; unknown command error
  7959                                  
  7960                                  ; =============== S U B	R O U T	I N E =======================================
  7961                                  
  7962                                  ;	now zero the count field by subtracting its current value,
  7963                                  ;	  which is still in cx, from itself.
  7964                                  
  7965                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7966                                  ;	  in order to return the number actually complete
  7967                                  
  7968                                  bc_err_cnt:	
  7969                                  		;les	bx, ds:ptrsav
  7970                                  		; 19/10/2022
  7971 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7972 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7973                                  					; # of successful i/o's
  7974 000000DF B481                    		mov	ah, 81h		; mark error return
  7975 000000E1 F9                      		stc			; indicate abnormal end
  7976 000000E2 C3                      		retn
  7977                                  
  7978                                  ; 15/10/2022
  7979                                  
  7980                                  ;Bios_Code ends
  7981                                  
  7982                                  ;----------------------------------------------------------------------------
  7983                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7984                                  ;----------------------------------------------------------------------------
  7985                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7986                                  ; 10/01/2019 - Retro DOS v4.0
  7987                                  
  7988                                  ; 30/04/2019
  7989                                  
  7990                                  ;title	mschar - character and clock devices
  7991                                  
  7992                                  ;MODE_CTRLBRK	equ	0FFh
  7993                                  
  7994                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7995                                  
  7996                                  ;************************************************************************
  7997                                  ;*									*
  7998                                  ;*	device driver dispatch tables					*
  7999                                  ;*									*
  8000                                  ;*	each table starts with a byte which lists the number of		*
  8001                                  ;*	legal functions, followed by that number of words. Each		*
  8002                                  ;*	word represents an offset of a routine in Bios_Code which	*
  8003                                  ;*	handles the function. The functions are terminated with		*
  8004                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  8005                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  8006                                  ;*	returned as abnormal completion status. Notice that ds		*
  8007                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  8008                                  ;*									*
  8009                                  ;************************************************************************
  8010                                  
  8011                                  		; 13/12/2022
  8012                                  		;db 0
  8013                                  
  8014                                  		; 13/12/202
  8015 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  8016                                  					; 2C7h:0E4h = 70h:2654h
  8017 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  8018                                  					; 00 init
  8019 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  8020 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  8021 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  8022                                  					; 03
  8023 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  8024                                  					; 04
  8025 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  8026                                  					; 05
  8027 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  8028 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  8029                                  					; 07
  8030 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  8031                                  					; 08
  8032 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  8033 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  8034                                  con_table_end:
  8035 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  8036                                  					; 2C7h:0FBh = 70h:266Bh
  8037 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  8038 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  8039 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  8040 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  8041 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  8042                                  					; 04 indicate zero chars read
  8043 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  8044                                  					; 05 read non-destructive
  8045 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  8046 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  8047 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  8048 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  8049 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  8050 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  8051 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  8052 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  8053 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  8054 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  8055 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  8056 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  8057 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  8058 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  8059 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  8060 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  8061 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  8062 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  8063 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  8064 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  8065                                  prn_table_end:
  8066 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  8067                                  					; 2C7h:130h = 70h:26A0h
  8068 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  8069 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  8070 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  8071 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  8072 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  8073 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  8074 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  8075 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  8076 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  8077 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  8078 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  8079                                  aux_table_end:
  8080 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  8081                                  					; 2C7h:147h = 70h:26B7h
  8082 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  8083 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  8084 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  8085 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  8086 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  8087 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  8088 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  8089 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  8090 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  8091 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  8092                                  tim_table_end:
  8093                                  
  8094                                  ; ---------------------------------------------------------------------------
  8095                                  
  8096                                  ;************************************************************************
  8097                                  ;*									*
  8098                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  8099                                  ;*									*
  8100                                  ;************************************************************************
  8101                                  
  8102                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  8103                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  8104 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  8105                                  con_loop:				
  8106 0000015D E80500                  		call	chrin		; get char in al
  8107 00000160 AA                      		stosb			; store	char at	es:di
  8108 00000161 E2FA                    		loop	con_loop
  8109                                  con_exit:				
  8110 00000163 F8                      		clc
  8111 00000164 C3                      		retn
  8112                                  
  8113                                  ; =============== S U B	R O U T	I N E =======================================
  8114                                  
  8115                                  ;************************************************************************
  8116                                  ;*									*
  8117                                  ;*	chrin - input single char from keyboard into al			*
  8118                                  ;*									*
  8119                                  ;*	  we are going to issue extended keyboard function, if		*
  8120                                  ;*	  supported. the returning value of the extended keystroke	*
  8121                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  8122                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  8123                                  ;*	  this creates a conflict when the user entered real		*
  8124                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  8125                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  8126                                  ;*	  in the following manner:					*
  8127                                  ;*									*
  8128                                  ;*	      ah = 16h							*
  8129                                  ;*	      int 16h							*
  8130                                  ;*	      if al == 0, then extended code (in ah)			*
  8131                                  ;*	      else if al == 0E0h, then					*
  8132                                  ;*	      if ah <> 0, then extended code (in ah)			*
  8133                                  ;*		else greek_alpha character.				*
  8134                                  ;*									*
  8135                                  ;*	also, for compatibility reason, if an extended code is		*
  8136                                  ;*	  detected, then we are going to change the value in al		*
  8137                                  ;*	  from 0E0h to 00h.						*
  8138                                  ;*									*
  8139                                  ;************************************************************************
  8140                                  
  8141                                  		; 19/10/2022
  8142                                  chrin:		
  8143 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  8144 00000169 30C0                    		xor	al, al
  8145 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  8146 0000016F 08C0                    		or	al, al
  8147 00000171 752A                    		jnz	short keyret
  8148 00000173 CD16                    		int	16h		; KEYBOARD -
  8149 00000175 09C0                    		or	ax, ax
  8150 00000177 74EC                    		jz	short chrin
  8151 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  8152 0000017C 7504                    		jnz	short alt_ext_chk
  8153 0000017E B010                    		mov	al, 10h
  8154 00000180 EB1B                    		jmp	short keyret
  8155                                  ; ---------------------------------------------------------------------------
  8156                                  
  8157                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  8158                                  ;    if character read was 0E0h then
  8159                                  ;      if extended byte was zero (i.e. ah == 0) then
  8160                                  ;	 goto keyret
  8161                                  ;      else
  8162                                  ;	 set al to zero
  8163                                  ;	 goto alt_save
  8164                                  ;      endif
  8165                                  ;    endif
  8166                                  ;  endif
  8167                                  
  8168                                  alt_ext_chk:
  8169 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  8170 00000187 740C                    		jz	short not_ext
  8171 00000189 3CE0                    		cmp	al, 0E0h
  8172 0000018B 7508                    		jnz	short not_ext
  8173 0000018D 08E4                    		or	ah, ah
  8174 0000018F 740C                    		jz	short keyret
  8175 00000191 30C0                    		xor	al, al
  8176 00000193 EB04                    		jmp	short alt_save
  8177                                  ; ---------------------------------------------------------------------------
  8178                                  
  8179                                  not_ext:				
  8180 00000195 08C0                    		or	al, al		; special case?
  8181 00000197 7504                    		jnz	short keyret
  8182                                  alt_save:				
  8183 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  8184                                  keyret:					
  8185 0000019D C3                      		retn
  8186                                  
  8187                                  ; ---------------------------------------------------------------------------
  8188                                  
  8189                                  ;************************************************************************
  8190                                  ;*									*
  8191                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  8192                                  ;*									*
  8193                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  8194                                  ;*	in the status word of the request packet, and there is no	*
  8195                                  ;*	character in the input buffer, the driver issues a system	*
  8196                                  ;*	wait request to the rom. on return from the rom, it returns	*
  8197                                  ;*	a 'char-not-found' to the dos.					*
  8198                                  ;*									*
  8199                                  ;************************************************************************
  8200                                  
  8201                                  		; 19/10/2022
  8202                                  con_rdnd:				
  8203 0000019E A0[0C00]                		mov	al, [altah]
  8204 000001A1 08C0                    		or	al, al
  8205 000001A3 754C                    		jnz	short rdexit
  8206 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  8207 000001A9 CD16                    		int	16h		; KEYBOARD -
  8208 000001AB 751D                    		jnz	short gotchr
  8209 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  8210 000001B2 7412                    		jz	short z_bus_exit
  8211 000001B4 C41E[1200]              		les	bx, [ptrsav]
  8212                                  		; 12/12/2022
  8213 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  8214                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  8215 000001BD 7407                    		jz	short z_bus_exit
  8216 000001BF B80041                  		mov	ax, 4100h
  8217 000001C2 30DB                    		xor	bl, bl
  8218 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  8219                                  					; AL = condition type, BH = condition compare or mask value
  8220                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  8221                                  					; DX = I/O port	address	if AL bit 4 set
  8222                                  z_bus_exit:				
  8223 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  8224 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  8225 000001C9 C3                      		retn
  8226                                  ; ---------------------------------------------------------------------------
  8227                                  
  8228                                  gotchr:					
  8229 000001CA 09C0                    		or	ax, ax
  8230 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  8231 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  8232 000001D2 CD16                    		int	16h		; KEYBOARD -
  8233 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  8234                                  ; ---------------------------------------------------------------------------
  8235                                  
  8236                                  notbrk:					
  8237 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  8238 000001D9 7504                    		jnz	short rd_ext_chk
  8239 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  8240 000001DD EB12                    		jmp	short rdexit
  8241                                  ; ---------------------------------------------------------------------------
  8242                                  
  8243                                  rd_ext_chk:				
  8244 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  8245 000001E4 740B                    		jz	short rdexit
  8246 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  8247 000001E8 7507                    		jnz	short rdexit
  8248 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  8249 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  8250 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  8251                                  					; change it for	compatibility
  8252                                  rdexit:					
  8253 000001F1 C41E[1200]              		les	bx, [ptrsav]
  8254 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  8255                                  					; return keyboard character here
  8256                                  bc_exvec:				
  8257 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  8258                                  					; indicate normal termination
  8259 000001FA C3                      		retn
  8260                                  ; ---------------------------------------------------------------------------
  8261                                  
  8262                                  ;************************************************************************
  8263                                  ;*									*
  8264                                  ;*	con_write - console write routine				*
  8265                                  ;*									*
  8266                                  ;*	entry:	es:di -> buffer						*
  8267                                  ;*		cx    =  count						*
  8268                                  ;*									*
  8269                                  ;************************************************************************
  8270                                  
  8271                                  con_writ:
  8272                                  		;jcxz	short bc_exvec
  8273 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  8274                                  		; 12/12/2022
  8275                                  		;jcxz	cc_ret
  8276                                  con_lp:					
  8277 000001FD 268A05                  		mov	al, [es:di]
  8278 00000200 47                      		inc	di
  8279 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  8280                                  					; AL = character to display
  8281 00000203 E2F8                    		loop	con_lp
  8282                                  cc_ret:					
  8283 00000205 F8                      		clc
  8284 00000206 C3                      		retn
  8285                                  
  8286                                  ; =============== S U B	R O U T	I N E =======================================
  8287                                  
  8288                                  ;************************************************************************
  8289                                  ;*									*
  8290                                  ;*	con_flush - flush out keyboard queue				*
  8291                                  ;*									*
  8292                                  ;************************************************************************
  8293                                  
  8294                                  con_flush:
  8295 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  8296                                  flloop:					; while	(charavail()) charread();	
  8297 0000020C B401                    		mov	ah, 1
  8298 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  8299                                  					; Return: ZF clear if character	in buffer
  8300                                  					; AH = scan code, AL = character
  8301                                  					; ZF set if no character in buffer
  8302 00000210 74F3                    		jz	short cc_ret
  8303 00000212 30E4                    		xor	ah, ah
  8304 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  8305                                  					; Return: AH = scan code, AL = character
  8306 00000216 EBF4                    		jmp	short flloop
  8307                                  
  8308                                  ; ---------------------------------------------------------------------------
  8309                                  
  8310                                  ; 15/10/2022
  8311                                  
  8312                                  ;************************************************************************
  8313                                  ;*									*
  8314                                  ;*	some equates for rom bios printer i/o				*
  8315                                  ;*									*
  8316                                  ;************************************************************************
  8317                                  
  8318                                  ; ibm rom status bits (i don't trust them, neither should you)
  8319                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  8320                                  ; whole slew of bits, only one of which is correct.
  8321                                  
  8322                                  ;notbusystatus	equ 10000000b		; not busy
  8323                                  ;nopaperstatus	equ 00100000b		; no more paper
  8324                                  ;prnselected	equ 00010000b		; printer selected
  8325                                  ;ioerrstatus	equ 00001000b		; some kinda error
  8326                                  ;timeoutstatus	equ 00000001b		; time out.
  8327                                  ;
  8328                                  ;noprinter	equ 00110000b		; no printer attached
  8329                                  
  8330                                  ; 18/03/2019 - Retro DOS v4.0
  8331                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  8332                                  
  8333                                  ; ---------------------------------------------------------------------------
  8334                                  
  8335                                  ;************************************************************************
  8336                                  ;*									*
  8337                                  ;*	prn_input - return with no error but zero chars read		*
  8338                                  ;*									*
  8339                                  ;*	enter with cx = number of characters requested			*
  8340                                  ;*									*
  8341                                  ;************************************************************************
  8342                                  
  8343                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  8344 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  8345                                  					; (sub reqpkt.count,cx)
  8346                                  		; 12/12/2022
  8347                                  prn_done:
  8348 0000021B F8                      		clc			; but return with carry	reset for no error
  8349 0000021C C3                      		retn
  8350                                  ; ---------------------------------------------------------------------------
  8351                                  
  8352                                  ;************************************************************************
  8353                                  ;*									*
  8354                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  8355                                  ;*									*
  8356                                  ;*	auxnum has printer number					*
  8357                                  ;*									*
  8358                                  ;************************************************************************
  8359                                  
  8360                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  8361                                  		;jcxz	short prn_done	; no chars to output
  8362 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  8363                                  prn_loop:				
  8364 0000021F BB0200                  		mov	bx, 2		; retry	count
  8365                                  prn_out:				
  8366 00000222 E83600                  		call	prnstat		; get status
  8367 00000225 751D                    		jnz	short TestPrnError
  8368 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  8369 0000022A 30E4                    		xor	ah, ah
  8370 0000022C E82E00                  		call	prnop		; print	to printer
  8371 0000022F 7419                    		jz	short prn_con	; no error - continue
  8372 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8373 00000234 7509                    		jnz	short _prnwf
  8374 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8375 00000238 C606[0C00]00            		mov	byte [altah], 0
  8376 0000023D EB08                    		jmp	short pmessg
  8377                                  ; ---------------------------------------------------------------------------
  8378                                  
  8379                                  _prnwf:					
  8380 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  8381 00000242 7406                    		jz	short prn_con
  8382                                  TestPrnError:				
  8383 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  8384 00000245 75DB                    		jnz	short prn_out
  8385                                  pmessg:					
  8386 00000247 E98DFE                  		jmp	bc_err_cnt
  8387                                  ; ---------------------------------------------------------------------------
  8388                                  
  8389                                  prn_con:				
  8390 0000024A 47                      		inc	di		; point	to next	char and continue
  8391 0000024B E2D2                    		loop	prn_loop
  8392                                  ;prn_done:				
  8393                                  		; 12/12/2022
  8394                                  prn_done2:
  8395                                  		;clc
  8396                                  		; cf=0
  8397 0000024D C3                      		retn
  8398                                  ; ---------------------------------------------------------------------------
  8399                                  
  8400                                  ;************************************************************************
  8401                                  ;*									*
  8402                                  ;*	prn_stat - device driver entry to return printer status		*
  8403                                  ;*									*
  8404                                  ;************************************************************************
  8405                                  
  8406                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8407 0000024E E80A00                  		call	prnstat		; device in dx
  8408 00000251 75F4                    		jnz	short pmessg
  8409 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  8410                                  		;jnz	short prn_done
  8411                                  		; 12/12/2022
  8412 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  8413 00000258 E96BFF                  		jmp	z_bus_exit
  8414                                  ; ---------------------------------------------------------------------------
  8415                                  
  8416                                  ;************************************************************************
  8417                                  ;*									*
  8418                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8419                                  ;*		 printer status. Return meaningful error code		*
  8420                                  ;*									*
  8421                                  ;************************************************************************
  8422                                  
  8423                                  prnstat:				
  8424 0000025B B402                    		mov	ah, 2		; set command for get status
  8425                                  					; PRINTER - GET	STATUS
  8426                                  					; DX = printer port (0-3)
  8427                                  					; Return: AH = status
  8428                                  
  8429                                  ; =============== S U B	R O U T	I N E =======================================
  8430                                  
  8431                                  ;************************************************************************
  8432                                  ;*									*
  8433                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8434                                  ;*		return zero true if no error				*
  8435                                  ;*		return zero false if error, al = error code		*
  8436                                  ;*									*
  8437                                  ;************************************************************************
  8438                                  
  8439                                  prnop:	
  8440 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8441 00000261 CD17                    		int	17h
  8442                                  
  8443                                  	; This check was added to see if this is a case of no
  8444                                  	; printer being installed. This tests checks to be sure
  8445                                  	; the error is noprinter (30h)
  8446                                  
  8447 00000263 50                      		push	ax
  8448 00000264 80E430                  		and	ah, 30h
  8449 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  8450 0000026A 58                      		pop	ax
  8451 0000026B 7506                    		jnz	short NextTest
  8452 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8453 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  8454                                  
  8455                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8456                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8457                                  ; careful about breaking basic.
  8458                                  
  8459                                  NextTest:				
  8460 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8461                                  					; i/o error?
  8462 00000276 740A                    		jz	short checknotready ; no, try not ready
  8463                                  
  8464                                  ; at this point, we know we have an error. the converse is not true
  8465                                  
  8466 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  8467                                  					; first, assume	out of paper
  8468 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  8469 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  8470 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  8471                                  ret1:					
  8472 00000281 C3                      		retn
  8473                                  ; ---------------------------------------------------------------------------
  8474                                  
  8475                                  checknotready:				
  8476 00000282 B002                    		mov	al, 2		; assume not-ready
  8477 00000284 F6C401                  		test	ah, 1
  8478 00000287 C3                      		retn
  8479                                  
  8480                                  ; ---------------------------------------------------------------------------
  8481                                  
  8482                                  ;************************************************************************
  8483                                  ;*									*
  8484                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8485                                  ;*		     this entry point should never block waiting for	*
  8486                                  ;*		     device to come ready.				*
  8487                                  ;*									*
  8488                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8489                                  ;*	outputs: set the number of bytes transferred in the		*
  8490                                  ;*		 device driver request packet				*
  8491                                  ;*									*
  8492                                  ;************************************************************************
  8493                                  
  8494                                  		; 19/10/2022
  8495                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8496 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8497                                  prn_tilbloop:				
  8498 0000028A 51                      		push	cx
  8499 0000028B 53                      		push	bx
  8500 0000028C 30FF                    		xor	bh, bh
  8501 0000028E 8A1E[E704]              		mov	bl, [printdev]
  8502 00000292 D1E3                    		shl	bx, 1
  8503                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8504 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  8505 00000298 5B                      		pop	bx
  8506                                  prn_getstat:				
  8507 00000299 E8BFFF                  		call	prnstat		; get status
  8508 0000029C 7514                    		jnz	short prn_bperr	; error
  8509 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8510 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8511 000002A3 59                      		pop	cx		; get original count
  8512 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8513 000002A6 26                      		es
  8514 000002A7 AC                      		lodsb
  8515                                  		;lods	byte ptr es:[si] ; es
  8516                                  					; lodsb
  8517 000002A8 30E4                    		xor	ah, ah
  8518 000002AA E8B0FF                  		call	prnop
  8519 000002AD 7504                    		jnz	short prn_berr	; error
  8520 000002AF E2D9                    		loop	prn_tilbloop
  8521                                  		; 12/12/2022
  8522                                  		; cf=0 (prnop)
  8523                                  		;clc			; normal no-error return
  8524 000002B1 C3                      		retn			;   from device driver
  8525                                  
  8526                                  ; ---------------------------------------------------------------------------
  8527                                  
  8528                                  prn_bperr:				
  8529 000002B2 59                      		pop	cx		; restore transfer count from stack
  8530                                  prn_berr:				
  8531 000002B3 E921FE                  		jmp	bc_err_cnt
  8532                                  ; ---------------------------------------------------------------------------
  8533                                  
  8534                                  ; 15/10/2022
  8535                                  
  8536                                  ;************************************************************************
  8537                                  ;*									*
  8538                                  ;*	prn_genioctl - get/set printer retry count			*
  8539                                  ;*									*
  8540                                  ;************************************************************************
  8541                                  
  8542                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8543                                  ; 11/01/2019
  8544                                  
  8545                                  ;********************************;*
  8546                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8547                                  ;********************************;*
  8548                                  
  8549                                  ;;RAWIO SUB-FUNCTIONS
  8550                                  ;;get_retry_count equ 65h
  8551                                  ;;set_retry_count equ 45h
  8552                                  
  8553                                  ;;struc A_RETRYCOUNT
  8554                                  ;;.rc_count: resw 1
  8555                                  ;;endstruc
  8556                                  
  8557                                  ;ioc_pc equ 5
  8558                                  
  8559                                  ; ---------------------------------------------------------------------------
  8560                                  
  8561                                  		; 19/10/2022
  8562                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8563 000002B6 C43E[1200]              		les	di, [ptrsav]
  8564 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8565                                  					; ioc_pc
  8566 000002BF 7403                    		jz	short prnfunc_ok
  8567                                  
  8568                                  prnfuncerr:				
  8569 000002C1 E911FE                  		jmp	bc_cmderr
  8570                                  ; ---------------------------------------------------------------------------
  8571                                  
  8572                                  prnfunc_ok:				
  8573 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8574 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8575 000002CC 30FF                    		xor	bh, bh
  8576                                  		;mov	bl, ds:printdev	; get index into retry counts
  8577 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8578 000002D2 D1E3                    		shl	bx, 1
  8579                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8580 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8581 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8582 000002DA 7407                    		jz	short prngetcount
  8583 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8584 000002DE 75E1                    		jnz	short prnfuncerr
  8585 000002E0 268B0D                  		mov	cx, [es:di]
  8586                                  prngetcount:				
  8587                                  		;mov	ds:wait_count[bx], cx
  8588 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8589 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8590                                  					; return current retry count
  8591                                  		; 12/12/2022
  8592                                  		; cf=0
  8593                                  		;clc
  8594 000002EA C3                      		retn
  8595                                  ; ---------------------------------------------------------------------------
  8596                                  
  8597                                  ;************************************************************************
  8598                                  ;*									*
  8599                                  ;*  prn_ioctl_query							*
  8600                                  ;*									*
  8601                                  ;*  Added for 5.00							*
  8602                                  ;************************************************************************
  8603                                  
  8604                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8605 000002EB C43E[1200]              		les	di, [ptrsav]
  8606 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8607                                  					; ioc_pc
  8608 000002F4 750D                    		jnz	short prn_query_err
  8609 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8610 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8611 000002FC 7404                    		jz	short IOCtlSupported
  8612 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8613 00000300 7501                    		jnz	short prn_query_err
  8614                                  IOCtlSupported:	
  8615                                  		; 12/12/2022
  8616                                  		; cf=0		
  8617                                  		;clc
  8618 00000302 C3                      		retn
  8619                                  ; ---------------------------------------------------------------------------
  8620                                  
  8621                                  prn_query_err:
  8622                                  		; 12/12/2022				
  8623                                  		;stc
  8624 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8625                                  ; ---------------------------------------------------------------------------
  8626                                  
  8627                                  ;************************************************************************
  8628                                  ;*									*
  8629                                  ;*	aux port driver code -- "aux" == "com1"				*
  8630                                  ;*									*
  8631                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8632                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8633                                  ;*									*
  8634                                  ;************************************************************************
  8635                                  
  8636                                  ;	values in ah, requesting function of int 14h in rom bios
  8637                                  
  8638                                  ;auxfunc_send	 equ	1	;transmit
  8639                                  ;auxfunc_receive equ	2	;read
  8640                                  ;auxfunc_status	 equ	3	;request status
  8641                                  
  8642                                  ;	error flags, reported by int 14h, reported in ah:
  8643                                  
  8644                                  ;flag_data_ready equ	01h	;data ready
  8645                                  ;flag_overrun	 equ	02h	;overrun error
  8646                                  ;flag_parity	 equ	04h	;parity error
  8647                                  ;flag_frame	 equ	08h	;framing error
  8648                                  ;flag_break	 equ	10h	;break detect
  8649                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8650                                  ;flag_timeout	 equ	80h	;timeout
  8651                                  
  8652                                  ;	these flags reported in al:
  8653                                  
  8654                                  ;flag_cts	 equ	10h	;clear to send
  8655                                  ;flag_dsr	 equ	20h	;data set ready
  8656                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8657                                  
  8658                                  ; ---------------------------------------------------------------------------
  8659                                  
  8660                                  ;************************************************************************
  8661                                  ;*									*
  8662                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8663                                  ;*		   at es:di						*
  8664                                  ;*									*
  8665                                  ;************************************************************************
  8666                                  
  8667                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8668                                  		;jcxz	short exvec2
  8669 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8670 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8671 0000030B 30C0                    		xor	al, al
  8672 0000030D 8607                    		xchg	al, [bx]
  8673 0000030F 08C0                    		or	al, al
  8674 00000311 7503                    		jnz	short aux2
  8675                                  aux1:					
  8676 00000313 E80500                  		call	auxin		; get character	from port
  8677                                  					; won't return if error
  8678                                  aux2:					
  8679 00000316 AA                      		stosb
  8680 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8681                                  exvec2:					
  8682 00000319 F8                      		clc			; all done, successful exit
  8683                                  auxin_retn:	; 18/12/2022
  8684 0000031A C3                      		retn
  8685                                  ; ---------------------------------------------------------------------------
  8686                                  
  8687                                  ;************************************************************************
  8688                                  ;*									*
  8689                                  ;*	auxin - call rom bios to read character from aux port		*
  8690                                  ;*		if error occurs, map the error and return one		*
  8691                                  ;*		level up to device driver exit code, setting		*
  8692                                  ;*		the number of bytes transferred appropriately		*
  8693                                  ;*									*
  8694                                  ;************************************************************************
  8695                                  
  8696                                  auxin:					
  8697 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8698 0000031D E83C00                  		call	auxop
  8699 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8700                                  		;jnz	short arbad	; skip if any error bits set
  8701                                  		;retn
  8702                                  		; 25/06/2023 (BugFix)
  8703 00000323 74F5                    		jz	short auxin_retn
  8704                                  ; ---------------------------------------------------------------------------
  8705                                  
  8706                                  arbad:					
  8707 00000325 58                      		pop	ax		; remove return	address	(near call)
  8708 00000326 30C0                    		xor	al, al
  8709 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8710 0000032A E9AAFD                  		jmp	bc_err_cnt
  8711                                  
  8712                                  ; ---------------------------------------------------------------------------
  8713                                  
  8714                                  ;************************************************************************
  8715                                  ;*									*
  8716                                  ;*	aux_rdnd - non-destructive aux port read			*
  8717                                  ;*									*
  8718                                  ;************************************************************************
  8719                                  
  8720                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8721 0000032D E85200                  		call	getbx
  8722 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8723 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8724 00000334 7511                    		jnz	short auxdrx	; then return character
  8725 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8726 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8727 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8728 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8729 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8730 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8731 00000345 8807                    		mov	[bx], al
  8732                                  auxdrx:					
  8733 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8734                                  ; ---------------------------------------------------------------------------
  8735                                  
  8736                                  auxbus:					
  8737 0000034A E979FE                  		jmp	z_bus_exit
  8738                                  ; ---------------------------------------------------------------------------
  8739                                  
  8740                                  ;************************************************************************
  8741                                  ;*									*
  8742                                  ;*	aux_wrst - return aux port write status				*
  8743                                  ;*									*
  8744                                  ;************************************************************************
  8745                                  
  8746                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8747 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8748 00000350 A820                    		test	al, 20h		; test data set	ready
  8749 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8750 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8751 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8752                                  		; 12/12/2022
  8753                                  		; cf=0	; (test instruction resets cf)
  8754                                  		;clc
  8755 00000359 C3                      		retn
  8756                                  ; ---------------------------------------------------------------------------
  8757                                  
  8758                                  ;************************************************************************
  8759                                  ;*									*
  8760                                  ;*	auxstat - call rom bios to determine aux port status		*
  8761                                  ;*									*
  8762                                  ;*	exit:	ax = status						*
  8763                                  ;*		dx = [auxnum]						*
  8764                                  ;*									*
  8765                                  ;************************************************************************
  8766                                  
  8767                                  auxstat:				
  8768 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8769                                  
  8770                                  		; fall into auxop
  8771                                  
  8772                                  ; =============== S U B	R O U T	I N E =======================================
  8773                                  
  8774                                  ;************************************************************************
  8775                                  ;*									*
  8776                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8777                                  ;*									*
  8778                                  ;*	entry:	ah = int 14h function number				*
  8779                                  ;*	exit:	ax = results						*
  8780                                  ;*		dx = [auxnum]						*
  8781                                  ;*									*
  8782                                  ;************************************************************************
  8783                                  
  8784                                  auxop:		; proc near		
  8785 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8786                                  					; 0=init, 1=send, 2=receive, 3=status
  8787                                  					; get port number
  8788 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8789                                  					; DX = port number (0-3)
  8790                                  					; Return: AX = port status code
  8791 00000362 C3                      		retn
  8792                                  
  8793                                  ; ---------------------------------------------------------------------------
  8794                                  
  8795                                  ;************************************************************************
  8796                                  ;*									*
  8797                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8798                                  ;*		   auxbuf [auxnum] to zero				*
  8799                                  ;*									*
  8800                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8801                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8802                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8803                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8804                                  ;*									*
  8805                                  ;************************************************************************
  8806                                  
  8807                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8808 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8809 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8810                                  					; zero out buffer
  8811                                  		;clc			; all done, successful return
  8812                                  		; 12/12/2022
  8813                                  		; cf=0 ('add' instruction in 'getbx')
  8814 00000369 C3                      		retn
  8815                                  ; ---------------------------------------------------------------------------
  8816                                  
  8817                                  ;************************************************************************
  8818                                  ;*									*
  8819                                  ;*	aux_writ - write to aux device					*
  8820                                  ;*									*
  8821                                  ;************************************************************************
  8822                                  
  8823                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8824                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8825 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8826                                  aux_loop:				
  8827 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8828                                  					; move di pointer to next character
  8829 0000036F 47                      		inc	di
  8830 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8831 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8832 00000375 F6C480                  		test	ah, 80h		; check	for error
  8833 00000378 7405                    		jz	short awok	; then no error
  8834 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8835 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8836                                  ; ---------------------------------------------------------------------------
  8837                                  
  8838                                  awok:					
  8839 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8840                                  					; still	more character to print
  8841                                  		;clc			; all done, successful return
  8842                                  		; 12/12/2022
  8843                                  		; cf=0 (test instruction above)	
  8844 00000381 C3                      		retn
  8845                                  
  8846                                  ; =============== S U B	R O U T	I N E =======================================
  8847                                  
  8848                                  ;************************************************************************
  8849                                  ;*									*
  8850                                  ;*	getbx - return bx -> single byte input buffer for		*
  8851                                  ;*		selected aux port ([auxnum])				*
  8852                                  ;*									*
  8853                                  ;************************************************************************
  8854                                  
  8855                                  getbx:	
  8856 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8857                                  					; for selected aux port	([auxnum])
  8858                                  		;add	bx, offset auxbuf
  8859 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8860                                  		; 12/12/2022
  8861                                  		; cf=0 (if [uaxnum] is valid number) 
  8862 0000038A C3                      		retn
  8863                                  
  8864                                  ; ---------------------------------------------------------------------------
  8865                                  
  8866                                  ; 15/10/2022
  8867                                  
  8868                                  ;----------------------------------------------------------------
  8869                                  ;								:
  8870                                  ;		    clock device driver 			:
  8871                                  ;								:
  8872                                  ;								:
  8873                                  ;   this file contains the clock device driver. 		:
  8874                                  ;								:
  8875                                  ;   the routines in this files are:				:
  8876                                  ;								:
  8877                                  ;	routine 		function			:
  8878                                  ;	------- 		--------			:
  8879                                  ;	tim_writ		set the current time		:
  8880                                  ;	tim_read		read the current time		:
  8881                                  ;	time_to_ticks		convert time to corresponding	:
  8882                                  ;				  number of clock ticks 	:
  8883                                  ;								:
  8884                                  ; the clock ticks at the rate of:				:
  8885                                  ;								:
  8886                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8887                                  ; see each routine for information on the use.			:
  8888                                  ;								:
  8889                                  ;----------------------------------------------------------------
  8890                                  
  8891                                  ; convert time to ticks
  8892                                  ; input : time in cx and dx
  8893                                  ; ticks returned in cx:dx
  8894                                  
  8895                                  ;19/07/2019
  8896                                  ;09/03/2019
  8897                                  
  8898                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8899                                  
  8900                                  ; first convert from hour,min,sec,hund. to
  8901                                  ; total number of 100th of seconds
  8902                                  
  8903 0000038B B03C                    		mov	al, 60
  8904 0000038D F6E5                    		mul	ch		; hours	to minutes
  8905 0000038F B500                    		mov	ch, 0
  8906 00000391 01C8                    		add	ax, cx		; total	minutes
  8907 00000393 B97017                  		mov	cx, 6000	; 60*100
  8908 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8909 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8910 0000039A 89C1                    		mov	cx, ax
  8911 0000039C B064                    		mov	al, 100
  8912 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8913 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8914 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8915 000003A5 B700                    		mov	bh, 0
  8916 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8917 000003A9 83D200                  		adc	dx, 0
  8918                                  
  8919                                  	; dx:cx is time in 1/100 sec
  8920                                  
  8921 000003AC 92                      		xchg	ax, dx
  8922 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8923 000003AE BB0BE9                  		mov	bx, 59659
  8924 000003B1 F7E3                    		mul	bx		; multiply low half
  8925 000003B3 87D1                    		xchg	dx, cx
  8926 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8927 000003B6 F7E3                    		mul	bx		; multiply high	half
  8928 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8929 000003BA 83D200                  		adc	dx, 0
  8930 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8931 000003BE BB0500                  		mov	bx, 5
  8932 000003C1 F6F3                    		div	bl		; divide high half by 5
  8933 000003C3 88C1                    		mov	cl, al
  8934 000003C5 B500                    		mov	ch, 0
  8935 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8936 000003C9 98                      		cbw
  8937 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8938 000003CB F7F3                    		div	bx		; divide low half by 5
  8939 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8940 000003CF CB                      		retf			; far return
  8941                                  
  8942                                  ; ---------------------------------------------------------------------------
  8943                                  
  8944                                  ; 17/10/2022
  8945                                  ; 15/10/2022
  8946                                  
  8947                                  ;--------------------------------------------------------------------
  8948                                  ;
  8949                                  ; tim_writ sets the current time
  8950                                  ;
  8951                                  ; on entry es:[di] has the current time:
  8952                                  ;
  8953                                  ;	number of days since 1-1-80	(word)
  8954                                  ;	minutes (0-59)			(byte)
  8955                                  ;	hours (0-23)			(byte)
  8956                                  ;	hundredths of seconds (0-99)	(byte)
  8957                                  ;	seconds (0-59)			(byte)
  8958                                  ;
  8959                                  ; each number has been checked for the correct range.
  8960                                  ;
  8961                                  ;	NOTE: Any changes in this routine probably require corresponding
  8962                                  ;	changes in the version that is built with the power manager driver.
  8963                                  ;	See ptime.asm.
  8964                                  ;
  8965                                  ;--------------------------------------------------------------------
  8966                                  
  8967                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8968 000003D0 268B05                  		mov	ax, [es:di]
  8969 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8970                                  					; end to avoid tick windows.
  8971 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8972                                  		;cmp	ds:havecmosclock, 0
  8973 000003D9 7426                    		jz	short no_cmos_1
  8974 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8975                                  					; get binary hours
  8976                                  					; convert to bcd
  8977 000003DF FF1E[0205]              		call	far [bintobcd]
  8978                                  		;call	ds:bintobcd	; call far [bintobcd]
  8979 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8980 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8981 000003E9 FF1E[0205]              		call	far [bintobcd]
  8982                                  		;call	ds:bintobcd	; convert to bcd
  8983 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8984 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8985 000003F3 FF1E[0205]              		call	far [bintobcd]
  8986                                  		;call	ds:bintobcd
  8987 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8988 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8989 000003FB FA                      		cli
  8990 000003FC B403                    		mov	ah, 3
  8991 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8992                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8993                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8994                                  					; Return: CMOS clock set
  8995 00000400 FB                      		sti
  8996                                  no_cmos_1:				
  8997 00000401 268B4D02                		mov	cx, [es:di+2]
  8998 00000405 268B5504                		mov	dx, [es:di+4]
  8999                                  		; 17/10/2022
  9000 00000409 FF1E[E206]              		call	far [ttticks]
  9001                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  9002                                  					; convert time to ticks
  9003                                  					; cx:dx	now has	time in	ticks
  9004 0000040D FA                      		cli			; turn off timer
  9005 0000040E B401                    		mov	ah, 1
  9006 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  9007                                  					; CX:DX	= clock	count
  9008                                  					; Return: time of day set
  9009                                  		;pop	ds:daycnt
  9010 00000412 8F06[F004]              		pop	word [daycnt]
  9011 00000416 FB                      		sti
  9012                                  		;cmp	ds:havecmosclock, 0
  9013 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  9014 0000041C 740A                    		jz	short no_cmos_2
  9015 0000041E FF1E[0605]              		call	far [daycnttoday]
  9016                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  9017                                  					; convert to bcd format
  9018 00000422 FA                      		cli
  9019 00000423 B405                    		mov	ah, 5
  9020 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  9021                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  9022                                  					; CH = century (19h or 20h)
  9023                                  					; Return: CMOS clock set
  9024 00000427 FB                      		sti
  9025                                  no_cmos_2:
  9026                                  		; 12/12/2022
  9027                                  		; cf=0				
  9028                                  		;clc
  9029 00000428 C3                      		retn
  9030                                  
  9031                                  ; ---------------------------------------------------------------------------
  9032                                  
  9033                                  ; 15/10/2022
  9034                                  
  9035                                  ;----------------------------------------------------------------------------
  9036                                  ; gettime reads date and time
  9037                                  ; and returns the following information:
  9038                                  ;
  9039                                  ;	es:[di]  =count of days since 1-1-80
  9040                                  ;	es:[di+2]=hours
  9041                                  ;	es:[di+3]=minutes
  9042                                  ;	es:[di+4]=seconds
  9043                                  ;	es:[di+5]=hundredths of seconds
  9044                                  ;
  9045                                  ;	NOTE:  Any changes in this routine probably require corresponding
  9046                                  ;	changes in the version that is built with the power manager driver.
  9047                                  ;	See ptime.asm.
  9048                                  ;----------------------------------------------------------------------------
  9049                                  
  9050                                  tim_read:				; 2C7h:435h = 70h:29A5h
  9051 00000429 E84E00                  		call	GetTickCnt
  9052 0000042C 8B36[F004]              		mov	si, [daycnt]
  9053                                  
  9054                                  ; we now need to convert the time in tick to the time in 100th of
  9055                                  ; seconds. the relation between tick and seconds is:
  9056                                  ;
  9057                                  ;		 65,536 seconds
  9058                                  ;	       ----------------
  9059                                  ;		1,193,180 tick
  9060                                  ;
  9061                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  9062                                  ;
  9063                                  ;	ticks from clock  * 65,536 * 100
  9064                                  ;      --------------------------------- = time in 100th of seconds
  9065                                  ;		1,193,180
  9066                                  ;
  9067                                  ; fortunately this formula simplifies to:
  9068                                  ;
  9069                                  ;	ticks from clock * 5 * 65,536
  9070                                  ;      --------------------------------- = time in 100th of seconds
  9071                                  ;		59,659
  9072                                  ;
  9073                                  ; the calculation is done by first multipling tick by 5. next we divide by
  9074                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  9075                                  ; my 16 bits to the left.
  9076                                  ;
  9077                                  ; start with ticks in cx:dx
  9078                                  ; multiply by 5
  9079                                  
  9080 00000430 89C8                    		mov	ax, cx
  9081 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  9082                                  					; multiply by 5
  9083 00000434 D1E2                    		shl	dx, 1
  9084 00000436 D1D1                    		rcl	cx, 1		; times	2
  9085 00000438 D1E2                    		shl	dx, 1
  9086 0000043A D1D1                    		rcl	cx, 1		; times	4
  9087 0000043C 01DA                    		add	dx, bx
  9088 0000043E 11C8                    		adc	ax, cx		; times	5
  9089 00000440 92                      		xchg	ax, dx
  9090                                  
  9091                                  ; now have ticks * 5 in	dx:ax
  9092                                  ; we now need to multiply by 65536 and divide by 59659 d.
  9093                                  
  9094 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  9095 00000444 F7F1                    		div	cx		; dx now has remainder
  9096                                  					; ax has high word of final quotient
  9097 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  9098 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  9099 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  9100                                  
  9101                                  ; rounding based on the	remainder may be added here
  9102                                  ; the result in	bx:ax is time in 1/100 second.
  9103                                  
  9104 0000044C 89DA                    		mov	dx, bx		
  9105 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  9106                                  
  9107                                  ; division by 200 is necessary to ensure no overflow--max result
  9108                                  ; is number of seconds in a day/2 = 43200.
  9109                                  
  9110 00000451 F7F1                    		div	cx
  9111 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  9112 00000456 7203                    		jb	short noadj
  9113 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  9114                                  noadj:					
  9115 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  9116 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  9117                                  
  9118                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  9119                                  ; by two, shifting a one in if the remainder had exceeded 100.
  9120                                  
  9121 0000045E D1D0                    		rcl	ax, 1		
  9122 00000460 B200                    		mov	dl, 0
  9123 00000462 D1D2                    		rcl	dx, 1
  9124 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  9125 00000467 F7F1                    		div	cx
  9126 00000469 88D7                    		mov	bh, dl		; save the seconds
  9127 0000046B F6F1                    		div	cl		; break	into hours and minutes
  9128 0000046D 86C4                    		xchg	al, ah
  9129                                  
  9130                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  9131                                  
  9132 0000046F 50                      		push	ax
  9133 00000470 89F0                    		mov	ax, si		; daycnt
  9134 00000472 AB                      		stosw
  9135 00000473 58                      		pop	ax
  9136 00000474 AB                      		stosw
  9137 00000475 89D8                    		mov	ax, bx
  9138 00000477 AB                      		stosw
  9139 00000478 F8                      		clc
  9140 00000479 C3                      		retn
  9141                                  
  9142                                  ; =============== S U B	R O U T	I N E =======================================
  9143                                  
  9144                                  ; 15/10/2022
  9145                                  
  9146                                  ;----------------------------------------------------------------------------
  9147                                  ;
  9148                                  ; procedure : GetTickCnt
  9149                                  ;
  9150                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  9151                                  ;		of rollover [except when power management driver is in use]. 
  9152                                  ;		Uses the following logic for updating Daycnt
  9153                                  ;
  9154                                  ;		if ( rollover ) {
  9155                                  ;			if ( t_switch )
  9156                                  ;				daycnt++ ;
  9157                                  ;			else
  9158                                  ;				daycnt += rollover ;
  9159                                  ;		}
  9160                                  ;
  9161                                  ; USES : AX
  9162                                  ;
  9163                                  ; RETURNS : CX:DX - tick count
  9164                                  ; MODIFIES : daycnt
  9165                                  ;
  9166                                  ;----------------------------------------------------------------------------
  9167                                  
  9168                                  		; 17/10/2022
  9169                                  GetTickCnt:	
  9170 0000047A 30E4                    		xor	ah, ah
  9171 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  9172                                  					; Return: CX:DX	= clock	count
  9173                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  9174                                  					; midnight
  9175                                  					; Otherwise, AL	> 0
  9176 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  9177 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  9178 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  9179                                  					; and not flag
  9180 00000487 0106[F004]              		add	[daycnt], ax
  9181 0000048B C3                      		retn
  9182                                  ; ---------------------------------------------------------------------------
  9183                                  
  9184                                  inc_case:				
  9185 0000048C 08C0                    		or	al, al
  9186 0000048E 7404                    		jz	short no_rollover
  9187 00000490 FF06[F004]              		inc	word [daycnt]
  9188                                  no_rollover:				
  9189 00000494 C3                      		retn
  9190                                  
  9191                                  ;----------------------------------------------------------------------------
  9192                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  9193                                  ;----------------------------------------------------------------------------
  9194                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9195                                  ; 09/03/2019 - Retro DOS v4.0
  9196                                  
  9197                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  9198                                  ; 26/05/2018 - Retro DOS v3.0
  9199                                  ; 23/03/2018 - Retro DOS v2.0
  9200                                  
  9201                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  9202                                  
  9203                                  ;struc BPB_TYPE
  9204                                  ;.SECSIZE:	resw 1
  9205                                  ;.SECALL:	resb 1
  9206                                  ;.RESNUM:	resw 1
  9207                                  ;.FATNUM:	resb 1
  9208                                  ;.DIRNUM:	resw 1
  9209                                  ;.SECNUM:	resw 1
  9210                                  ;.FATID:	resb 1
  9211                                  ;.FATSIZE:	resw 1
  9212                                  ;.SLIM:		resw 1
  9213                                  ;.HLIM:		resw 1
  9214                                  ;.HIDDEN:	resw 1
  9215                                  ;.size:
  9216                                  ;endstruc
  9217                                  
  9218                                  ;-----------------------------------------------------------------
  9219                                  ;	disk interface routines
  9220                                  ;-----------------------------------------------------------------
  9221                                  
  9222                                  ; device attribute bits:
  9223                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  9224                                  
  9225                                  ;MAXERR		equ	5
  9226                                  ;MAX_HD_FMT_ERR	equ	2
  9227                                  
  9228                                  ;LSTDRV	equ 504h
  9229                                  
  9230                                  ; some floppies do not have changeline. as a result, media-check would
  9231                                  ; normally return i-don't-know, the dos would continually reread the fat and
  9232                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  9233                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  9234                                  ; the time of the last successful disk operation and compare it with the current
  9235                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  9236                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  9237                                  ; since we cannot trust the timer to be always available, we record the number 
  9238                                  ; of media checks that have occurred when no apparent time has elapsed. while
  9239                                  ; this number is < a given threshold, we say no change. when it exceeds that
  9240                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  9241                                  ; the time of last successful access, if we see that time has passed too,
  9242                                  ; we reset the counter.
  9243                                  
  9244                                  accessmax	equ	5
  9245                                  
  9246                                  ; due to various bogosities, we need to continually adjust what the head
  9247                                  ; settle time is.  the following algorithm is used:
  9248                                  ;
  9249                                  ;   get the current head settle value.
  9250                                  ;   if it is 0, then
  9251                                  ;	set slow = 15
  9252                                  ;   else
  9253                                  ;	set slow = value
  9254                                  ;   ...
  9255                                  ;*********************************************
  9256                                  ;************ old algorithm ******************
  9257                                  ;*   if we are seeking and writing then
  9258                                  ;*	 use slow
  9259                                  ;*   else
  9260                                  ;*	 use fast
  9261                                  ;*********************************************
  9262                                  ;*********** ibm's requested logic ***********
  9263                                  ;   if we are seeking and writing and not on an at then
  9264                                  ;	use slow
  9265                                  ;   else
  9266                                  ;	use fast
  9267                                  ;   ...
  9268                                  ;   restore current head settle value
  9269                                  ;
  9270                                  ;
  9271                                  ;---------------------------------------
  9272                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  9273                                  					; it on after handling config.sys file as a
  9274                                  					; default value, if multrk_flag = multrk_off1.
  9275                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  9276                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  9277                                  
  9278                                  ; close data segment, open Bios_Code segment
  9279                                  
  9280                                  ; 15/10/2022
  9281                                  
  9282                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  9283                                  
  9284                                  ;-----------------------------------------------------------------
  9285                                  ;	command jump table
  9286                                  ;-----------------------------------------------------------------
  9287                                  
  9288 00000495 00                      		db 0
  9289                                  
  9290                                  ; 11/12/2022
  9291                                  %if 0
  9292                                  
  9293                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  9294                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  9295                                  		dw 1742h		; dsk_init
  9296                                  		dw 4EBh			; media_chk
  9297                                  		dw 592h			; get_bpb
  9298                                  		dw 0D5h			; bc_cmderr
  9299                                  		dw 857h			; dsk_read
  9300                                  		dw 83Dh			; x_bus_exit
  9301                                  		dw 558h			; ret_carry_clear
  9302                                  		dw 558h			; ret_carry_clear
  9303                                  		dw 849h			; dsk_writ
  9304                                  		dw 841h			; dsk_writv
  9305                                  		dw 558h			; ret_carry_clear
  9306                                  		dw 558h			; ret_carry_clear
  9307                                  		dw 0D5h			; bc_cmderr
  9308                                  		dw 80Ah			; dsk_open
  9309                                  		dw 81Ah			; dsk_close
  9310                                  		dw 831h			; dsk_rem
  9311                                  		dw 558h			; ret_carry_clear
  9312                                  		dw 558h			; ret_carry_clear
  9313                                  		dw 558h			; ret_carry_clear
  9314                                  		dw 0C6Bh		; do_generic_ioctl
  9315                                  		dw 558h			; ret_carry_clear
  9316                                  		dw 558h			; ret_carry_clear
  9317                                  		dw 558h			; ret_carry_clear
  9318                                  		dw 1124h		; ioctl_getown
  9319                                  		dw 1142h		; ioctl_setown
  9320                                  		dw 129Ah		; ioctl_support_query
  9321                                  
  9322                                  ;dtbl_siz equ $-dsktbl
  9323                                  
  9324                                  %endif
  9325                                  		; 11/12/2022
  9326 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  9327 00000497 [C316]                  		dw dsk_init
  9328 00000499 [DF04]                  		dw media_chk
  9329 0000049B [8505]                  		dw get_bpb
  9330 0000049D [D500]                  		dw bc_cmderr
  9331 0000049F [3508]                  		dw dsk_read
  9332 000004A1 [1B08]                  		dw x_bus_exit
  9333 000004A3 [4B05]                  		dw ret_carry_clear
  9334 000004A5 [4B05]                  		dw ret_carry_clear
  9335 000004A7 [2708]                  		dw dsk_writ
  9336 000004A9 [1F08]                  		dw dsk_writv
  9337 000004AB [4B05]                  		dw ret_carry_clear
  9338 000004AD [4B05]                  		dw ret_carry_clear
  9339 000004AF [D500]                  		dw bc_cmderr
  9340 000004B1 [EB07]                  		dw dsk_open
  9341 000004B3 [FA07]                  		dw dsk_close
  9342 000004B5 [1008]                  		dw dsk_rem
  9343 000004B7 [4B05]                  		dw ret_carry_clear
  9344 000004B9 [4B05]                  		dw ret_carry_clear
  9345 000004BB [4B05]                  		dw ret_carry_clear
  9346 000004BD [420C]                  		dw do_generic_ioctl
  9347 000004BF [4B05]                  		dw ret_carry_clear
  9348 000004C1 [4B05]                  		dw ret_carry_clear
  9349 000004C3 [4B05]                  		dw ret_carry_clear
  9350 000004C5 [D910]                  		dw ioctl_getown
  9351 000004C7 [F610]                  		dw ioctl_setown
  9352 000004C9 [4412]                  		dw ioctl_support_query
  9353                                  
  9354                                  dtbl_siz equ $-dsktbl
  9355                                  
  9356                                  ; =============== S U B	R O U T	I N E =======================================
  9357                                  
  9358                                  ; ---------------------------------------------------------------------------
  9359                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  9360                                  ; the one that belongs to the drive specified. carry is set if none exists
  9361                                  ; for the drive. Pointer is returned in es:[di]
  9362                                  ;
  9363                                  ;  AL contains the logical drive number.
  9364                                  ; ---------------------------------------------------------------------------
  9365                                  
  9366                                  SetDrive:	
  9367                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  9368 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9369                                  X_Scan_Loop:				
  9370 000004CF 26384505                		cmp	[es:di+5], al	
  9371 000004D3 7409                    		jz	short X_SetDrv
  9372 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9373 000004D8 83FFFF                  		cmp	di, 0FFFFh
  9374 000004DB 75F2                    		jnz	short X_Scan_Loop
  9375 000004DD F9                      		stc
  9376                                  X_SetDrv:				
  9377 000004DE C3                      		retn
  9378                                  
  9379                                  ; ---------------------------------------------------------------------------
  9380                                  
  9381                                  ; 15/10/2022
  9382                                  
  9383                                  ; ---------------------------------------------------------------------
  9384                                  ; if id is f9, have a 96tpi disk else
  9385                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9386                                  ;  otherwise if within 2 secs of last disk operation media could not
  9387                                  ;    have changed, otherwise dont know if media has changed
  9388                                  ; ---------------------------------------------------------------------
  9389                                  
  9390                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9391 000004DF E8E9FF                  		call	SetDrive
  9392 000004E2 BE0100                  		mov	si, 1
  9393 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9394                                  					; fchanged_by_format
  9395 000004EA 7416                    		jz	short WeAreNotFakingIt
  9396                                  		; 12/12/2022
  9397 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9398                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9399                                  					; ~fchanged_by_format ;	reset flag
  9400 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9401                                  					; Ensure that we ask the rom if media has changed
  9402 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9403                                  					; fnon_removable
  9404 000004FB 740C                    		jz	short wehaveafloppy
  9405 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  9406 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  9407                                  ; ---------------------------------------------------------------------------
  9408                                  
  9409                                  WeAreNotFakingIt:
  9410                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9411 00000502 26F6452301              		test	byte [es:di+23h], 1
  9412 00000507 7525                    		jnz	short Media_Done
  9413                                  wehaveafloppy:				
  9414 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  9415                                  
  9416                                  		; If we have a floppy with changeline support, we ask the ROM
  9417                                  		; to determine if media has changed. We do not perform the
  9418                                  		; 2 second check for these drives.
  9419                                  
  9420 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9421 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9422 00000512 E87912                  		call	mediacheck	;  Call	into removable routine
  9423 00000515 7236                    		jb	short err_exitj
  9424 00000517 E8C913                  		call	haschange
  9425 0000051A 7512                    		jnz	short Media_Done
  9426                                  mChk_NoChangeLine:
  9427                                  		; If we come here, we have a floppy with no changeline support
  9428                                  			
  9429 0000051C BE0100                  		mov	si, 1		; Presume no change
  9430 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9431 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9432                                  					; Is drive of last access the same?
  9433 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9434 00000528 E82800                  		call	Check_Time_Of_Access
  9435 0000052B EB01                    		jmp	short Media_Done
  9436                                  ; ---------------------------------------------------------------------------
  9437                                  
  9438                                  Media_Unk:				
  9439 0000052D 4E                      		dec	si		; ; Return "I don't know"
  9440                                  
  9441                                  		; SI now contains the correct value for media change.
  9442                                  		; Clean up the left overs
  9443                                  Media_Done:	
  9444                                  		; 19/10/2022			
  9445 0000052E 06                      		push	es
  9446 0000052F C41E[1200]              		les	bx, [ptrsav]
  9447 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9448 00000537 07                      		pop	es
  9449 00000538 09F6                    		or	si, si
  9450 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  9451 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  9452 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9453 00000543 E82F13                  		call	media_set_vid
  9454                                  mChk1_NoChangeLine:			
  9455 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9456                                  					; Make sure we ask rom for media check
  9457                                  ret_carry_clear:			
  9458 0000054B F8                      		clc			; volidok
  9459 0000054C C3                      		retn
  9460                                  ; ---------------------------------------------------------------------------
  9461                                  
  9462                                  err_exitj:				
  9463 0000054D E87D06                  		call	maperror	; guaranteed to	set carry
  9464                                  ret81:					
  9465 00000550 B481                    		mov	ah, 81h		; return error status
  9466 00000552 C3                      		retn			; return with carry set
  9467                                  
  9468                                  ; =============== S U B	R O U T	I N E =======================================
  9469                                  
  9470                                  ; ---------------------------------------------------------------------------
  9471                                  ; perform a check on the time passed since the last access for this physical
  9472                                  ; drive.
  9473                                  ; we are accessing the same drive. if the time of last successful access was
  9474                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9475                                  ; returns in si:
  9476                                  ;	0 - if time of last access was >= 2 seconds
  9477                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9478                                  ; registers affected ax,cx,dx, flags.
  9479                                  ;
  9480                                  ;	assume es:di -> bds, ds->Bios_Data
  9481                                  ; ---------------------------------------------------------------------------
  9482                                  
  9483                                  		; 19/10/2022
  9484                                  Check_Time_Of_Access:
  9485 00000553 BE0100                  		mov	si, 1		; presume no change.
  9486 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9487 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9488                                  					; get stored time
  9489 0000055D 29C2                    		sub	dx, ax
  9490 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9491 00000563 19C1                    		sbb	cx, ax
  9492 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9493 00000567 09D2                    		or	dx, dx		; time must pass
  9494 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  9495 0000056B FE06[1D01]              		inc	byte [accesscount]
  9496 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  9497                                  					; if count is less than threshold, ok
  9498 00000574 720C                    		jb	short timecheck_ret
  9499 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9500 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9501                                  ; ---------------------------------------------------------------------------
  9502                                  
  9503                                  timepassed:				
  9504 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9505                                  					; min elapsed time? (2 seconds)
  9506 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9507                                  
  9508                                  		; everything indicates that we do not know what has happened.
  9509                                  timecheck_unk:				
  9510 00000581 4E                      		dec	si		; presume i don't know
  9511                                  timecheck_ret:				
  9512 00000582 C3                      		retn
  9513                                  
  9514                                  ; ---------------------------------------------------------------------------
  9515                                  ; 15/10/2022
  9516                                  Err_Exitj2:
  9517 00000583 EBC8                    		jmp	short err_exitj
  9518                                  
  9519                                  ; ---------------------------------------------------------------------------
  9520                                  
  9521                                  ; 15/10/2022
  9522                                  
  9523                                  ; ==========================================================================
  9524                                  ; Build a valid bpb for the disk in the drive.
  9525                                  ; ==========================================================================
  9526                                  
  9527                                  		; 19/10/2022
  9528                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9529 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9530 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9531 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9532                                  					; fnon_removable
  9533 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9534                                  
  9535                                  		; let's set the default value for volid,vol_serial,
  9536                                  		; filesys_id in bds table
  9537                                  
  9538 00000592 E83700                  		call	clear_ids
  9539                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9540 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9541 0000059A E85B00                  		call	GetBp		; build	a bpb if necessary
  9542 0000059D 72B1                    		jb	short ret81
  9543                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9544 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9545                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9546 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9547 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9548                                  					; otherwise, conventional boot record
  9549                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9550 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9551 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9552 000005B2 E83413                  		call	set_volume_id
  9553                                  already_gotbpb:				
  9554 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9555                                  					; return the bpb from the current bds
  9556                                  
  9557                                  ;		 fall into setptrsav, es:di -> result
  9558                                  
  9559                                  ; ---------------------------------------------------------------------------
  9560                                  
  9561                                  ; 15/10/2022
  9562                                  
  9563                                  ; ==========================================================================
  9564                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9565                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9566                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9567                                  ;It fails, for instance, when we install an external drive using driver.sys
  9568                                  ;because then the BDS segment is no longer Bios_Data. 
  9569                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9570                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9571                                  ;restored before returning to the caller.
  9572                                  ; ==========================================================================
  9573                                  
  9574                                  		; 19/10/2022
  9575                                  SetPtrSav:	; return point for dsk_init				
  9576 000005B8 8CC1                    		mov	cx, es		; save es
  9577                                  		;les	bx, ds:ptrsav
  9578 000005BA C41E[1200]              		les	bx, [ptrsav]
  9579 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9580 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9581 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9582 000005CA F8                      		clc
  9583 000005CB C3                      		retn
  9584                                  
  9585                                  ; =============== S U B	R O U T	I N E =======================================
  9586                                  
  9587                                  ; 15/10/2022
  9588                                  
  9589                                  ; -----------------------------------------------------
  9590                                  ; clear ids in bds table. only applied for floppies.
  9591                                  ;input:  es:di -> bds table
  9592                                  ;	assumes ds: -> Bios_Data
  9593                                  ;output: volid set to "NO NAME    "
  9594                                  ;	 vol_serial set to 0.
  9595                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9596                                  ;	   depending on the flag fatsize in bds.
  9597                                  ;
  9598                                  ;	trashes si, cx
  9599                                  ; -----------------------------------------------------
  9600                                  
  9601                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9602                                  ;size_of_EXT_SYSTEM_ID equ 8
  9603                                  
  9604                                  clear_ids:
  9605                                  		; 11/09/2023 - Retro DOS v4.1 IO.SYS (Optimization & BugFix)
  9606 000005CC 268A451F                		mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
  9607                                  clear_ids_x:	; 11/09/2023		
  9608                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
  9609 000005D0 57                      		push	di
  9610 000005D1 31C9                    		xor	cx, cx		; no serial number
  9611 000005D3 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9612 000005D7 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9613                                  
  9614                                  		; BUGBUG - there's a lot in common here and with
  9615                                  		; mov_media_ids.. see if we can save some space by
  9616                                  		; merging them... jgl
  9617                                  
  9618                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9619                                  		; 10/12/2022
  9620 000005DB B10B                    		mov	cl, 11 ; cx = 11		
  9621                                  
  9622                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9623 000005DD BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9624 000005E0 83C74B                  		add	di, 75		; BDS.volid
  9625 000005E3 F3A4                    		rep movsb
  9626                                  		
  9627                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
  9628                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9629                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
  9630                                  		;test	byte [es:di+1Fh], 40h
  9631                                  
  9632                                  			; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
  9633                                  			; Microsoft/IBM code has a bug here because the BDS's
  9634                                  			; .volid and .filesys_id fields will be reset
  9635                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9636                                  			; at the BDS offset 31 but current (this) code checks flags
  9637                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9638                                  			;
  9639                                  			; Correct Code:
  9640                                  			; ;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9641                                  			; 11/09/2023
  9642                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
  9643                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
  9644                                  			;
  9645                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9646                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9647                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9648                                  			;
  9649                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9650                                  			; 'clear_ids' is used for floppy disks only and the default
  9651                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9652                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9653                                  
  9654 000005E5 A840                    		test	al, 40h ; * 
  9655                                  		
  9656                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9657 000005E7 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9658 000005EA 7503                    		jnz	short ci_bigfat
  9659                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9660 000005EC BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9661                                  ci_bigfat:				
  9662                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9663                                  		; 10/12/2022
  9664 000005EF B108                    		mov	cl, 8 ; cx = 8 
  9665 000005F1 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9666                                  					; filesys_id field
  9667 000005F4 F3A4                    		rep movsb
  9668 000005F6 5F                      		pop	di		; restore bds pointer
  9669 000005F7 C3                      		retn
  9670                                  
  9671                                  ; =============== S U B	R O U T	I N E =======================================
  9672                                  
  9673                                  ; 15/10/2022
  9674                                  
  9675                                  ; ---------------------------------------------------------------------------
  9676                                  ;	getbp - return bpb from the drive specified by the bds.
  9677                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9678                                  ;	    note that we never come here for fixed disks.
  9679                                  ;	    for all other cases,
  9680                                  ;	      - it reads boot sector to pull out the bpb
  9681                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9682                                  ;		to get the fat id byte to build the bpb from there.
  9683                                  ;
  9684                                  ;   inputs:	es:di point to correct bds.
  9685                                  ;
  9686                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9687                                  ;		carry set, and al=7 if invalid disk.
  9688                                  ;		carry set and error code in al if other error.
  9689                                  ;		if failed to recognize the boot record, then will set the
  9690                                  ;		set_id_flag to 0.
  9691                                  ;		this routine will only work for a floppy diskette.
  9692                                  ;		     for a fixed disk, it will just return.
  9693                                  ;
  9694                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9695                                  ;	  segment definitions. It should be migrated towards.
  9696                                  ;	   now es:di has the bds, ds: has Bios_Data
  9697                                  ; ---------------------------------------------------------------------------
  9698                                  
  9699                                  GetBp:		; if returning fake bpb then return bpb as is.
  9700                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9701 000005F8 26F6452305              		test	byte [es:di+23h], 5
  9702 000005FD 7403                    		jz	short getbp1	; getbp1
  9703 000005FF E99A00                  		jmp	getret_exit
  9704                                  ; ---------------------------------------------------------------------------
  9705                                  
  9706                                  getbp1:					
  9707 00000602 51                      		push	cx
  9708 00000603 52                      		push	dx
  9709 00000604 53                      		push	bx
  9710                                  
  9711                                  		; attempt to read in boot sector and determine bpb.
  9712                                  		; we assume that the 2.x and greater dos disks all
  9713                                  		; have a valid boot sector.
  9714                                  
  9715 00000605 E8A900                  		call	readbootsec
  9716 00000608 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9717 0000060A 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9718 0000060C 7508                    		jnz	short dofatbpb
  9719 0000060E E8EE00                  		call	movbpb		; move bpb into	registers
  9720 00000611 EB57                    		jmp	short Has1
  9721                                  ; ---------------------------------------------------------------------------
  9722                                  
  9723                                  getbp_err_ret_brdg:			
  9724 00000613 E98700                  		jmp	getbp_err_ret
  9725                                  ; ---------------------------------------------------------------------------
  9726                                  
  9727                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9728                                  		; and fill in bpb from there.
  9729                                  dofatbpb:				
  9730 00000616 E85201                  		call	readfat		; puts media descriptor	byte in	ah
  9731 00000619 72F8                    		jb	short getbp_err_ret_brdg
  9732                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9733 0000061B 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9734 00000620 7403                    		jz	short bpb_nochangeline ; brif not
  9735 00000622 E86512                  		call	hidensity	; may not return! May add sp, 2	and
  9736                                  					; jump to has1!!!!!! or	has720K
  9737                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9738 00000625 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9739                                  					; ffSmall
  9740 0000062A 7515                    		jnz	short is_floppy
  9741 0000062C 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9742 0000062F 7576                    		jnz	short got_unknown_medium
  9743                                  Has720K:				
  9744                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9745 00000631 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9746                                  
  9747                                  		; es points to segment of bds. the following should be modified
  9748                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9749                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9750                                  
  9751                                  		; 10/12/2022
  9752                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9753                                  		; 21/12/2022
  9754 00000634 8A07                    		mov	al, [bx]
  9755 00000636 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9756 00000639 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9757 0000063C 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9758                                  		; 19/10/2022 - Temporary !
  9759                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9760                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9761                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9762                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9763                                  
  9764 0000063F EB29                    		jmp	short Has1
  9765                                  ; ---------------------------------------------------------------------------
  9766                                  
  9767                                  is_floppy:			; must be a 5.25" floppy if we come here
  9768 00000641 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9769 00000644 7261                    		jb	short got_unknown_medium
  9770 00000646 B001                    		mov	al, 1		; set number of	fat sectors
  9771 00000648 BB0840                  		mov	bx, 16392	; 64*256+8
  9772                                  					; set dir entries and sector max
  9773 0000064B B94001                  		mov	cx, 320		; 40*8
  9774                                  					; set size of drive
  9775 0000064E BA0101                  		mov	dx, 257		; 01*256+1
  9776                                  					; set head limit and sec/all unit
  9777 00000651 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9778 00000654 7507                    		jnz	short has8	; nz = has 8 sectors
  9779 00000656 FEC0                    		inc	al		; inc number of	fat sectors
  9780 00000658 FEC3                    		inc	bl		; inc sector max
  9781                                  		;add	cx, 40		; increase size	(to 360)
  9782                                  		; 18/12/2022
  9783 0000065A 80C128                  		add	cl, 40
  9784                                  has8:					
  9785 0000065D F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9786 00000660 7408                    		jz	short Has1	; jz = 1 head
  9787 00000662 01C9                    		add	cx, cx		; double size of disk
  9788 00000664 B770                    		mov	bh, 112		; increase number of directory entries
  9789 00000666 FEC6                    		inc	dh		; inc sec/all unit
  9790 00000668 FEC2                    		inc	dl		; inc head limit
  9791                                  Has1:					
  9792                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
  9793 0000066A 1E                      		push	ds
  9794 0000066B 06                      		push	es
  9795 0000066C 1F                      		pop	ds		
  9796                                  				
  9797                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9798                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9799                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9800                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
  9801                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9802                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9803                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9804                                  
  9805 0000066D 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
  9806 00000670 30F6                    		xor	dh, dh
  9807 00000672 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
  9808 00000675 88FA                    		mov	dl, bh
  9809 00000677 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  9810 0000067A 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
  9811 0000067D 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
  9812 00000680 886510                  		mov	[di+10h], ah	; [di+BDS.media]
  9813 00000683 88C2                    		mov	dl, al
  9814 00000685 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
  9815 00000688 88DA                    		mov	dl, bl
  9816 0000068A 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
  9817                                  
  9818                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9819                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9820                                  		; to 0 since this code is for floppies
  9821                                  
  9822                                  		; 18/12/2022
  9823                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9824                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9825                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9826                                  		; 18/12/2022
  9827 0000068D 29C9                    		sub	cx, cx ; 0
  9828                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9829                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9830                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9831                                  		
  9832                                  		; 02/09/2023
  9833 0000068F 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
  9834 00000692 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
  9835 00000695 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
  9836                                  		
  9837 00000698 1F                      		pop	ds ; 02/09/2023
  9838                                  getret:					
  9839 00000699 5B                      		pop	bx
  9840 0000069A 5A                      		pop	dx
  9841 0000069B 59                      		pop	cx
  9842                                  getret_exit:				
  9843 0000069C C3                      		retn
  9844                                  ; ---------------------------------------------------------------------------
  9845                                  
  9846                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9847                                  		;mov	ds:set_id_flag,	0
  9848                                  		; 19/10/2022
  9849 0000069D C606[0A05]00            		mov	byte [set_id_flag], 0
  9850 000006A2 E82805                  		call	maperror
  9851 000006A5 EBF2                    		jmp	short getret
  9852                                  ; ---------------------------------------------------------------------------
  9853                                  
  9854                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9855                                  		; we do	not assume any type of bpb for this medium.
  9856                                  
  9857                                  got_unknown_medium:			
  9858                                  		;mov	ds:set_id_flag,	0 
  9859 000006A7 C606[0A05]00            		mov	byte [set_id_flag], 0
  9860 000006AC B007                    		mov	al, 7
  9861 000006AE F9                      		stc
  9862 000006AF EBE8                    		jmp	short getret
  9863                                  
  9864                                  ; =============== S U B	R O U T	I N E =======================================
  9865                                  
  9866                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9867                                  
  9868                                  ; ----------------------------------------------------------------
  9869                                  ; read in the boot sector. set carry if error in reading sector.
  9870                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9871                                  ;
  9872                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9873                                  ; ----------------------------------------------------------------
  9874                                  
  9875                                  ; 10/03/2019 - Retro DOS v4.0
  9876                                  
  9877                                  readbootsec:	
  9878 000006B1 B600                    		mov	dh, 0		; head 0
  9879 000006B3 B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9880 000006B6 E8BF00                  		call	read_sector
  9881 000006B9 7243                    		jb	short err_ret
  9882 000006BB 31DB                    		xor	bx, bx		; assume valid boot sector
  9883                                  
  9884                                  		; put a sanity check for the boot sector in here to detect
  9885                                  		; boot sectors that do not have valid bpbs. we examine the
  9886                                  		; first two bytes - they must contain a long jump (69h) or a
  9887                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9888                                  		; (E9h). if this test is passed, we further check by examining
  9889                                  		; the signature at the end of the boot sector for the word
  9890                                  		; AA55h. if the signature is not present, we examine the media
  9891                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9892                                  		; logic is modified a little bit. we are not going to check
  9893                                  		; signature. instead we are going to sanity check the media
  9894                                  		; byte in bpb regardless of the validity of signature. this is
  9895                                  		; to save the already developed commercial products that have
  9896                                  		; good jump instruction and signature but with the false bpb
  9897                                  		; informations
  9898                                  
  9899                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9900                                  
  9901                                  		; 02/09/2023
  9902                                  		; 19/10/2022
  9903                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
  9904                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
  9905                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9906                                  		;jz	short check_bpb_mediabyte ; no need for	nop
  9907                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
  9908                                  		;jnz	short invalidbootsec
  9909                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
  9910                                  		;jnz	short invalidbootsec
  9911                                  
  9912                                  		; 02/09/2023 (PCDOS 7.1)
  9913 000006BD A0[4E01]                		mov	al, [disksector]
  9914 000006C0 3C69                    		cmp	al, 69h		; is it a direct jump?
  9915 000006C2 740F                    		je	short check_bpb_mediabyte
  9916                                  					; don't need to find a nop
  9917 000006C4 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
  9918 000006C6 740B                    		je	short check_bpb_mediabyte
  9919                                  					; no need for nop
  9920 000006C8 3CEB                    		cmp	al, 0EBh	; how about a short jump?
  9921 000006CA 7530                    		jne	short invalidbootsec
  9922 000006CC 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9923 000006D1 7529                    		jne	short invalidbootsec
  9924                                  
  9925                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9926                                  ;
  9927                                  ;; 10/03/2019
  9928                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9929                                  ;;
  9930                                  ;; Don't have to perform the following signature check since
  9931                                  ;; we need to check the media byte even with the good signatured diskette.
  9932                                  ;;
  9933                                  ;;check_signature:
  9934                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9935                                  ;;							 ; disk or 1.x media.
  9936                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9937                                  ;;					       ; may need some special handling
  9938                                  
  9939                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9940                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9941                                  ; by examining the media descriptor in the boot sector.
  9942                                  
  9943                                  		; 19/10/2022
  9944                                  check_bpb_mediabyte:
  9945 000006D3 A0[6301]                		mov	al, [disksector+15h]
  9946                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9947 000006D6 50                      		push	ax ; 02/09/2023
  9948 000006D7 24F0                    		and	al, 0F0h
  9949 000006D9 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9950 000006DB 58                      		pop	ax ; 02/09/2023
  9951 000006DC 751E                    		jnz	short invalidbootsec
  9952                                  
  9953                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9954                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9955                                  ; sectors. these are specifically diskettes that were formatted in drives
  9956                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9957                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9958                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9959                                  ; help our build bpb routine to recognise these specific cases, and to
  9960                                  ; set up out copy of the bpb accordingly.
  9961                                  ; we do this by checking to see if the boot sector is off a diskette that
  9962                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9963                                  ; sec/clus field to 1. if not, we carry on as normal.
  9964                                  
  9965                                  checksinglesided:
  9966                                  		;mov	al, [disksector+15h]
  9967                                  		; 02/09/2023
  9968                                  		; al = [disksector+15h]
  9969 000006DE 3CF0                    		cmp	al, 0F0h
  9970 000006E0 741B                    		jz	short gooddsk
  9971 000006E2 A801                    		test	al, 1
  9972 000006E4 7517                    		jnz	short gooddsk
  9973 000006E6 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9974 000006EC 7507                    		jnz	short mustbeearlier
  9975 000006EE 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9976 000006F3 7308                    		jnb	short gooddsk
  9977                                  
  9978                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9979                                  
  9980                                  mustbeearlier:				
  9981 000006F5 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9982                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9983 000006FA EB01                    		jmp	short gooddsk
  9984                                  ; ---------------------------------------------------------------------------
  9985                                  
  9986                                  invalidbootsec:				
  9987 000006FC 43                      		inc	bx		; indicate that boot sector invalid
  9988                                  		; 10/12/2022
  9989                                  movbpb_ret:
  9990                                  gooddsk:				
  9991 000006FD F8                      		clc
  9992                                  err_ret:
  9993 000006FE C3                      		retn
  9994                                  ; ---------------------------------------------------------------------------
  9995                                  
  9996                                  		; 10/12/2022
  9997                                  ;err_ret:				
  9998                                  		;retn
  9999                                  
 10000                                  ; =============== S U B	R O U T	I N E =======================================
 10001                                  
 10002                                  ; 15/10/2022
 10003                                  ; ---------------------------------------------------------------------------
 10004                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
 10005                                  ; getbp routine at has1
 10006                                  ;
 10007                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
 10008                                  ; serial number, volume label, file system id in bds according to
 10009                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
 10010                                  ; to signal that volume label is set already from the extended boot record
 10011                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
 10012                                  ; the volume label in the root directory.)
 10013                                  ; ---------------------------------------------------------------------------
 10014                                  
 10015                                  ; 10/03/2019 - Retro DOS v4.0
 10016                                  
 10017                                  		; 19/10/2022
 10018                                  movbpb:	
 10019 000006FF 8A36[5B01]              		mov	dh, [disksector+0Dh]
 10020                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 10021                                  					; sectors per unit
 10022 00000703 8A3E[5F01]              		mov	bh, [disksector+11h]
 10023                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 10024                                  					; number of directory entries
 10025 00000707 8B0E[6101]              		mov	cx, [disksector+13h]
 10026                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 10027                                  					; size of drive
 10028 0000070B 8A26[6301]              		mov	ah, [disksector+15h]
 10029                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 10030                                  					; media	descriptor
 10031 0000070F A0[6401]                		mov	al, [disksector+16h];
 10032                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 10033                                  					; number of fat	sectors
 10034 00000712 8A1E[6601]              		mov	bl, [disksector+18h]
 10035                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 10036                                  					; sectors per track
 10037 00000716 8A16[6801]              		mov	dl, [disksector+1Ah]
 10038                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 10039                                  					; number of heads
 10040 0000071A 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 10041 0000071F 75DC                    		jnz	short movbpb_ret
 10042 00000721 E81200                  		call	mov_media_ids
 10043 00000724 7205                    		jb	short movbpb_conv ; conventional boot record?
 10044 00000726 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 10045                                  movbpb_conv:				
 10046 0000072B 803E[7700]01            		cmp	byte [fhave96], 1
 10047 00000730 75CB                    		jnz	short movbpb_ret
 10048 00000732 E8A811                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 10049                                  		; 10/12/2022
 10050                                  		; cf = 0
 10051                                  ;movbpb_ret:				
 10052                                  		;clc
 10053 00000735 C3                      		retn
 10054                                  
 10055                                  ; =============== S U B	R O U T	I N E =======================================
 10056                                  
 10057                                  ;copy the boot_serial number, volume id, and filesystem id from the
 10058                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 10059                                  ;by es:di.
 10060                                  
 10061                                  ;in.) es:di -> bds
 10062                                  ;     ds:disksector = valid extended boot record.
 10063                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 10064                                  ;      the boot record information.
 10065                                  ;     carry flag set if not an extended bpb.
 10066                                  ;     all registers saved except the flag.
 10067                                  
 10068                                  		; 19/10/2022
 10069                                  mov_media_ids:		
 10070 00000736 803E[7401]29            		cmp	byte [disksector+26h], 29h
 10071                                  					; [disksector+EXT_BOOT.SIG],
 10072                                  					; EXT_BOOT_SIGNATURE
 10073 0000073B 752C                    		jnz	short mmi_not_ext
 10074 0000073D 51                      		push	cx
 10075 0000073E 8B0E[7501]              		mov	cx, [disksector+27h]
 10076                                  					; [disksector+EXT_BOOT.SERIAL]
 10077 00000742 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 10078 00000746 8B0E[7701]              		mov	cx, [disksector+29h]
 10079                                  					; [disksector+EXT_BOOT.SERIAL+2]
 10080 0000074A 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 10081 0000074E 57                      		push	di
 10082 0000074F 56                      		push	si
 10083 00000750 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 10084 00000753 BE[7901]                		mov	si, disksector+2Bh
 10085                                  		;mov	si, (offset disksector+2Bh) ;
 10086                                  					; disksector+EXT_BOOT.VOL_LABEL
 10087 00000756 83C74B                  		add	di, 75		; BDS.volid
 10088 00000759 F3A4                    		rep movsb
 10089                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 10090                                  		; 10/12/2022
 10091 0000075B B108                    		mov	cl, 8 ; cx = 8
 10092 0000075D BE[8401]                		mov	si, disksector+36h
 10093                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 10094 00000760 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 10095 00000763 F3A4                    		rep movsb
 10096 00000765 5E                      		pop	si
 10097 00000766 5F                      		pop	di
 10098 00000767 59                      		pop	cx
 10099                                  		; 10/12/2022
 10100                                  		; cf = 0
 10101                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 10102                                  				; (20/09/2022)
 10103 00000768 C3                      		retn
 10104                                  ; ---------------------------------------------------------------------------
 10105                                  
 10106                                  mmi_not_ext:				
 10107 00000769 F9                      		stc
 10108 0000076A C3                      		retn
 10109                                  
 10110                                  ; =============== S U B	R O U T	I N E =======================================
 10111                                  
 10112                                  ; 15/10/2022
 10113                                  ; --------------------------------------------------------------
 10114                                  ; read in the fat sector and get the media byte from it.
 10115                                  ; input : es:di -> bds
 10116                                  ; output:
 10117                                  ;	  carry set if an error occurs, ax contains error code.
 10118                                  ;	  otherwise, ah contains media byte on exit
 10119                                  ; --------------------------------------------------------------
 10120                                  
 10121                                  readfat:	
 10122                                  		;mov	dh, 0
 10123                                  		; 10/12/2022
 10124 0000076B 30F6                    		xor	dh, dh
 10125 0000076D B90200                  		mov	cx, 2		; head 0
 10126                                  					; cylinder 0, sector 2
 10127 00000770 E80500                  		call	read_sector
 10128 00000773 7202                    		jb	short bad_fat_ret
 10129 00000775 8A27                    		mov	ah, [bx]	; media	byte
 10130                                  bad_fat_ret:				
 10131 00000777 C3                      		retn
 10132                                  
 10133                                  ; =============== S U B	R O U T	I N E =======================================
 10134                                  
 10135                                  ; 15/10/2022
 10136                                  
 10137                                  ; ---------------------------------------------------------------------------
 10138                                  ; read a single sector into the temp buffer.
 10139                                  ; perform three retries in case of error.
 10140                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 10141                                  ;		cx has sector and cylinder
 10142                                  ;		dh has head
 10143                                  ;		es:di has bds
 10144                                  ;		ds has Bios_Data
 10145                                  ;
 10146                                  ;   outputs:	carry clear
 10147                                  ;		    Bios_Data:bx point to sector
 10148                                  ;		       (note: some callers assume location of buffer)
 10149                                  ;
 10150                                  ;		carry set
 10151                                  ;		    ax has rom error code
 10152                                  ;
 10153                                  ; register bp is preserved.
 10154                                  ; ---------------------------------------------------------------------------
 10155                                  
 10156                                  ; 10/03/2019 - Retro DOS v4.0
 10157                                  
 10158                                  		; 19/10/2022
 10159                                  read_sector:	
 10160 00000778 55                      		push	bp
 10161 00000779 BD0300                  		mov	bp, 3		; make 3 attempts
 10162 0000077C 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 10163 00000780 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
 10164                                  rd_ret:					
 10165 00000783 06                      		push	es
 10166 00000784 1E                      		push	ds
 10167 00000785 07                      		pop	es
 10168 00000786 B80102                  		mov	ax, 201h
 10169 00000789 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10170                                  					; AL = number of sectors to read, CH = track, CL = sector
 10171                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10172                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10173 0000078B 07                      		pop	es
 10174 0000078C 734A                    		jnb	short okret2
 10175                                  rd_rty:					
 10176 0000078E E87404                  		call	again		; reset	disk, decrement	bp, preserve ax
 10177 00000791 7442                    		jz	short err_rd_ret
 10178 00000793 26F6452301              		test	byte [es:di+23h], 1
 10179                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 10180                                  					; fnon_removable
 10181 00000798 75E9                    		jnz	short rd_ret
 10182 0000079A 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10183 0000079F 7510                    		jnz	short rd_skip1_dpt
 10184 000007A1 50                      		push	ax
 10185 000007A2 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 10186 000007A3 C536[2D01]              		lds	si, [dpt]
 10187                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10188                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 10189                                  		;			; NORMSETTLE
 10190                                  		; 12/12/2022
 10191 000007A7 B00F                    		mov	al, 15
 10192 000007A9 864409                  		xchg	al, [si+9]
 10193                                  		; 
 10194 000007AC 1F                      		pop	ds
 10195 000007AD A2[2A01]                		mov	[save_head_sttl], al
 10196 000007B0 58                      		pop	ax
 10197                                  rd_skip1_dpt:				
 10198 000007B1 06                      		push	es
 10199 000007B2 1E                      		push	ds
 10200 000007B3 07                      		pop	es
 10201 000007B4 B80102                  		mov	ax, 201h
 10202 000007B7 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10203                                  					; AL = number of sectors to read, CH = track, CL = sector
 10204                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10205                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10206 000007B9 07                      		pop	es
 10207 000007BA 9C                      		pushf
 10208 000007BB 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10209 000007C0 750E                    		jnz	short rd_skip2_dpt
 10210 000007C2 50                      		push	ax
 10211 000007C3 A0[2A01]                		mov	al, [save_head_sttl]
 10212 000007C6 1E                      		push	ds
 10213 000007C7 C536[2D01]              		lds	si, [dpt]
 10214 000007CB 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10215 000007CE 1F                      		pop	ds
 10216 000007CF 58                      		pop	ax
 10217                                  rd_skip2_dpt:				
 10218 000007D0 9D                      		popf
 10219 000007D1 7305                    		jnb	short okret2
 10220 000007D3 EBB9                    		jmp	short rd_rty
 10221                                  ; ---------------------------------------------------------------------------
 10222                                  
 10223                                  err_rd_ret:				
 10224 000007D5 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 10225                                  					; return error
 10226 000007D7 F9                      		stc
 10227                                  
 10228                                  ; update information pertaining to last drive accessed, time of access, last
 10229                                  ; track accessed in that drive.
 10230                                  
 10231                                  okret2:					
 10232 000007D8 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 10233 000007DC 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 10234 000007E0 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10235                                  					; save last track accessed on this drive
 10236                                  					; preserve flags in case error occurred
 10237 000007E4 9C                      		pushf
 10238 000007E5 E8FD03                  		call	set_tim
 10239 000007E8 9D                      		popf			; restore flags
 10240 000007E9 5D                      		pop	bp
 10241 000007EA C3                      		retn
 10242                                  
 10243                                  ;----------------------------------------------------------------------------
 10244                                  ;	disk open/close routines
 10245                                  ;----------------------------------------------------------------------------
 10246                                  
 10247                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 10248 000007EB 803E[7700]00            		cmp	byte [fhave96], 0
 10249 000007F0 7407                    		jz	short dsk_open_exit ; done if no changeline support
 10250 000007F2 E8D6FC                  		call	SetDrive	; get bds for drive
 10251 000007F5 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 10252                                  dsk_open_exit:	
 10253                                  		; 10/12/2022
 10254                                  		; cf = 0			
 10255                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10256                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10257 000007F9 C3                      		retn
 10258                                  ; ---------------------------------------------------------------------------
 10259                                  
 10260                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 10261 000007FA 803E[7700]00            		cmp	byte [fhave96], 0
 10262 000007FF 740E                    		jz	short exitjx	; done if no changeline	support
 10263 00000801 E8C7FC                  		call	SetDrive	; get bds for drive
 10264 00000804 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 10265 00000809 7404                    		jz	short exitjx	; watch	out for	wrap
 10266 0000080B 26FF4D20                		dec	word [es:di+20h]
 10267                                  exitjx:					
 10268                                  		; 10/12/2022
 10269                                  		; cf = 0
 10270                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10271                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10272 0000080F C3                      		retn
 10273                                  
 10274                                  ;----------------------------------------------------------------------------
 10275                                  ;		disk removable routine
 10276                                  ;----------------------------------------------------------------------------
 10277                                  
 10278                                  		; al is	unit #
 10279                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 10280 00000810 E8B8FC                  		call	SetDrive	; get bds for this drive
 10281                                  		;test	byte [es:di+BDS.flags], fnon_removable
 10282 00000813 26F6452301              		test	byte [es:di+23h], 1
 10283                                  		;jnz	short x_bus_exit ; non_rem
 10284 00000818 7501                    		jnz	short non_rem	; 15/10/2022
 10285                                  		; 10/12/2022
 10286                                  		; cf = 0
 10287                                  		;clc			; CF is already ZERO here
 10288                                  					; 15/10/2022
 10289 0000081A C3                      		retn
 10290                                  ; ---------------------------------------------------------------------------
 10291                                  
 10292                                  non_rem:
 10293                                  x_bus_exit:				
 10294 0000081B B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 10295                                  					; return busy status
 10296 0000081D F9                      		stc
 10297                                  dsk_ret:				
 10298 0000081E C3                      		retn
 10299                                  
 10300                                  ;----------------------------------------------------------------------------
 10301                                  ;		disk i/o routines
 10302                                  ;----------------------------------------------------------------------------
 10303                                  
 10304                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 10305                                  		;mov	word [wrtverify], 103h
 10306                                  		; 19/10/2022
 10307 0000081F C706[2001]0301          		mov	word [rflag], 103h
 10308                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 10309 00000825 EB06                    		jmp	short dsk_cl
 10310                                  ; ---------------------------------------------------------------------------
 10311                                  
 10312                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 10313                                  		;mov	word [wrtverify], 3
 10314                                  		; 19/10/2022
 10315 00000827 C706[2001]0300          		mov	word [rflag], 3
 10316                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 10317                                  
 10318                                  dsk_cl:					
 10319 0000082D E89800                  		call	diskio		; romwrite
 10320                                  ; ---------------------------------------------------------------------------
 10321                                  
 10322                                  dsk_io:					
 10323 00000830 73EC                    		jnb	short dsk_ret
 10324 00000832 E9A2F8                  		jmp	bc_err_cnt
 10325                                  ; ---------------------------------------------------------------------------
 10326                                  
 10327                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 10328 00000835 E88B00                  		call	diskrd
 10329 00000838 EBF6                    		jmp	short dsk_io
 10330                                  
 10331                                  ; =============== S U B	R O U T	I N E =======================================
 10332                                  
 10333                                  ; 15/10/2022
 10334                                  ; 10/03/2019 - Retro DOS v4.0
 10335                                  
 10336                                  ;-----------------------------------------------------------
 10337                                  ; miscellaneous odd jump routines. 
 10338                                  ; moved out of mainline for speed.
 10339                                  
 10340                                  ; if we have a system where we have virtual drives, we need 
 10341                                  ; to prompt the user to place the correct disk in the drive.
 10342                                  ;
 10343                                  ;	assume es:di -> bds, ds:->Bios_Data
 10344                                  ;-----------------------------------------------------------
 10345                                  
 10346                                  		; 19/10/2022
 10347                                  checksingle:		
 10348 0000083A 50                      		push	ax
 10349 0000083B 53                      		push	bx
 10350 0000083C 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 10351                                  
 10352                                  ; if hard drive, cannot change disk.
 10353                                  ; if current owner of physical drive, no need to change diskette.
 10354                                  
 10355 00000840 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 10356 00000843 7573                    		jnz	short singleret
 10357 00000845 F6C310                  		test	bl, 10h		; fi_am_mult
 10358                                  					; is there a drive sharing this	physical drive?
 10359 00000848 746E                    		jz	short singleret
 10360                                  
 10361                                  
 10362                                  ; look for the previous owner of this physical drive
 10363                                  ; and reset its ownership flag.
 10364                                  
 10365 0000084A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10366                                  					; get physical drive number
 10367 0000084E 06                      		push	es		; preserve pointer to current bds
 10368 0000084F 57                      		push	di
 10369 00000850 C43E[1901]              		les	di, [start_bds] ; get first bds
 10370                                  scan_list:				
 10371 00000854 26384504                		cmp	[es:di+4], al
 10372 00000858 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 10373 0000085A B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 10374 0000085C 26845D23                		test	[es:di+23h], bl
 10375 00000860 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 10376 00000862 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
 10377 00000866 5F                      		pop	di		; restore pointer to current bds
 10378 00000867 07                      		pop	es
 10379 00000868 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
 10380                                  
 10381                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 10382                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 10383                                  ; in this case.
 10384 0000086C 803E[7A00]01            		cmp	byte [fsetowner], 1
 10385 00000871 7517                    		jnz	short not_fsetowner
 10386                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 10387 00000873 26807D0400              		cmp	byte [es:di+4], 0
 10388 00000878 753E                    		jnz	short singleret
 10389 0000087A 268A4505                		mov	al, [es:di+5]
 10390                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 10391                                  					; get the DOS drive letter
 10392 0000087E 06                      		push	es
 10393 0000087F 8E06[1A00]              		mov	es, [zeroseg]
 10394 00000883 26A20405                		mov	[es:LSTDRV], al
 10395                                  		;mov	es:504h, al	; [es:LSTDRV]
 10396                                  					; set up sdsb
 10397 00000887 07                      		pop	es		; restore bds pointer
 10398 00000888 EB2E                    		jmp	short singleret
 10399                                  ; ---------------------------------------------------------------------------
 10400                                  
 10401                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10402                                  ; we now check to see if we are in a single drive system and the application
 10403                                  ; has "cleverly" diddled the sdsb
 10404                                  
 10405                                  not_fsetowner:				
 10406 0000088A 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10407 0000088F 7517                    		jnz	short ignore_sdsb
 10408 00000891 50                      		push	ax
 10409 00000892 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10410 00000896 88C4                    		mov	ah, al
 10411 00000898 06                      		push	es
 10412 00000899 8E06[1A00]              		mov	es, [zeroseg]
 10413 0000089D 2686060405              		xchg	al, [es:LSTDRV]
 10414                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10415                                  					; then swap(curr_drv,req_drv)
 10416 000008A2 07                      		pop	es
 10417 000008A3 38C4                    		cmp	ah, al		; else
 10418 000008A5 58                      		pop	ax		; swap(curr_drv,req_drv)
 10419 000008A6 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10420                                  ignore_sdsb:				
 10421 000008A8 E85C0E                  		call	swpdsk
 10422 000008AB EB0B                    		jmp	short singleret
 10423                                  ; ---------------------------------------------------------------------------
 10424                                  
 10425                                  scan_skip:	
 10426 000008AD 26C43D                  		les	di, [es:di]			
 10427                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10428                                  					; go to	next bds
 10429 000008B0 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10430 000008B3 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10431 000008B5 F9                      		stc
 10432 000008B6 5F                      		pop	di		; restore current bds
 10433 000008B7 07                      		pop	es
 10434                                  
 10435                                  singleret:				
 10436 000008B8 5B                      		pop	bx
 10437 000008B9 58                      		pop	ax
 10438 000008BA C3                      		retn
 10439                                  
 10440                                  ; ---------------------------------------------------------------------------
 10441                                  
 10442                                  baddrive:				
 10443 000008BB B008                    		mov	al, 8		; sector not found
 10444 000008BD EB02                    		jmp	short baddrive_ret
 10445                                  ; ---------------------------------------------------------------------------
 10446                                  
 10447                                  unformatteddrive:				
 10448 000008BF B007                    		mov	al, 7		; unknown media
 10449                                  baddrive_ret:				
 10450 000008C1 F9                      		stc
 10451                                  ; ---------------------------------------------------------------------------
 10452                                  
 10453                                  ioret:		
 10454 000008C2 C3                      		retn
 10455                                  
 10456                                  ; ---------------------------------------------------------------------------
 10457                                  
 10458                                  ; 15/10/52022
 10459                                  
 10460                                  ; ---------------------------------------------------------------------------
 10461                                  ;	disk i/o handler
 10462                                  ;
 10463                                  ;	al = drive number (0-6)
 10464                                  ;	ah = media descriptor
 10465                                  ;	cx = sector count
 10466                                  ;	dx = first sector (low)
 10467                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10468                                  ;	ds = cs
 10469                                  ;	es:di = transfer address
 10470                                  ;	[rflag]=operation (2=read, 3=write)
 10471                                  ;	[verify]=1 for verify after write
 10472                                  ;
 10473                                  ;	if successful carry flag = 0
 10474                                  ;	  else cf=1 and al contains error code
 10475                                  ; ---------------------------------------------------------------------------
 10476                                  
 10477                                  diskrd:	
 10478                                  		;mov	ds:rflag, 2	; romread
 10479                                  		; 19/10/2022
 10480 000008C3 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10481                                  
 10482                                  ; =============== S U B	R O U T	I N E =======================================
 10483                                  
 10484                                  		; 19/10/2022
 10485                                  diskio:
 10486 000008C8 89FB                    		mov	bx, di		; es:bx	= transfer address
 10487 000008CA 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
 10488 000008CE E8FAFB                  		call	SetDrive
 10489 000008D1 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10490 000008D5 A2[1F01]                		mov	[medbyt], al
 10491                                  		;jcxz	short ioret
 10492 000008D8 E3E8                    		jcxz	ioret
 10493                                  
 10494                                  ; see if the media is formatted or not by checking the flags field in
 10495                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10496                                  ; go to the error exit at label unformatteddrive.
 10497                                  
 10498 000008DA 26F6452402              		test	byte [es:di+24h], 2
 10499                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10500                                  					; unformatted_media
 10501 000008DF 75DE                    		jnz	short unformatteddrive
 10502 000008E1 890E[2201]              		mov	[seccnt], cx	; save sector count
 10503 000008E5 8926[3501]              		mov	[spsav], sp	; save sp
 10504                                  
 10505                                  ; ensure that we are trying to access valid sectors on the drive
 10506                                  
 10507 000008E9 89D0                    		mov	ax, dx
 10508 000008EB 31F6                    		xor	si, si
 10509 000008ED 01CA                    		add	dx, cx
 10510                                  		;adc	si, 0
 10511                                  		; 02/09/2023 (PCDOS 7.1)
 10512 000008EF D1D6                    		rcl	si, 1
 10513 000008F1 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10514                                  					; > 32 bit sector ?
 10515 000008F6 740C                    		jz	short sanity32
 10516                                  		;cmp	si, 0
 10517                                  		; 02/09/2023
 10518 000008F8 09F6                    		or	si, si
 10519 000008FA 75BF                    		jnz	short baddrive
 10520 000008FC 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10521 00000900 77B9                    		ja	short baddrive
 10522 00000902 EB12                    		jmp	short sanityok
 10523                                  ; ---------------------------------------------------------------------------
 10524                                  
 10525                                  sanity32:				
 10526 00000904 0336[2B05]              		add	si, [start_sec_h]
 10527 00000908 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10528 0000090C 7208                    		jb	short sanityok
 10529 0000090E 77AB                    		ja	short baddrive
 10530 00000910 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10531 00000914 77A5                    		ja	short baddrive
 10532                                  
 10533                                  sanityok:				
 10534 00000916 8B16[2B05]              		mov	dx, [start_sec_h]
 10535 0000091A 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10536 0000091E 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10537                                  
 10538                                  ; now dx;ax have the physical first sector.
 10539                                  ; since the following procedures is going to destroy ax, let's
 10540                                  ; save it temporarily to saved_word.
 10541                                  
 10542 00000922 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
 10543                                  
 10544                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10545                                  ; will do it because we will skip the set up stuff with hard disks.
 10546                                  
 10547 00000925 06                      		push	es
 10548                                  		;mov	es, [zeroseg]
 10549                                  		; 02/09/2023
 10550 00000926 31F6                    		xor	si, si ; 0
 10551 00000928 8EC6                    		mov	es, si
 10552 0000092A 26C4367800              		les	si, [es:DSKADR]
 10553                                  		;les	si, es:78h	; [es:DSKADR]
 10554                                  					; current disk parm table
 10555 0000092F 8936[2D01]              		mov	[dpt], si
 10556 00000933 8C06[2F01]              		mov	[dpt+2], es
 10557 00000937 07                      		pop	es
 10558 00000938 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10559                                  					; fnon_removable
 10560 0000093D 7510                    		jnz	short skip_setup
 10561 0000093F E8F8FE                  		call	checksingle
 10562                                  
 10563                                  ; check to see if we have previously noted a change line. the routine
 10564                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10565                                  ; the proper error code.
 10566                                  
 10567 00000942 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10568 00000947 7403                    		jz	short diskio_nochangeline ; brif not
 10569 00000949 E8890E                  		call	checklatchio	; will do a sneaky pop stack return
 10570                                  					; if a disk error occurs
 10571                                  diskio_nochangeline:			
 10572 0000094C E84700                  		call	iosetup		; set up tables	and variables for i/o
 10573                                  
 10574                                  ; now the settle values are correct for the following code
 10575                                  
 10576                                  skip_setup:
 10577                                  
 10578                                  ; 32 bit sector calculation.
 10579                                  ; dx:[saved_word] = starting sector number.
 10580                                  				
 10581 0000094F 89D0                    		mov	ax, dx
 10582 00000951 31D2                    		xor	dx, dx
 10583                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10584                                  					 ; divide by sec per track
 10585                                  		; 02/09/2023
 10586 00000953 268B4D13                		mov	cx, [es:di+13h]
 10587 00000957 F7F1                    		div	cx
 10588 00000959 A3[2905]                		mov	[temp_h], ax
 10589 0000095C A1[2D05]                		mov	ax, [saved_word]
 10590 0000095F F7F1                    		div	cx ; 02/09/2023
 10591                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10592                                  					; now, [temp_h]:ax = track #, dx = sector
 10593                                  		;inc	dl		; sector number	is 1 based.
 10594                                  		; 18/12/2022
 10595 00000961 42                      		inc	dx
 10596 00000962 8816[3101]              		mov	[cursec], dl	; save current sector
 10597 00000966 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10598                                  					; get number of	heads
 10599 0000096A 50                      		push	ax
 10600 0000096B 31D2                    		xor	dx, dx
 10601 0000096D A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10602 00000970 F7F1                    		div	cx
 10603 00000972 A3[2905]                		mov	[temp_h], ax
 10604 00000975 58                      		pop	ax
 10605 00000976 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10606 00000978 833E[2905]00            		cmp	word [temp_h], 0
 10607 0000097D 7714                    		ja	short baddrive_brdg
 10608 0000097F 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10609 00000982 770F                    		ja	short baddrive_brdg
 10610 00000984 8816[3201]              		mov	[curhd], dl	; save current head
 10611 00000988 A3[3301]                		mov	[curtrk], ax	; save current track
 10612                                  
 10613                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10614                                  ; violations here. not true. we perform the operation as if everything is
 10615                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10616                                  
 10617 0000098B A1[2201]                		mov	ax, [seccnt]
 10618 0000098E E88400                  		call	block		; (cas - call/ret)
 10619                                  		;call	done
 10620                                  		;retn
 10621                                  		; 18/12/2022
 10622 00000991 EB4B                    		jmp	done
 10623                                  
 10624                                  ; ---------------------------------------------------------------------------
 10625                                  
 10626                                  baddrive_brdg:				
 10627 00000993 E925FF                  		jmp	baddrive
 10628                                  
 10629                                  ; =============== S U B	R O U T	I N E =======================================
 10630                                  
 10631                                  ;--------------------------------------------------------------
 10632                                  ; set the drive-last-accessed flag for diskette only. 
 10633                                  ; we know that the hard disk will not be removed.
 10634                                  ; es:di -> current bds.
 10635                                  ; ds -> Bios_Data
 10636                                  ; ax,cx,si are destroyed.
 10637                                  ;--------------------------------------------------------------
 10638                                  
 10639                                  		; 19/10/2022
 10640                                  iosetup:	
 10641 00000996 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10642 0000099A A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10643                                  
 10644                                  ; determine proper head settle values
 10645                                  
 10646 0000099D 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10647 000009A2 7539                    		jnz	short skip_dpt_setting
 10648 000009A4 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10649 000009A7 1E                      		push	ds
 10650 000009A8 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10651 000009AC 884404                  		mov	[si+4],	al
 10652 000009AF 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10653 000009B2 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10654 000009B5 1F                      		pop	ds
 10655 000009B6 A2[2601]                		mov	[motorstartup], al
 10656 000009B9 8826[2B01]              		mov	[save_eot], ah
 10657                                  
 10658                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10659                                  ; motor start time to 4. this checking for every i/o is going to affect
 10660                                  ; performance across the board, but is necessary!!
 10661                                  
 10662 000009BD 1E                      		push	ds
 10663 000009BE C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10664 000009C2 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10665                                  					; ffSmall
 10666 000009C7 7505                    		jnz	short motor_start_ok
 10667 000009C9 B004                    		mov	al, 4
 10668 000009CB 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10669                                  motor_start_ok:
 10670                                  
 10671                                  ; ds:si now points to disk parameter table.
 10672                                  ; get current settle and set fast settle
 10673                                  				
 10674                                  		;xor	al, al
 10675                                  		;inc	al		; ibm wants fast settle	to be 1
 10676                                  		; 18/12/2022
 10677 000009CE 31C0                    		xor	ax, ax
 10678 000009D0 40                      		inc	ax
 10679 000009D1 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10680                                  					; get settle and set up	for fast
 10681 000009D4 1F                      		pop	ds
 10682 000009D5 A2[2701]                		mov	[settlecurrent], al
 10683 000009D8 B00F                    		mov	al, 15		; NORMSETTLE
 10684                                  					; someone has diddled the settle
 10685 000009DA A2[2801]                		mov	[settleslow], al
 10686                                  skip_dpt_setting:			
 10687 000009DD C3                      		retn
 10688                                  
 10689                                  ; =============== S U B	R O U T	I N E =======================================
 10690                                  
 10691                                  ;--------------------------------------------------------------
 10692                                  ; set time of last access, and reset default values in the dpt.
 10693                                  ;
 10694                                  ;	  note: trashes (at least) si
 10695                                  ;--------------------------------------------------------------
 10696                                  
 10697                                  		; 19/10/2022
 10698                                  done:
 10699 000009DE 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10700                                  					; fnon_removable
 10701 000009E3 752F                    		jnz	short ddbx	; do not set for non-removable media
 10702 000009E5 E8FD01                  		call	set_tim
 10703                                  ;diddleback:
 10704                                  ; 09/12/2022
 10705                                  diddle_back:				
 10706 000009E8 9C                      		pushf
 10707 000009E9 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10708 000009EE 7523                    		jnz	short nodiddleback
 10709 000009F0 50                      		push	ax
 10710 000009F1 06                      		push	es
 10711 000009F2 C436[2D01]              		les	si, [dpt]
 10712 000009F6 A0[2B01]                		mov	al, [save_eot]
 10713 000009F9 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10714 000009FD A0[2701]                		mov	al, [settlecurrent]
 10715 00000A00 8A26[2601]              		mov	ah, [motorstartup]
 10716 00000A04 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10717 00000A08 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10718 00000A0D 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10719 00000A11 07                      		pop	es
 10720 00000A12 58                      		pop	ax
 10721                                  nodiddleback:				
 10722 00000A13 9D                      		popf
 10723                                  ddbx:					
 10724 00000A14 C3                      		retn
 10725                                  
 10726                                  ; =============== S U B	R O U T	I N E =======================================
 10727                                  
 10728                                  ;--------------------------------------------------------------
 10729                                  ;read the number of sectors specified in ax, 
 10730                                  ;handling track boundaries
 10731                                  ;es:di -> bds for this drive
 10732                                  ;--------------------------------------------------------------
 10733                                  
 10734                                  		 ; 19/10/2022
 10735                                  block:	
 10736 00000A15 09C0                    		or	ax, ax
 10737 00000A17 74FB                    		jz	short ddbx
 10738 00000A19 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10739                                  					; fnon_removable
 10740 00000A1E 740D                    		jz	short block_floppy ;
 10741                                  
 10742                                  ; check	to see if multi	track operation	is allowed. if not
 10743                                  ; we have to go	to the block_floppy below to break up the operation.
 10744                                  
 10745 00000A20 F606[2F05]80            		test	byte [multrk_flag], 80h
 10746                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10747 00000A25 7406                    		jz	short block_floppy
 10748 00000A27 E82900                  		call	Disk
 10749 00000A2A 31C0                    		xor	ax, ax
 10750 00000A2C C3                      		retn
 10751                                  ; ---------------------------------------------------------------------------
 10752                                  
 10753                                  block_floppy:
 10754                                  
 10755                                  ; read at most 1 track worth. perform minimization at sector / track
 10756                                  				
 10757 00000A2D 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10758 00000A31 FEC1                    		inc	cl
 10759 00000A33 2A0E[3101]              		sub	cl, [cursec]
 10760 00000A37 30ED                    		xor	ch, ch
 10761 00000A39 39C8                    		cmp	ax, cx
 10762 00000A3B 7302                    		jnb	short gotmin
 10763 00000A3D 89C1                    		mov	cx, ax
 10764                                  
 10765                                  gotmin:
 10766                                  
 10767                                  ; ax is the requested number of sectors to read
 10768                                  ; cx is the number that we can do on this track
 10769                                  					
 10770 00000A3F 50                      		push	ax
 10771 00000A40 51                      		push	cx
 10772 00000A41 89C8                    		mov	ax, cx
 10773 00000A43 E80D00                  		call	Disk
 10774 00000A46 59                      		pop	cx
 10775 00000A47 58                      		pop	ax
 10776                                  
 10777                                  ; cx is the number of sectors just transferred
 10778                                  
 10779 00000A48 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10780 00000A4A D0E1                    		shl	cl, 1
 10781 00000A4C 00CF                    		add	bh, cl		; adjust transfer address
 10782 00000A4E EBC5                    		jmp	short block
 10783                                  dskerr_brdg:				
 10784 00000A50 E9EC00                  		jmp	dskerr
 10785                                  
 10786                                  ; =============== S U B	R O U T	I N E =======================================
 10787                                  
 10788                                  ; 15/10/2022
 10789                                  
 10790                                  ;--------------------------------------------------------------
 10791                                  ;perform disk i/o with retries
 10792                                  ; al = number of sectors (1-8, all on one track)
 10793                                  ; es:di point to drive parameters
 10794                                  ; xfer_seg:bx = transfer address 
 10795                                  ;		(must not cross a 64k physical boundary)
 10796                                  ; [rflag] = 2 if read, 3 if write
 10797                                  ; [verify] = 0 for normal, 1 for verify after write
 10798                                  ;--------------------------------------------------------------
 10799                                  
 10800                                  		 ; 19/10/2022
 10801                                  Disk:
 10802                                  
 10803                                  ; Check for hard disk format and
 10804                                  ; if TRUE then set max error count to 2
 10805                                  
 10806 00000A53 BD0500                  		mov	bp, 5		; MAXERR
 10807                                  					; set up retry count
 10808 00000A56 26F6452301              		test	byte [es:di+23h], 1	;
 10809                                  					; [es:di+BDS.flags], fnon_removable
 10810 00000A5B 7408                    		jz	short GetRdWrInd
 10811 00000A5D 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10812 00000A60 7403                    		jz	short GetRdWrInd
 10813 00000A62 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10814                                  GetRdWrInd:				
 10815 00000A65 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10816 00000A69 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10817 00000A6D 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10818                                  ;retry:
 10819                                  ; 09/12/2022
 10820                                  _retry:					
 10821 00000A71 50                      		push	ax
 10822 00000A72 8B16[3301]              		mov	dx, [curtrk]
 10823 00000A76 26F6452301              		test	byte [es:di+23h], 1
 10824 00000A7B 740B                    		jz	short disk_not_mini
 10825 00000A7D 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10826                                  					; is this a mini disk? ((logical dos partition))
 10827 00000A82 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10828 00000A84 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10829                                  					; add hidden trks.
 10830                                  disk_not_mini:				
 10831 00000A88 D0CE                    		ror	dh, 1
 10832 00000A8A D0CE                    		ror	dh, 1
 10833 00000A8C 0A36[3101]              		or	dh, [cursec]
 10834 00000A90 89D1                    		mov	cx, dx
 10835 00000A92 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10836 00000A94 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10837 00000A98 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10838                                  					; [es:di+BDS.drivenum]
 10839 00000A9C 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10840 00000AA1 7413                    		jz	short do_fast	; hard files use fast speed
 10841                                  
 10842                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10843                                  ; this helps when we have just done a reset disk operation and the head has
 10844                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10845                                  
 10846 00000AA3 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10847 00000AA8 740A                    		jz	short do_writej
 10848 00000AAA 80FC02                  		cmp	ah, 2		; romread
 10849 00000AAD 7407                    		jz	short do_fast
 10850 00000AAF 80FC04                  		cmp	ah, 4		; romverify
 10851 00000AB2 7402                    		jz	short do_fast
 10852                                  do_writej:	
 10853                                  
 10854                                  ; reads always fast, unless we have just done a disk reset operation
 10855                                  			
 10856 00000AB4 EB56                    		jmp	short do_write	; reads	always fast
 10857                                  ; ---------------------------------------------------------------------------
 10858                                  
 10859                                  do_fast:				
 10860 00000AB6 E8FC00                  		call	fastspeed	; change settle	mode
 10861                                  
 10862                                  testerr:				
 10863 00000AB9 7295                    		jb	short dskerr_brdg
 10864                                  
 10865                                  ; set drive and track of last access
 10866                                  
 10867 00000ABB 8816[7600]              		mov	[step_drv], dl
 10868 00000ABF 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10869                                  no_set:
 10870                                  		;cmp	word [wrtverify], 103h
 10871 00000AC3 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10872 00000AC9 7452                    		jz	short doverify
 10873                                  noverify:				
 10874 00000ACB 58                      		pop	ax
 10875                                  
 10876                                  ; check the flags word in the bds to see if the drive is non removable
 10877                                  ; if not we needn't do anything special
 10878                                  ; if it is a hard disk then check to see if multi-track operation
 10879                                  ; is specified. if specified we don't have to calculate for the next
 10880                                  ; track since we are already done. so we can go to the exit of this routine.
 10881                                  
 10882 00000ACC 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10883                                  					; fnon_removable
 10884 00000AD1 7407                    		jz	short its_removable
 10885 00000AD3 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10886 00000AD8 7530                    		jnz	short disk_ret
 10887                                  its_removable:				
 10888 00000ADA 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10889 00000ADD 30E4                    		xor	ah, ah
 10890 00000ADF 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10891 00000AE3 00C1                    		add	cl, al
 10892 00000AE5 880E[3101]              		mov	[cursec], cl
 10893 00000AE9 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10894                                  					; see if sector/track limit reached
 10895 00000AED 761B                    		jbe	short disk_ret
 10896 00000AEF C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10897 00000AF4 8A36[3201]              		mov	dh, [curhd]
 10898 00000AF8 FEC6                    		inc	dh
 10899 00000AFA 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10900 00000AFE 7206                    		jb	short noxor
 10901 00000B00 30F6                    		xor	dh, dh
 10902 00000B02 FF06[3301]              		inc	word [curtrk]
 10903                                  noxor:					
 10904 00000B06 8836[3201]              		mov	[curhd], dh
 10905                                  disk_ret:				
 10906 00000B0A F8                      		clc
 10907 00000B0B C3                      		retn
 10908                                  ; ---------------------------------------------------------------------------
 10909                                  
 10910                                  ; 15/10/2022
 10911                                  
 10912                                  ;--------------------------------------------------------------
 10913                                  ; the request is for write. determine if we are talking about
 10914                                  ; the same track and drive. if so, use the fast speed.
 10915                                  ;--------------------------------------------------------------
 10916                                  
 10917                                  do_write:				
 10918 00000B0C 3A16[7600]              		cmp	dl, [step_drv]
 10919 00000B10 7506                    		jnz	short do_norm	; we have changed drives
 10920 00000B12 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10921 00000B16 749E                    		jz	short do_fast	; we are still on the same track
 10922                                  
 10923                                  do_norm:				
 10924 00000B18 E87500                  		call	normspeed
 10925 00000B1B EB9C                    		jmp	short testerr
 10926                                  ; ---------------------------------------------------------------------------
 10927                                  
 10928                                  ;--------------------------------------------------------------
 10929                                  ; we have a verify request also. get state info and go verify
 10930                                  ;--------------------------------------------------------------
 10931                                  
 10932                                  doverify:				
 10933 00000B1D 58                      		pop	ax
 10934 00000B1E 50                      		push	ax
 10935 00000B1F B404                    		mov	ah, 4
 10936 00000B21 E89100                  		call	fastspeed
 10937 00000B24 73A5                    		jnb	short noverify
 10938                                  
 10939                                  ; check the error returned in ah to see if it is a soft ecc error.
 10940                                  ; if it is not we needn't do anything special. if it is a soft
 10941                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10942                                  ; this retry count becomes 0 then we just ignore the error and go to
 10943                                  ; no_verify but if we can still try then we call the routine to reset
 10944                                  ; the disk and go to dskerr1 to retry the operation.
 10945                                  
 10946 00000B26 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10947 00000B29 750B                    		jnz	short not_softecc_err
 10948 00000B2B FF0E[3405]              		dec	word [soft_ecc_cnt]
 10949 00000B2F 749A                    		jz	short noverify	; no more retry
 10950 00000B31 E83705                  		call	ResetDisk	; reset	disk
 10951 00000B34 EB3E                    		jmp	short dskerr1	; retry
 10952                                  ; ---------------------------------------------------------------------------
 10953                                  
 10954                                  not_softecc_err:			; other error.			
 10955 00000B36 E83205                  		call	ResetDisk
 10956 00000B39 FF0E[3205]              		dec	word [vretry_cnt]
 10957 00000B3D EB1C                    		jmp	short dskerr0
 10958                                  ; ---------------------------------------------------------------------------
 10959                                  
 10960                                  ;--------------------------------------------------------------
 10961                                  ; need to special case the change-line error ah=06h.
 10962                                  ; if we get this, we need to return it.
 10963                                  ;--------------------------------------------------------------
 10964                                  
 10965                                  dskerr:					
 10966 00000B3F 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10967 00000B44 7403                    		jz	short dskerr_nochangeline ; brif not
 10968 00000B46 E8FE0C                  		call	checkio
 10969                                  dskerr_nochangeline:			
 10970 00000B49 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10971 00000B4E 7508                    		jnz	short dochkagain ; no more retry.
 10972 00000B50 BD0100                  		mov	bp, 1
 10973 00000B53 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10974                                  dochkagain:				
 10975 00000B58 E8AA00                  		call	again
 10976                                  dskerr0:				
 10977 00000B5B 7420                    		jz	short harderr
 10978 00000B5D 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10979                                  					; fnon_removable
 10980 00000B62 7505                    		jnz	short skip_timeout_chk
 10981 00000B64 80FC80                  		cmp	ah, 80h		; timeout?
 10982 00000B67 7414                    		jz	short harderr
 10983                                  skip_timeout_chk:			
 10984 00000B69 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10985 00000B6C 740A                    		jz	short write_fault_err ;	then, don't retry.
 10986 00000B6E C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10987                                  					; set soft_ecc_cnt back	to maxerr
 10988                                  dskerr1:				
 10989 00000B74 58                      		pop	ax		; restore sector count
 10990                                  		;jmp	retry
 10991                                  		; 09/12/2022
 10992 00000B75 E9F9FE                  		jmp	_retry
 10993                                  ; ---------------------------------------------------------------------------
 10994                                  
 10995                                  write_fault_err:			
 10996 00000B78 BD0100                  		mov	bp, 1		; just retry only once
 10997                                  					; for write fault error.
 10998 00000B7B EBF7                    		jmp	short dskerr1
 10999                                  
 11000                                  		; fall into harderr
 11001                                  ; ---------------------------------------------------------------------------
 11002                                  
 11003                                  ; entry point for routines that call maperror themselves
 11004                                  
 11005                                  harderr:				
 11006 00000B7D E84D00                  		call	maperror
 11007                                  harderr2:				
 11008 00000B80 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 11009                                  					; force a media check through rom
 11010 00000B85 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 11011 00000B89 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 11012                                  
 11013                                  ; since we are performing a non-local goto, restore the disk parameters
 11014                                  
 11015                                  		;jmp	diddleback
 11016                                  		; 09/12/2022
 11017 00000B8D E958FE                  		jmp	diddle_back
 11018                                  
 11019                                  ; =============== S U B	R O U T	I N E =======================================
 11020                                  
 11021                                  ; change settle value from settlecurrent to whatever is appropriate
 11022                                  ; note that this routine is never called for a fixed disk.
 11023                                  
 11024                                  		; 19/10/2022
 11025                                  normspeed:
 11026 00000B90 803E[3806]00            		cmp	byte [media_set_for_format], 0
 11027 00000B95 751E                    		jnz	short fastspeed
 11028 00000B97 06                      		push	es
 11029 00000B98 50                      		push	ax
 11030 00000B99 A0[2801]                		mov	al, [settleslow]
 11031 00000B9C C436[2D01]              		les	si, [dpt]	; current disk parm table
 11032 00000BA0 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11033 00000BA4 58                      		pop	ax
 11034 00000BA5 07                      		pop	es
 11035 00000BA6 E80C00                  		call	fastspeed
 11036 00000BA9 06                      		push	es
 11037 00000BAA C436[2D01]              		les	si, [dpt]
 11038 00000BAE 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11039                                  					; 1 is fast settle value
 11040 00000BB3 07                      		pop	es
 11041 00000BB4 C3                      		retn
 11042                                  
 11043                                  ; =============== S U B	R O U T	I N E =======================================
 11044                                  
 11045                                  ; if the drive has been marked as too big (i.e. starting sector of the
 11046                                  ; partition is > 16 bits, then always return drive not ready.
 11047                                  
 11048                                  fastspeed:		
 11049 00000BB5 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 11050                                  					; ftoobig
 11051 00000BBA 750D                    		jnz	short notready
 11052 00000BBC 06                      		push	es
 11053 00000BBD 8E06[3705]              		mov	es, [xfer_seg]
 11054 00000BC1 CD13                    		int	13h		; DISK -
 11055 00000BC3 8C06[3705]              		mov	[xfer_seg], es
 11056 00000BC7 07                      		pop	es
 11057 00000BC8 C3                      		retn
 11058                                  ; ---------------------------------------------------------------------------
 11059                                  
 11060                                  notready:				
 11061 00000BC9 F9                      		stc
 11062 00000BCA B480                    		mov	ah, 80h
 11063 00000BCC C3                      		retn
 11064                                  
 11065                                  ; =============== S U B	R O U T	I N E =======================================
 11066                                  
 11067                                  ; map error returned by rom in ah into corresponding code to be returned to
 11068                                  ; dos in al. trashes di. guaranteed to set carry.
 11069                                  
 11070                                  maperror:	
 11071 00000BCD 51                      		push	cx
 11072 00000BCE 06                      		push	es
 11073 00000BCF 1E                      		push	ds		; set es=Bios_Data
 11074 00000BD0 07                      		pop	es
 11075 00000BD1 88E0                    		mov	al, ah		; put error code in al
 11076 00000BD3 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 11077 00000BD6 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 11078                                  					; number of possible error conditions
 11079 00000BD9 BF[3C01]                		mov	di, errin	; point to error conditions
 11080 00000BDC F2AE                    		repne scasb
 11081                                  		; 10/12/2022
 11082 00000BDE 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 11083                                  					; get translation
 11084                                  		; 19/10/2022 - Temporary ! 
 11085                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 11086 00000BE1 07                      		pop	es
 11087 00000BE2 59                      		pop	cx
 11088 00000BE3 F9                      		stc			; flag error condition
 11089 00000BE4 C3                      		retn
 11090                                  
 11091                                  ; =============== S U B	R O U T	I N E =======================================
 11092                                  
 11093                                  ; set the time of last access for this drive.
 11094                                  ; this is done only for removable media. es:di -> bds
 11095                                  
 11096                                  set_tim:		
 11097 00000BE5 50                      		push	ax
 11098 00000BE6 E891F8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 11099                                  
 11100                                  ; we have the new time. if we see that the time has passed,
 11101                                  ; then we reset the threshold counter...
 11102                                  
 11103 00000BE9 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 11104 00000BED 7506                    		jnz	short setaccess
 11105 00000BEF 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 11106                                  		;jz	short done_set
 11107                                  		; 12/12/2022
 11108 00000BF3 740E                    		je	short done_set2
 11109                                  setaccess:				
 11110 00000BF5 C606[1D01]00            		mov	byte [accesscount], 0
 11111 00000BFA 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 11112 00000BFE 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 11113                                  done_set:				
 11114 00000C02 F8                      		clc
 11115                                  done_set2:		; 12/12/2022
 11116 00000C03 58                      		pop	ax
 11117 00000C04 C3                      		retn
 11118                                  
 11119                                  ; =============== S U B	R O U T	I N E =======================================
 11120                                  
 11121                                  ; this routine is called if an error occurs while formatting or verifying.
 11122                                  ; it resets the drive,and decrements the retry count.
 11123                                  ; on entry - ds:di - points to bds for the drive
 11124                                  ;	     bp    - contains retry count
 11125                                  ; on exit    flags indicate result of decrementing retry count
 11126                                  
 11127                                  again:	
 11128 00000C05 E86304                  		call	ResetDisk
 11129 00000C08 80FC06                  		cmp	ah, 6
 11130 00000C0B 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 11131                                  					; do not decrement retry count.
 11132 00000C0D 4D                      		dec	bp		; decrement retry count
 11133 00000C0E C3                      		retn
 11134                                  ; ---------------------------------------------------------------------------
 11135                                  
 11136                                  dont_dec_retry_count:			
 11137 00000C0F 08E4                    		or	ah, ah
 11138 00000C11 C3                      		retn
 11139                                  
 11140                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 11141                                  
 11142                                  ;----------------------------------------------------------------------------
 11143                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 11144                                  ;----------------------------------------------------------------------------
 11145                                  ; 11/03/2019 - Retro DOS v4.0
 11146                                  
 11147                                  ; 18/03/2019
 11148                                  
 11149                                  ; ==========================================================================
 11150                                  ;
 11151                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 11152                                  ;
 11153                                  ;      This function is intended to give the user to control the
 11154                                  ;      bds table flags of unformatted_media bit.
 11155                                  ;      GetAccessFlag will show the status -
 11156                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 11157                                  ;						1 disk i/o allowed
 11158                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 11159                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 11160                                  ;						1 disallow disk i/o
 11161                                  ; ==========================================================================
 11162                                  
 11163                                  		; generic ioctl dispatch tables
 11164                                  
 11165                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 11166                                  
 11167                                  ; ---------------------------------------------------------------------------
 11168 00000C12 00                      		db 0
 11169                                  
 11170                                  ; 09/12/2022 
 11171                                  %if 0
 11172                                  
 11173                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 11174                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 11175                                  		dw 0EE8h	; 61h	; ReadTrack
 11176                                  		dw 0E86h	; 62h	; VerifyTrack
 11177                                  		dw 0CA3h	 	; Cmd_Error_Proc
 11178                                  		dw 0CA3h		; Cmd_Error_Proc
 11179                                  		dw 0CA3h		; Cmd_Error_Proc
 11180                                  		dw 119Ah	; 66h	; GetMediaId
 11181                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 11182                                  		dw 12C1h	; 68h	; SenseMediaType
 11183                                  
 11184                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 11185                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 11186                                  		dw 0EEFh	; 41h	; WriteTrack
 11187                                  		dw 0DC1h	; 42h	; FormatTrack
 11188                                  		dw 0CA3h		; Cmd_Error_Proc
 11189                                  		dw 0CA3h		; Cmd_Error_Proc
 11190                                  		dw 0CA3h		; Cmd_Error_Proc
 11191                                  		dw 11D2h	; 46h	; SetMediaId
 11192                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 11193                                  
 11194                                  %endif
 11195                                  
 11196                                  		; 09/12/2022
 11197 00000C13 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 11198 00000C14 [7E0C]                  		dw GetDeviceParameters	; 60h
 11199 00000C16 [C00E]                  		dw ReadTrack		; 61h
 11200 00000C18 [600E]                  		dw VerifyTrack		; 62h
 11201 00000C1A [7A0C]                  		dw Cmd_Error_Proc
 11202 00000C1C [7A0C]                  		dw Cmd_Error_Proc
 11203 00000C1E [7A0C]                  		dw Cmd_Error_Proc
 11204 00000C20 [4A11]                  		dw GetMediaId		; 66h
 11205 00000C22 [1612]                  		dw GetAccessFlag	; 67h ; unpublished function
 11206 00000C24 [6812]                  		dw SenseMediaType	; 68h
 11207                                  
 11208 00000C26 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 11209 00000C27 [C90C]                  		dw SetDeviceParameters	; 40h
 11210 00000C29 [C70E]                  		dw WriteTrack		; 41h
 11211 00000C2B [9C0D]                  		dw FormatTrack		; 42h
 11212 00000C2D [7A0C]                  		dw Cmd_Error_Proc
 11213 00000C2F [7A0C]                  		dw Cmd_Error_Proc
 11214 00000C31 [7A0C]                  		dw Cmd_Error_Proc
 11215 00000C33 [8011]                  		dw SetMediaId		; 46h
 11216 00000C35 [2C12]                  		dw SetAccessFlag	; 47h ; unpublished function
 11217                                  
 11218                                  ; ==========================================================================
 11219                                  ; IOC_DC_Table
 11220                                  ;
 11221                                  ; This table contains all of the valid generic IOCtl Minor codes for
 11222                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 11223                                  ; Added for 5.00
 11224                                  ; ==========================================================================
 11225                                  
 11226 00000C37 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 11227 00000C38 40                      		db 40h			; SET_DEVICE_PARAMETERS
 11228 00000C39 61                      		db 61h			; READ_TRACK
 11229 00000C3A 41                      		db 41h			; WRITE_TRACK
 11230 00000C3B 62                      		db 62h			; VERIFY_TRACK
 11231 00000C3C 42                      		db 42h			; FORMAT_TRACK
 11232 00000C3D 66                      		db 66h			; GET_MEDIA_ID
 11233 00000C3E 46                      		db 46h			; SET_MEDIA_ID
 11234 00000C3F 67                      		db 67h			; GET_ACCESS_FLAG
 11235 00000C40 47                      		db 47h			; SET_ACCESS_FLAG
 11236 00000C41 68                      		db 68h			; SENSE_MEDIA_TYPE
 11237                                  
 11238                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 11239                                  
 11240                                  ; ---------------------------------------------------------------------------
 11241                                  
 11242                                  ; 16/10/2022
 11243                                  
 11244                                  ; ==========================================================================
 11245                                  ; Do_Generic_IOCtl: perform generic ioctl request
 11246                                  ;
 11247                                  ;    input: AL contains logical drive
 11248                                  ;
 11249                                  ;	functions are dispatched through a call. On return, carry indicates
 11250                                  ;	error code in al. Note::bES:b& ds undefined on return from
 11251                                  ;	subfunctions.
 11252                                  ;
 11253                                  ; ==========================================================================
 11254                                  
 11255                                  ; 11/03/2019
 11256                                  		; 19/10/2022
 11257                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 11258 00000C42 E886F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 11259 00000C45 06                      		push	es
 11260 00000C46 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 11261 00000C4A 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 11262                                  					; RAWIO
 11263 00000C4F 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 11264 00000C53 07                      		pop	es
 11265 00000C54 7525                    		jnz	short IoctlFuncErr
 11266                                  
 11267                                  		; cas note: Could do the above two blocks in reverse order.
 11268                                  		; Would have to preserve al for SetDrive
 11269                                  
 11270                                  		; 10/12/2022
 11271 00000C56 BE[130C]                		mov	si, IoReadJumpTable
 11272                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 11273                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 11274 00000C59 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 11275 00000C5B 7503                    		jnz	short NotGenericWrite ; function is a read.
 11276                                  		; 10/12/2022
 11277 00000C5D BE[260C]                		mov	si, IoWriteJumpTable
 11278                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 11279                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 11280                                  NotGenericWrite:			
 11281 00000C60 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 11282 00000C62 2C40                    		sub	al, 40h		; offset for base function
 11283 00000C64 2E3A04                  		cmp	al, [cs:si]
 11284 00000C67 7712                    		ja	short IoctlFuncErr
 11285 00000C69 98                      		cbw
 11286 00000C6A D1E0                    		shl	ax, 1
 11287 00000C6C 46                      		inc	si
 11288 00000C6D 01C6                    		add	si, ax
 11289 00000C6F 2EFF14                  		call	near [cs:si]
 11290                                  		;call	word ptr cs:[si]
 11291 00000C72 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11292                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11293                                  					; 2C7h:30h = 70h:25A0h
 11294 00000C77 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 11295 00000C79 C3                      		retn			; Pass carry flag through to exit code
 11296                                  ; ---------------------------------------------------------------------------
 11297                                  
 11298                                  		; Cmd_Error_Proc is called as a procedure and also use
 11299                                  		; as a fall through from above
 11300                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 11301 00000C7A 5A                      		pop	dx
 11302                                  
 11303                                  IoctlFuncErr:				
 11304 00000C7B E957F4                  		jmp	bc_cmderr
 11305                                  ; ---------------------------------------------------------------------------
 11306                                  
 11307                                  ; 16/10/2022
 11308                                  
 11309                                  ; ==========================================================================
 11310                                  ;**	GetDeviceParameters:
 11311                                  ;
 11312                                  ;	GetDeviceParameters implements the generic ioctl function:
 11313                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 11314                                  ;
 11315                                  ;	ENTRY	(ES:di) = BDS for drive
 11316                                  ;		PtrSav = long pointer to request header
 11317                                  ;	EXIT	??? BUGBUG
 11318                                  ;	USES	??? BUGBUG
 11319                                  ; ==========================================================================
 11320                                  
 11321                                  		; 19/10/2022
 11322                                  GetDeviceParameters:
 11323                                  		; Copy info from bds to the device parameters packet
 11324                                  
 11325 00000C7E C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11326 00000C82 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11327                                  					; (DS:BX) = return buffer
 11328 00000C85 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 11329 00000C89 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11330 00000C8C 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 11331 00000C90 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 11332                                  					; Mask off other bits
 11333 00000C93 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11334 00000C96 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 11335 00000C9A 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11336 00000C9D 30C0                    		xor	al, al		; Set media type to default
 11337 00000C9F 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11338                                  					
 11339                                  		; copy recommended bpb
 11340 00000CA2 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 11341 00000CA5 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11342                                  					; BUILD_DEVICE_BPB
 11343 00000CA8 7412                    		jz	short UseBpbPresent
 11344 00000CAA 1E                      		push	ds		; Save request packet segment
 11345 00000CAB 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11346                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11347                                  					; 2C7h:30h = 70h:25A0h
 11348                                  					; Point back to Bios_Data
 11349 00000CB0 E887FB                  		call	checksingle
 11350 00000CB3 E842F9                  		call	GetBp		; Build	the bpb	from scratch
 11351 00000CB6 1F                      		pop	ds		; Restore request packet segment
 11352 00000CB7 720F                    		jb	short GetParmRet
 11353 00000CB9 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 11354                                  					; Use this subfield of bds instead
 11355                                  UseBpbPresent:				
 11356 00000CBC 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11357                                  					; This is where	the result goes
 11358 00000CBF B91900                  		mov	cx, 25		; A_BPB.size - 6
 11359                                  					; For now use 'small' bpb
 11360 00000CC2 1E                      		push	ds		; reverse segments for copy
 11361 00000CC3 06                      		push	es
 11362 00000CC4 1F                      		pop	ds
 11363 00000CC5 07                      		pop	es
 11364 00000CC6 F3A4                    		rep movsb
 11365                                  		
 11366                                  		; 12/12/2022
 11367                                  		; cf=0 (test instruction -above- resets cf) 	
 11368                                  		;clc
 11369                                  GetParmRet:				
 11370 00000CC8 C3                      		retn
 11371                                  ; ---------------------------------------------------------------------------
 11372                                  
 11373                                  ; 17/10/2022
 11374                                  ; 16/10/2022
 11375                                  
 11376                                  ; ==========================================================================
 11377                                  ; SetDeviceParameters:
 11378                                  ;
 11379                                  ; input: ES:di points to bds for drive
 11380                                  ; ==========================================================================
 11381                                  
 11382                                  		; 19/10/2022
 11383                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 11384 00000CC9 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11385 00000CCD C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11386 00000CD0 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 11387                                  					; fchanged_by_format|fchanged
 11388 00000CD6 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11389                                  					; ONLY_SET_TRACKLAYOUT
 11390 00000CD9 7579                    		jnz	short setTrackTable
 11391 00000CDB 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11392 00000CDE 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 11393 00000CE2 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11394 00000CE5 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 11395 00000CE9 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11396 00000CEC 1E                      		push	ds
 11397                                  		; 17/10/2022
 11398 00000CED 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11399                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11400                                  					; 2C7h:30h = 70h:25A0h
 11401                                  		;cmp	byte [fhave96], 0
 11402 00000CF2 803E[7700]00            		cmp	byte [fhave96], 0
 11403 00000CF7 1F                      		pop	ds
 11404 00000CF8 7502                    		jnz	short HaveChange ; we have changeline support
 11405                                  		; 10/12/2022
 11406 00000CFA 24FD                    		and	al, 0FDh
 11407                                  		;and	ax, 0FFFDh	; ~fchangeline
 11408                                  
 11409                                  		; Ignore all bits except non_removable and changeline
 11410                                  HaveChange:				
 11411 00000CFC 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11412 00000CFF 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11413 00000D03 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11414 00000D07 09C8                    		or	ax, cx
 11415 00000D09 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11416 00000D0D 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11417                                  					; Set media type
 11418 00000D10 1E                      		push	ds
 11419 00000D11 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11420                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11421 00000D16 A2[3706]                		mov	[mediatype], al
 11422                                  		;mov	ds:mediatype, al
 11423 00000D19 1F                      		pop	ds
 11424                                  
 11425                                  		; The media changed (maybe) so we will have to do a set dasd
 11426                                  		; the next time we format a track
 11427                                  
 11428                                  		; 10/12/2022
 11429 00000D1A 26804D2380              		or	byte [es:di+35], 80h
 11430                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11431                                  					; set_dasd_true
 11432 00000D1F 57                      		push	di		; Save bds pointer
 11433                                  
 11434                                  		; Figure out what we are supposed to do with the bpb
 11435                                  		; were we asked to install a fake bpb?
 11436                                  
 11437 00000D20 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11438                                  					; INSTALL_FAKE_BPB
 11439 00000D23 7514                    		jnz	short InstallFakeBpb
 11440                                  
 11441                                  		; were we returning a fake bpb when asked to build a bpb?
 11442                                  
 11443                                  		; 10/12/2022
 11444 00000D25 26F6452304              		test	byte [es:di+35], 4
 11445                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11446                                  					; return_fake_bpb
 11447 00000D2A 7405                    		jz	short InstallRecommendedBpb
 11448                                  
 11449                                  		; we were returning a fake bpb but we can stop now
 11450                                  
 11451                                  		; 10/12/2022
 11452 00000D2C 26806523FB              		and	byte [es:di+35], 0FBh
 11453                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11454                                  					; ~return_fake_bpb
 11455                                  InstallRecommendedBpb:			
 11456 00000D31 B91F00                  		mov	cx, 31		; A_BPB.size
 11457 00000D34 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11458 00000D37 EB0B                    		jmp	short CopyTheBpb
 11459                                  ; ---------------------------------------------------------------------------
 11460                                  
 11461                                  InstallFakeBpb:
 11462                                  		; 10/12/2022
 11463 00000D39 26804D2304              		or	byte [es:di+35], 4				
 11464                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11465                                  					; return_fake_bpb
 11466 00000D3E B91900                  		mov	cx, 25		; A_BPB.size - 6
 11467                                  					; move 'smaller' bpb
 11468 00000D41 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11469                                  
 11470                                  CopyTheBpb:				
 11471 00000D44 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11472 00000D47 F3A4                    		rep movsb
 11473 00000D49 1E                      		push	ds		; Save packet segment
 11474                                  		; 17/10/2022
 11475 00000D4A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11476                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11477                                  					; Setup	for ds -> Bios_Data
 11478 00000D4F E8CA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11479 00000D52 1F                      		pop	ds		; Restore packet segment
 11480 00000D53 5F                      		pop	di		; Restore bds pointer
 11481                                  setTrackTable:				
 11482 00000D54 8B4F26                  		mov	cx, [bx+38]
 11483 00000D57 1E                      		push	ds
 11484 00000D58 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11485 00000D5D 890E[3905]              		mov	[sectorspertrack], cx
 11486 00000D61 1F                      		pop	ds
 11487                                  		; 10/12/2022
 11488 00000D62 26806523F7              		and	byte [es:di+35], 0F7h
 11489                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11490                                  					; ~good_tracklayout
 11491 00000D67 F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11492                                  					; TRACKLAYOUT_IS_GOOD
 11493 00000D6A 7405                    		jz	short UglyTrackLayOut
 11494                                  		; 10/12/2022
 11495 00000D6C 26804D2308              		or	byte [es:di+35], 8
 11496                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11497                                  					; good_tracklayout
 11498                                  UglyTrackLayOut:			
 11499 00000D71 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11500 00000D74 7722                    		ja	short TooManyPerTrack
 11501                                  		;jcxz	short SectorInfoSaved
 11502 00000D76 E31E                    		jcxz	SectorInfoSaved	; 19/10/2022
 11503 00000D78 BF[3B05]                		mov	di, tracktable
 11504 00000D7B 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11505                                  		; 17/10/2022
 11506 00000D7E 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11507                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11508                                  					; Trash	our bds	pointer
 11509                                  StoreSectorInfo:
 11510 00000D83 47                      		inc	di
 11511 00000D84 47                      		inc	di		; Skip over cylinder and head
 11512 00000D85 AD                      		lodsw			; Get sector id
 11513 00000D86 AA                      		stosb			; Copy it
 11514 00000D87 AD                      		lodsw			; Get sector size
 11515                                  		
 11516                                  		; 02/09/2023 (PCDOS 7.1)
 11517                                  		;call	SectSizeToSectIndex
 11518 00000D88 80FC03                  		cmp	ah, 3 ; 02/09/2023
 11519                                  		;cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11520                                  					; examine upper	byte only
 11521 00000D8B 7704                    		ja	short OneK
 11522 00000D8D 88E0                    		mov	al, ah		; value	in AH is the index!
 11523 00000D8F EB02                    		jmp	short sdp_s
 11524                                  OneK:
 11525 00000D91 B003                    		mov	al, 3
 11526                                  sdp_s:
 11527 00000D93 AA                      		stosb			; Store	sector SIZE index
 11528 00000D94 E2ED                    		loop	StoreSectorInfo
 11529                                  SectorInfoSaved:
 11530 00000D96 F8                      		clc
 11531 00000D97 C3                      		retn
 11532                                  ; ---------------------------------------------------------------------------
 11533                                  
 11534                                  TooManyPerTrack:			
 11535 00000D98 B00C                    		mov	al, 0Ch
 11536 00000D9A F9                      		stc
 11537 00000D9B C3                      		retn
 11538                                  ; ---------------------------------------------------------------------------
 11539                                  
 11540                                  ; 16/10/2022
 11541                                  
 11542                                  ; ==========================================================================
 11543                                  ; FormatTrack:
 11544                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11545                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11546                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11547                                  ;
 11548                                  ; input: ES:di points to bds for drive
 11549                                  ;
 11550                                  ; output:
 11551                                  ;	for status call:
 11552                                  ;	specialfunction byte set to:
 11553                                  ;		0 - rom support + legal combination
 11554                                  ;		1 - no rom support
 11555                                  ;		2 - illegal combination
 11556                                  ;		3 - no media present
 11557                                  ;	carry cleared.
 11558                                  ;
 11559                                  ;	for format track:
 11560                                  ;		carry set if error
 11561                                  ;
 11562                                  ; ==========================================================================
 11563                                  
 11564                                  ; 16/03/2019
 11565                                  
 11566                                  		; 19/10/2022
 11567                                  FormatTrack:
 11568 00000D9C C51E[1200]              		lds	bx, [ptrsav]
 11569 00000DA0 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11570 00000DA3 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11571                                  					; STATUS_FOR_FORMAT
 11572 00000DA6 740E                    		jz	short DoFormatTrack
 11573 00000DA8 1E                      		push	ds
 11574                                  		; 17/10/2022
 11575 00000DA9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11576                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11577 00000DAE E82602                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11578 00000DB1 1F                      		pop	ds
 11579 00000DB2 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11580 00000DB4 F8                      		clc
 11581 00000DB5 C3                      		retn
 11582                                  ; ---------------------------------------------------------------------------
 11583                                  
 11584                                  DoFormatTrack:				
 11585 00000DB6 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11586                                  					; DEV_HARDDISK
 11587 00000DBB 7508                    		jnz	short DoFormatDiskette
 11588                                  		; 17/10/2022
 11589 00000DBD 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11590                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11591                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11592 00000DC2 E99B00                  		jmp	VerifyTrack
 11593                                  ; ---------------------------------------------------------------------------
 11594                                  
 11595                                  DoFormatDiskette:			
 11596 00000DC5 8B4F01                  		mov	cx, [bx+1]
 11597 00000DC8 8B5703                  		mov	dx, [bx+3]
 11598 00000DCB F60702                  		test	byte [bx], 2
 11599                                  		; 17/10/2022
 11600 00000DCE 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11601                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11602                                  					; Setup	ds-> Bios_Data for verify
 11603 00000DD3 7403                    		jz	short DoFormatDiskette_1
 11604 00000DD5 E9E300                  		jmp	VerifyTrack_Err
 11605                                  ; ---------------------------------------------------------------------------
 11606                                  
 11607                                  DoFormatDiskette_1:			
 11608 00000DD8 E8FC01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11609 00000DDB 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11610 00000DDD 7406                    		jz	short NeedToSetDasd ; Old rom
 11611 00000DDF 3C03                    		cmp	al, 3		; Time out error?
 11612 00000DE1 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11613                                  					; about	the illegal combination)
 11614 00000DE3 EB66                    		jmp	short FormatFailed
 11615                                  ; ---------------------------------------------------------------------------
 11616                                  
 11617                                  NeedToSetDasd:				
 11618 00000DE5 52                      		push	dx
 11619 00000DE6 E89001                  		call	SetDasd		; INT 13h, AH=17h
 11620 00000DE9 5A                      		pop	dx
 11621                                  NoSetDasd:				
 11622 00000DEA E84DFA                  		call	checksingle	; Do any needed	diskette swapping
 11623 00000DED 89D0                    		mov	ax, dx		; Get track from packet
 11624 00000DEF A3[3901]                		mov	[trknum], ax
 11625 00000DF2 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11626 00000DF6 88CC                    		mov	ah, cl
 11627 00000DF8 BB[3B05]                		mov	bx, tracktable
 11628 00000DFB 8B0E[3905]              		mov	cx, [sectorspertrack]
 11629                                  
 11630                                  StoreCylinderHead:			
 11631 00000DFF 8907                    		mov	[bx], ax	; Store	into TrackTable
 11632 00000E01 83C304                  		add	bx, 4		; Skip to next sector field
 11633 00000E04 E2F9                    		loop	StoreCylinderHead
 11634                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 11635                                  		; 02/09/2023
 11636 00000E06 B105                    		mov	cl, 5
 11637                                  FormatRetry:				
 11638 00000E08 51                      		push	cx
 11639 00000E09 BB[3B05]                		mov	bx, tracktable
 11640 00000E0C A0[3905]                		mov	al, [sectorspertrack]
 11641 00000E0F B405                    		mov	ah, 5		; romformat
 11642 00000E11 8C1E[3705]              		mov	[xfer_seg], ds
 11643 00000E15 E86902                  		call	ToRom
 11644 00000E18 59                      		pop	cx
 11645 00000E19 7216                    		jb	short FormatError
 11646 00000E1B 51                      		push	cx		; Now verify the sectors just formatted.
 11647                                  					; NOTE:	because	of bug in some BIOSes we have to
 11648                                  					;	set ES:BX to 00:00
 11649 00000E1C 53                      		push	bx
 11650 00000E1D 31DB                    		xor	bx, bx
 11651 00000E1F 891E[3705]              		mov	[xfer_seg], bx
 11652 00000E23 A0[3905]                		mov	al, [sectorspertrack]
 11653 00000E26 B404                    		mov	ah, 4		; romverify
 11654 00000E28 B101                    		mov	cl, 1
 11655 00000E2A E85402                  		call	ToRom
 11656 00000E2D 5B                      		pop	bx
 11657 00000E2E 59                      		pop	cx
 11658 00000E2F 7329                    		jnb	short FormatOk
 11659                                  FormatError:				
 11660 00000E31 E83702                  		call	ResetDisk
 11661 00000E34 C606[3906]01            		mov	byte [had_format_error], 1
 11662 00000E39 50                      		push	ax
 11663 00000E3A 51                      		push	cx
 11664 00000E3B 52                      		push	dx
 11665 00000E3C E89801                  		call	SetMediaForFormat
 11666 00000E3F 3C01                    		cmp	al, 1
 11667 00000E41 7503                    		jnz	short WhileErr
 11668 00000E43 E83301                  		call	SetDasd
 11669                                  WhileErr:				
 11670 00000E46 5A                      		pop	dx
 11671 00000E47 59                      		pop	cx
 11672 00000E48 58                      		pop	ax
 11673 00000E49 E2BD                    		loop	FormatRetry
 11674                                  FormatFailed:				
 11675 00000E4B C606[3906]01            		mov	byte [had_format_error], 1
 11676                                  					; Set the format error flag
 11677 00000E50 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11678 00000E53 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11679 00000E55 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11680                                  DoMapIt:				
 11681 00000E57 E973FD                  		jmp	maperror
 11682                                  ; ---------------------------------------------------------------------------
 11683                                  
 11684                                  FormatOk:				
 11685 00000E5A C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11686 00000E5F C3                      		retn
 11687                                  ; ---------------------------------------------------------------------------
 11688                                  
 11689                                  ; 16/10/2022
 11690                                  
 11691                                  ; ==========================================================================
 11692                                  ;
 11693                                  ; VerifyTrack:
 11694                                  ;
 11695                                  ; input: ES:di points to bds for drive
 11696                                  ; ==========================================================================
 11697                                  
 11698                                  VerifyTrack:				
 11699 00000E60 1E                      		push	ds
 11700 00000E61 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11701 00000E65 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11702                                  
 11703                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11704                                  
 11705 00000E68 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11706 00000E6B 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11707 00000E6E 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11708 00000E71 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11709                                  					; Get option flag word
 11710 00000E73 1F                      		pop	ds
 11711 00000E74 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11712 00000E79 890E[3301]              		mov	[curtrk], cx
 11713 00000E7D A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11714 00000E80 8B0E[3905]              		mov	cx, [sectorspertrack]
 11715                                  
 11716                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11717                                  		; specified if not we should go to the normal track verification
 11718                                  		; routine. If fast format has been specified we should get the
 11719                                  		; number of tracks to be verified and check it to see if it is
 11720                                  		; > 255. If it is then it is an error and we should go to
 11721                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11722                                  		; sectors per track to get the total number of sectors to be
 11723                                  		; verified. This should also be less than equal to 255
 11724                                  		; otherwise we go to same error exit. If everything is okay
 11725                                  		; we initalise cx to the total sectors. use ax as a temporary
 11726                                  		; register.
 11727                                  
 11728                                  					; Special function requested?	
 11729 00000E84 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11730 00000E87 7421                    		jz	short NormVerifyTrack
 11731 00000E89 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11732 00000E8B 08E4                    		or	ah, ah
 11733 00000E8D 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11734 00000E8F F6E1                    		mul	cl
 11735 00000E91 08E4                    		or	ah, ah
 11736 00000E93 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11737 00000E95 89C1                    		mov	cx, ax
 11738                                  		; 10/12/2022
 11739 00000E97 26F6452301              		test	byte [es:di+35], 1
 11740                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11741                                  					; fnon_removable
 11742 00000E9C 740C                    		jz	short NormVerifyTrack
 11743                                  					; Multitrack operation = on?
 11744                                  		; 10/12/2022
 11745                                  		; 19/10/2022
 11746 00000E9E F606[2F05]80            		test	byte [multrk_flag], 80h
 11747                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11748                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11749 00000EA3 7405                    		jz	short NormVerifyTrack
 11750 00000EA5 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11751                                  NormVerifyTrack:			
 11752 00000EAA 31C0                    		xor	ax, ax		; 1st sector
 11753 00000EAC 31DB                    		xor	bx, bx
 11754 00000EAE 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11755 00000EB2 E83F00                  		call	TrackIo
 11756 00000EB5 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11757 00000EBA C3                      		retn
 11758                                  ; ---------------------------------------------------------------------------
 11759                                  
 11760                                  VerifyTrack_Err:			
 11761 00000EBB B401                    		mov	ah, 1
 11762 00000EBD E90DFD                  		jmp	maperror
 11763                                  ; ---------------------------------------------------------------------------
 11764                                  
 11765                                  ; 16/10/2022
 11766                                  
 11767                                  ; ==========================================================================
 11768                                  ;
 11769                                  ; ReadTrack:
 11770                                  ;
 11771                                  ; input: ES:di points to bds for drive
 11772                                  ;
 11773                                  ; ==========================================================================
 11774                                  
 11775                                  ReadTrack:				
 11776 00000EC0 C606[2001]02            		mov	byte [rflag], 2	; romread
 11777 00000EC5 EB05                    		jmp	short ReadWriteTrack
 11778                                  ; ---------------------------------------------------------------------------
 11779                                  
 11780                                  WriteTrack:
 11781                                  
 11782                                  ; ==========================================================================
 11783                                  ;
 11784                                  ; WriteTrack:
 11785                                  ;
 11786                                  ; input: ES:di points to bds for drive
 11787                                  ;
 11788                                  ; ==========================================================================
 11789                                  				
 11790 00000EC7 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11791                                  
 11792                                  		; Fall into ReadWriteTrack
 11793                                  
 11794                                  ; ==========================================================================
 11795                                  ;
 11796                                  ; readWriteTrack:
 11797                                  ;
 11798                                  ; input:
 11799                                  ;    ES:di points to bds for drive
 11800                                  ;    rFlag - 2 for read,3 for write
 11801                                  ;
 11802                                  ; ==========================================================================
 11803                                  
 11804                                  ReadWriteTrack:	
 11805                                  		; save bds pointer segment so we can use it to access
 11806                                  		; our packet. Notice that this is not the standard register
 11807                                  		; assignment for accessing packets
 11808                                  		
 11809                                  		; 19/10/2022	
 11810 00000ECC 06                      		push	es
 11811 00000ECD C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11812 00000ED1 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11813 00000ED5 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11814 00000ED9 A3[3301]                		mov	[curtrk], ax
 11815 00000EDC 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11816 00000EE0 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11817 00000EE3 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11818 00000EE7 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11819 00000EEB 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11820                                  					; Get transfer address
 11821                                  
 11822                                  		; we just trashed our packet address, but we no longer care
 11823                                  
 11824 00000EEF 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11825 00000EF3 07                      		pop	es
 11826                                  
 11827                                  		; Fall into TrackIo
 11828                                  
 11829                                  ; =============== S U B	R O U T	I N E =======================================
 11830                                  
 11831                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11832                                  
 11833                                  ; ==========================================================================
 11834                                  ;
 11835                                  ; TrackIo:
 11836                                  ;    performs track read/write/verify
 11837                                  ;
 11838                                  ;   input:
 11839                                  ;      rFlag	- 2 = read
 11840                                  ;		  3 = write
 11841                                  ;		  4 = verify
 11842                                  ;      AX	- Index into track table of first sector to io
 11843                                  ;      CX	- Number of sectors to io
 11844                                  ;      Xfer_Seg:BX - Transfer address
 11845                                  ;      ES:DI	- Pointer to bds
 11846                                  ;      CurTrk	- Current cylinder
 11847                                  ;      CurHd	- Current head
 11848                                  ;
 11849                                  ; ==========================================================================
 11850                                  
 11851                                  ; 16/03/2019 - Retro DOS v4.0
 11852                                  		
 11853                                  		; 19/10/2022
 11854                                  TrackIo:	
 11855                                  					; Procedure `disk' will pop stack to
 11856 00000EF4 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11857 00000EF8 E83FF9                  		call	checksingle	; Ensure correct disk is in drv
 11858 00000EFB 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11859                                  					; See if we have already set	disk
 11860 00000F00 7407                    		jz	short Dptalreadyset ; base table
 11861 00000F02 50                      		push	ax		; set up tables	and variables for i/o
 11862 00000F03 51                      		push	cx
 11863 00000F04 E88FFA                  		call	iosetup
 11864 00000F07 59                      		pop	cx
 11865 00000F08 58                      		pop	ax
 11866                                  Dptalreadyset:				; Point si at the table entry of the			
 11867 00000F09 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11868 00000F0C D1E0                    		shl	ax, 1
 11869 00000F0E D1E0                    		shl	ax, 1
 11870 00000F10 01C6                    		add	si, ax
 11871                                  
 11872                                  		; WE WANT:
 11873                                  		; CX to	be the number of times we have to loop
 11874                                  		; DX to	be the number of sectors we read on each iteration
 11875                                  		
 11876 00000F12 BA0100                  		mov	dx, 1
 11877                                  		; 12/12/2022
 11878 00000F15 26F6452308              		test	byte [es:di+23h], 8
 11879                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11880                                  					; good_tracklayout
 11881 00000F1A 7402                    		jz	short ionextsector
 11882                                  		
 11883 00000F1C 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11884                                  ionextsector:				
 11885 00000F1E 51                      		push	cx
 11886 00000F1F 52                      		push	dx
 11887 00000F20 46                      		inc	si
 11888 00000F21 46                      		inc	si		; Skip over the	cylinder and head in
 11889                                  					; the track table
 11890 00000F22 AC                      		lodsb			; Get sector ID	from track table
 11891 00000F23 A2[3101]                		mov	[cursec], al
 11892                                  
 11893                                  		; assumptions for a fixed disk multi-track disk	i/o
 11894                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11895                                  		;     only CL is valid.
 11896                                  		; 2). Sector size should be set	to 512 bytes.
 11897                                  		; 3). Good track layout
 11898                                  		
 11899                                  		; 12/12/2022
 11900 00000F26 26F6452301              		test	byte [es:di+23h], 1
 11901                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11902                                  					; fnon_removable ; Fixed disk?
 11903 00000F2B 7414                    		jz	short IoRemovable ; No
 11904                                  		; 12/12/2022
 11905 00000F2D F606[2F05]80            		test	byte [multrk_flag], 80h
 11906                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11907                                  						; Allow multi-track operation?
 11908 00000F32 740D                    		jz	short IoRemovable ; No,don't do that.
 11909 00000F34 8916[2201]              		mov	[seccnt], dx
 11910 00000F38 89D0                    		mov	ax, dx
 11911 00000F3A E816FB                  		call	Disk
 11912 00000F3D 5A                      		pop	dx
 11913 00000F3E 59                      		pop	cx
 11914 00000F3F F8                      		clc
 11915 00000F40 C3                      		retn
 11916                                  ; ---------------------------------------------------------------------------
 11917                                  
 11918                                  IoRemovable:				
 11919 00000F41 AC                      		lodsb			; Get sector size index	from track
 11920                                  					; table	and save it
 11921 00000F42 50                      		push	ax
 11922 00000F43 56                      		push	si
 11923 00000F44 1E                      		push	ds		; Save Bios_Data
 11924 00000F45 50                      		push	ax
 11925 00000F46 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11926                                  					; Fetch	EOT while ds-> Bios_Data
 11927 00000F4A C536[2D01]              		lds	si, [dpt]
 11928 00000F4E 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11929 00000F51 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11930 00000F54 58                      		pop	ax
 11931 00000F55 1F                      		pop	ds
 11932 00000F56 88D0                    		mov	al, dl
 11933 00000F58 A3[2201]                		mov	[seccnt], ax
 11934 00000F5B E8F5FA                  		call	Disk
 11935 00000F5E 5E                      		pop	si		; Advance buffer pointer by adding
 11936                                  					; sector size
 11937 00000F5F 58                      		pop	ax
 11938                                  
 11939                                  		; 02/09/2023 (PCDOS 7.1)
 11940                                  		;call	SectorSizeIndexToSectorSize
 11941 00000F60 88C1                    		mov	cl, al
 11942 00000F62 B88000                  		mov	ax, 128
 11943 00000F65 D3E0                    		shl	ax, cl
 11944                                  
 11945 00000F67 01C3                    		add	bx, ax
 11946 00000F69 5A                      		pop	dx
 11947 00000F6A 59                      		pop	cx
 11948 00000F6B E2B1                    		loop	ionextsector
 11949 00000F6D 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11950                                  		;jz	short NoNeedDone
 11951                                  		; 12/12/2022
 11952 00000F72 7404                    		je	short NoNeedDone2
 11953 00000F74 E867FA                  		call	done		; set time of last access, and reset
 11954                                  					; entries in Dpt.
 11955                                  NoNeedDone:
 11956 00000F77 F8                      		clc
 11957                                  NoNeedDone2:
 11958 00000F78 C3                      		retn
 11959                                  
 11960                                  ; =============== S U B	R O U T	I N E =======================================
 11961                                  
 11962                                  ; ---------------------------------------------------------------------------
 11963                                  ;
 11964                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11965                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11966                                  ; are permissible.
 11967                                  ;
 11968                                  ; On Input   AX contains sector size in bytes
 11969                                  ; On Output  AL Contains index
 11970                                  ; All other registers preserved
 11971                                  ;
 11972                                  ; ---------------------------------------------------------------------------
 11973                                  
 11974                                  ; 02/09/2023
 11975                                  ;SectSizeToSectIndex:
 11976                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11977                                  ;					; examine upper	byte only
 11978                                  ;		ja	short OneK
 11979                                  ;		mov	al, ah		; value	in AH is the index!
 11980                                  ;		retn
 11981                                  
 11982                                  ; ---------------------------------------------------------------------------
 11983                                  ;
 11984                                  ;OneK:
 11985                                  ;		mov	al, 3
 11986                                  ;		retn
 11987                                  
 11988                                  ; =============== S U B	R O U T	I N E =======================================
 11989                                  
 11990                                  ; 02/09/2023
 11991                                  ;SectorSizeIndexToSectorSize:
 11992                                  ;		mov	cl, al
 11993                                  ;		mov	ax, 128
 11994                                  ;		shl	ax, cl
 11995                                  ;		retn
 11996                                  
 11997                                  ; =============== S U B	R O U T	I N E =======================================
 11998                                  
 11999                                  ; 16/10/2022
 12000                                  
 12001                                  ; ---------------------------------------------------------------------------
 12002                                  ;
 12003                                  ; SetDASD
 12004                                  ;
 12005                                  ; Set up the rom for formatting.
 12006                                  ; we have to tell the rom bios what type of disk is in the drive.
 12007                                  ;
 12008                                  ; On Input   - ES:di - Points to bds
 12009                                  ;
 12010                                  ; ---------------------------------------------------------------------------
 12011                                  
 12012                                  		; 19/10/2022
 12013                                  SetDasd:	
 12014 00000F79 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 12015                                  					; See if we've previously set dasd type
 12016 00000F7E 740C                    		jz	short DoSetDasd
 12017                                  		; 10/12/2022
 12018 00000F80 26F6452380              		test	byte [es:di+23h], 80h
 12019                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 12020                                  					; set_dasd_true
 12021 00000F85 7447                    		jz	short DasdHasBeenSet
 12022                                  		; 10/12/2022
 12023 00000F87 268065237F              		and	byte [es:di+23h], 7Fh
 12024                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 12025                                  					; ~set_dasd_true
 12026                                  DoSetDasd:
 12027 00000F8C C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 12028 00000F91 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 12029 00000F96 B004                    		mov	al, 4
 12030                                  		; 02/09/2023
 12031 00000F98 268A6522                		mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 12032 00000F9C 80FC02                  		cmp	ah, 2
 12033                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12034                                  					; DEV_3INCH720KB
 12035 00000F9F 7415                    		jz	short DoSet
 12036 00000FA1 80FC01                  		cmp	ah, 1
 12037                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 12038                                  					; DEV_5INCH96TPI
 12039                                  		;jz	short GotBig
 12040 00000FA4 B001                    		mov	al, 1
 12041                                  		;jmp	short DoSet
 12042                                  		; 02/09/2023
 12043 00000FA6 750E                    		jnz	short DoSet
 12044                                  
 12045                                  ; ---------------------------------------------------------------------------
 12046                                  
 12047                                  GotBig:
 12048                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 12049                                  		; 02/09/2023
 12050 00000FA8 40                      		inc	ax  ; mov al, 2
 12051 00000FA9 803E[3706]00            		cmp	byte [mediatype], 0
 12052 00000FAE 7506                    		jnz	short DoSet
 12053                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 12054                                  		; 10/12/2022
 12055                                  		;inc	al  ; al = 3
 12056                                  		; 18/12/2022
 12057 00000FB0 40                      		inc	ax  ; al = 3
 12058 00000FB1 C606[3B01]54            		mov	byte [gap_patch], 54h
 12059                                  DoSet:
 12060 00000FB6 1E                      		push	ds
 12061 00000FB7 56                      		push	si
 12062                                  
 12063                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 12064                                  		; 02/09/2023
 12065 00000FB8 31F6                    		xor	si, si
 12066 00000FBA 8EDE                    		mov	ds, si	; 0
 12067                                  
 12068 00000FBC C5367800                		lds	si, [DSKADR]
 12069                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 12070                                  		;;lds	si, ds:78h
 12071                                  
 12072 00000FC0 C644090F                		mov	byte [si+9], 0Fh ;
 12073                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 12074 00000FC4 5E                      		pop	si
 12075 00000FC5 1F                      		pop	ds
 12076 00000FC6 B417                    		mov	ah, 17h
 12077 00000FC8 268A5504                		mov	dl, [es:di+4]
 12078 00000FCC CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 12079                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 12080                                  DasdHasBeenSet:
 12081 00000FCE 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 12082 00000FD2 8826[3701]              		mov	[formt_eot], ah
 12083 00000FD6 C3                      		retn
 12084                                  
 12085                                  ; =============== S U B	R O U T	I N E =======================================
 12086                                  
 12087                                  ; 16/10/2022
 12088                                  
 12089                                  ; ---------------------------------------------------------------------------
 12090                                  ;
 12091                                  ; Set Media Type for Format
 12092                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 12093                                  ; BPB area in the BDS can be handled by the rom.
 12094                                  ; On Input, ES:DI -> current BDS.
 12095                                  ; The status of the operation is returned in AL
 12096                                  ;
 12097                                  ;	- 0 - if the support is available,and the combination is valid.
 12098                                  ;	- 1 - no rom support
 12099                                  ;	- 2 - illegal combination
 12100                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 12101                                  ;
 12102                                  ; Flags also may be altered. All other registers preserved.
 12103                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 12104                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 12105                                  ; to the one returned. the original pointer to the disk base table is stored
 12106                                  ; in TempDpt, until it is restored.
 12107                                  ;
 12108                                  ; ---------------------------------------------------------------------------
 12109                                  
 12110                                  		; 19/10/2022
 12111                                  SetMediaForFormat:	
 12112 00000FD7 51                      		push	cx
 12113 00000FD8 52                      		push	dx
 12114                                  
 12115                                  		; If we have a format error, then do not change Dpt, TempDpt.
 12116                                  		; but we need to call int 13h, ah=18h again.
 12117                                  
 12118 00000FD9 803E[3906]01            		cmp	byte [had_format_error], 1
 12119 00000FDE 7425                    		jz	short SkipSaveDskAdr
 12120 00000FE0 30C0                    		xor	al, al		; If already done return 0
 12121 00000FE2 803E[3806]01            		cmp	byte [media_set_for_format], 1
 12122 00000FE7 7502                    		jnz	short DoSetMediaForFormat
 12123 00000FE9 EB7D                    		jmp	SetMediaRet	; Media	already	set
 12124                                  ; ---------------------------------------------------------------------------
 12125                                  
 12126                                  DoSetMediaForFormat:
 12127 00000FEB 06                      		push	es
 12128 00000FEC 56                      		push	si
 12129                                  		
 12130                                  		; 02/09/2023
 12131                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 12132 00000FED 31F6                    		xor	si, si ; 0
 12133 00000FEF 8EC6                    		mov	es, si
 12134                                  
 12135 00000FF1 26C4367800              		les	si, [es:DSKADR]
 12136                                  		;les	si, es:78h	; [es:DSKADR]
 12137                                  					; Get pointer to disk base table
 12138 00000FF6 8936[2D01]              		mov	[dpt], si
 12139 00000FFA 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12140                                  
 12141                                  		; Initialize the head settle time to 0Fh. See the offsets
 12142                                  		; given in dskprm.inc.
 12143                                  
 12144 00000FFE 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12145 00001003 5E                      		pop	si
 12146 00001004 07                      		pop	es
 12147                                  SkipSaveDskAdr:				
 12148 00001005 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 12149 00001009 49                      		dec	cx
 12150 0000100A 80E503                  		and	ch, 3
 12151 0000100D D0CD                    		ror	ch, 1
 12152 0000100F D0CD                    		ror	ch, 1
 12153 00001011 86E9                    		xchg	ch, cl
 12154 00001013 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 12155 00001017 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12156 0000101B 06                      		push	es
 12157 0000101C 1E                      		push	ds
 12158 0000101D 56                      		push	si
 12159 0000101E 57                      		push	di
 12160 0000101F B418                    		mov	ah, 18h
 12161 00001021 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 12162                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 12163 00001023 7231                    		jb	short FormaStatErr
 12164 00001025 803E[3906]01            		cmp	byte [had_format_error], 1
 12165 0000102A 7423                    		jz	short skip_disk_base_setting
 12166 0000102C 06                      		push	es		; Save segment returned	by the rom
 12167                                  
 12168                                  		; 02/09/2023
 12169                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 12170 0000102D 31F6                    		xor	si, si
 12171 0000102F 8EC6                    		mov	es, si ; 0
 12172 00001031 06                      		push	es ; * ; 02/09/2023
 12173                                  
 12174 00001032 26C4367800              		les	si, [es:DSKADR]
 12175                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 12176                                  					; Get current disk base	table
 12177 00001037 8936[3A06]              		mov	[tempdpt], si
 12178 0000103B 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 12179                                  
 12180                                  		; 02/09/2023
 12181                                  		;;mov	es, [zeroseg]
 12182                                  		;xor	si, si ; 0
 12183                                  		;mov	es, si
 12184 0000103F 07                      		pop	es ; * ; 02/09/2023
 12185                                  
 12186                                  		;mov	es:78h,	di
 12187 00001040 26893E7800              		mov	[es:DSKADR], di
 12188                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 12189 00001045 268F067A00              		pop	word [es:DSKADR+2]
 12190 0000104A C606[3806]01            		mov	byte [media_set_for_format], 1
 12191                                  skip_disk_base_setting:			
 12192 0000104F 30C0                    		xor	al, al		; Legal	combination + rom support code
 12193                                  		;mov	ds:had_format_error, al	; Reset	the flag
 12194 00001051 A2[3906]                		mov	[had_format_error], al
 12195 00001054 EB0E                    		jmp	short PopStatRet
 12196                                  ; ---------------------------------------------------------------------------
 12197                                  
 12198                                  FormaStatErr:
 12199                                  		; 10/12/2022
 12200 00001056 B003                    		mov	al, 3
 12201                                  				
 12202 00001058 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 12203                                  					; Illegal combination =	0Ch
 12204 0000105B 7406                    		jz	short FormatStatIllegalComb
 12205 0000105D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 12206 00001060 7402                    		jz	short FormatStatTimeOut
 12207                                  		; 10/12/2022
 12208                                  		;dec	al
 12209                                  		; 18/12/2022
 12210 00001062 48                      		dec	ax
 12211                                  		; al = 2
 12212                                  		;mov	al, 1		; Function not supported.
 12213                                  		;jmp	short PopStatRet
 12214                                  ; ---------------------------------------------------------------------------
 12215                                  
 12216                                  FormatStatIllegalComb:
 12217                                  		; 10/12/2022
 12218                                  		;dec	al	; 3 -> 2 or 2 -> 1
 12219                                  		; 18/12/2022
 12220 00001063 48                      		dec	ax
 12221                                  		; al = 2				
 12222                                  		;mov	al, 2		; Function supported, but
 12223                                  					; Illegal sect/trk,trk combination.
 12224                                  		; 10/12/2022
 12225                                  		;jmp	short PopStatRet
 12226                                  ; ---------------------------------------------------------------------------
 12227                                  
 12228                                  FormatStatTimeOut:			
 12229                                  		; 10/12/2022
 12230                                  		; al = 3
 12231                                  		;mov	al, 3		; Function supported, but
 12232                                  					; Media	not present.
 12233                                  PopStatRet:				
 12234 00001064 5F                      		pop	di
 12235 00001065 5E                      		pop	si
 12236 00001066 1F                      		pop	ds
 12237 00001067 07                      		pop	es
 12238                                  SetMediaRet:				
 12239 00001068 5A                      		pop	dx
 12240 00001069 59                      		pop	cx
 12241 0000106A C3                      		retn
 12242                                  
 12243                                  ; =============== S U B	R O U T	I N E =======================================
 12244                                  
 12245                                  ; 16/10/2022
 12246                                  
 12247                                  ; ---------------------------------------------------------------------------
 12248                                  ;
 12249                                  ; RESET THE DRIVE
 12250                                  ;
 12251                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 12252                                  ; slow head settle time for the next operation. this is because the reset
 12253                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 12254                                  ; time around - there is a problem with 3.5" drives in that the head does
 12255                                  ; not settle down in time,even for read operations!!
 12256                                  ;
 12257                                  ; ---------------------------------------------------------------------------
 12258                                  
 12259                                  ResetDisk:
 12260 0000106B 50                      		push	ax
 12261                                  
 12262                                  		; 02/09/2023
 12263 0000106C B80100                  		mov	ax, 1 ; PCDOS 7.1
 12264 0000106F 3806[3806]              		cmp	[media_set_for_format], al ; 1
 12265                                  		;cmp	byte [media_set_for_format], 1
 12266                                  					; Reset while formatting?
 12267 00001073 7503                    		jnz	short ResetDisk_cont
 12268                                  					; Then verify operation in "fmt & vrfy"
 12269                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 12270 00001075 A2[3906]                		mov	[had_format_error], al ; 1
 12271                                  ResetDisk_cont:
 12272                                  		; 02/09/2023 (ah=0)
 12273                                  		;xor	ah, ah		; So signals that we had a format error
 12274 00001078 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 12275                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 12276 0000107A C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 12277                                  					; Zap up the speed
 12278 0000107F 58                      		pop	ax
 12279 00001080 C3                      		retn
 12280                                  
 12281                                  ; =============== S U B	R O U T	I N E =======================================
 12282                                  
 12283                                  ; 16/10/2022
 12284                                  
 12285                                  ; ---------------------------------------------------------------------------
 12286                                  ;
 12287                                  ; This routine sets up the drive parameter table with the values needed for
 12288                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 12289                                  ;
 12290                                  ; on entry  -	ES:DI - points to bds for the drive
 12291                                  ;		Xfer_Seg:BX - points to trkbuf
 12292                                  ;		AL    - number of sectors
 12293                                  ;		AH    - int 13 function code
 12294                                  ;		CL    - sector number for verify
 12295                                  ;		DS    - Bios_Data
 12296                                  ;
 12297                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 12298                                  ;		AX and flags are the results of the int 13
 12299                                  ;
 12300                                  ; ---------------------------------------------------------------------------
 12301                                  
 12302                                  		; 19/10/2022
 12303                                  ToRom:	
 12304 00001081 53                      		push	bx
 12305 00001082 56                      		push	si
 12306                                  
 12307                                  		; Compaq bug fix - check whether we are using new ROM
 12308                                  		; functionality to set up format, not merely if it exists.
 12309                                  		; This was formerly a check against [new_rom]
 12310                                  
 12311 00001083 F606[3806]01            		test	byte [media_set_for_format], 1
 12312 00001088 7536                    		jnz	short GotValidDpt
 12313 0000108A 50                      		push	ax
 12314 0000108B 06                      		push	es		; Save bds segment
 12315 0000108C 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12316                                  					; ffSmall ; is it a 3.5" drive?
 12317 00001091 9C                      		pushf			; (Save	the cmp	result)
 12318 00001092 8E06[1A00]              		mov	es, [zeroseg]
 12319                                  		;les	si, es:78h	; Get pointer to disk base table
 12320 00001096 26C4367800              		les	si, [es:DSKADR]
 12321                                  		;mov	word ptr ds:dpt, si
 12322                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 12323 0000109B 8936[2D01]              		mov	[dpt], si
 12324 0000109F 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12325                                  		
 12326 000010A3 A0[3701]                		mov	al, [formt_eot]
 12327 000010A6 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 12328 000010AA A0[3B01]                		mov	al, [gap_patch]
 12329 000010AD 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 12330                                  					; Important for	format
 12331 000010B1 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12332                                  					; Assume we are	doing a	seek operation
 12333                                  					; Setup	motor start correctly for 3.5" drives
 12334 000010B6 9D                      		popf			; Get result of	earlier	cmp
 12335 000010B7 7505                    		jnz	short MotorStrtOK
 12336 000010B9 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 12337                                  MotorStrtOK:				
 12338 000010BE 07                      		pop	es		; Restore bds segment
 12339 000010BF 58                      		pop	ax
 12340                                  GotValidDpt:				
 12341 000010C0 8B16[3901]              		mov	dx, [trknum]	; Set track number
 12342 000010C4 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 12343 000010C6 268A5504                		mov	dl, [es:di+4]	; Set drive number
 12344 000010CA 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 12345 000010CE 06                      		push	es		; Save bds segment
 12346 000010CF 8E06[3705]              		mov	es, [xfer_seg]
 12347 000010D3 CD13                    		int	13h		; DISK -
 12348 000010D5 07                      		pop	es		; Restore bds segment
 12349 000010D6 5E                      		pop	si
 12350 000010D7 5B                      		pop	bx
 12351 000010D8 C3                      		retn
 12352                                  
 12353                                  ; ---------------------------------------------------------------------------
 12354                                  
 12355                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12356                                  
 12357                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 12358                                  
 12359                                  ; ==========================================================================
 12360                                  ;
 12361                                  ; get the owner of the physical drive represented by the logical drive in al.
 12362                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 12363                                  ; if this is not the case, the system may hang, just following the linked list.
 12364                                  ;
 12365                                  ; ==========================================================================
 12366                                  
 12367                                  		; 19/10/2022
 12368                                  ioctl_getown:
 12369 000010D9 E8EFF3                  		call	SetDrive
 12370 000010DC 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 12371                                  					; Get physical drive number
 12372 000010E0 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 12373                                  ownloop:				
 12374 000010E4 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 12375 000010E8 7507                    		jnz	short getnextBDS
 12376                                  		; 10/12/2022
 12377 000010EA 26F6452320              		test	byte [es:di+23h], 20h
 12378                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 12379                                  					; fi_own_physical
 12380 000010EF 7514                    		jnz	short exitown
 12381                                  getnextBDS:				
 12382 000010F1 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12383 000010F4 EBEE                    		jmp	short ownloop
 12384                                  ; ---------------------------------------------------------------------------
 12385                                  
 12386                                  ; ==========================================================================
 12387                                  ;
 12388                                  ; set the ownership of the physical drive represented by the logical drive
 12389                                  ; in al to al.
 12390                                  ;
 12391                                  ; ==========================================================================
 12392                                  
 12393                                  		; 19/10/2022
 12394                                  ioctl_setown:
 12395 000010F6 E8D2F3                  		call	SetDrive
 12396 000010F9 C606[7A00]01            		mov	byte [fsetowner], 1
 12397                                  					; set flag for CheckSingle to look at.
 12398 000010FE E839F7                  		call	checksingle
 12399                                  		; 02/09/2023
 12400 00001101 FE0E[7A00]              		dec	byte [fsetowner] ; 0
 12401                                  		;mov	byte [fsetowner], 0
 12402                                  					; set ownership	of drive reset flag
 12403                                  		; Fall into ExitOwn
 12404                                  
 12405                                  ; ==========================================================================
 12406                                  ;
 12407                                  ; if there is only one logical drive assigned to this physical drive, return
 12408                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12409                                  ;
 12410                                  ; ==========================================================================
 12411                                  
 12412                                  exitown:				
 12413 00001105 30C9                    		xor	cl, cl
 12414                                  		; 12/12/2022
 12415 00001107 26F6452310              		test	byte [es:di+23h], 10h
 12416                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12417                                  					; fi_am_mult
 12418 0000110C 7406                    		jz	short exitnomult
 12419 0000110E 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12420                                  					; Get logical drive number
 12421                                  					; Get it 1-based
 12422 00001112 FEC1                    		inc	cl
 12423                                  exitnomult:				
 12424 00001114 C51E[1200]              		lds	bx, [ptrsav]
 12425 00001118 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12426                                  					; Exit normal termination
 12427                                  		; 12/12/2022
 12428                                  		; cf=0
 12429                                  		;clc
 12430 0000111B C3                      		retn
 12431                                  
 12432                                  ; =============== S U B	R O U T	I N E =======================================
 12433                                  
 12434                                  ; 16/10/2022
 12435                                  
 12436                                  ; ---------------------------------------------------------------------------
 12437                                  ;
 12438                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12439                                  ; only if the first byte of TempDpt is not -1.
 12440                                  ; all registers (including flags) are preserved.
 12441                                  ;
 12442                                  ; ---------------------------------------------------------------------------
 12443                                  
 12444                                  		; 19/10/2022
 12445                                  RestoreOldDpt:
 12446                                  		; if we have already restored the disk base table earlier,
 12447                                  		; do not do it again.
 12448                                  	
 12449 0000111C 50                      		push	ax
 12450 0000111D 30C0                    		xor	al, al
 12451 0000111F A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 12452 00001122 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 12453 00001126 08C0                    		or	al, al
 12454 00001128 741E                    		jz	short DontRestore
 12455 0000112A 56                      		push	si
 12456 0000112B 1E                      		push	ds
 12457 0000112C 06                      		push	es
 12458 0000112D C536[3A06]              		lds	si, [tempdpt]
 12459                                  
 12460                                  		; 17/10/2022
 12461 00001131 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 12462                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12463 00001136 268E06[1A00]            		mov	es, [es:zeroseg]
 12464                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 12465                                  
 12466                                  		;mov	es:78h,	si	; [es:DSKADR]
 12467 0000113B 2689367800              		mov	[es:DSKADR], si
 12468                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12469 00001140 268C1E7A00              		mov	[es:DSKADR+2], ds
 12470 00001145 07                      		pop	es
 12471 00001146 1F                      		pop	ds
 12472 00001147 5E                      		pop	si
 12473                                  DontRestore:				
 12474 00001148 58                      		pop	ax
 12475                                  		; 12/12/2022
 12476                                  		; cf=0
 12477                                  		;clc			;  Clear carry
 12478 00001149 C3                      		retn
 12479                                  
 12480                                  ; ---------------------------------------------------------------------------
 12481                                  
 12482                                  ; 16/10/2022
 12483                                  
 12484                                  ; ==========================================================================
 12485                                  ;	get media id
 12486                                  ; ==========================================================================
 12487                                  ;
 12488                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12489                                  ;	    the media that has the extended boot record.
 12490                                  ;	    for the conventional media,this routine will return "unknown
 12491                                  ;	    media type" error to dos.
 12492                                  ;
 12493                                  ; INPUT :   ES:di -> bds table for this drive.
 12494                                  ;
 12495                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12496                                  ;	    if carry set,then al contains the device driver error number
 12497                                  ;	    that will be returned to dos.
 12498                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12499                                  ;
 12500                                  ; SUBROUTINES TO BE CALLED:
 12501                                  ;	BootIo:NEAR
 12502                                  ;
 12503                                  ; LOGIC:
 12504                                  ;	to recognize the extended boot record,this logic will actually
 12505                                  ;	access the boot sector even if it is a hard disk.
 12506                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12507                                  ;	field of bpb and the extended boot signature.
 12508                                  ;
 12509                                  ; {
 12510                                  ;	get logical drive number from bds table;
 12511                                  ;	rFlag = read operation;
 12512                                  ;	BootIo;		 /*get the media boot record into the buffer
 12513                                  ;	if (no error) then
 12514                                  ;	     if (extended boot record) then
 12515                                  ;		{ set volume label,volume serial number and system id
 12516                                  ;		  of the request packet to those of the boot record;
 12517                                  ;		};
 12518                                  ;	     else		  /*not an extended bpb */
 12519                                  ;		{ set register al to "unknown media.." error code;
 12520                                  ;		  set carry bit;
 12521                                  ;		};
 12522                                  ;	else
 12523                                  ;	     ret;	/*already error code is set in the register al
 12524                                  ;
 12525                                  ; ==========================================================================
 12526                                  
 12527                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12528                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12529                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12530                                  
 12531                                  		; 19/10/2022
 12532                                  GetMediaId:
 12533 0000114A E89F00                  		call	ChangeLineChk
 12534 0000114D 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12535 00001151 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12536 00001156 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 12537 00001159 7224                    		jb	short IOCtl_If1
 12538                                  					; Valid? (0F0h-0FFh?)
 12539 0000115B 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12540                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12541 00001160 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12542                                  		; 10/12/2022
 12543 00001162 BE[7401]                		mov	si, disksector+26h
 12544 00001165 803C29                  		cmp	byte [si], 29h
 12545                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12546                                  					; EXT_BOOT_SIGNATURE
 12547 00001168 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12548 0000116A C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12549 0000116E 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12550                                  		; 10/12/2022
 12551 00001172 46                      		inc	si
 12552                                  		; si = disksector+27h 
 12553                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12554 00001173 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12555 00001176 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12556                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12557                                  					; +size_of_EXT_SYSTEM_ID
 12558 00001179 F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12559                                  	
 12560                                  		; 10/12/2022
 12561                                  		; cf = 0
 12562                                  		;clc
 12563                                  
 12564 0000117B C3                      		retn
 12565                                  ; ---------------------------------------------------------------------------
 12566                                  
 12567                                  IOCtl_If2:				
 12568 0000117C B007                    		mov	al, 7		; error_unknown_media
 12569 0000117E F9                      		stc
 12570                                  IOCtl_If1:				
 12571 0000117F C3                      		retn
 12572                                  ; ---------------------------------------------------------------------------
 12573                                  
 12574                                  ; 16/10/2022
 12575                                  
 12576                                  ; ==========================================================================
 12577                                  ;  set media id
 12578                                  ; ==========================================================================
 12579                                  
 12580                                  ; function: set the volume label, the system id and the serial number of
 12581                                  ;	    the media that has the extended boot record.
 12582                                  ;	    for the conventional media, this routine will return "unknown
 12583                                  ;	    media.." error to dos.
 12584                                  ;	    this routine will also set the corresponding informations in
 12585                                  ;	    the bds table.
 12586                                  ;
 12587                                  ; input :   ES:di -> bds table for this drive.
 12588                                  ;
 12589                                  ; output:   the extended boot record in the media will be set according to
 12590                                  ;	    the request packet.
 12591                                  ;	    if carry set, then al contains the device driver error number
 12592                                  ;	    that will be returned to dos.
 12593                                  ;
 12594                                  ; subroutines to be called:
 12595                                  ;	BootIo:NEAR
 12596                                  ;
 12597                                  ; logic:
 12598                                  ;
 12599                                  ; {
 12600                                  ;	get drive_number from bds;
 12601                                  ;	rFlag = "read operation";
 12602                                  ;	BootIo;
 12603                                  ;	if (no error) then
 12604                                  ;	     if (extended boot record) then
 12605                                  ;		{ set volume label,volume serial number and system id
 12606                                  ;		  of the boot record to those of the request packet;
 12607                                  ;		  rFlag = "write operation";
 12608                                  ;		  get drive number from bds;
 12609                                  ;		  BootIo;	  /*write it back*/
 12610                                  ;		};
 12611                                  ;	     else		  /*not an extended bpb */
 12612                                  ;		{ set register al to "unknown media.." error code;
 12613                                  ;		  set carry bit;
 12614                                  ;		  ret;	 /*return back to caller */
 12615                                  ;		};
 12616                                  ;	else
 12617                                  ;	     ret;		 /*already error code is set */
 12618                                  ;
 12619                                  ; ==========================================================================
 12620                                  
 12621                                  		; 19/10/2022
 12622                                  SetMediaId:
 12623 00001180 E86900                  		call	ChangeLineChk
 12624 00001183 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12625                                  					; Logical drive	number
 12626 00001187 88C2                    		mov	dl, al
 12627 00001189 C606[2001]02            		mov	byte [rflag], 2	; romread
 12628 0000118E 52                      		push	dx
 12629 0000118F E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12630 00001192 5A                      		pop	dx
 12631 00001193 723E                    		jb	short IOCtl_If6
 12632                                  					; Valid? (0F0h-0FFh?)
 12633 00001195 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12634                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12635 0000119A 7234                    		jb	short IOCtl_If7	; Brif not
 12636 0000119C 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12637                                  					; EXT_BOOT_SIGNATURE
 12638 000011A1 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12639 000011A3 06                      		push	es		; Save BDS pointer
 12640 000011A4 57                      		push	di
 12641 000011A5 1E                      		push	ds		; Point	ES To boot record
 12642 000011A6 07                      		pop	es
 12643 000011A7 BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12644 000011AA C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12645 000011AE C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12646 000011B1 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12647 000011B4 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12648                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12649                                  					; +size_of_EXT_SYSTEM_ID
 12650 000011B7 F3A4                    		rep movsb
 12651 000011B9 06                      		push	es		; point	ds back	to Bios_Data
 12652 000011BA 1F                      		pop	ds
 12653 000011BB 5F                      		pop	di		; restore bds pointer
 12654 000011BC 07                      		pop	es
 12655 000011BD E876F5                  		call	mov_media_ids	; update the bds media id info.
 12656 000011C0 88D0                    		mov	al, dl
 12657 000011C2 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12658 000011C7 E80A00                  		call	BootIo		; write	it back.
 12659 000011CA C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12660                                  					; make sure chk_media check the driver
 12661                                  					; return with error code from BootIo
 12662 000011CF C3                      		retn
 12663                                  ; ---------------------------------------------------------------------------
 12664                                  
 12665                                  IOCtl_If7:				
 12666 000011D0 B007                    		mov	al, 7		; error_unknown_media
 12667 000011D2 F9                      		stc
 12668                                  IOCtl_If6:				
 12669 000011D3 C3                      		retn
 12670                                  
 12671                                  ; =============== S U B	R O U T	I N E =======================================
 12672                                  
 12673                                  ; 16/10/2022
 12674                                  
 12675                                  ; ---------------------------------------------------------------------------
 12676                                  ;	BootIo
 12677                                  ; ---------------------------------------------------------------------------
 12678                                  ;
 12679                                  ; function: read/write the boot record into boot sector.
 12680                                  ;
 12681                                  ; input :
 12682                                  ;	    al=logical drive number
 12683                                  ;	    rFlag = operation (read/write)
 12684                                  ;
 12685                                  ; output:   for read operation,the boot record of the drive specified in bds
 12686                                  ;	    be read into the DiskSector buffer.
 12687                                  ;	    for write operation,the DiskSector buffer image will be written
 12688                                  ;	    to the drive specified in bds.
 12689                                  ;	    if carry set,then al contains the device driver error number
 12690                                  ;	    that will be returned to dos.
 12691                                  ;	    AX,CX,DX register destroyed.
 12692                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12693                                  ;
 12694                                  ; subroutines to be called:
 12695                                  ;	DiskIO:NEAR
 12696                                  ;
 12697                                  ; logic:
 12698                                  ;
 12699                                  ; {
 12700                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12701                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12702                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12703                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12704                                  ; }
 12705                                  ; ==========================================================================
 12706                                  
 12707                                  		; 19/10/2022
 12708                                  BootIo:	
 12709 000011D4 06                      		push	es
 12710 000011D5 57                      		push	di
 12711 000011D6 53                      		push	bx
 12712 000011D7 1E                      		push	ds
 12713 000011D8 07                      		pop	es		; Point ES: to Bios_Data
 12714                                  
 12715                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12716                                  		; need to be initialized for this subroutine out here are
 12717                                  		; - Transfer address to Bios_Data:DiskSector
 12718                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12719                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12720                                  		; - Number of sectors <-- 1
 12721                                  
 12722 000011D9 BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12723 000011DC 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12724 000011DE 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12725 000011E2 B90100                  		mov	cx, 1
 12726 000011E5 E8E0F6                  		call	diskio
 12727 000011E8 5B                      		pop	bx
 12728 000011E9 5F                      		pop	di
 12729 000011EA 07                      		pop	es
 12730 000011EB C3                      		retn
 12731                                  
 12732                                  ; =============== S U B	R O U T	I N E =======================================
 12733                                  
 12734                                  ; 16/10/2022
 12735                                  
 12736                                  ; ---------------------------------------------------------------------------
 12737                                  ;	ChangeLineChk
 12738                                  ; ---------------------------------------------------------------------------
 12739                                  ;
 12740                                  ; when the user calls get/set media id call before dos establishes the media
 12741                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12742                                  ; lost.	this routine will check the change line activity and will save the
 12743                                  ; history in the flags.
 12744                                  ;
 12745                                  ; FUNCTION: check the change line error activity
 12746                                  ;
 12747                                  ; INPUT :  ES:di -> bds table.
 12748                                  ;
 12749                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12750                                  ;
 12751                                  ; SUBROUTINES TO BE CALLED:
 12752                                  ;	Set_Changed_DL
 12753                                  ;
 12754                                  ; ---------------------------------------------------------------------------
 12755                                  
 12756                                  ChangeLineChk:	
 12757 000011EC 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12758 000011F0 08D2                    		or	dl, dl		; Fixed	disk?
 12759 000011F2 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12760                                  		; 12/12/2022
 12761 000011F4 26F6452304              		test	byte [es:di+23h], 4
 12762                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12763                                  					; return_fake_bpb
 12764 000011F9 751A                    		jnz	short ChangeLnChkRet
 12765 000011FB 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12766 00001200 7513                    		jnz	short ChangeLnChkRet
 12767 00001202 E8DE06                  		call	haschange	; This drive support change line?
 12768 00001205 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12769                                  
 12770                                  		; Execute the rom disk interrupt to check changeline activity.
 12771                                  
 12772 00001207 B416                    		mov	ah, 16h
 12773 00001209 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12774                                  					; DL = drive to	check
 12775                                  					; Return: AH = disk change status
 12776 0000120B 7308                    		jnb	short ChangeLnChkRet
 12777 0000120D 53                      		push	bx
 12778 0000120E BB4000                  		mov	bx, 40h		; fchanged
 12779                                  					; Update flag in BDS for this
 12780                                  					; physical drive
 12781 00001211 E8A806                  		call	set_changed_dl
 12782 00001214 5B                      		pop	bx
 12783                                  ChangeLnChkRet:				
 12784 00001215 C3                      		retn
 12785                                  
 12786                                  ; ---------------------------------------------------------------------------
 12787                                  
 12788                                  ; 16/10/2022
 12789                                  
 12790                                  ; ==========================================================================
 12791                                  ;	GetAccessFlag
 12792                                  ; ==========================================================================
 12793                                  ;
 12794                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12795                                  ;
 12796                                  ; INPUT :
 12797                                  ;	    ES:di -> bds table
 12798                                  ;
 12799                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12800                                  ;						 = 1 if disk i/o allowed.
 12801                                  ; ==========================================================================
 12802                                  
 12803                                  		; 19/10/2022
 12804                                  GetAccessFlag:				
 12805 00001216 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12806 0000121A C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12807                                  		;mov	al, 0		; Assume result	is unformatted
 12808                                  		; 10/12/2022
 12809 0000121D 28C0                    		sub	al, al
 12810                                  		; 10/12/2022
 12811 0000121F 26F6452402              		test	byte [es:di+36], 02h
 12812                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12813                                  					; unformatted_media
 12814 00001224 7502                    		jnz	short GafDone	; Done if unformatted
 12815 00001226 FEC0                    		inc	al		; Return true for formatted
 12816                                  
 12817                                  GafDone:				
 12818 00001228 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12819 0000122B C3                      		retn
 12820                                  ; ---------------------------------------------------------------------------
 12821                                  
 12822                                  ; 16/10/2022
 12823                                  
 12824                                  ; ==========================================================================
 12825                                  ;	SetAccessFlag
 12826                                  ; ==========================================================================
 12827                                  ;
 12828                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12829                                  ;
 12830                                  ; input :
 12831                                  ;	    ES:di -> bds table
 12832                                  ;
 12833                                  ; output:   unformtted_media bit modified according to the user request
 12834                                  ; ==========================================================================
 12835                                  
 12836                                  		; 19/10/2022
 12837                                  SetAccessFlag:				
 12838 0000122C C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12839 00001230 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12840                                  		; 10/12/2022
 12841 00001233 26806524FD              		and	byte [es:di+36], 0FDh
 12842                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12843                                  					; ~unformatted_media
 12844 00001238 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12845 0000123C 7505                    		jnz	short saf_Done
 12846                                  		; 10/12/2022
 12847 0000123E 26804D2402              		or	byte [es:di+36], 02h
 12848                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12849                                  					; unformatted_media
 12850                                  saf_Done:				
 12851 00001243 C3                      		retn
 12852                                  ; ---------------------------------------------------------------------------
 12853                                  
 12854                                  ; 16/10/2022
 12855                                  
 12856                                  ; ==========================================================================
 12857                                  ; Ioctl_Support_Query
 12858                                  ; ==========================================================================
 12859                                  ;
 12860                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12861                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12862                                  ; device attributes specifies if this function is supported.
 12863                                  ;
 12864                                  ; ==========================================================================
 12865                                  
 12866                                  		; 19/10/2022
 12867                                  ioctl_support_query:
 12868 00001244 06                      		push	es
 12869 00001245 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12870 00001249 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12871                                  					; AL ==	Major, AH == Minor
 12872 0000124D 3C08                    		cmp	al, 8		; IOC_DC
 12873                                  					; See if major code is 8
 12874 0000124F 7513                    		jnz	short nosupport
 12875 00001251 0E                      		push	cs
 12876 00001252 07                      		pop	es
 12877 00001253 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12878                                  		; 10/12/2022
 12879 00001256 BF[370C]                		mov	di, IOC_DC_Table
 12880                                  		;mov	di, 0C60h	; IOC_DC_Table
 12881                                  					; at 2C7h:0C60h	= 70h:31D0h
 12882 00001259 86C4                    		xchg	al, ah		; Put minor code in AL
 12883 0000125B F2AE                    		repne scasb		; Scan for minor code in AL
 12884 0000125D 7505                    		jnz	short nosupport	; it was not found
 12885 0000125F B80001                  		mov	ax, 100h
 12886                                  		; 10/12/2022
 12887                                  		; (jump to ioctlsupexit is not required)
 12888                                  		;jmp	short $+2	; ioctlsupexit
 12889                                  					; Signal ioctl is supported
 12890                                  		;;jmp	short ioctlsupexit
 12891                                  ; ---------------------------------------------------------------------------
 12892                                  ioctlsupexit:				
 12893 00001262 07                      		pop	es
 12894                                  		; 10/12/2022
 12895                                  		; cf = 0
 12896                                  		;clc
 12897 00001263 C3                      		retn
 12898                                  ; ---------------------------------------------------------------------------
 12899                                  nosupport:				
 12900 00001264 07                      		pop	es
 12901 00001265 E96DEE                  		jmp	bc_cmderr
 12902                                  ; ---------------------------------------------------------------------------
 12903                                  
 12904                                  ; 16/10/2022
 12905                                  
 12906                                  ; ==========================================================================
 12907                                  ;	GetMediaSenseStatus
 12908                                  ; ==========================================================================
 12909                                  ;
 12910                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12911                                  ;	    diskette drive and whether the media is the default type
 12912                                  ;	    for that drive. (default type means the max size for that
 12913                                  ;	    drive)
 12914                                  ;
 12915                                  ; INPUT :   ES:DI -> BDS table
 12916                                  ; OUTPUT:   If carry clear
 12917                                  ;	    DS:BX -> Updated IOCtlPacket
 12918                                  ;
 12919                                  ;			 Special Function at offset 0:
 12920                                  ;				0	- Media detected is not default type
 12921                                  ;				1	- Media detected is default type
 12922                                  ;
 12923                                  ;			 Device Type at offset 1:
 12924                                  ;				2       - 720K 3.5" 80 tracks
 12925                                  ;				7	- 1.44M 3.5" 80 tracks
 12926                                  ;				9	- 2.88M 3.5" 80 tracks
 12927                                  ;
 12928                                  ; Error Codes returned in AX if carry set:
 12929                                  ;
 12930                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12931                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12932                                  ;				  the media is really unkown, any error
 12933                                  ;				  other than "media not present"
 12934                                  ; 
 12935                                  ; ==========================================================================
 12936                                  
 12937                                  		; 19/10/2022
 12938                                  SenseMediaType:				
 12939 00001268 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12940 0000126C C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12941                                  		; 10/10/2022
 12942                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12943 0000126F 31D2                    		xor	dx, dx
 12944 00001271 8917                    		mov	[bx], dx ; 0
 12945                                  		;
 12946 00001273 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12947                                  					; Get int 13h drive number from	BDS
 12948                                  		; 10/12/2022
 12949                                  		;xor	dh, dh		; DX = physical	drive number
 12950 00001277 B420                    		mov	ah, 20h		; Get Media Type function
 12951                                  					; If no	carry media type in AL
 12952 00001279 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12953 0000127B 7216                    		jb	short MediaSenseEr ; error code	in AH
 12954 0000127D FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12955                                  DetermineMediaType:			
 12956 0000127F FEC8                    		dec	al
 12957 00001281 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12958 00001283 740A                    		jz	short GotMediaType
 12959 00001285 0404                    		add	al, 4
 12960 00001287 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12961 00001289 7404                    		jz	short GotMediaType
 12962 0000128B 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12963 0000128D 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12964                                  GotMediaType:				
 12965 0000128F 884701                  		mov	[bx+1],	al	; Save the return value
 12966                                  		; 10/12/2022
 12967                                  		; cf = 0
 12968                                  		;clc			; Signal success
 12969 00001292 C3                      		retn
 12970                                  ; ---------------------------------------------------------------------------
 12971                                  
 12972                                  MediaSenseEr:				
 12973 00001293 80FC32                  		cmp	ah, 32h		; See if not default media error
 12974 00001296 74E7                    		jz	short DetermineMediaType ; Not really an error
 12975 00001298 B002                    		mov	al, 2		; Now assume drive not ready
 12976 0000129A 80FC31                  		cmp	ah, 31h		; See if media was present
 12977 0000129D 7402                    		jz	short SenseErrExit ; Return drive not ready
 12978                                  UnknownMediaType:			
 12979 0000129F B007                    		mov	al, 7		; Just don't know the media type
 12980                                  SenseErrExit:				
 12981 000012A1 B481                    		mov	ah, 81h		; Signal error return
 12982 000012A3 F9                      		stc
 12983 000012A4 C3                      		retn
 12984                                  
 12985                                  ; ---------------------------------------------------------------------------
 12986                                  		; 10/12/2022
 12987                                  		;db    0
 12988                                  ; ---------------------------------------------------------------------------
 12989                                  
 12990                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12991                                  
 12992                                  ;-----------------------------------------------------------------------------
 12993                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12994                                  ;-----------------------------------------------------------------------------
 12995                                  ; 16/03/2019 - Retro DOS v4.0
 12996                                  
 12997                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12998                                  ;	after booting. this allows testing and implementation of custom int_13
 12999                                  ;	handlers, without giving up ms-dos error recovery
 13000                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 13001                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 13002                                  ;	exit:	orig13	== address of new int_13 handler
 13003                                  ;		ds:dx	== old orig13 value
 13004                                  ;		es:bx	== old old13  value
 13005                                  ;
 13006                                  ; int 2f handler for external block drivers to communicate with the internal
 13007                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 13008                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 13009                                  ; dsk_entry, the entry point for all disk requests.
 13010                                  ;
 13011                                  ; on exit from this driver, we will return to the external driver
 13012                                  ; that issued this int 2f, and can then remove the flags from the stack.
 13013                                  ; this scheme allows us to have a small external device driver, and makes
 13014                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 13015                                  ; since we only need to make changes in one place (most of the time).
 13016                                  ;
 13017                                  ;   ax=800h - check for installed handler - reserved
 13018                                  ;   ax=801h - install the bds into the linked list
 13019                                  ;   ax=802h - dos request
 13020                                  ;   ax=803h - return bds table starting pointer in ds:di
 13021                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 13022                                  ;	    problem. bds table is going to be used to get head/sector
 13023                                  ;	    informations without calling generic ioctl get device parm call.)
 13024                                  
 13025                                  ;BIOSSEGMENT equ 70h
 13026                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 13027                                  
 13028                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 13029                                  
 13030                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 13031 000012A5 80FC13                  		cmp	ah, 13h
 13032 000012A8 7413                    		jz	short int2f_replace_int13
 13033 000012AA 80FC08                  		cmp	ah, 8
 13034 000012AD 7431                    		jz	short mine
 13035                                  
 13036                                  ; Check for WIN386 startup and return the BIOS instance data
 13037                                  
 13038 000012AF 80FC16                  		cmp	ah, 16h		; MultWin386
 13039 000012B2 746C                    		jz	short win386call
 13040 000012B4 80FC4A                  		cmp	ah, 4Ah		; multMULT
 13041 000012B7 7503                    		jnz	short i2f_handler_iret
 13042 000012B9 E99700                  		jmp	handle_multmult
 13043                                  ; ---------------------------------------------------------------------------
 13044                                  
 13045                                  i2f_handler_iret:			
 13046 000012BC CF                      		iret
 13047                                  ; ---------------------------------------------------------------------------
 13048                                  
 13049                                  int2f_replace_int13:			
 13050 000012BD 50                      		push	ax	; free up a register for caller's ds
 13051 000012BE 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 13052                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 13053                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13054                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13055 000012C0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 13056                                  		; 19/10/2022
 13057                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 13058                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 13059                                  		;push	word ptr ds:Old13	; return them to caller
 13060                                  		;push	word ptr ds:Old13+2
 13061                                  		
 13062                                  		; 02/09/2023 (PCDOS 7.1)
 13063                                  		;push	word [Orig13]
 13064 000012C5 FF36[B600]              		push	word [Orig13+2]
 13065                                  		;push	word [Old13]
 13066 000012C9 FF36[0801]              		push	word [Old13+2]
 13067                                  
 13068                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 13069                                  		;mov	word ptr ds:Orig13+2, ax
 13070                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 13071                                  		;mov	word ptr ds:Old13+2, es
 13072                                  		
 13073                                  		;mov	[Orig13], dx
 13074                                  		; 02/09/2023
 13075 000012CD 8716[B400]              		xchg	dx, [Orig13]
 13076 000012D1 A3[B600]                		mov	[Orig13+2], ax
 13077                                  		;mov	[Old13], bx
 13078                                  		; 02/09/2023
 13079 000012D4 871E[0601]              		xchg	bx, [Old13]
 13080 000012D8 8C06[0801]              		mov	[Old13+2], es
 13081                                  
 13082 000012DC 07                      		pop	es			; es:bx := old old13 vector
 13083                                  		; 02/09/2023
 13084                                  		;pop	bx
 13085 000012DD 1F                      		pop	ds			; ds:dx := old orig13 vector
 13086                                  		;pop	dx ; 02/09/2023
 13087 000012DE 58                      		pop	ax
 13088                                  i2f_iret:
 13089 000012DF CF                      		iret
 13090                                  ; ---------------------------------------------------------------------------
 13091                                  
 13092                                  mine:					
 13093 000012E0 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 13094 000012E2 73FB                    		jnb	short i2f_iret
 13095 000012E4 08C0                    		or	al, al			; a get installed state request?
 13096 000012E6 7503                    		jnz	short disp_func
 13097 000012E8 B0FF                    		mov	al, 0FFh
 13098                                  		;jmp	short i2f_iret
 13099                                  		; 02/09/2023
 13100 000012EA CF                      		iret
 13101                                  ; ---------------------------------------------------------------------------
 13102                                  
 13103                                  disp_func:				
 13104 000012EB 3C01                    		cmp	al, 1			; request for installing bds?
 13105 000012ED 7418                    		jz	short do_subfun_01
 13106 000012EF 3C03                    		cmp	al, 3			; get bds vector?
 13107 000012F1 7423                    		jz	short do_get_bds_vector
 13108                                  
 13109                                  ; set up pointer to request packet
 13110                                  
 13111 000012F3 1E                      		push	ds
 13112 000012F4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 13113                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13114                                  					; = [0070h:25A0h] = [02C7h:0030h]
 13115                                  		; 19/10/2022
 13116                                  		;mov	word ptr ds:ptrsav, bx
 13117                                  		;mov	word ptr ds:ptrsav+2, es
 13118 000012F9 891E[1200]              		mov	[ptrsav], bx
 13119 000012FD 8C06[1400]              		mov	[ptrsav+2], es
 13120 00001301 1F                      		pop	ds
 13121                                  		;jmp	far ptr	i2f_dskentry
 13122                                  		; 17/10/2022
 13123                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 13124 00001302 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 13125                                  					; NOTE: jump to a FAR function, not an
 13126                                  					;  IRET type function. Callers of
 13127                                  					;  this int2f subfunction will have
 13128                                  					;  to be careful to do a popf
 13129                                  
 13130                                  ; ---------------------------------------------------------------------------
 13131                                  
 13132                                  do_subfun_01:
 13133 00001307 06                      		push	es
 13134 00001308 1E                      		push	ds
 13135 00001309 1E                      		push	ds
 13136 0000130A 07                      		pop	es
 13137                                  		; 17/10/2022
 13138 0000130B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 13139                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13140                                  					; point	ds: -> Bios_Data
 13141 00001310 E8BC03                  		call	install_bds
 13142 00001313 1F                      		pop	ds
 13143 00001314 07                      		pop	es
 13144                                  		;jmp	short i2f_iret
 13145                                  		; 02/09/2023
 13146 00001315 CF                      		iret
 13147                                  ; ---------------------------------------------------------------------------
 13148                                  
 13149                                  do_get_bds_vector:
 13150                                  		; 17/10/2022
 13151 00001316 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 13152                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13153 0000131B C53E[1901]              		lds	di, [start_bds]
 13154                                  		;lds	di, ds:start_bds
 13155                                  ;ii2f_iret:	; 10/12/2022
 13156                                  		;jmp	short i2f_iret
 13157                                  		; 02/09/2023
 13158 0000131F CF                      		iret
 13159                                  ; ---------------------------------------------------------------------------
 13160                                  
 13161                                  ; 17/10/2022
 13162                                  ; 16/10/2022
 13163                                  
 13164                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 13165                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 13166                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 13167                                  
 13168                                  win386call:				
 13169 00001320 1E                      		push	ds
 13170 00001321 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13171                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13172                                  					; at 2C7h:30h =	70h:25A0h
 13173 00001326 3C05                    		cmp	al, 5		; Win386_Init
 13174                                  					; is it	win386 initializing?
 13175 00001328 7410                    		jz	short Win386Init
 13176 0000132A 3C06                    		cmp	al, 6		; Win386_Exit
 13177                                  					; is it	win386 exiting?
 13178 0000132C 7523                    		jnz	short win_iret	; if not, continue int2f chain
 13179                                  		; 12/12/2022
 13180 0000132E F6C201                  		test	dl, 1
 13181                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 13182 00001331 751E                    		jnz	short win_iret	; if not win386, then continue
 13183                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 13184 00001333 8026[CE08]00            		and	byte [IsWin386], 0 
 13185 00001338 EB17                    		jmp	short win_iret
 13186                                  ; ---------------------------------------------------------------------------
 13187                                  
 13188                                  Win386Init:	
 13189                                  		; 12/12/2022
 13190 0000133A F6C201                  		test	dl, 1			
 13191                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 13192 0000133D 7512                    		jnz	short win_iret	; if not win386, then continue
 13193                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 13194 0000133F 800E[CE08]01            		or	byte [IsWin386], 1
 13195                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 13196                                  		;mov	word ptr ds:SI_Next+2, es
 13197 00001344 891E[9C08]              		mov	[SI_Next], bx
 13198 00001348 8C06[9E08]              		mov	[SI_Next+2], es
 13199                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 13200 0000134C BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 13201 0000134F 1E                      		push	ds
 13202 00001350 07                      		pop	es
 13203                                  win_iret:				
 13204 00001351 1F                      		pop	ds
 13205                                  ii2f_iret:	; 10/12/2022
 13206                                  		;jmp	short i2f_iret	; return back up the chain
 13207                                  		; 02/09/2023
 13208 00001352 CF                      		iret
 13209                                  ; ---------------------------------------------------------------------------
 13210                                  
 13211                                  handle_multmult:			
 13212 00001353 3C01                    		cmp	al, 1
 13213 00001355 7514                    		jnz	short try_2
 13214 00001357 1E                      		push	ds
 13215 00001358 E84500                  		call	HMAPtr		; get offset of free HMA
 13216                                  		; 10/12/2022
 13217                                  		;xor	bx, bx
 13218                                  		;dec	bx
 13219 0000135B BBFFFF                  		mov	bx, 0FFFFh
 13220 0000135E 8EC3                    		mov	es, bx		; seg of HMA
 13221 00001360 89FB                    		mov	bx, di
 13222 00001362 F7D3                    		not	bx
 13223 00001364 09DB                    		or	bx, bx
 13224 00001366 7401                    		jz	short try_1
 13225 00001368 43                      		inc	bx
 13226                                  try_1:
 13227 00001369 1F                      		pop	ds
 13228                                  		;jmp	short ii2f_iret
 13229                                  		; 02/09/2023
 13230 0000136A CF                      		iret
 13231                                  ; ---------------------------------------------------------------------------
 13232                                  
 13233                                  try_2:					
 13234 0000136B 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 13235 0000136D 7530                    		jnz	short try_3
 13236 0000136F 1E                      		push	ds
 13237                                  		; 10/12/2022
 13238                                  		;xor	di, di
 13239                                  		;dec	di
 13240 00001370 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 13241 00001373 8EC7                    		mov	es, di
 13242 00001375 E82800                  		call	HMAPtr		; get offset of free HMA
 13243 00001378 83FFFF                  		cmp	di, 0FFFFh
 13244 0000137B 7421                    		jz	short InsuffHMA
 13245 0000137D F7DF                    		neg	di		; free space in HMA
 13246 0000137F 39FB                    		cmp	bx, di
 13247 00001381 7605                    		jbe	short try_4
 13248                                  		; 10/12/2022
 13249                                  		;sub	di, di
 13250                                  		;dec	di
 13251 00001383 BFFFFF                  		mov	di, 0FFFFh
 13252                                  		;jmp	short InsuffHMA
 13253                                  		; 02/09/2023
 13254 00001386 1F                      		pop	ds
 13255 00001387 CF                      		iret
 13256                                  ; ---------------------------------------------------------------------------
 13257                                  
 13258                                  try_4:					
 13259                                  		;mov	di, ds:FreeHMAPtr
 13260 00001388 8B3E[F408]              		mov	di, [FreeHMAPtr]
 13261 0000138C 83C30F                  		add	bx, 15
 13262                                  		;and	bx, 0FFF0h
 13263                                  		; 10/12/2022
 13264 0000138F 80E3F0                  		and	bl, 0F0h
 13265                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 13266 00001392 011E[F408]              		add	[FreeHMAPtr], bx
 13267 00001396 7506                    		jnz	short InsuffHMA
 13268 00001398 C706[F408]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 13269                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 13270                                  					; no more HMA if we have wrapped
 13271                                  InsuffHMA:
 13272 0000139E 1F                      		pop	ds
 13273                                  		; 10/12/2022
 13274                                  try_3:		
 13275                                  		;jmp	short ii2f_iret
 13276                                  		; 02/09/2023
 13277 0000139F CF                      		iret
 13278                                  ; ---------------------------------------------------------------------------
 13279                                  
 13280                                  		; 10/12/2022
 13281                                  ;try_3:					
 13282                                  		;jmp	ii2f_iret
 13283                                  
 13284                                  ; =============== S U B	R O U T	I N E =======================================
 13285                                  
 13286                                  ; 16/10/2022
 13287                                  
 13288                                  ;--------------------------------------------------------------------------
 13289                                  ;
 13290                                  ; procedure : HMAPtr
 13291                                  ;
 13292                                  ;		Gets the offset of the free HMA area ( with respect to
 13293                                  ;							seg ffff )
 13294                                  ;		If DOS has not moved high, tries to move DOS high.
 13295                                  ;		In the course of doing this, it will allocate all the HMA
 13296                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 13297                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 13298                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 13299                                  ;
 13300                                  ;	RETURNS : offset of free HMA in DI
 13301                                  ;		  BIOS_DATA, seg in DS
 13302                                  ;
 13303                                  ;--------------------------------------------------------------------------
 13304                                  
 13305                                  		; 17/10/2022
 13306                                  HMAPtr:
 13307 000013A0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13308                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13309 000013A5 8B3E[F408]              		mov	di, [FreeHMAPtr]
 13310                                  		;mov	di, ds:FreeHMAPtr
 13311 000013A9 83FFFF                  		cmp	di, 0FFFFh
 13312 000013AC 750F                    		jnz	short HMAPtr_retn
 13313 000013AE 803E[FA08]00            		cmp	byte [SysinitPresent], 0
 13314                                  		;cmp	ds:SysinitPresent, 0
 13315 000013B3 7408                    		jz	short HMAPtr_retn
 13316 000013B5 FF1E[F608]              		call	far [MoveDOSIntoHMA]
 13317                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 13318 000013B9 8B3E[F408]              		mov	di, [FreeHMAPtr]
 13319                                  		;mov	di, ds:FreeHMAPtr
 13320                                  HMAPtr_retn:				
 13321 000013BD C3                      		retn
 13322                                  
 13323                                  ; =============== S U B	R O U T	I N E =======================================
 13324                                  
 13325                                  ; 16/10/2022
 13326                                  
 13327                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 13328                                  ; but go ahead and update direction flag, si, & di
 13329                                  
 13330                                  move_sector:
 13331                                  
 13332                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 13333                                  ; any segment to be a fault. Theoretically, this could be handled
 13334                                  ; by the fault handler and the behavior of an 8086 could be emulated
 13335                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 13336                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 13337                                  ; also handles the fault incorrectly in their ROM BIOS for real
 13338                                  ; mode. Their fault handler was only designed to deal with one
 13339                                  ; special case which occurred in a magazine benchmark, but didn't
 13340                                  ; handle the general case worth beans.
 13341                                  ;
 13342                                  ; Simply changing this code to do a byte loop would work okay but
 13343                                  ; would involve a general case performance hit. Therefore, we'll
 13344                                  ; check for either source or destination offsets being within one
 13345                                  ; sector of the end of their segments and only in that case fall
 13346                                  ; back to a byte move.
 13347                                  
 13348 000013BE FC                      		cld
 13349 000013BF 51                      		push	cx
 13350 000013C0 B90001                  		mov	cx, 256
 13351 000013C3 81FE00FE                		cmp	si, 0FE00h
 13352 000013C7 770A                    		ja	short movsec_bytes
 13353 000013C9 81FF00FE                		cmp	di, 0FE00h
 13354 000013CD 7704                    		ja	short movsec_bytes
 13355 000013CF F3A5                    		rep movsw
 13356 000013D1 59                      		pop	cx
 13357 000013D2 C3                      		retn
 13358                                  ; ---------------------------------------------------------------------------
 13359                                  
 13360                                  movsec_bytes:				
 13361 000013D3 D1E1                    		shl	cx, 1
 13362 000013D5 F3A4                    		rep movsb
 13363 000013D7 59                      		pop	cx
 13364 000013D8 C3                      		retn
 13365                                  
 13366                                  ; =============== S U B	R O U T	I N E =======================================
 13367                                  
 13368                                  ; 16/10/2022
 13369                                  
 13370                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 13371                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 13372                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 13373                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 13374                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 13375                                  ; but we break down a request when we get an ecc or dma error into several
 13376                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 13377                                  ; number of sectors on a track on the medium, and the request would fail.
 13378                                  ;
 13379                                  ; input conditions:
 13380                                  ;	all registers set up for an int 13 request.
 13381                                  ;
 13382                                  ; output:
 13383                                  ;	dh - contains starting head number for request
 13384                                  ;	cx - contains starting sector and cylinder numbers
 13385                                  ;	(the above may or may not have been changed, and are 0-based)
 13386                                  ;	all other registers preserved.
 13387                                  
 13388                                  check_wrap:	
 13389 000013D9 50                      		push	ax
 13390 000013DA 53                      		push	bx
 13391 000013DB 06                      		push	es
 13392 000013DC 57                      		push	di
 13393 000013DD E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 13394 000013E0 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 13395                                  		; 12/12/2022
 13396 000013E2 26F6452301              		test	byte [es:di+23h], 1
 13397                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13398 000013E7 7457                    		jz	short no_wrap	; no wrapping for removable media
 13399 000013E9 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13400 000013ED 89C8                    		mov	ax, cx
 13401 000013EF 83E03F                  		and	ax, 3Fh		; extract sector number
 13402 000013F2 39D8                    		cmp	ax, bx		; are we going to wrap?
 13403 000013F4 764A                    		jbe	short no_wrap
 13404 000013F6 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13405                                  
 13406                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13407                                  ; last sector on that track.
 13408                                  
 13409 000013F8 08E4                    		or	ah, ah
 13410 000013FA 7503                    		jnz	short not_on_bound
 13411                                  		; 18/12/2022
 13412 000013FC 48                      		dec	ax ; *
 13413 000013FD 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13414                                  					; if on	boundary
 13415                                  		;dec	al ; *		; also decrement # of head wraps
 13416                                  not_on_bound:				
 13417 000013FF 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13418 00001402 08E1                    		or	cl, ah		; or in	new sector #
 13419 00001404 30E4                    		xor	ah, ah		; ax = # of head wraps
 13420 00001406 40                      		inc	ax
 13421 00001407 00F0                    		add	al, dh		; add in starting head #
 13422 00001409 80D400                  		adc	ah, 0		; catch	any carry
 13423                                  		; 02/09/2023
 13424 0000140C 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13425 00001410 39D8                    		cmp	ax, bx
 13426                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13427                                  					; are we going to wrap around a	head?
 13428 00001412 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13429 00001414 52                      		push	dx		; preserve drive number and head number
 13430 00001415 31D2                    		xor	dx, dx
 13431                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13432 00001417 F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13433                                  
 13434                                  ; careful here! if new head # is 0, then we are on the last head.
 13435                                  
 13436 00001419 09D2                    		or	dx, dx
 13437 0000141B 7507                    		jnz	short no_head_bound
 13438 0000141D 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13439                                  
 13440                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13441                                  
 13442 0000141F 09C0                    		or	ax, ax
 13443 00001421 7401                    		jz	short no_head_bound
 13444 00001423 48                      		dec	ax		; reduce number	of cylinder wraps
 13445                                  no_head_bound:				
 13446 00001424 88D7                    		mov	bh, dl		; bh has new head number
 13447 00001426 5A                      		pop	dx		; restore drive number and head number
 13448 00001427 FECF                    		dec	bh		; get it 0-based
 13449 00001429 88FE                    		mov	dh, bh		; set up new head number in dh
 13450 0000142B 88CF                    		mov	bh, cl
 13451 0000142D 80E73F                  		and	bh, 3Fh		; preserve sector number
 13452 00001430 B306                    		mov	bl, 6
 13453 00001432 86CB                    		xchg	cl, bl
 13454 00001434 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13455 00001436 00C5                    		add	ch, al		; add in cylinder wrap
 13456 00001438 10E3                    		adc	bl, ah		; add in high byte
 13457 0000143A D2E3                    		shl	bl, cl		; move up to ms	end
 13458 0000143C 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13459 0000143E 08F9                    		or	cl, bh		; or in	sector number
 13460                                  no_wrap:				
 13461 00001440 F8                      		clc
 13462 00001441 5F                      		pop	di
 13463 00001442 07                      		pop	es
 13464 00001443 5B                      		pop	bx
 13465 00001444 58                      		pop	ax
 13466 00001445 C3                      		retn
 13467                                  ; ---------------------------------------------------------------------------
 13468                                  
 13469                                  no_wrap_head:				
 13470 00001446 88C6                    		mov	dh, al		; do not lose new head number
 13471 00001448 FECE                    		dec	dh		; get it 0-based
 13472 0000144A EBF4                    		jmp	short no_wrap
 13473                                  
 13474                                  ; =============== S U B	R O U T	I N E =======================================
 13475                                  
 13476                                  ; 16/10/2022
 13477                                  
 13478                                  ; this is a special version of the bds lookup code which is
 13479                                  ; based on physical drives rather than the usual logical drives
 13480                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13481                                  ; otherwise carry is clear
 13482                                  ;
 13483                                  ; guaranteed to trash no registers except es:di
 13484                                  
 13485                                  		; 19/10/2022
 13486                                  find_bds:	
 13487 0000144C C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13488                                  fbds_1:					
 13489 00001450 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13490 00001454 7409                    		jz	short fdbs_2
 13491 00001456 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13492                                  					; go to next bds
 13493 00001459 83FFFF                  		cmp	di, 0FFFFh
 13494 0000145C 75F2                    		jnz	short fbds_1
 13495 0000145E F9                      		stc
 13496                                  fdbs_2:					
 13497 0000145F C3                      		retn
 13498                                  
 13499                                  ; =============== S U B	R O U T	I N E =======================================
 13500                                  
 13501                                  ; 16/10/2022
 13502                                  		; 17/10/2022
 13503                                  doint:
 13504                                  		; 10/12/2022
 13505 00001460 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13506                                  					; get physical drive number
 13507                                  		; 19/10/2022 - Temporary !
 13508                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13509                                  		
 13510 00001463 30E4                    		xor	ah, ah
 13511 00001465 08C0                    		or	al, al
 13512 00001467 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13513                                  		; 10/12/2022
 13514 00001469 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13515                                  					; get request code
 13516                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13517 0000146C FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13518                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13519 0000146F 9D                      		popf
 13520                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13521                                  		; 17/10/2022
 13522 00001470 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13523                                  		;;call	call_orig13	; call far 70h:797h
 13524                                  					; call far KERNEL_SEGMENT:call_orig13
 13525 00001475 9C                      		pushf
 13526                                  		; 10/12/2022
 13527 00001476 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13528                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13529                                  dointdone:				
 13530 00001479 C3                      		retn
 13531                                  
 13532                                  ;----------------------------------------------------------------------------
 13533                                  
 13534                                  ; 16/10/2022
 13535                                  
 13536                                  ; this is the true int 13 handler. we parse the request to see if there is
 13537                                  ; a dma violation. if so, depending on the function, we:
 13538                                  ;   read/write break the request into three pieces and move the middle one
 13539                                  ;	       into our internal buffer.
 13540                                  ;
 13541                                  ;   format     copy the format table into the buffer
 13542                                  ;   verify     point the transfer address into the buffer
 13543                                  ;
 13544                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13545                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13546                                  ; the offending sector into the buffer below and do the i/o from there.
 13547                                  
 13548                                  ;struc INT13FRAME
 13549                                  ;.oldbp: resw
 13550                                  ;.oldax: resw 
 13551                                  ;.oldbx: resw
 13552                                  ;.oldcx: resw
 13553                                  ;.olddx: resw
 13554                                  ;.oldds: resw	; now we save caller's ds, too
 13555                                  ;.olddd: resd
 13556                                  ;.oldf:	resw
 13557                                  ;end struc
 13558                                  
 13559                                  ;----------------------------------------------------------------------------
 13560                                  
 13561                                  ;   entry conditions:
 13562                                  ;	ah = function
 13563                                  ;	al = number of sectors
 13564                                  ;	es:bx = dma address
 13565                                  ;	cx = packed track and sector
 13566                                  ;	dx = head and drive
 13567                                  ;   output conditions:
 13568                                  ;	no dma violation.
 13569                                  
 13570                                  ;	use extreme caution when working with this code. In general,
 13571                                  ;	  all registers are hot at all times.
 13572                                  ;
 13573                                  ;	question:  does this code handle cases where dma errors
 13574                                  ;	  occur during ecc retries, and where ecc errors occur during
 13575                                  ;	  dma breakdowns???? Hmmmmm.
 13576                                  
 13577                                  ;----------------------------------------------------------------------------
 13578                                  
 13579                                  ; ---------------------------------------------------------------------------
 13580                                  
 13581 0000147A 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13582                                  
 13583                                  ; 17/10/2022
 13584                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13585                                  ; 09/12/2022
 13586                                  DTYPEARRAY equ dtype_array
 13587                                  
 13588                                  ; ---------------------------------------------------------------------------
 13589                                  
 13590                                  ; stick some special stuff out of mainline
 13591                                  
 13592                                  ; we know we're doing a format command. if we have changeline
 13593                                  ; support, then flag some special changed stuff and set changed
 13594                                  ; by format bit for all logical drives using this physical drive
 13595                                  
 13596                                  format_special_stuff:			
 13597 0000147E 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 13598 00001483 7459                    		jz	short format_special_stuff_done ; brif not
 13599 00001485 53                      		push	bx
 13600 00001486 BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13601 00001489 E83004                  		call	set_changed_dl	; indicate that media changed by format
 13602 0000148C 5B                      		pop	bx
 13603 0000148D EB4F                    		jmp	short format_special_stuff_done
 13604                                  ; ---------------------------------------------------------------------------
 13605                                  
 13606                                  ; 16/10/2022
 13607                                  
 13608                                  ; we know we've got ec35's on the system. Now see if we're doing
 13609                                  ; a floppy. If so, create a mask and see if this particular
 13610                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13611                                  
 13612                                  		; 19/10/2022
 13613                                  ec35_special_stuff:			
 13614 0000148F 84D2                    		test	dl, dl		; floppy or hard disk?
 13615 00001491 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13616 00001493 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13617 00001494 51                      		push	cx
 13618 00001495 88D1                    		mov	cl, dl		; turn drive number into bit map
 13619 00001497 B001                    		mov	al, 1		; assume drive 0
 13620 00001499 D2E0                    		shl	al, cl		; shift	over correct number of times
 13621 0000149B 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13622 0000149F 59                      		pop	cx
 13623 000014A0 58                      		pop	ax
 13624 000014A1 7442                    		jz	short ec35_special_stuff_done
 13625                                  					; done if this floppy is not an	ec35
 13626 000014A3 53                      		push	bx		; free up a far	pointer	(es:bx)
 13627 000014A4 06                      		push	es
 13628                                  		; 17/10/2022
 13629 000014A5 2EC41E[7A14]            		les	bx, [cs:DTYPEARRAY]
 13630                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13631                                  					; 0070h:3A65h =	2C7h:14F5h
 13632 000014AA 00D3                    		add	bl, dl
 13633 000014AC 80D700                  		adc	bh, 0		; find entry for this drive
 13634 000014AF 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13635                                  					; (360k	disk in	360k drive,
 13636                                  					; no double-stepping, 250 kbs transfer rate)
 13637 000014B3 07                      		pop	es
 13638 000014B4 5B                      		pop	bx
 13639 000014B5 EB2E                    		jmp	short ec35_special_stuff_done
 13640                                  ; ---------------------------------------------------------------------------
 13641                                  
 13642                                  ; 16/10/2022
 13643                                  
 13644                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13645                                  ; this function does not reset the common buses after the execution.
 13646                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13647                                  ; will issue ah=1 (read status) call to reset the buses.
 13648                                  
 13649                                  ps2_special_stuff:			
 13650 000014B7 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13651                                  					; read driver parm ?
 13652 000014BC 7407                    		jz	short ps2_30_problem
 13653 000014BE 803E[1E00]15            		cmp	byte [prevoper], 15h
 13654                                  					; apparently function 15h fails, too
 13655 000014C3 752D                    		jnz	short ps2_special_stuff_done
 13656                                  ps2_30_problem:				
 13657 000014C5 50                      		push	ax
 13658 000014C6 B401                    		mov	ah, 1
 13659                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13660                                  		; 17/10/2022
 13661 000014C8 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13662                                  		;call	call_orig13	; call far 70:797h
 13663                                  					; call far KERNEL_SEGMENT:call_orig13
 13664 000014CD 58                      		pop	ax
 13665 000014CE EB22                    		jmp	short ps2_special_stuff_done
 13666                                  ; ---------------------------------------------------------------------------
 13667                                  
 13668                                  ; 17/10/2022
 13669                                  ; 16/10/2022
 13670                                  
 13671                                  ; here is the actual int13 handler
 13672                                  
 13673                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13674                                  
 13675                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13676                                  ; vectoring up here from Bios_Data
 13677                                  
 13678                                  		; 19/10/2022
 13679 000014D0 1E                      		push	ds		; save caller's ds register first thing
 13680                                  		;;mov	ds, word [cs:0030h]
 13681                                  					; and set up our own ds -> Bios_Data
 13682 000014D1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13683                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13684                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13685                                  
 13686                                  ; let the operation proceed. if there is a dma violation, then we do things
 13687                                  
 13688 000014D6 A3[1E00]                		mov	[prevoper], ax	; save request
 13689 000014D9 80FC05                  		cmp	ah, 5		; romformat
 13690 000014DC 74A0                    		jz	short format_special_stuff
 13691                                  					; go do special stuff for format
 13692                                   format_special_stuff_done:		
 13693 000014DE 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13694 000014E3 75AA                    		jnz	short ec35_special_stuff
 13695                                  					; go handle it out of line if so
 13696                                  ec35_special_stuff_done:
 13697                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13698 000014E5 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13699                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13700                                  		
 13701 000014EA 9C                      		pushf			; save result flags
 13702                                  		
 13703 000014EB 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13704                                  					; mdl_ps2_30
 13705 000014F0 74C5                    		jz	short ps2_special_stuff
 13706                                  					; exit mainline to address special
 13707                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13708 000014F2 9D                      		popf
 13709 000014F3 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13710                                  ret_from_i13:				
 13711 000014F5 1F                      		pop	ds
 13712 000014F6 CA0200                  		retf	2		; restore ds &	iret w/flags
 13713                                  ; ---------------------------------------------------------------------------
 13714                                  
 13715                                  ; most of our code exits through here. If carry isn't set, then
 13716                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13717                                  ; a changeline error.
 13718                                  
 13719                                  i13ret_ck_chglinerr:			
 13720 000014F9 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13721                                  i13_ret_error:				
 13722 000014FB 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13723 000014FE 7513                    		jnz	short int13b	; skip if wrong	error
 13724 00001500 08D2                    		or	dl, dl		; is this for the hard disk?
 13725 00001502 780F                    		js	short int13b	; yes, ignore
 13726 00001504 803E[7700]00            		cmp	byte [fhave96], 0
 13727 00001509 7408                    		jz	short int13b	; just in case ROM returned this
 13728                                  					; error	even though it told us it
 13729                                  					; never	would
 13730 0000150B 53                      		push	bx
 13731 0000150C BB4000                  		mov	bx, 40h		; fchanged
 13732 0000150F E8AA03                  		call	set_changed_dl
 13733 00001512 5B                      		pop	bx
 13734                                  int13b:					
 13735 00001513 F9                      		stc			; now return the error
 13736 00001514 EBDF                    		jmp	short ret_from_i13
 13737                                  ; ---------------------------------------------------------------------------
 13738                                  
 13739                                  ; some kind of error occurred. see if it is dma violation
 13740                                  
 13741                                  goterr13:				
 13742 00001516 80FC09                  		cmp	ah, 9		; dma error?
 13743 00001519 747C                    		jz	short gotdmaerr
 13744                                  goterr13_xxxx:				
 13745 0000151B 80FC11                  		cmp	ah, 11h		; ecc error?
 13746 0000151E 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13747 00001520 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13748 00001525 74D4                    		jz	short i13_ret_error
 13749                                  
 13750 00001527 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13751                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13752                                  					; (2 = romread)
 13753                                  					; ECC correction only applies to reads
 13754 0000152C 75CD                    		jnz	short i13_ret_error
 13755                                  
 13756 0000152E 30E4                    		xor	ah, ah
 13757                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13758                                  		; 17/10/2022
 13759 00001530 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13760                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13761                                  					; call far 70:797h
 13762 00001535 A1[1E00]                		mov	ax, [prevoper]
 13763 00001538 30E4                    		xor	ah, ah		; return code =	no error
 13764 0000153A 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13765 0000153C 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13766 0000153E 53                      		push	bx
 13767 0000153F 51                      		push	cx
 13768 00001540 52                      		push	dx
 13769 00001541 A2[2000]                		mov	[number_of_sec], al
 13770                                  loop_ecc:				
 13771 00001544 B80102                  		mov	ax, 201h	; read one sector
 13772                                  
 13773                                  ; we do reads one sector at a time. this ensures that we will eventually
 13774                                  ; finish the request since ecc errors on one sector do read in that sector.
 13775                                  ;
 13776                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13777                                  ; that attempt to read more sectors than are available on a particular
 13778                                  ; track.
 13779                                  ;
 13780                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13781                                  ; this request.
 13782                                  ;
 13783                                  ; at this point, all registers are set up for the call to orig13, except
 13784                                  ; that there may be a starting sector number that is bigger than the number
 13785                                  ; of sectors on a track.
 13786                                  ;
 13787 00001547 E88FFE                  		call	check_wrap	; get correct parameters for int 13
 13788                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13789                                  		; 17/10/2022
 13790 0000154A 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13791                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13792 0000154F 730C                    		jnb	short ok11_op
 13793 00001551 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13794 00001554 741B                    		jz	short handle_dma_during_ecc
 13795 00001556 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13796 00001559 7510                    		jnz	short ok11_exit_err
 13797                                  		; 10/12/2022
 13798                                  		; xor ax ax -> ah = 0
 13799                                  		;mov	ah, 0		; ecc error. reset the system again.
 13800 0000155B 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13801                                  					; was the last sector, no error	code
 13802                                  					; will be returned for the corrected
 13803                                  					; read.	(clear carry too.)
 13804                                  ok11_op:				
 13805 0000155D FE0E[2000]              		dec	byte [number_of_sec]
 13806 00001561 7409                    		jz	short ok11_exit	; all done?
 13807 00001563 FEC1                    		inc	cl		; advance sector number
 13808                                  					; add 200h to address
 13809 00001565 FEC7                    		inc	bh
 13810 00001567 FEC7                    		inc	bh
 13811 00001569 EBD9                    		jmp	short loop_ecc
 13812                                  ; ---------------------------------------------------------------------------
 13813                                  
 13814                                  ; locate error returns centrally
 13815                                  
 13816                                  ok11_exit_err:				
 13817 0000156B F9                      		stc			; set carry bit again.
 13818                                  ok11_exit:				
 13819 0000156C 5A                      		pop	dx
 13820 0000156D 59                      		pop	cx
 13821 0000156E 5B                      		pop	bx
 13822 0000156F EB88                    		jmp	short i13ret_ck_chglinerr
 13823                                  ; ---------------------------------------------------------------------------
 13824                                  
 13825                                  ; do the single sector read again, this time into our temporary
 13826                                  ; buffer, which is guaranteed not to have a DMA error, then
 13827                                  ; move the data to its proper location and proceed
 13828                                  
 13829                                  handle_dma_during_ecc:			
 13830 00001571 06                      		push	es
 13831 00001572 53                      		push	bx
 13832 00001573 BB[4E01]                		mov	bx, disksector
 13833 00001576 1E                      		push	ds
 13834 00001577 07                      		pop	es		; point es:bx to buffer
 13835 00001578 B80102                  		mov	ax, 201h	; read one sector
 13836                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13837                                  		; 17/10/2022
 13838 0000157B 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13839                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13840 00001580 5B                      		pop	bx
 13841 00001581 07                      		pop	es
 13842 00001582 7305                    		jnb	short handle_dma_during_ecc_noerr
 13843 00001584 80FC11                  		cmp	ah, 11h
 13844 00001587 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13845                                  
 13846                                  ; now we're kosher. Copy the data to where it belongs and resume
 13847                                  ; the ECC looping code.
 13848                                  
 13849                                  handle_dma_during_ecc_noerr:		
 13850 00001589 56                      		push	si
 13851 0000158A 57                      		push	di
 13852 0000158B 89DF                    		mov	di, bx
 13853 0000158D BE[4E01]                		mov	si, disksector
 13854 00001590 E82BFE                  		call	move_sector
 13855 00001593 5F                      		pop	di
 13856 00001594 5E                      		pop	si
 13857 00001595 EBC6                    		jmp	short ok11_op
 13858                                  ; ---------------------------------------------------------------------------
 13859                                  
 13860                                  ; we truly have a dma violation. restore register ax and retry the
 13861                                  ; operation as best we can.
 13862                                  
 13863                                  gotdmaerr:				
 13864 00001597 A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13865 0000159A FB                      		sti
 13866 0000159B 80FC02                  		cmp	ah, 2		; romread
 13867 0000159E 723B                    		jb	short i13_done_dmaerr
 13868                                  					; just pass dma error thru for
 13869                                  					; functions we don't handle
 13870 000015A0 80FC04                  		cmp	ah, 4		; romverify
 13871 000015A3 743C                    		jz	short intverify
 13872 000015A5 80FC05                  		cmp	ah, 5		; romformat
 13873 000015A8 7448                    		jz	short intformat
 13874 000015AA 772F                    		ja	short i13_done_dmaerr
 13875                                  
 13876                                  ; we are doing a read/write call. check for dma problems
 13877                                  
 13878                                  ;	******** set up stack frame here!!! ********
 13879                                  
 13880 000015AC 52                      		push	dx
 13881 000015AD 51                      		push	cx
 13882 000015AE 53                      		push	bx
 13883 000015AF 50                      		push	ax
 13884 000015B0 55                      		push	bp
 13885 000015B1 89E5                    		mov	bp, sp
 13886 000015B3 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13887 000015B5 D1E2                    		shl	dx, 1
 13888 000015B7 D1E2                    		shl	dx, 1
 13889 000015B9 D1E2                    		shl	dx, 1
 13890 000015BB D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13891 000015BD 01DA                    		add	dx, bx		; combine with offset
 13892 000015BF 81C2FF01                		add	dx, 511		; simulate a transfer
 13893                                  
 13894                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13895                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13896                                  
 13897 000015C3 7303                    		jnb	short no_skip_first
 13898 000015C5 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13899                                  ; ---------------------------------------------------------------------------
 13900                                  
 13901                                  no_skip_first:				
 13902 000015C8 D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13903 000015CA B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13904 000015CC 28F4                    		sub	ah, dh
 13905                                  
 13906                                  ; ah is now the number of sectors that we can successfully write in this
 13907                                  ; segment. if this number is above or equal to the requested number, then we
 13908                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13909                                  ;
 13910                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13911                                  ; first place is because we got a dma error. so it's impossible
 13912                                  ; for the whole block to fit, unless the dma error was returned
 13913                                  ; in error.
 13914                                  
 13915 000015CE 38C4                    		cmp	ah, al		; can we fit it	in?
 13916 000015D0 7236                    		jb	short doblock	; no, perform blocking.
 13917                                  
 13918                                  ; yes, the request fits. let it happen.
 13919                                  
 13920 000015D2 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13921                                  					; set up head number
 13922 000015D5 E888FE                  		call	doint
 13923 000015D8 E9D900                  		jmp	bad13		; and return from this place
 13924                                  ; ---------------------------------------------------------------------------
 13925                                  
 13926                                  i13_done_dmaerr:			
 13927 000015DB B409                    		mov	ah, 9		; pass dma error thru to caller
 13928 000015DD F9                      		stc
 13929 000015DE E914FF                  		jmp	ret_from_i13	; return with error,
 13930                                  					; we know it's not a changeline error
 13931                                  ; ---------------------------------------------------------------------------
 13932                                  
 13933                                  ; verify the given sectors. place the buffer pointer into our space.
 13934                                  
 13935                                  intverify:				
 13936 000015E1 06                      		push	es		; save caller's dma address
 13937 000015E2 53                      		push	bx
 13938 000015E3 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13939 000015E4 07                      		pop	es
 13940                                  dosimple:				
 13941 000015E5 BB[4E01]                		mov	bx, disksector
 13942                                  					; do the i/o from Bios_Data:disksector
 13943                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13944                                  		; 17/10/2022
 13945 000015E8 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13946                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13947 000015ED 5B                      		pop	bx
 13948 000015EE 07                      		pop	es
 13949 000015EF E907FF                  		jmp	i13ret_ck_chglinerr
 13950                                  ; ---------------------------------------------------------------------------
 13951                                  
 13952                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13953                                  
 13954                                  intformat:				
 13955 000015F2 06                      		push	es
 13956 000015F3 53                      		push	bx
 13957 000015F4 56                      		push	si
 13958 000015F5 57                      		push	di
 13959 000015F6 1E                      		push	ds
 13960                                  
 13961                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13962                                  ; in other words, swap (ds, es)
 13963                                  
 13964 000015F7 06                      		push	es
 13965 000015F8 1E                      		push	ds
 13966 000015F9 07                      		pop	es
 13967 000015FA 1F                      		pop	ds
 13968 000015FB 89DE                    		mov	si, bx
 13969 000015FD BF[4E01]                		mov	di, disksector
 13970 00001600 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 13971 00001603 1F                      		pop	ds
 13972 00001604 5F                      		pop	di
 13973 00001605 5E                      		pop	si		; do the i/o from
 13974 00001606 EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13975                                  ; ---------------------------------------------------------------------------
 13976                                  
 13977                                  ; we can't fit the request into the entire block. perform the operation on
 13978                                  ; the first block.
 13979                                  ;
 13980                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13981                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13982                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13983                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13984                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13985                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13986                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13987                                  ; doblock will handle the first block of requested sectors within the
 13988                                  ; boundary of this safe value.
 13989                                  
 13990                                  doblock:
 13991                                  
 13992                                  ; try to get the # of sectors/track from bds via rom drive number.
 13993                                  ; for any mini disks installed, here we have to pray that they have the
 13994                                  ; same # of sector/track as the main dos partition disk drive.
 13995                                  				
 13996 00001608 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13997                                  					; get head #, drive #
 13998 0000160B 51                      		push	cx
 13999 0000160C 06                      		push	es
 14000 0000160D 57                      		push	di		; ah - # of sectors before dma boundary
 14001                                  					; al - requested # of sectors for i/o.
 14002 0000160E E83BFE                  		call	find_bds
 14003 00001611 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 14004                                  		; 12/12/2022
 14005 00001615 26F6452301              		test	byte [es:di+23h], 1
 14006                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 14007 0000161A 5F                      		pop	di
 14008 0000161B 07                      		pop	es
 14009 0000161C 88E0                    		mov	al, ah		; set al=ah for	floppies
 14010 0000161E 7404                    		jz	short doblockflop ; they are track by track operation
 14011 00001620 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 14012 00001622 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 14013                                  doblockflop:				
 14014 00001624 59                      		pop	cx
 14015                                  doblockcontinue:			
 14016 00001625 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 14017 00001627 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 14018 00001629 50                      		push	ax
 14019 0000162A 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 14020 0000162C EB03                    		jmp	short doblockdoint
 14021                                  ; ---------------------------------------------------------------------------
 14022                                  
 14023                                  doblocklast:				
 14024 0000162E 88C4                    		mov	ah, al
 14025 00001630 50                      		push	ax
 14026                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 14027 00001631 E82CFE                  		call	doint
 14028 00001634 727E                    		jb	short bad13	; something happened, bye!
 14029 00001636 58                      		pop	ax
 14030 00001637 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 14031                                  					; decrement by the successful operation
 14032 0000163A 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 14033 0000163C 00E7                    		add	bh, ah		; advance dma addres
 14034 0000163E 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 14035 00001640 38C4                    		cmp	ah, al		; check	the previous value
 14036 00001642 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 14037                                  					; then we are done already.
 14038 00001644 28E0                    		sub	al, ah		; otherwise,
 14039                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 14040 00001646 E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 14041 00001649 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 14042                                  ; ---------------------------------------------------------------------------
 14043                                  
 14044                                  bufferx:				
 14045 0000164B 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 14046                                  					; set up head number
 14047                                  buffer:					
 14048 0000164E 53                      		push	bx
 14049 0000164F 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 14050 00001652 80FC03                  		cmp	ah, 3		; romwrite
 14051 00001655 7525                    		jnz	short doread	;
 14052                                  					
 14053                                  ; copy the offending sector into local buffer
 14054                                  
 14055 00001657 06                      		push	es
 14056 00001658 1E                      		push	ds
 14057 00001659 56                      		push	si
 14058 0000165A 57                      		push	di
 14059 0000165B 1E                      		push	ds		; exchange segment registers
 14060 0000165C 06                      		push	es
 14061 0000165D 1F                      		pop	ds
 14062 0000165E 07                      		pop	es
 14063 0000165F BF[4E01]                		mov	di, disksector	; where to move
 14064 00001662 57                      		push	di		; save it
 14065 00001663 89DE                    		mov	si, bx		; source
 14066 00001665 E856FD                  		call	move_sector	; move sector into local buffer
 14067 00001668 5B                      		pop	bx		; new transfer address
 14068                                  					; (es:bx = Bios_Data:diskbuffer)
 14069 00001669 5F                      		pop	di		; restore caller's di & si
 14070 0000166A 5E                      		pop	si
 14071 0000166B 1F                      		pop	ds		; restore Bios_Data
 14072                                  
 14073                                  ; see if we are wrapping around a track or head
 14074                                  
 14075 0000166C B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 14076                                  					; get drive number
 14077 0000166E 8A5608                  		mov	dl, [bp+8]
 14078 00001671 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 14079                                  					;
 14080                                  					; ah is	function
 14081                                  					; al is	1 for single sector transfer
 14082                                  					; es:bx	is local transfer addres
 14083                                  					; cx is	track/sector number
 14084                                  					; dx is	head/drive number
 14085                                  					; si,di	unchanged
 14086 00001674 E8E9FD                  		call	doint
 14087 00001677 07                      		pop	es		; restore caller's dma segment
 14088 00001678 723A                    		jb	short bad13	; go clean up
 14089 0000167A EB22                    		jmp	short dotail
 14090                                  ; ---------------------------------------------------------------------------
 14091                                  
 14092                                  ; reading a sector. do int first, then move things around
 14093                                  
 14094                                  doread:					
 14095 0000167C 06                      		push	es
 14096 0000167D 53                      		push	bx
 14097 0000167E 1E                      		push	ds		; es = Bios_Code
 14098 0000167F 07                      		pop	es
 14099 00001680 BB[4E01]                		mov	bx, disksector
 14100 00001683 B001                    		mov	al, 1
 14101 00001685 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 14102                                  					; get drive number
 14103 00001688 E84EFD                  		call	check_wrap	;
 14104                                  					; ah = function
 14105                                  					; al = 1 for single sector
 14106                                  					; es:bx	points to local	buffer
 14107                                  					; cx, dx are track/sector, head/drive
 14108 0000168B E8D2FD                  		call	doint
 14109 0000168E 5B                      		pop	bx
 14110 0000168F 07                      		pop	es
 14111 00001690 7222                    		jb	short bad13
 14112 00001692 56                      		push	si
 14113 00001693 57                      		push	di
 14114 00001694 89DF                    		mov	di, bx
 14115 00001696 BE[4E01]                		mov	si, disksector
 14116 00001699 E822FD                  		call	move_sector
 14117 0000169C 5F                      		pop	di
 14118 0000169D 5E                      		pop	si
 14119                                  
 14120                                  ; note the fact that we've done 1 more sector
 14121                                  
 14122                                  dotail:					
 14123 0000169E 5B                      		pop	bx		; retrieve new dma area
 14124 0000169F 80C702                  		add	bh, 2		; advance over sector
 14125 000016A2 41                      		inc	cx
 14126 000016A3 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 14127 000016A6 F8                      		clc
 14128 000016A7 FEC8                    		dec	al
 14129 000016A9 7409                    		jz	short bad13	; no more i/o
 14130                                  
 14131                                  ; see if we wrap around a track or head boundary with starting sector
 14132                                  ; we already have the correct head number to pass to check_wrap
 14133                                  
 14134 000016AB 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 14135 000016AE E828FD                  		call	check_wrap
 14136 000016B1 E8ACFD                  		call	doint
 14137                                  
 14138                                  ; we are done. ax has the final code; we throw away what we got before
 14139                                  
 14140                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 14141                                  ;	   or we've finished. If carry is set now, our only
 14142                                  ;	   hope for salvation is that it was a read operation
 14143                                  ;	   and the error code is ECC error. In that case, we'll
 14144                                  ;	   just pop the registers and go do the old ECC thing.
 14145                                  ;	   When the DMA error that got us here in the first
 14146                                  ;	   place occurs, it'll handle it.
 14147                                  
 14148                                  bad13:					
 14149 000016B4 89EC                    		mov	sp, bp
 14150 000016B6 5D                      		pop	bp
 14151 000016B7 5B                      		pop	bx
 14152 000016B8 5B                      		pop	bx
 14153 000016B9 59                      		pop	cx
 14154 000016BA 5A                      		pop	dx
 14155 000016BB 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 14156 000016BD E935FE                  		jmp	ret_from_i13	; non-error exit
 14157                                  ; ---------------------------------------------------------------------------
 14158                                  
 14159                                  xgoterr13_xxxx:				
 14160 000016C0 E958FE                  		jmp	goterr13_xxxx
 14161                                  
 14162                                  ; ---------------------------------------------------------------------------
 14163                                  		; 10/12/2022
 14164                                  		;db 	0
 14165                                  ; ---------------------------------------------------------------------------
 14166                                  
 14167                                  ;Bios_Code ends
 14168                                  
 14169                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14170                                  
 14171                                  ;-----------------------------------------------------------------------------
 14172                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 14173                                  ;-----------------------------------------------------------------------------
 14174                                  ; 17/03/2019 - Retro DOS v4.0
 14175                                  
 14176                                  		; 19/10/2022
 14177                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 14178 000016C3 8A26[7500]              		mov	ah, [drvmax]
 14179 000016C7 BF[8706]                		mov	di, dskdrvs
 14180 000016CA 1E                      		push	ds		; pass result in es:di
 14181 000016CB 07                      		pop	es
 14182 000016CC E9E9EE                  		jmp	SetPtrSav
 14183                                  
 14184                                  ; =============== S U B	R O U T	I N E =======================================
 14185                                  
 14186                                  ;---------------------------------------------------------------------------
 14187                                  ; install_bds installs a bds at location es:di into the current linked list of
 14188                                  ; bds maintained by this device driver. it places the bds at the end of the
 14189                                  ; list. Trashes (at least) ax, bx, di, si
 14190                                  ;---------------------------------------------------------------------------
 14191                                  
 14192                                  install_bds:		
 14193 000016CF 1E                      		push	ds		; save Bios_Data segment
 14194 000016D0 BE[1901]                		mov	si, start_bds	; beginning of chain
 14195                                  
 14196                                  		; ds:si now points to link to first bds
 14197                                  		; assume bds list is non-empty
 14198                                  loop_next_bds:				
 14199 000016D3 C534                    		lds	si, [si]	; [si+BDS.link]
 14200                                  					; fetch	next bds
 14201 000016D5 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14202 000016D9 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 14203                                  					; drive	with new one?
 14204 000016DC 7518                    		jnz	short next_bds
 14205 000016DE B310                    		mov	bl, 10h		; fi_am_mult
 14206 000016E0 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14207                                  					; set both of them to i_am_mult	if so
 14208 000016E4 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 14209 000016E7 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 14210                                  					; we don't own it
 14211 000016EC 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 14212                                  					; determine if changeline available
 14213 000016EF 80E302                  		and	bl, 2		; fchangeline
 14214 000016F2 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14215                                  next_bds:				
 14216                                  		; 02/09/2023 (PCDOS 7.1)
 14217 000016F6 B8FFFF                  		mov	ax, 0FFFFh	; -1
 14218 000016F9 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 14219                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 14220                                  					; are we at end	of list?
 14221 000016FB 75D6                    		jnz	short loop_next_bds
 14222 000016FD 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 14223                                  					; install bds
 14224 00001700 893C                    		mov	[si], di
 14225 00001702 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 14226                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 14227                                  					; set next pointer to null
 14228 00001705 1F                      		pop	ds
 14229                                  
 14230                                  ; 16/10/2022 (MSDOS 6.0 Code)
 14231                                  ;
 14232                                  ; **** If the new drive has a higher EOT value, we must alter the
 14233                                  ;      'eot' variable appropriately.
 14234                                  ;
 14235                                  ;		; 01/06/2019
 14236                                  ;		;mov	al,[es:di+52]
 14237                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 14238                                  ;
 14239                                  ;		cmp	al,[eot]
 14240                                  ;		jbe	short _eot_ok
 14241                                  ;		mov	[eot],al
 14242                                  
 14243 00001706 C3                      		retn
 14244                                  
 14245                                  ; ---------------------------------------------------------------------------
 14246                                  
 14247                                  ; 17/10/2022
 14248                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 14249                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 14250                                  ; 09/12/2022
 14251                                  DRVLET equ drvlet
 14252                                  SNGMSG equ sngmsg
 14253                                  
 14254                                  ; 16/10/2022
 14255                                  
 14256                                  ;---------------------------------------------------------------------------
 14257                                  ;  ask to swap the disk in drive a:
 14258                                  ;	es:di -> bds
 14259                                  ;	ds -> Bios_Data
 14260                                  ;---------------------------------------------------------------------------
 14261                                  
 14262                                  		; 19/10/2022
 14263 00001707 F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 14264                                  		;test	ds:IsWin386, 1	; Is win386 present?
 14265 0000170C 7405                    		jz	short no_win386	; no, skip SetFocus
 14266                                  		
 14267                                  		; set focus to the correct VM
 14268                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 14269                                  		; 17/10/2022
 14270 0000170E 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 14271                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 14272                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 14273                                  no_win386:				
 14274 00001713 51                      		push	cx
 14275 00001714 52                      		push	dx
 14276 00001715 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 14277                                  					; get the drive	letter
 14278                                  
 14279                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 14280                                  ;           then existing dsk is drive A & vice versa
 14281                                  
 14282 00001719 88D6                    		mov	dh, dl
 14283 0000171B 80F601                  		xor	dh, 1
 14284 0000171E 29C9                    		sub	cx, cx		; nobody has handled swap disk
 14285 00001720 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 14286                                  					; broad	cast code for swap disk
 14287                                  					; Broadcast it
 14288 00001723 CD2F                    		int	2Fh	
 14289 00001725 41                      		inc	cx		; cx == -1 ?
 14290 00001726 741E                    		jz	short swpdsk9	; somebody has handled it
 14291                                  
 14292                                  ; using a different drive in a one drive system so request the user change disks
 14293                                  
 14294 00001728 80C241                  		add	dl, 'A'
 14295                                  		; 17/10/2022
 14296 0000172B 2E8816[6517]            		mov	[cs:DRVLET], dl
 14297                                  		; 16/10/2022
 14298                                  		;;mov	byte [cs:drvlet], dl
 14299                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 14300                                  					; 0070h:3D54h =	2C7h:17E4h
 14301 00001730 BE[4917]                		mov	si, SNGMSG
 14302                                  		;mov	si, 17C8h	; sngmsg
 14303                                  					; 0070h:3D38h =	2C7h:17C8h
 14304 00001733 53                      		push	bx
 14305 00001734 2E                      		cs
 14306 00001735 AC                      		lodsb			; get the next character of the message
 14307                                  		;lods	byte ptr cs:[si]
 14308                                  wrmsg_loop:				
 14309 00001736 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 14310                                  					; AL = character to display
 14311 00001738 2E                      		cs
 14312 00001739 AC                      		lodsb
 14313                                  		;lods	byte ptr cs:[si] ; cs lodsb
 14314                                  					; get the next character of the	message
 14315 0000173A 08C0                    		or	al, al
 14316 0000173C 75F8                    		jnz	short wrmsg_loop
 14317 0000173E E8C6EA                  		call	con_flush	; flush out keyboard queue
 14318                                  					; call rom-bios
 14319 00001741 30E4                    		xor	ah, ah
 14320 00001743 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 14321                                  					; Return: AH = scan code, AL = character
 14322 00001745 5B                      		pop	bx
 14323                                  swpdsk9:				
 14324 00001746 5A                      		pop	dx
 14325 00001747 59                      		pop	cx
 14326 00001748 C3                      		retn
 14327                                  
 14328                                  ; ---------------------------------------------------------------------------
 14329                                  
 14330                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14331                                  
 14332                                  ;--------------------------------------------------------
 14333                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 14334                                  ;--------------------------------------------------------
 14335                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 14336                                  ;--------------------------------------------------------
 14337                                  ; 17/03/2019 - Retro DOS v4.0
 14338                                  
 14339                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 14340 00001749 0D0A                    sngmsg:		db 0Dh,0Ah
 14341 0000174B 496E73657274206469-     		db 'Insert diskette for drive '
 14341 00001754 736B6574746520666F-
 14341 0000175D 7220647269766520   
 14342                                  
 14343                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 14344 00001765 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 14344 0000176E 65737320616E79206B-
 14344 00001777 6579207768656E2072-
 14344 00001780 656164790D0A       
 14345 00001786 0A00                    		db 0Ah,0
 14346                                  
 14347                                  ; =============== S U B	R O U T	I N E =======================================
 14348                                  
 14349                                  ;---------------------------------------------------------------------------
 14350                                  ; input : es:di points to current bds for drive.
 14351                                  ; return : zero set if no open files
 14352                                  ;	   zero reset if open files
 14353                                  ;---------------------------------------------------------------------------
 14354                                  
 14355                                  chkopcnt:		
 14356 00001788 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 14357 0000178D C3                      		retn
 14358                                  
 14359                                  ; =============== S U B	R O U T	I N E =======================================
 14360                                  
 14361                                  ;---------------------------------------------------------------------------
 14362                                  ; at media check time, we need to really get down and check what the change is.
 14363                                  ; this is guaranteed to be expensive.
 14364                                  ;
 14365                                  ;	es:di -> bds, ds -> Bios_Data
 14366                                  ;---------------------------------------------------------------------------
 14367                                  
 14368                                  mediacheck:	
 14369 0000178E E8A9F0                  		call	checksingle	; make sure correct disk is in place
 14370 00001791 31F6                    		xor	si, si
 14371 00001793 E84D01                  		call	haschange
 14372 00001796 742F                    		jz	short mediaret
 14373 00001798 E83C01                  		call	checkromchange
 14374 0000179B 752B                    		jnz	short mediadovolid
 14375 0000179D 50                      		push	ax
 14376 0000179E 52                      		push	dx
 14377 0000179F 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14378                                  					; set logical drive number
 14379 000017A3 B416                    		mov	ah, 16h
 14380 000017A5 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 14381                                  					; DL = drive to	check
 14382                                  					; Return: AH = disk change status
 14383 000017A7 5A                      		pop	dx
 14384 000017A8 58                      		pop	ax
 14385 000017A9 721D                    		jb	short mediadovolid
 14386 000017AB BE0100                  		mov	si, 1		; signal no change
 14387                                  
 14388                                  ; there are some drives with changeline that "lose" the changeline indication
 14389                                  ; if a different drive is accessed after the current one. in order to avoid
 14390                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 14391                                  ; is not active and we are accessing a different drive from the last one.
 14392                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 14393                                  ; status.
 14394                                  		; 19/10/2022
 14395 000017AE 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 14396 000017B2 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 14397                                  					; (If the last drive accessed is not current drive
 14398                                  					; media	change status may be incorrect.	So,
 14399                                  					; "I don't now" will be returned even if it is indicated
 14400                                  					; as media is not changed.)
 14401 000017B6 740F                    		jz	short mediaret	; (same	drive,
 14402                                  					; media	changeline indication is reliable)
 14403                                  
 14404                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14405                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14406                                  ; "not changed" here since the 2 second test said no change.)
 14407                                  
 14408 000017B8 50                      		push	ax
 14409 000017B9 51                      		push	cx
 14410 000017BA 52                      		push	dx
 14411 000017BB E895ED                  		call	Check_Time_Of_Access
 14412 000017BE 5A                      		pop	dx
 14413 000017BF 59                      		pop	cx
 14414 000017C0 58                      		pop	ax
 14415 000017C1 09F6                    		or	si, si
 14416 000017C3 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14417                                  					; (volume id will be checked)
 14418 000017C5 31F6                    		xor	si, si		; return "i don't know"
 14419                                  mediaret:				
 14420 000017C7 C3                      		retn
 14421                                  ; ---------------------------------------------------------------------------
 14422                                  
 14423                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14424                                  ; because this may be different since we only set medbyt when doing a read
 14425                                  ; or write.
 14426                                  
 14427                                  mediadovolid:				
 14428 000017C8 E82DEE                  		call	GetBp		; build	a new bpb in current bds
 14429 000017CB 72FA                    		jb	short mediaret
 14430 000017CD E82D00                  		call	check_vid
 14431 000017D0 73F5                    		jnb	short mediaret
 14432 000017D2 E9F8F3                  		jmp	maperror	; fix up al for	return to dos
 14433                                  ; ---------------------------------------------------------------------------
 14434                                  
 14435                                  ; simple, quick check of latched change. if no indication, then return
 14436                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14437                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14438                                  ; dos.
 14439                                  ;
 14440                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14441                                  
 14442                                  ;	call with es:di -> bds, ds -> Bios_Data
 14443                                  ;	***** warning:  this routine will return one level up on the stack
 14444                                  ;			if an error occurs!
 14445                                  
 14446                                  checklatchio:	
 14447                                  
 14448                                  ; if returning fake bpb then assume the disk has not changed
 14449                                  			
 14450 000017D5 E8B0FF                  		call	chkopcnt
 14451 000017D8 741B                    		jz	short checkret	; done if zero
 14452                                  
 14453                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14454                                  
 14455 000017DA E8FA00                  		call	checkromchange
 14456 000017DD 7416                    		jz	short checkret
 14457                                  
 14458                                  ; we now see that a change line has been seen in the past. let's do the
 14459                                  ; expensive verification.
 14460                                  
 14461 000017DF E816EE                  		call	GetBp		; build	bpb in current bds
 14462 000017E2 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14463 000017E4 E81600                  		call	check_vid
 14464 000017E7 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14465 000017E9 09F6                    		or	si, si		; is changed for sure?
 14466 000017EB 7908                    		jns	short checkret
 14467 000017ED E87B00                  		call	returnvid
 14468                                  checklatchret:				
 14469 000017F0 E8DAF3                  		call	maperror	; fix up al for	return to dos
 14470                                  ret_no_error_map:			
 14471 000017F3 F9                      		stc
 14472 000017F4 5E                      		pop	si		; pop off return address
 14473                                  checkret:				
 14474 000017F5 C3                      		retn
 14475                                  ; ---------------------------------------------------------------------------
 14476                                  
 14477                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14478                                  ; only if there was a disk error. return that error code in ax.
 14479                                  ;
 14480                                  ;	called with es:di -> bds, ds -> Bios_Data
 14481                                  
 14482                                  checkfatvid:				
 14483 000017F6 E8BD01                  		call	fat_check	; check	the fat	and the	vid
 14484 000017F9 09F6                    		or	si, si
 14485 000017FB 7827                    		js	short changed_drv ;
 14486                                  
 14487                                  ; the fat was the same. fall into check_vid and check volume id.
 14488                                  
 14489                                  		; fall into check_vid
 14490                                  
 14491                                  ; =============== S U B	R O U T	I N E =======================================
 14492                                  
 14493                                  ; now with the extended boot record, the logic should be enhanced.
 14494                                  ;
 14495                                  ; if it is the extended boot record, then we check the volume serial
 14496                                  ; number instead of volume id. if it is different, then set si to -1.
 14497                                  ;
 14498                                  ; if it is same, then si= 1 (no change).
 14499                                  ;
 14500                                  ; if it is not the extended boot record, then just follows the old
 14501                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14502                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14503                                  ; should have already covered by extended boot structure checking.
 14504                                  ; so, we will return "i don't know" by setting si to 0.
 14505                                  ;
 14506                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14507                                  ; (this will be gauranteed by a successful getbp call right before this
 14508                                  ; routine.)
 14509                                  ;
 14510                                  ;	called with es:di -> bds, ds -> bds
 14511                                  
 14512                                  		; 19/10/2022
 14513                                  check_vid:
 14514                                  
 14515                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14516                                  ; boot signature. if it is set then go to do the extended
 14517                                  ; id check otherwise continue with code below
 14518                                  
 14519 000017FD 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14520                                  					; [disksector+EXT_BOOT.SIG],
 14521                                  					; EXT_BOOT_SIGNATURE
 14522 00001802 7427                    		jz	short do_ext_check_id
 14523 00001804 E8DC00                  		call	haschange
 14524 00001807 74EC                    		jz	short checkret
 14525 00001809 31F6                    		xor	si, si
 14526 0000180B 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14527                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14528 00001810 7411                    		jz	short checkfatret ; don't read vol id
 14529                                  					; if not fat system
 14530 00001812 E8EE00                  		call	read_volume_id
 14531 00001815 720C                    		jb	short checkfatret
 14532 00001817 E89201                  		call	check_volume_id
 14533 0000181A BEFFFF                  		mov	si, 0FFFFh	; -1
 14534                                  					; definitely changed
 14535 0000181D 7505                    		jnz	short changed_drv
 14536                                  
 14537 0000181F 46                      		inc	si		; not changed
 14538                                  vid_no_changed:				
 14539 00001820 E8BA00                  		call	resetchanged
 14540                                  		; 12/12/2022
 14541                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14542                                  		;clc
 14543                                  checkfatret:				
 14544 00001823 C3                      		retn
 14545                                  ; ---------------------------------------------------------------------------
 14546                                  
 14547                                  		; 12/12/2022
 14548                                  changed_drv:
 14549 00001824 F8                      		clc			; cas -- return	no error
 14550 00001825 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14551                                  					; ensure that we ask rom for media
 14552 0000182A C3                      		retn			; check	next time round
 14553                                  ; ---------------------------------------------------------------------------
 14554                                  
 14555                                  ; extended id check
 14556                                  
 14557                                  ; 16/10/2022
 14558                                  
 14559                                  ; the code to check extended id is basically a check to see if the
 14560                                  ; volume serial number is still the same. the volume serial number
 14561                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14562                                  ; ds:di points to the bds of the drive under consideration.
 14563                                  ; the bds has fields containing the high and low words 
 14564                                  ; of the volume serial number of the media in the drive.
 14565                                  ; compare these fields to the fields mentioned above. if these fields
 14566                                  ; do not match the media has changed and so we should jump to the code
 14567                                  ; starting at ext_changed else return "i don't know" status
 14568                                  ; in the register used for the changeline status and continue executing
 14569                                  ; the code given below. for temporary storage use the register which
 14570                                  ; has been saved and restored around this block.
 14571                                  ;
 14572                                  ; bds fields in inc\msbds.inc
 14573                                  
 14574                                  		; 19/10/2022
 14575                                  do_ext_check_id:
 14576 0000182B 50                      		push	ax
 14577                                  		;mov	ax, word ptr ds:disksector+27h
 14578                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14579 0000182C A1[7501]                		mov	ax, [disksector+27h]
 14580                                  		; 02/09/2023
 14581 0000182F 31F6                    		xor	si, si ; 0
 14582 00001831 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14583 00001835 750C                    		jnz	short ext_changed
 14584 00001837 A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14585 0000183A 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14586 0000183E 7503                    		jnz	short ext_changed
 14587                                  		;xor	si, si		; 0
 14588                                  					; don't know
 14589 00001840 58                      		pop	ax
 14590 00001841 EBDD                    		jmp	short vid_no_changed
 14591                                  					; reset the flag
 14592                                  ; ---------------------------------------------------------------------------
 14593                                  
 14594                                  ext_changed:
 14595 00001843 58                      		pop	ax
 14596                                  		; 02/09/2023
 14597 00001844 4E                      		dec	si ; mov si, 0FFFFh ; -1
 14598                                  		;mov	si, 0FFFFh	; -1
 14599                                  					; disk changed!
 14600                                  		; 12/12/2022
 14601                                  		; ('changed_drv' clears cf)
 14602                                  		;clc
 14603 00001845 EBDD                    		jmp	short changed_drv
 14604                                  
 14605                                  ; ---------------------------------------------------------------------------
 14606                                  
 14607                                  ; at i/o time, we detected the error. now we need to determine whether the
 14608                                  ; media was truly changed or not. we return normally if media change unknown.
 14609                                  ; and we pop off the call and jmp to harderr if we see an error.
 14610                                  ;
 14611                                  ; es:di -> bds
 14612                                  
 14613                                  checkio:				
 14614 00001847 80FC06                  		cmp	ah, 6
 14615 0000184A 75D7                    		jnz	short checkfatret
 14616 0000184C E839FF                  		call	chkopcnt
 14617 0000184F 74D2                    		jz	short checkfatret
 14618 00001851 E8A4ED                  		call	GetBp
 14619 00001854 7212                    		jb	short no_error_map
 14620 00001856 E89DFF                  		call	checkfatvid
 14621 00001859 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14622 0000185B 09F6                    		or	si, si		; is changed for sure?
 14623 0000185D 7802                    		js	short checkioerr ; yes changed
 14624 0000185F 45                      		inc	bp		; allow	a retry
 14625 00001860 C3                      		retn
 14626                                  ; ---------------------------------------------------------------------------
 14627                                  
 14628                                  checkioerr:				
 14629 00001861 E80700                  		call	returnvid
 14630                                  
 14631                                  checkioret:				
 14632 00001864 F9                      		stc			; make sure carry gets passed through
 14633 00001865 E915F3                  		jmp	harderr
 14634                                  ; ---------------------------------------------------------------------------
 14635                                  
 14636                                  no_error_map:				
 14637 00001868 E915F3                  		jmp	harderr2
 14638                                  
 14639                                  ; =============== S U B	R O U T	I N E =======================================
 14640                                  
 14641                                  ; return vid sets up the vid for a return to dos.
 14642                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14643                                  ;  **** trashes si! ****
 14644                                  
 14645                                  returnvid:		
 14646 0000186B BE1600                  		mov	si, 22		; extra
 14647                                  					; offset into pointer to return	value
 14648 0000186E E80700                  		call	vid_into_packet
 14649 00001871 B406                    		mov	ah, 6
 14650 00001873 F9                      		stc
 14651 00001874 C3                      		retn
 14652                                  
 14653                                  ; ---------------------------------------------------------------------------
 14654                                  
 14655                                  ; moves the pointer to the volid for the drive into the original request packet
 14656                                  ; no attempt is made to preserve registers.
 14657                                  ;
 14658                                  ; assumes es:di -> bds
 14659                                  ; **trashes si**
 14660                                  
 14661                                  media_set_vid:				
 14662 00001875 BE0F00                  		mov	si, 15		; trans+1
 14663                                  					; return the value here	in packet
 14664                                  
 14665                                  		; fall into vid_into_packet
 14666                                  
 14667                                  ; =============== S U B	R O U T	I N E =======================================
 14668                                  
 14669                                  ; return pointer to vid in bds at es:di in packet[si]
 14670                                  
 14671                                  		; 19/10/2022
 14672                                  vid_into_packet:
 14673 00001878 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14674 00001879 C51E[1200]              		lds	bx, [ptrsav]
 14675 0000187D 83C74B                  		add	di, 75		; BDS.volid
 14676 00001880 8938                    		mov	[bx+si], di
 14677 00001882 83EF4B                  		sub	di, 75		; BDS.volid
 14678 00001885 8C4002                  		mov	[bx+si+2], es
 14679 00001888 1F                      		pop	ds
 14680                                  dofloppy:	; 18/12/2022
 14681 00001889 C3                      		retn
 14682                                  
 14683                                  ; ---------------------------------------------------------------------------
 14684                                  
 14685                                  ;----------------------------------------------------------------------------
 14686                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14687                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14688                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14689                                  ;   of getbp. for 3.5" media, we just return.
 14690                                  ;
 14691                                  ;   inputs:	es:di point to correct bds for this drive
 14692                                  ;		ah has media byte
 14693                                  ;
 14694                                  ;   outputs:	carry clear
 14695                                  ;		    no registers modified
 14696                                  ;		carry set
 14697                                  ;		    al = sectors/fat
 14698                                  ;		    bh = number of root directory entries
 14699                                  ;		    bl = sectors per track
 14700                                  ;		    cx = number of sectors
 14701                                  ;		    dh = sectors per allocation unit
 14702                                  ;		    dl = number of heads
 14703                                  ;
 14704                                  ;----------------------------------------------------------------------------
 14705                                  
 14706                                  hidensity:
 14707                                  
 14708                                  ; check for correct drive
 14709                                  		
 14710                                  		; 12/12/2022
 14711 0000188A 26F6452302              		test	byte [es:di+23h], 2		
 14712                                  		;test	word [es:di+23h], 2 ; is it special?	
 14713                                  					; [es:di+BDS.flags], fchangeline
 14714 0000188F 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14715                                  
 14716                                  ; we have a media byte that is pretty complex. examine drive information
 14717                                  ; table to see what kind it is.
 14718                                  
 14719 00001891 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14720 00001896 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14721                                  					; yes, use fatid...
 14722                                  ; 96 tpi drive?
 14723 00001898 80FCF9                  		cmp	ah, 0F9h
 14724 0000189B 75EC                    		jnz	short dofloppy
 14725                                  
 14726                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14727                                  ;------ a 720K diskette
 14728                                  
 14729                                  		; 02/09/2023 (PCDOS 7.1)
 14730 0000189D 268A4522                		mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 14731 000018A1 3C07                    		cmp	al, 7
 14732                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14733                                  					; ffOther
 14734 000018A3 7413                    		jz	short Is720K
 14735 000018A5 3C09                    		cmp	al, 9
 14736                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14737                                  					; ff288
 14738 000018A7 740F                    		jz	short Is720K
 14739 000018A9 B007                    		mov	al, 7		; seven	sectors	/ fat
 14740 000018AB BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14741                                  					; 224 root dir entries
 14742                                  					; & 0Fh sector max
 14743 000018AE B96009                  		mov	cx, 2400	; 80*15*2
 14744                                  					; 80 tracks, 15 sectors/track,
 14745                                  					; 2 sides
 14746                                  		; 02/09/2023
 14747 000018B1 5A                      		pop	dx		; pop off return address
 14748 000018B2 BA0201                  		mov	dx, 258		; 1*256+2
 14749                                  					; sectors/allocation unit
 14750                                  					; & head max
 14751                                  		;add	sp, 2		; pop off return address
 14752 000018B5 E9B2ED                  		jmp	Has1		; return to tail of getbp
 14753                                  ; ---------------------------------------------------------------------------
 14754                                  
 14755                                  Is720K:
 14756                                  		; 02/09/2023
 14757 000018B8 5B                      		pop	bx		; pop off return address
 14758                                  		;add	sp, 2		; pop off return address
 14759 000018B9 E975ED                  		jmp	Has720K		; return to 720K code
 14760                                  ; ---------------------------------------------------------------------------
 14761                                  
 14762                                  		; 18/12/2022
 14763                                  ;dofloppy:				
 14764                                  		;retn
 14765                                  
 14766                                  ; =============== S U B	R O U T	I N E =======================================
 14767                                  
 14768                                  ; 16/10/2022
 14769                                  
 14770                                  ;---------------------------------------------------------------------------
 14771                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14772                                  ;		   essentially used to indicate changeline, or format.
 14773                                  ;
 14774                                  ;   inputs:	dl contains physical drive number
 14775                                  ;		bx contains bits to set in the flag field in the bdss
 14776                                  ;   outputs:	none
 14777                                  ;   registers modified: flags
 14778                                  ;
 14779                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14780                                  ;
 14781                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14782                                  ;---------------------------------------------------------------------------
 14783                                  
 14784                                  set_changed_dl:	
 14785 000018BC 06                      		push	es
 14786 000018BD 57                      		push	di
 14787                                  		;les	di, ds:start_bds
 14788                                  		; 19/10/2022
 14789 000018BE C43E[1901]              		les	di, [start_bds]
 14790                                  
 14791                                  ; note: we assume that the list is non-empty
 14792                                  
 14793                                  scan_bds:				
 14794 000018C2 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14795 000018C6 7504                    		jnz	short get_next_bds
 14796                                  
 14797                                  ; someone may complain, but this *always* must be done when a disk change is
 14798                                  ; noted. there are *no* other compromising circumstances.
 14799                                  
 14800 000018C8 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14801                                  					; signal change	on other drive
 14802                                  get_next_bds:				
 14803 000018CC 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14804                                  					; go to	next bds
 14805 000018CF 83FFFF                  		cmp	di, 0FFFFh
 14806 000018D2 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14807 000018D4 5F                      		pop	di
 14808 000018D5 07                      		pop	es
 14809 000018D6 C3                      		retn
 14810                                  
 14811                                  ; =============== S U B	R O U T	I N E =======================================
 14812                                  
 14813                                  ;---------------------------------------------------------------------------
 14814                                  ; checkromchange - see if external program has diddled rom change line.
 14815                                  ;
 14816                                  ;   inputs:	es:di points to current bds.
 14817                                  ;   outputs:	zero set - no change
 14818                                  ;		zero reset - change
 14819                                  ;   registers modified: none
 14820                                  ;---------------------------------------------------------------------------
 14821                                  
 14822                                  checkromchange:	
 14823                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14824                                  		; 10/12/2022
 14825 000018D7 26F6452340              		test	byte [es:di+23h], 40h
 14826                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14827                                  					; fchanged
 14828 000018DC C3                      		retn
 14829                                  
 14830                                  ; =============== S U B	R O U T	I N E =======================================
 14831                                  
 14832                                  ;---------------------------------------------------------------------------
 14833                                  ; resetchanged - restore value of change line
 14834                                  ;
 14835                                  ;   inputs:	es:di points to current bds
 14836                                  ;   outputs:	none
 14837                                  ;   registers modified: none
 14838                                  ;---------------------------------------------------------------------------
 14839                                  
 14840                                  resetchanged:	
 14841                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14842                                  		; 10/12/2022
 14843 000018DD 26806523BF              		and	byte [es:di+23h], 0BFh
 14844                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14845                                  					; ~fchanged
 14846 000018E2 C3                      		retn
 14847                                  
 14848                                  ; =============== S U B	R O U T	I N E =======================================
 14849                                  
 14850                                  ;---------------------------------------------------------------------------
 14851                                  ; haschange - see if drive can supply change line
 14852                                  ;
 14853                                  ;   inputs:	es:di points to current bds
 14854                                  ;   outputs:	zero set - no change line available
 14855                                  ;		zero reset - change line available
 14856                                  ;   registers modified: none
 14857                                  ;---------------------------------------------------------------------------
 14858                                  
 14859                                  haschange:
 14860                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14861                                  		; 10/12/2022
 14862 000018E3 26F6452302              		test	byte [es:di+23h], 2		
 14863                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14864                                  					; fchangeline
 14865 000018E8 C3                      		retn
 14866                                  
 14867                                  ; ---------------------------------------------------------------------------
 14868                                  
 14869                                  ; 16/10/2022
 14870                                  
 14871                                  ;-------------------------------------------------------------------------
 14872                                  ; set_volume_id      -	main routine, calls other routines.
 14873                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14874                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14875                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14876                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14877                                  ;-------------------------------------------------------------------------
 14878                                  
 14879                                  ; set_volume_id
 14880                                  ;   if drive has changeline support, read in and set the volume_id
 14881                                  ; and the last fat_id byte. if no change line support then do nothing.
 14882                                  ;
 14883                                  ;   on entry:
 14884                                  ;	es:di points to the bds for this disk.
 14885                                  ;	ah contains media byte
 14886                                  ;
 14887                                  ;   on exit:
 14888                                  ;	carry clear:
 14889                                  ;	   successful call
 14890                                  ;	carry set
 14891                                  ;	   error and ax has error code
 14892                                  
 14893                                  set_volume_id:				
 14894 000018E9 52                      		push	dx		; save registers
 14895 000018EA 50                      		push	ax
 14896 000018EB E8F5FF                  		call	haschange	; does drive have changeline support?
 14897 000018EE 740B                    		jz	short setvret	; no, get out
 14898 000018F0 E81000                  		call	read_volume_id
 14899 000018F3 7209                    		jb	short seterr
 14900 000018F5 E8A800                  		call	transfer_volume_id ; copy the volume id	to special drive
 14901 000018F8 E8E2FF                  		call	resetchanged	; restore value	of change line
 14902                                  setvret:				
 14903                                  		; 10/12/2022
 14904                                  		; cf = 0
 14905                                  		;clc			; no error, clear carry flag
 14906 000018FB 58                      		pop	ax		; restore registers
 14907 000018FC 5A                      		pop	dx
 14908 000018FD C3                      		retn
 14909                                  ; ---------------------------------------------------------------------------
 14910                                  
 14911                                  seterr:					
 14912 000018FE 5A                      		pop	dx		; pop stack but don't overwrite ax
 14913 000018FF 5A                      		pop	dx		; restore dx
 14914 00001900 C3                      		retn
 14915                                  ; ---------------------------------------------------------------------------
 14916 00001901 0000                    root_sec:	dw 0			; root sector #
 14917                                  
 14918                                  ; 16/10/2022
 14919                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14920                                  ; 09/12/2022
 14921                                  ROOTSEC equ root_sec
 14922                                  
 14923                                  ; =============== S U B	R O U T	I N E =======================================
 14924                                  
 14925                                  ; 16/10/2022
 14926                                  
 14927                                  ; read_volume_id read the volume id and tells if it has been changed.
 14928                                  ;
 14929                                  ;   on entry:
 14930                                  ;	es:di points to current bds for drive.
 14931                                  ;
 14932                                  ;   on exit:
 14933                                  ;	carry clear
 14934                                  ;	    si = 1  no change
 14935                                  ;	    si = 0  ?
 14936                                  ;	    si = -1 change
 14937                                  ;
 14938                                  ;	carry set:
 14939                                  ;	    error and ax has error code.
 14940                                  
 14941                                  read_volume_id:
 14942 00001903 52                      		push	dx		; preserve registers
 14943 00001904 51                      		push	cx
 14944 00001905 53                      		push	bx
 14945 00001906 50                      		push	ax
 14946 00001907 06                      		push	es		; stack the bds last
 14947 00001908 57                      		push	di
 14948 00001909 1E                      		push	ds		; point es to Bios_Data
 14949 0000190A 07                      		pop	es
 14950 0000190B BF[0909]                		mov	di, tmp_vid	; "NO NAME	 "
 14951 0000190E BE[FD08]                		mov	si, nul_vid	; "NO NAME	 "
 14952 00001911 B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14953 00001914 F3A4                    		rep movsb
 14954 00001916 5F                      		pop	di
 14955 00001917 07                      		pop	es
 14956 00001918 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14957                                  					; # of fats
 14958 0000191C 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14959                                  					; sectors / fat
 14960 00001920 F6E1                    		mul	cl		; size taken by	fats
 14961 00001922 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14962                                  					; add on reserved sectors
 14963                                  					;
 14964                                  					; ax is	now sector # (0	based)
 14965                                  		; 17/10/2022
 14966 00001926 2EA3[0119]              		mov	[cs:ROOTSEC], ax
 14967                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14968                                  					; 0070h:3EFFh =	2C7h:198Fh
 14969 0000192A 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14970                                  					; # root dir entries
 14971 0000192E B104                    		mov	cl, 4		; 16 entries/sector
 14972 00001930 D3E8                    		shr	ax, cl		; divide by 16
 14973                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 14974                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 14975 00001932 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 14976                                  next_sec:				
 14977 00001933 51                      		push	cx		; save outer loop counter
 14978 00001934 2EA1[0119]              		mov	ax, [cs:ROOTSEC]
 14979                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14980                                  					; get sector #
 14981 00001938 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14982                                  					; sectors / track
 14983 0000193C 31D2                    		xor	dx, dx
 14984 0000193E F7F1                    		div	cx
 14985                                  
 14986                                  ; set up registers for call to read_sector
 14987                                  
 14988 00001940 42                      		inc	dx		; dx= sectors into track
 14989                                  					; ax= track count from 0
 14990 00001941 88D1                    		mov	cl, dl		; sector to read
 14991 00001943 31D2                    		xor	dx, dx
 14992 00001945 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14993                                  					; # heads on this disc
 14994 00001949 88D6                    		mov	dh, dl		; head number
 14995 0000194B 88C5                    		mov	ch, al		; track	#
 14996 0000194D E828EE                  		call	read_sector	; get first sector of the root directory,
 14997                                  					; ds:bx	-> directory sector
 14998 00001950 723F                    		jb	short readviderr
 14999 00001952 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 15000 00001955 B008                    		mov	al, 8		; volume label bit
 15001                                  fvid_loop:				
 15002                                  		; 02/09/2023 (PCDOS 7.1)
 15003 00001957 382F                    		cmp	[bx], ch ; 0
 15004                                  		;cmp	byte [bx], 0 ; end of dir?
 15005 00001959 7433                    		jz	short no_vid	; yes, no vol id
 15006 0000195B 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 15007 0000195E 7405                    		jz	short ent_loop	; yes, skip
 15008 00001960 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 15009 00001963 750F                    		jnz	short found_vid	; jmp yes
 15010                                  ent_loop:				
 15011 00001965 83C320                  		add	bx, 32		; add length of	directory entry
 15012 00001968 E2ED                    		loop	fvid_loop
 15013 0000196A 59                      		pop	cx		; outer loop
 15014 0000196B 2EFF06[0119]            		inc	word [cs:ROOTSEC]
 15015                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 15016                                  					; next sector
 15017 00001970 E2C1                    		loop	next_sec	; continue
 15018                                  notfound:
 15019                                  		; 02/09/2023
 15020                                  		;xor	si, si
 15021 00001972 EB13                    		jmp	short fvid_ret
 15022                                  ; ---------------------------------------------------------------------------
 15023                                  
 15024                                  found_vid:
 15025                                  		; 02/09/2023
 15026                                  		; cf = 0  ('test' instruction clears cf)				
 15027 00001974 59                      		pop	cx		; clean stack of outer loop counter
 15028 00001975 89DE                    		mov	si, bx		; point	to volume_id
 15029 00001977 06                      		push	es		; preserve current bds
 15030 00001978 57                      		push	di
 15031 00001979 1E                      		push	ds
 15032 0000197A 07                      		pop	es		; point es to Bios_Data
 15033 0000197B BF[0909]                		mov	di, tmp_vid	; "NO NAME	 "
 15034 0000197E B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 15035                                  					; length of string minus nul
 15036 00001981 F3A4                    		rep movsb		; mov volume label to tmp_vid
 15037                                  		;xor	al, al
 15038                                  		; 02/09/2023
 15039 00001983 91                      		xchg	ax, cx		; ax = 0
 15040 00001984 AA                      		stosb			; null terminate
 15041                                  		;;xor	si, si
 15042                                  		; 02/09/2023
 15043                                  		;xchg	ax, si		; si = 0
 15044 00001985 5F                      		pop	di		; restore current bds
 15045 00001986 07                      		pop	es
 15046                                  fvid_ret:
 15047                                  		; 02/09/2023
 15048 00001987 31F6                    		xor	si, si ; 0
 15049                                  				
 15050 00001989 58                      		pop	ax
 15051                                  		; 10/12/2022
 15052                                  		; cf = 0
 15053                                  		;clc
 15054                                  rvidret:				
 15055 0000198A 5B                      		pop	bx		; restore registers
 15056 0000198B 59                      		pop	cx
 15057 0000198C 5A                      		pop	dx
 15058 0000198D C3                      		retn
 15059                                  ; ---------------------------------------------------------------------------
 15060                                  
 15061                                  no_vid:
 15062 0000198E 59                      		pop	cx		; clean stack of outer loop counter
 15063                                  		;jmp	short notfound	; not found
 15064                                  		; 02/09/2023
 15065 0000198F EBF6                    		jmp	short fvid_ret
 15066                                  ; ---------------------------------------------------------------------------
 15067                                  
 15068                                  readviderr:				
 15069 00001991 5E                      		pop	si		; trash the outer loop counter
 15070 00001992 5E                      		pop	si		; caller's ax, return error code instead 
 15071 00001993 EBF5                    		jmp	short rvidret
 15072                                  
 15073                                  ; ---------------------------------------------------------------------------
 15074                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 15075                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 15076                                  preset_volid_addr:
 15077 00001995 BE[0909]                		mov	si, tmp_vid	; "NO NAME    "
 15078                                  		;
 15079                                  		; PCDOS 7.1
 15080                                  		;add	di, 125		; BDS.volid
 15081                                  		;mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 15082                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 15083 00001998 83C74B                  		add	di, 75		; BDS.volid
 15084 0000199B B90C00                  		mov	cx, 12		; VOLID_SIZ
 15085                                  		;
 15086 0000199E FC                      		cld
 15087 0000199F C3                      		retn
 15088                                  
 15089                                  ; =============== S U B	R O U T	I N E =======================================
 15090                                  
 15091                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 15092                                  ;
 15093                                  ; inputs:	es:di has current bds
 15094                                  ; outputs:	bds for drive has volume id from tmp
 15095                                  
 15096                                  transfer_volume_id:
 15097 000019A0 57                      		push	di		; copy the volume id from tmp to special drive
 15098 000019A1 56                      		push	si
 15099 000019A2 51                      		push	cx
 15100                                  		
 15101                                  		;mov	si, tmp_vid	; "NO NAME	 "
 15102                                  		;;add	di, BDS.volid
 15103                                  		;add	di, 75		; BDS.volid
 15104                                  		;;mov	cx, VOLID_SIZ
 15105                                  		;mov	cx, 12		; VOLID_SIZ
 15106                                  		;cld
 15107                                  		; 02/09/2023 (PCDOS 7.1)
 15108 000019A3 E8EFFF                  		call	preset_volid_addr
 15109                                  
 15110 000019A6 F3A4                    		rep movsb
 15111 000019A8 59                      		pop	cx
 15112 000019A9 5E                      		pop	si
 15113 000019AA 5F                      		pop	di
 15114 000019AB C3                      		retn
 15115                                  
 15116                                  ; =============== S U B	R O U T	I N E =======================================
 15117                                  
 15118                                  ;  check_volume_id - compare volume id in tmp area with
 15119                                  ;		     one expected for drive
 15120                                  ;
 15121                                  ;   inputs:	es:di has current bds for drive
 15122                                  ;   outputs:	zero true means it matched
 15123                                  
 15124                                  check_volume_id:
 15125 000019AC 57                      		push	di
 15126 000019AD 51                      		push	cx
 15127                                  		
 15128                                  		;mov	si, tmp_vid	; "NO NAME	 "
 15129                                  		;;add	di, BDS.volid
 15130                                  		;add	di, 75		; BDS.volid
 15131                                  		;;mov	cx, VOLID_SIZ
 15132                                  		;mov	cx, 12		; VOLID_SIZ
 15133                                  		;cld
 15134                                  		; 02/09/2023 (PCDOS 7.1)
 15135 000019AE E8E4FF                  		call	preset_volid_addr
 15136                                  
 15137 000019B1 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 15138 000019B3 59                      		pop	cx
 15139 000019B4 5F                      		pop	di
 15140 000019B5 C3                      		retn
 15141                                  
 15142                                  ; =============== S U B	R O U T	I N E =======================================
 15143                                  
 15144                                  ;   fat_check - see of the fatid has changed in the specified drive.
 15145                                  ;	      - uses the fat id obtained from the boot sector.
 15146                                  ;
 15147                                  ;   inputs:	medbyt is expected fat id
 15148                                  ;		es:di points to current bds
 15149                                  ;
 15150                                  ;   output:	si = -1 if fat id different,
 15151                                  ;		si = 0 otherwise
 15152                                  ;
 15153                                  ;   no other registers changed.
 15154                                  
 15155                                  fat_check:		
 15156 000019B6 50                      		push	ax
 15157 000019B7 31F6                    		xor	si, si		; say fat id's are same.
 15158 000019B9 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 15159 000019BC 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 15160                                  					; compare it with the bds medbyte
 15161 000019C0 7401                    		jz	short okret1	; carry	clear
 15162 000019C2 4E                      		dec	si
 15163                                  okret1:					
 15164 000019C3 58                      		pop	ax
 15165 000019C4 C3                      		retn
 15166                                  
 15167                                  ; ---------------------------------------------------------------------------
 15168                                  
 15169                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 15170                                  		;times 7 db 0
 15171                                  
 15172                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 15173                                  
 15174                                  		; 09/12/2022
 15175                                  		;times 4 db 0	; 17/10/2022
 15176                                  		;db 4 dup(0)	; times 4 db 0
 15177                                  
 15178                                  ; ---------------------------------------------------------------------------
 15179                                  
 15180                                  		; 09/12/2022
 15181                                  		;db 0
 15182                                  
 15183                                  number2div	equ ($-BCode_start)
 15184                                  number2mod	equ (number2div % 16)
 15185                                  
 15186                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 15187 000019C5 00<rep Bh>              		times (16-number2mod) db 0
 15188                                  %endif
 15189                                  
 15190                                  ;align 16
 15191                                  
 15192                                  ; 09/12/2022
 15193                                  BCODE_END	equ $ - BCode_start
 15194                                  ; 29/09/2023
 15195                                  BCODEEND:
 15196                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 15197                                  ; 13/12/2022
 15198                                  SYSINITOFFSET	equ BCODE_END
 15199                                  ; 29/09/2023
 15200                                  ;SYSINITOFFSET	equ $-$$
 15201                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 15202                                  
 15203                                  ; 28/09/2023
 15204                                  S2SIZE equ $-$$
 15205                                  
 15206                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 15207                                  
 15208                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15209                                  ; 01/05/2019 - Retro DOS v4.0 
 15210                                  ; ============================================================================
 15211                                  ; end of BIOSCODE
 15212                                  
 15213                                  ; ----------------------------------------------------------------------------
 15214                                  ; %include sysinit5.s	; 09/12/2022
 15215                                  ; ----------------------------------------------------------------------------
 15216                                  
 15217                                  ;=============================================================================
 15218                                  ; (IO.SYS) SYSINIT SEGMENT 
 15219                                  ;=============================================================================
 15220                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15221                                  
 15222                                  section .SYSINIT vstart=0
 15223                                  
 15224                                  ; ****************************************************************************
 15225                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 15226                                  ; ----------------------------------------------------------------------------
 15227                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 15228                                  ; ----------------------------------------------------------------------------
 15229                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 15230                                  ; ----------------------------------------------------------------------------
 15231                                  ; Assembler: NASM version 2.15
 15232                                  ; ----------------------------------------------------------------------------
 15233                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 15234                                  ; ----------------------------------------------------------------------------
 15235                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 15236                                  ; ----------------------------------------------------------------------------
 15237                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 15238                                  ; source code by Microsoft, 1991 
 15239                                  ; ----------------------------------------------------------------------------
 15240                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 15241                                  ; by Microsoft, 12/10/1983
 15242                                  ; ****************************************************************************
 15243                                  ; main file: 'retrodos4.s'
 15244                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 15245                                  
 15246                                  ; 21/10/2022
 15247                                  ; ----------------------------------------------------------------------------
 15248                                  ; This source code (version) is based on SYSINIT source code of disassembled
 15249                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 15250                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 15251                                  ; ----------------------------------------------------------------------------
 15252                                  ; Binary file splitter & joiner: FFSJ v3.3
 15253                                  
 15254                                  ;--------------------------------------------------------------
 15255                                  ; SYSINIT.TXT (27/01/1983)
 15256                                  ;--------------------------------------------------------------
 15257                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 15258                                  ;over  the  system  initialization  after  the  OEM  bios   has
 15259                                  ;performed any  initialization  it  needs  to  do.   Control is
 15260                                  ;transfered with a long jump to the external  variable  SYSINIT
 15261                                  ;
 15262                                  ;
 15263                                  ;   The OEM  has  the  following  variables declared external:
 15264                                  ;
 15265                                  ;   CURRENT_DOS_LOCATION    WORD
 15266                                  ;
 15267                                  ;This word  contains  the  segment  number of the DOS before it
 15268                                  ;is relocated.  The OEM bios must set this value.
 15269                                  ;
 15270                                  ;   FINAL_DOS_LOCATION      WORD
 15271                                  ;
 15272                                  ;This word contains the segment number of the DOS after SYSINIT
 15273                                  ;moves it.  The OEM bios must set this value.
 15274                                  ;
 15275                                  ;   DEVICE_LIST             DWORD
 15276                                  ;
 15277                                  ;This  double  word  pointer  points  to  the  linked  list  of
 15278                                  ;character and block device drivers.  The  OEM  must  set  this
 15279                                  ;value.
 15280                                  ;
 15281                                  ;   MEMORY_SIZE             WORD
 15282                                  ;
 15283                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 15284                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 15285                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 15286                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 15287                                  ;and read it back until it gets a mismatch.
 15288                                  ;
 15289                                  ;   DEFAULT_DRIVE           BYTE
 15290                                  ;
 15291                                  ;This is  the initial default drive when the system first comes
 15292                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 15293                                  ;it then drive a is assumed.
 15294                                  ;
 15295                                  ;   BUFFERS                 BYTE
 15296                                  ;
 15297                                  ;This is  the  default  number of buffers for the system.  This
 15298                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15299                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 15300                                  ;
 15301                                  ;   FILES                   BYTE
 15302                                  ;
 15303                                  ;This is  the  default  number  of  files for the system.  This
 15304                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15305                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 15306                                  ;
 15307                                  ;   SYSINIT                 FAR
 15308                                  ;
 15309                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 15310                                  ;this label at the end of its INIT code.
 15311                                  ;
 15312                                  ;   The OEM  has  the  following  variables declared public:
 15313                                  ;
 15314                                  ;   RE_INIT                 FAR
 15315                                  ;
 15316                                  ;This is an entry point which allows the BIOS to do some INIT
 15317                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 15318                                  ;PRESERVED.  On entry DS points to the first available memory
 15319                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 15320                                  ;prefix which represents  the  "program"  currently  running.
 15321                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 15322                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 15323                                  ;that  no  memory  is  allocated to it, it is running in free
 15324                                  ;memory.
 15325                                  ;NOTES:
 15326                                  ;     At the time this routine is called SYSINIT occupies the
 15327                                  ;highest 10K of memory ("highest" is determined by the  value
 15328                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 15329                                  ;     Since this is called AFTER DOS is initialized, you can
 15330                                  ;make system calls.  This also implies that the code for this
 15331                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 15332                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 15333                                  ;     If you don't want  anything done just set this to point
 15334                                  ;at a FAR RET instruction.
 15335                                  
 15336                                  ; ----------------------------------------------------------------------
 15337                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 15338                                  ; ----------------------------------------------------------------------
 15339                                  
 15340                                  ;include version.inc
 15341                                  ; ----------------------------------------------------------------------
 15342                                  
 15343                                  ;FALSE   EQU     0
 15344                                  ;TRUE    EQU     0FFFFh
 15345                                  
 15346                                  ;IBMVER	    EQU     TRUE
 15347                                  ;IBMCOPYRIGHT EQU   FALSE
 15348                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 15349                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 15350                                  ;MSVER      EQU     FALSE
 15351                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 15352                                  ;KANJI      EQU     FALSE
 15353                                  
 15354                                  ;(MSDOS 6.0, versiona.inc, 1991)
 15355                                  ; ----------------------------------------------------------------------
 15356                                  ;MAJOR_VERSION  EQU	6
 15357                                  ;;MINOR_VERSION	EQU	0	;6.00
 15358                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 15359                                  
 15360                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 15361                                  ; ----------------------------------------------------------------------
 15362                                  MAJOR_VERSION   EQU	5
 15363                                  MINOR_VERSION   EQU	0
 15364                                  
 15365                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 15366                                  
 15367                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 15368                                  				; currently 0.
 15369                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 15370                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 15371                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 15372                                  
 15373                                  ;      if1
 15374                                  ;      %OUT  ... for DOS Version 5.00 ...
 15375                                  ;      endif
 15376                                  
 15377                                         ;******************************
 15378                                         ;Each assembler program should:
 15379                                         ;  mov ah,030h                   ;DOS Get Version function
 15380                                         ;  int 021h                      ;Version ret. in AX,minor version first
 15381                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 15382                                         ;  jne error_handler             ; EXACT version match.
 15383                                         ;******************************
 15384                                  
 15385                                  ; ----------------------------------------------------------------------
 15386                                  ; device definitions
 15387                                  
 15388                                  ;Attribute bit masks
 15389                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 15390                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 15391                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 15392                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 15393                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 15394                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 15395                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 15396                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 15397                                  
 15398                                  ; The device table list has the form:
 15399                                  struc	SYSDEV
 15400 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 15401 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 15402 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 15403 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 15404 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 15405                                  .size:
 15406                                  endstruc
 15407                                  
 15408                                  ;Static Reguest Header
 15409                                  struc	SRHEAD
 15410 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 15411 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 15412 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 15413 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 15414 00000005 ????????????????                	resb 8		;Reserved for queue links
 15415                                  .size:
 15416                                  endstruc
 15417                                  
 15418                                  ;Status word masks
 15419                                  STERR   EQU     8000H           ;Bit 15 - Error
 15420                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 15421                                  STDON   EQU     0100H           ;Bit 8 - Done
 15422                                  STECODE EQU     00FFH           ;Error code
 15423                                  WRECODE EQU     0
 15424                                  
 15425                                  ;Function codes
 15426                                  DEVINIT EQU     0               ;Initialization
 15427                                  DINITHL EQU     26              ;Size of init header
 15428                                  DEVMDCH EQU     1               ;Media check
 15429                                  DMEDHL  EQU     15              ;Size of media check header
 15430                                  DEVBPB  EQU     2               ;Get BPB
 15431                                  DEVRDIOCTL EQU  3               ;IOCTL read
 15432                                  DBPBHL  EQU     22              ;Size of Get BPB header
 15433                                  DEVRD   EQU     4               ;Read
 15434                                  DRDWRHL EQU     22              ;Size of RD/WR header
 15435                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 15436                                  DRDNDHL EQU     14              ;Size of non destructive read header
 15437                                  DEVIST  EQU     6               ;Input status
 15438                                  DSTATHL EQU     13              ;Size of status header
 15439                                  DEVIFL  EQU     7               ;Input flush
 15440                                  DFLSHL  EQU     15              ;Size of flush header
 15441                                  DEVWRT  EQU     8               ;Write
 15442                                  DEVWRTV EQU     9               ;Write with verify
 15443                                  DEVOST  EQU     10              ;Output status
 15444                                  DEVOFL  EQU     11              ;Output flush
 15445                                  DEVWRIOCTL EQU  12              ;IOCTL write
 15446                                  
 15447                                  ; ----------------------------------------------------------------------
 15448                                  struc	SYS_FCB
 15449 00000000 ??                      .fcb_drive:	resb 1
 15450 00000001 ????????????????        .fcb_name:	resb 8
 15451 00000009 ??????                  .fcb_ext:	resb 3
 15452 0000000C ????                    .fcb_EXTENT:	resw 1
 15453 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15454 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15455                                                          ; word
 15456 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15457 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15458 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15459 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15460                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15461                                                          ; If file, bit 6=0 if dirty
 15462                                                          ; If I/O device, bit 6=0 if EOF (input)
 15463                                                          ;               Bit 5=1 if Raw mode
 15464                                                          ;               Bit 0=1 if console input device
 15465                                                          ;               Bit 1=1 if console output device
 15466                                                          ;               Bit 2=1 if null device
 15467                                                          ;               Bit 3=1 if clock device
 15468 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15469 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15470 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15471 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15472 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15473 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15474                                  .size:
 15475                                  endstruc
 15476                                  
 15477                                  ; ----------------------------------------------------------------------
 15478                                  ; Field definition for I/O buffer information
 15479                                  
 15480                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15481                                  
 15482                                  struc buffinfo
 15483 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15484 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15485 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15486                                  			; SFT table index (bit 7 = 1)
 15487                                  			; = FFh if buffer free
 15488 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15489                                  			;	= 0 if Local device buffer
 15490                                  			; Bit 6 = 1 if buffer dirty
 15491                                  			; Bit 5 = Reserved
 15492                                  			; Bit 4 = Search bit (bit 7 = 1)
 15493                                  			; Bit 3 = 1 if buffer is DATA
 15494                                  			; Bit 2 = 1 if buffer is DIR
 15495                                  			; Bit 1 = 1 if buffer is FAT
 15496                                  			; Bit 0 = Reserved
 15497 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15498                                  ; The next two items are often refed as a word (bit 7 = 0)
 15499 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15500 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15501 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15502 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15503 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15504                                  .size:
 15505                                  endstruc
 15506                                  
 15507                                  %define buf_offset	dword [buf_sector]
 15508                                  			;For bit 7 = 1, this is the byte
 15509                                  			;offset of the start of the buffer in
 15510                                  			;the file pointed to by buf_ID.  Thus
 15511                                  			;the buffer starts at location
 15512                                  			;buf_offset in the file and contains
 15513                                  			;buf_fill bytes.
 15514                                  
 15515                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15516                                  
 15517                                  
 15518                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15519                                  
 15520                                  ;Flag byte masks
 15521                                  buf_isnet	EQU	10000000B
 15522                                  buf_dirty	EQU	01000000B
 15523                                  ;***
 15524                                  buf_visit	EQU	00100000B
 15525                                  ;***
 15526                                  buf_snbuf	EQU	00010000B
 15527                                  
 15528                                  buf_isDATA	EQU	00001000B
 15529                                  buf_isDIR	EQU	00000100B
 15530                                  buf_isFAT	EQU	00000010B
 15531                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15532                                  
 15533                                  buf_NetID	EQU	bufinsiz
 15534                                  
 15535                                  ; ----------------------------------------------------------------------
 15536                                  
 15537                                  ; ----------------------------------------------------------------------
 15538                                  ;**	DPB - Drive Parameter Block
 15539                                  
 15540                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15541                                  
 15542                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15543                                  ;	possibly inaccurate deductions from code study... - jgl
 15544                                  ;
 15545                                  ;	The DPB is DOS's main structure for describing block devices.
 15546                                  ;	It contains info about the "Drive" intermingled with info about
 15547                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15548                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15549                                  ;
 15550                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15551                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15552                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15553                                  
 15554                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15555                                  
 15556                                  ; 12/05/2019 - Retro DOS v4.0
 15557                                  
 15558                                  struc	DPB
 15559 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15560 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15561 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15562 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15563 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15564 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15565 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15566 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15567 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15568 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15569                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15570 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15571 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15572 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15573 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15574 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15575                                  				; check the first time this DPB is used
 15576 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15577 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15578 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15579                                  .size:
 15580                                  endstruc
 15581                                  
 15582                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15583                                  
 15584                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15585                                  
 15586                                  ; ----------------------------------------------------------------------
 15587                                  ; 26/03/2018
 15588                                  
 15589                                  ; IOCTL SUB-FUNCTIONS
 15590                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15591                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15592                                  IOCTL_READ_HANDLE	EQU	2
 15593                                  IOCTL_WRITE_HANDLE	EQU	3
 15594                                  IOCTL_READ_DRIVE	EQU	4
 15595                                  IOCTL_WRITE_DRIVE	EQU	5
 15596                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15597                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15598                                  IOCTL_CHANGEABLE?	EQU	8
 15599                                  IOCTL_SHARING_RETRY	EQU	11
 15600                                  GENERIC_IOCTL_HANDLE	EQU	12
 15601                                  GENERIC_IOCTL		EQU	13
 15602                                  
 15603                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15604                                  RAWIO			EQU	8
 15605                                  
 15606                                  ; RAWIO SUB-FUNCTIONS
 15607                                  GET_DEVICE_PARAMETERS	EQU	60H
 15608                                  SET_DEVICE_PARAMETERS	EQU	40H
 15609                                  READ_TRACK		EQU	61H
 15610                                  WRITE_TRACK		EQU	41H
 15611                                  VERIFY_TRACK		EQU	62H
 15612                                  FORMAT_TRACK		EQU	42H
 15613                                  
 15614                                  ; DEVICETYPE VALUES
 15615                                  MAX_SECTORS_IN_TRACK	EQU	63
 15616                                  DEV_5INCH		EQU	0
 15617                                  DEV_5INCH96TPI		EQU	1
 15618                                  DEV_3INCH720KB		EQU	2
 15619                                  DEV_8INCHSS		EQU	3
 15620                                  DEV_8INCHDS		EQU	4
 15621                                  DEV_HARDDISK		EQU	5
 15622                                  DEV_OTHER		EQU	7
 15623                                  ;DEV_3INCH1440KB	EQU	7
 15624                                  DEV_3INCH2880KB		EQU	9
 15625                                  ; Retro DOS v2.0 - 26/03/2018
 15626                                  ;;DEV_TAPE		EQU	6
 15627                                  ;;DEV_ERIMO		EQU	8
 15628                                  ;DEV_3INCH2880KB	EQU	9
 15629                                  DEV_3INCH1440KB		EQU	10
 15630                                  
 15631                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15632                                  					; CURRENTLY SUPPORT.
 15633                                  MAX_DEV_TYPE		EQU	10
 15634                                  
 15635                                  struc A_SECTORTABLE
 15636 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15637 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15638                                  .size:
 15639                                  endstruc
 15640                                  
 15641                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15642                                  
 15643                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15644                                  ;
 15645                                  ;	The BPB contains information about the disk structure.  It dates
 15646                                  ;	back to the earliest FAT systems and so FAT information is
 15647                                  ;	intermingled with physical driver information.
 15648                                  ;
 15649                                  ;	A boot sector contains a BPB for its device; for other disks
 15650                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15651                                  ;	information in the DPB.
 15652                                  ;
 15653                                  ;	The BDS structure contains a BPB within it.
 15654                                  
 15655                                  struc A_BPB
 15656 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15657 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15658 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15659 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15660 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15661 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15662 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15663 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15664 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15665 0000000F ????                    .BPB_HEADS:		resw	1
 15666 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15667 00000013 ????                    			resw	1
 15668 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15669 00000017 ????                    			resw	1
 15670 00000019 ????????????            			resb	6	; NOTE:  many times these
 15671                                  ;					; 	 6 bytes are omitted
 15672                                  ;					;	 when BPB manipulations
 15673                                  ;					;	 are performed!
 15674                                  .size:
 15675                                  endstruc
 15676                                  
 15677                                  struc A_DEVICEPARAMETERS
 15678 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15679 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15680 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15681 00000004 ????                    .DP_CYLINDERS:		resw	1
 15682 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15683 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15684 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15685 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15686                                  endstruc
 15687                                  
 15688                                  ; ----------------------------------------------------------------------
 15689                                  ; structure, equates for devmark for mem command.
 15690                                  
 15691                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15692                                  
 15693                                  struc devmark
 15694 00000000 ??                       .id:	    resb 1
 15695 00000001 ????                     .seg:	    resw 1
 15696 00000003 ????                     .size:	    resw 1
 15697 00000005 ??????                   .dum:	    resb 3
 15698 00000008 ????????????????         .filename: resb 8
 15699                                  endstruc
 15700                                  
 15701                                  devmark_stk	equ	'S'
 15702                                  devmark_device	equ	'D'
 15703                                  devmark_ifs	equ	'I'
 15704                                  devmark_buf	equ	'B'
 15705                                  devmark_cds	equ	'L' ; lastdrive
 15706                                  devmark_files	equ	'F'
 15707                                  devmark_fcbs	equ	'X'
 15708                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15709                                  devmark_ems_stub equ	'E'
 15710                                  
 15711                                  setbrkdone	equ	00000001b
 15712                                  for_devmark	equ	00000010b
 15713                                  not_for_devmark equ	11111101b
 15714                                  
 15715                                  ; ----------------------------------------------------------------------
 15716                                  ; Memory arena structure
 15717                                  
 15718                                  ; 24/03/2019 - Retro DOS v4.0 
 15719                                  ; (MSDOS 6.0, ARENA.INC)
 15720                                  
 15721                                  ;** Arena Header
 15722                                  
 15723                                  struc ARENA
 15724 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15725 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15726 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15727 00000005 ??????                  .RESERVED	resb 3		; reserved
 15728 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15729                                  endstruc
 15730                                  
 15731                                  ; 12/04/2019
 15732                                  
 15733                                  arena_owner_system	EQU 0	; free block indication
 15734                                  
 15735                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15736                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15737                                  
 15738                                  ; ----------------------------------------------------------------------
 15739                                  ; Process data block (otherwise known as program header)
 15740                                  
 15741                                  ; 23/03/2019 - Retro DOS v4.0
 15742                                  
 15743                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15744                                  
 15745                                  FILPERPROC	EQU     20
 15746                                  
 15747                                  struc PDB	; Process_data_block
 15748 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15749 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15750 00000004 ??                                      resb 1
 15751 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15752 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15753 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15754 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15755 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15756 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15757 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15758 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15759 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15760 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15761 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15762 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15763 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15764 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15765 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15766 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15767 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15768 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15769 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15770 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15771 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15772 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15773                                  ;.size:
 15774                                  endstruc
 15775                                  
 15776                                  ; ----------------------------------------------------------------------
 15777                                  ; <system call definitions>
 15778                                  
 15779                                  ; 23/03/2019 - Retro DOS v4.0
 15780                                  
 15781                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15782                                  
 15783                                  ABORT                           EQU 0   ;  0      0
 15784                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15785                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15786                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15787                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15788                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15789                                  RAW_CON_IO                      EQU 6   ;  6      6
 15790                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15791                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15792                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15793                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15794                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15795                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15796                                  DISK_RESET                      EQU 13  ; 13      D
 15797                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15798                                  FCB_OPEN                        EQU 15  ; 15      F
 15799                                  FCB_CLOSE                       EQU 16  ; 16     10
 15800                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15801                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15802                                  FCB_DELETE                      EQU 19  ; 19     13
 15803                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15804                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15805                                  FCB_CREATE                      EQU 22  ; 22     16
 15806                                  FCB_RENAME                      EQU 23  ; 23     17
 15807                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15808                                  SET_DMA                         EQU 26  ; 26     1A
 15809                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15810                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15811                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15812                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15813                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15814                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15815                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15816                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15817                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15818                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15819                                  GET_DATE                        EQU 42  ; 42     2A
 15820                                  SET_DATE                        EQU 43  ; 43     2B
 15821                                  GET_TIME                        EQU 44  ; 44     2C
 15822                                  SET_TIME                        EQU 45  ; 45     2D
 15823                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15824                                  ; Extended functionality group
 15825                                  GET_DMA                         EQU 47  ; 47     2F
 15826                                  GET_VERSION                     EQU 48  ; 48     30
 15827                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15828                                  GET_DPB                         EQU 50  ; 50     32
 15829                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15830                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15831                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15832                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15833                                  CHAR_OPER                       EQU 55  ; 55     37
 15834                                  INTERNATIONAL                   EQU 56  ; 56     38
 15835                                  ;   Directory Group
 15836                                  MKDIR                           EQU 57  ; 57     39
 15837                                  RMDIR                           EQU 58  ; 58     3A
 15838                                  CHDIR                           EQU 59  ; 59     3B
 15839                                  ;   File Group
 15840                                  CREAT                           EQU 60  ; 60     3C
 15841                                  OPEN                            EQU 61  ; 61     3D
 15842                                  CLOSE                           EQU 62  ; 62     3E
 15843                                  READ                            EQU 63  ; 63     3F
 15844                                  WRITE                           EQU 64  ; 64     40
 15845                                  UNLINK                          EQU 65  ; 65     41
 15846                                  LSEEK                           EQU 66  ; 66     42
 15847                                  CHMOD                           EQU 67  ; 67     43
 15848                                  IOCTL                           EQU 68  ; 68     44
 15849                                  XDUP                            EQU 69  ; 69     45
 15850                                  XDUP2                           EQU 70  ; 70     46
 15851                                  CURRENT_DIR                     EQU 71  ; 71     47
 15852                                  ;    Memory Group
 15853                                  ALLOC                           EQU 72  ; 72     48
 15854                                  DEALLOC                         EQU 73  ; 73     49
 15855                                  SETBLOCK                        EQU 74  ; 74     4A
 15856                                  ;    Process Group
 15857                                  EXEC                            EQU 75  ; 75     4B
 15858                                  EXIT                            EQU 76  ; 76     4C
 15859                                  WAITPROCESS			EQU 77  ; 77     4D
 15860                                  FIND_FIRST                      EQU 78  ; 78     4E
 15861                                  ;   Special Group
 15862                                  FIND_NEXT                       EQU 79  ; 79     4F
 15863                                  ; SPECIAL SYSTEM GROUP
 15864                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15865                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15866                                  GET_IN_VARS                     EQU 82  ; 82     52
 15867                                  SETDPB                          EQU 83  ; 83     53
 15868                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15869                                  DUP_PDB                         EQU 85  ; 85     55
 15870                                  RENAME                          EQU 86  ; 86     56
 15871                                  FILE_TIMES                      EQU 87  ; 87     57
 15872                                  ;
 15873                                  ALLOCOPER			EQU 88	; 88     58	
 15874                                  ; Network extention system calls
 15875                                  GetExtendedError		EQU 89	; 89	 59
 15876                                  CreateTempFile			EQU 90	; 90	 5A
 15877                                  CreateNewFile			EQU 91	; 91	 5B
 15878                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15879                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15880                                  					;	    CloseByName, CloseUser,
 15881                                  					;	    CloseUserProcess,
 15882                                  					;	    GetOpenFileList
 15883                                  UserOper			EQU 94	; 94	 5E Get and Set
 15884                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15885                                  xNameTrans			EQU 96	; 96	 60
 15886                                  PathParse			EQU 97	; 97	 61
 15887                                  GetCurrentPSP			EQU 98	; 98	 62
 15888                                  Hongeul 			EQU 99	; 99	 63
 15889                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15890                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15891                                  GetExtCntry			EQU 101 ; 101	 65
 15892                                  GetSetCdPg			EQU 102 ; 102	 66
 15893                                  ExtHandle			EQU 103 ; 103	 67
 15894                                  Commit				EQU 104 ; 104	 68
 15895                                  GetSetMediaID			EQU 105 ; 105	 69
 15896                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15897                                  ExtOpen 			EQU 108 ; 108	 6C
 15898                                  ;
 15899                                  ;ifdef ROMEXEC
 15900                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15901                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15902                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15903                                  ;endif
 15904                                  ;
 15905                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15906                                  OEM_C1				EQU 249 ; 249	 F9
 15907                                  OEM_C2				EQU 250 ; 250	 FA
 15908                                  OEM_C3				EQU 251 ; 251	 FB
 15909                                  OEM_C4				EQU 252 ; 252	 FC
 15910                                  OEM_C5				EQU 253 ; 253	 FD
 15911                                  OEM_C6				EQU 254 ; 254	 FE
 15912                                  OEM_C7				EQU 255 ; 255	 FF
 15913                                  
 15914                                  ; ----------------------------------------------------------------------
 15915                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15916                                  ; ----------------------------------------------------------------------
 15917                                  
 15918                                  ;;	IF	STACKSW
 15919                                  
 15920                                  ;;
 15921                                  ;; Internal Stack Parameters
 15922                                  ;EntrySize		equ	8
 15923                                  ;
 15924                                  ;MinCount		equ	8
 15925                                  ;DefaultCount		equ	9
 15926                                  ;MaxCount		equ	64
 15927                                  ;
 15928                                  ;MinSize 		equ	32
 15929                                  ;DefaultSize		equ	128
 15930                                  ;MaxSize 		equ	512
 15931                                  
 15932                                  ;;	ENDIF
 15933                                  
 15934                                  ; ----------------------------------------------------------------------
 15935                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15936                                  ; ----------------------------------------------------------------------
 15937                                  					  ;;Rev 3.30 Modification
 15938                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15939                                  									  
 15940                                  ;*******************************					  
 15941                                  ;System Service call ( Int 15h )					  
 15942                                  ;*******************************					  
 15943                                  ;Function AH = 0C0h, Return system configuration			  
 15944                                  ;For PC and PCJR on return:						  
 15945                                  ;	(AH)	= 80h							  
 15946                                  ;	(CY)	= 1							  
 15947                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15948                                  ;	(AH)	= 86h							  
 15949                                  ;	(CY)	= 1							  
 15950                                  ;For all others:							  
 15951                                  ;	(AH)	= 0							  
 15952                                  ;	(CY)	= 0							  
 15953                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15954                                  ; System descriptor :							  
 15955                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15956                                  ;				minimum length = 8			  
 15957                                  ;	DB	xx		model byte				  
 15958                                  ;				0FFh	= PC				  
 15959                                  ;				0FEh	= PC/XT, Portable		  
 15960                                  ;				0FDh	= PC/JR 			  
 15961                                  ;				0FCh	= PC/AT				  
 15962                                  ;				0F9h	= Convertable			  
 15963                                  ;				0F8h	= Model 80			  
 15964                                  ;				0E0 thru 0EFh = reserved		  
 15965                                  ;									  
 15966                                  ;	DB	xx		secondary model byte			  
 15967                                  ;				000h	= PC1				  
 15968                                  ;				000h	= PC/XT, Portable		  
 15969                                  ;				000h	= PC/JR 			  
 15970                                  ;				000h	= PC/AT 			  
 15971                                  ;				001h	= PC/AT Model 339		  
 15972                                  ;				003h	= PC/RT				  
 15973                                  ;				000h	= Convertable			  
 15974                                  ;									  
 15975                                  ;	DB	xx		bios revision level			  
 15976                                  ;				00 for first release, subsequent release  
 15977                                  ;				of code with same model byte and	  
 15978                                  ;				secondary model byte require revison level
 15979                                  ;				to increase by one.			  
 15980                                  ;									  
 15981                                  ;	DB	xx		feature information byte 1		  
 15982                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15983                                  ;					 = 0, DMA channel 3 not used	  
 15984                                  ;									  
 15985                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15986                                  ;					 = 0, 2nd Interrupt chip not present
 15987                                  ;									  
 15988                                  ;				00X00000 = 1, Real Time Clock present	  
 15989                                  ;					 = 0, Real Time Clock not present 
 15990                                  ;									  
 15991                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15992                                  ;						called in keyboard interrupt
 15993                                  ;						(Int 09h).		  
 15994                                  ;					 = 0, Keyboard escape sequence not
 15995                                  ;						called. 		  
 15996                                  ;				0000XXXX reserved			  
 15997                                  ;									  
 15998                                  ;	DB	xx		feature information byte 2 - reserved	  
 15999                                  ;									  
 16000                                  ;	DB	xx		feature information byte 2 - reserved	  
 16001                                  ;									  
 16002                                  ;	DB	xx		feature information byte 2 - reserved	  
 16003                                  ;									  
 16004                                  ;	DB	xx		feature information byte 2 - reserved	  
 16005                                  ;									  
 16006                                  
 16007                                  ; 22/03/2019									  
 16008                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 16009 00000000 ????                    .bios_sd_leng:		resw 1				  
 16010 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 16011                                  .bios_sd_scnd_modelbyte: 
 16012 00000003 ??                      			resb 1					  
 16013 00000004 ??                      			resb 1					  
 16014 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 16015 00000006 ????????                			resb 4					  
 16016                                  endstruc					  
 16017                                  									  
 16018                                  ;FeatureByte1	bit map equates 					  
 16019                                  DMAchannel3		equ 10000000b					  
 16020                                  ScndIntController	equ 01000000b					  
 16021                                  RealTimeClock		equ 00100000b					  
 16022                                  KeyEscapeSeq		equ 00010000b					  
 16023                                  					;;End of Modification
 16024                                  
 16025                                  ; ----------------------------------------------------------------------
 16026                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 16027                                  ; ----------------------------------------------------------------------
 16028                                  ; 22/03/2019 - Retro DOS v4.0
 16029                                  
 16030                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 16031                                  
 16032                                  struc SysInitVars
 16033                                  ; MSDOS 3.3
 16034 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 16035 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 16036 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 16037 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 16038 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 16039 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 16040 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 16041 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 16042 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 16043 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 16044 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 16045 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 16046                                  ; MSDOS 6.0
 16047 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 16048 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 16049 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 16050 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 16051                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 16052 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 16053 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 16054 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 16055 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 16056 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 16057 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 16058 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 16059                                  .size:
 16060                                  endstruc
 16061                                  
 16062                                  ;This is added for more information exchage between DOS, BIOS.
 16063                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 16064                                  
 16065                                  ; 22/03/2019
 16066                                  struc SysInitVars_Ext
 16067 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 16068 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 16069                                  endstruc
 16070                                  
 16071                                  ; 09/06/2018
 16072                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 16073                                  SYSI_DPB    equ	0
 16074                                  SYSI_SFT    equ 4
 16075                                  SYSI_CLOCK  equ 8
 16076                                  SYSI_CON    equ 12
 16077                                  SYSI_MAXSEC equ 16
 16078                                  SYSI_BUF    equ 18 		
 16079                                  SYSI_CDS    equ 22
 16080                                  SYSI_FCB    equ 26
 16081                                  SYSI_KEEP   equ 30
 16082                                  SYSI_NUMIO  equ	32
 16083                                  SYSI_NCDS   equ	33
 16084                                  SYSI_DEV    equ 34
 16085                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 16086                                  SYSI_ATTR	  equ 38
 16087                                  SYSI_STRAT	  equ 40
 16088                                  SYSI_INTER	  equ 42
 16089                                  SYSI_NAME	  equ 44
 16090                                  SYSI_SPLICE	  equ 52
 16091                                  SYSI_IBMDOS_SIZE  equ 53
 16092                                  SYSI_IFS_DOSCALL@ equ 55
 16093                                  SYSI_IFS	  equ 59
 16094                                  SYSI_BUFFERS	  equ 63
 16095                                  SYSI_BOOT_DRIVE   equ 67
 16096                                  SYSI_DWMOVE	  equ 68
 16097                                  SYSI_EXT_MEM	  equ 69
 16098                                  
 16099                                  ;The SYSI_BUF of SysInitVars points to the following structure
 16100                                  
 16101                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 16102                                  
 16103                                  struc BUFFINF 	; BUFFINFO
 16104 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 16105 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 16106 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 16107 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 16108                                  
 16109 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 16110                                  				; are in HMA
 16111 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 16112                                  				;  used to read/write on disks
 16113 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 16114 00000015 ????                    .UU_EMS_NPA640:		resw 1
 16115 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 16116 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 16117 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 16118 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 16119 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 16120 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 16121 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 16122                                  .size:
 16123                                  endstruc
 16124                                  
 16125                                  ; ----------------------------------------------------------------------
 16126                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 16127                                  ; ----------------------------------------------------------------------
 16128                                  ; 22/03/2019 - Retro DOS v4.0
 16129                                  
 16130                                  ;**	CDS - Current Directory Structure
 16131                                  ;
 16132                                  ; CDS items are used bu the internal routines to store cluster numbers and
 16133                                  ; network identifiers for each logical name.  The ID field is used dually,
 16134                                  ; both as net ID and for a cluster number for local devices. In the case
 16135                                  ; of local devices, the cluster number will be -1 if there is a potential
 16136                                  ; of the disk being changed or if the path must be recracked.
 16137                                  ;
 16138                                  ;	Some pathnames have special preambles, such as
 16139                                  ;
 16140                                  ;		\\machine\sharename\...
 16141                                  ;	For these pathnames we can't allow ".." processing to back us
 16142                                  ;	up into the special front part of the name.  The CURDIR_END field
 16143                                  ;	holds the address of the seperator character which marks
 16144                                  ;	the split between the special preamble and the regular
 16145                                  ;	path list; ".." processing isn't allowed to back us up past
 16146                                  ;	(i.e., before) CURDIR_END
 16147                                  ;	For the root, it points at the leading /. For net
 16148                                  ;	assignments it points at the end (nul) of the initial assignment:
 16149                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 16150                                  ;	  ^		 ^		     ^
 16151                                  
 16152                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 16153                                  TEMPLEN 	EQU	DIRSTRLEN*2
 16154                                  
 16155                                  struc 		curdir_list
 16156                                  ; MSDOS 3.3
 16157 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 16158 00000043 ????                    .cdir_flags	resw	1		; various flags
 16159 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 16160 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 16161 0000004D ????                    .cdir_usr_word	resw	1
 16162 0000004F ????                    .cdir_end	resw	1		; end of assignment
 16163                                  ; MSDOS 6.0
 16164 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 16165 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 16166 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 16167                                  .size:
 16168                                  endstruc
 16169                                  
 16170                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 16171                                  						; ASM87 which doesn't allow
 16172                                  						; Size directive as a macro
 16173                                  						; argument
 16174                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 16175                                  
 16176                                  ;**	Flag values for CURDIR_FLAGS
 16177                                  
 16178                                  ;Flag word masks
 16179                                  curdir_isnet	EQU	1000000000000000B
 16180                                  curdir_isifs	EQU	1000000000000000B
 16181                                  curdir_inuse	EQU	0100000000000000B
 16182                                  curdir_splice	EQU	0010000000000000B
 16183                                  curdir_local	EQU	0001000000000000B
 16184                                  
 16185                                  ; ----------------------------------------------------------------------
 16186                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 16187                                  ; ----------------------------------------------------------------------
 16188                                  ; 25/03/2019 - Retro DOS v4.0
 16189                                  
 16190                                  ; system file table
 16191                                  
 16192                                  ;**	System File Table SuperStructure
 16193                                  ;
 16194                                  ;	The system file table entries are allocated in contiguous groups.
 16195                                  ;	There may be more than one such groups; the SF "superstructure"
 16196                                  ;	tracks the groups.
 16197                                  
 16198                                  struc	SF
 16199 00000000 ????????                .SFLink:	resd	1
 16200 00000004 ????                    .SFCount:	resw	1		; number of entries
 16201 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 16202                                  .size:
 16203                                  endstruc
 16204                                  
 16205                                  ;**	System file table entry
 16206                                  ;
 16207                                  ;	These are the structures which are at SFTABLE in the SF structure.
 16208                                  
 16209                                  struc	SF_ENTRY
 16210 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 16211                                  					;   if FCB then ref count
 16212 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 16213 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 16214 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 16215                                  					; Bit 15 = 1 if remote file
 16216                                  					;	 = 0 if local file or device
 16217                                  					; Bit 14 = 1 if date/time is not to be
 16218                                  					;   set from clock at CLOSE.  Set by
 16219                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 16220                                  					;   other reseters of the dirty bit
 16221                                  					;   (WRITE)
 16222                                  					; Bit 13 = Pipe bit (reserved)
 16223                                  					;
 16224                                  					; Bits 0-7 (old FCB_devid bits)
 16225                                  					; If remote file or local file, bit
 16226                                  					; 6=0 if dirty Device ID number, bits
 16227                                  					; 0-5 if local file.
 16228                                  					; bit 7=0 for local file, bit 7
 16229                                  					;      =1 for local I/O device
 16230                                  					; If local I/O device, bit 6=0 if EOF (input)
 16231                                  					;		Bit 5=1 if Raw mode
 16232                                  					;		Bit 0=1 if console input device
 16233                                  					;		Bit 1=1 if console output device
 16234                                  					;		Bit 2=1 if null device
 16235                                  					;		Bit 3=1 if clock device
 16236 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 16237                                  					; to device header if local device,
 16238                                  					; points to net device header if
 16239                                  					; remote
 16240 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 16241                                  ;.sf_lstclus:	resw	1 ; *	
 16242 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 16243 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 16244 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 16245 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 16246                                  ;
 16247                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 16248                                  ; ID
 16249                                  ;
 16250 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 16251 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 16252 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 16253                                  ;
 16254                                  ; End of 7 bytes of file-system specific info.
 16255                                  ;
 16256 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 16257                                  					; directory entry.  This is used by
 16258                                  					; close to detect file deleted and
 16259                                  					; disk changed errors.
 16260                                  ; SHARING INFO
 16261 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 16262 0000002D ????                    .sf_UID:	resw	1
 16263 0000002F ????                    .sf_PID:	resw	1
 16264 00000031 ????                    .sf_MFT:	resw	1
 16265 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 16266 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 16267                                  .size:
 16268                                  endstruc
 16269                                  
 16270                                  ; ----------------------------------------------------------------------
 16271                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 16272                                  ; ----------------------------------------------------------------------
 16273                                  ; 11/06/2018 - Retro DOS v3.0
 16274                                  
 16275                                  ;Equates for COUNTRY INFORMATION.
 16276                                  SetCountryInfo		EQU	1	;country info
 16277                                  SetUcase		EQU	2	;uppercase table
 16278                                  SetLcase		EQU	3	;lowercase table (Reserved)
 16279                                  SetUcaseFile		EQU	4	;uppercase file spec table
 16280                                  SetFileList		EQU	5	;valid file character list
 16281                                  SetCollate		EQU	6	;collating sequence
 16282                                  SetDBCS 		EQU	7	;double byte character set
 16283                                  SetALL			EQU	-1	;all the entries
 16284                                  
 16285                                  ;DOS country and code page information table structure.
 16286                                  ;Internally, IBMDOS gives a pointer to this table.
 16287                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 16288                                  ;this structure.
 16289                                  
 16290                                  struc country_cdpg_info ; DOS_country_cdpg_info
 16291 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 16292 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 16293 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 16294 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 16295 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 16296 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 16297                                  
 16298 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 16299 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 16300                                  
 16301 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 16302 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 16303                                  
 16304 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 16305 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 16306                                  
 16307 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 16308 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 16309 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 16310 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 16311 00000067 ????                    .ccDFormat:		resw	1	;date format
 16312 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 16313                                  					;5 byte of (currency symbol+0)
 16314 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 16315 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 16316 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 16317 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 16318 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 16319 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 16320 00000078 ??                      .ccTFormat:		resb	1	;time format
 16321 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 16322 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 16323 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 16324                                  .size:
 16325                                  endstruc
 16326                                  
 16327                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 16328                                  
 16329                                  ; ======================================================================
 16330                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 16331                                  ; ======================================================================
 16332                                  ; 21/03/2019 - Retro DOS v4.0
 16333                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16334                                  
 16335                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 16336                                  ; 21/10/2022
 16337                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 16338                                  ; 22/10/2022
 16339                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 16340                                  ; 09/12/2022
 16341                                  DOSBIOCODESEG equ IOSYSCODESEG
 16342                                  
 16343                                  ; Note: These offset addresses must be chanqed when the code 
 16344                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 16345                                  
 16346                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 16347                                  
 16348                                  ; 09/12/2022
 16349                                  %if 0
 16350                                  
 16351                                  ; 13/05/2019
 16352                                  
 16353                                  ;IsWin386         equ 08CFh
 16354                                  ;V86_Crit_SetFocus equ 08D0h
 16355                                  ; 21/10/2022
 16356                                  IsWin386          equ 08D0h
 16357                                  V86_Crit_SetFocus equ 08D1h 
 16358                                  
 16359                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 16360                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16361                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 16362                                  
 16363                                  ;SysinitPresent	  equ 08FCh
 16364                                  ; 21/10/2022
 16365                                  SysinitPresent	  equ 08FDh
 16366                                  
 16367                                  inHMA		  equ 000Dh
 16368                                  xms		  equ 000Eh
 16369                                  ;FreeHMAPtr	  equ 08F6h
 16370                                  ;multrk_flag	  equ 0533h
 16371                                  ;ec35_flag	  equ 0535h
 16372                                  ;EOT		  equ 012Eh
 16373                                  ; 21/10/2022
 16374                                  FreeHMAPtr	  equ 08F7h
 16375                                  multrk_flag	  equ 052Fh
 16376                                  ec35_flag	  equ 0531h
 16377                                  EOT		  equ 012Ch
 16378                                  
 16379                                  ;NextStack	  equ 08BFh
 16380                                  ;IT_StackLoc	  equ 08C5h
 16381                                  ;IT_StackSize	  equ 08C9h
 16382                                  ; 21/10/2022
 16383                                  NextStack	  equ 08C0h
 16384                                  IT_StackLoc	  equ 08C6h
 16385                                  IT_StackSize	  equ 08CAh
 16386                                  
 16387                                  ;MoveDOSIntoHMA	  equ 08F8h
 16388                                  ; 21/10/2022
 16389                                  MoveDOSIntoHMA	  equ 08F9h
 16390                                  
 16391                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 16392                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 16393                                  ; 21/10/2022
 16394                                  INT19SEM equ 0640h ; (iosys5.txt)
 16395                                  I19_LST  equ 0641h ; (iosys5.txt)
 16396                                  
 16397                                  %endif
 16398                                  
 16399                                  ; 09/12/2022
 16400                                  seg_reinit equ _seg_reinit
 16401                                  ec35_flag  equ ec35flag		
 16402                                  INT19SEM   equ int19sem
 16403                                  I19_LST    equ i19_lst
 16404                                  
 16405                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 16406                                  INT19OLD08 equ I19_LST+6
 16407                                  INT19OLD09 equ I19_LST+11
 16408                                  INT19OLD0A equ I19_LST+16
 16409                                  INT19OLD0B equ I19_LST+21
 16410                                  INT19OLD0C equ I19_LST+26
 16411                                  INT19OLD0D equ I19_LST+31
 16412                                  INT19OLD0E equ I19_LST+36
 16413                                  INT19OLD70 equ I19_LST+41
 16414                                  INT19OLD72 equ I19_LST+46
 16415                                  INT19OLD73 equ I19_LST+51
 16416                                  INT19OLD74 equ I19_LST+56
 16417                                  INT19OLD76 equ I19_LST+61
 16418                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 16419                                  
 16420                                  ; 09/12/2022
 16421                                  %if 0
 16422                                  
 16423                                  ;keyrd_func	equ 04E9h
 16424                                  ;keysts_func	equ 04EAh
 16425                                  ;t_switch	equ 04F6h
 16426                                  ; 21/10/2022
 16427                                  keyrd_func	equ 04E5h
 16428                                  keysts_func	equ 04E6h
 16429                                  t_switch	equ 04F2h
 16430                                  
 16431                                  ; 22/10/2022
 16432                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 16433                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 16434                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 16435                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 16436                                  
 16437                                  %endif
 16438                                  
 16439                                  ; 09/12/2022
 16440                                  BCODESTART	equ BIOSDATAWORD
 16441                                  RE_INIT		equ re_init
 16442                                  
 16443                                  ; ----------------------------------------------------------------------
 16444                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 16445                                  ; ----------------------------------------------------------------------
 16446                                  ; 15/04/2019 - Retro DOS v4.0
 16447                                  
 16448                                  CONFIG_BEGIN        equ  '['
 16449                                  CONFIG_BREAK        equ  'C'
 16450                                  CONFIG_BUFFERS      equ  'B'
 16451                                  CONFIG_COMMENT      equ  'Y'
 16452                                  CONFIG_COUNTRY      equ  'Q'
 16453                                  CONFIG_DEVICE       equ  'D'
 16454                                  CONFIG_DEVICEHIGH   equ  'U'
 16455                                  CONFIG_DOS          equ  'H'
 16456                                  CONFIG_DRIVPARM     equ  'P'
 16457                                  CONFIG_FCBS         equ  'X'
 16458                                  CONFIG_FILES        equ  'F'
 16459                                  CONFIG_INCLUDE      equ  'J'
 16460                                  CONFIG_INSTALL      equ  'I'
 16461                                  CONFIG_INSTALLHIGH  equ  'W'
 16462                                  CONFIG_LASTDRIVE    equ  'L'
 16463                                  CONFIG_MENUCOLOR    equ  'R'
 16464                                  CONFIG_MENUDEFAULT  equ  'A'
 16465                                  CONFIG_MENUITEM     equ  'E'
 16466                                  CONFIG_MULTITRACK   equ  'M'
 16467                                  CONFIG_NUMLOCK      equ  'N'
 16468                                  CONFIG_REM          equ  '0'
 16469                                  CONFIG_SEMICOLON    equ  ';'
 16470                                  CONFIG_SET          equ  'V'
 16471                                  CONFIG_SHELL        equ  'S'
 16472                                  CONFIG_STACKS       equ  'K'
 16473                                  CONFIG_SUBMENU      equ  'O'
 16474                                  CONFIG_SWITCHES     equ  '1'
 16475                                  
 16476                                  CONFIG_UNKNOWN      equ  'Z'
 16477                                  
 16478                                  CONFIG_OPTION_QUERY equ 80h
 16479                                  
 16480                                  ; ----------------------------------------------------------------------
 16481                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16482                                  ; ----------------------------------------------------------------------
 16483                                  ; 21/03/2019 - Retro DOS v4.0
 16484                                  
 16485                                  true	equ	0FFFFh
 16486                                  false	equ	0
 16487                                  cr	equ	13
 16488                                  lf	equ	10
 16489                                  tab	equ	9
 16490                                  
 16491                                  multMULT	   equ	4Ah
 16492                                  multMULTGETHMAPTR  equ	1
 16493                                  multMULTALLOCHMA   equ	2
 16494                                  
 16495                                  ;NOEXEC    equ	FALSE
 16496                                  
 16497                                  stacksw    equ	true	;include switchable hardware stacks
 16498                                  mycds_size equ	88	;size of curdir_list. if it is not
 16499                                  			;the same, then will generate compile error.
 16500                                  
 16501                                  entrysize   equ     8
 16502                                  
 16503                                  mincount    equ     8
 16504                                  defaultcount equ    9
 16505                                  maxcount    equ     64
 16506                                  
 16507                                  minsize     equ     32
 16508                                  defaultsize equ     128
 16509                                  maxsize     equ     512
 16510                                  
 16511                                  ;%define allocbyte  byte [es:bp+0]
 16512                                  ;%define intlevel   byte [es:bp+1]
 16513                                  ;%define savedsp    word [es:bp+2]
 16514                                  ;%define savedss    word [es:bp+4]
 16515                                  ;%define newsp	    word [es:bp+6]
 16516                                  
 16517                                  allocbyte   equ     0
 16518                                  intlevel    equ     1
 16519                                  savedsp     equ     2
 16520                                  savedss     equ     4
 16521                                  newsp       equ     6
 16522                                  
 16523                                  free	    equ     0
 16524                                  allocated   equ     1
 16525                                  overflowed  equ     2
 16526                                  clobbered   equ     3
 16527                                  
 16528                                  ;---------------------------------------
 16529                                  ; external variable defined in ibmbio module for multi-track
 16530                                  
 16531                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16532                                  			  ; it on after handling config.sys file as a
 16533                                  			  ; default value,if multrk_flag = multrk_off1.
 16534                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16535                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16536                                  
 16537                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16538                                  
 16539                                  SYSINIT$:
 16540                                  	;IF	STACKSW 
 16541                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16542                                  	; include STKMES.INC	;Fatal stack error message
 16543                                  	;   public Endstackcode
 16544                                  ;Endstackcode	label byte
 16545                                  	;ENDIF
 16546                                  
 16547                                  ; 05/07/2018
 16548                                  ; ----------------------------------------------------------------------
 16549                                  ; 04/06/2018 - Retro DOS v3.0
 16550                                  
 16551                                  ; ----------------------------------------------------------------------
 16552                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16553                                  ; ----------------------------------------------------------------------
 16554                                  
 16555                                  ;	MSStack.inc
 16556                                  ;
 16557                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16558                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16559                                  ;	a standard header structure.
 16560                                  ;	Fyi, the following shows the relations between
 16561                                  ;	the interrupt vector and interrupt level.
 16562                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16563                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16564                                  ;	MSSTACK module modifies the following interrupt vectors
 16565                                  ;	to meet the standard Interrupt Sharing standard;
 16566                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16567                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16568                                  ;	should be initialized to indicat whether this interrupt handler is
 16569                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16570                                  ;	program header is initialized in STKINIT.INC module.
 16571                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16572                                  ;
 16573                                  
 16574                                  ;  User specifies the number of stack elements - default = 9
 16575                                  ;						 minimum = 8
 16576                                  ;						 maximum = 64
 16577                                  ;
 16578                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16579                                  ;
 16580                                  ;  Picks a stack from pool of stacks and switches to it
 16581                                  ;
 16582                                  ;  Calls the previously saved interrupt vector after pushing flags
 16583                                  ;
 16584                                  ;  On return, returns the stack to the stack pool
 16585                                  ;
 16586                                  
 16587                                  ; This is a modification of STACKS:
 16588                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16589                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16590                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16591                                  ;    . Allows system to work if the only stack that got too big was the most
 16592                                  ;      deeply nested one
 16593                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16594                                  ; 4. Does not intercept any interupts on a PCjr.
 16595                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16596                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16597                                  
 16598                                  		;EVEN
 16599                                  ;align 2
 16600                                  		; 21/10/2022
 16601                                  
 16602 00000000 0000                    		dw	0	; spare field but leave these in order
 16603 00000002 0000                    stackcount:	dw	0
 16604 00000004 0000                    stackat: 	dw	0
 16605 00000006 0000                    stacksize:	dw	0
 16606 00000008 0000                    stacks:		dw	0
 16607 0000000A 0000                    		dw	0
 16608                                  
 16609 0000000C [0800]                  firstentry:	dw	stacks
 16610 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16611 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16612                                  
 16613                                  ;***********************************************************************
 16614                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16615                                  
 16616                                  ; ----------------------------------------------------------------------
 16617                                  
 16618 00000012 00000000                old02:	dd	0
 16619                                  
 16620                                  int02:
 16621                                  
 16622                                  ; *********************************************************************
 16623                                  ;
 16624                                  ; this is special support for the pc convertible / nmi handler
 16625                                  ;
 16626                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16627                                  ;	caused by using the "out" instructions to certain ports. when this
 16628                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16629                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16630                                  ;	includes other type of interrupts (hardware and software), and
 16631                                  ;	also includes other type of nmi's. when any nmi has occured,
 16632                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16633                                  ;	the software takes specific steps to allow further interrupting.
 16634                                  ;
 16635                                  ;	for pc convertible, the situation where the nmi is generated by the
 16636                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16637                                  ;	otherwords, it is actually a "restartable exception". in this
 16638                                  ;	case, the software handler must be able to get to the stack in
 16639                                  ;	order to figure out what instruction caused the problem, where
 16640                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16641                                  ;	we will not switch stacks in this situation. this situation is
 16642                                  ;	detected by interrogating port 62h, and checking for a bit value
 16643                                  ;	of 80h. if set, *****do not switch stacks*****.
 16644                                  ;
 16645                                  ; *********************************************************************
 16646                                  
 16647 00000016 50                      	push	ax
 16648 00000017 06                      	push	es
 16649 00000018 B800F0                  	mov	ax,0F000h
 16650 0000001B 8EC0                    	mov	es,ax
 16651                                  	; 02/11/2022
 16652 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16653 00000023 07                      	pop	es
 16654 00000024 750C                    	jne	short normal02
 16655                                  
 16656 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16657                                  				; 0-3: values of DIP switches
 16658                                  				; 5: 1=Timer 2 channel out
 16659                                  				; 6: 1=I/O channel check
 16660                                  				; 7: 1=RAM parity check error occurred.
 16661 00000028 A880                    	test	al,80h
 16662 0000002A 7406                    	jz	short normal02
 16663                                  special02:
 16664 0000002C 58                      	pop	ax
 16665 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16666                                  normal02:
 16667 00000032 58                      	pop	ax
 16668 00000033 E81101                  	call	do_int_stacks
 16669 00000036 [1200]                  	dw	old02
 16670                                  
 16671                                  ; ----------------------------------------------------------------------
 16672                                  
 16673 00000038 00000000                old08:	dd	0
 16674                                  
 16675                                  int08:
 16676 0000003C E80801                  	call	do_int_stacks
 16677 0000003F [3800]                  	dw	old08
 16678                                  
 16679                                  ; ----------------------------------------------------------------------
 16680                                  
 16681 00000041 00000000                old09:	dd	0
 16682                                  
 16683                                  int09:
 16684                                  
 16685                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16686                                  ; as its first instruction for compatibility reasons
 16687                                  
 16688 00000045 EB02                    	jmp	short keyboard_lbl
 16689 00000047 90                      	nop
 16690 00000048 00                      	db	0
 16691                                  
 16692                                  keyboard_lbl:
 16693 00000049 E8FB00                  	call	do_int_stacks
 16694 0000004C [4100]                  	dw	old09
 16695                                  
 16696                                  ; ----------------------------------------------------------------------
 16697                                  
 16698 0000004E 00000000                old70:	dd	0
 16699                                  
 16700                                  int70:
 16701 00000052 E8F200                  	call	do_int_stacks
 16702 00000055 [4E00]                  	dw	old70
 16703                                  
 16704                                  ; ----------------------------------------------------------------------
 16705                                  
 16706                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16707                                  ;public	int&a
 16708                                  ;public	old&a
 16709                                  ;public	firstflag&a
 16710                                  ;int&a	proc	far
 16711                                  ;	jmp	short entry_int&a&_stk
 16712                                  ;old&a	dd	  0		;forward pointer
 16713                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16714                                  ;firstflag&a db   0		;the firstly hooked.
 16715                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16716                                  ;	db	7 dup (0)	;reserved for future.
 16717                                  ;entry_int&a&_stk:
 16718                                  ;	call	do_int_stacks
 16719                                  ;	dw	old&a
 16720                                  ;intret_&a:
 16721                                  ;	iret
 16722                                  ;int&a	endp
 16723                                  ;	endm
 16724                                  
 16725                                  ; ----------------------------------------------------------------------
 16726                                  
 16727                                  int0A:
 16728 00000057 EB10                    	jmp	short entry_int0A_stk
 16729 00000059 00000000                old0A:	dd	0	
 16730 0000005D 4B42                    	dw	424Bh
 16731                                  firstflag0A:
 16732 0000005F 00                      	db	0
 16733 00000060 EB0C                    	jmp	short intret_0A
 16734 00000062 00<rep 7h>              	times	7 db 0
 16735                                  
 16736                                  entry_int0A_stk:
 16737 00000069 E8DB00                  	call	do_int_stacks
 16738 0000006C [5900]                  	dw	old0A
 16739                                  intret_0A:
 16740 0000006E CF                      	iret
 16741                                  
 16742                                  ; ----------------------------------------------------------------------
 16743                                  
 16744                                  int0B:
 16745 0000006F EB10                    	jmp	short entry_int0B_stk
 16746 00000071 00000000                old0B:	dd	0	
 16747 00000075 4B42                    	dw	424Bh
 16748                                  firstflag0B:
 16749 00000077 00                      	db	0
 16750 00000078 EB0C                    	jmp	short intret_0B
 16751 0000007A 00<rep 7h>              	times	7 db 0
 16752                                  
 16753                                  entry_int0B_stk:
 16754 00000081 E8C300                  	call	do_int_stacks
 16755 00000084 [7100]                  	dw	old0B
 16756                                  intret_0B:
 16757 00000086 CF                      	iret
 16758                                  
 16759                                  ; ----------------------------------------------------------------------
 16760                                  
 16761                                  int0C:
 16762 00000087 EB10                    	jmp	short entry_int0C_stk
 16763 00000089 00000000                old0C:	dd	0	
 16764 0000008D 4B42                    	dw	424Bh
 16765                                  firstflag0C:
 16766 0000008F 00                      	db	0
 16767 00000090 EB0C                    	jmp	short intret_0C
 16768 00000092 00<rep 7h>              	times	7 db 0
 16769                                  
 16770                                  entry_int0C_stk:
 16771 00000099 E8AB00                  	call	do_int_stacks
 16772 0000009C [8900]                  	dw	old0C
 16773                                  intret_0C:
 16774 0000009E CF                      	iret
 16775                                  
 16776                                  ; ----------------------------------------------------------------------
 16777                                  
 16778                                  int0D:
 16779 0000009F EB10                    	jmp	short entry_int0D_stk
 16780 000000A1 00000000                old0D:	dd	0	
 16781 000000A5 4B42                    	dw	424Bh
 16782                                  firstflag0D:
 16783 000000A7 00                      	db	0
 16784 000000A8 EB0C                    	jmp	short intret_0D
 16785 000000AA 00<rep 7h>              	times	7 db 0
 16786                                  
 16787                                  entry_int0D_stk:
 16788 000000B1 E89300                  	call	do_int_stacks
 16789 000000B4 [A100]                  	dw	old0D
 16790                                  intret_0D:
 16791 000000B6 CF                      	iret
 16792                                  
 16793                                  ; ----------------------------------------------------------------------
 16794                                  
 16795                                  int0E:
 16796 000000B7 EB10                    	jmp	short entry_int0E_stk
 16797 000000B9 00000000                old0E:	dd	0	
 16798 000000BD 4B42                    	dw	424Bh
 16799                                  firstflag0E:
 16800 000000BF 00                      	db	0
 16801 000000C0 EB0C                    	jmp	short intret_0E
 16802 000000C2 00<rep 7h>              	times	7 db 0
 16803                                  
 16804                                  entry_int0E_stk:
 16805 000000C9 E87B00                  	call	do_int_stacks
 16806 000000CC [B900]                  	dw	old0E
 16807                                  intret_0E:
 16808 000000CE CF                      	iret
 16809                                  
 16810                                  ; ----------------------------------------------------------------------
 16811                                  
 16812                                  int72:
 16813 000000CF EB10                    	jmp	short entry_int72_stk
 16814 000000D1 00000000                old72:	dd	0	
 16815 000000D5 4B42                    	dw	424Bh
 16816                                  firstflag72:
 16817 000000D7 00                      	db	0
 16818 000000D8 EB0C                    	jmp	short intret_72
 16819 000000DA 00<rep 7h>              	times	7 db 0
 16820                                  
 16821                                  entry_int72_stk:
 16822 000000E1 E86300                  	call	do_int_stacks
 16823 000000E4 [D100]                  	dw	old72
 16824                                  intret_72:
 16825 000000E6 CF                      	iret
 16826                                  
 16827                                  ; ----------------------------------------------------------------------
 16828                                  
 16829                                  int73:
 16830 000000E7 EB10                    	jmp	short entry_int73_stk
 16831 000000E9 00000000                old73:	dd	0	
 16832 000000ED 4B42                    	dw	424Bh
 16833                                  firstflag73:
 16834 000000EF 00                      	db	0
 16835 000000F0 EB0C                    	jmp	short intret_73
 16836 000000F2 00<rep 7h>              	times	7 db 0
 16837                                  
 16838                                  entry_int73_stk:
 16839 000000F9 E84B00                  	call	do_int_stacks
 16840 000000FC [E900]                  	dw	old73
 16841                                  intret_73:
 16842 000000FE CF                      	iret
 16843                                  
 16844                                  ; ----------------------------------------------------------------------
 16845                                  
 16846                                  int74:
 16847 000000FF EB10                    	jmp	short entry_int74_stk
 16848 00000101 00000000                old74:	dd	0	
 16849 00000105 4B42                    	dw	424Bh
 16850                                  firstflag74:
 16851 00000107 00                      	db	0
 16852 00000108 EB0C                    	jmp	short intret_74
 16853 0000010A 00<rep 7h>              	times	7 db 0
 16854                                  
 16855                                  entry_int74_stk:
 16856 00000111 E83300                  	call	do_int_stacks
 16857 00000114 [0101]                  	dw	old74
 16858                                  intret_74:
 16859 00000116 CF                      	iret
 16860                                  
 16861                                  ; ----------------------------------------------------------------------
 16862                                  
 16863                                  int76:
 16864 00000117 EB10                    	jmp	short entry_int76_stk
 16865 00000119 00000000                old76:	dd	0	
 16866 0000011D 4B42                    	dw	424Bh
 16867                                  firstflag76:
 16868 0000011F 00                      	db	0
 16869 00000120 EB0C                    	jmp	short intret_76
 16870 00000122 00<rep 7h>              	times	7 db 0
 16871                                  
 16872                                  entry_int76_stk:
 16873 00000129 E81B00                  	call	do_int_stacks
 16874 0000012C [1901]                  	dw	old76
 16875                                  intret_76:
 16876 0000012E CF                      	iret
 16877                                  
 16878                                  ; ----------------------------------------------------------------------
 16879                                  
 16880                                  int77:
 16881 0000012F EB10                    	jmp	short entry_int77_stk
 16882 00000131 00000000                old77:	dd	0	
 16883 00000135 4B42                    	dw	424Bh
 16884                                  firstflag77:
 16885 00000137 00                      	db	0
 16886 00000138 EB0C                    	jmp	short intret_77
 16887 0000013A 00<rep 7h>              	times	7 db 0
 16888                                  
 16889                                  entry_int77_stk:
 16890 00000141 E80300                  	call	do_int_stacks
 16891 00000144 [3101]                  	dw	old77
 16892                                  intret_77:
 16893 00000146 CF                      	iret
 16894                                  
 16895                                  ; ----------------------------------------------------------------------
 16896                                  
 16897                                  ;********************************************************************
 16898                                  ;common routines
 16899                                  ;********************************************************************
 16900                                  
 16901                                  ; do interrupt stack switching. the fake return address holds
 16902                                  ; a pointer to the far-pointer of the actual interrupt
 16903                                  ; service routine
 16904                                  
 16905                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16906                                  ; 21/03/2019 - Retro DOS v4.0
 16907                                  
 16908                                  ;allocbyte   equ 0
 16909                                  ;intlevel    equ 1
 16910                                  ;savedsp     equ 2
 16911                                  ;savedss     equ 4
 16912                                  ;newsp       equ 6
 16913                                  
 16914                                  do_int_stacks:
 16915 00000147 50                      	push	ax
 16916 00000148 55                      	push	bp
 16917 00000149 06                      	push	es
 16918 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16919 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16920 00000154 B001                    	mov	al,allocated ; 1
 16921                                  	; 21/10/2022
 16922                                  	;xchg	[es:bp+allocbyte],al 
 16923                                  	; 11/12/2022
 16924 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16925 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16926 0000015C 754F                    	jne	short notfree02
 16927                                  
 16928 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16929                                  
 16930                                  found02:
 16931 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16932 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16933                                  
 16934 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16935                                  
 16936 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16937                                  	; 21/10/2022
 16938                                  	;mov	bp,[es:bp+6]
 16939                                  	; 11/12/2022
 16940                                  	;cmp	[es:bp+0],ax	
 16941 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16942 00000176 7542                    	jne	short foundbad02
 16943                                  
 16944                                  	;mov	ax,es			; point ss,sp to the new stack
 16945                                  	;mov	es,bp
 16946                                  	;mov	bp,sp
 16947                                  	;mov	bp,[bp+6]
 16948                                  	;mov	ss,ax
 16949                                  	;mov	sp,es
 16950                                  	;mov	es,ax
 16951                                  	;mov	bp,[cs:bp]
 16952                                  
 16953                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16954 00000178 55                      	push    bp
 16955 00000179 89E5                    	mov     bp,sp
 16956 0000017B 8B4608                  	mov     ax,[bp+8]
 16957 0000017E 5D                      	pop     bp
 16958 0000017F 06                      	push    es
 16959 00000180 17                      	pop     ss
 16960 00000181 89EC                    	mov     sp,bp
 16961 00000183 89C5                    	mov     bp,ax
 16962                                  	; 11/12/2022
 16963                                  	;mov	bp,[cs:bp+0]	
 16964 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16965                                  
 16966 00000189 9C                      	pushf				; go execute the real interrupt handler
 16967                                  	; 11/12/2022
 16968 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16969                                  	; 21/10/2022
 16970                                  	;call	far [cs:bp+0]
 16971                                  
 16972 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16973                                  	; 11/12/2022
 16974 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16975                                  	; 21/10/2022
 16976                                  	;mov	bp,[es:bp+0]
 16977 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16978 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16979                                  
 16980                                  	; 11/12/2022
 16981                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16982                                  	; 21/10/2022
 16983 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16984 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16985                                  
 16986 000001A6 07                      	pop	es
 16987 000001A7 5D                      	pop	bp			; saved on entry
 16988 000001A8 58                      	pop	ax			; saved on entry
 16989 000001A9 83C402                  	add	sp,2
 16990 000001AC CF                      	iret				; done with this interrupt
 16991                                  
 16992                                  notfree02:
 16993 000001AD 3C01                    	cmp	al,allocated		; error flag
 16994 000001AF 7404                    	je	short findnext02	;  no, continue
 16995                                  	; 11/12/2022
 16996                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16997                                  	; 21/10/2022
 16998 000001B1 26864600                	xchg	[es:bp],al
 16999                                  
 17000                                  findnext02:
 17001 000001B5 E81200                  	call	longpath
 17002 000001B8 EBAA                    	jmp	short found02
 17003                                  
 17004                                  foundbad02:
 17005 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 17006 000001BF 72F4                    	jc	short findnext02
 17007 000001C1 89C5                    	mov	bp,ax			; flag this entry
 17008                                  	; 11/12/2022
 17009                                  	;mov	byte [es:bp+allocbyte],clobbered
 17010                                  	; 21/10/2022
 17011 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 17012 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 17013                                  
 17014                                  ; ----------------------------------------------------------------------
 17015                                  
 17016                                  ; Common routines
 17017                                  
 17018                                  longpath:
 17019                                  	; 21/03/2019
 17020 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 17021                                  lploopp:
 17022                                  	; 11/12/2022
 17023                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 17024                                  	; 21/10/2022
 17025 000001CF 26807E0000              	cmp	byte [es:bp],free
 17026 000001D4 7512                    	jne	short inuse		;  no, try next one
 17027                                  
 17028 000001D6 B001                    	mov	al,allocated
 17029                                  	; 11/12/2022
 17030                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 17031                                  	; 21/10/2022
 17032 000001D8 26864600                	xchg	[es:bp],al
 17033 000001DC 3C00                    	cmp	al,free 		; is it still free?
 17034 000001DE 7414                    	je	short found		;  yes, go use it
 17035                                  
 17036 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 17037 000001E2 7404                    	je	short inuse		;  no, check the next one
 17038                                  
 17039                                  	; 11/12/2022
 17040                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 17041                                  	; 21/10/2022
 17042 000001E4 26884600                	mov	[es:bp],al
 17043                                  inuse:
 17044 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 17045 000001ED 7406                    	je	short fatal
 17046 000001EF 83ED08                  	sub	bp,entrysize
 17047 000001F2 EBDB                    	jmp	short lploopp
 17048                                  found:
 17049 000001F4 C3                      	retn
 17050                                  fatal:
 17051 000001F5 1E                      	push	ds
 17052 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 17053 000001F9 8ED8                    	mov	ds,ax
 17054 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 17055 00000200 1F                      	pop	ds
 17056 00000201 7504                    	jne	short skip_nmis
 17057                                  
 17058 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 17059 00000205 E672                    	out	72h,al
 17060                                  
 17061                                  skip_nmis:
 17062 00000207 FA                      	cli				; disable and mask
 17063 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 17064 0000020A E621                    	out	021h,al
 17065 0000020C E6A1                    	out	0A1h,al
 17066                                  
 17067 0000020E 8CCE                    	mov	si,cs
 17068 00000210 8EDE                    	mov	ds,si
 17069 00000212 BE[3902]                	mov	si,fatal_msg
 17070                                  ;SR;
 17071                                  ;   We set all foci to this VM to issue the stack failure message
 17072                                  ;
 17073 00000215 50                      	push	ax
 17074 00000216 1E                      	push	ds
 17075                                  	;;mov	ax,Bios_Data ; 0070h
 17076                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17077                                  	; 21/10/2022
 17078 00000217 B87000                  	mov	ax,DOSBIODATASEG
 17079 0000021A 8ED8                    	mov	ds,ax
 17080                                  
 17081                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 17082 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 17083 00000221 1F                      	pop	ds
 17084 00000222 58                      	pop	ax
 17085 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 17086                                  
 17087                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 17088                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 17089                                  	; 21/10/2022
 17090 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 17091                                  ;
 17092                                  ;SR; We do not bother about the returned status of this call. 
 17093                                  ;
 17094                                  fatal_loop:
 17095 0000022A AC                      	lodsb
 17096 0000022B 3C24                    	cmp	al,'$'
 17097 0000022D 7408                    	je	short fatal_done
 17098                                  
 17099 0000022F B307                    	mov	bl,7
 17100 00000231 B40E                    	mov	ah,14
 17101 00000233 CD10                    	int	10h			; whoops, this enables ints
 17102 00000235 EBF3                    	jmp	short fatal_loop
 17103                                  
 17104                                  fatal_done:
 17105 00000237 EBFE                    	jmp	short fatal_done
 17106                                  
 17107                                  
 17108                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17109                                  ; ----------------------------------------------------------------------
 17110                                  ;	include msbio.cl5		; fatal stack error message
 17111                                  
 17112                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 17113                                  
 17114                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 17115                                  ; ----------------------------------------------------------------------
 17116                                  ; 04/06/2018 - Retro DOS v3.0
 17117                                  
 17118                                  fatal_msg:
 17119 00000239 0D0A                    	db	0Dh,0Ah
 17120 0000023B 070D0A                  	db	7,0Dh,0Ah
 17121 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 17121 00000247 737461636B206F7665-
 17121 00000250 72666C6F770D0A     
 17122 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 17122 00000260 6C7465640D0A24     
 17123                                  
 17124                                  endstackcode:
 17125                                  
 17126                                  ; ----------------------------------------------------------------------
 17127                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 17128                                  ; ----------------------------------------------------------------------
 17129                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 17130                                  
 17131                                  ; 22/03/2019 - Retro DOS v4.0
 17132                                  
 17133                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 17134                                  
 17135                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 17136                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 17137                                  
 17138                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17139                                  ; ----------------------------------------------------------------------
 17140                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 17141                                  
 17142                                  SYSINIT:	
 17143 00000267 E91C02                          JMP	GOINIT
 17144                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 17145                                  
 17146                                  ; ----------------------------------------------------------------------
 17147                                  
 17148                                  struc DDHighInfo
 17149 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 17150 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 17151 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 17152                                  endstruc
 17153                                  
 17154                                  ; 22/03/2019 - Retro DOS v4.0
 17155                                  
 17156 0000026A 00                      runhigh: db	0
 17157                                  
 17158                                  ; 02/11/2022
 17159                                  ;align 4
 17160                                  
 17161                                  DOSINFO: 
 17162 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 17163                                  ;MSDOS:
 17164                                  dos_temp_location: ; dword ; MSDOS 6.0
 17165                                  dosinit:		; MSDOS 6.0
 17166 0000026F 0000                    	dw	0
 17167                                  
 17168                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17169                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 17170                                  ;	dw	0
 17171                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 17172                                  
 17173                                  CURRENT_DOS_LOCATION:
 17174 00000271 0000                    	dw	0
 17175                                  
 17176                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 17177                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 17178                                  
 17179                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17180                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 17181                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17182                                  
 17183                                  DEVICE_LIST:
 17184 00000273 00000000                	dd	0
 17185                                  
 17186                                  ; 04/06/2018 - Retro DOS v3.0
 17187                                  ; 28/03/2018
 17188                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 17189                                  ;
 17190                                  sysi_country:	
 17191 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 17192                                  
 17193                                  ; MSDOS 6.0
 17194 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 17195                                  
 17196 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 17197 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 17198                                  
 17199 00000283 0000                    def_php:	dw	0
 17200                                  
 17201                                  ; M022--
 17202                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 17203                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 17204                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 17205                                  ;  the new home.
 17206                                  
 17207                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 17208                                  ; 21/10/2022
 17209                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 17210                                  
 17211                                  ; 22/10/2022
 17212                                  seg_reinit_ptr:	; label dword
 17213 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 17214                                  temp_bcode_seg:
 17215                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 17216                                  		; 22/10/2022
 17217 00000287 9E02                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 17218                                  
 17219                                  fake_floppy_drv:
 17220 00000289 00                      		db	0	; set to 1 if this machine
 17221                                  				; does not have any floppies!!!
 17222                                  
 17223                                  ; Internal Stack Parameters
 17224                                  
 17225 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 17226 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 17227 0000028E 00000000                stack_addr:	dd	0	
 17228                                  
 17229                                  ; 05/06/2018 - Retro DOS v3.0
 17230                                  
 17231                                  ; various default values
 17232                                  
 17233 00000292 0100                    MEMORY_SIZE:	dw	1
 17234                                  
 17235                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 17236                                  
 17237 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 17238 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 17239 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 17240 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 17241 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 17242                                  
 17243 0000029D 08                      FILES:	db	8	; enough files for pipe
 17244 0000029E 04                      FCBS:	db	4	; performance for recycling
 17245 0000029F 00                      KEEP:	db	0	; keep original set
 17246 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 17247                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 17248                                  ;CONFBOT: dw	0
 17249                                  ;ALLOCLIM: dw	0
 17250                                  CONFBOT: ; 02/11/2022
 17251 000002A1 0000                    top_of_cdss: dw 0
 17252                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 17253 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 17254                                  
 17255 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 17256                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 17257                                  ; (SYSINIT:02A9h)
 17258                                  command_line:
 17259 000002A9 0200                    	db	2,0
 17260 000002AB 50                      	db	'P'
 17261 000002AC 00                      	db	0
 17262 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 17263                                  ; (SYSINIT:0329h)
 17264 00000329 00                      ZERO:	db	0
 17265 0000032A 00                      sepchr:	db	0
 17266 0000032B 0000                    linecount: dw	0			; line count in config.sys
 17267 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 17268 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 17269                                  
 17270 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 17271 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 17272                                  
 17273 00000339 0000                    buf_prev_off:	dw	0
 17274                                  
 17275                                          ;IF      NOT NOEXEC
 17276                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 17277                                          ;ENDIF
 17278                                  
 17279                                  ; 01/05/2018
 17280                                  COMEXE:
 17281 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 17282 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 17283 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17284 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 17285 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17286 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 17287 00000347 0000                    		dw	0
 17288                                  
 17289                                  ; variables for install= command.
 17290                                  
 17291 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 17292                                  					;  indicating the pass number
 17293                                  					; 0 - do scan for DOS=HIGH/LOW
 17294                                  					; 1 - load device drivers
 17295                                  					; 2 - was to load IFS
 17296                                  					;      now it is unused
 17297                                  					; 3 - do install=
 17298                                  					; >3 - nop
 17299 0000034A 0000                    install_flag:	dw	0
 17300                                  
 17301                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 17302                                  has_installed	equ	00000010b	; sysinit_base installed.
 17303                                  
 17304 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 17305 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 17306 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 17307 00000356 0000                    checksum:	dw	0		; used by sum_up
 17308                                  
 17309 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 17310 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 17311 0000036D 20                      ldexec_start:	db	' '
 17312 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 17313                                  
 17314                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 17315                                  
 17316                                  instexe:
 17317 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 17318 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 17319 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17320 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 17321 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17322 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 17323 000003CA 0000                    		dw	0
 17324                                  
 17325                                  ; variables for comment=
 17326                                  
 17327 000003CC 00                      com_level:	db	0		; level of " " in command line
 17328 000003CD 00                      cmmt:		db	0		; length of comment string token
 17329 000003CE 00                      cmmt1:		db	0		; token
 17330 000003CF 00                      cmmt2:		db	0		; token
 17331 000003D0 00                      cmd_indicator:	db	0
 17332 000003D1 00                      donotshownum:	db	0
 17333                                  
 17334 000003D2 0000                    count:		dw	0
 17335 000003D4 0000                    org_count:	dw	0
 17336 000003D6 0000                    chrptr:		dw	0
 17337 000003D8 0000                    cntryfilehandle: dw	0
 17338 000003DA 0000                    old_area:	dw	0
 17339 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 17340                                  
 17341                                  bucketptr: ; label dword
 17342                                  bufptr:	   ; label dword		; leave this stuff in order!
 17343 000003DE 0000                    memlo:	dw	0
 17344                                  prmblk:	   ; label word
 17345 000003E0 0000                    memhi:	dw	0
 17346 000003E2 0000                    ldoff:	dw	0
 17347 000003E4 0000                    area:	dw	0
 17348                                  
 17349                                  ; Following is the request packet used to call INIT routines for 
 17350                                  ; all device drivers. Some fields may be accessed individually in
 17351                                  ; the code, and hence have individual labels, but they should not
 17352                                  ; be separated.
 17353                                  
 17354 000003E6 18                      packet:	db	24			; was 22
 17355 000003E7 00                      	db	0
 17356 000003E8 00                      	db	0			; initialize code
 17357 000003E9 0000                    	dw	0
 17358 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 17359                                  
 17360 000003F3 00                      unitcount:	db	0
 17361 000003F4 00000000                break_addr:	dd	0
 17362 000003F8 00000000                bpb_addr:	dd	0
 17363                                  drivenumber:	; 22/10/2022
 17364 000003FC 00                      devdrivenum:	db	0 
 17365 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 17366                                  
 17367                                  ; end of request packet
 17368                                  
 17369                                  ;drivenumber:	db	0  ; 22/03/2019
 17370                                  
 17371                                  toomanydrivesflag:
 17372 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 17373                                  align 2
 17374                                  
 17375                                  BCodeSeg:	; 21/10/2022
 17376 00000400 9E02                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 17377                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 17378                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 17379                                  
 17380                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17381                                  ;; 19/04/2019
 17382                                  ;_timer_lw_:
 17383                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 17384                                  	
 17385                                  ;SR;
 17386                                  ; This is the communication block between the DOS and the BIOS. It starts at
 17387                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 17388                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 17389                                  ;is passed to DOS as part of the DOSINIT call.
 17390                                  ;
 17391                                  
 17392                                  BiosComBlock:
 17393                                  	;dd	Bios_Data:SysinitPresent 
 17394                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 17395 00000402 [FA08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 17396                                  	;dw	KERNEL_SEGMENT ; 0070h
 17397                                  	; 21/10/2022
 17398 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 17399                                  
 17400                                  ;align 2
 17401                                  
 17402                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 17403                                  tempstack:	
 17404 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 17405                                  
 17406                                  ; ----------------------------------------------------------------------------
 17407                                  
 17408                                  	; 22/10/2022 - Retro DOS v4.0
 17409                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 17410                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 17411                                  	; 12/12/2022
 17412                                  	; 22/03/2019 - Retro DOS v4.0
 17413                                  	; 06/07/2018
 17414                                  	; 04/06/2018 - Retro DOS v3.0
 17415                                  ; before doing anything else, let's set the model byte
 17416 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 17417 00000488 CD15                    	int	15h			; *
 17418 0000048A 7216                    	jc	short no_rom_config
 17419                                  
 17420                                  	;cmp	ah,0			; double check
 17421                                  	;jne	short no_rom_config
 17422                                  	; 04/09/2023
 17423 0000048C 08E4                    	or	ah,ah
 17424 0000048E 7512                    	jnz	short no_rom_config
 17425 00000490 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 17426 00000494 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 17427 00000498 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 17428 0000049C 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 17429                                  	;jmp	short SYSIN
 17430                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17431 000004A0 EB2C                    	jmp	short move_myself
 17432                                  
 17433                                  no_rom_config:				; Old ROM
 17434 000004A2 B800F0                  	mov	ax,0F000h
 17435 000004A5 8ED8                    	mov	ds,ax
 17436 000004A7 A0FEFF                  	mov	al,[0FFFEh]
 17437 000004AA 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 17438                                  
 17439                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 17440                                  ; execute the equipment determination interrupt and then
 17441                                  ; check the returned value to see if we have any floppy drives
 17442                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 17443                                  ; see the at tech ref bios listings for help on the equipment
 17444                                  ; flag interrupt (11h)	
 17445                                  
 17446                                  	; 22/10/2022
 17447                                  check_for_fake_floppy:			; entry point for rom_config above
 17448 000004AE CD11                    	int	11h			; check equipment flag
 17449                                  
 17450                                  	; 12/12/2022
 17451 000004B0 A801                    	test	al,1		
 17452                                  	;test	ax,1			; have any floppies?
 17453 000004B2 751A                    	jnz	short move_myself	; yes,normal system
 17454                                  
 17455                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17456                                  ; whether it is an old ROM BIOS or a new one
 17457                                  ;
 17458                                  ; WARNING !!!
 17459                                  ;
 17460                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17461                                  ; here will require an equivalent modification in MSINIT.ASM also
 17462                                  
 17463 000004B4 06                      	push	es
 17464                                  
 17465 000004B5 30C9                    	xor	cl,cl	
 17466 000004B7 B408                    	mov	ah,8			; get disk parameters
 17467 000004B9 B200                    	mov	dl,0			; of drive 0
 17468 000004BB CD13                    	int	13h
 17469                                  
 17470 000004BD 07                      	pop	es
 17471                                  
 17472 000004BE 720E                    	jc	short move_myself	; if error lets assume that the
 17473                                  					;  ROM BIOS lied
 17474                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 17475                                  	;je	short move_myself
 17476                                  	; 04/09/2023
 17477 000004C0 08C9                    	or	cl,cl
 17478 000004C2 740A                    	jz	short move_myself
 17479                                  
 17480 000004C4 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17481 000004C6 7506                    	jnz	short move_myself
 17482                                  
 17483 000004C8 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17484                                  
 17485                                  move_myself:
 17486 000004CE FC                      	cld				; set up move
 17487 000004CF 31F6                    	xor	si,si
 17488 000004D1 89F7                    	mov	di,si
 17489                                  
 17490                                  	; 12/12/2022
 17491 000004D3 0E                      	push	cs
 17492 000004D4 1F                      	pop	ds
 17493                                  
 17494                                  	;mov	cx,[cs:MEMORY_SIZE]
 17495 000004D5 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17496                                  
 17497                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17498                                  ;;;	if	msver
 17499                                  ;	cmp	cx,1		; 1 means do scan
 17500                                  ;	jnz	short noscan
 17501                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17502                                  ;	xor	bx,bx
 17503                                  ;
 17504                                  ;memscan:inc	cx
 17505                                  ;	jz	setend
 17506                                  ;	mov	ds,cx
 17507                                  ;	mov	al,[bx]
 17508                                  ;	not	al
 17509                                  ;	mov	[bx],al
 17510                                  ;	cmp	al,[bx]
 17511                                  ;	not	al
 17512                                  ;	mov	[bx],al
 17513                                  ;	jz	short memscan
 17514                                  ;setend:
 17515                                  ;	mov	cs:[memory_size],cx
 17516                                  ;;;	endif
 17517                                  
 17518                                  ;noscan: 				; cx is mem size in para
 17519                                  ;;
 17520                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17521                                  ;;		  before we try to run.
 17522                                  ;;	       b) in any case, we should check for sufficient memory and give
 17523                                  ;;		  an appropriate error diagnostic if there isn't enough
 17524                                  ;
 17525                                  ;	push	cs
 17526                                  ;	pop	ds
 17527                                  ;
 17528                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17529                                  ;;	  that way it would be easier to slide them down home in a minimal
 17530                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17531                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17532                                  ;;	  temporary home and the final one.  the problem with doing that
 17533                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17534                                  ;
 17535                                  ;	dec	cx			; one para for an arena at end of mem
 17536                                  ;					; in case of UMBs
 17537                                  
 17538                                  	; 22/10/2022
 17539                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17540                                  
 17541                                  	; 12/12/2022
 17542                                  	;push	cs
 17543                                  	;pop	ds
 17544                                  
 17545 000004D9 49                      	dec	cx
 17546                                  
 17547                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17548                                  
 17549 000004DA 31DB                    	xor	bx,bx
 17550 000004DC 8EC3                    	mov	es,bx	; 0
 17551                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17552                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17553                                  	; 29/09/2023
 17554 000004DE 26C41EBC00              	les	bx,[es:(2Fh*4)]
 17555 000004E3 26817F035250            	cmp	word [es:bx+3],'RP'
 17556 000004E9 751B                    	jne	short NoRPL
 17557 000004EB 26807F054C              	cmp	byte [es:bx+5],'L'
 17558 000004F0 7514                    	jne	short NoRPL
 17559                                  
 17560 000004F2 89CA                    	mov	dx,cx			; get TOM into DX
 17561 000004F4 52                      	push	dx
 17562 000004F5 B8064A                  	mov	ax,4A06h
 17563                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17564 000004F8 CD2F                    	int	2Fh			; Get new TOM from any RPL
 17565 000004FA 58                      	pop	ax
 17566 000004FB 89D1                    	mov	cx,dx
 17567 000004FD 39C2                    	cmp	dx,ax
 17568 000004FF 7405                    	je	short NoRPL
 17569                                  	
 17570                                  	; 11/12/2022
 17571                                  	; ds = cs
 17572 00000501 8916[9402]              	mov	[RPLMemTop],dx
 17573                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17574                                  	;mov	[cs:RPLMemTop],dx
 17575                                  	
 17576 00000505 49                      	dec	cx
 17577                                  NoRPL:
 17578 00000506 B8[F037]                	mov	ax,SI_end		; need this much room for sysinit
 17579                                  					; (SI_end == sysinit code size)
 17580 00000509 E8B006                  	call	off_to_para
 17581 0000050C 29C1                    	sub	cx,ax
 17582                                  
 17583                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17584                                  ; code above sysinit in memory
 17585                                  ;
 17586 0000050E 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 17587                                  
 17588 00000512 B8D019                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17589 00000515 E8A406                  	call	off_to_para		; leave this much room for BIOS code
 17590 00000518 29C1                    	sub	cx,ax
 17591 0000051A 8EC1                    	mov	es,cx			; offset where sysinit will be located
 17592                                  
 17593 0000051C B9[F037]                	mov	cx,SI_end		; (sysinit code size)
 17594 0000051F D1E9                    	shr	cx,1			; divide by 2 to get words
 17595 00000521 F3A5                    	rep	movsw			; relocate sysinit
 17596                                  
 17597 00000523 06                      	push	es			; push relocated segment
 17598 00000524 B8[2905]                	mov	ax,SYSIN
 17599 00000527 50                      	push	ax			; push relocated entry point
 17600                                  
 17601 00000528 CB                      	retf				; far jump to relocated sysinit
 17602                                  
 17603                                  ; ----------------------------------------------------------------------------
 17604                                  
 17605                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17606                                  
 17607                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17608                                  	; (SYSINIT:0533h)
 17609                                  SYSIN:
 17610                                  	; Retro DOS 4.0 - 22/03/2019
 17611                                  	; Retro DOS 2.0 - 25/02/2018
 17612                                  
 17613                                  	; 23/04/2019
 17614                                  	;;mov	ax,Bios_Data
 17615                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17616                                  	; 21/10/2022
 17617 00000529 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17618 0000052C 8ED8                    	mov	ds,ax
 17619 0000052E 8C0E[F808]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17620 00000532 C606[FA08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17621                                  
 17622                                  ; first move the MSDOS.SYS image up to a harmless place 
 17623                                  ; on top of our new sysinitseg
 17624                                  
 17625                                  	; 22/10/2022
 17626 00000537 B8[F037]                	mov	ax,SI_end		; how big is sysinitseg?
 17627 0000053A E87F06                  	call	off_to_para
 17628 0000053D 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17629 0000053F 01C8                    	add	ax,cx
 17630 00000541 8EC0                    	mov	es,ax
 17631                                  	
 17632 00000543 31F6                    	xor	si,si
 17633 00000545 89F7                    	mov	di,si
 17634                                  
 17635 00000547 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17636                                  
 17637                                  	;mov	ax,cs	
 17638                                  	;mov	ds,ax
 17639                                  
 17640                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17641                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17642                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17643                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17644                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17645                                  
 17646                                  	; 22/10/2022
 17647 0000054C B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17648 0000054F F3A5                    	rep     movsw
 17649 00000551 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17650                                  
 17651                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17652                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17653                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17654                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17655                                  
 17656                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17657                                  	;mov	ax,cs
 17658                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17659                                  	;mov	ds,ax
 17660                                  
 17661                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17662                                  
 17663                                  ;	; 24/04/2019 
 17664                                  ;;ifndef ROMDOS
 17665                                  ;	mov	ax,[es:3] 		; get offset of dos
 17666                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17667                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17668                                  ;	call	off_to_para		; subtract this much from segment
 17669                                  ;	; 23/04/2019
 17670                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17671                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17672                                  ;;else
 17673                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17674                                  ;;
 17675                                  ;;endif ; ROMDOS
 17676                                  
 17677                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17678                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17679                                  
 17680                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17681                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17682                                  
 17683                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17684                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17685 00000556 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17686                                  
 17687 00000559 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17688                                  	; 02/11/2022
 17689 0000055D E85C06                  	call	off_to_para		; subtract this much from segment
 17690 00000560 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17691                                  
 17692                                  	; Current DOSCODE start address = dword [dosinit]
 17693                                  
 17694                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17695                                  ;; until it is determined whether it will be running in HIMEM or not.
 17696                                  
 17697                                  ;ifndef ROMDOS
 17698                                  
 17699                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17700                                  
 17701                                  	; 22/10/2022
 17702 00000565 8CC0                    	mov	ax,es
 17703 00000567 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17704 0000056A 8EC0                    	mov	es,ax
 17705 0000056C 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17706 00000571 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17707                                  
 17708                                  	;mov	si,BCODE_START ; mov si,30h
 17709                                  	; 09/12/2022
 17710 00000573 BE[3000]                	mov	si,BCODESTART
 17711                                  	; 02/11/2022
 17712 00000576 89F7                    	mov	di,si
 17713                                  	;mov	cx,BCODE_END   ; mov cx,1A60h
 17714                                  	;sub	cx,si
 17715                                  	; 29/09/2023
 17716                                  	BCODESIZE equ BCODEEND-BCODESTART
 17717 00000578 B9A019                  	mov	cx,BCODESIZE
 17718 0000057B D1E9                    	shr	cx,1
 17719 0000057D F3A5                    	rep	movsw			; move Bios_Code into place
 17720                                  
 17721 0000057F 8CC0                    	mov	ax,es			; tell it what segment it's in
 17722 00000581 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17723                                  
 17724                                  ;endif	; not ROMDOS
 17725                                  
 17726                                  ; now call dosinit while it's in its temporary home
 17727                                  
 17728                                  	;mov	ax,cs
 17729                                  	;mov	ds,ax	 
 17730                                  
 17731                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17732                                  
 17733                                  	; 22/10/2022
 17734                                  
 17735 00000586 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17736                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17737 0000058B 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17738                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17739                                  
 17740 00000590 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17741                                  
 17742 00000595 FA                      	cli
 17743 00000596 8CC8                    	mov	ax,cs
 17744 00000598 8ED0                    	mov	ss,ax
 17745                                  
 17746                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17747                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17748                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17749                                  ;SYSINIT:0532h:
 17750                                  
 17751                                  ; 22/10/2022
 17752                                  ; ----------------------------------------------------------------------------
 17753                                  ;SYSINIT:05A6h:
 17754                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17755                                  
 17756                                  	;mov	sp, 05A6h
 17757 0000059A BC9A05                  	mov     sp,locstack		; set stack
 17758                                  
 17759 0000059D FB                      	sti
 17760                                  
 17761                                  ;align 2
 17762                                  	; 30/03/2018
 17763                                  ;LOCSTACK:
 17764                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17765                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17766                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17767                                  
 17768                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17769                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17770                                  
 17771                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17772                                  ; at the top of memory, to its final location in low memory just above the
 17773                                  ; BIOS data. It will then build important DOS data structures in low 
 17774                                  ; memory following the DOS data. It returns (among many other things) the
 17775                                  ; new starting address of free memory.
 17776                                  
 17777 0000059E 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17778                                  			 ; es:di -> sysinitvars_ext
 17779                                  
 17780 000005A3 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17781                                  	
 17782                                  	; 11/12/2022
 17783                                  	; 22/03/2019
 17784 000005A8 0E                      	push	cs
 17785 000005A9 1F                      	pop	ds
 17786                                  	; 22/10/2022
 17787 000005AA A3[8102]                	mov	[hi_doscod_size],ax
 17788 000005AD 890E[7F02]              	mov	[lo_doscod_size],cx
 17789 000005B1 8916[7B02]              	mov	[dos_segreinit],dx
 17790                                  	
 17791                                  	; 11/12/2022
 17792                                  	; ds = cs
 17793                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17794                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17795                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17796                                  
 17797                                  	; 05/06/2018 - Retro DOS v3.0
 17798                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17799                                  
 17800                                  	; 11/12/2022
 17801                                  	; ds = cs
 17802                                  	; 22/10/2022
 17803                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17804 000005B5 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17805                                  	;mov	[cs:DOSINFO],ax
 17806 000005B8 A3[6B02]                	mov	[DOSINFO],ax
 17807                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17808 000005BB 268B4502                	mov	ax,[es:di+2]
 17809                                  	;mov	[cs:DOSINFO+2],ax
 17810 000005BF A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17811                                  
 17812                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17813 000005C2 268B4504                	mov	ax,[es:di+4]
 17814                                  	;mov	[cs:sysi_country],ax
 17815 000005C6 A3[7702]                	mov	[sysi_country],ax
 17816                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17817 000005C9 268B4506                	mov	ax,[es:di+6]
 17818                                  	;mov	[cs:sysi_country+2],ax
 17819 000005CD A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17820                                  
 17821                                  	; 20/04/2019
 17822                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17823                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17824                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17825                                  	; 22/10/2022
 17826                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17827                                  	;;;mov	[dos_segreinit+2],es
 17828                                  	;;mov	[dos_segreinit+2],ax
 17829                                  	;mov	[cs:dos_segreinit+2],ax
 17830                                  	; 11/12/2022
 17831                                  	; ds = cs
 17832 000005D0 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17833 000005D4 8C06[7D02]              	mov	[dos_segreinit+2],es
 17834                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17835                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17836                                  	;mov	[cs:dos_segreinit+2],es
 17837                                  
 17838                                  ; ----------------------------------------------------------------------------
 17839                                  
 17840                                  ;SYSINIT:0577h:
 17841                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17842                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17843                                  
 17844                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17845                                  ;------ Cover up RPL code with an arena
 17846                                  ;SYSINIT:05EBh:
 17847                                  	; 11/12/2022
 17848                                  	; ds = cs
 17849 000005D8 31DB                    	xor	bx,bx
 17850 000005DA 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17851                                  	;cmp	word [RPLMemTop],0
 17852                                  	;;cmp	word [cs:RPLMemTop],0
 17853 000005DE 7450                    	je	short NoRPLArena
 17854                                  
 17855                                  ;------ alloc all memory
 17856                                  
 17857                                  	; 11/12/2022
 17858                                  	;mov	bx,0FFFFh
 17859 000005E0 4B                      	dec	bx
 17860                                  	; bx = 0FFFFh
 17861 000005E1 B448                    	mov	ah,48h
 17862 000005E3 CD21                    	int	21h
 17863                                  			; DOS - 2+ - ALLOCATE MEMORY
 17864                                  			; BX = number of 16-byte paragraphs desired
 17865 000005E5 B448                    	mov	ah,48h
 17866 000005E7 CD21                    	int	21h
 17867                                  
 17868 000005E9 8EC0                    	mov	es,ax			; get it into ES and save it
 17869 000005EB 06                      	push	es
 17870                                  
 17871                                  ;------ resize upto RPL mem
 17872                                  
 17873                                  	; 11/12/2022
 17874                                  	; ds = cs
 17875                                  	;sub	ax,[cs:RPLMemTop]
 17876 000005EC 2B06[9402]              	sub	ax,[RPLMemTop]
 17877 000005F0 F7D8                    	neg	ax
 17878 000005F2 48                      	dec	ax
 17879 000005F3 89C3                    	mov	bx,ax
 17880 000005F5 B44A                    	mov	ah,4Ah
 17881 000005F7 CD21                    	int	21h
 17882                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17883                                  			; ES = segment address of block to change
 17884                                  			; BX = new size in paragraphs
 17885                                  
 17886                                  ;------ allocate the free (RPL MEM)
 17887                                  
 17888 000005F9 BBFFFF                  	mov	bx,0FFFFh
 17889 000005FC B448                    	mov	ah,48h
 17890 000005FE CD21                    	int	21h
 17891 00000600 B448                    	mov	ah,48h
 17892 00000602 CD21                    	int	21h
 17893                                  
 17894                                  ;----- mark that it belongs to RPL
 17895                                  
 17896 00000604 48                      	dec	ax
 17897 00000605 8EC0                    	mov	es,ax
 17898                                  	;mov	word [es:arena_owner],8
 17899 00000607 26C70601000800          	mov	word [es:1],8
 17900                                  	;mov	word [es:arena_name],'RP'
 17901 0000060E 26C70608005250          	mov	word [es:8],'RP'
 17902                                  	;mov	word [es:arena_name+2],'L'
 17903 00000615 26C7060A004C00          	mov	word [es:10],'L'
 17904                                  	;mov	word [es:arena_name+4],0
 17905 0000061C 26C7060C000000          	mov	word [es:12],0
 17906                                  	;mov	word [es:arena_name+6],0
 17907 00000623 26C7060E000000          	mov	word [es:14],0	
 17908                                  
 17909 0000062A 07                              pop     es                      ; get back ptr to first block
 17910 0000062B B449                            mov     ah,49h	; Dealloc	; and free it
 17911 0000062D CD21                    	int	21h		
 17912                                  					; DOS - 2+ - FREE MEMORY
 17913                                  					; ES = segment address of area to be freed
 17914                                  	; 11/12/2022
 17915 0000062F F8                      	clc
 17916                                  
 17917                                  ; ----------------------------------------------------------------------------
 17918                                  
 17919                                  NoRPLArena:
 17920                                  	; 11/12/2022
 17921                                  	; ds = cs
 17922                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17923 00000630 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17924                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17925                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17926                                  
 17927                                  	; 11/12/2022
 17928                                  	;clc				; get the extended memory size
 17929                                  
 17930                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17931                                  ;	if the function reports an error do nothing else store the extended
 17932                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17933                                  ;	currently pointed to by es:di. use the offsets specified in the
 17934                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17935                                  
 17936 00000634 B488                    	mov	ah,88h
 17937 00000636 CD15                    	int	15h			; check extended memory size
 17938 00000638 720B                    	jc	short no_ext_memory
 17939                                  			; Get Extended Memory Size
 17940                                  			; Return: CF clear on success
 17941                                  			; AX = size of memory above 1M in K	
 17942                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17943                                  	; 22/10/2022
 17944 0000063A 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17945 0000063E 09C0                    	or	ax,ax
 17946 00000640 7403                    	jz	short no_ext_memory
 17947 00000642 E8F004                  	call	ClrVDISKHeader
 17948                                  no_ext_memory:
 17949                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17950 00000645 268B4510                	mov	ax,[es:di+10h]
 17951                                  	;add	ax,bufinsiz
 17952 00000649 83C014                  	add	ax,20			; size of buffer header
 17953                                  	; 11/12/2022
 17954                                  	; ds = cs
 17955 0000064C A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17956                                  	;mov	[cs:singlebuffersize],ax	
 17957                                  	; 11/12/2022
 17958 0000064F A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17959                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17960                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17961 00000652 26884543                	mov	[es:di+43h],al
 17962                                  
 17963                                  ; determine if 386 system...
 17964                                  
 17965                                  	;get_cpu_type			; macro to determine cpu type
 17966                                  
 17967                                  get_cpu_type:
 17968                                  	; 11/12/2022
 17969 00000656 9C                      	pushf
 17970                                  	;push	bx
 17971                                  	;xor	bx,bx
 17972                                  	; 11/12/2022
 17973                                  	;xor	cx,cx
 17974                                  	;
 17975 00000657 31C0                    	xor	ax,ax
 17976                                  	; ax = 0
 17977 00000659 50                      	push    ax
 17978 0000065A 9D                      	popf
 17979 0000065B 9C                      	pushf
 17980 0000065C 58                      	pop	ax
 17981 0000065D 2500F0                  	and	ax,0F000h
 17982                                  	;cmp	ax,0F000h
 17983 00000660 80FCF0                  	cmp	ah,0F0h 
 17984 00000663 7410                    	je	short cpu_8086
 17985                                  	;mov	ax,0F000h
 17986 00000665 B4F0                    	mov	ah,0F0h
 17987                                  	; ax = 0F000h
 17988 00000667 50                      	push	ax
 17989 00000668 9D                      	popf
 17990 00000669 9C                      	pushf
 17991 0000066A 58                      	pop	ax
 17992                                  	;and	ax,0F000h
 17993 0000066B 80E4F0                  	and	ah,0F0h
 17994 0000066E 7405                    	jz	short cpu_286
 17995                                  cpu_386:
 17996                                  	; 11/12/2022
 17997                                  	;;inc	bx
 17998                                  	;inc	cx
 17999                                  	; 11/12/2022
 18000                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 18001 00000670 26C6454401              	mov	byte [es:di+44h],1
 18002                                  cpu_286:
 18003                                  	;;;inc	bx
 18004                                  	;;inc	cx
 18005                                  cpu_8086:
 18006                                  	; 11/12/2022
 18007                                  	;;mov	ax,bx	
 18008                                  	;pop	bx
 18009 00000675 9D                      	popf
 18010                                  
 18011                                  	;...
 18012                                  
 18013                                  	; 11/12/2022
 18014                                  	;or	cl,cl
 18015                                  	;jz	short not_386_system
 18016                                  	; 11/12/202
 18017                                  	;cmp	cl,2
 18018                                  	;;cmp	ax,2			; is it a 386?
 18019                                  	;jne	short not_386_system	; no: don't mess with flag
 18020                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 18021                                  	; 11/12/2022
 18022                                  	; 22/10/2022
 18023                                  	;mov	byte [es:di+44h],1
 18024                                  not_386_system:
 18025                                  	;mov	al,[es:di+SYSI_NUMIO]
 18026 00000676 268A4520                	mov	al,[es:di+20h]
 18027                                  	; 11/12/2022
 18028                                  	; ds = cs
 18029 0000067A A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 18030                                  	;mov	[cs:drivenumber],al
 18031                                  
 18032 0000067D 8CC8                    	mov	ax,cs
 18033 0000067F 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 18034                                  	; 11/12/2022
 18035                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 18036                                  	;;mov	cx,[cs:singlebuffersize]
 18037                                  	;shr	cx,1			
 18038                                  	;shr	cx,1			; divide size by 16...
 18039                                  	;shr	cx,1
 18040                                  	;shr	cx,1			; ...to get paragraphs...
 18041                                  	;inc	cx			; ... and round up
 18042                                  	; 11/12/2022
 18043 00000682 8B1E[9B02]              	mov	bx,[singlebuffersize]
 18044 00000686 B104                    	mov	cl,4
 18045 00000688 D3EB                    	shr	bx,cl
 18046 0000068A 43                      	inc	bx
 18047                                  
 18048                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 18049                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 18050                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 18051                                  ;	  it is probably safe to assume that the sector size always will be.
 18052                                  ;
 18053                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 18054                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 18055                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 18056                                  ;	  other code from ever causing a problem???
 18057                                  
 18058                                  	; 11/12/2022
 18059 0000068B 29D8                    	sub	ax,bx
 18060                                  	;sub	ax,cx
 18061 0000068D A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 18062                                  	; 22/10/2022
 18063                                  	;mov	[cs:top_of_cdss],ax
 18064                                  
 18065                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 18066                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 18067                                  ;	for allocating memory for MagicDrv.
 18068                                  
 18069 00000690 06                      	push	es			; preserve pointer to dosinfo
 18070 00000691 57                      	push	di
 18071                                  
 18072                                  	; 22/10/2022
 18073                                  ;	mov	cx,ax			; save pointer for buffer
 18074                                  ;
 18075                                  ;;	now allocate space for 26 CDSs
 18076                                  ;
 18077                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 18078                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 18079                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 18080                                  
 18081                                  ; setup and initialize the temporary buffer at cx
 18082                                  
 18083                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 18084 00000692 26C47D12                	les	di,[es:di+12h]
 18085                                  	; 11/12/2022
 18086 00000696 31DB                    	xor	bx,bx
 18087                                  	;xor	ax,ax
 18088                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 18089                                  	;mov	word [es:di+4],0
 18090 00000698 26895D04                	mov	[es:di+4],bx ; 0
 18091                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 18092                                  	;mov	word [es:di],0
 18093 0000069C 26891D                  	mov	[es:di],bx ; 0
 18094                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 18095                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 18096 0000069F 26894502                	mov	[es:di+2],ax
 18097                                  
 18098                                  	;mov	es,cx
 18099 000006A3 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 18100                                  
 18101                                  	; 11/12/2022
 18102                                  	;xor	ax,ax
 18103                                  	;mov	di,ax			; es:di -> single buffer
 18104 000006A5 89DF                    	mov	di,bx
 18105                                  	; di = 0
 18106                                  
 18107                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 18108                                  	; 11/12/2022
 18109                                  	;mov	[es:di],ax ; 0
 18110 000006A7 26891D                  	mov	[es:di],bx ; 0
 18111                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 18112                                  	; 11/12/2022
 18113                                  	;mov	[es:di+2],ax ; 0
 18114 000006AA 26895D02                	mov	[es:di+2],bx ; 0 
 18115                                  
 18116                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 18117                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 18118                                  
 18119                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 18120 000006AE 26C74504FF00            	mov	word [es:di+4],00FFh
 18121                                  ;SYSINIT:06E6h
 18122                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 18123                                  	;mov	word [es:di+6],0
 18124                                  	; 11/12/2022
 18125                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 18126 000006B4 26895D06                	mov	[es:di+6],bx ; 0
 18127                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 18128                                  	;mov	word [es:di+8],0
 18129                                  	; 11/12/2022
 18130                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 18131 000006B8 26895D08                	mov	[es:di+8],bx ; 0
 18132                                  
 18133 000006BC 5F                      	pop	di			; restore pointer to DOSINFO data
 18134 000006BD 07                      	pop	es
 18135                                  
 18136                                  	; 11/12/2022
 18137                                  	; ds = cs
 18138                                  	; 22/10/2022
 18139                                  	;push	cs
 18140                                  	;pop	ds
 18141                                  
 18142 000006BE E80405                  	call	TempCDS 		; set up cdss so re_init and sysinit
 18143                                  					;  can make disk system calls
 18144                                  					; tempcds trashes ds
 18145                                  	; 10/05/2019
 18146 000006C1 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 18147                                  
 18148                                  	;if not ibmjapver
 18149                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 18150                                  	;endif
 18151                                  
 18152                                  	; 22/10/2022
 18153                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 18154                                  	;call	far ptr 70h:89Bh
 18155 000006C6 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 18156                                  
 18157 000006CB FB                      	sti				; ints ok
 18158 000006CC FC                      	cld				; make sure
 18159                                  
 18160                                  ; 23/03/2019
 18161                                  
 18162                                  ;SYSINIT:069Ch
 18163                                  
 18164                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 18165                                  ; of the way by putting it just below sysinit at end of memory.
 18166                                  
 18167 000006CD 8CCB                    	mov	bx,cs
 18168 000006CF 83EB10                  	sub	bx,10h
 18169 000006D2 8EC3                    	mov	es,bx
 18170 000006D4 31F6                    	xor	si,si
 18171 000006D6 89F7                    	mov	di,si
 18172 000006D8 B98000                  	mov	cx,128
 18173 000006DB F3A5                    	rep	movsw
 18174                                  
 18175                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 18176                                  	; 22/10/2022
 18177 000006DD 268C063600              	mov	[es:36h],es
 18178                                  
 18179                                   	; Set Process Data Block - Program Segment Prefix address
 18180                                  	; BX = PDB/PSP segment
 18181 000006E2 B450                            mov	ah,50h ; SET_CURRENT_PDB
 18182 000006E4 CD21                    	int	21h			; tell DOS we moved it
 18183                                  			; DOS - 2+ internal - SET PSP SEGMENT
 18184                                  			; BX = segment address of new PSP
 18185                                  	; 22/10/2022
 18186                                  	; 27/03/2019
 18187 000006E6 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 18188                                  
 18189 000006E7 0E                      	push	cs	
 18190 000006E8 1F                      	pop	ds
 18191                                  
 18192                                  	; set up temp. critical error handler
 18193 000006E9 BA[B232]                	mov	dx,int24		; set up int 24 handler
 18194                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 18195                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 18196 000006EC B82425                  	mov	ax,2524h
 18197 000006EF CD21                    	int	21h
 18198                                  
 18199 000006F1 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 18200 000006F6 7405                            je      short no_err		   ;  N: continue            M029
 18201 000006F8 BA[B037]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 18202                                          ; 22/10/2022
 18203                                  	;call	print 			   ;		             M029
 18204                                  	; 12/12/2022
 18205 000006FB EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 18206                                  no_err:
 18207                                  	; 12/05/2019
 18208                                  	;----------------------------------------------
 18209                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 18210                                  	; 22/10/2022 - Retro DOS v4.0
 18211                                  	; 12/12/2022
 18212 000006FD BA[B632]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 18213                                  p_dosinit_msg:
 18214 00000700 E88A2B                  	call	print			; Print message
 18215                                  	;----------------------------------------------
 18216                                  	
 18217                                  	; 11/12/2022
 18218                                  	; 22/10/2022
 18219                                  	; 23/03/2019 - Retro DOS v4.0
 18220                                  	;pop	ds			; start of free memory
 18221                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 18222                                  	
 18223                                  	; 11/12/2022
 18224                                  	; 27/03/2019
 18225 00000703 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 18226 00000707 1F                      	pop	ds ; */
 18227                                  
 18228 00000708 08D2                    	or	dl,dl
 18229                                  	;jz	short nodrvset		; bios didn't say
 18230 0000070A 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 18231                                  	;dec	dl			; A = 0
 18232                                  	; 18/12/2022
 18233 0000070C 4A                      	dec	dx
 18234 0000070D B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 18235 0000070F CD21                    	int	21h			; select the disk
 18236                                  			; DOS - SELECT DISK
 18237                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 18238                                  			; Return: AL = number of logical drives
 18239                                  nodrvset:
 18240                                  	;ifdef	dblspace_hooks
 18241                                  	;	....
 18242                                  	;	....
 18243                                  	;endif	
 18244                                  
 18245                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 18246                                  
 18247                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 18248                                  ; ----------------------------------------------------------------------------
 18249                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 18250                                  
 18251                                  ProcessConfig:
 18252                                  	;; ds = cs ; 27/03/2019
 18253                                  	; 11/12/2022
 18254                                  	; ds <> cs	
 18255                                  
 18256                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 18257                                  
 18258 00000711 E87F17                  	call	doconf			; do pre-scan for dos=high/low
 18259                                  
 18260                                  	; 11/12/2022
 18261                                  	; 27/03/2019
 18262                                  	; ds = cs (at return from doconf)
 18263                                  
 18264                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 18265                                  ; It will either be relocated to low memory, above the DOS data structures,
 18266                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 18267                                  ; code entry points will be located in low memory. Dos_segreinit is used
 18268                                  ; to tell the DOS data where the code has been placed, and to install the
 18269                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 18270                                  ; must first initialize it in its present location and load the installable
 18271                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 18272                                  ; relocate the DOS code into HiMem.
 18273                                  ;
 18274                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 18275                                  ; to install the low memory stub (this must be done before allowing any
 18276                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 18277                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 18278                                  ; been patched.
 18279                                  
 18280                                  	; 22/10/2022 - Retro DOS v4.0
 18281                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 18282                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 18283                                  	; 11/12/2022
 18284 00000714 803E[6A02]00            	cmp	byte [runhigh],0
 18285 00000719 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 18286                                  
 18287                                  ;------ user chose to load high
 18288                                  
 18289                                  	; 22/10/2022
 18290                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 18291                                  	; 11/12/2022
 18292                                  	; ds = cs
 18293 0000071B 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18294                                  
 18295                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18296                                  	; 27/03/2019
 18297                                  	;;mov	es,[FINAL_DOS_LOCATION]
 18298                                  
 18299 0000071F 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 18300                                  	; 11/12/2022
 18301                                  	; ds = cs
 18302                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18303 00000721 FF1E[7B02]              	call	far [dos_segreinit]
 18304                                  
 18305 00000725 EB10                    	jmp	short do_multi_pass
 18306                                  
 18307                                  ;------ User chose to load dos low
 18308                                  
 18309                                  dont_install_stub:
 18310                                  	; 22/10/2022
 18311 00000727 31DB                    	xor	bx,bx			; M012
 18312                                  					; don't use int 21 call to alloc mem
 18313 00000729 E8D601                  	call	MovDOSLo		; move it !
 18314                                  
 18315 0000072C B80100                  	mov	ax,1			; dont install stub
 18316                                  	; 11/12/2022
 18317                                  	; ds = cs
 18318 0000072F 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18319                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 18320                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18321                                  	; 27/03/2019
 18322                                  ;do_multi_pass:
 18323                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 18324                                  
 18325                                  	; 11/12/2022
 18326                                  	; ds =cs
 18327                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 18328 00000733 FF1E[7B02]              	call	far [dos_segreinit]
 18329                                  do_multi_pass:
 18330 00000737 E81201                  	call	AllocFreeMem		; allocate all the free mem
 18331                                  					; & update [memhi] & [area]
 18332                                  					; start of free memory.
 18333                                  	;ifdef	dblspace_hooks
 18334                                  	;mov	bx,0			; magic backdoor to place int hooks
 18335                                  	;call	cs:MagicBackdoor
 18336                                  	;endif
 18337                                  
 18338                                  ; Now, process config.sys some more.  
 18339                                  ; Load the device drivers and install programs
 18340                                  
 18341                                  	; 22/10/2022
 18342                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 18343                                  	; 11/12/2022
 18344                                  	; ds = cs
 18345 0000073A FE06[4903]              	inc	byte [multi_pass_id]
 18346 0000073E E8E517                  	call	multi_pass		; load device drivers
 18347 00000741 E87924                  	call	ShrinkUMB
 18348 00000744 E89F24                  	call	UnlinkUMB		; unlink all UMBs	;M002
 18349                                  	; 02/11/2022
 18350                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 18351                                  	; 11/12/2022
 18352                                  	; ds = cs
 18353 00000747 FE06[4903]              	inc	byte [multi_pass_id]
 18354 0000074B E8D817                  	call	multi_pass		; was load ifs (now does nothing)
 18355                                  
 18356                                  	;ifdef	dblspace_hooks
 18357                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 18358                                  	;endif
 18359                                  
 18360                                  	; ds = cs
 18361                                  	
 18362 0000074E E80A05                  	call	endfile			; setup fcbs, files, buffers etc
 18363                                  
 18364                                  	;ifdef	dblspace_hooks
 18365                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 18366                                  	;endif
 18367                                  
 18368                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 18369                                  ;to device drivers. This has been moved up to this point to avoid problems 
 18370                                  ;with overlays called from installed programs
 18371                                  
 18372                                  	; 11/12/2022
 18373                                  	; ds = cs
 18374                                  
 18375                                  	;;mov	ax,Bios_Data ; 0070h
 18376                                  	;mov	ax,KERNEL_SEGMENT
 18377                                  	; 21/10/2022
 18378 00000751 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 18379 00000754 8EC0                    	mov	es,ax			; point ES to bios data
 18380                                  
 18381 00000756 26C606[FA08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 18382                                  
 18383                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18384                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 18385                                  	;test	byte [cs:install_flag],1
 18386                                  	; 11/12/2022
 18387                                  	; ds = cs
 18388 0000075C F606[4A03]01            	test	byte [install_flag],1
 18389                                  	;test	byte [cs:install_flag],have_install_cmd
 18390                                  					; are there install commands?
 18391 00000761 7407                    	jz	short dolast		; no, no need for further processing
 18392                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 18393                                  	; 11/12/2022
 18394                                  	; ds =cs
 18395 00000763 FE06[4903]              	inc	byte [multi_pass_id]
 18396 00000767 E8BC17                  	call	multi_pass		; execute install= commands
 18397                                  
 18398                                  dolast:
 18399                                  	
 18400                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 18401                                  ;  free the confbot area used for config.sys and sysinit itself.
 18402                                  
 18403                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 18404                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 18405                                  ; anything, but just set up the ROM area for suballocation (or print
 18406                                  ; a message if HiMem is not available).
 18407                                  ;
 18408                                  ; There is also this little hack for CPM style DOS calls that needs to
 18409                                  ; be done when A20 is set...
 18410                                  
 18411                                  	; 11/12/2022
 18412                                  	; ds = cs
 18413                                  
 18414                                  	; 22/10/2022
 18415                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 18416                                  	; 11/12/2022
 18417 0000076A 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18418 0000076F 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 18419 00000771 E83D01                  	call	LoadDOSHiOrLo
 18420                                  _@@_:
 18421                                  	;cmp	byte [cs:runhigh],0	; are we running low
 18422                                  	; 11/12/2022
 18423                                  	; ds = cs
 18424 00000774 803E[6A02]00            	cmp	byte [runhigh],0
 18425                                  	;je	short _@@@
 18426 00000779 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 18427 0000077B E82804                  	call	CPMHack			; make ffff:d0 same as 0:c0
 18428                                  _@@@:
 18429                                  
 18430                                  ; We are now done with CONFIG.SYS processing
 18431                                  
 18432                                  ConfigDone:
 18433                                  	; 12/12/2022
 18434                                  	; 22/10/2022
 18435                                  	;mov	byte [cs:donotshownum],1 
 18436                                  					; done with config.sys.
 18437                                  					; do not show line number message.
 18438                                  	;mov	es,[cs:area]
 18439                                  	; 12/12/2022
 18440                                  	; ds = cs
 18441                                  	; 27/03/2019
 18442 0000077E C606[D103]01            	mov	byte [donotshownum],1
 18443 00000783 8E06[E403]              	mov	es,[area]
 18444                                  
 18445 00000787 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 18446 00000789 CD21                    	int	21h
 18447                                  			; DOS - 2+ - FREE MEMORY
 18448                                  			; ES = segment address of area to be freed
 18449                                  
 18450                                  	; 22/10/2022
 18451                                  	;test	word [cs:install_flag],2
 18452                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 18453                                  	;test	byte [cs:install_flag],has_installed
 18454                                  	; 11/12/2022
 18455                                  	; ds = cs
 18456 0000078B F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 18457                                  	;test	byte [install_flag],has_installed
 18458 00000790 741F                    	jz	short skip_free_sysinitbase ; no.
 18459                                  
 18460                                  ; set block from the old_area with impossible_owner_size.
 18461                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18462                                  ; handle install= command.
 18463                                  
 18464                                  	; 12/12/2022
 18465                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18466                                  	;push	bx
 18467                                  	
 18468                                  	; 22/10/2022
 18469                                  	;mov	es,[cs:old_area]
 18470                                  	;mov	bx,[cs:impossible_owner_size]
 18471                                  	; 12/12/2022
 18472                                  	; ds = cs
 18473 00000792 8E06[DA03]              	mov	es,[old_area]
 18474 00000796 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 18475                                  	
 18476 0000079A B44A                    	mov	ah,4Ah ; SETBLOCK
 18477 0000079C CD21                    	int	21h
 18478                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18479                                  			; ES = segment address of block to change
 18480                                  			; BX = new size in paragraphs
 18481 0000079E 8CC0                    	mov	ax,es
 18482 000007A0 48                      	dec	ax
 18483 000007A1 8EC0                    	mov	es,ax			; point to arena
 18484                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18485 000007A3 26C70601000800          	mov	word [es:1],8
 18486                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18487 000007AA 26C70608005344          	mov	word [es:8],'SD'
 18488                                  	
 18489                                  	; 12/12/2022
 18490                                  	;pop	bx
 18491                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18492                                  
 18493                                  skip_free_sysinitbase:
 18494                                  	; 22/10/2022
 18495                                  	;cmp	byte [cs:runhigh],0
 18496                                  	; 12/12/2022
 18497                                  	; ds = cs
 18498 000007B1 803E[6A02]00            	cmp	byte [runhigh],0	
 18499 000007B6 7403                    	je	short _@@@@
 18500                                  
 18501 000007B8 E8D202                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18502                                  
 18503                                  ; ----------------------------------------------------------------------------
 18504                                  
 18505                                  _@@@@:
 18506                                  	; 12/12/2022
 18507                                  	; ds = cs
 18508                                  	; 22/10/2022
 18509                                  	; 27/03/2019
 18510                                  	;push	cs
 18511                                  	;pop	ds			; point DS to sysinitseg
 18512                                  
 18513                                  ; set up the parameters for command
 18514                                  
 18515                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18516                                  ;;ifdef  MULTI_CONFIG
 18517                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18518                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18519                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18520                                  ;	; !!!
 18521                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18522                                  ;       ; !!!
 18523                                  ;	call    disable_autoexec        ; no, we should disable it
 18524                                  ;process_autoexec:
 18525                                  ;;endif	; !!!
 18526                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18527                                  ;	; !!!
 18528                                  
 18529                                  	; 22/10/2022 
 18530                                  	;mov     cl,[command_line]
 18531                                          ;mov     ch,0
 18532                                          ;inc     cx
 18533                                          ;mov     si,command_line	
 18534                                  	;add     si,cx
 18535                                          ;mov     byte [si],cr	; cr-terminate command line
 18536                                  
 18537                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18538                                  	; (SYSINIT:0809h)
 18539                                  	
 18540                                  	;mov	si,(offset command_line+1)
 18541 000007BB BE[AA02]                	mov	si,command_line+1
 18542 000007BE 1E                      	push    ds
 18543 000007BF 07                      	pop     es
 18544 000007C0 89F7                    	mov     di,si
 18545 000007C2 B1FF                    	mov     cl,0FFh ; -1
 18546                                  _@_loop:
 18547 000007C4 FEC1                    	inc     cl ; +1
 18548 000007C6 AC                      	lodsb
 18549 000007C7 AA                      	stosb
 18550 000007C8 08C0                    	or      al,al
 18551 000007CA 75F8                    	jnz     short _@_loop
 18552 000007CC 4F                      	dec     di
 18553 000007CD B00D                    	mov     al,0Dh
 18554 000007CF AA                      	stosb			; cr-terminate command line
 18555 000007D0 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 18556                                  
 18557                                  ; ----------------------------------------------------------------------------
 18558                                  
 18559                                  ;   Once we get to this point, the above code, which is below "retry"
 18560                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18561                                  ;   which follow....)
 18562                                  
 18563                                  retry:
 18564 000007D4 BA[6333]                	mov	dx,commnd	; now pointing to file description
 18565                                  
 18566                                  ; we are going to open the command interpreter and size it as is done in
 18567                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18568                                  ; there is not enough room for the command interpreter,exec will probably
 18569                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18570                                  ; here to catch it. this code is not perfect (for instance .exe command
 18571                                  ; interpreters are possible) because it does its sizing based on the
 18572                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18573                                  ; correctness to be usable.
 18574                                  
 18575                                  ; first, find out where the command interpreter is going to go.
 18576                                  
 18577 000007D7 52                      	push	dx		; save pointer to name
 18578 000007D8 BBFFFF                  	mov	bx,0FFFFh
 18579 000007DB B448                    	mov	ah,48h	; ALLOC
 18580 000007DD CD21                            int     21h             ; get biggest piece
 18581 000007DF B448                    	mov	ah,48h	; ALLOC
 18582 000007E1 CD21                    	int	21h		; second time gets it
 18583 000007E3 7243                    	jc	short memerrjx	; oooops
 18584                                  
 18585 000007E5 8EC0                    	mov	es,ax
 18586 000007E7 B449                    	mov	ah,49h	; DEALLOC
 18587 000007E9 CD21                    	int	21h		; give it right back
 18588 000007EB 89DD                    	mov	bp,bx
 18589                                  
 18590                                  ; es:0 points to block,and bp is the size of the block in para.
 18591                                  
 18592                                  ; we will now adjust the size in bp down by the size of sysinit.
 18593                                  ; we need to do this because exec might get upset if some of the exec
 18594                                  ; data in sysinit is overlayed during the exec.
 18595                                  
 18596                                  	; 22/10/2022
 18597                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18598 000007ED 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18599 000007F1 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18600                                  
 18601                                  ; Note that the "config_wrkseg" environment data is a segment in
 18602                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18603                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18604                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18605                                  ; we need to make sure that there's no way Exec will stomp on that data
 18606                                  ; before it can copy it, and one way to do that is to make the available
 18607                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18608                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18609                                  ; of the current sysinit CS....
 18610                                  ;
 18611                                  ; The reason I use the term "paranoid" is because this code should have
 18612                                  ; slid the data required by Exec up to the very top of memory, because as
 18613                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18614                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18615                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18616                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18617                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18618                                  
 18619                                  	; 22/10/2022
 18620                                  	;mov	cx,[config_envlen]
 18621                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18622                                          ;mov	ax,[config_wrkseg]
 18623                                  ;no_env:
 18624                                  	; 22/10/2022
 18625                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18626 000007F3 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18627 000007F5 83C311                  	add	bx,11h		; add the sysinit php
 18628 000007F8 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18629 000007FA 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18630                                  
 18631                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18632 000007FC B8003D                          mov	ax,3D00h
 18633 000007FF F9                      	stc                     ; in case of int 24
 18634 00000800 CD21                    	int	21h
 18635 00000802 7240                    	jc	short comerr	; ooops
 18636                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18637                                  			; DS:DX -> ASCIZ filename
 18638                                  			; AL = access mode
 18639                                  			; 0 - read
 18640                                  	; 22/10/2022
 18641                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18642 00000804 89C3                            mov     bx,ax           ; handle in bx
 18643                                  
 18644                                  ;   If the standard command interpreter is being used, verify it is correct
 18645                                  
 18646                                  	; 22/10/2022
 18647                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18648                                  	;jne	short skip_validation ; yes
 18649                                  	;mov	dx,retry-4
 18650                                  	;mov	cx,4		;
 18651                                  	;mov	ah,READ		;
 18652                                  	;int	21h		;
 18653                                  	;cmp	byte [retry-4],0E9h
 18654                                  	;jne	short comerr
 18655                                  	;; 20/04/2019 - Retro DOS v4.0
 18656                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18657                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18658                                  	;jne	short comerr	;
 18659                                  
 18660                                  ;skip_validation:
 18661                                  	; 22/10/2022
 18662                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18663 00000806 31C9                    	xor	cx,cx
 18664 00000808 31D2                    	xor	dx,dx
 18665                                  	;mov	ax,(LSEEK<<8)|2
 18666 0000080A B80242                  	mov	ax,4202h
 18667 0000080D F9                      	stc			;in case of int 24
 18668 0000080E CD21                    	int	21h		; get file size in dx:ax
 18669 00000810 7232                    	jc	short comerr
 18670                                  				; convert size in dx:ax to para in ax
 18671 00000812 83C00F                  	add	ax,15		; round up size for conversion to para
 18672 00000815 83D200                  	adc	dx,0
 18673 00000818 E8A103                  	call	off_to_para
 18674 0000081B B10C                    	mov	cl,12
 18675 0000081D D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18676 0000081F 09D0                    	or	ax,dx		; ax is now # of para for file
 18677 00000821 83C010                  	add	ax,10h		; 100h byte php
 18678 00000824 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18679 00000826 7203                    	jb	short okld	; jump if yes.
 18680                                  
 18681                                  	; 22/10/2022
 18682                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18683                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18684                                  	; 02/11/2022
 18685                                  	;jmp	mem_err
 18686                                  	; 11/12/2022
 18687                                  	; ds = cs
 18688 00000828 E92B28                  	jmp	mem_err2
 18689                                  
 18690                                  ;memerrjx:
 18691                                  ;	mov	dx,badmem
 18692                                  ;	call	print
 18693                                  ;       jmp     short continue
 18694                                  
 18695                                  okld:
 18696 0000082B B43E                    	mov	ah,3Eh ; CLOSE
 18697 0000082D CD21                    	int	21h		; close file
 18698                                  
 18699                                  	; 22/10/2022
 18700 0000082F 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18701                                  
 18702                                  	; 24/03/2019
 18703                                  
 18704 00000830 0E                      	push	cs		; point es to sysinitseg
 18705 00000831 07                      	pop	es
 18706 00000832 BB[3B03]                        mov     bx,COMEXE	; point to exec block
 18707                                  	; 22/10/2022
 18708                                  	;pop	dx              ; recover pointer to name
 18709                                  
 18710                                  ;;ifdef	MULTI_CONFIG
 18711                                  
 18712                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18713                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18714                                  ;   selection was made (in which case the CONFIG environment variable will be
 18715                                  ;   set to that selection).
 18716                                  
 18717                                  	; 23/10/2022
 18718                                  	;mov	cx,[config_envlen]
 18719                                  	;jcxz	no_envdata
 18720                                          ;mov	cx,[config_wrkseg]
 18721                                  ;no_envdata:
 18722                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18723                                  	;mov	[bx],cx
 18724                                  
 18725                                  ;;endif	;MULTI_CONFIG
 18726                                  
 18727                                  	; 23/10/2022
 18728                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18729                                  
 18730                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18731 00000835 8C4F04                  	mov	[bx+4],cs
 18732                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18733 00000838 8C4F08                  	mov	[bx+8],cs
 18734                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18735 0000083B 8C4F0C                  	mov	[bx+12],cs
 18736                                  
 18737                                  ;mov	ax,(EXEC<<8) + 0
 18738                                  	; 23/10/2022
 18739                                  	;xor	ax,ax
 18740                                  	;mov	ah,4Bh
 18741                                  	; 14/08/2023
 18742                                  	;mov	ax,4B00h
 18743 0000083E B8004B                  	mov	ax,(EXEC<<8)       
 18744                                  
 18745 00000841 F9                      	stc                     ; in case of int 24
 18746 00000842 CD21                            int     21h             ; go start up command
 18747                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18748                                  			; DS:DX -> ASCIZ filename
 18749                                  			; ES:BX -> parameter block
 18750                                  			; AL = subfunc: load & execute program
 18751                                  	;push	cs
 18752                                  	;pop	ds
 18753                                  
 18754                                  	; 23/10/2022
 18755                                  	;push	dx		; push to balance fall-through pop
 18756                                  
 18757                                  ; note fall through if exec returns (an error)
 18758                                  comerr:
 18759                                  	; 23/10/2022
 18760                                  ;;ifdef	MULTI_CONFIG
 18761                                  	;cmp	byte [commnd4],0
 18762                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18763                                  	;cmp	byte [newcmd],0
 18764                                  	;je	short continue	; don't print err msg for defaults just yet
 18765                                  ;comerr2:
 18766                                  ;;endif
 18767 00000844 BA[B336]                        mov     dx,badcom	; want to print command error
 18768 00000847 E8172A                  	call	badfil
 18769                                  continue:
 18770                                  	; 23/10/2022
 18771                                  	;pop	dx
 18772                                  
 18773                                  ;;ifndef MULTI_CONFIG
 18774                                  	;jmp	stall
 18775                                  	; 24/10/2022
 18776                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18777 0000084A EBFE                    	jmp	short stall
 18778                                  ;;else
 18779                                  	; 23/10/2022
 18780                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18781                                  	;int	21h             ;
 18782                                  	;add	al,'A'          ;
 18783                                  	;mov	dl,al           ; DL == default drive letter
 18784                                  	;mov	si,commnd2
 18785                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18786                                  	;jne	short do_def2	; then try the 2nd alternate;
 18787                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18788                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18789                                  ;do_def2:			
 18790                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18791                                          ;jne	short do_alt    ; no
 18792                                  ;do_def3:
 18793                                  	;mov	si,commnd3
 18794                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18795                                  	;jne	short do_alt	; no
 18796                                  	;mov	si,commnd4
 18797                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18798                                  	;jne	short do_alt	; no
 18799                                  	;push	dx              ;
 18800                                  	;mov	dx,badcomprmpt
 18801                                  	;call	print		;
 18802                                  	;pop	dx              ; recover default drive letter in DL
 18803                                  ;request_input:			;
 18804                                  	;mov	ah,STD_CON_OUTPUT
 18805                                  	;int	21h             ;
 18806                                  	;push	dx              ;
 18807                                  	;mov	dl,'>'          ;
 18808                                  	;int	21h             ;
 18809                                  	;mov	bl,[tmplate+1]	;
 18810                                  	;mov	bh,0            ;
 18811                                  	;mov	byte [commnd+bx],0Dh
 18812                                  	;mov	dx,tmplate
 18813                                  	;mov	ah,STD_CON_STRING_INPUT
 18814                                  	;int	21h             ; read a line of input
 18815                                  	;mov	dx,crlfm	;
 18816                                  	;call	print           ;
 18817                                  	;pop	dx              ;
 18818                                  	;mov	bl,[tmplate+1]	;
 18819                                  	;or	bl,bl           ; was anything typed?
 18820                                  	;jz	short request_input ;
 18821                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18822                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18823                                  	;mov	word [command_line],0D00h
 18824                                  	;jmp	short do_exec   ;
 18825                                  ;do_alt:
 18826                                  	;push	ds
 18827                                  	;pop	es
 18828                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18829                                  	;mov	di,commnd	;
 18830                                  ;do_alt1:
 18831                                  	;lodsb			; copy the alternate, zapping it as we go,
 18832                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18833                                  	;stosb 			;
 18834                                  	;or	al,al		;
 18835                                  	;jnz	short do_alt1	;
 18836                                  	;mov	di,command_line
 18837                                  	;cmp	byte [si+2],':'
 18838                                  	;jne	short do_alt2	;
 18839                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18840                                  ;do_alt2:			;
 18841                                  	;lodsb			;
 18842                                  	;stosb			;
 18843                                  	;or	al,al           ;
 18844                                  	;jnz	short do_alt2   ;
 18845                                  	;mov	byte [di-1],cr
 18846                                  
 18847                                  ;;   Last but not least, see if we need to call disable_autoexec
 18848                                  
 18849                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18850                                  	;;cmp	[command_line-1],0
 18851                                          ;;jne	short do_exec   ;
 18852                                          ;;mov	[command_line-1],'/'
 18853                                  	;;call	disable_autoexec ;
 18854                                  
 18855                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18856                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18857                                  	;call	disable_autoexec
 18858                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18859                                  ;do_exec:
 18860                                  	;jmp     retry		;
 18861                                  
 18862                                  ;;endif	;MULTI_CONFIG
 18863                                  
 18864                                  ; 24/03/2019 - Retro DOS v4.0
 18865                                  
 18866                                  ; ----------------------------------------------------------------------
 18867                                  ; procedure : AllocFreeMem
 18868                                  ;
 18869                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18870                                  ; DOS is at temporary location when this call is being made
 18871                                  ;
 18872                                  ; Inputs : None
 18873                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18874                                  ;	   [area] & [memhi] set to the para value of the start of the
 18875                                  ;	   free memory.
 18876                                  ;
 18877                                  ; Uses   : AX, BX
 18878                                  ;
 18879                                  ; ----------------------------------------------------------------------
 18880                                  
 18881                                  	; 23/10/2022
 18882                                  AllocFreeMem:
 18883 0000084C BBFFFF                  	mov	bx,0FFFFh
 18884 0000084F B448                    	mov	ah,48h ; ALLOC
 18885 00000851 CD21                    	int	21h			; first time fails
 18886 00000853 B448                    	mov	ah,48h ; ALLOC
 18887 00000855 CD21                    	int	21h			; second time gets it
 18888                                  	; 11/12/2022
 18889                                  	; ds = cs
 18890                                  	;mov	[cs:area],ax
 18891                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18892 00000857 A3[E403]                	mov	[area],ax
 18893 0000085A A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18894 0000085D C3                      	retn				; start of free memory
 18895                                  				
 18896                                  	; include msbio.cl6
 18897                                  ; ----------------------------------------------------------------------
 18898                                  DOSLOMSG:
 18899 0000085E 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18899 00000867 7661696C61626C653A-
 18899 00000870 204C6F6164696E6720-
 18899 00000879 444F53206C6F770D0A-
 18899 00000882 24                 
 18900                                  FEmsg:
 18901 00000883 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18901 0000088C 6F723A2043616E6E6F-
 18901 00000895 7420616C6C6F636174-
 18901 0000089E 65204D656D6F727920-
 18901 000008A7 666F7220444F530D0A-
 18901 000008B0 24                 
 18902                                  
 18903                                  ; ----------------------------------------------------------------------
 18904                                  ;
 18905                                  ; procedure : LoadDOSHiOrLo
 18906                                  ;
 18907                                  ;		Tries to move DOS into HMA. If it fails then loads
 18908                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18909                                  ;		moved; this just tries to allocate the HMA, and prints
 18910                                  ;		a message if this is not possible.
 18911                                  ;
 18912                                  ; ----------------------------------------------------------------------
 18913                                  
 18914                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18915                                  LoadDOSHiOrLo:
 18916                                  	; 27/03/2019 - Retro DOS v4.0
 18917                                  	; ds = cs
 18918 000008B1 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18919                                  	;jc	short LdngLo		; If that don't work...
 18920                                  	;retn
 18921                                  	; 18/12/2022
 18922 000008B4 731C                    	jnc	short LoadDosHi_ok
 18923                                  LdngLo:
 18924                                  	; 23/10/2022
 18925                                  	;push	cs
 18926                                  	;pop	ds
 18927                                  	; 11/12/2022
 18928                                  	; ds = cs
 18929 000008B6 B409                    	mov	ah,9
 18930 000008B8 BA[5E08]                	mov	dx,DOSLOMSG		; inform user that we are
 18931 000008BB CD21                    	int	21h			; loading low
 18932                                  
 18933                                  ;ifndef ROMDOS
 18934                                  	; actually move the dos, and reinitialize it.
 18935                                  
 18936 000008BD BB0100                  	mov	bx,1				; M012
 18937                                  						;  use int 21 alloc for mem
 18938 000008C0 E83F00                  	call	MovDOSLo
 18939                                  	; 11/12/2022
 18940                                  	; ds = cs
 18941                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18942                                  	; 23/10/2022
 18943 000008C3 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18944                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18945                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18946 000008C7 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18947                                  	; 11/12/2022
 18948                                  	; ds = cs
 18949                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18950 000008C9 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18951                                  	
 18952                                  ;endif ; ROMDOS
 18953                                  	; 23/10/2022
 18954                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18955                                  	; 11/12/2022
 18956                                  	; ds = cs
 18957 000008CD C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18958                                  LoadDosHi_ok:	; 18/12/2022
 18959 000008D2 C3                      	retn
 18960                                  
 18961                                  ; ----------------------------------------------------------------------
 18962                                  ;
 18963                                  ; procedure : TryToMovDOSHi
 18964                                  ;
 18965                                  ;		This tries to move DOS into HMA.
 18966                                  ;		Returns CY if it failed.
 18967                                  ;		If it succeeds returns with carry cleared.
 18968                                  ;
 18969                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18970                                  ;		the A20 switching code in the low mem stub to be installed.
 18971                                  ; 
 18972                                  ; ----------------------------------------------------------------------
 18973                                  
 18974                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18975                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18976                                  TryToMovDOSHi:
 18977                                  	; 11/12/2022
 18978                                  	; 27/03/2019 - Retro DOS v4.0
 18979                                  	; ds = cs
 18980 000008D3 E81300                  	call	MovDOSHi
 18981 000008D6 7210                    	jc	short ttldhx
 18982                                  
 18983                                  ;ifndef ROMDOS
 18984                                  	; 23/10/2022
 18985                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18986                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18987                                  	; 11/12/2022
 18988                                  	; ds = cs
 18989 000008D8 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18990                                  ;else
 18991                                  ;	..
 18992                                  ;endif ; ROMDOS
 18993                                  
 18994                                  	; 11/12/2022
 18995                                  	; ds = cs
 18996 000008DC 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18997                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18998 000008DE FF1E[7B02]              	call	far [dos_segreinit]
 18999                                  	;mov	byte [cs:runhigh],1
 19000 000008E2 C606[6A02]01            	mov	byte [runhigh],1
 19001 000008E7 F8                      	clc
 19002                                  ttldhx:
 19003 000008E8 C3                      	retn
 19004                                  
 19005                                  ; ----------------------------------------------------------------------
 19006                                  ;
 19007                                  ; procedure : MovDOSHi
 19008                                  ;
 19009                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 19010                                  ;		For ROMDOS, the code is not actually moved, but the
 19011                                  ;		HMA is allocated and prepared for sub-allocation.
 19012                                  ;
 19013                                  ;		Returns : CY if it failed
 19014                                  ;
 19015                                  ; ----------------------------------------------------------------------
 19016                                  
 19017                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19018                                  MovDOSHi:
 19019                                  	; 14/05/2019
 19020                                  	; 27/03/2019 - Retro DOS v4.0
 19021                                  	; ds = cs
 19022 000008E9 E8D500                  	call	AllocHMA
 19023 000008EC 7213                    	jc	short mdhx			; did we get HMA?
 19024 000008EE B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 19025 000008F1 8EC0                    	mov	es,ax
 19026                                  
 19027                                  ;ifndef ROMDOS
 19028                                  	; actually move the BIOS and DOS
 19029                                  
 19030                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19031                                  	; 24/03/2019
 19032                                  	
 19033                                  	; 23/10/2022
 19034 000008F3 E83200                  	call	MovBIOS				; First move BIOS into HMA
 19035                                  
 19036                                  	; ES:DI points to free HMA after BIOS
 19037                                  	
 19038                                  	; 14/05/2019
 19039                                  	; 24/03/2019 - Retro DOS v4.0
 19040                                  	;xor	di,di
 19041                                  	
 19042                                  	; 23/10/2022
 19043                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 19044                                  	; 11/12/2022
 19045                                  	; ds = cs
 19046 000008F6 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 19047 000008FA E81100                  	call	MovDOS				; and move it
 19048                                  
 19049                                  	; ES:DI points to free HMA after DOS
 19050                                  ;else
 19051                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 19052                                  ;
 19053                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 19054                                  ;
 19055                                  ;endif ; ROMDOS
 19056                                  
 19057 000008FD E85D02                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 19058 00000900 F8                      	clc
 19059                                  mdhx:
 19060 00000901 C3                      	retn
 19061                                  
 19062                                  ; ----------------------------------------------------------------------
 19063                                  ;
 19064                                  ; procedure : MovDOSLo
 19065                                  ;
 19066                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 19067                                  ;
 19068                                  ; ----------------------------------------------------------------------
 19069                                  
 19070                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19071                                  
 19072                                  ;ifndef ROMDOS
 19073                                  
 19074                                  MovDOSLo:
 19075                                  	; 14/05/2019
 19076                                  	; 27/03/2019 - Retro DOS v4.0
 19077                                  	; ds = cs
 19078 00000902 E84500                  	call	AllocMemForDOS			; incestuosly!!!
 19079                                  	
 19080                                  	; 23/10/2022
 19081                                  	; 14/05/2019
 19082                                  	;inc	ax  ; skip MCB
 19083                                  	
 19084 00000905 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 19085                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19086                                  	; 24/03/2019
 19087                                  	
 19088                                  	; 23/10/2022
 19089 00000907 E81E00                  	call	MovBIOS
 19090                                  
 19091                                  ;------ ES:DI points memory immediately after BIOS
 19092                                  
 19093                                  	; 14/05/2019
 19094                                  	; NOTE: 
 19095                                  	;     Order of (RETRO) DOS kernel sections at memory:
 19096                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 19097                                  
 19098                                  	; 24/03/2019 - Retro DOS v4.0
 19099                                  	;xor	di,di	
 19100                                  
 19101                                  	; 23/10/2022
 19102                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 19103                                  	; 11/12/2022
 19104                                  	; ds = cs
 19105 0000090A 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 19106                                  	;call	MovDOS
 19107                                  	;retn
 19108                                  	; 11/12/2022
 19109                                  	;jmp	short MovDOS
 19110                                  
 19111                                  ;endif ; ROMDOS
 19112                                  
 19113                                  ; 11/12/2022
 19114                                  
 19115                                  ; ----------------------------------------------------------------------
 19116                                  ;
 19117                                  ; procedure : MovDOS
 19118                                  ;
 19119                                  ;		Moves DOS code into requested area
 19120                                  ;
 19121                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19122                                  ;	     CX    - size of DOS code to be moved
 19123                                  ;
 19124                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19125                                  ;
 19126                                  ; ----------------------------------------------------------------------
 19127                                  
 19128                                  	; 11/12/2022
 19129                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19130                                  
 19131                                  ;ifndef ROMDOS
 19132                                  
 19133                                  MovDOS:
 19134                                  	; 14/05/2019
 19135                                  	; 27/03/2019 - Retro DOS v4.0
 19136                                  
 19137                                  	; 11/12/2022
 19138                                  	; ds = cs
 19139                                  
 19140                                  	; 23/10/2022
 19141                                  	;push	ds ; *//
 19142                                  	
 19143 0000090E 06                      	push	es
 19144 0000090F 57                      	push	di
 19145                                  
 19146                                  	; 11/12/2022
 19147 00000910 1E                      	push	ds ; *// ; 11/12/202
 19148                                  
 19149                                  	; 29/04/2019
 19150 00000911 C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 19151                                  	; 23/10/2022
 19152                                  	;lds	si,[cs:dosinit]
 19153                                  	; 04/09/2023
 19154 00000915 89F0                    	mov	ax,si
 19155                                  
 19156 00000917 F3A4                    	rep	movsb
 19157                                  
 19158 00000919 1F                      	pop	ds ; *// ; 11/12/2022
 19159                                  
 19160 0000091A 5B                      	pop	bx				; get back offset into which
 19161                                  						;  DOS was moved
 19162                                  	; 04/09/2023
 19163                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 19164                                  						;  wants to run
 19165                                  	; 04/09/2023
 19166                                  	;mov	ax,[dosinit]
 19167                                  	; ax = [dosinit]
 19168                                  
 19169 0000091B 29D8                    	sub	ax,bx
 19170 0000091D E89C02                  	call	off_to_para
 19171 00000920 5B                      	pop	bx				; get the segment at which
 19172                                  						;  we moved DOS into
 19173 00000921 29C3                    	sub	bx,ax				; Adjust segment
 19174                                  	
 19175                                  	; 11/12/2022
 19176                                  	; 23/10/2022
 19177                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19178                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19179                                  	; 11/12/2022
 19180 00000923 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 19181                                  		
 19182                                  	; 27/03/2019
 19183                                  	;pop	ds ; *//
 19184                                  	; ds = cs
 19185                                  	;mov	[FINAL_DOS_LOCATION],bx
 19186                                  
 19187 00000927 C3                      	retn
 19188                                  
 19189                                  ;endif ;ROMDOS
 19190                                  
 19191                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19192                                  ; 24/03/2019
 19193                                  ; ----------------------------------------------------------------------
 19194                                  ;
 19195                                  ; procedure : MovBIOS
 19196                                  ;
 19197                                  ;		Moves BIOS code into requested segment
 19198                                  ;
 19199                                  ;	In : ES - segment to which BIOS is to be moved
 19200                                  ;		  ( it moves always into offset BCode_Start)
 19201                                  ;
 19202                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 19203                                  ;
 19204                                  ; ----------------------------------------------------------------------
 19205                                  
 19206                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19207                                  
 19208                                  ;ifndef ROMDOS
 19209                                  
 19210                                  MovBIOS: ; proc	near
 19211                                  	; 11/12/2022
 19212 00000928 1E                      	push	ds ; ds = cs	
 19213                                  	;
 19214                                  	; 23/10/2022
 19215                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 19216                                  	; 17/09/2023
 19217 00000929 8E1E[8702]              	mov	ds,[temp_bcode_seg]
 19218                                  	;mov	si,BCODE_START ; mov si,30h
 19219                                  	; 09/12/2022
 19220 0000092D BE[3000]                	mov	si,BCODESTART
 19221 00000930 89F7                    	mov	di,si
 19222 00000932 B9D019                  	mov	cx,BCODE_END ; mov cx,1A60h
 19223 00000935 29F1                    	sub	cx,si				; size of BIOS
 19224 00000937 D1E9                    	shr	cx,1				; Both the labels are para
 19225                                  						;  aligned
 19226 00000939 F3A5                    	rep	movsw
 19227                                  	
 19228                                  	; 11/12/2022
 19229 0000093B 1F                      	pop	ds ; ds = cs
 19230                                  	;
 19231 0000093C 06                      	push	es
 19232 0000093D 57                      	push	di				; save end of BIOS
 19233 0000093E 8CC0                    	mov	ax,es
 19234                                  	;
 19235                                  	; 11/12/2022
 19236                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 19237                                  	;;call	dword ptr cs:_seg_reinit_ptr
 19238                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 19239                                  	; ds = cs
 19240 00000940 A3[0004]                	mov	[BCodeSeg],ax
 19241 00000943 FF1E[8502]              	call	far [seg_reinit_ptr]
 19242                                  	;
 19243 00000947 5F                      	pop	di
 19244 00000948 07                      	pop	es				; get back end of BIOS
 19245 00000949 C3                      	retn
 19246                                  
 19247                                  ;MovBIOS endp
 19248                                  
 19249                                  ;endif ; ROMDOS
 19250                                  
 19251                                  ; 11/12/2022
 19252                                  %if 0
 19253                                  
 19254                                  ; 24/03/2019
 19255                                  
 19256                                  ; ----------------------------------------------------------------------
 19257                                  ;
 19258                                  ; procedure : MovDOS
 19259                                  ;
 19260                                  ;		Moves DOS code into requested area
 19261                                  ;
 19262                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19263                                  ;	     CX    - size of DOS code to be moved
 19264                                  ;
 19265                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19266                                  ;
 19267                                  ; ----------------------------------------------------------------------
 19268                                  
 19269                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19270                                  
 19271                                  ;ifndef ROMDOS
 19272                                  
 19273                                  MovDOS:
 19274                                  	; 14/05/2019
 19275                                  	; 27/03/2019 - Retro DOS v4.0
 19276                                  
 19277                                  	; 11/12/2022
 19278                                  	; ds = cs
 19279                                  
 19280                                  	; 23/10/2022
 19281                                  	;push	ds ; *//
 19282                                  	
 19283                                  	push	es
 19284                                  	push	di
 19285                                  
 19286                                  	; 11/12/2022
 19287                                  	push	ds ; *// ; 11/12/202
 19288                                  
 19289                                  	; 29/04/2019
 19290                                  	lds	si,[dosinit] ; 11/12/2022
 19291                                  	; 23/10/2022
 19292                                  	;lds	si,[cs:dosinit]
 19293                                  	; 04/09/2023
 19294                                  	mov	ax,si
 19295                                  
 19296                                  	rep	movsb
 19297                                  
 19298                                  	pop	ds ; *// ; 11/12/2022
 19299                                  
 19300                                  	pop	bx				; get back offset into which
 19301                                  						;  DOS was moved
 19302                                  	;mov	ax,[dosinit] ; 04/09/2023
 19303                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 19304                                  						;  wants to run
 19305                                  	sub	ax,bx
 19306                                  	call	off_to_para
 19307                                  	pop	bx				; get the segment at which
 19308                                  						;  we moved DOS into
 19309                                  	sub	bx,ax				; Adjust segment
 19310                                  	
 19311                                  	; 11/12/2022
 19312                                  	; 23/10/2022
 19313                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19314                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19315                                  	; 11/12/2022
 19316                                  	mov	[CURRENT_DOS_LOCATION],bx
 19317                                  		
 19318                                  	; 27/03/2019
 19319                                  	;pop	ds ; *//
 19320                                  	; ds = cs
 19321                                  	;mov	[FINAL_DOS_LOCATION],bx
 19322                                  
 19323                                  	retn
 19324                                  
 19325                                  ;endif ;ROMDOS
 19326                                  
 19327                                  %endif
 19328                                  
 19329                                  ; ----------------------------------------------------------------------
 19330                                  ;
 19331                                  ; procedure : AllocMemForDOS
 19332                                  ;
 19333                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 19334                                  ;
 19335                                  ;	Out : AX - seg of allocated memoryblock
 19336                                  ;
 19337                                  ; ----------------------------------------------------------------------
 19338                                  
 19339                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19340                                  
 19341                                  ;ifndef ROMDOS
 19342                                  
 19343                                  AllocMemForDOS:
 19344                                  	; 11/12/2022
 19345                                  	; 14/05/2019
 19346                                  	; 27/03/2019 - Retro DOS v4.0
 19347                                  	; ds = cs
 19348                                  	;mov	ax,BCode_end
 19349                                  	;sub	ax,BCode_start		; BIOS code size
 19350                                  	; 23/10/2022
 19351 0000094A B8D019                  	mov	ax,BCODE_END ; 1A60h
 19352                                  	;sub	ax,BCODE_START ; 30h
 19353                                  	; 09/12/2022
 19354 0000094D 2D[3000]                	sub	ax,BCODESTART 
 19355                                  	; 24/03/2019 - Retro DOS v4.0 
 19356                                  	; 02/11/2022
 19357                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 19358                                  	; 11/12/2022
 19359                                  	; ds = cs
 19360 00000950 0306[7F02]              	add	ax,[lo_doscod_size]
 19361 00000954 83C00F                  	add	ax,15
 19362 00000957 E86202                  	call	off_to_para			; convert to para
 19363                                  	; 23/10/2022
 19364                                  	; 14/05/2019
 19365                                  	;inc	ax ; + 1 paragraph for MCB
 19366 0000095A 09DB                    	or	bx,bx				; M012
 19367 0000095C 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 19368 0000095E 741A                    	jz	short update_arena		; M012
 19369 00000960 B448                    	mov	ah,48h				; request DOS
 19370 00000962 CD21                    	int	21h
 19371 00000964 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 19372                                   	; 23/10/2022
 19373                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 19374 00000966 83E803                  	sub	ax,3				; Take care ORG 30h of
 19375                                  						;  BIOS code
 19376 00000969 8EC0                    	mov	es,ax
 19377                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 19378                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 19379                                  	; 14/05/2019
 19380                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 19381                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 19382                                  	; 23/10/2022
 19383 0000096B 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 19384 00000972 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 19385                                  
 19386 00000979 C3                      	retn
 19387                                  
 19388                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 19389                                  ;	  using DOS itself causes an arena to be generated.
 19390                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 19391                                  ;	  assume that the device drivers are loaded into
 19392                                  ;	  the first arena. For this reason, MagicDrv's
 19393                                  ;	  main device driver header arena is manually
 19394                                  ;	  truncated from the arena chain, and the space
 19395                                  ;	  for DOS is allocated using the following
 19396                                  ;	  simple code, which also assumes that the
 19397                                  ;	  first arena is the free one where DOS's low
 19398                                  ;	  stub will go.
 19399                                  ;
 19400                                  ; M012 : BEGIN
 19401                                  
 19402                                  	; 23/10/2022
 19403                                  update_arena:
 19404 0000097A 1E                      	push	ds ; ds = cs
 19405 0000097B 57                      	push	di
 19406 0000097C 51                      	push	cx
 19407 0000097D 52                      	push	dx
 19408                                  	; 23/10/2022
 19409                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 19410                                  	; 11/12/2022
 19411                                  	; ds = cs 
 19412 0000097E C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 19413 00000982 4F                      	dec	di
 19414 00000983 4F                      	dec	di				; Arena head is immediately
 19415                                  						;  before sysvar
 19416 00000984 8E05                    	mov	es,[di]				; es = arena head
 19417                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 19418 00000986 268B0E0300              	mov	cx,[es:3]
 19419 0000098B 39D9                    	cmp	cx,bx				; is it sufficient ?
 19420 0000098D 7227                    	jb	short FatalErr			; no, fatal error
 19421                                  
 19422                                  	;mov	dl,[es:ARENA.SIGNATURE]
 19423 0000098F 268A160000              	mov	dl,[es:0]
 19424 00000994 8CC0                    	mov	ax,es
 19425 00000996 01D8                    	add	ax,bx				; ax = new arena head
 19426 00000998 8905                    	mov	[di],ax				; store it in DOS data area
 19427 0000099A 8ED8                    	mov	ds,ax
 19428                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 19429 0000099C 88160000                	mov	[0],dl
 19430                                  	;mov	word [ARENA.OWNER],0		; free
 19431 000009A0 C70601000000            	mov	word [1],0
 19432 000009A6 29D9                    	sub	cx,bx				; size of the new block
 19433                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 19434 000009A8 890E0300                	mov	[3],cx
 19435 000009AC 8CC0                    	mov	ax,es				; return seg to the caller
 19436                                  	; 23/10/2022
 19437                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 19438 000009AE 83E803                  	sub	ax,3				;  BIOS code
 19439 000009B1 5A                      	pop	dx
 19440 000009B2 59                      	pop	cx
 19441 000009B3 5F                      	pop	di
 19442 000009B4 1F                      	pop	ds ; ds = cs
 19443 000009B5 C3                      	retn
 19444                                  ;
 19445                                  ; M012 : END
 19446                                  ;
 19447                                  FatalErr:
 19448 000009B6 0E                      	push	cs
 19449 000009B7 1F                      	pop	ds
 19450 000009B8 BA[8308]                	mov	dx,FEmsg
 19451 000009BB B409                    	mov	ah,9
 19452 000009BD CD21                    	int	21h 		; DOS - PRINT STRING
 19453                                  				; DS:DX -> string terminated by "$"
 19454                                          ;jmp	stall
 19455                                  	; 23/10/2022
 19456 000009BF FA                      	cli
 19457 000009C0 F4                      	hlt
 19458                                  
 19459                                  ;endif ;ROMDOS
 19460                                  
 19461                                  ; 25/03/2019 - Retro DOS v4.0
 19462                                  
 19463                                  ; ----------------------------------------------------------------------
 19464                                  ;
 19465                                  ; procedure : AllocHMA
 19466                                  ;
 19467                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19468                                  ;	  up there. If it gets any sort of error, it will return with
 19469                                  ;	  carry set so that we can resort to running low.
 19470                                  ;
 19471                                  ;	It also returns ES: -> 0ffffh if it returns success
 19472                                  ;
 19473                                  ; ----------------------------------------------------------------------
 19474                                  
 19475                                  AllocHMA:
 19476                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19477                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19478                                  ;		   been deleted because it can be recycled for skipping the
 19479                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19480                                  ;		   in the case of a pre-286.
 19481                                  
 19482                                  ;;	see if we're running on a pre-286. If not, force low.
 19483                                  ;
 19484                                  ;	xor	ax,ax
 19485                                  ;	pushf			; save flags (like int)
 19486                                  ;	push	ax
 19487                                  ;	popf
 19488                                  ;	pushf
 19489                                  ;	pop	ax
 19490                                  ;	popf			; restore original flags (like int)
 19491                                  ;	and	ax,0F000h
 19492                                  ;	cmp	ax,0F000h	; 8088/8086?
 19493                                  ;	jz	short grab_hma_error
 19494                                  
 19495                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19496                                  	; (SYSINIT:0A26h)
 19497                                  
 19498 000009C1 1E                      	push	ds
 19499                                  	;;mov	ax,Bios_Data
 19500                                  	;mov	ax,KERNEL_SEGMENT
 19501                                  	; 21/10/2022
 19502 000009C2 B87000                  	mov	ax,DOSBIODATASEG
 19503 000009C5 8ED8                    	mov	ds,ax
 19504                                  
 19505 000009C7 E84A00                  	call	IsXMSLoaded
 19506 000009CA 7545                    	jnz	short grabhma_error
 19507                                  
 19508 000009CC B81043                  	mov	ax,4310h
 19509 000009CF CD2F                    	int	2Fh		; get the vector into es:bx
 19510                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19511                                  		; Return: ES:BX -> driver entry point
 19512                                  
 19513 000009D1 891E[0E00]              	mov	[xms],bx
 19514                                  	;mov	[0Eh], bx
 19515 000009D5 8C06[1000]              	mov	[xms+2],es
 19516                                  	;mov	[10h],es
 19517                                  
 19518 000009D9 B401                    	mov	ah,1		; request HMA
 19519 000009DB BAFFFF                  	mov	dx,0FFFFh
 19520                                  	;call	dword ptr ds:0Eh
 19521 000009DE FF1E[0E00]              	call	far [xms]
 19522 000009E2 48                      	dec	ax
 19523 000009E3 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19524                                  
 19525                                  ;------ Himem may be lying because it has allocated mem for int 15
 19526                                  
 19527 000009E5 B488                    	mov	ah,88h
 19528 000009E7 CD15                    	int	15h
 19529                                  		; Get Extended Memory Size
 19530                                  		; Return: CF clear on success
 19531                                  		; AX = size of memory above 1M in K
 19532 000009E9 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19533                                  	;jb	short grabhma_error
 19534                                  	; 11/12/2022
 19535 000009EC 7224                    	jb	short grabhma_err ; cf=1
 19536                                  allocHMA_1:
 19537 000009EE B405                    	mov	ah,5		; localenableA20
 19538                                  	;call	dword ptr ds:0Eh
 19539 000009F0 FF1E[0E00]              	call	far [xms]
 19540 000009F4 48                      	dec	ax
 19541 000009F5 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19542                                  
 19543 000009F7 E88501                  	call	IsVDiskInstalled
 19544 000009FA 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19545                                  
 19546 000009FC B8FFFF                  	mov	ax,0FFFFh
 19547 000009FF 8EC0                    	mov	es,ax
 19548 00000A01 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19549 00000A08 26813E10003412          	cmp	word [es:10h],1234h
 19550                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19551                                  	; 11/12/2022
 19552 00000A0F 7401                    	je	short allocHMA_ok	
 19553                                  
 19554                                  ; 11/12/2022
 19555                                  ;	; 11/12/2022
 19556                                  ;	; cf=0
 19557                                  ;	;clc
 19558                                  ;	pop	ds
 19559                                  ;	retn
 19560                                  
 19561                                  grabhma_error:
 19562 00000A11 F9                      	stc
 19563                                  	; 11/12/022
 19564                                  grabhma_err:	; cf=1
 19565                                  allocHMA_ok:	; cf=0
 19566 00000A12 1F                      	pop	ds
 19567 00000A13 C3                      	retn
 19568                                  
 19569                                  ; ----------------------------------------------------------------------
 19570                                  ;
 19571                                  ; procedure : IsXMSLoaded
 19572                                  ;
 19573                                  ;             Checks whether a XMS driver is loaded
 19574                                  ;
 19575                                  ; Returns : Z flag set if XMS driver loaded
 19576                                  ;           Z flag reset if no XMS drivers are present
 19577                                  ;
 19578                                  ; ----------------------------------------------------------------------
 19579                                  
 19580                                  IsXMSLoaded:
 19581 00000A14 B80043                  	mov	ax,4300h
 19582 00000A17 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19583                                  				; Return: AL = 80h XMS driver installed
 19584                                  				; AL <> 80h no driver
 19585 00000A19 3C80                    	cmp	al,80h		; XMS installed?
 19586 00000A1B C3                      	retn
 19587                                  
 19588                                  ; ----------------------------------------------------------------------
 19589                                  ; procedure : FTryToMovDOSHi
 19590                                  ;
 19591                                  ;		Called from HMA suballoc calls
 19592                                  ;	
 19593                                  ; ----------------------------------------------------------------------
 19594                                  
 19595                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19596                                  	; (SYSINIT:0A84h)
 19597                                  
 19598                                  FTryToMovDOSHi:	; proc	far
 19599                                  
 19600 00000A1C 50                      	push	ax
 19601 00000A1D 53                      	push	bx
 19602 00000A1E 51                      	push	cx
 19603 00000A1F 52                      	push	dx
 19604 00000A20 56                      	push	si
 19605 00000A21 57                      	push	di
 19606 00000A22 1E                      	push	ds
 19607 00000A23 06                      	push	es
 19608                                  
 19609                                  	; 23/10/2022
 19610                                  	; 27/03/2019 - Retro DOS v4.0
 19611                                  	; 11/12/2022
 19612 00000A24 0E                      	push	cs
 19613 00000A25 1F                      	pop	ds
 19614                                  
 19615                                  	;cmp	byte [cs:runhigh],0FFh
 19616                                  	; 11/12/2022
 19617 00000A26 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19618 00000A2B 7503                    	jne	short _ftymdh_1
 19619                                  
 19620                                  	; ds = cs
 19621 00000A2D E8A3FE                  	call	TryToMovDOSHi
 19622                                  _ftymdh_1:
 19623 00000A30 07                      	pop	es
 19624 00000A31 1F                      	pop	ds
 19625 00000A32 5F                      	pop	di
 19626 00000A33 5E                      	pop	si
 19627 00000A34 5A                      	pop	dx
 19628 00000A35 59                      	pop	cx
 19629 00000A36 5B                      	pop	bx
 19630 00000A37 58                      	pop	ax
 19631                                  
 19632 00000A38 CB                      	retf
 19633                                  
 19634                                  ; ----------------------------------------------------------------------
 19635                                  ;
 19636                                  ; following piece of code will be moved into a para boundary. And the para
 19637                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19638                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19639                                  ; to determine free extended memory.
 19640                                  ;
 19641                                  ; For more details read "power programming" column by Ray Duncan in the
 19642                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19643                                  ;
 19644                                  ; ----------------------------------------------------------------------
 19645                                  
 19646                                  StartVDHead:
 19647                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19648                                  
 19649 00000A39 00000000                	dd	0		; link to next device driver
 19650 00000A3D 0080                    	dw	8000h		; device attribute
 19651 00000A3F 0000                    	dw	0		; strategy routine offset
 19652 00000A41 0000                    	dw	0		; interrupt routine offset
 19653 00000A43 01                      	db	1		; number of units
 19654                                  	;db	7 dup(0) 
 19655 00000A44 00<rep 7h>              	times	7 db 0 		; reserved area
 19656                                  VDiskSig1:
 19657 00000A4B 564449534B              	db	'VDISK'
 19658                                  
 19659                                  VLEN1	equ	($-VDiskSig1)
 19660                                  
 19661 00000A50 202056332E33            	db	'  V3.3'	; vdisk label
 19662                                  	;db	15 dup (0)	; pad
 19663 00000A56 00<rep Fh>              	times	15 db 0
 19664 00000A65 0000                    	dw	0		; bits 0-15 of free HMA
 19665 00000A67 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19666                                  VDInt19:
 19667 00000A68 EA                      	db	0EAh		; jmp to old vector
 19668                                  OldVDInt19:
 19669 00000A69 00000000                	dd	0		; Saved int 19 vector
 19670                                  
 19671                                  EndVDHead: ; label byte
 19672                                  
 19673                                  VDiskHMAHead:	
 19674 00000A6D 000000                  	db	0,0,0		; non-bootable disk
 19675                                  VDiskSig2:
 19676 00000A70 564449534B              	db	'VDISK'
 19677                                  
 19678                                  VLEN2	equ	($-VDiskSig2)
 19679                                  
 19680 00000A75 332E33                  	db	'3.3'		; OEM - signature
 19681 00000A78 8000                    	dw	128		; number of bytes/sector
 19682 00000A7A 01                      	db	1		; sectors/cluster
 19683 00000A7B 0100                    	dw	1		; reserved sectors
 19684 00000A7D 01                      	db	1		; number of FAT copies
 19685 00000A7E 4000                    	dw	64		; number of root dir entries
 19686 00000A80 0002                    	dw	512		; number of sectors
 19687 00000A82 FE                      	db	0FEh		; media descriptor
 19688 00000A83 0600                    	dw	6		; number of sectors/FAT
 19689 00000A85 0800                    	dw	8		; sectors per track
 19690 00000A87 0100                    	dw	1		; number of heads
 19691 00000A89 0000                    	dw	0		; number of hidden sectors
 19692 00000A8B 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19693                                  
 19694                                  EndVDiskHMAHead: ; label byte
 19695                                  
 19696                                  ; ----------------------------------------------------------------------
 19697                                  ;
 19698                                  ; procedure : InstVDiskHeader
 19699                                  ;
 19700                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19701                                  ;	      It puts a 32 byte header at 10000:0 and
 19702                                  ;	      another header at (seg of int19):0
 19703                                  ;
 19704                                  ; Inputs : None
 19705                                  ;
 19706                                  ; Outputs : None
 19707                                  ;
 19708                                  ; USES : DS,SI,AX,CX,DX
 19709                                  ;
 19710                                  ; ----------------------------------------------------------------------
 19711                                  
 19712                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19713                                  
 19714                                  InstVDiskHeader:
 19715 00000A8D 31C0                    	xor	ax,ax
 19716 00000A8F 8ED8                    	mov	ds,ax			; seg of int vect table
 19717                                  
 19718                                  ;-------------- save old int 19 vector
 19719                                  
 19720                                  	; 23/10/2022
 19721 00000A91 A16400                  	mov	ax,[19h*4]
 19722                                  	;mov	[OldVDInt19],ax
 19723 00000A94 2EA3[690A]              	mov	[cs:OldVDInt19],ax
 19724 00000A98 A16600                  	mov	ax,[19h*4+2]
 19725                                  	;mov	[OldVDInt19+2],ax
 19726 00000A9B 2EA3[6B0A]              	mov	[cs:OldVDInt19+2],ax
 19727                                  
 19728                                  ;-------------- calculate seg of new int 19 handler
 19729                                  
 19730 00000A9F B448                    	mov	ah,48h			; allocate memory
 19731                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19732                                  	; 23/10/2022
 19733 00000AA1 BB0400                  	mov	bx,4
 19734 00000AA4 CD21                    	int	21h
 19735                                  
 19736                                  ;	if carry, fatal hanging error!!!!!
 19737                                  
 19738 00000AA6 48                      	dec	ax			; point to arena
 19739 00000AA7 8EC0                    	mov	es,ax
 19740                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19741 00000AA9 26C70601000800          	mov	word [es:1],8
 19742                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19743 00000AB0 26C70608005343          	mov	word [es:8],'SC'
 19744 00000AB7 40                      	inc	ax
 19745 00000AB8 8EC0                    	mov	es,ax			; get back to allocated memory
 19746                                  
 19747                                  ;-------------- install new int 19 vector
 19748                                  
 19749 00000ABA FA                      	cli				; no reboots at this time
 19750                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19751 00000ABB C70664002F00            	mov	word [19h*4],47
 19752 00000AC1 A36600                  	mov	[19h*4+2],ax
 19753                                  
 19754                                  ;-------------- move the code into proper place
 19755                                  
 19756                                  	;mov	cx,(EndVDHead-StartVDHead)
 19757 00000AC4 B93400                  	mov	cx,52
 19758 00000AC7 BE[390A]                	mov	si,StartVDHead
 19759 00000ACA 31FF                    	xor	di,di
 19760 00000ACC 0E                      	push	cs
 19761 00000ACD 1F                      	pop	ds
 19762 00000ACE FC                      	cld
 19763 00000ACF F3A4                    	rep	movsb
 19764 00000AD1 FB                      	sti				; BUGBUG is sti OK now?
 19765                                  
 19766                                  ;-------------- mov the HMA VDisk head into HMA
 19767                                  
 19768                                  	; 23/10/2022
 19769 00000AD2 57                      	push	di
 19770 00000AD3 06                      	push	es
 19771                                  
 19772                                  	;mov	ax,0FFFFh
 19773                                  	;mov	es,ax
 19774                                  	; 04/09/2023
 19775 00000AD4 49                      	dec	cx
 19776                                  	; cx = 0FFFFh
 19777 00000AD5 8EC1                    	mov	es,cx
 19778                                  
 19779 00000AD7 BF1000                  	mov	di,10h
 19780                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19781 00000ADA B92000                  	mov	cx,32
 19782 00000ADD BE[6D0A]                	mov	si,VDiskHMAHead
 19783 00000AE0 F3A4                    	rep	movsb			; ds already set to cs
 19784                                  
 19785 00000AE2 5F                      	pop	di
 19786 00000AE3 07                      	pop	es
 19787                                  
 19788 00000AE4 C3                      	retn
 19789                                  
 19790                                  ; ----------------------------------------------------------------------
 19791                                  ; procedure : ClrVDISKHeader
 19792                                  ;
 19793                                  ;		Clears the first 32 bytes at 1MB boundary
 19794                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19795                                  ;		left by previous DOS=HIGH session
 19796                                  ;
 19797                                  ; ----------------------------------------------------------------------
 19798                                  
 19799                                  struc desc
 19800 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19801 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19802 00000004 ??                       .hi_byte:	resb 	1		; address
 19803 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19804 00000006 ????                     .reserved:	resw	1		;
 19805                                   .size:
 19806                                  endstruc
 19807                                  
 19808                                  		; 23/10/2022
 19809                                  bmove:		;label byte
 19810                                  
 19811                                  dummy:		;times desc.size db 0	; desc	<>
 19812 00000AE5 00<rep 8h>              		times 8 db 0		 
 19813                                  gdt:		;times desc.size db 0	; desc	<>
 19814 00000AED 00<rep 8h>              		times 8 db 0
 19815 00000AF5 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19816 00000AF7 0000                    		dw	0
 19817 00000AF9 00                      		db	0
 19818 00000AFA 93                      		db	93h
 19819 00000AFB 0000                    		dw	0
 19820 00000AFD FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19821 00000AFF 0000                    		dw	0
 19822 00000B01 10                      		db	10h
 19823 00000B02 93                      		db	93h
 19824 00000B03 0000                    		dw	0
 19825                                  
 19826                                  rombios_code:	;times desc.size db 0	; desc	<>
 19827 00000B05 00<rep 8h>              		times 8 db 0
 19828                                  temp_stack:	;times desc.size db 0	; desc	<>
 19829 00000B0D 00<rep 8h>              		times 8 db 0
 19830                                  
 19831 00000B15 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19832                                  
 19833                                  
 19834                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19835                                  
 19836                                  ClrVDISKHeader:	; proc	near
 19837                                  
 19838                                  ;;-----------------------------------------------------------	      ;I070
 19839                                  ;; The following workaround get around a problem with the	      ;I070
 19840                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19841                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19842                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19843                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19844                                  ;; move crashes the system. We can do this because these	      ;I070
 19845                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19846                                  ;								      ;I070
 19847                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19848                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19849                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19850                                  ;                                      ; Check for Tortugas...	      ;I070
 19851                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19852                                  ;               je      short ClrVDISKno                              ;I070
 19853                                  ;                                      ; Check for mod 30-286	      ;I070
 19854                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19855                                  ;               jne     short ClrVDISKok			      ;I070
 19856                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19857                                  ;								      ;I070
 19858                                  ;ClrVDISKok:							      ;I070
 19859                                  ;-----------------------------------------------------------	      ;I070
 19860                                  
 19861                                  	; 12/12/2022
 19862                                  	; ds = cs
 19863                                  
 19864 00000B35 06                      	push	es
 19865 00000B36 8CC8                    	mov	ax,cs
 19866 00000B38 89C2                    	mov	dx,ax
 19867 00000B3A B10C                    	mov	cl,12
 19868 00000B3C D3EA                    	shr	dx,cl
 19869 00000B3E B104                    	mov	cl,4
 19870 00000B40 D3E0                    	shl	ax,cl
 19871 00000B42 05[150B]                	add	ax,ClrdVDISKHead
 19872 00000B45 80D200                  	adc	dl,0
 19873                                  
 19874                                  	;; 23/10/2022
 19875                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19876                                  	;mov	[cs:src_desc+2],ax
 19877                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19878                                  	;mov	[cs:src_desc+4],dl
 19879                                  	; 12/12/2022
 19880                                  	;mov	[src_desc+desc.lo_word],ax
 19881 00000B48 A3[F70A]                	mov	[src_desc+2],ax
 19882                                  	;mov	[src_desc+desc.hi_byte],dl
 19883 00000B4B 8816[F90A]              	mov	[src_desc+4],dl
 19884                                  
 19885 00000B4F B91000                  	mov	cx,16	; 16 words
 19886 00000B52 0E                      	push	cs
 19887 00000B53 07                      	pop	es
 19888 00000B54 BE[E50A]                	mov	si,bmove
 19889 00000B57 B487                    	mov	ah,87h
 19890 00000B59 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19891                                  			; CX = number of words to move 
 19892                                  			; ES:SI -> global descriptor table
 19893                                  			; Return: CF set on error, AH = status
 19894 00000B5B 07                      	pop	es
 19895 00000B5C C3                      	retn
 19896                                  
 19897                                  ; ----------------------------------------------------------------------
 19898                                  ;
 19899                                  ; procedure : SaveFreeHMAPtr
 19900                                  ;
 19901                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19902                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19903                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19904                                  ;		the offset.
 19905                                  ;
 19906                                  ; Inputs : ES:DI - pointer to free HMA
 19907                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19908                                  ;
 19909                                  ; ----------------------------------------------------------------------
 19910                                  
 19911                                  SaveFreeHMAPtr:
 19912                                  	; 04/09/2023
 19913 00000B5D 1E                      	push	ds
 19914 00000B5E B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19915 00000B61 8ED8                    	mov	ds,ax
 19916                                  	;
 19917 00000B63 8CC3                    	mov	bx,es
 19918 00000B65 B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 19919                                  	; 04/09/2023
 19920 00000B68 A2[0D00]                	mov	[inHMA],al ; 0FFh
 19921                                  	;
 19922 00000B6B 29D8                    	sub	ax,bx
 19923 00000B6D 83C70F                  	add	di,15		   ; para round
 19924 00000B70 83E7F0                  	and	di,0FFF0h
 19925 00000B73 B104                    	mov	cl,4
 19926 00000B75 D3E0                    	shl	ax,cl
 19927 00000B77 29C7                    	sub	di,ax
 19928                                  	;
 19929                                  	; 04/09/2023
 19930                                  	;push	ds
 19931                                  	;;mov	ax,Bios_Data ; 0070h
 19932                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19933                                  	; 21/10/2022
 19934                                  	; 04/09/2023
 19935                                  	;mov	ax,DOSBIODATASEG ; 0070h
 19936                                  	;mov	ds,ax
 19937 00000B79 893E[F408]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19938                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19939 00000B7D 1F                      	pop	ds
 19940 00000B7E C3                      	retn
 19941                                  
 19942                                  ; ----------------------------------------------------------------------
 19943                                  ;
 19944                                  ; procedure : IsVDiskInstalled
 19945                                  ;
 19946                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19947                                  ;		& INT 19 vector
 19948                                  ;
 19949                                  ; Inputs  : A20 flag should be ON
 19950                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19951                                  ;
 19952                                  ; ----------------------------------------------------------------------
 19953                                  
 19954                                  IsVDiskInstalled:
 19955 00000B7F 31C0                    	xor	ax,ax
 19956 00000B81 8ED8                    	mov	ds,ax
 19957 00000B83 8E1E4E00                	mov	ds,[19*4+2]
 19958                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19959                                  	; 23/10/2022
 19960 00000B87 BE1200                  	mov	si,18
 19961                                  	;mov	cx,VLEN1 ; 5
 19962 00000B8A B90500                  	mov	cx,5
 19963 00000B8D 0E                      	push	cs
 19964 00000B8E 07                      	pop	es
 19965 00000B8F BF[4B0A]                	mov	di,VDiskSig1
 19966 00000B92 F3A6                    	rep	cmpsb
 19967 00000B94 740F                    	je	short ivdins_retn
 19968 00000B96 B8FFFF                  	mov	ax,0FFFFh
 19969 00000B99 8ED8                    	mov	ds,ax
 19970                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19971 00000B9B BE1300                  	mov	si,13h
 19972 00000B9E BF[700A]                	mov	di,VDiskSig2
 19973                                  	;;mov	cx,VLEN2  ; 5
 19974                                  	;mov	cx,5
 19975                                  	; 04/09/2023
 19976 00000BA1 B105                    	mov	cl,5
 19977 00000BA3 F3A6                    	rep	cmpsb
 19978                                  ivdins_retn: 
 19979 00000BA5 C3                      	retn			; returns the Zero flag
 19980                                  
 19981                                  ; ----------------------------------------------------------------------
 19982                                  ;
 19983                                  ; procedure : CPMHack
 19984                                  ;
 19985                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19986                                  ;		for CPM compatibility
 19987                                  ;
 19988                                  ; ----------------------------------------------------------------------
 19989                                  
 19990                                  	; 11/12/2022
 19991                                  CPMHack:
 19992 00000BA6 1E                      	push	ds
 19993 00000BA7 B9FFFF                  	mov	cx,0FFFFh
 19994 00000BAA 8EC1                    	mov	es,cx		; ES = FFFF
 19995                                  	;xor	cx,cx
 19996                                  	; 11/12/2022
 19997 00000BAC 41                      	inc	cx  ; cx = 0
 19998 00000BAD 8ED9                    	mov	ds,cx		; DS = 0
 19999 00000BAF BEC000                  	mov	si,0C0h
 20000 00000BB2 BFD000                  	mov	di,0D0h
 20001                                  	;mov	cx,5
 20002 00000BB5 B105                    	mov	cl,5
 20003 00000BB7 FC                      	cld
 20004 00000BB8 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 20005 00000BBA 1F                      	pop	ds
 20006 00000BBB C3                      	retn
 20007                                  
 20008                                  ; ----------------------------------------------------------------------
 20009                                  ;
 20010                                  ; procedure : off_to_para
 20011                                  ;
 20012                                  ; ----------------------------------------------------------------------
 20013                                  off_to_para:
 20014 00000BBC D1E8                    	shr	ax,1
 20015 00000BBE D1E8                    	shr	ax,1
 20016 00000BC0 D1E8                    	shr	ax,1
 20017 00000BC2 D1E8                    	shr	ax,1
 20018 00000BC4 C3                      	retn
 20019                                  
 20020                                  ; ----------------------------------------------------------------------
 20021                                  ;**	TempCDS - Create (Temporary?) CDS
 20022                                  ;
 20023                                  ;	ENTRY	?? BUGBUG
 20024                                  ;		(DS) = SysInitSeg
 20025                                  ;	EXIT	?? BUGBUG
 20026                                  ;	USES	?? BUGBUG
 20027                                  ; ----------------------------------------------------------------------
 20028                                  
 20029                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20030                                  TempCDS:
 20031 00000BC5 C43E[6B02]              	les	di,[DOSINFO]
 20032 00000BC9 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 20033                                  	;mov	cl,[es:di+20h]
 20034 00000BCD 30ED                    	xor	ch,ch			; (cx) = # of block devices
 20035                                  
 20036 00000BCF 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 20037                                  	;mov	[es:di+21h],cl	
 20038                                  
 20039 00000BD3 88C8                    	mov	al,cl
 20040 00000BD5 B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 20041                                  	;mov	ah,88
 20042 00000BD7 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 20043 00000BD9 E8C804                  	call	ParaRound		; (ax) = paragraph size for CDSs
 20044 00000BDC 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 20045                                  
 20046                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 20047                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 20048                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 20049                                  ;		   variable which has the top of free memory for
 20050                                  ;		   device driver loads, etc.
 20051                                  
 20052 00000BE0 29C6                    	sub	si,ax
 20053                                  
 20054                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 20055                                  ;		that automatically updates alloclim every time we
 20056                                  ;		set up some new CDSs. Instead, I've added code
 20057                                  ;		which pre-allocates space for 26 CDSs. This
 20058                                  ;	        way we've got room for worst case CDSs before
 20059                                  ;		we place MagicDrv.sys
 20060                                  ;
 20061                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 20062                                  
 20063                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20064                                  	; (SYSINIT:0C52h)
 20065 00000BE2 8936[A302]              	mov	[ALLOCLIM],si
 20066                                  
 20067 00000BE6 26897518                	mov	[es:di+SYSI_CDS+2],si
 20068                                  	;mov	[es:di+18h],si
 20069 00000BEA 89F0                    	mov	ax,si
 20070 00000BEC 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 20071                                  	;mov	[word es:di+16h],0
 20072                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 20073 00000BF2 26C535                  	lds	si,[es:di]
 20074 00000BF5 8EC0                    	mov	es,ax
 20075 00000BF7 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 20076                                  
 20077                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 20078                                  ;	info from the corresponding DPB.
 20079                                  ;
 20080                                  ;	(cx) = count of CDSs left to process
 20081                                  ;	(es:di) = address of next CDS
 20082                                  
 20083                                  fooset:
 20084                                  	; 23/10/2022
 20085 00000BF9 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 20086 00000BFD AB                      	stosw				; setup the root as the curdir
 20087                                  
 20088                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 20089                                  
 20090                                  ;	(ds:si) = address of DPB
 20091                                  ;		 (si) = -1 if no drive
 20092                                  
 20093 00000BFE 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 20094 00000C02 AB                      	stosw
 20095 00000C03 2EFE06[A502]            	inc	byte [cs:DirStrng]
 20096 00000C08 31C0                    	xor	ax,ax
 20097 00000C0A 51                      	push	cx
 20098                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 20099 00000C0B B93F00                  	mov	cx,63	; 23/10/2022
 20100 00000C0E F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 20101                                  
 20102                                  ;	should handle the system that does not have any floppies.
 20103                                  ;	in this case,we are going to pretended there are two dummy floppies
 20104                                  ;	in the system. still they have dpb and cds,but we are going to
 20105                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 20106                                  ;	"invalid drive specification" message when the user try to
 20107                                  ;	access them.
 20108                                  ;
 20109                                  ;	(ax) = 0
 20110                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20111                                  ;	(ds:si) = Next DPB (-1 if none)
 20112                                  
 20113 00000C10 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 20114 00000C13 7413                    	je	short fooset_zero	; don't have any physical drive.
 20115                                  
 20116                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 20117                                  ;	if we are faking floppy drives then see if this cds being initialised
 20118                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 20119                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 20120                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 20121                                  ;	for dpb offsets look at inc\dpb.inc.
 20122                                  
 20123                                  	; 04/09/2023
 20124 00000C15 41                      	inc	cx  ; cx = 1
 20125                                  
 20126 00000C16 2E380E[8902]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 04/09/2023
 20127                                  	;cmp	byte [cs:fake_floppy_drv],1
 20128 00000C1B 7512                    	jne	short normcds 		; machine has floppy drives
 20129                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 20130                                  	;cmp	byte [si],1
 20131 00000C1D 380C                    	cmp	[si],cl ; 1 ; 04/09/2023
 20132 00000C1F 770E                    	ja	short normcds
 20133 00000C21 B103                    	mov	cl,3			; the next dbp pointer
 20134                                  					; AX should be zero here
 20135 00000C23 F3AB                    	rep	stosw
 20136 00000C25 59                      	pop	cx
 20137 00000C26 EB17                    	jmp	short get_next_dpb
 20138                                  
 20139                                  ;	(ax) = 0
 20140                                  
 20141                                  fooset_zero:
 20142 00000C28 B103                    	mov	cl,3
 20143 00000C2A F3AB                    	rep	stosw
 20144 00000C2C 59                      	pop	cx
 20145 00000C2D EB13                    	jmp	short fincds
 20146                                  
 20147                                  ;*	We have a "normal" DPB and thus a normal CDS.
 20148                                  ;
 20149                                  ;	(ax) = 0
 20150                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20151                                  ;	(ds:si) = Next DPB (-1 if none)
 20152                                  
 20153                                  normcds:
 20154 00000C2F 59                      	pop	cx
 20155                                  
 20156                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 20157                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 20158                                  ;	this media is a non-fat based one.
 20159                                  
 20160                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 20161                                  	; 23/10/2022
 20162                                  	;cmp	byte [si+8],0
 20163                                  	; 04/09/2023 (ax=0)
 20164 00000C30 384408                  	cmp	[si+8],al ; 0
 20165 00000C33 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 20166 00000C35 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 20167                                  	;mov	ax,4000h
 20168                                  setnormcds:
 20169 00000C38 AB                      	stosw				; curdir_flags
 20170 00000C39 89F0                    	mov	ax,si
 20171 00000C3B AB                      	stosw				; curdir_devptr
 20172 00000C3C 8CD8                    	mov	ax,ds
 20173 00000C3E AB                      	stosw
 20174                                  
 20175                                  get_next_dpb:				; entry point for fake_fooset_zero
 20176                                  	; 23/10/2022
 20177 00000C3F C57419                  	lds	si,[si+19h]
 20178                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20179                                  fincds:
 20180 00000C42 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 20181 00000C45 AB                      	stosw				; curdir_id
 20182 00000C46 AB                      	stosw				; curdir_id
 20183 00000C47 AB                      	stosw				; curdir_user_word
 20184 00000C48 B80200                  	mov	ax,2
 20185 00000C4B AB                      	stosw				; curdir_end
 20186 00000C4C B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 20187 00000C4E AA                      	stosb
 20188 00000C4F AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 20189 00000C50 AB                      	stosw
 20190 00000C51 AB                      	stosw
 20191                                  
 20192 00000C52 E2A5                    	loop	fooset
 20193                                  	
 20194 00000C54 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 20195                                  	
 20196 00000C5A C3                      	retn
 20197                                  
 20198                                  ; ----------------------------------------------------------------------
 20199                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 20200                                  ;
 20201                                  ;	entry:
 20202                                  ;	   al == ASCII CAPS drive letter
 20203                                  ;
 20204                                  ;	exit:
 20205                                  ;	   ds:si -> DPB, or si = -1 if not found
 20206                                  ; ----------------------------------------------------------------------
 20207                                  
 20208                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 20209                                  ;
 20210                                  ;get_dpb_for_drive_al:
 20211                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 20212                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 20213                                  ;	lds	si,[si]
 20214                                  ;	sub	al,'A'
 20215                                  ;
 20216                                  ;get_dpb_for_drive_1:
 20217                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 20218                                  ;	cmp	al,[si]
 20219                                  ;	je	short got_dpb_for_drive	;  done if so
 20220                                  ;
 20221                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20222                                  ;	cmp	si,-1
 20223                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 20224                                  ;
 20225                                  ;got_dpb_for_drive:
 20226                                  ;	retn
 20227                                  
 20228                                  ;=======================================================================
 20229                                  
 20230                                  ;**	EndFile - Build DOS structures
 20231                                  ;
 20232                                  ; This procedure is called after the config.sys has been processed and
 20233                                  ; installable device drivers have been loaded (but before "install="
 20234                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 20235                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 20236                                  ; to allow for the safe EXECing of "install=" programs. All memory
 20237                                  ; above these structures is deallocated back to DOS.
 20238                                  ;
 20239                                  ;	ENTRY	?? BUGBUG
 20240                                  ;	EXIT	?? BUGBUG
 20241                                  ;	USES	?? BUGBUG
 20242                                  
 20243                                  ;=======================================================================
 20244                                  ; allocate files
 20245                                  ; ----------------------------------------------------------------------
 20246                                  
 20247                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20248                                  	; (SYSINIT:0CCDh)
 20249                                  
 20250                                  endfile:
 20251                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 20252                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 20253                                  ; to confbot.
 20254                                  
 20255                                  ;	if this procedure has been called to take care of install= command,
 20256                                  ;	   then we have to save es,si registers.
 20257                                  
 20258                                  	; 11/12/2022
 20259                                  	; ds = cs
 20260                                  
 20261                                  	; 23/10/2022
 20262                                  	; 31/03/2019
 20263 00000C5B 1E                      	push	ds
 20264                                  
 20265                                  	;;mov	ax,Bios_Data ; 0070h
 20266                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 20267                                  	; 21/10/2022
 20268 00000C5C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20269 00000C5F 8ED8                    	mov	ds,ax
 20270                                  
 20271                                  	;cmp	word [052Fh],0
 20272 00000C61 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 20273 00000C66 7505                    	jne	short multrk_flag_done
 20274                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20275                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 20276                                  	; 12/12/2022
 20277 00000C68 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 20278                                  multrk_flag_done:
 20279                                  	; 23/10/2022
 20280                                  	; 31/03/2019
 20281 00000C6D 1F                      	pop	ds
 20282                                  
 20283                                  	; 11/12/2022
 20284                                  	; ds = cs
 20285 00000C6E A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 20286 00000C71 A3[A302]                	mov	[ALLOCLIM],ax
 20287                                  	; 23/10/2022
 20288                                  	;mov	ax, [cs:top_of_cdss]
 20289                                  	;mov	[cs:ALLOCLIM], ax 
 20290                                  
 20291                                  	; 11/12/2022
 20292                                  	; ds = cs
 20293                                  	;push	cs
 20294                                  	;pop	ds
 20295                                  	
 20296                                  	;mov	ax,[CONFBOT]
 20297                                  	;mov	[ALLOCLIM],ax
 20298                                  
 20299 00000C74 E8A023                  	call	round
 20300                                  	; 11/12/2022
 20301                                  	; ds = cs
 20302 00000C77 A0[9D02]                	mov	al,[FILES]
 20303                                  	; 23/10/2022
 20304                                  	;mov	al,[cs:FILES]
 20305 00000C7A 2C05                    	sub	al,5
 20306 00000C7C 764B                    	jbe	short dofcbs
 20307                                  
 20308 00000C7E 50                      	push	ax
 20309                                  	;mov	al,devmark_files ; 'F'
 20310 00000C7F B046                    	mov	al,'F'
 20311 00000C81 E86D07                  	call	setdevmark		; set devmark for sfts (files)
 20312 00000C84 58                      	pop	ax
 20313 00000C85 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20314                                  					;  it does sign extend.
 20315                                  	; 11/12/2022
 20316                                  	; ds = cs
 20317 00000C87 8B1E[DE03]              	mov	bx,[memlo]
 20318 00000C8B 8B16[E003]              	mov	dx,[memhi]
 20319 00000C8F C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20320                                  	; 23/10/2022
 20321                                  	;mov	bx,[cs:memlo]
 20322                                  	;mov	dx,[cs:memhi]
 20323                                  	;lds	di,[cs:DOSINFO]		
 20324                                  
 20325                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 20326 00000C93 C57D04                  	lds	di,[di+4]
 20327                                  
 20328                                  	;mov	[di+SF.SFLink],bx
 20329 00000C96 891D                    	mov	[di],bx
 20330 00000C98 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 20331                                  
 20332 00000C9B 0E                      	push	cs
 20333 00000C9C 1F                      	pop	ds
 20334                                  
 20335                                  	; 11/12/2022
 20336                                  	; ds = cs
 20337 00000C9D C43E[DE03]              	les	di,[memlo]		;point to new sft
 20338                                  	; 23/10/2022
 20339                                  	;les	di,[cs:memlo]
 20340                                  
 20341                                  	;mov	word [es:di+SF.SFLink],-1
 20342 00000CA1 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 20343                                  	;mov	[es:di+SF.SFCount],ax
 20344 00000CA6 26894504                	mov	[es:di+4],ax
 20345                                  	;mov	bl,SF_ENTRY.size ; 59
 20346 00000CAA B33B                    	mov	bl,59
 20347 00000CAC F6E3                    	mul	bl			;ax = number of bytes to clear
 20348 00000CAE 89C1                    	mov	cx,ax
 20349                                  	; 11/12/2022
 20350                                  	; ds = cs
 20351 00000CB0 0106[DE03]              	add	[memlo],ax		;allocate memory
 20352                                  	; 23/10/2022
 20353                                  	;add	[cs:memlo],ax
 20354 00000CB4 B80600                  	mov	ax,6
 20355                                  	; 11/12/2022
 20356 00000CB7 0106[DE03]              	add	[memlo],ax		;remember the header too
 20357                                  	;add	[cs:memlo],ax
 20358                                  	; 11/12/2022
 20359 00000CBB 800E[1014]02            	or	byte [setdevmarkflag],for_devmark ; 2
 20360                                  	; 23/10/2022
 20361                                  	;or	byte [cs:setdevmarkflag],2
 20362 00000CC0 E85423                  	call	round			; check for mem error before the stosb
 20363 00000CC3 01C7                    	add	di,ax
 20364 00000CC5 31C0                    	xor	ax,ax
 20365 00000CC7 F3AA                    	rep	stosb			;clean out the stuff
 20366                                  
 20367                                  ; allocate fcbs
 20368                                  ; ----------------------------------------------------------------------
 20369                                  
 20370                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20371                                  	; (SYSINIT:0D48h)
 20372                                  dofcbs:
 20373                                  	; 11/12/2022
 20374                                  	; ds = cs
 20375                                  	;push	cs
 20376                                  	;pop	ds
 20377 00000CC9 E84B23                  	call	round
 20378                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 20379 00000CCC B058                    	mov	al,'X'
 20380 00000CCE E82007                  	call	setdevmark
 20381                                  	; 11/12/2022
 20382                                  	; ds = cs
 20383 00000CD1 A0[9E02]                	mov	al,[FCBS]
 20384                                  	;mov	al,[cs:FCBS]
 20385 00000CD4 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20386                                  					;  it does sign extend.
 20387                                  	; 11/12/2022
 20388 00000CD6 8B1E[DE03]              	mov	bx,[memlo]
 20389 00000CDA 8B16[E003]              	mov	dx,[memhi]
 20390 00000CDE C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20391                                  	; 23/10/2022
 20392                                  	;mov	bx,[cs:memlo]
 20393                                  	;mov	dx,[cs:memhi]
 20394                                  	;lds	di,[cs:DOSINFO]
 20395                                  
 20396                                  	;mov	[di+SYSI_FCB],bx
 20397                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 20398                                  	; 23/10/2022
 20399 00000CE2 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 20400 00000CE5 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 20401                                  
 20402 00000CE8 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 20403 00000CED 30FF                    	xor	bh,bh
 20404                                  	;mov	[di+SYSI_KEEP],bx
 20405 00000CEF 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 20406                                  
 20407 00000CF2 0E                      	push	cs
 20408 00000CF3 1F                      	pop	ds
 20409                                  	
 20410 00000CF4 C43E[DE03]              	les	di,[memlo]		;point to new table
 20411                                  	;mov	word [es:di+SF.SFLink],-1
 20412 00000CF8 26C705FFFF              	mov	word [es:di],-1
 20413                                  	;mov	[es:di+SF.SFCount],ax
 20414                                  	; 02/11/2022
 20415 00000CFD 26894504                	mov	[es:di+4],ax
 20416 00000D01 B339                    	mov	bl,SF_ENTRY.size ; 59
 20417 00000D03 89C1                    	mov	cx,ax
 20418 00000D05 F6E3                    	mul	bl			;ax = number of bytes to clear
 20419 00000D07 0106[DE03]              	add	[memlo],ax		;allocate memory
 20420                                  	;mov	ax,6
 20421 00000D0B B80600                  	mov	ax,SF.size-2 ; 6
 20422 00000D0E 0106[DE03]              	add	[memlo],ax		;remember the header too
 20423                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20424 00000D12 800E[1014]02            	or	byte [setdevmarkflag],2
 20425 00000D17 E8FD22                  	call	round			; check for mem error before the stosb
 20426 00000D1A 01C7                    	add	di,ax			;skip over header
 20427 00000D1C B041                    	mov	al,'A'
 20428                                  fillloop:
 20429 00000D1E 51                      	push	cx			; save count
 20430 00000D1F B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 20431 00000D22 FC                      	cld
 20432 00000D23 F3AA                    	rep	stosb			; filled
 20433                                  
 20434                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 20435                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 20436                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 20437                                  
 20438                                  	; 18/12/2022
 20439                                  	;cx = 0
 20440 00000D25 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 20441 00000D29 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 20442 00000D2D 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 20443                                  	
 20444                                  	; 23/10/2022	
 20445                                  	;mov     word [es:di-3Bh],0
 20446                                  	;mov     word [es:di-26h],0
 20447                                  	;mov     word [es:di-24h],0
 20448                                  
 20449 00000D31 59                      	pop	cx
 20450 00000D32 E2EA                    	loop	fillloop
 20451                                  
 20452                                  ; allocate buffers
 20453                                  ; ----------------------------------------------------------------------
 20454                                  
 20455                                  ; search through the list of media supported and allocate 3 buffers if the
 20456                                  ; capacity of the drive is > 360kb
 20457                                  
 20458                                  	; 18/12/2022
 20459                                  	; cx = 0
 20460 00000D34 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 20461 00000D39 7403                    	je	short dodefaultbuff
 20462 00000D3B E98000                  	jmp	dobuff			; the user entered the buffers=.
 20463                                  
 20464                                  dodefaultbuff:
 20465                                  	; 18/12/2022
 20466 00000D3E 890E[9902]              	mov	[h_buffers],cx ; 0
 20467 00000D42 41                      	inc	cx
 20468 00000D43 41                      	inc	cx
 20469 00000D44 890E[9702]              	mov	[buffers],cx ; 2
 20470                                  	
 20471                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 20472                                  	;mov	word [buffers],2	; default to 2 buffers
 20473                                  
 20474                                  	; 23/10/2022
 20475                                  	; 04/09/2023
 20476                                  	;push	ax
 20477                                  	;push	ds ; 26/03/2019
 20478                                  
 20479                                  	; 04/09/2023
 20480                                  	; ds = cs
 20481 00000D48 C42E[6B02]              	les	bp,[DOSINFO]		; search through the dpb's
 20482                                  	;les	bp,[cs:DOSINFO]
 20483                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 20484                                  	; 11/12/2022
 20485 00000D4C 26C46E00                	les	bp,[es:bp]
 20486                                  	; 23/10/2022
 20487                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 20488                                  
 20489                                  	; 04/09/2023
 20490                                  	; ds = cs
 20491                                  	;push	cs
 20492                                  	;pop	ds
 20493                                  ;SYSINIT:0DE2h:
 20494                                  nextdpb:				; test if the drive supports removeable media
 20495                                  	;mov	bl,[es:bp+DPB.drive]
 20496                                  	; 11/12/2022
 20497 00000D50 268A5E00                	mov	bl,[es:bp]
 20498                                  	; 23/10/2022
 20499                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20500                                  
 20501                                  	;inc	bl
 20502                                  	; 18/12/2022
 20503 00000D54 43                      	inc	bx
 20504                                  
 20505                                  	;mov	ax,(IOCTL<<8)|8
 20506 00000D55 B80844                  	mov	ax,4408h
 20507 00000D58 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20508                                  
 20509                                  ; ignore fixed disks
 20510                                  
 20511 00000D5A 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20512 00000D5C 7534                    	jnz	short nosetbuf
 20513                                  
 20514                                  ; get parameters of drive
 20515                                  
 20516 00000D5E 31DB                    	xor	bx,bx
 20517                                  	;;mov	bl,[es:bp+DPB.drive]
 20518                                  	; 11/12/2022
 20519 00000D60 268A5E00                	mov	bl,[es:bp]
 20520                                  	; 23/10/2022
 20521                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20522                                  	
 20523                                  	;inc	bl
 20524                                  	; 18/12/2022
 20525 00000D64 43                      	inc	bx
 20526                                  
 20527 00000D65 BA[7434]                	mov	dx,deviceparameters
 20528                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20529 00000D68 B80D44                  	mov	ax,440Dh
 20530                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20531 00000D6B B96008                  	mov	cx,860h
 20532 00000D6E CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20533 00000D70 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20534                                  					; generic ioctl
 20535                                  ; determine capacity of drive
 20536                                  ; media capacity = #sectors * bytes/sector
 20537                                  
 20538                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20539                                  	; 23/10/2022
 20540 00000D72 8B1E[8334]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20541                                  	
 20542                                  ; to keep the magnitude of the media capacity within a word,
 20543                                  ; scale the sector size
 20544                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20545                                  
 20546                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20547                                  	; 23/10/2022
 20548 00000D76 A1[7B34]                	mov	ax, [deviceparameters+7] ; bytes per sector
 20549 00000D79 31D2                    	xor	dx,dx
 20550 00000D7B B90002                  	mov	cx,512
 20551 00000D7E F7F1                    	div	cx			; scale sector size in factor of
 20552                                  					; 512 bytes
 20553 00000D80 F7E3                    	mul	bx			; ax = #sectors * size factor
 20554 00000D82 09D2                    	or	dx,dx			; just in case of large floppies
 20555 00000D84 7505                    	jnz	short setbuf
 20556 00000D86 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20557 00000D89 7607                    	jbe	short nosetbuf
 20558                                  setbuf:
 20559                                  	; 18/12/2022
 20560                                  	; word [buffers] = 2
 20561 00000D8B C606[9702]03            	mov	byte [buffers],3
 20562                                  	;mov	word [buffers],3
 20563 00000D90 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20564                                  					; for default buffer count
 20565                                  nosetbuf:
 20566                                  	; 23/10/2022
 20567                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20568 00000D92 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20569 00000D97 7406                    	je	short chk_memsize_for_buffers
 20570                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20571 00000D99 26C46E19                	les	bp,[es:bp+19h]
 20572 00000D9D EBB1                    	jmp	short nextdpb
 20573                                  
 20574                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20575                                  ;memory size too.
 20576                                  ; default buffers = 2
 20577                                  ; if diskette media > 360 kb,then default buffers = 3
 20578                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20579                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20580                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20581                                  
 20582                                  chk_memsize_for_buffers:
 20583                                  	; 18/12/2022
 20584                                  	;cmp	word [MEMORY_SIZE],2000h
 20585                                  	;jbe	short bufset
 20586                                  	;mov	word [buffers],5
 20587                                  	;cmp	word [MEMORY_SIZE],4000h
 20588                                  	;jbe	short bufset
 20589                                  	;mov	word [buffers],10
 20590                                  	;cmp	word [MEMORY_SIZE],8000h
 20591                                  	;jbe	short bufset
 20592                                  	;mov	word [buffers],15
 20593                                  
 20594                                  	; 18/12/2022
 20595                                  	; word [buffers] = 3 or 2
 20596 00000D9F BB[9702]                	mov	bx,buffers
 20597 00000DA2 A1[9202]                	mov	ax,[MEMORY_SIZE]
 20598 00000DA5 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20599                                  
 20600 00000DA6 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20601 00000DA9 7213                    	jb	short bufset
 20602 00000DAB C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20603 00000DAE 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20604 00000DB1 730B                    	jnb	short bufset
 20605 00000DB3 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20606 00000DB6 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20607 00000DB9 7303                    	jnb	short bufset
 20608 00000DBB C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20609                                  bufset:
 20610                                  	; 23/10/2022
 20611                                  	; 26/03/2019
 20612                                  	; 04/09/2023
 20613                                  	;pop	ds
 20614                                  	;pop	ax
 20615                                  
 20616                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20617                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20618                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20619                                  
 20620                                  ; 26/03/2019
 20621                                  
 20622                                  ;*******************************************************************************
 20623                                  ;									       *
 20624                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20625                                  ; input :								       *
 20626                                  ;    memhi:memlo - start of the next available memory			       *
 20627                                  ;    buffers = number of buffers					       *
 20628                                  ;    h_buffers = number of secondary buffers				       *
 20629                                  ;									       *
 20630                                  ; output:								       *
 20631                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20632                                  ;	buffinfo set.							       *
 20633                                  ;	bufferqueue set.						       *
 20634                                  ;									       *
 20635                                  ; subroutines to be called:						       *
 20636                                  ;									       *
 20637                                  ;*******************************************************************************
 20638                                  
 20639                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20640                                  	; (SYSINIT:0E60h)
 20641                                  dobuff:
 20642                                  	; ds = cs ; 31/03/2019
 20643                                  	; 23/10/2022
 20644                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20645                                  	; 04/09/2023
 20646 00000DBE A1[9702]                	mov	ax,[buffers] ; 31/03/2019
 20647 00000DC1 8B0E[9902]              	mov	cx,[h_buffers] ; *
 20648 00000DC5 C51E[6B02]              	lds	bx,[DOSINFO]
 20649                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 20650                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20651 00000DC9 89473F                  	mov	[bx+3Fh],ax
 20652                                  	; 04/09/2023
 20653                                  	;mov	ax,[cs:h_buffers]
 20654                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20655                                  	;mov	[bx+41h],ax
 20656                                  	; 04/09/2023
 20657 00000DCC 894F41                  	mov	[bx+41h],cx ; *
 20658 00000DCF C55F12                  	lds	bx,[bx+12h]
 20659                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20660 00000DD2 E84222                  	call	round		; get [memhi]:[memlo]
 20661                                  	;mov	al,devmark_buf	; ='B'
 20662 00000DD5 B042                    	mov	al,'B'	
 20663 00000DD7 E81706                  	call	setdevmark
 20664                                  
 20665                                  ;allocate buffers
 20666                                  
 20667 00000DDA 1E                      	push	ds			; save buffer info. ptr.
 20668 00000DDB 53                      	push	bx
 20669                                  
 20670 00000DDC E85203                  	call	set_buffer
 20671                                  
 20672 00000DDF 5B                      	pop	bx
 20673 00000DE0 1F                      	pop	ds
 20674                                  
 20675                                  ;now set the secondary buffer if specified.
 20676                                  
 20677 00000DE1 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20678 00000DE7 742D                    	je	short xif16
 20679 00000DE9 E82B22                  	call	round
 20680                                  	; 23/10/2022
 20681 00000DEC 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 20682                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20683 00000DF1 894F06                  	mov	[bx+6],cx
 20684 00000DF4 2E8B0E[E003]            	mov	cx,[cs:memhi]
 20685                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20686 00000DF9 894F08                  	mov	[bx+8],cx
 20687 00000DFC 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20688                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20689 00000E01 894F0A                  	mov	[bx+10],cx
 20690 00000E04 B80002                  	mov	ax,512			; 512 byte
 20691 00000E07 F7E1                    	mul	cx
 20692 00000E09 2EA3[DE03]              	mov	[cs:memlo],ax
 20693                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20694 00000E0D 2E800E[1014]02          	or	byte [cs:setdevmarkflag],2
 20695 00000E13 E80122                  	call	round
 20696                                  xif16:
 20697                                  
 20698                                  ; ----------------------------------------------------------------------
 20699                                  ; allocate cdss
 20700                                  ; ----------------------------------------------------------------------
 20701                                  
 20702                                  buf1:
 20703 00000E16 E8FE21                  	call	round
 20704                                  
 20705 00000E19 50                      	push	ax
 20706                                  	; 23/10/2022
 20707                                  	;mov	ax,devmark_cds		;='L'
 20708 00000E1A B84C00                  	mov	ax, 'L'
 20709 00000E1D E8D105                  	call	setdevmark
 20710 00000E20 58                      	pop	ax
 20711                                  
 20712 00000E21 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20713                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20714 00000E26 268A4D20                	mov	cl,[es:di+20h]
 20715 00000E2A 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20716 00000E2F 7305                    	jae	short gotncds 		; user setting must be at least numio
 20717 00000E31 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20718                                  gotncds:
 20719 00000E36 30ED                    	xor	ch,ch
 20720                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20721 00000E38 26884D21                	mov	[es:di+21h],cl
 20722 00000E3C 2EA1[E003]              	mov	ax,[cs:memhi]
 20723                                  	;mov	[es:di+SYSI_CDS+2],ax
 20724 00000E40 26894518                	mov	[es:di+18h],ax
 20725 00000E44 2EA1[DE03]              	mov	ax,[cs:memlo]
 20726                                  	;mov	[es:di+SYSI_CDS],ax
 20727 00000E48 26894516                	mov	[es:di+16h],ax
 20728 00000E4C 88C8                    	mov	al,cl
 20729                                  	;mov	ah,curdirlen ; curdir_list.size
 20730 00000E4E B458                    	mov	ah,88
 20731 00000E50 F6E4                    	mul	ah
 20732 00000E52 E84F02                  	call	ParaRound
 20733 00000E55 2E0106[E003]            	add	[cs:memhi],ax
 20734                                  
 20735                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20736 00000E5A 2E800E[1014]02          	or	byte [cs:setdevmarkflag],2
 20737 00000E60 E8B421                  	call	round			; check for mem error before initializing
 20738                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20739 00000E63 26C535                  	lds	si,[es:di]
 20740                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20741 00000E66 26C47D16                	les	di,[es:di+16h]
 20742 00000E6A E88CFD                  	call	fooset
 20743                                  
 20744                                  ; ----------------------------------------------------------------------
 20745                                  ; allocate space for internal stack
 20746                                  ; ----------------------------------------------------------------------
 20747                                  
 20748 00000E6D 0E                      	push	cs
 20749 00000E6E 1F                      	pop	ds
 20750                                  
 20751                                  ;	if the user did not entered stacks= command, as a default, do not install
 20752                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20753                                  ;	otherwise,install it to the user specified value or to the default
 20754                                  ;	value of 9,128 for other systems.
 20755                                  
 20756 00000E6F 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20757 00000E74 740E                    	je	short doinstallstack	; then install as specified by the user
 20758 00000E76 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20759 00000E7B 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20760 00000E7D 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20761 00000E82 736D                    	jae	short skipstack
 20762                                  doinstallstack:
 20763 00000E84 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20764 00000E87 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20765 00000E89 7466                    	jz	short skipstack		; don't install stack.
 20766                                  
 20767                                  ;	dynamic relocation of stack code.
 20768                                  
 20769 00000E8B E88921                  	call	round			;[memhi] = seg. for stack code
 20770                                  					;[memlo] = 0
 20771                                  
 20772                                  ; set devmark block into memory for mem command
 20773                                  ; devmark_id = 's' for stack
 20774                                  
 20775                                  	;mov	al,devmark_stk	;='S'
 20776                                  	; 23/10/2022
 20777 00000E8E B053                    	mov	al,'S'
 20778 00000E90 E85E05                  	call	setdevmark
 20779                                  
 20780 00000E93 A1[E003]                	mov	ax,[memhi]
 20781 00000E96 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 20782                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20783                                  	; 11/12/2022
 20784                                  	; ds = cs
 20785                                  	;push	cs
 20786                                  	;pop	ds
 20787 00000E98 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 20788 00000E9A 31FF                    	xor	di,di
 20789 00000E9C B9[6702]                	mov	cx,endstackcode
 20790 00000E9F 890E[DE03]              	mov	[memlo],cx
 20791 00000EA3 E87121                  	call	round		;have enough space for relocation?
 20792 00000EA6 F3A4                    	rep	movsb
 20793                                  
 20794 00000EA8 1E                      	push	ds		; stick the location of the NextStack entry
 20795                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20796                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20797                                  	; 21/10/2022
 20798 00000EA9 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20799 00000EAC 8ED8                    	mov	ds,ax
 20800 00000EAE C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20801 00000EB4 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20802                                  
 20803 00000EB8 2EA1[DE03]              	mov	ax,[cs:memlo]
 20804 00000EBC 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20805 00000EC0 A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20806 00000EC3 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20807 00000EC7 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20808 00000ECB A3[C608]                	mov	[IT_StackLoc+2],ax
 20809                                  
 20810                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20811                                  
 20812                                  	;mov	ax,entrysize ; mov ax,8
 20813                                  	; 23/10/2022
 20814 00000ECE B80800                  	mov	ax,8
 20815 00000ED1 2E0306[8C02]            	add	ax,[cs:stack_size]
 20816 00000ED6 2EF726[8A02]            	mul	word [cs:stack_count]
 20817                                  
 20818 00000EDB A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20819                                  
 20820 00000EDE 1F                      	pop	ds		; no more need to access Instance Table
 20821                                  
 20822 00000EDF E8C201                  	call	ParaRound	; convert size to paragraphs
 20823                                  	
 20824                                  	; 11/12/2022
 20825                                  	; ds = cs
 20826                                  	;add	[cs:memhi],ax
 20827 00000EE2 0106[E003]              	add	[memhi],ax
 20828                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20829                                  	;or	byte [cs:setdevmarkflag],2
 20830 00000EE6 800E[1014]02            	or	byte [setdevmarkflag],2
 20831                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20832                                  				;to set the devmark_size for stack by round routine.
 20833 00000EEB E82921                  	call	round		; check for memory error before
 20834                                  				; continuing
 20835 00000EEE E8E702                  	call	stackinit	; initialize hardware stack. 
 20836                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20837                                  skipstack:
 20838                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20839                                  	; (SYSINIT:0F99h)
 20840                                  
 20841                                  	; 11/12/2022
 20842                                  	; ds = cs
 20843                                  	;push	cs
 20844                                  	;pop	ds
 20845                                  
 20846 00000EF1 A0[9D02]                	mov	al,[FILES]
 20847 00000EF4 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20848                                  				;  it does sign extend.
 20849 00000EF6 89C1                    	mov	cx,ax
 20850 00000EF8 31DB                    	xor	bx,bx		;close standard input
 20851 00000EFA B43E                    	mov	ah,3Eh ; CLOSE
 20852 00000EFC CD21                    	int	21h
 20853 00000EFE BB0200                  	mov	bx,2
 20854                                  rcclloop:			;close everybody but standard output
 20855 00000F01 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20856 00000F03 CD21                    	int	21h		; in case we can't get new one open.
 20857 00000F05 43                      	inc	bx
 20858 00000F06 E2F9                    	loop	rcclloop
 20859                                  
 20860 00000F08 BA[FE32]                	mov	dx,condev
 20861 00000F0B B002                    	mov	al,2
 20862 00000F0D B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20863 00000F0F F9                      	stc			; set for possible int 24
 20864 00000F10 CD21                    	int	21h
 20865 00000F12 7305                    	jnc	short goaux
 20866 00000F14 E84A23                  	call	badfil
 20867 00000F17 EB13                    	jmp	short goaux2
 20868                                  goaux:	
 20869 00000F19 50                      	push	ax
 20870 00000F1A BB0100                  	mov	bx,1		;close standard output
 20871 00000F1D B43E                    	mov	ah,3Eh ; CLOSE
 20872 00000F1F CD21                    	int	21h
 20873 00000F21 58                      	pop	ax
 20874                                  
 20875 00000F22 89C3                    	mov	bx,ax		;new device handle
 20876 00000F24 B445                    	mov	ah,45h ; XDUP
 20877 00000F26 CD21                    	int	21h		;dup to 1,stdout
 20878 00000F28 B445                    	mov	ah,45h ; XDUP
 20879 00000F2A CD21                    	int	21h		;dup to 2,stderr
 20880                                  goaux2: 
 20881 00000F2C BA[0233]                	mov	dx,auxdev
 20882 00000F2F B002                    	mov	al,2		;read/write access
 20883 00000F31 E85E23                  	call	open_dev
 20884                                  
 20885 00000F34 BA[0633]                	mov	dx,prndev
 20886 00000F37 B001                    	mov	al,1		;write only
 20887 00000F39 E85623                  	call	open_dev
 20888                                  
 20889                                  ;global rearm command for shared interrupt devices attached in the system;
 20890                                  ;shared interrupt attachment has some problem when it issues interrupt
 20891                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20892                                  ;no further interrupts on that level will be presented until a global rearm
 20893                                  ;is issued. by the request of the system architecture group, msbio will
 20894                                  ;issue a global rearm after every device driver is loaded.
 20895                                  ;to issue a global rearm:	;for pc1,xt,palace
 20896                                  ;
 20897                                  ;			  out 02f2h,xx  ; interrupt level 2
 20898                                  ;			  out 02f3h,xx  ; interrupt level 3
 20899                                  ;			  out 02f4h,xx  ; interrupt level 4
 20900                                  ;			  out 02f5h,xx  ; interrupt level 5
 20901                                  ;			  out 02f6h,xx  ; interrupt level 6
 20902                                  ;			  out 02f7h,xx  ; interrupt level 7
 20903                                  ;
 20904                                  ;	for pc at,in addition to the above commands,
 20905                                  ;	need to handle the secondary interrupt handler
 20906                                  ;
 20907                                  ;			  out 06f2h,xx  ; interrupt level 10
 20908                                  ;			  out 06f3h,xx  ; interrupt level 11
 20909                                  ;			  out 06f4h,xx  ; interrupt level 12
 20910                                  ;			  out 06f6h,xx  ; interrupt level 14
 20911                                  ;			  out 06f7h,xx  ; interrupt level 15
 20912                                  ;
 20913                                  ;	for round-up machine
 20914                                  ;
 20915                                  ;			  none.
 20916                                  
 20917                                  ; where xx stands for any value.
 20918                                  ;
 20919                                  ; for your information,after naples level machine,the system service bios
 20920                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20921                                  
 20922                                  	; 24/10/2022
 20923                                  
 20924 00000F3C 50                      	push	ax
 20925 00000F3D 53                      	push	bx
 20926 00000F3E 52                      	push	dx
 20927 00000F3F 06                      	push	es
 20928                                  
 20929 00000F40 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20930 00000F42 BAF202                  	mov	dx,2F2h 		;get starting address
 20931 00000F45 EE                      	out	dx,al			; out 02f2h,0ffh
 20932 00000F46 42                      	inc	dx
 20933 00000F47 EE                      	out	dx,al			; out 02f3h,0ffh
 20934 00000F48 42                      	inc	dx
 20935 00000F49 EE                      	out	dx,al			; out 02f4h,0ffh
 20936 00000F4A 42                      	inc	dx
 20937 00000F4B EE                      	out	dx,al			; out 02f5h,0ffh
 20938 00000F4C 42                      	inc	dx
 20939 00000F4D EE                      	out	dx,al			; out 02f6h,0ffh
 20940 00000F4E 42                      	inc	dx
 20941 00000F4F EE                      	out	dx,al			; out 02f7h,0ffh
 20942                                  
 20943                                  ;sb secondary global rearm
 20944                                  
 20945 00000F50 B800F0                  	mov	ax,0F000h		;get machine type
 20946 00000F53 8EC0                    	mov	es,ax
 20947 00000F55 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20948 00000F5B 740D                    	je	short startrearm	; *if at no need to check
 20949                                  
 20950 00000F5D B4C0                    	mov	ah,0C0h 		;get system configuration
 20951 00000F5F CD15                    	int	15h			; *
 20952 00000F61 7216                    	jc	short finishrearm	; *jmp if old rom
 20953                                  
 20954                                  ; test feature byte for secondary interrupt controller
 20955                                  
 20956 00000F63 26F6470540              	test	byte [es:bx+5],40h
 20957                                  	; 24/10/2022
 20958                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20959 00000F68 740F                    	je	short finishrearm	;jmp if it is there
 20960                                  
 20961                                  startrearm:
 20962 00000F6A B0FF                    	mov	al,0FFh 		;write any pattern to port
 20963 00000F6C BAF206                  	mov	dx,6F2h 		;get starting address
 20964 00000F6F EE                      	out	dx,al			;out 06f2h,0ffh
 20965 00000F70 42                      	inc	dx			;bump address
 20966 00000F71 EE                      	out	dx,al			;out 06f3h,0ffh
 20967 00000F72 42                      	inc	dx			;bump address
 20968 00000F73 EE                      	out	dx,al			;out 06f4h,0ffh
 20969 00000F74 42                      	inc	dx			;bump address
 20970 00000F75 42                      	inc	dx			;bump address
 20971 00000F76 EE                      	out	dx,al			;out 06f6h,0ffh
 20972 00000F77 42                      	inc	dx			;bump address
 20973 00000F78 EE                      	out	dx,al			;out 06f7h,0ffh
 20974                                  
 20975                                  finishrearm:
 20976 00000F79 07                      	pop	es
 20977 00000F7A 5A                      	pop	dx
 20978 00000F7B 5B                      	pop	bx
 20979 00000F7C 58                      	pop	ax
 20980                                  
 20981                                  ;    global rearm end *******************
 20982                                  
 20983                                  ; ----------------------------------------------------------------------
 20984                                  ; allocate sysinit_base for install= command
 20985                                  ; ----------------------------------------------------------------------
 20986                                  ; sysinit_base allocation.
 20987                                  ;   check if endfile has been called to handle install= command.
 20988                                  
 20989                                  set_sysinit_base:
 20990                                  
 20991                                  ; ----------------------------------------------------------------------
 20992                                  ;sysinit_base will be established in the secure area of
 20993                                  ;lower memory when it handles the first install= command.
 20994                                  ;sysinit_base is the place where the actual exec function will be called and
 20995                                  ;will check sysinit module in high memory if it is damaged by the application
 20996                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20997                                  ;is displayed by sysinit_base.
 20998                                  ; ----------------------------------------------------------------------
 20999                                  
 21000                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 21001                                  	; (SYSINIT:1028h)
 21002                                  
 21003                                  	; 11/12/2022
 21004                                  	; ds = cs
 21005 00000F7D 50                      	push	ax			; set devmark for mem command
 21006 00000F7E A1[E003]                	mov	ax,[memhi]
 21007 00000F81 2B06[E403]              	sub	ax,[area]
 21008 00000F85 A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 21009                                  	;mov	al,devmark_inst ; 'T'
 21010 00000F88 B054                    	mov	al,'T'
 21011 00000F8A E86404                  	call	setdevmark
 21012 00000F8D 58                      	pop	ax
 21013                                  
 21014 00000F8E 8B3E[E003]              	mov	di,[memhi]
 21015 00000F92 8EC7                    	mov	es,di
 21016 00000F94 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 21017 00000F98 31FF                    	xor	di,di
 21018 00000F9A 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 21019 00000F9E BE[B010]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 21020 00000FA1 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 21021                                  	; 24/10/2022 
 21022                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 21023 00000FA4 010E[DE03]              	add	[memlo],cx
 21024                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 21025                                  	; 11/12/2022
 21026                                  	; ds = cs
 21027                                  	;or	byte [cs:setdevmarkflag],2
 21028 00000FA8 800E[1014]02            	or	byte [setdevmarkflag],2
 21029                                  	;or	byte [setdevmarkflag],for_devmark
 21030 00000FAD E86720                  	call	round			; check mem error. also,readjust memhi for the next use.
 21031 00000FB0 F3A4                    	rep	movsb			; reallocate it.
 21032                                  
 21033 00000FB2 C706[5203][8910]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 21034 00000FB8 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 21035                                  	;or	word [install_flag],has_installed ; set the flag.
 21036                                  	;or	byte [install_flag],has_installed ; 2
 21037                                  	; 11/12/2022
 21038 00000FBC 800E[4A03]02            	or	byte [install_flag],2
 21039                                  	; 24/10/2022
 21040                                  	;or	word [install_flag],2	
 21041                                  
 21042                                  ; ----------------------------------------------------------------------
 21043                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 21044                                  ; the top of the memory will be allocated for sysinit and config.sys if
 21045                                  ; have_install_cmd.
 21046                                  ; ----------------------------------------------------------------------
 21047                                  
 21048 00000FC1 E85320                  	call	round
 21049 00000FC4 8B1E[E003]              	mov	bx,[memhi]
 21050 00000FC8 A1[E403]                	mov	ax,[area]
 21051 00000FCB A3[DA03]                	mov	[old_area],ax		; save [area]
 21052 00000FCE 8EC0                    	mov	es,ax			;calc what we needed
 21053 00000FD0 29C3                    	sub	bx,ax
 21054                                  	; 24/10/2022
 21055 00000FD2 B44A                    	mov	ah,4Ah ; SETBLOCK
 21056 00000FD4 CD21                    	int	21h			;give the rest back
 21057                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21058                                  		; ES = segment address of block to change
 21059                                  		; BX = new size in paragraphs
 21060 00000FD6 06                      	push	es
 21061 00000FD7 8CC0                    	mov	ax,es
 21062 00000FD9 48                      	dec	ax
 21063 00000FDA 8EC0                    	mov	es,ax			;point to arena
 21064                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 21065                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 21066                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 21067                                  	; 24/10/2022
 21068 00000FDC 26C70601000800          	mov	word [es:1],8		;set impossible owner
 21069 00000FE3 26C70608005344          	mov	word [es:8],'SD'	; System Data
 21070 00000FEA 07                      	pop	es
 21071                                  
 21072 00000FEB BBFFFF                  	mov	bx,0FFFFh
 21073 00000FEE B448                    	mov	ah,48h ; ALLOC
 21074 00000FF0 CD21                    	int	21h
 21075 00000FF2 B448                    	mov	ah,48h ; ALLOC
 21076 00000FF4 CD21                    	int	21h			; allocate the rest of the memory
 21077                                  		; DOS - 2+ - ALLOCATE MEMORY
 21078                                  		; BX = number of 16-byte paragraphs desired
 21079 00000FF6 A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 21080 00000FF9 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 21081                                  
 21082                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 21083                                  ;;;; allocated.
 21084                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 21085                                  ;;;; this time) to the top-of-the memory),here we are going to
 21086                                  ;;;; 1). "setblock" from memhi to confbot.
 21087                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 21088                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 21089                                  
 21090                                  ;memory allocation for sysinit,confbot module.
 21091                                  
 21092 00000FFF 8EC0                    	mov	es,ax
 21093                                  	;mov	bx,[CONFBOT]
 21094                                  	; 24/10/2022
 21095 00001001 8B1E[A102]              	mov	bx,[top_of_cdss]
 21096 00001005 29C3                    	sub	bx,ax			; confbot - memhi
 21097 00001007 4B                      	dec	bx			; make a room for the memory block id.
 21098 00001008 4B                      	dec	bx			; make sure!!!.
 21099 00001009 B44A                    	mov	ah,4Ah ; SETBLOCK
 21100 0000100B CD21                    	int	21h			; this will free (confbot to top of memory)
 21101                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21102                                  		; ES = segment address of block to change
 21103                                  		; BX = new size in paragraphs
 21104 0000100D BBFFFF                  	mov	bx,0FFFFh
 21105 00001010 B448                    	mov	ah,48h ; ALLOC
 21106 00001012 CD21                    	int	21h
 21107 00001014 B448                    	mov	ah,48h ; ALLOC
 21108 00001016 CD21                    	int	21h			; allocate (confbot to top of memory)
 21109                                  		; DOS - 2+ - ALLOCATE MEMORY
 21110                                  		; BX = number of 16-byte paragraphs desired
 21111 00001018 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 21112                                  					; need this to free this area for command.com.
 21113 0000101B 8E06[E003]              	mov	es,[memhi]
 21114 0000101F B449                    	mov	ah,49h			; free allocated memory.
 21115 00001021 CD21                    	int	21h			; free (memhi to confbot(=area))
 21116                                  		; DOS - 2+ - FREE MEMORY
 21117                                  		; ES = segment address of area to be freed
 21118                                  endfile_ret:
 21119 00001023 C3                      	retn
 21120                                  
 21121                                  ; End of "EndFile" DOS structure configuration.
 21122                                  
 21123                                  ; ----------------------------------------------------------------------
 21124                                  ; 26/03/2019 - Retro DOS v4.0
 21125                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 21126                                  ; ----------------------------------------------------------------------
 21127                                  ; Do_Install_Exec
 21128                                  ;
 21129                                  ; This procedure is used to EXEC a program being loaded via the 
 21130                                  ; "install=" mechanism in config.sys. It does this by setting up
 21131                                  ; the parameters, and then jumping to sysinit_base, which has been
 21132                                  ; setup in low memory. When complete, sysinit_base will jump back
 21133                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 21134                                  ; program).
 21135                                  
 21136                                  ;SYSINIT:10CFh:
 21137                                  
 21138                                  do_install_exec:			; now,handles install= command.
 21139                                  
 21140 00001024 56                      	push	si			; save si for config.sys again.
 21141                                  
 21142                                  ; we are going to call load/exec function.
 21143                                  ; set es:bx to the parameter block here;;;;;;;
 21144                                  ; set ds:dx to the asciiz string. remember that we already has 0
 21145                                  ; after the filename. so parameter starts after that. if next
 21146                                  ; character is a line feed (i.e. 10),then assume that the 0
 21147                                  ; we already encountered used to be a carrage return. in this
 21148                                  ; case,let's set the length to 0 which will be followed by
 21149                                  ; carridge return.
 21150                                  
 21151                                  ; es:si -> command line in config.sys. points to the first non blank
 21152                                  ;character after =.
 21153                                  
 21154 00001025 06                      	push	es
 21155 00001026 1E                      	push	ds
 21156 00001027 07                      	pop	es
 21157 00001028 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 21158 00001029 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 21159                                  
 21160 0000102B 31C9                    	xor	cx,cx
 21161 0000102D FC                      	cld
 21162 0000102E 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 21163 00001034 BF[6E03]                	mov	di,ldexec_parm
 21164                                  installfilename:			; skip the file name
 21165 00001037 AC                      	lodsb				; al = ds:si; si++
 21166 00001038 3C00                    	cmp	al,0
 21167 0000103A 7402                    	je	short got_installparm
 21168 0000103C EBF9                    	jmp	short installfilename
 21169                                  got_installparm:			; copy the parameters to ldexec_parm
 21170 0000103E AC                      	lodsb
 21171 0000103F 268805                  	mov	[es:di],al
 21172 00001042 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 21173 00001044 7405                    	je	short done_installparm
 21174 00001046 FEC1                    	inc	cl			; # of char. in the parm.
 21175 00001048 47                      	inc	di
 21176 00001049 EBF3                    	jmp	short got_installparm
 21177                                  done_installparm:
 21178 0000104B 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 21179 00001050 80F900                  	cmp	cl,0			; if no parm,then
 21180 00001053 7506                    	jne	short install_seg_set 	; let the parm area
 21181 00001055 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 21182                                  					; starts with cr.
 21183                                  install_seg_set:
 21184 0000105B 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 21185 00001062 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 21186                                  
 21187                                  ;---------------------------------------------------M067----------------
 21188                                  ;
 21189                                  ; 	the environment pointer is made 0. so the current environment ptr.
 21190                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 21191                                  ;
 21192                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 21193                                  ;
 21194                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 21195                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 21196                                  ; 	was fixed. 
 21197                                  ;
 21198                                  ; ----------------------------------------------------------------------
 21199                                  
 21200                                  ;;ifdef   MULTI_CONFIG
 21201                                  
 21202                                  ; If there's any environment data in "config_wrkseg", pass to app
 21203                                  
 21204                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21205                                          ;mov     cx,ax
 21206                                          ;cmp     word [cs:config_envlen],0
 21207                                          ;je      short no_envdata2
 21208                                          ;mov     cx,[cs:config_wrkseg]
 21209                                  ;no_envdata2:
 21210                                  ;;endif  ;MULTI_CONFIG
 21211                                  
 21212                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 21213                                  	; 24/10/2022
 21214                                  	;mov	[cs:iexec.environ],cx
 21215                                  	; 02/11/2022
 21216 00001064 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 21217                                  
 21218                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 21219 00001068 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 21220                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 21221 0000106C 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 21222                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 21223 00001070 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 21224 00001074 E86E00                  	call	sum_up
 21225 00001077 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 21226 0000107B 31C0                    	xor	ax,ax
 21227 0000107D B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 21228 0000107F BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 21229 00001082 06                      	push	es			; save es,ds for load/exec
 21230 00001083 1E                      	push	ds			; these registers will be restored in sysinit_base.
 21231 00001084 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 21232                                  					; load/exec function and check sum.
 21233                                  
 21234                                  ;----------------------------------------
 21235                                  
 21236                                  ;j.k. this is the returning address from sysinit_base.
 21237                                  
 21238                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21239                                  
 21240                                  sysinitptr:				; returning far address from sysinit_base
 21241 00001089 5E                      	pop	si			; restore si for config.sys file.
 21242 0000108A 06                      	push	es
 21243 0000108B 1E                      	push	ds
 21244 0000108C 07                      	pop	es
 21245 0000108D 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 21246 0000108E 7306                            jnc     short install_exit_ret
 21247                                  
 21248 00001090 56                      	push	si			; error in loading the file for install=.
 21249 00001091 E8D121                  	call	badload 		; es:si-> path,filename,0.
 21250 00001094 5E                      	pop	si
 21251                                  
 21252                                  	; 24/10/2022
 21253                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 21254                                  	; 11/12/2022
 21255                                  	; ds = cs
 21256 00001095 C3                      	retn
 21257                                  
 21258                                  install_exit_ret:
 21259                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 21260                                  
 21261                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 21262                                  ;SYSINIT:1142h:
 21263 00001096 B44D                    	mov     ah,4Dh
 21264 00001098 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 21265 0000109A 80FC03                  	cmp     ah,3
 21266 0000109D 7404                    	jz      short sysinitptr_retn
 21267 0000109F E80916                  	call    error_line
 21268 000010A2 F9                      	stc
 21269                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 21270 000010A3 C3                      	retn		
 21271                                  
 21272                                  ; ----------------------------------------------------------------------
 21273                                  
 21274                                  ;**	ParaRound - Round Up length to paragraph multiple
 21275                                  ;
 21276                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 21277                                  ;	by 16 yielding a "length in paragraphs" value.
 21278                                  ;
 21279                                  ;	ENTRY	(ax) = byte length
 21280                                  ;	EXIT	(ax) = rounded up length in paragraphs
 21281                                  ;	USES	ax, flags
 21282                                  
 21283                                  ParaRound:
 21284 000010A4 83C00F                  	add	ax,15
 21285 000010A7 D1D8                    	rcr	ax,1
 21286 000010A9 D1E8                    	shr	ax,1
 21287 000010AB D1E8                    	shr	ax,1
 21288 000010AD D1E8                    	shr	ax,1
 21289 000010AF C3                      	retn
 21290                                  
 21291                                  ; ----------------------------------------------------------------------
 21292                                  ; sysinit_base module.
 21293                                  ;
 21294                                  ; This module is relocated by the routine EndFile to a location in low
 21295                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 21296                                  ; that are being loaded by the "install=" command. After the EXEC call
 21297                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 21298                                  ; top of memory) to be sure that the EXECed program did not damage it.
 21299                                  ; If it did, then this module will print an error message and stop the
 21300                                  ; system. Otherwise, it returns control to SYSINIT.
 21301                                  ;
 21302                                  ;in: after relocation,
 21303                                  ;    ax = 4b00h - load and execute the program dos function.
 21304                                  ;    ds = confbot. segment of config.sys file image
 21305                                  ;    es = sysinitseg. segment of sysinit module itself.
 21306                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 21307                                  ;    es:bx = pointer to a parameter block for load.
 21308                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 21309                                  ;    bigsize (word) - # of word from confbot to SI_end.
 21310                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 21311                                  ;			word boundary moduler form.
 21312                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 21313                                  ;
 21314                                  ;note: sysinit should save necessary registers and when the control is back
 21315                                  
 21316                                  	; 24/10/2022
 21317                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 21318                                  sysinit_base:				
 21319 000010B0 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 21320 000010B5 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 21321 000010BA CD21                    	int	21h			; load/exec dos call.
 21322 000010BC 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 21323 000010C1 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 21324 000010C6 1F                      	pop	ds			; restore confbot seg
 21325 000010C7 07                      	pop	es			; restore sysinitseg
 21326 000010C8 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 21327                                  					; at this time,i don't have to worry about
 21328                                  					; that sysinit module has been broken or not.
 21329 000010CA E81800                  	call	sum_up			; otherwise,check if it is good.
 21330 000010CD 263906[5603]            	cmp	[es:checksum],ax
 21331 000010D2 740C                    	je	short sysinit_base_end
 21332                                  
 21333                                  ;	memory broken. show "memory allocation error" message and stall.
 21334                                  
 21335 000010D4 B409                    	mov	ah,9
 21336 000010D6 0E                      	push	cs
 21337 000010D7 1F                      	pop	ds
 21338 000010D8 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 21339 000010DB CD21                    	int	21h
 21340                                  		; DOS - PRINT STRING
 21341                                  		; DS:DX -> string terminated by "$"
 21342                                  	; 24/10/2022
 21343                                  _stall: 
 21344                                  	; 11/12/2022
 21345 000010DD F4                      	hlt 
 21346                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21347                                  	;hlt				;use HLT to minimize energy consumption
 21348 000010DE EBFD                            jmp	short _stall
 21349                                  
 21350                                  sysinit_base_end: 
 21351 000010E0 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 21352                                  
 21353                                  ;-------------------------------------
 21354                                  
 21355                                  sum_up:
 21356                                  
 21357                                  ;in:   es - sysinitseg.
 21358                                  ;out:  ax - result
 21359                                  ;
 21360                                  ;remark: since this routine will only check starting from "locstack" to the end of
 21361                                  ;	 sysinit segment,the data area, and the current stack area are not
 21362                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 21363                                  ;	 gaurantee to be safe.
 21364                                  ;
 21365                                  ;first sum up confbot seg.
 21366                                  
 21367 000010E5 1E                      	push	ds
 21368                                  	;mov	ax,[es:CONFBOT]
 21369                                  	; 24/10/2022
 21370 000010E6 26A1[A102]              	mov	ax,[es:top_of_cdss]
 21371 000010EA 8ED8                    	mov	ds,ax
 21372 000010EC 31F6                    	xor	si,si
 21373 000010EE 31C0                    	xor	ax,ax
 21374 000010F0 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 21375                                  					;whole test better fail.
 21376 000010F5 D1E9                    	shr	cx,1			; make it a word count
 21377 000010F7 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 21378                                  sum1:
 21379 000010F9 0304                    	add	ax,[si]
 21380 000010FB 46                      	inc	si
 21381 000010FC 46                      	inc	si
 21382 000010FD E2FA                    	loop	sum1
 21383                                  ;now,sum up sysinit module.
 21384                                  sum_sys_code:
 21385                                  	; 24/10/2022
 21386 000010FF BEFE10                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 21387                                  				        ; starting after the stack.  M069
 21388                                  					;  this does not cover the possible stack code!!!
 21389                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 21390                                  	; 02/11/2022
 21391                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 21392                                  	; 30/12/2022 (BugFix)
 21393                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 21394 00001102 B9[F037]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 21395 00001105 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 21396 00001107 D1E9                    	shr	cx,1
 21397                                  sum2:
 21398 00001109 260304                  	add	ax,[es:si]
 21399 0000110C 46                      	inc	si
 21400 0000110D 46                      	inc	si
 21401 0000110E E2F9                    	loop	sum2
 21402 00001110 1F                      	pop	ds
 21403 00001111 C3                      	retn
 21404                                  
 21405                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21406                                  
 21407                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 21408                                  ;SYSINIT:11BDh:
 21409 00001112 0000                    	dw	0
 21410                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 21411                                  ;SYSINIT:11BFh:
 21412 00001114 0000                    	dw	0
 21413                                  
 21414                                  mem_alloc_err_msgx:
 21415                                  
 21416                                         ;include msbio.cl4		; memory allocation error message
 21417                                  
 21418                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 21419 00001116 0D0A                    	db	0Dh,0Ah
 21420 00001118 4D656D6F727920616C-     	db 	'Memory allocation error $'
 21420 00001121 6C6F636174696F6E20-
 21420 0000112A 6572726F722024     
 21421                                  
 21422                                  end_sysinit_base: ; label byte
 21423                                  	; 24/10/2022
 21424                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 21425                                  
 21426                                  ; ----------------------------------------------------------------------
 21427                                  ; Set_Buffer
 21428                                  ;
 21429                                  ;function: set buffers in the real memory.				  
 21430                                  ;	   lastly set the memhi,memlo for the next available free address.
 21431                                  ;
 21432                                  ;input:    ds:bx -> buffinfo.
 21433                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 21434                                  ;	   singlebuffersize = buffer header size + sector size		  
 21435                                  ;
 21436                                  ;output:   buffers Queue established.	       				   
 21437                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 21438                                  ; ----------------------------------------------------------------------
 21439                                  
 21440                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21441                                  	; (SYSINIT:11DCh)
 21442                                  
 21443                                  set_buffer:
 21444 00001131 30D2                    	xor	dl,dl				; assume buffers not in HMA
 21445 00001133 E85500                  	call	GetBufferAddr
 21446 00001136 7402                    	jz	short set_buff_1
 21447                                  	;mov	dl,1				; buffers in HMA
 21448                                  	; 17/09/2023
 21449 00001138 FEC2                    	inc	dl ; mov dl,1
 21450                                  set_buff_1:
 21451                                  	; 25/10/2022
 21452                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 21453 0000113A 893F                    	mov	[bx],di
 21454                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 21455 0000113C 8C4702                  	mov	[bx+2],es
 21456                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 21457 0000113F C747040000              	mov	word [bx+4],0
 21458                                  
 21459 00001144 89F8                    	mov	ax,di
 21460 00001146 2E8B0E[9702]            	mov	cx,[cs:buffers]
 21461 0000114B 57                      	push	di				; remember first buffer
 21462                                  
 21463                                  ;	for each buffer
 21464                                  
 21465                                  nxt_buff:
 21466 0000114C E86100                  	call	set_buffer_info 		; set buf_link,buf_id...
 21467 0000114F 89C7                    	mov	di,ax
 21468 00001151 E2F9                    	loop	nxt_buff
 21469                                  
 21470 00001153 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 21471                                  
 21472 00001158 59                      	pop	cx				; get first buffer
 21473                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 21474 00001159 26890D                  	mov	[es:di],cx
 21475 0000115C 87CF                    	xchg	cx,di
 21476                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 21477                                  	; 25/10/2022
 21478 0000115E 26894D02                	mov	[es:di+2],cx
 21479                                  
 21480 00001162 08D2                    	or	dl,dl				; In HMA ?
 21481 00001164 7417                    	jz	short set_buff_2		; no
 21482                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 21483 00001166 C6470C01                	mov	byte [bx+12],1
 21484 0000116A 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 21485                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 21486 0000116E C7470D0000              	mov	word [bx+13],0
 21487                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 21488 00001173 89470F                  	mov	word [bx+15],ax
 21489 00001176 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 21490                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 21491 0000117A 83E814                  	sub	ax,20
 21492                                  set_buff_2:
 21493 0000117D 2E0106[DE03]            	add	[cs:memlo],ax
 21494                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21495 00001182 2E800E[1014]02          	or	byte [cs:setdevmarkflag],2
 21496                                  	;call	round
 21497                                  	;retn
 21498                                  	; 12/12/2022
 21499 00001188 E98C1E                  	jmp	round
 21500                                  
 21501                                  ; ----------------------------------------------------------------------
 21502                                  ; procedure : GetBufferAddr
 21503                                  ;
 21504                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21505                                  ;
 21506                                  ; returns in es:di the buffer adress
 21507                                  ; returns NZ if allocated in HMA
 21508                                  ; ----------------------------------------------------------------------
 21509                                  
 21510                                  	; 25/10/2022 
 21511                                  GetBufferAddr:
 21512 0000118B 53                      	push	bx
 21513 0000118C 52                      	push	dx
 21514 0000118D 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21515 00001191 2EF726[9702]            	mul	word [cs:buffers]
 21516                                  	;add	ax,0Fh
 21517 00001196 83C00F                  	add	ax,15 
 21518                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21519                                  	;and	ax,~15	; 0FFF0h	; para round
 21520                                  	; 12/12/2022
 21521 00001199 24F0                    	and	al,~15	; 0F0h
 21522 0000119B 89C3                    	mov	bx,ax
 21523 0000119D B8024A                  	mov	ax,4A02h
 21524                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21525 000011A0 CD2F                    	int	2Fh
 21526 000011A2 83FFFF                  	cmp	di,0FFFFh
 21527 000011A5 7506                    	jne	short got_hma
 21528                                  
 21529                                  	;mov	di,0			; dont xor di,di Z flag needed
 21530                                  	; 05/09/2023
 21531                                  	; zf=1
 21532 000011A7 47                      	inc	di ; 0FFFFh -> 0
 21533                                  	; zf=1
 21534                                  
 21535                                  	;zf=1
 21536                                  	;xor	di,di	; 25/10/2022
 21537                                  	;zf=1
 21538 000011A8 2E8E06[E003]            	mov	es,[cs:memhi]
 21539                                  got_hma:
 21540 000011AD 5A                      	pop	dx
 21541 000011AE 5B                      	pop	bx
 21542 000011AF C3                      	retn
 21543                                  
 21544                                  ; ----------------------------------------------------------------------
 21545                                  
 21546                                  set_buffer_info:
 21547                                  
 21548                                  ;function: set buf_link,buf_id,buf_sector
 21549                                  ;
 21550                                  ;in: es:di -> buffer header to be set.
 21551                                  ;    ax = di
 21552                                  ;
 21553                                  ;out:
 21554                                  ;    above entries set.
 21555                                  
 21556                                  	; 25/10/2022 
 21557 000011B0 2EFF36[3903]            	push	word [cs:buf_prev_off]
 21558                                  	;pop	word [es:di+buffinfo.buf_prev]
 21559 000011B5 268F4502                	pop	word [es:di+2]
 21560 000011B9 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 21561 000011BD 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 21562                                  	;mov	[es:di+buffinfo.buf_next],ax
 21563 000011C2 268905                  	mov	[es:di],ax
 21564                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21565 000011C5 26C74504FF00            	mov	word [es:di+4],00FFh
 21566                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21567 000011CB 26C745060000            	mov	word [es:di+6],0
 21568                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21569 000011D1 26C745080000            	mov	word [es:di+8],0
 21570 000011D7 C3                      	retn
 21571                                  
 21572                                  ; ======================================================================
 21573                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21574                                  ; ----------------------------------------------------------------------
 21575                                  ; 27/03/2019 - Retro DOS v4.0
 21576                                  
 21577                                  ; ----------------------------------------------------------------------
 21578                                  ; ibmstack initialization routine.
 21579                                  ;
 21580                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21581                                  ;	has been modified. this initialization routine also has to
 21582                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21583                                  ;	should be set to signal that this interrupt handler is the
 21584                                  ;	first handler hooked to this interrupt vector.
 21585                                  ;	we determine this by looking at the instruction pointed by
 21586                                  ;	this vector. if it is iret, then this handler should be the
 21587                                  ;	first one. in our case, only the interrupt vector 77h is the
 21588                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21589                                  ;
 21590                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21591                                  ;	some design changes are needed to the above interrupt sharing
 21592                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21593                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21594                                  ;	interrupts would only be generated on levels 7 and 15.
 21595                                  ;	these assumptions are not true any more. we have to use the firstflag
 21596                                  ;	for every level of interrupt. we will set the firstflag on the following
 21597                                  ;	conditions:
 21598                                  ;
 21599                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21600                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21601                                  ;	 c. else if cs:ip points to an iret, then "first"
 21602                                  ;	 d. else if cs:ip points to dummy, then "first"
 21603                                  ;
 21604                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21605                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21606                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21607                                  ;	the bioses for all of the machines.
 21608                                  ;
 21609                                  ;	system design group requests bios to handle the phantom interrupts.
 21610                                  ;
 21611                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21612                                  ;	produced by the bogus adapter card even without interrupt request is
 21613                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21614                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21615                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21616                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21617                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21618                                  ;	interrupt line.
 21619                                  ;
 21620                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21621                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21622                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21623                                  ;	control. if it is the first, then the following action should be
 21624                                  ;	taken. we don't have to implement skack logic in this case.
 21625                                  ;
 21626                                  ;	to implement this logic, we rather choose a simple method.
 21627                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21628                                  ;	going to hook this interrupt vector. the reason is if the original
 21629                                  ;	vector points to "iret" and do nothing, we don't need
 21630                                  ;	to implement the stack logic for it. this will simplify implementation
 21631                                  ;	while maintaining compatibility with the old version of dos.
 21632                                  ;	this implies that in the main stack code, there might be a stack code
 21633                                  ;	that will never be used, a dead code.
 21634                                  ;
 21635                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21636                                  
 21637                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21638                                  	; (SYSINIT:1287h)
 21639                                  
 21640                                  	; 14/12/2022
 21641                                  stackinit:
 21642 000011D8 50                      	push	ax
 21643 000011D9 1E                      	push	ds
 21644 000011DA 06                      	push	es
 21645 000011DB 53                      	push	bx
 21646 000011DC 51                      	push	cx
 21647 000011DD 52                      	push	dx
 21648 000011DE 57                      	push	di
 21649 000011DF 56                      	push	si
 21650 000011E0 55                      	push	bp
 21651                                  
 21652                                  ;currently es -> stack code area
 21653                                  
 21654                                  	; 12/12/2022
 21655                                  	; ds = cs
 21656 000011E1 A1[8A02]                	mov	ax,[stack_count]
 21657 000011E4 89C1                    	mov	cx,ax  ; *!*!*  
 21658                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21659                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21660                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21661 000011E6 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21662                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21663 000011EA A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21664 000011ED 26A3[0600]              	mov	[es:stacksize],ax
 21665                                  	; 12/12/2022
 21666 000011F1 A1[8E02]                	mov	ax,[stack_addr]			; offset
 21667                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21668                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21669                                  	;mov	ax,[cs:stack_addr]  ; !!
 21670 000011F4 26A3[0800]              	mov	[es:stacks],ax
 21671                                  	; 12/12/2022
 21672 000011F8 89C5                    	mov	bp,ax ; *!*
 21673 000011FA A1[9002]                	mov	ax,[stack_addr+2]
 21674                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21675                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21676                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21677 000011FD 26A3[0A00]              	mov	[es:stacks+2],ax
 21678                                  
 21679                                  ; initialize the data fields with the parameters
 21680                                  
 21681                                  ; "firstentry" will always be at stacks
 21682                                  
 21683                                  	;mov	bp,[es:stacks]			; get offset of stack
 21684                                  	; 12/12/2022
 21685                                  	; bp = [es:stacks] ; *!*
 21686 00001201 26892E[0C00]            	mov	[es:firstentry],bp
 21687                                  
 21688                                  ; the stacks will always immediately follow the table entries
 21689                                  
 21690 00001206 B80800                  	mov	ax,entrysize ; 8
 21691                                  	;mov	cx,[es:stackcount]
 21692                                  	; 12/12/2022
 21693                                  	; cx = [es:stackcount] ; *!*!*
 21694 00001209 F7E1                    	mul	cx
 21695 0000120B 01E8                    	add	ax,bp
 21696 0000120D 26A3[0400]              	mov	[es:stackat],ax
 21697 00001211 89C3                    	mov	bx,ax
 21698 00001213 83EB02                  	sub	bx,2
 21699                                  
 21700                                  ; zero the entire stack area to start with
 21701                                  
 21702 00001216 268B3E[0400]            	mov	di,[es:stackat]
 21703 0000121B 26A1[0600]              	mov	ax,[es:stacksize]
 21704 0000121F F7E1                    	mul	cx
 21705 00001221 89C1                    	mov	cx,ax
 21706 00001223 31C0                    	xor	ax,ax
 21707 00001225 06                      	push	es
 21708 00001226 1F                      	pop	ds				;ds = relocated stack code seg.
 21709                                  
 21710                                  ;now, ds -> stack code area
 21711                                  
 21712 00001227 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21713 0000122B FC                      	cld
 21714 0000122C F3AA                    	rep	stosb
 21715                                  
 21716 0000122E 8B0E[0200]              	mov	cx,[stackcount]
 21717                                  
 21718                                  ; loop for "count" times, building a table entry
 21719                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21720                                  ;  cx = number of entries
 21721                                  ;  es:bp => base of stacks - 2
 21722                                  ;  es:bx => first table entry
 21723                                  
 21724                                  buildloop:
 21725                                  	; 11/12/2022
 21726                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21727                                  	; 25/10/2022
 21728                                  	;mov	byte [es:bp],free
 21729                                  	; 14/08/2023
 21730 00001232 26884600                	mov	[es:bp],al ; 0 ; free
 21731 00001236 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21732                                  	;mov	[es:bp+1],al
 21733 0000123A 26894602                	mov	[es:bp+savedsp],ax
 21734                                  	;mov	[es:bp2],ax
 21735 0000123E 26894604                	mov	[es:bp+savedss],ax
 21736                                  	;mov	[es:bp+4],ax
 21737 00001242 031E[0600]              	add	bx,[stacksize]
 21738 00001246 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21739                                  	;mov	[es:bp+6],bx
 21740 0000124A 26892F                  	mov	[es:bx],bp
 21741 0000124D 83C508                  	add	bp,entrysize ; 8
 21742                                  
 21743 00001250 E2E0                    	loop	buildloop
 21744                                  
 21745 00001252 83ED08                  	sub	bp,entrysize ; 8
 21746 00001255 892E[0E00]              	mov	[lastentry],bp
 21747 00001259 892E[1000]              	mov	[nextentry],bp
 21748                                  
 21749 0000125D 1E                      	push	ds
 21750                                  	;mov	ax,0F000h		;look at the model byte
 21751                                  	; 05/09/2023
 21752 0000125E B4F0                    	mov	ah,0F0h ; ax = 0F000h
 21753 00001260 8ED8                    	mov	ds,ax	
 21754 00001262 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 21755 00001267 1F                      	pop	ds
 21756 00001268 7504                    	jne	short skip_disablenmis
 21757                                  
 21758 0000126A B007                    	mov	al,07h			; disable convertible nmis
 21759 0000126C E672                    	out	72h,al
 21760                                  
 21761                                  skip_disablenmis:
 21762 0000126E 31C0                    	xor	ax,ax
 21763 00001270 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21764                                  					;ds - relocated stack code segment
 21765 00001272 FA                      	cli
 21766                                  
 21767                                  	;irp	aa,<02,08,09,70>
 21768                                  	;
 21769                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21770                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21771                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21772                                  	;mov	dx,offset int&aa	;pass where new handler is
 21773                                  	;call	new_init_loop		;adjust the vector to new handler,
 21774                                  	;				;saving pointer to original owner
 21775                                  	;endm
 21776                                  
 21777                                  stkinit_02:
 21778 00001273 BE0800                  	mov	si,02h*4 ; 8
 21779 00001276 BF[4206]                	mov	di,INT19OLD02
 21780 00001279 BB[1200]                	mov	bx,old02
 21781 0000127C BA[1600]                	mov	dx,int02
 21782 0000127F E84801                  	call	new_init_loop
 21783                                  stkinit_08:
 21784 00001282 BE2000                  	mov	si,08h*4 ; 32
 21785 00001285 BF[4706]                	mov	di,INT19OLD08
 21786 00001288 BB[3800]                	mov	bx,old08
 21787 0000128B BA[3C00]                	mov	dx,int08
 21788 0000128E E83901                  	call	new_init_loop
 21789                                  stkinit_09:
 21790 00001291 BE2400                  	mov	si,09h*4 ; 36
 21791 00001294 BF[4C06]                	mov	di,INT19OLD09
 21792 00001297 BB[4100]                	mov	bx,old09
 21793 0000129A BA[4500]                	mov	dx,int09
 21794 0000129D E82A01                  	call	new_init_loop
 21795                                  stkinit_70:
 21796 000012A0 BEC001                  	mov	si,70h*4 ; 448
 21797 000012A3 BF[6A06]                	mov	di,INT19OLD70
 21798 000012A6 BB[4E00]                	mov	bx,old70
 21799 000012A9 BA[5200]                	mov	dx,int70
 21800 000012AC E81B01                  	call	new_init_loop
 21801                                  
 21802                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21803                                  	;
 21804                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21805                                  	;push	ds			;save relocated stack code segment
 21806                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21807                                  	;push	ds
 21808                                  	;pop	dx			;dx = segment value
 21809                                  	;	
 21810                                  	;cmp	dx,0
 21811                                  	;jz	int&aa&_first
 21812                                  	;
 21813                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21814                                  	;jz	int&aa&_first
 21815                                  	;
 21816                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21817                                  	;jz	int&aa&_not_first
 21818                                  	;
 21819                                  	;cmp	dx,0f000h		;rom bios segment
 21820                                  	;jnz	int&aa&_not_first
 21821                                  	;
 21822                                  	;push	es
 21823                                  	;push	dx
 21824                                  	;mov	dx,0f000h
 21825                                  	;mov	es,dx
 21826                                  	;cmp	bx,word ptr es:0ff01h
 21827                                         	;pop	dx
 21828                                  	;pop	es
 21829                                  	;jz	int&aa&_first
 21830                                  	;
 21831                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21832                                  	;pop	ds
 21833                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21834                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21835                                  	;mov	dx, offset int&aa	;pass where new handler is
 21836                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21837                                  	;				;pointer to original owner.
 21838                                  	;jmp	short int&aa&_end
 21839                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21840                                  	;pop	ds
 21841                                  ;int&aa&_end:
 21842                                  	;
 21843                                  	;endm
 21844                                  
 21845                                  stkinit_0A:
 21846 000012AF BE2800                  	mov	si,0Ah*4 ; 40
 21847                                  	
 21848                                  ; 14/12/2022
 21849                                  %if 0	
 21850                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21851                                  	push	ds
 21852                                  	
 21853                                  	lds	bx,[es:si]
 21854                                  	push	ds
 21855                                  	pop	dx
 21856                                  		
 21857                                  	cmp	dx,0
 21858                                  	je	short int_0A_first
 21859                                  	
 21860                                  	cmp	byte [bx],0CFh
 21861                                  	je	short int_0A_first
 21862                                  	
 21863                                  	cmp	word [bx+6],424Bh
 21864                                  	je	short int_0A_not_first
 21865                                  	
 21866                                  	cmp	dx,0F000h
 21867                                  	jne	short int_0A_not_first
 21868                                  	
 21869                                  	push	es
 21870                                  	push	dx
 21871                                  	mov	dx,0F000h
 21872                                  	mov	es,dx
 21873                                  	cmp	bx,[es:0FF01h]
 21874                                         	pop	dx
 21875                                  	pop	es
 21876                                  	je	short int_0A_first
 21877                                  %Endif
 21878                                  
 21879                                  	; 14/12/2022
 21880                                  	; 25/10/2022
 21881 000012B2 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21882 000012B5 730C                    	jnc	short int_0A_first
 21883                                  	
 21884                                  int_0A_not_first:
 21885                                  	; 14/12/2022
 21886                                  	; 25/10/2022
 21887                                  	;pop	ds
 21888 000012B7 BF[5106]                	mov	di,INT19OLD0A
 21889 000012BA BB[5900]                	mov	bx,old0A
 21890 000012BD BA[5700]                	mov	dx,int0A
 21891 000012C0 E80701                  	call	new_init_loop
 21892                                  	
 21893                                  	; 14/12/2022	
 21894                                  	;jmp	short int_0A_end
 21895                                  ;int_0A_first:
 21896                                  	; 25/10/2022
 21897                                  	;pop	ds
 21898                                  
 21899                                  	; 14/12/2022
 21900                                  int_0A_first:
 21901                                  int_0A_end:
 21902                                  
 21903                                  stkinit_0B:
 21904 000012C3 BE2C00                  	mov	si,0Bh*4 ; 44
 21905                                  	
 21906                                  	; 14/12/2022
 21907                                  	; 25/10/2022
 21908 000012C6 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21909 000012C9 730C                    	jnc	short int_0B_end ; int_0B_first
 21910                                  
 21911                                  ; 14/12/2022
 21912                                  %if 0	
 21913                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21914                                  	push	ds
 21915                                  	lds	bx,[es:si]
 21916                                  	push	ds
 21917                                  	pop	dx
 21918                                  		
 21919                                  	cmp	dx,0
 21920                                  	je	short int_0B_first
 21921                                  
 21922                                  	cmp	byte [bx],0CFh
 21923                                  	je	short int_0B_first
 21924                                  	
 21925                                  	cmp	word [bx+6],424Bh
 21926                                  	je	short int_0B_not_first
 21927                                  	
 21928                                  	cmp	dx,0F000h
 21929                                  	jne	short int_0B_not_first
 21930                                  
 21931                                  	push	es
 21932                                  	push	dx
 21933                                  	mov	dx,0F000h
 21934                                  	mov	es,dx
 21935                                  	cmp	bx,[es:0FF01h]
 21936                                  	pop	dx
 21937                                  	pop	es
 21938                                  	je	short int_0B_first
 21939                                  %endif
 21940                                  
 21941                                  int_0B_not_first:
 21942                                  	; 14/12/2022
 21943                                  	; 25/10/2022
 21944                                  	;pop	ds
 21945 000012CB BF[5606]                	mov	di,INT19OLD0B
 21946 000012CE BB[7100]                	mov	bx,old0B
 21947 000012D1 BA[6F00]                	mov	dx,int0B
 21948 000012D4 E8F300                  	call	new_init_loop
 21949                                  
 21950                                  	; 14/12/2022
 21951                                  	;jmp	short int_0B_end
 21952                                  ;int_0B_first:
 21953                                  	; 25/10/2022
 21954                                  	;pop	ds
 21955                                  
 21956                                  int_0B_end:
 21957                                  	
 21958                                  stkinit_0C:
 21959 000012D7 BE3000                  	mov	si,0Ch*4 ; 48
 21960                                  	
 21961                                  	; 14/12/2022
 21962                                  	; 25/10/2022
 21963 000012DA E8C300                  	call	int_xx_first_check
 21964 000012DD 730C                    	jnc	short int_0C_end ; int_0C_first
 21965                                  
 21966                                  ; 14/12/2022
 21967                                  %if 0	
 21968                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21969                                  	push	ds
 21970                                  	lds	bx,[es:si]
 21971                                  	push	ds
 21972                                  	pop	dx
 21973                                  		
 21974                                  	cmp	dx,0
 21975                                  	je	short int_0C_first
 21976                                  
 21977                                  	cmp	byte [bx],0CFh
 21978                                  	je	short int_0C_first
 21979                                  	
 21980                                  	cmp	word [bx+6],424Bh
 21981                                  	je	short int_0C_not_first
 21982                                  	
 21983                                  	cmp	dx,0F000h
 21984                                  	jne	short int_0C_not_first
 21985                                  
 21986                                  	push	es
 21987                                  	push	dx
 21988                                  	mov	dx,0F000h
 21989                                  	mov	es,dx
 21990                                  	cmp	bx,[es:0FF01h]
 21991                                  	pop	dx
 21992                                  	pop	es
 21993                                  	je	short int_0C_first
 21994                                  %endif
 21995                                  	
 21996                                  int_0C_not_first:
 21997                                  	; 14/12/2022
 21998                                  	; 25/10/2022
 21999                                  	;pop	ds
 22000 000012DF BF[5B06]                	mov	di,INT19OLD0C
 22001 000012E2 BB[8900]                	mov	bx,old0C
 22002 000012E5 BA[8700]                	mov	dx,int0C
 22003 000012E8 E8DF00                  	call	new_init_loop
 22004                                  
 22005                                  	; 14/12/2022
 22006                                  	;jmp	short int_0C_end
 22007                                  ;int_0C_first:
 22008                                  	; 25/10/2022
 22009                                  	;pop	ds
 22010                                  
 22011                                  int_0C_end:
 22012                                  
 22013                                  stkinit_0D:
 22014 000012EB BE3400                  	mov	si,0Dh*4 ; 52
 22015                                  
 22016                                  	; 14/12/2022	
 22017                                  	; 25/10/2022
 22018 000012EE E8AF00                  	call	int_xx_first_check
 22019 000012F1 730C                    	jnc	short int_0D_end ; int_0D_first
 22020                                  
 22021                                  ; 14/12/2022
 22022                                  %if 0	
 22023                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22024                                  	push	ds
 22025                                  	lds	bx,[es:si]
 22026                                  	push	ds
 22027                                  	pop	dx
 22028                                  		
 22029                                  	cmp	dx,0
 22030                                  	je	short int_0D_first
 22031                                  
 22032                                  	cmp	byte [bx],0CFh
 22033                                  	je	short int_0D_first
 22034                                  	
 22035                                  	cmp	word [bx+6],424Bh
 22036                                  	je	short int_0D_not_first
 22037                                  	
 22038                                  	cmp	dx,0F000h
 22039                                  	jne	short int_0D_not_first
 22040                                  
 22041                                  	push	es
 22042                                  	push	dx
 22043                                  	mov	dx,0F000h
 22044                                  	mov	es,dx
 22045                                  	cmp	bx,[es:0FF01h]
 22046                                  	pop	dx
 22047                                  	pop	es
 22048                                  	je	short int_0D_first
 22049                                  %endif
 22050                                  	
 22051                                  int_0D_not_first:
 22052                                  	; 14/12/2022
 22053                                  	; 25/10/2022
 22054                                  	;pop	ds
 22055 000012F3 BF[6006]                	mov	di,INT19OLD0D
 22056 000012F6 BB[A100]                	mov	bx,old0D
 22057 000012F9 BA[9F00]                	mov	dx,int0D
 22058 000012FC E8CB00                  	call	new_init_loop
 22059                                  
 22060                                  	; 14/12/2022
 22061                                  	;jmp	short int_0D_end
 22062                                  	; 02/11/2022
 22063                                  ;int_0D_first:
 22064                                  	;pop	ds
 22065                                  
 22066                                  int_0D_end:
 22067                                  
 22068                                  stkinit_0E:
 22069 000012FF BE3800                  	mov	si,0Eh*4 ; 56
 22070                                  
 22071                                  	; 14/12/2022	
 22072                                  	; 25/10/2022
 22073 00001302 E89B00                  	call	int_xx_first_check
 22074 00001305 730C                    	jnc	short int_0E_end ; int_0E_first
 22075                                  
 22076                                  ; 14/12/2022
 22077                                  %if 0	
 22078                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22079                                  	push	ds
 22080                                  	lds	bx,[es:si]
 22081                                  	push	ds
 22082                                  	pop	dx
 22083                                  		
 22084                                  	cmp	dx,0
 22085                                  	je	short int_0E_first
 22086                                  
 22087                                  	cmp	byte [bx],0CFh
 22088                                  	je	short int_0E_first
 22089                                  	
 22090                                  	cmp	word [bx+6],424Bh
 22091                                  	je	short int_0E_not_first
 22092                                  	
 22093                                  	cmp	dx,0F000h
 22094                                  	jne	short int_0E_not_first
 22095                                  
 22096                                  	push	es
 22097                                  	push	dx
 22098                                  	mov	dx,0F000h
 22099                                  	mov	es,dx
 22100                                  	cmp	bx,[es:0FF01h]
 22101                                  	pop	dx
 22102                                  	pop	es
 22103                                  	je	short int_0E_first
 22104                                  %endif
 22105                                  	
 22106                                  int_0E_not_first:
 22107                                  	; 14/12/2022
 22108                                  	; 25/10/2022
 22109                                  	;pop	ds
 22110 00001307 BF[6506]                	mov	di,INT19OLD0E
 22111 0000130A BB[B900]                	mov	bx,old0E
 22112 0000130D BA[B700]                	mov	dx,int0E
 22113 00001310 E8B700                  	call	new_init_loop
 22114                                  
 22115                                  	; 14/12/2022
 22116                                  	;jmp	short int_0E_end
 22117                                  ;int_0E_first:
 22118                                  	; 25/10/2022
 22119                                  	;pop	ds	
 22120                                  
 22121                                  int_0E_end:
 22122                                  
 22123                                  stkinit_72:
 22124 00001313 BEC801                  	mov	si,72h*4 ; 456
 22125                                  	
 22126                                  	; 14/12/2022
 22127                                  	; 25/10/2022
 22128 00001316 E88700                  	call	int_xx_first_check
 22129 00001319 730C                    	jnc	short int_72_end ; int_72_first
 22130                                  
 22131                                  ; 14/12/2022
 22132                                  %if 0	
 22133                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22134                                  	push	ds
 22135                                  	lds	bx,[es:si]
 22136                                  	push	ds
 22137                                  	pop	dx
 22138                                  		
 22139                                  	cmp	dx,0
 22140                                  	je	short int_72_first
 22141                                  
 22142                                  	cmp	byte [bx],0CFh
 22143                                  	je	short int_72_first
 22144                                  	
 22145                                  	cmp	word [bx+6],424Bh
 22146                                  	je	short int_72_not_first
 22147                                  	
 22148                                  	cmp	dx,0F000h
 22149                                  	jne	short int_72_not_first
 22150                                  
 22151                                  	push	es
 22152                                  	push	dx
 22153                                  	mov	dx,0F000h
 22154                                  	mov	es,dx
 22155                                  	cmp	bx,[es:0FF01h]
 22156                                  	pop	dx
 22157                                  	pop	es
 22158                                  	je	short int_72_first
 22159                                  %endif
 22160                                  	
 22161                                  int_72_not_first:
 22162                                  	; 14/12/2022
 22163                                  	; 25/10/2022
 22164                                  	;pop	ds
 22165 0000131B BF[6F06]                	mov	di,INT19OLD72
 22166 0000131E BB[D100]                	mov	bx,old72
 22167 00001321 BA[CF00]                	mov	dx,int72
 22168 00001324 E8A300                  	call	new_init_loop
 22169                                  
 22170                                  	; 14/12/2022
 22171                                  	;jmp	short int_72_end
 22172                                  ;int_72_first:
 22173                                  	; 25/10/2022
 22174                                  	;pop	ds
 22175                                  
 22176                                  int_72_end:
 22177                                  
 22178                                  stkinit_73:
 22179 00001327 BECC01                  	mov	si,73h*4 ; 460
 22180                                  	
 22181                                  	; 14/12/2022
 22182                                  	; 25/10/2022
 22183 0000132A E87300                  	call	int_xx_first_check
 22184 0000132D 730C                    	jnc	short int_73_end ; int_73_first
 22185                                  
 22186                                  ; 14/12/2022
 22187                                  %if 0	
 22188                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22189                                  	push	ds
 22190                                  	lds	bx,[es:si]
 22191                                  	push	ds
 22192                                  	pop	dx
 22193                                  		
 22194                                  	cmp	dx,0
 22195                                  	je	short int_73_first
 22196                                  
 22197                                  	cmp	byte [bx],0CFh
 22198                                  	je	short int_73_first
 22199                                  	
 22200                                  	cmp	word [bx+6],424Bh
 22201                                  	je	short int_73_not_first
 22202                                  	
 22203                                  	cmp	dx,0F000h
 22204                                  	jne	short int_73_not_first
 22205                                  
 22206                                  	push	es
 22207                                  	push	dx
 22208                                  	mov	dx,0F000h
 22209                                  	mov	es,dx
 22210                                  	cmp	bx,[es:0FF01h]
 22211                                  	pop	dx
 22212                                  	pop	es
 22213                                  	je	short int_73_first
 22214                                  %endif	
 22215                                  	
 22216                                  int_73_not_first:
 22217                                  	; 14/12/2022
 22218                                  	; 25/10/2022
 22219                                  	;pop	ds
 22220 0000132F BF[7406]                	mov	di,INT19OLD73
 22221 00001332 BB[E900]                	mov	bx,old73
 22222 00001335 BA[E700]                	mov	dx,int73
 22223 00001338 E88F00                  	call	new_init_loop
 22224                                  
 22225                                  	; 14/12/2022
 22226                                  	;jmp	short int_73_end
 22227                                  ;int_73_first:
 22228                                  	; 25/10/2022
 22229                                  	;pop	ds
 22230                                  
 22231                                  int_73_end:
 22232                                  
 22233                                  stkinit_74:
 22234 0000133B BED001                  	mov	si,74h*4 ; 464
 22235                                  	
 22236                                  	; 14/12/2022
 22237                                  	; 25/10/2022
 22238 0000133E E85F00                  	call	int_xx_first_check
 22239 00001341 730C                    	jnc	short int_74_end ; int_74_first
 22240                                  
 22241                                  ; 14/12/2022
 22242                                  %if 0		
 22243                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22244                                  	push	ds
 22245                                  	lds	bx,[es:si]
 22246                                  	push	ds
 22247                                  	pop	dx
 22248                                  		
 22249                                  	cmp	dx,0
 22250                                  	je	short int_74_first
 22251                                  
 22252                                  	cmp	byte [bx],0CFh
 22253                                  	je	short int_74_first
 22254                                  	
 22255                                  	cmp	word [bx+6],424Bh
 22256                                  	je	short int_74_not_first
 22257                                  	
 22258                                  	cmp	dx,0F000h
 22259                                  	jne	short int_74_not_first
 22260                                  
 22261                                  	push	es
 22262                                  	push	dx
 22263                                  	mov	dx,0F000h
 22264                                  	mov	es,dx
 22265                                  	cmp	bx,[es:0FF01h]
 22266                                  	pop	dx
 22267                                  	pop	es
 22268                                  	je	short int_74_first
 22269                                  %endif
 22270                                  
 22271                                  int_74_not_first:
 22272                                  	; 14/12/2022
 22273                                  	; 25/10/2022
 22274                                  	;pop	ds
 22275 00001343 BF[7906]                	mov	di,INT19OLD74
 22276 00001346 BB[0101]                	mov	bx,old74
 22277 00001349 BA[FF00]                	mov	dx,int74
 22278 0000134C E87B00                  	call	new_init_loop
 22279                                  	
 22280                                  	; 14/12/2022
 22281                                  	;jmp	short int_74_end
 22282                                  ;int_74_first:
 22283                                  	; 25/10/2022
 22284                                  	;pop	ds
 22285                                  
 22286                                  int_74_end:
 22287                                  
 22288                                  stkinit_76:
 22289 0000134F BED801                  	mov	si,76h*4 ; 472
 22290                                  	
 22291                                  	; 14/12/2022
 22292                                  	; 25/10/2022
 22293 00001352 E84B00                  	call	int_xx_first_check
 22294 00001355 730E                    	jnc	short int_76_end ; int_76_first
 22295                                  
 22296                                  ; 14/12/2022
 22297                                  %if 0	
 22298                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22299                                  	push	ds
 22300                                  	lds	bx,[es:si]
 22301                                  	push	ds
 22302                                  	pop	dx
 22303                                  		
 22304                                  	cmp	dx,0
 22305                                  	je	short int_76_first
 22306                                  
 22307                                  	cmp	byte [bx],0CFh
 22308                                  	je	short int_76_first
 22309                                  	
 22310                                  	cmp	word [bx+6],424Bh
 22311                                  	je	short int_76_not_first
 22312                                  	
 22313                                  	cmp	dx,0F000h
 22314                                  	jne	short int_76_not_first
 22315                                  
 22316                                  	push	es
 22317                                  	push	dx
 22318                                  	mov	dx,0F000h
 22319                                  	mov	es,dx
 22320                                  	cmp	bx,[es:0FF01h]
 22321                                  	pop	dx
 22322                                  	pop	es
 22323                                  	je	short int_76_first
 22324                                  %endif
 22325                                  	
 22326                                  int_76_not_first:
 22327                                  	; 14/12/2022
 22328                                  	; 25/10/2022
 22329                                  	;pop	ds
 22330 00001357 BF[7E06]                	mov	di,INT19OLD76
 22331 0000135A BB[1901]                	mov	bx,old76
 22332 0000135D BA[1701]                	mov	dx,int76
 22333 00001360 E86700                  	call	new_init_loop
 22334                                  
 22335                                  	; 14/12/2022
 22336 00001363 EB00                    	jmp	short int_76_end
 22337                                  ;int_76_first:
 22338                                  	; 25/10/2022
 22339                                  	;pop	ds
 22340                                  
 22341                                  int_76_end:
 22342                                  
 22343                                  stkinit_77:
 22344 00001365 BEDC01                  	mov	si,77h*4 ; 476
 22345                                  	
 22346                                  	; 14/12/2022
 22347                                  	; 25/10/2022
 22348 00001368 E83500                  	call	int_xx_first_check
 22349 0000136B 730C                    	jnc	short int_77_end ; int_77_first
 22350                                  
 22351                                  ; 14/12/2022
 22352                                  %if 0	
 22353                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22354                                  	push	ds
 22355                                  	lds	bx,[es:si]
 22356                                  	push	ds
 22357                                  	pop	dx
 22358                                  		
 22359                                  	cmp	dx,0
 22360                                  	je	short int_77_first
 22361                                  
 22362                                  	cmp	byte [bx],0CFh
 22363                                  	je	short int_77_first
 22364                                  	
 22365                                  	cmp	word [bx+6],424Bh
 22366                                  	je	short int_77_not_first
 22367                                  	
 22368                                  	cmp	dx,0F000h
 22369                                  	jne	short int_77_not_first
 22370                                  
 22371                                  	push	es
 22372                                  	push	dx
 22373                                  	mov	dx,0F000h
 22374                                  	mov	es,dx
 22375                                  	cmp	bx,[es:0FF01h]
 22376                                  	pop	dx
 22377                                  	pop	es
 22378                                  	je	short int_77_first
 22379                                  %endif
 22380                                  	
 22381                                  int_77_not_first:
 22382                                  	; 14/12/2022
 22383                                  	; 25/10/2022
 22384                                  	;pop	ds
 22385 0000136D BF[8306]                	mov	di,INT19OLD77
 22386 00001370 BB[3101]                	mov	bx,old77
 22387 00001373 BA[2F01]                	mov	dx,int77
 22388 00001376 E85100                  	call	new_init_loop
 22389                                  
 22390                                  	; 14/12/2022
 22391                                  	;jmp	short int_77_end
 22392                                  ;int_77_first:
 22393                                  	; 25/10/2022
 22394                                  	;pop	ds
 22395                                  
 22396                                  int_77_end:
 22397 00001379 1E                      	push	ds
 22398 0000137A B800F0                  	mov	ax,0F000h		; look at the model byte
 22399 0000137D 8ED8                    	mov	ds,ax
 22400 0000137F 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 22401 00001384 1F                      	pop	ds
 22402 00001385 7504                    	jne	short skip_enablenmis
 22403                                  
 22404 00001387 B027                    	mov	al,27h			; enable convertible nmis
 22405 00001389 E672                    	out	72h,al
 22406                                  
 22407                                  ; 25/10/2022
 22408                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 22409                                  
 22410                                  skip_enablenmis:
 22411 0000138B FB                      	sti
 22412                                  	;;mov	ax,Bios_Data ; 70h
 22413                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22414                                  	; 21/10/2022
 22415 0000138C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22416 0000138F 8ED8                    	mov	ds,ax
 22417                                  
 22418                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 22419                                  
 22420 00001391 C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 22421                                  					; initialization is complete
 22422                                  
 22423 00001396 5D                      	pop	bp			; restore all
 22424 00001397 5E                      	pop	si
 22425 00001398 5F                      	pop	di
 22426 00001399 5A                      	pop	dx
 22427 0000139A 59                      	pop	cx
 22428 0000139B 5B                      	pop	bx
 22429 0000139C 07                      	pop	es
 22430 0000139D 1F                      	pop	ds
 22431 0000139E 58                      	pop	ax
 22432 0000139F C3                      	retn
 22433                                  
 22434                                  ; 14/12/2022
 22435                                  ; ----------------------------------------------------------------------
 22436                                  
 22437                                  	; 14/12/2022
 22438                                  	; 25/10/2022
 22439                                  ;%if 0
 22440                                  	; 27/03/2019 - Retro DOS v4.0
 22441                                  int_xx_first_check:
 22442 000013A0 1E                      	push	ds
 22443 000013A1 26C51C                  	lds	bx,[es:si]
 22444 000013A4 1E                      	push	ds
 22445 000013A5 5A                      	pop	dx
 22446                                  		
 22447                                  	;cmp	dx,0
 22448                                  	;je	short int_xx_first
 22449                                  	; 05/09/2023
 22450 000013A6 21D2                    	and	dx,dx
 22451 000013A8 741E                    	jz	short int_xx_first
 22452                                  
 22453 000013AA 803FCF                  	cmp	byte [bx],0CFh
 22454 000013AD 7419                    	je	short int_xx_first
 22455                                  	
 22456 000013AF 817F064B42              	cmp	word [bx+6],424Bh
 22457 000013B4 7411                    	je	short int_xx_not_first
 22458                                  	
 22459 000013B6 81FA00F0                	cmp	dx,0F000h
 22460 000013BA 750B                    	jne	short int_xx_not_first
 22461                                  
 22462 000013BC 06                      	push	es
 22463                                  	;push	dx
 22464                                  	;mov	dx,0F000h
 22465 000013BD 8EC2                    	mov	es,dx
 22466 000013BF 263B1E01FF              	cmp	bx,[es:0FF01h]
 22467                                        	;pop	dx
 22468 000013C4 07                      	pop	es
 22469 000013C5 7401                    	je	short int_xx_first
 22470                                  
 22471                                  int_xx_not_first:
 22472 000013C7 F9                      	stc
 22473                                  int_xx_first:
 22474 000013C8 1F                      	pop	ds
 22475 000013C9 C3                      	retn
 22476                                  
 22477                                  ;%endif
 22478                                  
 22479                                  ; ----------------------------------------------------------------------
 22480                                  ; 27/03/2019 - Retro DOS v4.0
 22481                                  
 22482                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22483                                  ; (SYSINIT:1610h)
 22484                                  
 22485                                  new_init_loop:
 22486                                  
 22487                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 22488                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 22489                                  ;	dx=ds:offset of intxx, the new interrupt handler
 22490                                  ;	di=offset value of int19old&aa variable in bios.
 22491                                  ;	es=zero, segid of vector table
 22492                                  ;	ds=relocated stack code segment
 22493                                  
 22494 000013CA 268B04                  	mov	ax,[es:si]		;remember offset in vector
 22495 000013CD 8907                    	mov	[bx],ax			; to original owner in ds
 22496 000013CF 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 22497 000013D3 894702                  	mov	[bx+2],ax		; to original owner in ds
 22498                                  
 22499 000013D6 1E                      	push	ds
 22500                                  	;;mov	ax,Bios_Data ; 70h
 22501                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22502                                  	; 21/10/2022
 22503 000013D7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22504 000013DA 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 22505 000013DC 268B04                  	mov	ax,[es:si]		;int 19 handler
 22506 000013DF 8905                    	mov	[di],ax
 22507 000013E1 268B4402                	mov	ax,[es:si+2]
 22508 000013E5 894502                  	mov	[di+2],ax
 22509 000013E8 1F                      	pop	ds
 22510                                  
 22511 000013E9 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 22512 000013EC 268C5C02                	mov	[es:si+2],ds
 22513 000013F0 C3                      	retn
 22514                                  
 22515                                  ; End of STACK initialization routine
 22516                                  ; ----------------------------------------------------------------------
 22517                                  
 22518                                  ; ----------------------------------------------------------------------
 22519                                  ;set the devmark for mem command.
 22520                                  ;in: [memhi] - the address to place devmark
 22521                                  ;    [memlo] = 0
 22522                                  ;    al = id for devmark_id
 22523                                  ;out: devmark established.
 22524                                  ;     the address saved in cs:[devmark_addr]
 22525                                  ;     [memhi] increase by 1.
 22526                                  ; ----------------------------------------------------------------------
 22527                                  
 22528                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22529                                  ; (SYSINIT:1637h)
 22530                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 22531                                  ; (SYSINIT:176Ch)
 22532                                  
 22533                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 22534                                  
 22535                                  setdevmark:
 22536                                  
 22537                                  	; 04/09/2023
 22538                                  	;push	es
 22539                                  	;push	cx
 22540                                  
 22541 000013F1 2E8B0E[E003]            	mov	cx,[cs:memhi]
 22542 000013F6 2E890E[0E14]            	mov	[cs:devmark_addr],cx
 22543 000013FB 8EC1                    	mov	es,cx
 22544                                  	; 25/10/2022
 22545                                  	;mov	[es:devmark.id],al
 22546 000013FD 26A20000                	mov	[es:0],al
 22547 00001401 41                      	inc	cx
 22548                                  	;mov	[es:devmark.seg],cx
 22549 00001402 26890E0100              	mov	[es:1],cx
 22550                                  
 22551                                  	; 04/09/2023
 22552                                  	;pop	cx
 22553                                  	;pop	es
 22554                                  	
 22555 00001407 2EFF06[E003]            	inc	word [cs:memhi]
 22556 0000140C C3                      	retn
 22557                                  
 22558                                  ; ----------------------------------------------------------------------
 22559                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22560                                  ; ----------------------------------------------------------------------
 22561                                  ; 27/03/2019 - Retro DOS v4.0
 22562                                  
 22563                                  ;MULTI_CONFIG	equ 1
 22564                                  
 22565                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22566                                                                          ; allocation strategy call
 22567                                  
 22568                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22569                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22570                                  
 22571                                  default_filenum equ 8
 22572                                  
 22573                                  ;stacksw	equ true		; include switchable hardware stacks
 22574                                  
 22575                                  ; external variable defined in ibmbio module for multi-track
 22576                                  
 22577                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22578                                  					; it on after handling config.sys file as a
 22579                                  					; default value,if multrk_flag = multrk_off1.
 22580                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22581                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22582                                  
 22583                                  ; if stacksw
 22584                                  
 22585                                  ; internal stack parameters
 22586                                  
 22587                                  ;entrysize	equ 8
 22588                                  
 22589                                  ;mincount	equ 8
 22590                                  ;defaultcount	equ 9
 22591                                  ;maxcount	equ 64
 22592                                  
 22593                                  ;minsize 	equ 32
 22594                                  ;defaultsize	equ 128
 22595                                  ;maxsize 	equ 512
 22596                                  
 22597                                  DOS_FLAG_OFFSET	equ 86h
 22598                                  
 22599                                  ;ifdef MULTI_CONFIG
 22600                                  ;
 22601                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22602                                  ;   may be loaded as a dword ptr
 22603                                  
 22604                                  ; 25/10/2022
 22605                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 22606                                  ;               			;  a scratch env, this is its length
 22607                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 22608                                  ;                   			;  segment of work area
 22609                                  ;
 22610                                  ;config_cmd:	db  0  			; current config cmd
 22611                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 22612                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 22613                                  
 22614                                  ;endif ; MULTI_CONFIG
 22615                                  
 22616 0000140D 00                      multdeviceflag:	db  0
 22617                                  
 22618 0000140E 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22619                                  
 22620 00001410 00                      setdevmarkflag: db  0			;flag used for devmark
 22621                                  
 22622                                  ; 12/12/2022
 22623                                  ;driver_units:	db  0			;total unitcount for driver
 22624                                  
 22625                                  ; 12/12/2022
 22626                                  ;ems_stub_installed:
 22627                                  ;		db  0
 22628                                  
 22629                                  ; 12/12/2022	
 22630                                  ;align 2
 22631                                  
 22632                                  badparm_ptr:	; label	dword
 22633 00001411 0000                    badparm_off:	dw  0
 22634 00001413 0000                    badparm_seg:	dw  0
 22635                                  
 22636                                  ;******************************************************************************
 22637                                  ;take care of config.sys file.
 22638                                  ;system parser data and code.
 22639                                  ;******************************************************************************
 22640                                  
 22641                                  ;*******************************************************************
 22642                                  ; parser options set for msbio sysconf module
 22643                                  ;*******************************************************************
 22644                                  ;
 22645                                  ;**** default assemble swiches definition **************************
 22646                                  
 22647                                  ;farsw	equ 0		; near call expected
 22648                                  ;datesw	equ 0		; check date format
 22649                                  ;timesw	equ 0		; check time format
 22650                                  ;filesw	equ 1		; check file specification
 22651                                  ;capsw	equ 0		; perform caps if specified
 22652                                  ;cmpxsw	equ 0		; check complex list
 22653                                  ;numsw	equ 1		; check numeric value
 22654                                  ;keysw	equ 0		; support keywords
 22655                                  ;swsw	equ 1		; support switches
 22656                                  ;val1sw	equ 1		; support value definition 1
 22657                                  ;val2sw	equ 0		; support value definition 2
 22658                                  ;val3sw	equ 1		; support value definition 3
 22659                                  ;drvsw	equ 1		; support drive only format
 22660                                  ;qussw	equ 0		; support quoted string format
 22661                                  
 22662                                  ; psdata_seg equ cs
 22663                                  
 22664                                  	;.xlist
 22665                                  	;include parse.asm		;together with psdata.inc
 22666                                  	;.list
 22667                                  
 22668                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22669                                  ; ======================================================================
 22670                                  ; 27/03/2019 - Retro DOS v4.0
 22671                                  
 22672                                  ; 30/03/2019
 22673                                  ; VERSION.INC (MSDOS 6.0) 
 22674                                  ; Set DBCS Blank constant
 22675                                  
 22676                                  ; ifndef DBCS
 22677                                  DB_SPACE EQU 2020h
 22678                                  DB_SP_HI EQU 20h
 22679                                  DB_SP_LO EQU 20h
 22680                                  ; else
 22681                                  
 22682                                  ;*******************************************************************
 22683                                  ; Parser include file
 22684                                  ;*******************************************************************
 22685                                  
 22686                                  ;**** Equation field
 22687                                  ;-------- Character code definition
 22688                                  
 22689                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22690                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22691                                  _$P_Period	   equ	"."             ;AN020;
 22692                                  _$P_Slash	   equ	"/"             ;AN020;
 22693                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22694                                  _$P_Comma	   equ	","             ;AN000;
 22695                                  _$P_Switch	   equ	"/"             ;AN000;
 22696                                  _$P_Keyword	   equ	"="             ;AN000;
 22697                                  _$P_Colon	   equ	":"             ;AN000;
 22698                                  _$P_Plus 	   equ	"+"             ;AN000;
 22699                                  _$P_Minus	   equ	"-"             ;AN000;
 22700                                  _$P_Rparen	   equ	")"             ;AN000;
 22701                                  _$P_Lparen	   equ	"("             ;AN000;
 22702                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22703                                  _$P_DQuote	   equ	'"'             ;AN000;
 22704                                  _$P_NULL 	   equ	0		;AN000;
 22705                                  _$P_TAB		   equ	9		;AN000;
 22706                                  _$P_CR		   equ	0Dh		;AN000;
 22707                                  _$P_LF		   equ	0Ah		;AN000;
 22708                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22709                                  
 22710                                  ;-------- Masks
 22711                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22712                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22713                                  
 22714                                  ;-------- DOS function call related equs
 22715                                  
 22716                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22717                                  					; by this call, following information
 22718                                  struc _$P_CDI	
 22719 00000000 ????                     .DateF: resw 1
 22720 00000002 ??????????               .Money: resb 5
 22721 00000007 ????                     .1000:	 resb 2
 22722 00000009 ????                     .Dec:	 resb 2
 22723 0000000B ????                     .DateS: resb 2
 22724 0000000D ????                     .TimeS: resb 2
 22725 0000000F ??                          	 resb 1
 22726 00000010 ??                      	 resb 1
 22727 00000011 ??                       .TimeF: resb 1	 
 22728 00000012 ????????                	 resw 2
 22729 00000016 ????                    	 resb 2
 22730 00000018 <res Ah>                	 resw 5
 22731                                   .size:
 22732                                  endstruc
 22733                                  
 22734                                  _$P_Date_MDY	   equ	0		;AN000;
 22735                                  _$P_Date_DMY	   equ	1		;AN000;
 22736                                  _$P_Date_YMD	   equ	2		;AN000;
 22737                                  ;-------------
 22738                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22739                                  					;AN000; DS:SI will points to DBCS EV
 22740                                  ;-------------
 22741                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22742                                  					;AN000; following parameters are set
 22743                                  					;AN000; to get casemap table.
 22744                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22745                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22746                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22747                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22748                                  					; By this call following information
 22749                                  					; is returned.
 22750                                  struc _$P_DOS_TBL
 22751 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22752 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22753 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22754                                  endstruc
 22755                                  
 22756                                  ; ----------------------------------------------------------------------------
 22757                                  ; PARMS 	LABEL	BYTE
 22758                                  ;		DW	PARMSX
 22759                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22760                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22761                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22762                                  ;					; TYPICAL ARE ";", "="
 22763                                  ;					; "," & WHITESPACE ALWAYS
 22764                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22765                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22766                                  ; ----------------------------------------------------------------------------
 22767                                  
 22768                                  ;-------------------------------- PARMS block structure
 22769                                  struc _$P_PARMS_Blk
 22770 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22771 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22772 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22773                                  endstruc
 22774                                  
 22775                                  _$P_Len_PARMS	   equ	4		;AN000;
 22776                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22777                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22778                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22779                                  
 22780                                  ; ----------------------------------------------------------------------------
 22781                                  ; PARMSX	LABEL	BYTE
 22782                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22783                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22784                                  ;		:			; REPEATS maxp-1 TIMES
 22785                                  ;		DB	maxs		; # OF SWITCHES
 22786                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22787                                  ;		:			; REPEATS maxs-1 TIMES
 22788                                  ;		DB	maxk		; # OF KEYWORD
 22789                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22790                                  ;		:			; REPEATS maxk-1 TIMES
 22791                                  ; ----------------------------------------------------------------------------
 22792                                  
 22793                                  ;-------------------------------- PARMSX block structure
 22794                                  struc _$P_PARMSX_Blk		;AN000;
 22795 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22796 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22797 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22798                                  endstruc
 22799                                  
 22800                                  ; ----------------------------------------------------------------------------
 22801                                  ; << Control field definition  >>
 22802                                  ;
 22803                                  ;
 22804                                  ;CONTROL   LABEL   BYTE
 22805                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22806                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22807                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22808                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22809                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22810                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22811                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22812                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22813                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22814                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22815                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22816                                  ;				   ; 0002H=REPEATS ALLOWED
 22817                                  ;				   ; 0001H=OPTIONAL
 22818                                  ;	   DW	   FUNCTION_FLAGS
 22819                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22820                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22821                                  ;				   ; 0010H=REMOVE ":" AT END
 22822                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22823                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22824                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22825                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22826                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22827                                  ;	   :
 22828                                  ;
 22829                                  ;Note:
 22830                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22831                                  ;      DATE bit simalteniously.
 22832                                  ;
 22833                                  ;      The parser examins each bit along with the following priority.
 22834                                  ;
 22835                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22836                                  ;      FILE SPEC -> SIMPLE STRING.
 22837                                  ;
 22838                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22839                                  ;      in the result buffer is capitalized.
 22840                                  ;
 22841                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22842                                  ;
 22843                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22844                                  ;      switch, for example, '/A', then STRING points to;
 22845                                  ;
 22846                                  ;			DB    1 	; number of following synonyms
 22847                                  ;			DB   '/A',0
 22848                                  ;
 22849                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22850                                  ;
 22851                                  ;			DB    1 	; number of following synonyms
 22852                                  ;			DB   'CODEPAGE=',0
 22853                                  ;
 22854                                  ;    - "..." must consist of upper case characters only because the parser
 22855                                  ;      performs pattern matching after converting input to upper case (by
 22856                                  ;      using the current country upper case table)
 22857                                  ;
 22858                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22859                                  ;      example /A and /B, the format will be;
 22860                                  ;
 22861                                  ;			DB    2 	; number of following synonyms
 22862                                  ;			DB    '/A',0
 22863                                  ;			DB    '/B',0
 22864                                  ; ----------------------------------------------------------------------------
 22865                                  
 22866                                  ;**** Match_Flags
 22867                                  
 22868                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22869                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22870                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22871                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22872                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22873                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22874                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22875                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22876                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22877                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22878                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22879                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22880                                  
 22881                                  ;**** Function flags
 22882                                  
 22883                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22884                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22885                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22886                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22887                                  
 22888                                  ;-------------------------------- Control block structure
 22889                                  struc _$P_Control_Blk
 22890 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22891 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22892 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22893 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22894 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22895 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22896                                  endstruc
 22897                                  
 22898                                  ; ----------------------------------------------------------------------------
 22899                                  ; << Value List Definition >>
 22900                                  ;
 22901                                  ;VALUES 	LABEL	BYTE
 22902                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22903                                  ;	     +-
 22904                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22905                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22906                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22907                                  ;	     |	:
 22908                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22909                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22910                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22911                                  ;	     |	:
 22912                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22913                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22914                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22915                                  ;	     +-	:
 22916                                  ;
 22917                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22918                                  ;
 22919                                  ;Note:
 22920                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22921                                  ;      when no choice lists are provided.
 22922                                  ;
 22923                                  ;    - STRING must consist of upper case characters only because the parser
 22924                                  ;      performs pattern matching after converting input to upper case (by
 22925                                  ;      using the current country upper case table)
 22926                                  ; ----------------------------------------------------------------------------
 22927                                  
 22928                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22929                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22930                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22931                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22932                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22933                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22934                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22935                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22936                                  
 22937                                  struc _$P_Val_List
 22938 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22939 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22940 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22941 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22942 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22943                                  endstruc
 22944                                  
 22945                                  ; ----------------------------------------------------------------------------
 22946                                  ; << Result Buffer Definition  >>
 22947                                  ;
 22948                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22949                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22950                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22951                                  ;						;	3=STRING, 4=COMPLEX,
 22952                                  ;						;	5=FILESPEC, 6=DRIVE
 22953                                  ;						;	7=DATE, 8=TIME
 22954                                  ;						;	9=QUOTED STRING
 22955                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22956                                  ;
 22957                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22958                                  ;
 22959                                  ;            +-
 22960                                  ;	    | DD	n			; VALUE IF NUMBER
 22961                                  ;	    | or
 22962                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22963                                  ;	    |					; (ES presents Segment address)
 22964                                  ;	    | or
 22965                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22966                                  ;	    | or
 22967                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22968                                  ;	    | or
 22969                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22970                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22971                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22972                                  ;	    | or
 22973                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22974                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22975                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22976                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22977                                  ;	    +-
 22978                                  ;
 22979                                  ;
 22980                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22981                                  ;      list.
 22982                                  ;
 22983                                  ;      YEAR: If the input value for the year is less than 100, parser
 22984                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22985                                  ;	     the year value, he returns 1987.
 22986                                  ; ----------------------------------------------------------------------------
 22987                                  
 22988                                  ;-------------------------------- Result block structure
 22989                                  struc _$P_Result_Blk
 22990 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22991 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22992 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22993 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22994                                  endstruc
 22995                                  
 22996                                  ;--------------------------------
 22997                                  ;**** values for the type field in the result block
 22998                                  
 22999                                  _$P_EOL		   equ	0		;AN000; End of line
 23000                                  _$P_Number	   equ	1		;AN000; Number
 23001                                  _$P_List_Idx	   equ	2		;AN000; List Index
 23002                                  _$P_String	   equ	3		;AN000; String
 23003                                  _$P_Complex	   equ	4		;AN000; Complex
 23004                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 23005                                  _$P_Drive	   equ	6		;AN000; Drive
 23006                                  _$P_Date_F	   equ	7		;AN000; Date
 23007                                  _$P_Time_F	   equ	8		;AN000; Time
 23008                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 23009                                  
 23010                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 23011                                  
 23012                                  ;**** Return code
 23013                                  ;
 23014                                  ; following return code will be returned in the AX register.
 23015                                  
 23016                                  _$P_No_Error	   equ	0		;AN000; No error
 23017                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 23018                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 23019                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 23020                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 23021                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 23022                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 23023                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 23024                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 23025                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 23026                                  
 23027                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 23028                                  
 23029                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 23030                                  
 23031                                  ;********************** Local Data *************************************
 23032 00001415 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 23033 00001417 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 23034 00001419 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 23035 0000141B 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 23036 0000141D 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 23037 0000141E 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 23038 00001420 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 23039 00001422 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 23040                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 23041                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 23042                                  
 23043                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 23044                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 23045                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 23046                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 23047                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 23048                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 23049                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 23050                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 23051                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 23052                                  
 23053                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 23054                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 23055                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 23056                                  
 23057 00001424 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 23058 00001426 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 23059 00001428 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 23060 0000142A 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 23061                                  
 23062 0000142C 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 23063                                  _$P_STRING_BUF_END equ	$		;AN000;
 23064                                  
 23065                                  ; 25/10/2022
 23066                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 23067                                  
 23068 000014AC FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 23069 000014AD 0000                    		   dw	0		;AN000; offset	of char case map table
 23070 000014AF 0000                    		   dw	0		;AN000; segment of char case map table
 23071                                  ; 25/10/2022
 23072                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 23073                                  ;		   dw	0		;AN000; offset	of file case map table
 23074                                  ;		   dw	0		;AN000; segment of file case map table
 23075                                  
 23076                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 23077                                  ;
 23078                                  
 23079                                  ;M029
 23080                                  ;!!!WARNING!!!
 23081                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 23082                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 23083                                  ;changes need to be made in SYSPARSE
 23084                                  
 23085                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 23086                                  
 23087                                  ; 25/10/2022
 23088                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 23089                                  
 23090 000014B1 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 23091                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 23092                                  
 23093                                  ;ENDIF					;AN000;(of FileSW)
 23094                                  
 23095                                  ; delimiter parsing
 23096                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 23097                                  _$P_period_only	   equ	02h		;AN032; check only for period
 23098                                  
 23099                                  ;filespec error flag
 23100 000014BA 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 23101                                  					;AN033;  was detected.
 23102                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 23103                                  
 23104                                  
 23105                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 23106                                  ; ======================================================================
 23107                                  ; 27/03/2019 - Retro DOS v4.0
 23108                                  
 23109                                  ;***********************************************************************
 23110                                  ; SysParse;
 23111                                  ;
 23112                                  ;  Function : Parser Entry
 23113                                  ;
 23114                                  ;  Input: DS:SI -> command line
 23115                                  ;	  ES:DI -> parameter block
 23116                                  ;	  cs -> psdata.inc
 23117                                  ;	  CX = operand ordinal
 23118                                  ;
 23119                                  ;	  Note:  ES is the segment containing all the control blocks defined
 23120                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 23121                                  ;		 is in DS.
 23122                                  ;
 23123                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 23124                                  ;		    invalid value list. But this parser does NOT implement
 23125                                  ;		    this feature. Therefore CY always zero.
 23126                                  ;
 23127                                  ;	   CY = 0   AX = return code
 23128                                  ;		    BL = terminated delimiter code
 23129                                  ;		    CX = new operand ordinal
 23130                                  ;		    SI = set past scaned operand
 23131                                  ;		    DX = selected result buffer
 23132                                  ;
 23133                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 23134                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 23135                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 23136                                  ;
 23137                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 23138                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 23139                                  ;
 23140                                  ;-------- Modification History -----------------------------------------
 23141                                  ;
 23142                                  ;  4/04/87 : Created by K. K,
 23143                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 23144                                  ;	   : JMP SHORT assemble error (tm02)
 23145                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 23146                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 23147                                  ;	     DateSW equ 1)	      (tm04)
 23148                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 23149                                  ;				      (tm05) in PSDATA.INC
 23150                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 23151                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 23152                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 23153                                  ;	     value-list block	      (tm07)
 23154                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 23155                                  ;	     switch (keyword) or not. If there is, backup si for next call
 23156                                  ;	     (tm08)
 23157                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 23158                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 23159                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 23160                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 23161                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 23162                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 23163                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 23164                                  ;					  (tm12)
 23165                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 23166                                  ;					  (tm13)
 23167                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 23168                                  ;					  (tm14)
 23169                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 23170                                  ;					  (tm15)
 23171                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 23172                                  
 23173                                  ;  7/24/87 : Quoted strings being returned with quotes.
 23174                                  
 23175                                  ;  7/28/87 : Kerry S (;AN018;)
 23176                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 23177                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 23178                                  ;	     affected: _$P_Chk_SW_Control.
 23179                                  
 23180                                  ;  7/29/87 : Kerry S (;AN019;)
 23181                                  ;	     Now allow the optional bit in match flags for switches.  This
 23182                                  ;	     allows the switch to be encountered with a value or without a
 23183                                  ;	     value and no error is returned.
 23184                                  ;
 23185                                  
 23186                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 23187                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 23188                                  ;	     within a date response, instead of checking just for the one
 23189                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 23190                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 23191                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 23192                                  
 23193                                  ;  9/1/87  : Kerry S (;AN021)
 23194                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 23195                                  ;	     the command line with the string in the control block the
 23196                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 23197                                  ;	     on the command line and assuming a match.	This allowed a shorter
 23198                                  ;	     string on the command line than in the synonym list in the control
 23199                                  ;	     block.  I put in a test for a null in the control block so the
 23200                                  ;	     string in the control block must be the same length as the string
 23201                                  ;	     preceeding the colon or equal on the command line.
 23202                                  
 23203                                  ;  8/28/87 : Kerry S (;AN022;)
 23204                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 23205                                  ;	     problems for people who included it themselves in a segment other
 23206                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 23207                                  ;	     segment.
 23208                                  
 23209                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 23210                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 23211                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 23212                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 23213                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 23214                                  ;	     BL be used if TIME is being parsed.
 23215                                  
 23216                                  ;  9/24/87 : Ed K
 23217                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 23218                                  ;	     invocations with their normally expanded code; made comments
 23219                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 23220                                  
 23221                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 23222                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 23223                                  ;	     pointed to by non-existant CONTROL.
 23224                                  
 23225                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 23226                                  ;	     A quoted text string can be framed only by double quote.  Remove
 23227                                  ;	     support to frame quoted text string with single quote.
 23228                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 23229                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 23230                                  ;	     single quote in PROC prologues are left as is for history reasons.
 23231                                  
 23232                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 23233                                  ;	     quote chars within a quoted string is supposed to be reported as
 23234                                  ;	     one quote character, but is reported as two quotes.  This changed
 23235                                  ;	     two instructions in PROC _$P_Quoted_Str.
 23236                                  
 23237                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 23238                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 23239                                  
 23240                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 23241                                  
 23242                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 23243                                  ;	     psdata buffer should have cs.
 23244                                  
 23245                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 23246                                  ;	     positional missing.
 23247                                  
 23248                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 23249                                  ;	     as a line delimiter, should use carriage return.
 23250                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 23251                                  
 23252                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 23253                                  
 23254                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 23255                                  ;	     endless loop since SI is returned still pointing to start
 23256                                  ;	     of that parm.
 23257                                  
 23258                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 23259                                  ;	     Vector to returned string has CS instead of cs, but
 23260                                  ;	     when tried to fix it on previous version, changed similar
 23261                                  ;	     but wrong place.
 23262                                  
 23263                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 23264                                  ;	     delimiters between hours, minutes, seconds for time. And period
 23265                                  ;	     and comma are valid delimiters between seconds and 100th second.
 23266                                  
 23267                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 23268                                  ;	     in a filespec, then flag an error.
 23269                                  
 23270                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 23271                                  ;	     indexed off of the cs equate instead of the DS register.
 23272                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 23273                                  ;  -->	     local parser data. Why were some references to local data changed
 23274                                  ;	     to do this before, but not all ?????
 23275                                  
 23276                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 23277                                  
 23278                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 23279                                  ;
 23280                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 23281                                  
 23282                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 23283                                  
 23284                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 23285                                  ;	     separator in TIME before hundredths field.
 23286                                  ;
 23287                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 23288                                  ;			strings as keywords.
 23289                                  ;
 23290                                  ;***********************************************************************
 23291                                  
 23292                                  ;IF FarSW				;AN000;(Check if need far return)
 23293                                  ;SysParse proc far			;AN000;
 23294                                  ;ELSE					;AN000;
 23295                                  ;SysParse proc near			;AN000;
 23296                                  ;ENDIF					;AN000;(of FarSW)
 23297                                  
 23298                                  ; 27/03/2019 - Retro DOS v4.0
 23299                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 23300                                  
 23301                                  ; 25/10/2022 - Retro DOS v4.0
 23302                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 23303                                  
 23304                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 23305                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 23306                                  
 23307                                  SysParse:
 23308                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 23309                                  	; dx = 0
 23310 000014BB 1E                      	push	ds ; *!*
 23311 000014BC 0E                      	push	cs
 23312 000014BD 1F                      	pop	ds 
 23313                                  
 23314                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 23315                                  	;cld				;AN000; confirm forward direction
 23316                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 23317                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 23318                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 23319                                  	;
 23320                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 23321                                  
 23322                                  	; 06/09/2023
 23323 000014BE 8916[2214]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 23324 000014C2 FC                      	cld				;AN000; confirm forward direction
 23325 000014C3 890E[1514]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 23326 000014C7 8916[1714]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 23327 000014CB 8916[2A14]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 23328 000014CF 8916[1B14]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 23329                                  
 23330                                  ;M029 -- Begin changes
 23331                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 23332                                  ;entry to SysParse. This is in the non-checksum region and any program that
 23333                                  ;corrupts this table but does not corrupt the checksum region will leave
 23334                                  ;command.com parsing in an inconsistent state.
 23335                                  ; NB: The special characters string has been hardcoded here. If any change
 23336                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 23337                                  
 23338                                  ;IF FileSW + DrvSW
 23339                                  	;mov	word [cs:_$P_FileSp_Char], ']['
 23340                                  	;mov	word [cs:_$P_FileSp_Char+2], '<|'
 23341                                  	;mov	word [cs:_$P_FileSp_Char+4], '+>'
 23342                                  	;mov 	word [cs:_$P_FileSp_Char+6], ';='
 23343                                  
 23344                                  	; 06/09/2023
 23345 000014D3 C706[B114]5D5B          	mov	word [_$P_FileSp_Char], ']['
 23346 000014D9 C706[B314]3C7C          	mov	word [_$P_FileSp_Char+2], '<|'
 23347 000014DF C706[B514]2B3E          	mov	word [_$P_FileSp_Char+4], '+>'
 23348 000014E5 C706[B714]3B3D          	mov 	word [_$P_FileSp_Char+6], ';='
 23349                                  ;ENDIF
 23350                                  	; 06/09/2023
 23351 000014EB 1F                      	pop	ds ; *!*
 23352                                  
 23353                                  ;M029 -- End of changes
 23354                                  
 23355 000014EC E88106                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 23356 000014EF 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 23357                                  ;--------------------------- End of Line
 23358 000014F1 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 23359 000014F4 53                      	push	bx			;AN000;
 23360                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 23361                                  					;AN000; Get the PARMSX address to
 23362 000014F5 268B1D                  	mov	bx,[es:di]
 23363                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 23364                                  					;AN000; check ORDINAL to see if the minimum
 23365 000014F8 263A0F                  	cmp	cl,[es:bx]	
 23366 000014FB 7303                    	jae	short _$P_Fin		;AN000; positional found.
 23367                                  
 23368 000014FD B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 23369                                  _$P_Fin: 				;AN000;
 23370 00001500 5B                      	pop	bx			;AN000;
 23371 00001501 E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 23372                                  ;---------------------------
 23373                                  _$P_Start:				;AN000;
 23374 00001504 2E8936[2414]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 23375 00001509 53                      	push	bx			;AN000; quoted string or file spec.
 23376 0000150A 57                      	push	di			;AN000;
 23377 0000150B 55                      	push	bp			;AN000;
 23378                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 23379                                  	; 02/11/2022
 23380                                  	;lea	bx,[_$P_STRING_BUF]
 23381                                  	; 07/09/2023
 23382 0000150C BB[2C14]                	mov	bx,_$P_STRING_BUF
 23383 0000150F 2EF606[2314]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 23384 00001515 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 23385                                  
 23386                                  _$P_Pack_Loop:				;AN000;
 23387 00001517 AC                      	lodsb				;AN000; Pick a operand from buffer
 23388 00001518 E8FA06                  	call	_$P_Chk_Switch		;AN000; Check switch character
 23389 0000151B 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 23390                                  
 23391 0000151D E87206                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 23392 00001520 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 23393                                  
 23394 00001522 E8A206                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 23395 00001525 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 23396                                  
 23397 00001527 2EF606[2314]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 23398                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 23399 0000152D 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 23400                                  
 23401 0000152F E83E06                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 23402 00001532 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 23403                                  
 23404                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 23405 00001534 2EF606[2314]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 23406 0000153A 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 23407                                  
 23408 0000153C 4E                      	dec	si			;AN000; (tm08)
 23409 0000153D EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 23410                                  
 23411                                  _$P_PL01:				;AN000;
 23412 0000153F 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 23413 00001542 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 23414 00001544 7506                    	jne	short _$P_PL00 		;AN000; then
 23415                                  
 23416 00001546 2E800E[2314]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 23417                                  _$P_PL00:				;AN000;
 23418 0000154C 43                      	inc	bx			;AN000; ready to see next byte
 23419 0000154D E8DE06                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 23420 00001550 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 23421                                  
 23422 00001552 AC                      	lodsb				;AN000; if yes, store
 23423 00001553 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 23424 00001556 43                      	inc	bx			;AN000; update pointer
 23425 00001557 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 23426                                  
 23427                                  _$P_Pack_End_BY_EOL:			;AN000;
 23428 00001559 4E                      	dec	si			;AN000; backup si pointer
 23429                                  _$P_Pack_End:				;AN000;
 23430 0000155A 2E8936[1914]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 23431                                  	; 07/09/2023
 23432                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 23433 0000155F 30E4                    	xor	ah,ah ; 0 ; *
 23434 00001561 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 23435                                  	;
 23436 00001564 2E891E[2814]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 23437                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 23438 00001569 268B1D                  	mov	bx,[es:di]
 23439                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 23440                                  	; 02/11/2022
 23441                                  	;lea	si,[_$P_STRING_BUF]
 23442                                  	; 07/09/2023
 23443 0000156C BE[2C14]                	mov	si,_$P_STRING_BUF
 23444 0000156F 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 23445 00001573 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 23446                                  
 23447 00001575 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 23448 00001579 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 23449                                  
 23450 0000157B 2EF606[2314]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 23451 00001581 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 23452                                  
 23453                                  _$P_Positional_Manager:			;AN000; else process as positional
 23454 00001583 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23455                                  	; 07/09/2023
 23456                                  	;xor	ah,ah			;AN000; ax = maxp
 23457 00001587 2E3906[1514]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 23458 0000158C 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 23459                                  
 23460 0000158E 2EA1[1514]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 23461 00001592 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 23462 00001594 43                      	inc	bx			;AC035; add '2' to
 23463 00001595 43                      	inc	bx			;AC035;  BX reg
 23464                                  					;AN000; now bx points to 1st CONTROL
 23465 00001596 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 23466 00001598 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 23467 0000159B E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 23468 0000159E EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23469                                  
 23470                                  _$P_Too_Many_Error:			;AN000;
 23471 000015A0 2EC706[1714]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 23472 000015A7 EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23473                                  
 23474                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 23475                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 23476                                  get_maxp:
 23477                                  	;mov	al,[es:bx+1]
 23478 000015A9 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23479                                  	; 07/09/2023
 23480                                  	; ah=0 ; *
 23481                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 23482 000015AD 30ED                    	xor	ch,ch ; **
 23483 000015AF 40                      	inc	ax			;AN000;
 23484 000015B0 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23485 000015B2 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23486 000015B4 C3                      	retn
 23487                                  
 23488                                  _$P_SW_Manager:				;AN000;
 23489                                  	; 07/09/2023
 23490                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23491                                  	;xor	ah,ah			;AN000; ax = maxp
 23492                                  	;inc	ax			;AN000;
 23493                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23494                                  	;add	bx,ax			;AN000; now bx points to maxs
 23495 000015B5 E8F1FF                  	call	get_maxp ; 07/09/2023
 23496                                  
 23497 000015B8 268A0F                  	mov	cl,[es:bx]		;AN000;
 23498                                  	; 07/09/2023
 23499                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 23500                                  	;or	cx,cx			;AN000; at least one switch ?
 23501                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 23502                                  	; 07/07/2023
 23503 000015BB E30F                    	jcxz	_$P_SW_Not_Found	; no
 23504                                  
 23505 000015BD 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 23506                                  
 23507                                  _$P_SW_Mgr_Loop: 			;AN000;
 23508 000015BE 53                      	push	bx			;AN000;
 23509 000015BF 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 23510 000015C2 E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 23511 000015C5 5B                      	pop	bx			;AN000;
 23512 000015C6 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 23513                                  
 23514 000015C8 43                      	inc	bx			;AC035; add '2' to
 23515 000015C9 43                      	inc	bx			;AC035;  BX reg
 23516                                  					;AN000; else bx points to the next CONTROL
 23517 000015CA E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 23518                                  
 23519                                  _$P_SW_Not_Found:			;AN000;
 23520 000015CC 2EC706[1714]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 23521 000015D3 EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 23522                                  
 23523                                  _$P_Key_Manager: 			;AN000;
 23524                                  	; 07/09/2023
 23525                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23526                                  	;xor	ah,ah			;AN000; ax = maxp
 23527                                  	;inc	ax			;AN000;
 23528                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23529                                  	;add	bx,ax			;AN000; now bx points to maxs
 23530 000015D5 E8D1FF                  	call	get_maxp ; 07/09/2023
 23531                                  	
 23532 000015D8 268A07                  	mov	al,[es:bx]		;AN000;
 23533 000015DB 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 23534 000015DD D1E0                    	shl	ax,1			;AN000;
 23535 000015DF 40                      	inc	ax			;AN000; ax = ax*2+1
 23536 000015E0 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 23537 000015E2 268A0F                  	mov	cl,[es:bx]		;AN000;
 23538                                  	; 07/09/2023
 23539                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 23540                                  	;or	cx,cx			;AN000; at least one keyword ?
 23541                                  	;jz	short _$P_Key_Not_Found	;AN000;
 23542                                  	; 07/07/2023
 23543 000015E5 E305                    	jcxz	_$P_Key_Not_Found	; no
 23544                                  
 23545 000015E7 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 23546                                  
 23547                                  _$P_Key_Mgr_Loop:			;AN000;
 23548                                  	; 07/09/2023
 23549                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 23550                                  	; (always returns with cf=1)
 23551                                  	;push	bx			;AN000;
 23552                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 23553                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 23554                                  	;pop	bx			;AN000;
 23555                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 23556                                  	; 07/09/2023
 23557                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 23558                                  
 23559 000015E8 43                      	inc	bx			;AC035; add '2' to
 23560 000015E9 43                      	inc	bx			;AC035;  BX reg
 23561                                  					;AN000; else bx points to the next CONTROL
 23562 000015EA E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 23563                                  
 23564                                  _$P_Key_Not_Found:			;AN000;
 23565 000015EC 2EC706[1714]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 23566                                  _$P_Return_to_Caller:			;AN000;
 23567 000015F3 5D                      	pop	bp			;AN000;
 23568 000015F4 5F                      	pop	di			;AN000;
 23569 000015F5 5B                      	pop	bx			;AN000;
 23570 000015F6 2E8B0E[1514]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 23571 000015FB 2EA1[1714]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 23572 000015FF 2E8B36[1914]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 23573 00001604 2E8B16[1B14]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 23574 00001609 2E8A1E[1D14]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 23575                                  _$P_Single_Exit: 			;AN000;
 23576 0000160E F8                      	clc				;AN000;
 23577 0000160F C3                      	retn				;AN000;
 23578                                  
 23579                                  ;***********************************************************************
 23580                                  ; _$P_Chk_Pos_Control
 23581                                  ;
 23582                                  ; Function: Parse CONTROL block for a positional
 23583                                  ;
 23584                                  ; Input:     ES:BX -> CONTROL block
 23585                                  ;	     cs:SI -> _$P_STRING_BUF
 23586                                  ;
 23587                                  ; Output:    None
 23588                                  ;
 23589                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23590                                  ;
 23591                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23592                                  ;***********************************************************************
 23593                                  
 23594                                  _$P_Chk_Pos_Control:
 23595 00001610 50                      	push	ax			;AN000;
 23596                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23597 00001611 268B07                  	mov	ax,[es:bx]
 23598                                  	; 12/12/2022
 23599 00001614 A802                    	test	al,_$P_Repeat
 23600                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23601 00001616 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23602                                  
 23603 00001618 2EFF06[1514]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23604                                  _$P_CPC00:				;AN000;
 23605 0000161D 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23606 00001621 7517                    	jne	short _$P_CPC01		;AN000;
 23607                                  
 23608                                  	; 12/12/2022
 23609 00001623 A801                    	test	al,_$P_Optional
 23610                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 23611 00001625 7509                    	jnz	short _$P_CPC02		;AN000;
 23612                                  
 23613 00001627 2EC706[1714]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 23614 0000162E EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 23615                                  
 23616                                  _$P_CPC02:				;AN000;
 23617 00001630 50                      	push	ax			;AN000;
 23618                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 23619                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 23620                                  	; 14/08/2023
 23621 00001631 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23622 00001634 E89600                  	call	_$P_Fill_Result		;AN000;
 23623 00001637 58                      	pop	ax			;AN000;
 23624 00001638 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 23625                                  
 23626                                  _$P_CPC01:				;AN000;
 23627 0000163A E81101                  	call	_$P_Check_Match_Flags	;AN000;
 23628                                  _$P_CPC_Exit:				;AN000;
 23629 0000163D 58                      	pop	ax			;AN000;
 23630 0000163E C3                      	retn				;AN000;
 23631                                  
 23632                                  ;***********************************************************************
 23633                                  ; _$P_Chk_Key_Control
 23634                                  ;
 23635                                  ; Function: Parse CONTROL block for a keyword
 23636                                  ;
 23637                                  ; Input:     ES:BX -> CONTROL block
 23638                                  ;	     cs:SI -> _$P_STRING_BUF
 23639                                  ;
 23640                                  ; Output:    CY = 1 : not match
 23641                                  ;
 23642                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23643                                  ;
 23644                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23645                                  ;***********************************************************************
 23646                                  
 23647                                  ; 07/09/2023
 23648                                  ;_$P_Chk_Key_Control:
 23649                                  ;	stc				;AN000; this logic works when the KeySW
 23650                                  ;	retn				;AN000; is reset.
 23651                                  
 23652                                  ;***********************************************************************
 23653                                  ; _$P_Search_KEYorSW:
 23654                                  ;
 23655                                  ; Function: Seach specified keyword or switch from CONTROL
 23656                                  ;
 23657                                  ; Input:     ES:BX -> CONTROL block
 23658                                  ;	     cs:SI -> _$P_STRING_BUF
 23659                                  ;
 23660                                  ; Output:    CY = 1 : not match
 23661                                  ;
 23662                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 23663                                  ;***********************************************************************
 23664                                  
 23665                                  	; 25/10/2022 - Retro DOS v4.0
 23666                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 23667                                  
 23668                                  _$P_Search_KEYorSW:			;AN000;
 23669 0000163F 55                      	push	bp			;AN000;
 23670 00001640 51                      	push	cx			;AN000;
 23671 00001641 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 23672 00001645 30ED                    	xor	ch,ch			;AN000; and set it to cx
 23673                                  	;or	cx,cx			;AN000; No synonyms specified ?
 23674                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 23675                                  	; 14/08/2023
 23676 00001647 E30D                    	jcxz	_$P_KEYorSW_Not_Found
 23677                                  
 23678                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 23679                                  	; 25/10/2022
 23680 00001649 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 23681                                  	;lea	bp,[bx+9]
 23682                                  _$P_KEYorSW_Loop:			;AN000;
 23683 0000164C E8BE03                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 23684 0000164F 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 23685                                  
 23686 00001651 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 23687 00001654 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 23688                                  _$P_KEYorSW_Not_Found:			;AN000;
 23689 00001656 F9                      	stc				;AN000; indicate not found in synonym list
 23690 00001657 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 23691                                  
 23692                                  _$P_KEYorSW_Found:			;AN000;
 23693 00001659 2E892E[2A14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 23694 0000165E F8                      	clc				;AN000; indicate found
 23695                                  _$P_KEYorSW_Exit:			;AN000;
 23696 0000165F 59                      	pop	cx			;AN000;
 23697 00001660 5D                      	pop	bp			;AN000;
 23698 00001661 C3                      	retn				;AN000;
 23699                                   
 23700                                  ;***********************************************************************
 23701                                  ; _$P_MoveBP_NUL
 23702                                  ;***********************************************************************
 23703                                  
 23704                                  _$P_MoveBP_NUL:
 23705                                  _$P_MBP_Loop:				;AN000;
 23706                                  	; 11/12/2022
 23707 00001662 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 23708                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 23709                                  	; (SYSINIT:18DBh)
 23710                                   	;cmp     byte [es:bp+0],0
 23711 00001667 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 23712                                  
 23713 00001669 45                      	inc	bp			;AN000; until
 23714 0000166A EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 23715                                  
 23716                                  _$P_MBP_Exit:				;AN000;
 23717 0000166C 45                      	inc	bp			;AN000; bp points to next to NULL
 23718 0000166D C3                      	retn				;AN000;
 23719                                  
 23720                                  ;***********************************************************************
 23721                                  ; _$P_Chk_SW_Control
 23722                                  ;
 23723                                  ; Function: Parse CONTROL block for a switch
 23724                                  ;
 23725                                  ; Input:     ES:BX -> CONTROL block
 23726                                  ;	     cs:SI -> _$P_STRING_BUF
 23727                                  ;
 23728                                  ; Output:    CY = 1 : not match
 23729                                  ;
 23730                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23731                                  ;
 23732                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23733                                  ;***********************************************************************
 23734                                  
 23735                                  _$P_Chk_SW_Control:
 23736                                  
 23737                                  ;IF SwSW				;AN000;(Check if switch is supported)
 23738                                  	;or	byte [cs:_$P_Flags+1],10h
 23739 0000166E 2E800E[2314]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23740 00001674 E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23741 00001677 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23742                                  
 23743                                  	;and	[cs:_$P_Flags+],0EFh
 23744 00001679 2E8026[2314]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23745                                  					;AC034; reset the indicator previously set
 23746 0000167F 50                      	push	ax			;AN000; 	      /switch:
 23747 00001680 2EA1[2614]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23748 00001684 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23749 00001686 2E0106[2414]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23750 0000168B 58                      	pop	ax			;AN000;
 23751                                  
 23752 0000168C 2E8B36[2614]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23753 00001691 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23754 00001695 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23755                                  
 23756 00001697 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23757 0000169C 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23758                                  
 23759 0000169E 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23760 000016A5 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23761                                  
 23762                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23763                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23764 000016A7 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23765 000016AB 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23766                                  
 23767                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23768                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23769                                  	;test	word [es:bx],1
 23770                                  	; 12/12/2022
 23771                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23772 000016AD 26F60701                	test	byte [es:bx],_$P_Optional
 23773 000016B1 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23774                                  
 23775 000016B3 2EC706[1714]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23776 000016BA EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23777                                  
 23778                                  _$P_CSW00:				;AN000;
 23779 000016BC E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23780 000016BF F8                      	clc				;AN000; indicate match
 23781                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23782                                  	; 12/12/2022
 23783 000016C0 C3                      	retn
 23784                                  
 23785                                  _$P_Chk_SW_Err0: 			;AN000;
 23786 000016C1 F9                      	stc				;AN000; not found in switch synonym list
 23787                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23788                                  	; 12/12/2022
 23789 000016C2 C3                      	retn	
 23790                                  
 23791                                  _$P_Chk_SW_Exit: 			;AN000;
 23792 000016C3 50                      	push	ax			;AN000;
 23793                                  	;mov	al,_$P_String		;AN000;
 23794                                  	;mov	ah,_$P_No_Tag		;AN000;
 23795                                  	; 14/08/2023
 23796 000016C4 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23797 000016C7 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 23798 000016CA 58                      	pop	ax			;AN000;
 23799 000016CB F8                      	clc				;AN000;
 23800                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23801 000016CC C3                      	retn				;AN000;
 23802                                  ;ELSE					;AN000;(of IF SwSW)
 23803                                  ;	stc				;AN000; this logic works when the SwSW
 23804                                  ;	retn				;AN000; is reset.
 23805                                  
 23806                                  ;***********************************************************************
 23807                                  ; _$P_Fill_Result
 23808                                  ;
 23809                                  ; Function: Fill the result buffer
 23810                                  ;
 23811                                  ; Input:    AH = Item tag
 23812                                  ;	    AL = type
 23813                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23814                                  ;		  AL = 2: DX has index(offset) into value list
 23815                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23816                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23817                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23818                                  ;			  amd CH has hundredths
 23819                                  ;		  AL = else: cs:SI points to returned string buffer
 23820                                  ;	    ES:BX -> CONTROL block
 23821                                  ;
 23822                                  ; Output:   None
 23823                                  ;
 23824                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23825                                  ;
 23826                                  ; Vars: _$P_DX(W)
 23827                                  ;***********************************************************************
 23828                                  
 23829                                  _$P_Fill_Result:
 23830 000016CD 57                      	push	di			;AN000;
 23831 000016CE 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23832                                  					;AN000; di points to result buffer
 23833 000016D2 2E893E[1B14]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23834                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23835                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23836                                  	; 07/09/2023
 23837                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 23838 000016D7 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 23839                                  
 23840 000016DA 50                      	push	ax			;AN000;
 23841 000016DB 2EA1[2A14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23842 000016DF 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23843                                  					;AN000;   then set it to the result
 23844 000016E3 58                      	pop	ax			;AN000;
 23845                                  _$P_RLT04:				;AN000;
 23846 000016E4 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23847 000016E6 750A                    	jne	short _$P_RLT00		;AN000;
 23848                                  
 23849                                  _$P_RLT02:				;AN000;
 23850 000016E8 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23851 000016EC 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23852 000016F0 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23853                                  
 23854                                  _$P_RLT00:				;AN000;
 23855 000016F2 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23856 000016F4 7506                    	jne	short _$P_RLT01		;AN000;
 23857                                  
 23858 000016F6 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 23859                                  					;AN000; then store list index
 23860 000016FA EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23861                                  
 23862                                  _$P_RLT01:				;AN000;
 23863 000016FC 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23864 000016FE 74E8                    	je	short _$P_RLT02		;AN000;
 23865                                  
 23866 00001700 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23867 00001702 74E4                    	je	short _$P_RLT02		;AN000;
 23868                                  
 23869 00001704 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23870 00001706 7506                    	jne	short _$P_RLT03		;AN000;
 23871                                  
 23872 00001708 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23873 0000170C EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23874                                  
 23875                                  _$P_RLT03:				;AN000;
 23876 0000170E 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23877 00001710 750F                    	jne	short _$P_RLT05		;AN000;
 23878                                  
 23879 00001712 2EA1[2414]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23880 00001716 40                      	inc	ax			;AN000; skip left Parentheses
 23881 00001717 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23882 0000171B 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23883 0000171F EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23884                                  
 23885                                  _$P_RLT05:				;AN000;
 23886                                  ;------------------------  AL = 3, 5, or 9
 23887 00001721 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23888                                  					;AN000; store offset of STRING_BUF
 23889 00001725 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23890                                  					;AN031; store segment of STRING_BUF
 23891 00001729 50                      	push	ax			;AN000;
 23892 0000172A 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23893                                  					;AN000; need CAPS by file table?
 23894 0000172F 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23895                                  
 23896 00001731 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23897 00001733 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23898                                  
 23899                                  _$P_RLT_CAP00:				;AN000;
 23900 00001735 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23901                                  					;AN000; need CAPS by char table ?
 23902 0000173A 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23903                                  
 23904 0000173C B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23905                                  _$P_RLT_CAP02:				;AN000;
 23906 0000173E E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23907                                  _$P_RLT_CAP01:				;AN000;
 23908 00001741 58                      	pop	ax			;AN000;
 23909 00001742 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23910                                  					;AN000; removing colon at end ?
 23911 00001747 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23912                                  
 23913 00001749 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23914                                  _$P_RLT_Exit:				;AN000;
 23915 0000174C 5F                      	pop	di			;AN000;
 23916 0000174D C3                      	retn				;AN000;
 23917                                  
 23918                                  ;***********************************************************************
 23919                                  ; _$P_Check_Match_Flags
 23920                                  ;
 23921                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23922                                  ;	     result buffer
 23923                                  ;
 23924                                  ;	    Check for types in this order:
 23925                                  ;		Complex
 23926                                  ;		Date
 23927                                  ;		Time
 23928                                  ;		Drive
 23929                                  ;		Filespec
 23930                                  ;		Quoted String
 23931                                  ;		Simple String
 23932                                  ;
 23933                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23934                                  ;	     ES:BX -> CONTROL block
 23935                                  ;
 23936                                  ; Output:    None
 23937                                  ;
 23938                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23939                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23940                                  ;	     _$P_Drive_Format
 23941                                  ;***********************************************************************
 23942                                  
 23943                                  	; 25/10/2022 - Retro DOS v4.0
 23944                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23945                                  
 23946                                  	; 12/12/2022
 23947                                  _$P_Check_Match_Flags:
 23948 0000174E 2EC606[BA14]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23949                                  					;AN033;AC034;; clear filespec error flag.
 23950 00001754 50                      	push	ax			;AN000;
 23951                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23952 00001755 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23953 00001758 09C0                    	or	ax,ax			;AC035; test ax for zero
 23954 0000175A 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 23955 0000175C 50                      	push	ax			;AN000; (tm12)
 23956 0000175D 53                      	push	bx			;AN000; (tm12)
 23957 0000175E 52                      	push	dx			;AN000; (tm12)
 23958 0000175F 57                      	push	di			;AN000; (tm12)
 23959 00001760 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23960                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 23961                                  	;mov	al,_$P_String		;AN000; (tm12)
 23962                                  	; 14/08/2023
 23963 00001767 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23964 0000176A E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23965 0000176D 5F                      	pop	di			;AN000; (tm12)
 23966 0000176E 5A                      	pop	dx			;AN000; (tm12)
 23967 0000176F 5B                      	pop	bx			;AN000; (tm12)
 23968 00001770 58                      	pop	ax			;AN000; (tm12)
 23969                                  	; 12/12/2022
 23970                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23971                                  	; 12/12/2022
 23972                                  ;_$P_Mat: 				;AN000; (tm12)
 23973                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23974                                  _$P_Bridge:
 23975 00001771 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23976                                  	
 23977                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23978                                  	; (SYSINIT:19F9h)
 23979                                  	; 12/12/2022
 23980                                  	;nop	; db 90h
 23981                                  
 23982                                  ; 12/12/2022
 23983                                  _$P_Mat:
 23984                                  _$P_Match03:				;AN000;
 23985                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 23986                                  	; 14/08/2023
 23987 00001773 F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 23988 00001776 7412                    	jz	short _$P_Match04	;AN000;
 23989                                  
 23990 00001778 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23991 0000177F E81E01                  	call	_$P_Value		;AN000; do process
 23992 00001782 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23993 00001788 7557                    	jne	short _$P_Match_Exit	;AN000;
 23994                                  _$P_Match04:				;AN000;
 23995                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 23996                                  	; 14/08/2023
 23997 0000178A F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 23998 0000178D 7412                    	jz	short _$P_Match05	;AN000;
 23999                                  
 24000 0000178F 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24001 00001796 E8E300                  	call	_$P_SValue		;AN000; do process
 24002 00001799 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24003 0000179F 7540                    	jne	short _$P_Match_Exit	;AN000;
 24004                                  _$P_Match05:				;AN000;
 24005                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 24006                                  	; 14/08/2023
 24007 000017A1 F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 24008 000017A4 7415                    	jz	short _$P_Match06	;AN000;
 24009                                  
 24010 000017A6 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24011 000017AD E8FB02                  	call	_$P_File_Format		;AN000; 1st, call file format
 24012 000017B0 E87B03                  	call	_$P_Drive_Format	;AN000; check drive format, next
 24013 000017B3 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24014 000017B9 7526                    	jne	short _$P_Match_Exit	;AN000;
 24015                                  _$P_Match06:				;AN000;
 24016                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 24017                                  	; 14/08/2023
 24018 000017BB F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24019 000017BE 7412                    	jz	short _$P_Match07	;AN000;
 24020                                  
 24021 000017C0 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24022 000017C7 E8E102                  	call	_$P_File_Format		;AN000; do process
 24023 000017CA 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24024 000017D0 750F                    	jne	short _$P_Match_Exit	;AN000;
 24025                                  _$P_Match07:				;AN000;
 24026                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 24027                                  	; 14/08/2023
 24028 000017D2 F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 24029 000017D5 740A                    	jz	short _$P_Match09	;AN000;
 24030                                  
 24031 000017D7 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24032 000017DE E8C301                  	call	_$P_Simple_String	;AN000; do process
 24033                                  _$P_Match09:				;AN000;
 24034                                  _$P_Match_Exit:				;AN000;
 24035 000017E1 2E833E[BA14]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 24036 000017E7 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 24037 000017E9 2E833E[1714]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 24038 000017EF 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 24039 000017F1 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 24040                                  _$P_Match2_Exit: 			;AN033;
 24041 000017F8 58                      	pop	ax			;AN000;
 24042 000017F9 C3                      	retn				;AN000;
 24043                                  
 24044                                  ;***********************************************************************
 24045                                  ; _$P_Remove_Colon;
 24046                                  ;
 24047                                  ; Function: Remove colon at end
 24048                                  ;
 24049                                  ; Input:    cs:SI points to string buffer to be examineed
 24050                                  ;
 24051                                  ; Output:   None
 24052                                  ;
 24053                                  ; Use:	_$P_Chk_DBCS
 24054                                  ;***********************************************************************
 24055                                  
 24056                                  _$P_Remove_Colon:
 24057 000017FA 50                      	push	ax			;AN000;
 24058 000017FB 56                      	push	si			;AN000;
 24059                                  _$P_RCOL_Loop:				;AN000;
 24060 000017FC 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 24061 000017FF 08C0                    	or	al,al			;AN000; end of string ?
 24062 00001801 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 24063                                  
 24064 00001803 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 24065 00001805 750D                    	jne	short _$P_RCOL00	;AN000;
 24066                                  
 24067 00001807 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 24068 0000180C 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 24069                                  
 24070 0000180E 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 24071 00001812 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 24072                                  
 24073                                  _$P_RCOL00:				;AN000;
 24074 00001814 E81704                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 24075 00001817 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 24076                                  
 24077 00001819 46                      	inc	si			;AN000; if yes, skip trailing byte
 24078                                  _$P_RCOL01:				;AN000;
 24079 0000181A 46                      	inc	si			;AN000; si points to next byte
 24080 0000181B EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 24081                                  
 24082                                  _$P_RCOL_Exit:				;AN000;
 24083 0000181D 5E                      	pop	si			;AN000;
 24084 0000181E 58                      	pop	ax			;AN000;
 24085 0000181F C3                      	retn				;AN000;
 24086                                  
 24087                                  ;***********************************************************************
 24088                                  ; _$P_Do_CAPS_String;
 24089                                  ;
 24090                                  ; Function: Perform capitalization along with the file case map table
 24091                                  ;	    or character case map table.
 24092                                  ;
 24093                                  ; Input:    AL = 2 : Use character table
 24094                                  ;	    AL = 4 : Use file table
 24095                                  ;	    cs:SI points to string buffer to be capitalized
 24096                                  ;
 24097                                  ; Output:   None
 24098                                  ;
 24099                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 24100                                  ;***********************************************************************
 24101                                  
 24102                                  _$P_Do_CAPS_String:
 24103 00001820 56                      	push	si			;AN000;
 24104 00001821 52                      	push	dx			;AN000;
 24105 00001822 88C2                    	mov	dl,al			;AN000; save info id
 24106                                  
 24107                                  _$P_DCS_Loop:				;AN000;
 24108 00001824 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 24109 00001827 E80404                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 24110 0000182A 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 24111                                  
 24112 0000182C 08C0                    	or	al,al			;AN000; end of string ?
 24113 0000182E 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 24114                                  
 24115 00001830 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 24116 00001833 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 24117 00001836 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 24118                                  _$P_DCS00:				;AN000;
 24119 00001838 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 24120                                  _$P_DCS01:				;AN000;
 24121 00001839 46                      	inc	si			;AN000; si point to next byte
 24122 0000183A EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 24123                                  _$P_DCS_Exit:				;AN000;
 24124 0000183C 5A                      	pop	dx			;AN000;
 24125 0000183D 5E                      	pop	si			;AN000;
 24126 0000183E C3                      	retn
 24127                                  
 24128                                  ;***********************************************************************
 24129                                  ; _$P_Do_CAPS_Char;
 24130                                  ;
 24131                                  ; Function: Perform capitalization along with the file case map table
 24132                                  ;	    or character case map table.
 24133                                  ;
 24134                                  ; Input:    DL = 2 : Use character table
 24135                                  ;	    DL = 4 : Use file table
 24136                                  ;	    AL = character to be capitalized
 24137                                  ;
 24138                                  ; Output:   None
 24139                                  ;
 24140                                  ; Use:	INT 21h /w AH=65h
 24141                                  ;***********************************************************************
 24142                                  
 24143                                  _$P_Do_CAPS_Char:
 24144 0000183F 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 24145 00001841 730B                    	jae	short _$P_DCC_Go	;AN000;
 24146                                  
 24147 00001843 3C61                    	cmp	al,"a"                  ;AN000; if no,
 24148 00001845 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 24149                                  
 24150 00001847 3C7A                    	cmp	al,"z"                  ;AN000;
 24151 00001849 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 24152                                  
 24153 0000184B 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 24154                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 24155                                  	; 14/08/2023
 24156 0000184D C3                      	retn
 24157                                  
 24158                                  _$P_DCC_Go:				;AN000;
 24159 0000184E 53                      	push	bx			;AN000;
 24160 0000184F 06                      	push	es			;AN000;
 24161 00001850 57                      	push	di			;AN000;
 24162                                  
 24163                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 24164                                  	;lea	di,[_$P_Char_CAP_Ptr]
 24165                                  	; 07/09/2023
 24166 00001851 BF[AC14]                	mov	di,_$P_Char_CAP_Ptr
 24167                                  _$P_DCC00:				;AN000;
 24168 00001854 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 24169 00001857 7415                    	je	short _$P_DCC01		;AN000; if no,
 24170                                  
 24171                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 24172                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 24173                                  ; call, regardless of what base register is currently be defined as cs.
 24174                                  
 24175 00001859 50                      	push	ax			;AN000; get CAPS table thru DOS call
 24176 0000185A 51                      	push	cx			;AN000;
 24177 0000185B 52                      	push	dx			;AN000;
 24178                                  
 24179 0000185C 0E                      	push	cs			;AC036; pass current base seg into
 24180                                  					;(Note: this used to push CS.  BUG...
 24181 0000185D 07                      	pop	es			;AN000;   ES reg, required for
 24182                                  					;get extended country information
 24183                                  	;mov	al,dl ; function	;AN000; upper case table
 24184                                  	; 14/08/2023
 24185 0000185E 92                      	xchg	ax,dx
 24186 0000185F B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 24187 00001861 BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 24188 00001864 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 24189                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 24190                                  	; 14/08/2023
 24191 00001867 89DA                    	mov	dx,bx ; 0FFFFh
 24192                                  					;DI already set to point to buffer
 24193 00001869 CD21                    	int	21h			;AN000; es:di point to buffer that
 24194                                  					;now has been filled in with info
 24195 0000186B 5A                      	pop	dx			;AN000;
 24196 0000186C 59                      	pop	cx			;AN000;
 24197 0000186D 58                      	pop	ax			;AN000;
 24198                                  
 24199                                  _$P_DCC01:				;AN000;
 24200                                  
 24201                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 24202                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 24203                                  ; regardless of which base reg is currently the cs reg.
 24204                                  
 24205                                  	; 14/08/2023
 24206                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 24207                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 24208 0000186E 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 24209 00001872 43                      	inc	bx			;AC035; add '2' to
 24210 00001873 43                      	inc	bx			;AC035;  BX reg
 24211                                  					;AN000; skip length field
 24212 00001874 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 24213                                  	;xlat	es:[bx] 		;AN000; perform case map
 24214 00001876 26                      	es
 24215 00001877 D7                      	xlat
 24216 00001878 5F                      	pop	di			;AN000;
 24217 00001879 07                      	pop	es			;AN000;
 24218 0000187A 5B                      	pop	bx			;AN000;
 24219                                  _$P_CAPS_Ret:				;AN000;
 24220 0000187B C3                      	retn				;AN000;
 24221                                  
 24222                                  ;***********************************************************************
 24223                                  ; _$P_Value / _$P_SValue
 24224                                  ;
 24225                                  ; Function:  Make 32bit value from cs:SI and see value list
 24226                                  ;	     and make result buffer.
 24227                                  ;	     _$P_SValue is an entry point for the signed value
 24228                                  ;	     and this will simply call _$P_Value after the handling
 24229                                  ;	     of the sign character, "+" or "-"
 24230                                  ;
 24231                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24232                                  ;	     ES:BX -> CONTROL block
 24233                                  ;
 24234                                  ; Output:    None
 24235                                  ;
 24236                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 24237                                  ;
 24238                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 24239                                  ;***********************************************************************
 24240                                  
 24241                                  	; 26/10/2022 - Retro DOS v4.0
 24242                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 24243                                  
 24244                                  _$P_SValue:				;AN000; when signed value here
 24245 0000187C 50                      	push	ax			;AN000;
 24246 0000187D 2E800E[2314]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 24247 00001883 2E8026[2314]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 24248 00001889 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 24249 0000188C 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 24250 0000188E 740A                    	je	short _$P_SVal00	;AN000;
 24251                                  
 24252 00001890 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 24253 00001892 7507                    	jne	short _$P_Sval01	;AN000; else
 24254                                  
 24255 00001894 2E800E[2314]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 24256                                  _$P_SVal00:				;AN000;
 24257 0000189A 46                      	inc	si			;AN000; skip sign char
 24258                                  _$P_Sval01:				;AN000;
 24259 0000189B E80200                  	call	_$P_Value		;AN000; and process value
 24260 0000189E 58                      	pop	ax			;AN000;
 24261 0000189F C3                      	retn
 24262                                  
 24263                                  ;***********************************************************************
 24264                                  
 24265                                  	; 26/10/2022
 24266                                  _$P_Value:				;AN000;
 24267 000018A0 50                      	push	ax			;AN000;
 24268 000018A1 51                      	push	cx			;AN000;
 24269 000018A2 52                      	push	dx			;AN000;
 24270 000018A3 56                      	push	si			;AN000;
 24271 000018A4 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 24272 000018A6 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 24273 000018A8 53                      	push	bx			;AN000; save control pointer
 24274                                  _$P_Value_Loop:				;AN000;
 24275 000018A9 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 24276 000018AC 08C0                    	or	al,al			;AN000; end of line ?
 24277 000018AE 7442                    	jz	short _$P_Value00	;AN000;
 24278                                  
 24279 000018B0 E8E600                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 24280 000018B3 7239                    	jc	short _$P_Value_Err0	;AN000;
 24281                                  
 24282 000018B5 30E4                    	xor	ah,ah			;AN000;
 24283 000018B7 89C5                    	mov	bp,ax			;AN000; save binary number
 24284 000018B9 D1E2                    	shl	dx,1			;AN000; to have 2*x
 24285 000018BB D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 24286 000018BD E8C700                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24287 000018C0 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24288                                  
 24289 000018C2 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 24290 000018C4 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 24291 000018C6 D1E2                    	shl	dx,1			;AN000; to have 4*x
 24292 000018C8 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 24293 000018CA E8BA00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24294 000018CD 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24295                                  
 24296 000018CF D1E2                    	shl	dx,1			;AN000; to have 8*x
 24297 000018D1 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 24298 000018D3 E8B100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24299 000018D6 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24300                                  
 24301 000018D8 01DA                    	add	dx,bx			;AN000; now have 10*x
 24302 000018DA 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 24303 000018DC E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24304 000018DF 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24305                                  
 24306 000018E1 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 24307 000018E3 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 24308 000018E6 E89E00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24309 000018E9 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24310                                  
 24311 000018EB 46                      	inc	si			;AN000; update pointer
 24312 000018EC EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 24313                                  ;
 24314                                  _$P_Value_Err0:				;AN000;
 24315 000018EE 5B                      	pop	bx			;AN000;
 24316 000018EF E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 24317                                  ;
 24318                                  _$P_Value00:				;AN000;
 24319 000018F2 5B                      	pop	bx			;AN000; restore control pointer
 24320 000018F3 2EF606[2314]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 24321 000018F9 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 24322                                  
 24323 000018FB F7D1                    	not	cx			;AN000; +
 24324 000018FD F7D2                    	not	dx			;AN000; |- Make 2's complement
 24325 000018FF 83C201                  	add	dx,1			;AN000; |
 24326 00001902 83D100                  	adc	cx,0			;AN000; +
 24327                                  
 24328                                  _$P_Value01:				;AN000; / nval = 0
 24329 00001905 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 24330 00001909 268A04                  	mov	al,[es:si]		;AN000; get nval
 24331                                  	; 07/09/2023
 24332                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 24333                                  	;;*jne	short _$P_Value02	;AN000;
 24334                                  	;;* 07/07/2023
 24335                                  	;je	short _$P_Value05
 24336                                  	; 07/09/2023
 24337 0000190C 08C0                    	or	al,al
 24338 0000190E 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 24339                                  
 24340                                  	;mov	al,_$P_Number		;AN000; Set type
 24341                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24342                                  	; 07/07/2023
 24343                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24344                                  	;*jmp	short _$P_Value_Exit	;AN000;
 24345                                  
 24346                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 24347                                  	; (SYSINIT:1BA5h)
 24348                                  	; 12/12/2022
 24349                                  	;nop	; db  90h
 24350                                  
 24351                                  _$P_Value02:				;AN000; / nval = 1
 24352                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 24353                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 24354                                  ;(tm07) jne	short _$P_Value03	;AN000;
 24355                                  
 24356 00001910 46                      	inc	si			;AN000;
 24357 00001911 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 24358                                  	
 24359                                  	; 07/09/2023
 24360                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 24361                                  	;je	short _$P_Value03	;AN000; (tm07)
 24362 00001914 08C0                    	or	al,al
 24363 00001916 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 24364                                  
 24365 00001918 46                      	inc	si			;AN000; si points to 1st item_tag
 24366                                  _$P_Val02_Loop:				;AN000;
 24367 00001919 2EF606[2314]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 24368 0000191F 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 24369                                  
 24370 00001921 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 24371 00001925 7234                    	jb	short _$P_Val02_Next	;AN000;
 24372 00001927 7706                    	ja	short _$P_Val_In	;AN000;
 24373                                  
 24374 00001929 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 24375 0000192D 722C                    	jb	short _$P_Val02_Next	;AN000;
 24376                                  
 24377                                  _$P_Val_In:				;AN000;
 24378 0000192F 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 24379 00001933 7726                    	ja	short _$P_Val02_Next	;AN000;
 24380 00001935 7237                    	jb	short _$P_Val_Found	;AN000;
 24381                                  
 24382 00001937 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 24383 0000193B 771E                    	ja	short _$P_Val02_Next	;AN000;
 24384                                  
 24385 0000193D EB2F                    	jmp	short _$P_Val_Found	;AN000;
 24386                                  
 24387                                  _$P_Val02_Sign:				;AN000;
 24388 0000193F 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 24389 00001943 7C16                    	jl	short _$P_Val02_Next	;AN000;
 24390 00001945 7F06                    	jg	short _$P_SVal_In	;AN000;
 24391                                  
 24392 00001947 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 24393 0000194B 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 24394                                  
 24395                                  _$P_SVal_In:				;AN000;
 24396 0000194D 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 24397 00001951 7F08                    	jg	short _$P_Val02_Next	;AN000;
 24398                                  
 24399 00001953 7C19                    	jl	short _$P_Val_Found	;AN000;
 24400                                  
 24401 00001955 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 24402                                  	;jg	short _$P_Val02_Next	;AN000;
 24403                                  	;jmp	short _$P_Val_Found	;AN000;
 24404                                  	; 14/08/2023
 24405 00001959 7E13                    	jng	short _$P_Val_Found
 24406                                  
 24407                                  _$P_Val02_Next:				;AN000;
 24408 0000195B 83C609                  	add	si,_$P_Len_Range 	;AN000;
 24409 0000195E FEC8                    	dec	al			;AN000; loop nrng times in AL
 24410 00001960 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 24411                                  					; / Not found
 24412 00001962 2EC706[1714]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 24413                                  	;mov	al,_$P_Number		;AN000;
 24414                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24415                                  _$P_Value05:		;* 14/08/2023
 24416                                  	; 14/08/2023
 24417 00001969 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24418 0000196C EB11                    	jmp	short _$P_Value_Exit	;AN000;
 24419                                  
 24420                                  _$P_Val_Found:				;AN000;
 24421 0000196E B001                    	mov	al,_$P_Number		;AN000;
 24422 00001970 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 24423 00001973 EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 24424                                  
 24425                                  _$P_Value03:				;AN000; / nval = 2
 24426                                  
 24427                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 24428                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 24429                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 24430                                  ;(tm07) inc	si			;AN000;
 24431                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 24432                                  ;	mov	ah,$P_Len_Range 	;AN000;
 24433                                  ;	mul	ah			;AN000;  Skip nrng field
 24434                                  ;	inc	ax			;AN000;
 24435                                  ;	add	si,ax			;AN000; si points to nnval
 24436                                  ;	mov	al,es:[si]		;AN000; get nnval
 24437                                  ;	inc	si			;AN000; si points to 1st item_tag
 24438                                  ;$P_Val03_Loop:				;AN000;
 24439                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 24440                                  ;	jne	$P_Val03_Next		;AN000;
 24441                                  ;
 24442                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 24443                                  ;	je	$P_Val_Found		;AN000;
 24444                                  ;
 24445                                  ;$P_Val03_Next:				;AN000;
 24446                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 24447                                  ;	dec	al			;AN000; loop nval times in AL
 24448                                  ;	jne	$P_Val03_Loop		;AN000;
 24449                                  ;					;AN000; / Not found
 24450                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 24451                                  ;	mov	al,$P_Number		;AN000;
 24452                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 24453                                  ;	jmp	short $P_Value_Exit	;AN000;
 24454                                  ;
 24455                                  ;ENDIF					;AN000;(of Val2SW)
 24456                                  ;$P_Value04:
 24457                                  
 24458                                  _$P_Value_Err:				;AN000;
 24459 00001975 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24460                                  	;mov	al,_$P_String		;AN000; Set type
 24461                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24462                                  	; 14/08/2023
 24463 0000197C B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24464                                  _$P_Value_Exit:				;AN000;
 24465 0000197F E84BFD                  	call	_$P_Fill_Result		;AN000;
 24466 00001982 5E                      	pop	si			;AN000;
 24467 00001983 5A                      	pop	dx			;AN000;
 24468 00001984 59                      	pop	cx			;AN000;
 24469 00001985 58                      	pop	ax			;AN000;
 24470 00001986 C3                      	retn				;AN000;
 24471                                  
 24472                                  ; 28/03/2019 - Retro DOS v4.0
 24473                                  
 24474                                  ;***********************************************************************
 24475                                  ; _$P_Check_OVF
 24476                                  ;
 24477                                  ; Function:  Check if overflow is occurred with consideration of
 24478                                  ;	     signed or un-signed numeric value
 24479                                  ;
 24480                                  ; Input:     Flag register
 24481                                  ;
 24482                                  ; Output:    CY = 1  :	Overflow
 24483                                  ;
 24484                                  ; Vars:     _$P_Flags(R)
 24485                                  ;***********************************************************************
 24486                                  
 24487                                  	; 26/10/2022
 24488                                  _$P_Check_OVF:
 24489 00001987 9C                      	pushf				;AN000;
 24490 00001988 2EF606[2314]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 24491 0000198E 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 24492                                  
 24493 00001990 9D                      	popf				;AN000; by the CY bit
 24494 00001991 C3                      	retn				;AN000;
 24495                                  
 24496                                  _$P_COVF:				;AN000;
 24497 00001992 9D                      	popf				;AN000; else,
 24498 00001993 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 24499                                  
 24500 00001995 F8                      	clc				;AN000; indicate it with CY bit
 24501 00001996 C3                      	retn				;AN000; CY=0 means no overflow
 24502                                  
 24503                                  _$P_COVF00:				;AN000;
 24504                                  _$P_0099Err: ; 14/08/2023
 24505 00001997 F9                      	stc				;AN000; and CY=1 means overflow
 24506                                  _$P_0099Err2: ; 14/08/2023
 24507 00001998 C3                      	retn				;AN000;
 24508                                  
 24509                                  ;***********************************************************************
 24510                                  ; _$P_0099;
 24511                                  ;
 24512                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 24513                                  ;
 24514                                  ; Input:     AL = character code
 24515                                  ;
 24516                                  ; Output:    CY = 1 : AL is not number
 24517                                  ;	     CY = 0 : AL contains binary value
 24518                                  ;***********************************************************************
 24519                                  
 24520                                  _$P_0099:
 24521 00001999 3C30                    	cmp	al,"0"                  ;AN000;
 24522                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24523                                  	; 12/12/2022
 24524 0000199B 72FB                    	jb	short _$P_0099Err2  ; cf=1
 24525                                  
 24526 0000199D 3C39                    	cmp	al,"9"                  ;AN000;
 24527 0000199F 77F6                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24528                                  
 24529 000019A1 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 24530                                  	; 12/12/2022
 24531                                  	; cf=0	
 24532                                  	;clc				;AN000; indicate no error
 24533 000019A3 C3                      	retn				;AN000;
 24534                                  
 24535                                  	; 14/08/2023
 24536                                  ;_$P_0099Err:				;AN000;
 24537                                  ;	stc				;AN000; indicate error
 24538                                  ;_$P_0099Err2: ; 12/12/2022	
 24539                                  ;	retn				;AN000;
 24540                                  
 24541                                  ;***********************************************************************
 24542                                  ; _$P_Simple_String
 24543                                  ;
 24544                                  ; Function:  See value list for the simple string
 24545                                  ;	     and make result buffer.
 24546                                  ;
 24547                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24548                                  ;	     ES:BX -> CONTROL block
 24549                                  ;
 24550                                  ; Output:    None
 24551                                  ;
 24552                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 24553                                  ;
 24554                                  ; Vars: _$P_RC(W)
 24555                                  ;***********************************************************************
 24556                                  
 24557                                  _$P_Simple_String:
 24558 000019A4 50                      	push	ax			;AN000;
 24559 000019A5 53                      	push	bx			;AN000;
 24560 000019A6 52                      	push	dx			;AN000;
 24561 000019A7 57                      	push	di			;AN000;
 24562 000019A8 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 24563 000019AC 268A05                  	mov	al,[es:di]		;AN000; get nval
 24564 000019AF 08C0                    	or	al,al			;AN000; no value list ?
 24565 000019B1 7504                    	jnz	short _$P_Sim00		;AN000; then
 24566                                  
 24567 000019B3 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24568 000019B5 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 24569                                  
 24570                                  _$P_Sim00:				;AN000;
 24571                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 24572 000019B7 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 24573 000019B9 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 24574                                  
 24575 000019BB 47                      	inc	di			;AN000;
 24576 000019BC 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 24577 000019BF B409                    	mov	ah,_$P_Len_Range 	;AN000;
 24578 000019C1 F6E4                    	mul	ah			;AN000; Skip nrng field
 24579 000019C3 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 24580 000019C4 01C7                    	add	di,ax			;AN000; di points to nnval
 24581 000019C6 268A05                  	mov	al,[es:di]		;AN000; get nnval
 24582 000019C9 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 24583 000019CB F6E4                    	mul	ah			;AN000; Skip nnval field
 24584 000019CD 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 24585 000019CE 01C7                    	add	di,ax			;AN000; di points to nstrval
 24586 000019D0 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 24587 000019D3 47                      	inc	di			;AC035; add '2' to
 24588 000019D4 47                      	inc	di			;AC035;  DI reg
 24589                                  					;AN000; di points to 1st string in list
 24590                                  _$P_Sim_Loop:				;AN000;
 24591 000019D5 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 24592 000019D8 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 24593 000019DB 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 24594                                  
 24595 000019DD 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 24596 000019E0 FEC8                    	dec	al			;AN000; loop nstval times in AL
 24597 000019E2 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 24598                                  					;AN000; / Not found
 24599 000019E4 2EC706[1714]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 24600 000019EB B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24601 000019ED EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 24602                                  
 24603                                  _$P_Sim_Found:				;AN000;
 24604 000019EF 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 24605 000019F3 B002                    	mov	al,_$P_List_Idx		;AN000;
 24606 000019F5 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 24607 000019F8 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 24608                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 24609                                  _$P_Sim01:				;AN000;
 24610 000019FA 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24611 00001A01 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24612                                  _$P_Sim_Exit:				;AN000;
 24613 00001A03 B003                    	mov	al,_$P_String		;AN000; Set type
 24614                                  _$P_Sim_Exit0:				;AN000;
 24615 00001A05 E8C5FC                  	call	_$P_Fill_Result		;AN000;
 24616 00001A08 5F                      	pop	di			;AN000;
 24617 00001A09 5A                      	pop	dx			;AN000;
 24618 00001A0A 5B                      	pop	bx			;AN000;
 24619 00001A0B 58                      	pop	ax			;AN000;
 24620 00001A0C C3                      	retn				;AN000;
 24621                                  
 24622                                  ;***********************************************************************
 24623                                  ; _$P_String_Comp:
 24624                                  ;
 24625                                  ; Function:  Compare two string
 24626                                  ;
 24627                                  ; Input:     cs:SI -> 1st string
 24628                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 24629                                  ;	     ES:BX -> CONTROL block
 24630                                  ;
 24631                                  ; Output:    CY = 1 if not match
 24632                                  ;
 24633                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 24634                                  ;
 24635                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 24636                                  ;***********************************************************************
 24637                                  
 24638                                  _$P_String_Comp:
 24639 00001A0D 50                      	push	ax			;AN000;
 24640 00001A0E 55                      	push	bp			;AN000;
 24641 00001A0F 52                      	push	dx			;AN000;
 24642 00001A10 56                      	push	si			;AN000;
 24643 00001A11 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 24644                                  _$P_SCOM_Loop:				;AN000;
 24645 00001A13 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 24646 00001A16 E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 24647 00001A19 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 24648                                  
 24649 00001A1B E821FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 24650                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 24651 00001A1E 2EF606[2314]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 24652 00001A24 740D                    	jz	short _$P_SCOM04	;AN000;
 24653                                  
 24654 00001A26 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 24655 00001A28 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 24656                                  
 24657 00001A2A 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 24658 00001A2F 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 24659                                  
 24660 00001A31 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 24661                                  
 24662                                  _$P_SCOM04:				;AN000;
 24663 00001A33 2EF606[2314]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 24664 00001A39 740E                    	jz	short _$P_SCOM03	;AN000;
 24665                                  
 24666 00001A3B 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 24667 00001A3D 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 24668                                  
 24669                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24670                                  	;cmp	byte [es:bp+0],_$P_NULL
 24671                                  	; 11/12/2022
 24672 00001A3F 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 24673 00001A44 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 24674                                  
 24675                                  _$P_SCOM05:				;AN000;   found a match
 24676 00001A46 46                      	inc	si			;AN000; si points to just after "=" or ":"
 24677 00001A47 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 24678                                  
 24679                                  _$P_SCOM03:				;AN000;
 24680                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 24681                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24682                                  	;cmp	al,[es:bp+0]
 24683                                  	; 11/12/2022
 24684 00001A49 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 24685 00001A4D 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 24686                                  
 24687 00001A4F 08C0                    	or	al,al			;AN000; end of line
 24688 00001A51 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 24689                                  
 24690                                  	; 12/12/2022
 24691                                  	;inc	si			;AN000; update operand pointer
 24692                                  	;inc	bp			;AN000;    and synonym pointer
 24693                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24694 00001A53 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 24695                                  
 24696                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 24697                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24698                                  	;cmp	al,[es:bp+0]
 24699                                  	; 11/12/2022
 24700 00001A55 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 24701 00001A59 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 24702                                  
 24703 00001A5B 46                      	inc	si			;AN000; else, load next byte
 24704 00001A5C 2E8A04                  	mov	al,[cs:si]		;AN000; and
 24705 00001A5F 45                      	inc	bp			;AN000;
 24706                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24707                                  	;cmp	al,[es:bp+0]
 24708                                  	; 11/12/2022
 24709 00001A60 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 24710 00001A64 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 24711                                  
 24712                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24713                                  	; 12/12/2022
 24714                                  _$P_SCOM01:
 24715 00001A66 46                      	inc	si			;AN000; else update operand pointer
 24716 00001A67 45                      	inc	bp			;AN000; 		and synonym pointer
 24717                                  ;_$P_SCOM01:				;AN000;
 24718 00001A68 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 24719                                  
 24720                                  _$P_SCOM_Differ0:			;AN000;
 24721                                  ;IF SwSW				;AN000;(tm10)
 24722 00001A6A 2EF606[2314]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 24723 00001A70 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 24724                                  
 24725                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24726                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 24727                                  	; 12/12/2022
 24728 00001A72 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 24729 00001A77 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 24730                                  
 24731                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24732                                  	;cmp	byte [es:bp+0],_$P_NULL
 24733                                  	; 11/12/2022
 24734 00001A79 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 24735                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 24736 00001A7E 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 24737                                  
 24738                                  _$P_not_applicable:			;AN000;(tm10)
 24739                                  ;ENDIF					;AN000;(tm10)
 24740                                  
 24741                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24742                                  					;AN000; ignore colon option specified ?
 24743                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 24744                                  	; 12/12/2022
 24745 00001A80 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24746                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24747                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 24748 00001A84 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 24749                                  
 24750 00001A86 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 24751 00001A88 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 24752                                  
 24753                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24754                                  	;cmp	byte [es:bp+0],_$P_NULL
 24755                                  	; 11/12/2022
 24756 00001A8A 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 24757 00001A8F 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 24758                                  
 24759 00001A91 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 24760                                  
 24761                                  _$P_SCOM02:				;AN000;
 24762 00001A93 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 24763 00001A95 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 24764                                  
 24765                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24766                                  	;cmp	byte [es:bp+0],_$P_Colon
 24767                                  	; 11/12/2022
 24768 00001A97 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 24769 00001A9C 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 24770                                  
 24771                                  _$P_SCOM_Differ: 			;AN000;
 24772 00001A9E F9                      	stc				;AN000; indicate not found
 24773 00001A9F EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 24774                                  
 24775                                  _$P_SCOM_Same:				;AN000;
 24776                                  	; 12/12/2022
 24777                                  	; cf=0
 24778 00001AA1 2E8936[2614]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 24779                                  	; 12/12/2022
 24780                                  	;clc				;AN000; indicate found
 24781                                  _$P_SCOM_Exit:				;AN000;
 24782 00001AA6 5E                      	pop	si			;AN000;
 24783 00001AA7 5A                      	pop	dx			;AN000;
 24784 00001AA8 5D                      	pop	bp			;AN000;
 24785 00001AA9 58                      	pop	ax			;AN000;
 24786 00001AAA C3                      	retn
 24787                                  
 24788                                  ; 30/03/2019
 24789                                  
 24790                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24791                                  
 24792                                  ;***********************************************************************
 24793                                  ; _$P_File_Format;
 24794                                  ;
 24795                                  ; Function:  Check if the input string is valid file spec format.
 24796                                  ;	     And set the result buffer.
 24797                                  ;
 24798                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24799                                  ;	     ES:BX -> CONTROL block
 24800                                  ;
 24801                                  ; Output:    None
 24802                                  ;
 24803                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24804                                  ;
 24805                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24806                                  ;	_$P_SaveSI_Cmpx(R)
 24807                                  ;***********************************************************************
 24808                                  
 24809                                  _$P_File_Format:
 24810 00001AAB 50                      	push	ax			;AN000;
 24811 00001AAC 57                      	push	di			;AN000;
 24812 00001AAD 56                      	push	si			;AN000;
 24813 00001AAE 2E8B3E[2414]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24814                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24815 00001AB3 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24816 00001AB6 08C0                    	or	al,al			;AN000; end of line ?
 24817 00001AB8 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24818                                  
 24819 00001ABA E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24820 00001ABD 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24821                                  
 24822 00001ABF 2EC606[BA14]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24823                                  					;AN033;AC034;; set error flag- bad char.
 24824 00001AC5 5E                      	pop	si			;AN033;
 24825 00001AC6 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24826 00001ACA 5F                      	pop	di			;AN033;
 24827 00001ACB EB3E                    	jmp	short _$P_FileF02	;AN033;
 24828                                  
 24829                                  _$P_FileF_Err:				;AN000;
 24830 00001ACD 5E                      	pop	si			;AN000;
 24831 00001ACE 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24832 00001AD2 5F                      	pop	di			;AN000;
 24833                                  
 24834                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24835                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24836                                  	; 12/12/2022
 24837 00001AD3 26F60701                	test	byte [es:bx],_$P_Optional
 24838                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24839                                  	;test	word [es:bx],_$P_Optional
 24840 00001AD7 7532                    	jnz	short _$P_FileF02	;AN000;
 24841                                  
 24842 00001AD9 2EC706[1714]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24843 00001AE0 EB29                    	jmp	short _$P_FileF02	;AN000;
 24844                                  
 24845                                  _$P_FileF03:				;AN000;
 24846 00001AE2 58                      	pop	ax			;AN000; discard save si
 24847 00001AE3 56                      	push	si			;AN000; save new si
 24848                                  _$P_FileF_Loop1: 			;AN000;
 24849 00001AE4 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24850 00001AE7 08C0                    	or	al,al			;AN000; end of line ?
 24851 00001AE9 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24852                                  
 24853 00001AEB E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24854 00001AEE 740B                    	je	short _$P_FileF00	;AN000;
 24855                                  
 24856 00001AF0 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 24857 00001AF3 7302                    	jnc	short _$P_FileF01	;AN000;
 24858 00001AF5 47                      	inc	di			;AN000; if yes, skip next byte
 24859 00001AF6 46                      	inc	si			;AN000;
 24860                                  _$P_FileF01:				;AN000;
 24861 00001AF7 47                      	inc	di			;AN000;
 24862 00001AF8 46                      	inc	si			;AN000;
 24863 00001AF9 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24864                                  ;
 24865                                  _$P_FileF00:				;AN000;
 24866 00001AFB 2EA2[1D14]              	mov	[cs:_$P_Terminator],al	;AC034;
 24867 00001AFF 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24868 00001B03 47                      	inc	di			;AN000;
 24869 00001B04 2E893E[1914]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24870                                  _$P_FileF_RLT:				;AN000;
 24871 00001B09 5E                      	pop	si			;AN000;
 24872 00001B0A 5F                      	pop	di			;AN000;
 24873                                  _$P_FileF02:				;AN000;
 24874 00001B0B 58                      	pop	ax			;AN000; (tm14)
 24875                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 24876                                  	; 14/08/2023
 24877 00001B0C F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24878 00001B0F 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24879                                  
 24880 00001B11 50                      	push	ax			;AN000;  (tm14)
 24881                                  	;mov	ah,_$P_No_Tag		;AN000; set
 24882                                  	;mov	al,_$P_File_Spec 	;AN000; result
 24883                                  	; 14/08/2023
 24884 00001B12 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 24885                                  					      ; set result
 24886 00001B15 E8B5FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 24887 00001B18 58                      	pop	ax			;AN000;
 24888                                  
 24889                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24890 00001B19 C3                      	retn				;AN000;
 24891                                  
 24892                                  ;***********************************************************************
 24893                                  ; _$P_FileSp_Chk
 24894                                  ;
 24895                                  ; Function:  Check if the input byte is one of file special characters
 24896                                  ;
 24897                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24898                                  ;	     AL = character code to be examineed
 24899                                  ;
 24900                                  ; Output:    ZF = 1 , AL is one of special characters
 24901                                  ;***********************************************************************
 24902                                  
 24903                                  _$P_FileSp_Chk:
 24904 00001B1A 53                      	push	bx			;AN000;
 24905 00001B1B 51                      	push	cx			;AN000;
 24906                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24907                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 24908                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 24909                                  	; 07/09/2023
 24910 00001B1C BB[B114]                	mov	bx,_$P_FileSp_Char
 24911 00001B1F B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 24912                                  _$P_FileSp_Loop: 			;AN000;
 24913 00001B22 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24914 00001B25 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24915                                  
 24916 00001B27 43                      	inc	bx			;AN000;
 24917 00001B28 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24918                                  
 24919 00001B2A 41                      	inc	cx			;AN000; reset ZF
 24920                                  _$P_FileSp_Exit: 			;AN000;
 24921 00001B2B 59                      	pop	cx			;AN000;
 24922 00001B2C 5B                      	pop	bx			;AN000;
 24923 00001B2D C3                      	retn
 24924                                  
 24925                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24926                                  
 24927                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24928                                  
 24929                                  ;***********************************************************************
 24930                                  ; _$P_Drive_Format;
 24931                                  ;
 24932                                  ; Function:  Check if the input string is valid drive only format.
 24933                                  ;	     And set the result buffer.
 24934                                  ;
 24935                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24936                                  ;	     ES:BX -> CONTROL block
 24937                                  ;
 24938                                  ; Output:    None
 24939                                  ;
 24940                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24941                                  ;
 24942                                  ; Vars: _$P_RC(W)
 24943                                  ;***********************************************************************
 24944                                  
 24945                                  _$P_Drive_Format:
 24946 00001B2E 50                      	push	ax			;AN000;
 24947 00001B2F 52                      	push	dx			;AN000;
 24948 00001B30 2E8A04                  	mov	al,[cs:si]		;AN000;
 24949 00001B33 08C0                    	or	al,al			;AN000; if null string
 24950 00001B35 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24951                                  
 24952 00001B37 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24953 00001B3A 722A                    	jc	short _$P_Drv_Err	;AN000;
 24954                                  
 24955 00001B3C 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24956 00001B41 740D                    	je	short _$P_DrvF00	;AN000;
 24957                                  
 24958                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24959                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24960                                  	; 12/12/2022
 24961 00001B43 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24962                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24963                                  	;test	word [es:bx],_$P_Ig_Colon
 24964 00001B47 741D                    	jz	short _$P_Drv_Err	;AN000;
 24965                                  
 24966 00001B49 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24967 00001B4E 7516                    	jne	short _$P_Drv_Err	;AN000;
 24968                                  
 24969                                  _$P_DrvF00:				;AN000;
 24970 00001B50 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24971 00001B52 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24972 00001B54 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 24973                                  
 24974 00001B56 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24975 00001B58 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24976                                  
 24977 00001B5A 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24978 00001B5C 88C2                    	mov	dl,al			;AN000; set
 24979                                  	;mov	ah,_$P_No_Tag		;AN000; result
 24980                                  	;mov	al,_$P_Drive		;AN000; buffer
 24981                                  	; 08/07/2023
 24982 00001B5E B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 24983                                  					      ; set result buffer
 24984 00001B61 E869FB                  	call	_$P_Fill_Result		;AN000; to drive
 24985 00001B64 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24986                                  
 24987                                  _$P_Drv_Err:				;AN000;
 24988 00001B66 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24989                                  _$P_Drv_Exit:				;AN000;
 24990 00001B6D 5A                      	pop	dx			;AN000;
 24991 00001B6E 58                      	pop	ax			;AN000;
 24992 00001B6F C3                      	retn				;AN000;
 24993                                  
 24994                                  ;ENDIF					;AN000;(of DrvSW)
 24995                                  
 24996                                  ;***********************************************************************
 24997                                  ; _$P_Skip_Delim;
 24998                                  ;
 24999                                  ; Function: Skip delimiters specified in the PARMS list, white space
 25000                                  ;	    and comma.
 25001                                  ;
 25002                                  ; Input:    DS:SI -> Command String
 25003                                  ;	    ES:DI -> Parameter List
 25004                                  ;
 25005                                  ; Output:   CY = 1 if the end of line encounterd
 25006                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 25007                                  ;	    AL = Last examineed character
 25008                                  ;
 25009                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 25010                                  ;
 25011                                  ; Vars:     _$P_Flags(R)
 25012                                  ;***********************************************************************
 25013                                  
 25014                                  _$P_Skip_Delim:
 25015                                  _$P_Skip_Delim_Loop:			;AN000;
 25016 00001B70 AC                      	lodsb				;AN000;
 25017 00001B71 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 25018 00001B74 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 25019                                  
 25020 00001B76 E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 25021 00001B79 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 25022                                  
 25023 00001B7B 2EF606[2314]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 25024 00001B81 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 25025                                  
 25026 00001B83 2EF606[2314]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 25027                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 25028                                  	; 14/08/2023
 25029                                  	; cf=0
 25030 00001B89 7505                    	jnz	short _$P_Skip_Delim_Exit
 25031 00001B8B C3                      	retn
 25032                                  
 25033                                  	;dec	si			;AN000; backup si for next call (tm08)
 25034                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 25035                                  	; 12/12/2022
 25036                                  	; cf=0
 25037                                  	; 14/08/2023
 25038                                  	;jmp	short _$P_Skip_Delim_Exit
 25039                                  
 25040                                  _$P_Skip_Delim_CY:			;AN000;
 25041 00001B8C F9                      	stc				;AN000; indicate EOL
 25042 00001B8D EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 25043                                  
 25044                                  _$P_Skip_Delim_NCY:			;AN000;
 25045 00001B8F F8                      	clc				;AN000; indicate non delim
 25046                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 25047 00001B90 4E                      	dec	si			;AN000;  backup index pointer
 25048                                  	; 14/08/2023
 25049                                  	; 12/12/2022
 25050                                  ;_$P_Exit_At_Extra:	 ; cf=0
 25051 00001B91 C3                      	retn				;AN000;
 25052                                  
 25053                                  	; 12/12/2022
 25054                                  ;_$P_Exit_At_Extra:			;AN000;
 25055                                  	;clc				;AN000; indicate extra delim
 25056                                  	;retn				;AN000;
 25057                                  
 25058                                  ;***********************************************************************
 25059                                  ; _$P_Chk_EOL;
 25060                                  ;
 25061                                  ; Function: Check if AL is one of End of Line characters.
 25062                                  ;
 25063                                  ; Input:    AL = character code
 25064                                  ;	    ES:DI -> Parameter List
 25065                                  ;
 25066                                  ; Output:   ZF = 1 if one of End of Line characters
 25067                                  ;**********************************************************************
 25068                                  
 25069                                  _$P_Chk_EOL:
 25070 00001B92 53                      	push	bx			;AN000;
 25071 00001B93 51                      	push	cx			;AN000;
 25072 00001B94 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 25073 00001B96 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25074                                  
 25075 00001B98 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 25076 00001B9A 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25077                                  
 25078                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 25079 00001B9C 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 25080 00001B9E 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25081                                  ;ENDIF					;AN028;
 25082                                  
 25083 00001BA0 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 25084                                  					;AN000; EOL character specified ?
 25085 00001BA5 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 25086                                  
 25087 00001BA7 31DB                    	xor	bx,bx			;AN000;
 25088 00001BA9 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 25089                                  					;AN000; get length of delimiter list
 25090 00001BAD 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 25091                                  	; 14/08/2023
 25092 00001BB0 31C9                    	xor	cx,cx ; *
 25093 00001BB2 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 25094 00001BB6 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 25095                                  	; 14/08/2023
 25096                                  	;;xor	cx,cx			;AN000; Get number of extra character
 25097                                  	;xor	ch,ch ; *
 25098 00001BB8 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 25099                                  _$P_Chk_EOL_Loop:			;AN000;
 25100 00001BBB 43                      	inc	bx			;AN000;
 25101 00001BBC 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 25102 00001BBF 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25103 00001BC1 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 25104                                  	; 14/08/2023
 25105                                  	; cx=0
 25106                                  _$P_Chk_EOL_NZ:				;AN000;
 25107                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 25108                                  	; 14/08/2023
 25109 00001BC3 41                      	inc	cx  ; zf=0 (cx=1) ; *
 25110                                  _$P_Chk_EOL_Exit:			;AN000;
 25111 00001BC4 59                      	pop	cx			;AN000;
 25112 00001BC5 5B                      	pop	bx			;AN000;
 25113 00001BC6 C3                      	retn
 25114                                  
 25115                                  ;***********************************************************************
 25116                                  ; _$P_Chk_Delim;
 25117                                  ;
 25118                                  ; Function: Check if AL is one of delimiter characters.
 25119                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 25120                                  ;	    blanks.
 25121                                  ;
 25122                                  ; Input:    AL = character code
 25123                                  ;	    DS:SI -> Next Character
 25124                                  ;	    ES:DI -> Parameter List
 25125                                  ;
 25126                                  ; Output:   ZF = 1 if one of delimiter characters
 25127                                  ;	    SI points to the next character
 25128                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 25129                                  ;***********************************************************************
 25130                                  
 25131                                  _$P_Chk_Delim:
 25132 00001BC7 53                      	push	bx			;AN000;
 25133 00001BC8 51                      	push	cx			;AN000;
 25134 00001BC9 2EC606[1D14]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 25135                                  					;AC034; Assume terminated by space
 25136                                  	;and	byte [cs:_$P_Flags20,0DFh
 25137 00001BCF 2E8026[2314]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 25138 00001BD5 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 25139 00001BD7 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25140                                  
 25141 00001BD9 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 25142 00001BDB 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25143                                  
 25144 00001BDD 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 25145 00001BDF 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25146                                  
 25147                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 25148                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 25149                                  ;        Erdogan Tan - 14/08/2023
 25150                                  ;_$P_Chk_Delim00:
 25151                                  %if 0
 25152                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25153                                  _$P_Chk_Delim00: 			;AN000;
 25154                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 25155                                  	jne	short _$P_Chk_Delim01	;AN000;
 25156                                  
 25157                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 25158                                  	jne	short _$P_Chk_Delim01	;AN000;
 25159                                  
 25160                                  	mov	al,_$P_Space		;AN000;
 25161                                  	inc	si			;AN000; make si point to next character
 25162                                  	cmp	al,al			;AN000; Set ZF
 25163                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25164                                  %endif
 25165                                  
 25166                                  _$P_Chk_Delim01: 			;AN000;
 25167 00001BE1 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 25168                                  					;AN000; delimiter character specified ?
 25169 00001BE6 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 25170                                  
 25171                                  	;xor	cx,cx			;AN000;
 25172 00001BE8 30ED                    	xor	ch,ch
 25173                                  	;mov	cl,[es:di+3]
 25174 00001BEA 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 25175                                  					;AN000; get length of delimiter list
 25176                                  	;or	cx,cx			;AN000; No extra Delim character ?
 25177                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 25178                                  	; 14/08/2023
 25179 00001BEE E30B                    	jcxz	_$P_Chk_Delim_NZ
 25180                                  
 25181 00001BF0 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 25182                                  _$P_Chk_Delim_Loop:			;AN000;
 25183 00001BF3 43                      	inc	bx			;AN000;
 25184 00001BF4 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 25185 00001BF7 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25186                                  
 25187 00001BF9 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 25188                                  
 25189                                  _$P_Chk_Delim_NZ:			;AN000;
 25190                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 25191                                  	; 14/08/2023
 25192                                  	; cx=0 here
 25193 00001BFB 41                      	inc	cx ; cx=1, zf=0
 25194                                  _$P_Chk_Delim_Exit:			;AN000;
 25195                                  _$P_ChkDfin:				;AN000;
 25196 00001BFC 59                      	pop	cx			;AN000;
 25197 00001BFD 5B                      	pop	bx			;AN000;
 25198 00001BFE C3                      	retn				;AN000;
 25199                                  
 25200                                  _$P_Chk_Delim_Exit0:			;AN000;
 25201 00001BFF 2EA2[1D14]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 25202 00001C03 2EF606[2314]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 25203 00001C09 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 25204                                  
 25205 00001C0B 2E800E[2314]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 25206                                  					;AC034; flag terminated extra delimiter or comma
 25207                                  _$P_No_Set_Extra:			;AN027;
 25208 00001C11 38C0                    	cmp	al,al			;AN000; set ZF
 25209 00001C13 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25210                                  
 25211                                  
 25212                                  ;***********************************************************************
 25213                                  ; _$P_Chk_Switch;
 25214                                  ;
 25215                                  ; Function: Check if AL is the switch character not in first position of
 25216                                  ;	    _$P_STRING_BUF
 25217                                  ;
 25218                                  ; Input:    AL = character code
 25219                                  ;	    BX = current pointer within _$P_String_Buf
 25220                                  ;	    SI =>next char on command line (following the one in AL)
 25221                                  ;
 25222                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 25223                                  ;		 position, and has no chance of being part of a date string,
 25224                                  ;		 i.e. should be treated as a delimiter.
 25225                                  
 25226                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 25227                                  ;		 position, or is a slash but may be part of a date string, i.e.
 25228                                  ;		 should not be treated as a delimiter.
 25229                                  ;
 25230                                  ; Vars:  _$P_Terminator(W)
 25231                                  
 25232                                  ; Use:	 _$P_0099
 25233                                  ;***********************************************************************
 25234                                  
 25235                                  _$P_Chk_Switch:
 25236                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 25237                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 25238                                  	; 14/08/2023
 25239 00001C15 BD[2C14]                	mov	bp,_$P_STRING_BUF
 25240                                  
 25241                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 25242 00001C18 39EB                    	cmp	bx,bp			;AN000;
 25243 00001C1A 7406                    	je	short _$P_STRUC_L2	;AN000;
 25244                                  
 25245                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 25246 00001C1C 3C2F                    	cmp	al,_$P_Switch		;AN000;
 25247 00001C1E 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 25248                                  
 25249 00001C20 F9                      	stc				;AN020;not in first position and is slash
 25250                                  	;jmp     short _$P_STRUC_L1	;AN000;
 25251                                  	; 12/12/2022
 25252 00001C21 C3                      	retn
 25253                                  
 25254                                  ; 12/12/2022
 25255                                  ;_$P_STRUC_L5:				;AN000;
 25256                                  ;	CLC				;AN020;not a slash
 25257                                  ;;	    .ENDIF			;AN020;
 25258                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 25259                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 25260                                  
 25261                                  _$P_STRUC_L2:				;AN000;
 25262                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 25263 00001C22 3C2F                    	cmp     al,_$P_Switch		;AN000;
 25264 00001C24 7506                    	jne	short _$P_STRUC_L12	;AN000;
 25265                                  
 25266 00001C26 2E800E[2314]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 25267                                  ;	    .ENDIF			;AN020;
 25268                                  
 25269                                  	; 12/12/2022
 25270                                  	; cf=0
 25271                                  	;retn
 25272                                  
 25273                                  _$P_STRUC_L5:
 25274                                  	; 12/12/2022
 25275                                  _$P_STRUC_L12:				;AN000;
 25276 00001C2C F8                      	clc				;AN020;CF=0 indicating first char
 25277                                  ;	.ENDIF				;AN020;
 25278                                  _$P_STRUC_L1:				;AN000;
 25279 00001C2D C3                      	retn				;AN000;
 25280                                  
 25281                                  ;**************************************************************************
 25282                                  ; _$P_Chk_DBCS:
 25283                                  ;
 25284                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 25285                                  ;
 25286                                  ;  Input:
 25287                                  ;	  AL	= Code to be examineed
 25288                                  ;
 25289                                  ;  Output:
 25290                                  ;	  If CF is on then a lead byte of DBCS
 25291                                  ;
 25292                                  ; Use: INT 21h w/AH=63
 25293                                  ;
 25294                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 25295                                  ;***************************************************************************
 25296                                  
 25297                                  _$P_Chk_DBCS:
 25298 00001C2E 1E                      	push	ds			;AN000;
 25299 00001C2F 56                      	push	si			;AN000;
 25300 00001C30 53                      	push	bx			;AN000; (tm11)
 25301                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 25302                                  	;jne	short _$P_DBCS00	;AN000;
 25303                                  	; 14/08/2023
 25304 00001C31 2E8B36[2014]            	mov	si,[cs:_$P_DBCSEV_SEG]
 25305 00001C36 21F6                    	and	si,si ; 0 ?
 25306 00001C38 7525                    	jnz	short _$P_DBCS00 ; already set
 25307 00001C3A 50                      	push	ax			;AN000;
 25308 00001C3B 1E                      	push	ds			;AN000; (tm11)
 25309 00001C3C 51                      	push	cx			;AN000;
 25310 00001C3D 52                      	push	dx			;AN000;
 25311 00001C3E 57                      	push	di			;AN000;
 25312 00001C3F 55                      	push	bp			;AN000;
 25313 00001C40 06                      	push	es			;AN000;
 25314                                  	; si = 0 ; 14/08/2023
 25315                                  	;xor	si,si			;AN000;
 25316 00001C41 8EDE                    	mov	ds,si ; 0		;AN000;
 25317 00001C43 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 25318 00001C46 CD21                    	int	21h			;AN000;
 25319                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 25320 00001C48 8CDB                    	mov	bx,ds			;AN000; (tm11)
 25321 00001C4A 09DB                    	or	bx,bx			;AN000; (tm11)
 25322 00001C4C 07                      	pop	es			;AN000;
 25323 00001C4D 5D                      	pop	bp			;AN000;
 25324 00001C4E 5F                      	pop	di			;AN000;
 25325 00001C4F 5A                      	pop	dx			;AN000;
 25326 00001C50 59                      	pop	cx			;AN000;
 25327 00001C51 1F                      	pop	ds			;AN000; (tm11)
 25328 00001C52 58                      	pop	ax			;AN000;
 25329 00001C53 7424                    	jz	short _$P_NON_DBCS	;AN000;
 25330                                  _$P_DBCS02:				;AN000;
 25331 00001C55 2E8936[1E14]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 25332 00001C5A 2E891E[2014]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 25333                                  _$P_DBCS00:				;AN000;
 25334                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 25335                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 25336                                  	; 14/08/2023
 25337 00001C5F 2EC536[1E14]            	lds	si,[cs:_$P_DBCSEV_OFF]
 25338                                  _$P_DBCS_LOOP:				;AN000;
 25339 00001C64 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 25340 00001C67 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 25341 00001C69 3A04                    	cmp	al,[si] 		;AN000;
 25342 00001C6B 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 25343 00001C6D 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 25344 00001C70 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 25345 00001C72 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 25346 00001C73 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 25347                                  _$P_DBCS01:				;AN000;
 25348 00001C75 46                      	inc	si			;AC035; add '2' to
 25349 00001C76 46                      	inc	si			;AC035;  SI reg
 25350                                  					;AN000; get next vector
 25351 00001C77 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 25352                                  _$P_NON_DBCS:				;AN000;
 25353                                  	; 12/12/2022
 25354                                  	; cf=0
 25355                                  	;clc				;AN000; indicate SBCS
 25356                                  _$P_DBCS_EXIT:				;AN000;
 25357 00001C79 5B                      	pop	bx			;AN000; (tm11)
 25358 00001C7A 5E                      	pop	si			;AN000;
 25359 00001C7B 1F                      	pop	ds			;AN000;
 25360 00001C7C C3                      	retn				;AN000;
 25361                                  
 25362                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 25363                                  ; ======================================================================
 25364                                  ; 27/03/2019 - Retro DOS v4.0
 25365                                  
 25366                                  ;control block definitions for parser.
 25367                                  ;-----------------------------------------------------------------------
 25368                                  ; buffer = [n | n,m] {/e}
 25369                                  
 25370                                  ; 30/03/2019
 25371                                  
 25372                                  struc p_parms
 25373 00000000 ????                    	resw	1	; dw ?
 25374 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 25375 00000003 ??                      	resb	1	; db 1	; length is 1
 25376 00000004 ??                      	resb 	1	; db ';' ; delimiter
 25377                                  .size:
 25378                                  endstruc
 25379                                  
 25380                                  struc p_pos
 25381 00000000 ????                    	resw	1	; dw ?	; numeric value??
 25382 00000002 ????                    	resw	1	; dw ?	; function
 25383 00000004 ????                    	resw	1	; dw ?	; result value buffer
 25384                                  
 25385                                  ; note: by defining result_val before this structure, we could remove
 25386                                  ;  the "result_val" from every structure invocation
 25387                                  
 25388 00000006 ????                    	resw	1	; dw ?	; value list
 25389 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 25390                                  .size:
 25391                                  endstruc
 25392                                  
 25393                                  struc	p_range
 25394 00000000 ??                      	resb	1	; db 1	; range definition
 25395 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 25396 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 25397 00000003 ????????                	resd	1	; dd ?	; numeric min
 25398 00000007 ????????                	resd	1	; dd ?	; numeric max
 25399                                  .size:
 25400                                  endstruc
 25401                                  
 25402                                  ;-----------------------------------------------------------------------
 25403                                  
 25404                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25405                                  	; (SYSINIT:1F48h)
 25406                                  
 25407                                  ; buffer = [n | n,m] {/e}
 25408                                  
 25409                                  ;buf_parms p_parms <buf_parmsx>
 25410                                  buf_parms: 
 25411 00001C7D [821C]                  	dw	buf_parmsx
 25412 00001C7F 01                      	db	1	; an extra delimiter list
 25413 00001C80 01                      	db	1	; length is 1
 25414 00001C81 3B                      	db	';'	; delimiter
 25415                                  
 25416                                  buf_parmsx:
 25417 00001C82 0102[8C1C][A01C]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 25418 00001C88 01                      	db	1			; one switch
 25419 00001C89 [B41C]                  	dw	sw_x_ctrl
 25420 00001C8B 00                      	db	0			; no keywords
 25421                                  
 25422                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 25423                                  buf_pos1:
 25424 00001C8C 0080                    	dw	8000h	; numeric value??
 25425 00001C8E 0000                    	dw	0	; function
 25426 00001C90 [C61C]                  	dw	result_val ; result value buffer	
 25427 00001C92 [951C]                  	dw	buf_range_1 ; value list
 25428 00001C94 00                      	db	0  	; no switches/keywords
 25429                                  
 25430                                  ;buf_range_1 p_range <,,,1,99>		; M050
 25431                                  buf_range_1:
 25432 00001C95 01                      	db	1	; range definition
 25433 00001C96 01                      	db	1	; 1 definition of range
 25434 00001C97 01                      	db	1	; item tag for this range
 25435 00001C98 01000000                	dd	1	; numeric min
 25436 00001C9C 63000000                	dd	99	; numeric max
 25437                                  
 25438                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 25439                                  buf_pos2:
 25440 00001CA0 0180                    	dw	8001h
 25441 00001CA2 0000                    	dw	0
 25442 00001CA4 [C61C]                  	dw	result_val	
 25443 00001CA6 [A91C]                  	dw	buf_range_2
 25444 00001CA8 00                      	db	0
 25445                                  
 25446                                  ;buf_range_2 p_range <,,,0,8>
 25447                                  buf_range_2:
 25448 00001CA9 01                      	db	1
 25449 00001CAA 01                      	db	1
 25450 00001CAB 01                      	db	1
 25451 00001CAC 00000000                	dd	0
 25452 00001CB0 08000000                	dd	8
 25453                                  
 25454                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 25455                                  sw_x_ctrl:
 25456 00001CB4 0000                    	dw	0
 25457 00001CB6 0000                    	dw	0
 25458 00001CB8 [C61C]                  	dw	result_val	
 25459 00001CBA [C51C]                  	dw	noval
 25460 00001CBC 01                      	db	1	; 1 switch
 25461                                  	
 25462                                  switch_x:
 25463 00001CBD 2F5800                  	db	'/X',0		; M016
 25464                                  
 25465                                  p_buffers:
 25466 00001CC0 0000                    	dw	0	; local variables
 25467                                  p_h_buffers:
 25468 00001CC2 0000                    	dw	0
 25469                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25470                                  p_buffer_slash_x:
 25471 00001CC4 00                      	db	0 ; 31/03/2019
 25472                                  
 25473                                  ;-- common definitions -------------------------------------------------
 25474                                  
 25475 00001CC5 00                      noval:	db	0
 25476                                  
 25477                                  result_val: 	;label	byte
 25478 00001CC6 00                      	db	0		; type returned
 25479                                  result_val_itag:
 25480 00001CC7 00                      	db	0		; item tag returned
 25481                                  result_val_swoff:
 25482 00001CC8 0000                    	dw	0		; es:offset of the switch defined
 25483                                  rv_byte:	;label	byte
 25484 00001CCA 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 25485                                  
 25486                                  ;-----------------------------------------------------------------------
 25487                                  
 25488                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25489                                  	; (SYSINIT:1F99h)
 25490                                  
 25491                                  ; break = [ on | off ]
 25492                                  
 25493                                  ;brk_parms p_parms  <brk_parmsx>
 25494                                  brk_parms:
 25495 00001CCE [D31C]                  	dw	brk_parmsx
 25496 00001CD0 01                      	db	1	; an extra delimiter list
 25497 00001CD1 01                      	db	1	; length is 1
 25498 00001CD2 3B                      	db	';'	; delimiter
 25499                                  
 25500                                  brk_parmsx:
 25501 00001CD3 0101[D91C]              	dw	101h,brk_pos	; min,max = 1 positional
 25502 00001CD7 00                      	db	0		; no switches
 25503 00001CD8 00                      	db	0		; no keywords
 25504                                  
 25505                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25506                                  brk_pos:
 25507 00001CD9 0020                    	dw	2000h
 25508 00001CDB 0000                    	dw	0
 25509 00001CDD [C61C]                  	dw	result_val	
 25510 00001CDF [E21C]                  	dw	on_off_string
 25511 00001CE1 00                      	db	0
 25512                                  
 25513                                  on_off_string:	;label	byte
 25514 00001CE2 03                      	db	3		; signals that there is a string choice
 25515 00001CE3 00                      	db	0		; no range definition
 25516 00001CE4 00                      	db	0		; no numeric values choice
 25517 00001CE5 02                      	db	2		; 2 strings for choice
 25518 00001CE6 01                      	db	1		; the 1st string tag
 25519 00001CE7 [EC1C]                  	dw	on_string
 25520 00001CE9 02                      	db	2		; the 2nd string tag
 25521 00001CEA [EF1C]                  	dw	off_string
 25522                                  
 25523                                  on_string:
 25524 00001CEC 4F4E00                  	db	"ON",0
 25525                                  off_string:
 25526 00001CEF 4F464600                	db	"OFF",0
 25527                                  
 25528                                  p_ctrl_break:
 25529 00001CF3 00                      	db	0	; local variable
 25530                                  
 25531                                  ;-----------------------------------------------------------------------
 25532                                  
 25533                                  	; 27/10/2022
 25534                                  
 25535                                  ; country = n {m {path}}
 25536                                  ; or
 25537                                  ; country = n,,path
 25538                                  
 25539                                  ;cntry_parms p_parms <cntry_parmsx>
 25540                                  cntry_parms:
 25541 00001CF4 [F91C]                  	dw	cntry_parmsx
 25542 00001CF6 01                      	db	1
 25543 00001CF7 01                      	db	1
 25544 00001CF8 3B                      	db	';'
 25545                                  	
 25546                                  cntry_parmsx:
 25547 00001CF9 0103[031D][171D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 25547 00001CFF [201D]             
 25548 00001D01 00                      	db	0		; no switches
 25549 00001D02 00                      	db	0		; no keywords
 25550                                  
 25551                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 25552                                  cntry_pos1:
 25553 00001D03 0080                    	dw	8000h
 25554 00001D05 0000                    	dw	0
 25555 00001D07 [C61C]                  	dw	result_val	
 25556 00001D09 [0C1D]                  	dw	cc_range
 25557 00001D0B 00                      	db	0
 25558                                  
 25559                                  ;cc_range p_range <,,,1,999>
 25560                                  cc_range:
 25561 00001D0C 01                      	db	1
 25562 00001D0D 01                      	db	1
 25563 00001D0E 01                      	db	1
 25564 00001D0F 01000000                	dd	1
 25565 00001D13 E7030000                	dd	999
 25566                                  
 25567                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 25568                                  cntry_pos2:
 25569 00001D17 0180                    	dw	8001h
 25570 00001D19 0000                    	dw	0
 25571 00001D1B [C61C]                  	dw	result_val	
 25572 00001D1D [0C1D]                  	dw	cc_range
 25573 00001D1F 00                      	db	0
 25574                                  
 25575                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 25576                                  cntry_pos3:
 25577 00001D20 0102                    	dw	201h
 25578 00001D22 0000                    	dw	0
 25579 00001D24 [C61C]                  	dw	result_val	
 25580 00001D26 [C51C]                  	dw	noval
 25581 00001D28 00                      	db	0	
 25582                                  
 25583                                  p_cntry_code:
 25584 00001D29 0000                    	dw	0	; local variable
 25585                                  p_code_page:
 25586 00001D2B 0000                    	dw	0	; local variable
 25587                                  
 25588                                  ;-----------------------------------------------------------------------
 25589                                  
 25590                                  	; 27/10/2022
 25591                                  
 25592                                  ; files = n
 25593                                  
 25594                                  ;files_parms p_parms <files_parmsx>
 25595                                  files_parms:
 25596 00001D2D [321D]                  	dw	files_parmsx
 25597 00001D2F 01                      	db	1
 25598 00001D30 01                      	db	1
 25599 00001D31 3B                      	db	';'
 25600                                  
 25601                                  files_parmsx:
 25602 00001D32 0101[381D]              	dw	101h,files_pos	; min,max 1 positional
 25603 00001D36 00                      	db	0		; no switches
 25604 00001D37 00                      	db	0		; no keywords
 25605                                  
 25606                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 25607                                  files_pos:
 25608 00001D38 0080                    	dw	8000h
 25609 00001D3A 0000                    	dw	0
 25610 00001D3C [C61C]                  	dw	result_val	
 25611 00001D3E [411D]                  	dw	files_range
 25612 00001D40 00                      	db	0
 25613                                  
 25614                                  ;files_range p_range <,,,8,255>
 25615                                  files_range:
 25616 00001D41 01                      	db	1
 25617 00001D42 01                      	db	1
 25618 00001D43 01                      	db	1
 25619 00001D44 08000000                	dd	8
 25620 00001D48 FF000000                	dd	255
 25621                                  
 25622                                  p_files:
 25623 00001D4C 00                      	db	0		; local variable
 25624                                  
 25625                                  ;-----------------------------------------------------------------------
 25626                                  
 25627                                  	; 27/10/2022
 25628                                  
 25629                                  ; fcbs = n,m
 25630                                  
 25631                                  ;fcbs_parms p_parms <fcbs_parmsx>
 25632                                  fcbs_parms:
 25633 00001D4D [521D]                  	dw	fcbs_parmsx
 25634 00001D4F 01                      	db	1
 25635 00001D50 01                      	db	1
 25636 00001D51 3B                      	db	';'
 25637                                  
 25638                                  fcbs_parmsx:
 25639 00001D52 0102[5A1D][6E1D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 25640 00001D58 00                      	db	0		; no switches
 25641 00001D59 00                      	db	0		; no keywords
 25642                                  
 25643                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 25644                                  fcbs_pos_1:
 25645 00001D5A 0080                    	dw	8000h
 25646 00001D5C 0000                    	dw	0
 25647 00001D5E [C61C]                  	dw	result_val	
 25648 00001D60 [631D]                  	dw	fcbs_range
 25649 00001D62 00                      	db	0
 25650                                  
 25651                                  ;fcbs_range p_range <,,,1,255>
 25652                                  fcbs_range:
 25653 00001D63 01                      	db	1
 25654 00001D64 01                      	db	1
 25655 00001D65 01                      	db	1
 25656 00001D66 01000000                	dd	1
 25657 00001D6A FF000000                	dd	255
 25658                                  
 25659                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 25660                                  fcbs_pos_2:
 25661 00001D6E 0080                    	dw	8000h
 25662 00001D70 0000                    	dw	0
 25663 00001D72 [C61C]                  	dw	result_val	
 25664 00001D74 [771D]                  	dw	fcbs_keep_range
 25665 00001D76 00                      	db	0
 25666                                  
 25667                                  ;fcbs_keep_range p_range <,,,0,255>
 25668                                  fcbs_keep_range:
 25669 00001D77 01                      	db	1
 25670 00001D78 01                      	db	1
 25671 00001D79 01                      	db	1
 25672 00001D7A 00000000                	dd	0
 25673 00001D7E FF000000                	dd	255
 25674                                  
 25675 00001D82 00                      p_fcbs:	db	0		; local variable
 25676 00001D83 00                      p_keep:	db	0		; local variable
 25677                                  
 25678                                  ;-----------------------------------------------------------------------
 25679                                  
 25680                                  	; 27/10/2022
 25681                                  
 25682                                  ; lastdrive = x
 25683                                  
 25684                                  ;ldrv_parms p_parms <ldrv_parmsx>
 25685                                  ldrv_parms:
 25686 00001D84 [891D]                  	dw	ldrv_parmsx
 25687 00001D86 01                      	db	1
 25688 00001D87 01                      	db	1
 25689 00001D88 3B                      	db	';'
 25690                                  
 25691                                  ldrv_parmsx:
 25692 00001D89 0101[8F1D]              	dw	101h,ldrv_pos	; min,max = 1 positional
 25693 00001D8D 00                      	db	0		; no switches
 25694 00001D8E 00                      	db	0		; no keywords
 25695                                  
 25696                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 25697                                  ldrv_pos:				    ; remove colon at end
 25698 00001D8F 1001                    	dw	110h
 25699 00001D91 1000                    	dw	10h
 25700 00001D93 [C61C]                  	dw	result_val	
 25701 00001D95 [C51C]                  	dw	noval
 25702 00001D97 00                      	db	0
 25703                                  	
 25704 00001D98 00                      p_ldrv:	db	0		; local variable
 25705                                  
 25706                                  ;-----------------------------------------------------------------------
 25707                                  
 25708                                  	; 27/10/2022
 25709                                  
 25710                                  ; stacks = n,m
 25711                                  
 25712                                  ;stks_parms p_parms <stks_parmsx>
 25713                                  stks_parms:
 25714 00001D99 [9E1D]                  	dw	stks_parmsx
 25715 00001D9B 01                      	db	1
 25716 00001D9C 01                      	db	1
 25717 00001D9D 3B                      	db	';'
 25718                                  
 25719                                  stks_parmsx:
 25720 00001D9E 0202[A61D][BA1D]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 25721 00001DA4 00                      	db	0		; no switches
 25722 00001DA5 00                      	db	0		; no keywords
 25723                                  
 25724                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 25725                                  stks_pos_1:
 25726 00001DA6 0080                    	dw	8000h
 25727 00001DA8 0000                    	dw	0
 25728 00001DAA [C61C]                  	dw	result_val	
 25729 00001DAC [AF1D]                  	dw	stks_range
 25730 00001DAE 00                      	db	0
 25731                                  
 25732                                  ;stks_range p_range <,,,0,64>
 25733                                  stks_range:
 25734 00001DAF 01                      	db	1
 25735 00001DB0 01                      	db	1
 25736 00001DB1 01                      	db	1
 25737 00001DB2 00000000                	dd	0
 25738 00001DB6 40000000                	dd	64
 25739                                  
 25740                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 25741                                  stks_pos_2:
 25742 00001DBA 0080                    	dw	8000h
 25743 00001DBC 0000                    	dw	0
 25744 00001DBE [C61C]                  	dw	result_val	
 25745 00001DC0 [C31D]                  	dw	stk_size_range
 25746 00001DC2 00                      	db	0
 25747                                  
 25748                                  ;stk_size_range p_range <,,,0,512>
 25749                                  stk_size_range:
 25750 00001DC3 01                      	db	1
 25751 00001DC4 01                      	db	1
 25752 00001DC5 01                      	db	1
 25753 00001DC6 00000000                	dd	0
 25754 00001DCA 00020000                	dd	512	
 25755                                  
 25756                                  p_stack_count:
 25757 00001DCE 0000                    	dw	0	; local variable
 25758                                  p_stack_size:
 25759 00001DD0 0000                    	dw	0	; local variable
 25760                                  
 25761                                  ;-----------------------------------------------------------------------
 25762                                  
 25763                                  	; 27/10/2022
 25764                                  
 25765                                  ; multitrack = [ on | off ]
 25766                                  
 25767                                  ;mtrk_parms p_parms <mtrk_parmsx>
 25768                                  mtrk_parms:
 25769 00001DD2 [D71D]                  	dw	mtrk_parmsx
 25770 00001DD4 01                      	db	1
 25771 00001DD5 01                      	db	1
 25772 00001DD6 3B                      	db	';'
 25773                                  
 25774                                  mtrk_parmsx:
 25775 00001DD7 0101[DD1D]              	dw	101h,mtrk_pos	; min,max = 1 positional
 25776 00001DDB 00                      	db	0		; no switches
 25777 00001DDC 00                      	db	0		; no keywords
 25778                                  
 25779                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25780                                  mtrk_pos:
 25781 00001DDD 0020                    	dw	2000h
 25782 00001DDF 0000                    	dw	0
 25783 00001DE1 [C61C]                  	dw	result_val	
 25784 00001DE3 [E21C]                  	dw	on_off_string
 25785 00001DE5 00                      	db	0
 25786                                  
 25787 00001DE6 00                      p_mtrk:	db	0		; local variable
 25788                                  
 25789                                  ;-----------------------------------------------------------------------
 25790                                  
 25791                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25792                                  	; (SYSINIT:20B2h)
 25793                                  
 25794                                  ; switches=/k
 25795                                  
 25796                                  ;swit_parms p_parms <swit_parmsx>
 25797                                  swit_parms:
 25798 00001DE7 [EC1D]                  	dw	swit_parmsx
 25799 00001DE9 01                      	db	1
 25800 00001DEA 01                      	db	1
 25801 00001DEB 3B                      	db	';'
 25802                                  
 25803                                  swit_parmsx:
 25804 00001DEC 0000                    	dw	0		; no positionals
 25805                                  	;db	5               ; # of switches
 25806                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25807 00001DEE 03                      	db	3
 25808 00001DEF [F61D]                  	dw	swit_k_ctrl	; /k control
 25809                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 25810                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 25811 00001DF1 [021E]                  	dw	swit_t_ctrl     ; /t control
 25812 00001DF3 [0E1E]                  	dw	swit_w_ctrl     ; /w control
 25813 00001DF5 00                      	db	0		; no keywords
 25814                                  
 25815                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25816                                  swit_k_ctrl:
 25817 00001DF6 00000000[C61C]-         	dw	0,0,result_val,noval
 25817 00001DFC [C51C]             
 25818 00001DFE 01                      	db	1
 25819 00001DFF 2F4B00                  swit_k:	db	'/K',0
 25820                                  
 25821                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25822                                  ;
 25823                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25824                                  ;swit_n_ctrl:
 25825                                  ;	dw	0,0,result_val,noval
 25826                                  ;	db	1
 25827                                  ;swit_n: db	'/N',0
 25828                                  ;
 25829                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25830                                  ;swit_f_ctrl:
 25831                                  ;	dw	0,0,result_val,noval
 25832                                  ;	db	1
 25833                                  ;swit_f: db 	'/F',0
 25834                                  
 25835                                  	; 27/10/2022
 25836                                  
 25837                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25838                                  swit_t_ctrl:
 25839 00001E02 00000000[C61C]-         	dw	0,0,result_val,noval
 25839 00001E08 [C51C]             
 25840 00001E0A 01                      	db	1
 25841 00001E0B 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25842                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25843                                  swit_w_ctrl:
 25844 00001E0E 00000000[C61C]-         	dw	0,0,result_val,noval
 25844 00001E14 [C51C]             
 25845 00001E16 01                      	db	1
 25846 00001E17 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25847                                  
 25848                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 25849                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 25850                                  ;   in the above table to prevent the parsing code from complaining about them
 25851                                  
 25852 00001E1A 00                      p_swit_k:	db     0	; local variable
 25853 00001E1B 00                      p_swit_t:	db     0	; local variable			M059
 25854 00001E1C 00                      p_swit_w:	db     0	; local variable			M063
 25855                                  
 25856                                  ;-----------------------------------------------------------------------
 25857                                  
 25858                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25859                                  	; (SYSINIT:20E8h)
 25860                                  
 25861                                  ; DOS = [ high | low ]
 25862                                  
 25863                                  ;dos_parms p_parms  <dos_parmsx>
 25864                                  dos_parms:
 25865 00001E1D [221E]                  	dw	dos_parmsx
 25866 00001E1F 01                      	db	1
 25867 00001E20 01                      	db	1
 25868 00001E21 3B                      	db	';'
 25869                                  dos_parmsx:
 25870 00001E22 01                      	db	1		; min parameters
 25871 00001E23 02                      	db	2		; max parameters
 25872 00001E24 [2A1E]                  	dw	dos_pos		; 
 25873 00001E26 [2A1E]                  	dw	dos_pos		; 
 25874 00001E28 00                      	db	0		; no switches
 25875 00001E29 00                      	db	0		; no keywords
 25876                                  
 25877                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25878                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25879                                  dos_pos:
 25880 00001E2A 00200000[C61C]-         	dw	2000h,0,result_val,dos_strings
 25880 00001E30 [3C1E]             
 25881 00001E32 00                      	db	0
 25882 00001E33 00200000[C61C]-         	dw	2000h,0,result_val,dos_strings
 25882 00001E39 [3C1E]             
 25883 00001E3B 00                      	db	0	
 25884                                  
 25885                                  dos_strings:	;label	byte
 25886 00001E3C 03                      	db	3		; signals that there is a string choice
 25887 00001E3D 00                      	db	0		; no range definition
 25888 00001E3E 00                      	db	0		; no numeric values choice
 25889 00001E3F 04                      	db	4		; 4 strings for choice
 25890 00001E40 01                      	db	1		; the 1st string tag
 25891 00001E41 [4C1E]                  	dw	hi_string
 25892 00001E43 02                      	db	2		; the 2nd string tag
 25893 00001E44 [511E]                  	dw	lo_string
 25894 00001E46 03                      	db	3
 25895 00001E47 [551E]                  	dw	umb_string
 25896 00001E49 04                      	db	4
 25897 00001E4A [591E]                  	dw	noumb_string
 25898                                  
 25899 00001E4C 4849474800              hi_string:	db	"HIGH",0
 25900 00001E51 4C4F5700                lo_string:	db	"LOW",0
 25901 00001E55 554D4200                umb_string:	db	"UMB",0
 25902 00001E59 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25903                                  
 25904 00001E5F 00                      p_dos_hi:	db	0	; local variable
 25905                                  				; BUGBUG : I dont know whether PARSER uses
 25906                                  				;          this variable or not
 25907                                  
 25908                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25909                                  
 25910                                  %if 0
 25911                                  
 25912                                  ;****************************************************************** RICHID ****
 25913                                  
 25914                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25915                                  
 25916                                  ; 30/03/2019 - Retro DOS v4.0
 25917                                  ;------------------------------------------------------------------------------
 25918                                  
 25919                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25920                                  ;
 25921                                  ;   Date:     May 14, 1992
 25922                                  ;
 25923                                  ;******************************************************************************
 25924                                  ;
 25925                                  ;   Modification log:
 25926                                  ;
 25927                                  ;     DATE    WHO      DESCRIPTION
 25928                                  ;   --------  -------  --------------------------------------------------------
 25929                                  ;   05/14/92  t-richj  Original
 25930                                  ;   06/21/92  t-richj  Final revisions before check-in
 25931                                  ;
 25932                                  ;******************************************************************************
 25933                                  ;
 25934                                  ; There are two primary definitions which need to be made, selectively, before
 25935                                  ; this include file should be used.  These are:
 25936                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25937                                  ;                declared as external.  Otherwise, variables will be declared
 25938                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25939                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25940                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25941                                  ;                (as only one module, sysconf.asm, includes this file).
 25942                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25943                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25944                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25945                                  ;
 25946                                  ;******************************************************************************
 25947                                  
 25948                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25949                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25950                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25951                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25952                                  ; space problem (it's just such a nice round number, eh?).
 25953                                  
 25954                                  MAXUMB	equ	16
 25955                                  
 25956                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25957                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25958                                  
 25959                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25960                                  SystemPSPOwner	equ	8
 25961                                  ;JapanPSPOwner	equ	9
 25962                                  
 25963                                  ; for LoadHigh and DeviceHigh:
 25964                                  ;
 25965                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25966                                  ;	          UnHideUMBs().
 25967                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25968                                  ;	           line.
 25969                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25970                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25971                                  ;	          given a command-line like "/L:3,500;4"
 25972                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25973                                  ;	          matching its index number was specified on the command-line;
 25974                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25975                                  ;	          will be set to 1.  All others will be set to 0.
 25976                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25977                                  ;	          specified by the user for a UMB (in the above example, all
 25978                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25979                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25980                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25981                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25982                                  ;	           for details).
 25983                                  
 25984                                  fInHigh:  db	0
 25985                                  fUmbTiny: db	0
 25986                                  SegLoad:  dw	0
 25987                                  UmbLoad:  db	0
 25988                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25989                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25990                                  fm_umb:   db	0
 25991                                  fm_strat: db	0
 25992                                  fm_argc:  db	0	
 25993                                  
 25994                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25995                                  ; UmbLoad is set to the UMB number given.
 25996                                  
 25997                                  UNSPECIFIED	equ	-1
 25998                                  
 25999                                  %endif
 26000                                  
 26001                                  ;****************************************************************** RICHID ****
 26002                                  
 26003                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 26004                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 26005                                  
 26006                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26007                                  ; (SYSINIT:212Bh)	
 26008                                  
 26009                                  		;public	DevEntry
 26010                                  
 26011 00001E60 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 26012 00001E62 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 26013 00001E64 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 26014 00001E66 00000000                DevEntry:	dd	0	; Entry point to the device driver
 26015 00001E6A 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 26016                                  ; 27/10/2022 
 26017                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 26018                                  ;
 26019 00001E6E 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 26020 00001E6F 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 26021 00001E71 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 26022 00001E73 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 26023                                  ;
 26024 00001E75 00000000                DevXMSAddr:	dd	0
 26025                                  ;
 26026 00001E79 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 26027 00001E7B 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 26028                                  ;
 26029 00001E7D 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 26030                                  				;  is being loaded into UMB
 26031 00001E7E 0000                    DevSizeOption:	dw	0	; SIZE= option
 26032                                  ;
 26033 00001E80 00                      Int12Lied:	db	0	; did we trap int 12 ?
 26034 00001E81 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 26035 00001E83 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 26036                                  ;
 26037 00001E8B 00                      FirstUMBLinked:	db	0
 26038 00001E8C 0000                    DevDOSData:	dw	0	; segment of DOS Data
 26039 00001E8E 00000000                DevCmdLine:	dd	0	; Current Command line
 26040 00001E92 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 26041                                  				; to use the file name in the command line
 26042                                  ;
 26043                                  ;	ifdef	dblspace_hooks
 26044                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 26045                                  ;	endif
 26046                                  
 26047                                  ; ===========================================================================
 26048                                  
 26049                                  ; 31/03/2019 - Retro DOS v4.0
 26050                                  
 26051                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26052                                  ; (SYSINIT:215Eh)
 26053                                  
 26054                                  ;----------------------------------------------------------------------------
 26055                                  ;
 26056                                  ; procedure : doconf
 26057                                  ;
 26058                                  ;             Config file is parsed initially with this routine. For the
 26059                                  ;             Subsequent passes 'multi_pass' entry is used .
 26060                                  ;
 26061                                  ;----------------------------------------------------------------------------
 26062                                  
 26063                                  	; 27/10/2022
 26064                                  doconf:
 26065 00001E93 0E                      	push	cs
 26066 00001E94 1F                      	pop	ds
 26067                                  
 26068 00001E95 B80037                  	mov	ax,3700h
 26069                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 26070 00001E98 CD21                    	int	21h
 26071 00001E9A 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 26072                                  
 26073                                  ; 27/10/2022
 26074                                  ;;ifdef	MULTI_CONFIG
 26075                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 26076                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 26077                                  ;;endif	;MULTI_CONFIG
 26078                                  
 26079 00001E9E BA[0A33]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 26080 00001EA1 B8003D                  	mov	ax,3D00h
 26081                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 26082 00001EA4 F9                      	stc				;in case of int 24
 26083 00001EA5 CD21                    	int	21h			;function request
 26084 00001EA7 7306                    	jnc	short noprob		; brif opened okay
 26085                                  
 26086                                  ; 27/10/2022
 26087                                  ;;ifdef	MULTI_CONFIG
 26088                                  ;      	call	kbd_read		; we still want to give the guy
 26089                                  ;					; a chance to select clean boot!
 26090                                  ;;endif					; (ie, no autoexec.bat processing)
 26091 00001EA9 C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 26092 00001EAE C3                      	retn
 26093                                  noprob: 				;get file size (note < 64k!!)
 26094 00001EAF 89C3                    	mov	bx,ax  ; File handle
 26095 00001EB1 31C9                    	xor	cx,cx
 26096 00001EB3 31D2                    	xor	dx,dx
 26097                                  	;mov	ax,4202h
 26098 00001EB5 B80242                  	mov	ax,(LSEEK<<8)|2
 26099 00001EB8 CD21                    	int	21h
 26100 00001EBA A3[D203]                	mov	[count],ax
 26101                                  
 26102 00001EBD 31D2                    	xor	dx,dx
 26103                                  	;mov	ax,4200h
 26104 00001EBF B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 26105 00001EC2 CD21                    	int	21h
 26106                                  
 26107                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 26108                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26109 00001EC4 8B16[A102]              	mov	dx,[top_of_cdss] 
 26110                                  
 26111 00001EC8 A1[D203]                	mov	ax,[count]
 26112 00001ECB A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 26113 00001ECE E8D3F1                  	call	ParaRound
 26114 00001ED1 29C2                    	sub	dx,ax
 26115                                  
 26116                                  ; 27/10/2022
 26117                                  ;;ifdef	MULTI_CONFIG
 26118                                  ;;
 26119                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 26120                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 26121                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 26122                                  ;;  we (may) add a variable to the environment that does not explicity appear
 26123                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 26124                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 26125                                  ;;  of extra space, so here we account for it (the worst case of course is
 26126                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 26127                                  ;;
 26128                                  ;       dec     dx                      ;reserve 1 additional paragraph
 26129                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 26130                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 26131                                  ;;endif	;MULTI_CONFIG
 26132                                  
 26133 00001ED3 83EA11                  	sub	dx,11h			;room for header
 26134                                  	
 26135                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 26136                                  	;mov	[CONFBOT],dx
 26137                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26138 00001ED6 8916[A102]              	mov	[top_of_cdss],dx
 26139 00001EDA E8E8EC                  	call    TempCDS 
 26140                                  	; 11/12/2022
 26141                                  	; ds <> cs 
 26142 00001EDD 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 26143                                   
 26144 00001EE2 8EDA                    	mov	ds,dx
 26145 00001EE4 8EC2                    	mov	es,dx
 26146                                  
 26147 00001EE6 31D2                    	xor	dx,dx
 26148 00001EE8 2E8B0E[D203]            	mov	cx,[cs:count]
 26149 00001EED B43F                    	mov	ah,3Fh
 26150                                  	;mov	ah,READ  ; 3Fh
 26151 00001EEF F9                      	stc				;in case of int 24
 26152 00001EF0 CD21                    	int	21h			;function request
 26153 00001EF2 9C                      	pushf
 26154                                  
 26155                                  ; find the eof mark in the file. if present,then trim length.
 26156                                  
 26157 00001EF3 50                      	push	ax
 26158 00001EF4 57                      	push	di
 26159 00001EF5 51                      	push	cx
 26160 00001EF6 B01A                    	mov	al,1Ah			; eof mark
 26161 00001EF8 89D7                    	mov	di,dx			; point to buffer
 26162 00001EFA E305                    	jcxz	puteol			; no chars
 26163 00001EFC F2AE                    	repnz	scasb			; find end
 26164 00001EFE 7501                    	jnz	short puteol		; none found and count exhausted
 26165                                  
 26166                                  ; we found a 1a. back up
 26167                                  
 26168 00001F00 4F                      	dec	di			; backup past 1Ah
 26169                                  
 26170                                  ;  just for the halibut, stick in an extra eol
 26171                                  
 26172                                  puteol:
 26173 00001F01 B00D                    	mov	al,cr ; 0Dh
 26174 00001F03 AA                      	stosb
 26175 00001F04 B00A                    	mov	al,lf  ;0Ah
 26176 00001F06 AA                      	stosb
 26177 00001F07 29D7                    	sub	di,dx			; difference moved
 26178                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26179                                  	;mov	[cs:count],di		; new count
 26180                                  
 26181                                  	; 11/12/2022	
 26182                                  	; 31/03/2019 - Retro DOS v4.0
 26183 00001F09 0E                      	push	cs
 26184 00001F0A 1F                      	pop	ds
 26185                                  
 26186 00001F0B 893E[D203]              	mov	[count],di		; new count
 26187                                  
 26188 00001F0F 59                      	pop	cx
 26189 00001F10 5F                      	pop	di
 26190 00001F11 58                      	pop	ax
 26191                                  
 26192                                  	; 11/12/2022
 26193                                  	; 27/10/2022
 26194                                  	;push	cs
 26195                                  	;pop	ds
 26196                                  
 26197 00001F12 50                      	push	ax
 26198                                  	;mov	ah,CLOSE
 26199 00001F13 B43E                    	mov	ah,3Eh
 26200 00001F15 CD21                    	int	21h
 26201 00001F17 58                      	pop	ax
 26202 00001F18 9D                      	popf
 26203 00001F19 7204                    	jc	short conferr 		;if not we've got a problem
 26204 00001F1B 39C1                    	cmp	cx,ax
 26205 00001F1D 742C                    	jz	short getcom		;couldn't read the file
 26206                                  conferr:
 26207 00001F1F BA[0A33]                	mov	dx,config		;want to print config error
 26208 00001F22 E83C13                  	call	badfil
 26209                                  endconv:
 26210 00001F25 C3                      	retn
 26211                                  
 26212                                  ;----------------------------------------------------------------------------
 26213                                  ;
 26214                                  ; entry : multi_pass
 26215                                  ;
 26216                                  ;             called to execute device=,install= commands
 26217                                  ;
 26218                                  ;----------------------------------------------------------------------------
 26219                                  
 26220                                  	; 27/10/2022
 26221                                  multi_pass:
 26222 00001F26 0E                      	push	cs
 26223 00001F27 1F                      	pop	ds
 26224                                  
 26225 00001F28 803E[4903]0A            	cmp	byte [multi_pass_id],10
 26226                                  ;jae_endconv:
 26227 00001F2D 73F6                    	jae	short endconv 		; do nothing. just return.
 26228                                  
 26229                                  	;push	word [CONFBOT]
 26230                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26231 00001F2F FF36[A102]              	push	word [top_of_cdss]
 26232 00001F33 07                      	pop	es			; es -> confbot
 26233                                  
 26234 00001F34 8B36[D403]              	mov	si,[org_count]
 26235 00001F38 8936[D203]              	mov	[count],si		; set count
 26236 00001F3C 31F6                    	xor	si,si ; 0
 26237 00001F3E 8936[D603]                      mov     [chrptr],si		; reset chrptr
 26238 00001F42 8936[2B03]                      mov     [linecount],si		; reset linecount
 26239                                  
 26240 00001F46 E89C10                  	call	getchr
 26241 00001F49 EB06                    	jmp	short conflp
 26242                                  
 26243                                  getcom:
 26244 00001F4B E8800E                          call    organize                ; organize the file
 26245 00001F4E E89410                  	call	getchr
 26246                                  conflp: 
 26247 00001F51 72D2                    	jc	short endconv
 26248                                  
 26249 00001F53 FF06[2B03]                      inc     word [linecount]	; increase linecount
 26250                                  
 26251 00001F57 C606[0D14]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 26252 00001F5C C606[1014]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 26253 00001F61 3C0A                    	cmp	al,lf			; linefeed?
 26254 00001F63 7416                    	je	short blank_line	;  then ignore this line.
 26255                                  
 26256                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26257                                  %if 0
 26258                                  
 26259                                  ;ifdef	MULTI_CONFIG
 26260                                  
 26261                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 26262                                  ;   number immediately following it....
 26263                                  
 26264                                          mov     [config_cmd],al         ; save original command code
 26265                                  	;and	al,NOT CONFIG_OPTION_QUERY
 26266                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 26267                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 26268                                          je      short not_final		; no, line number is not embedded
 26269                                  
 26270                                          push    ax                      ;
 26271                                          call    getchr                  ; ignore end-of-image errors,
 26272                                          mov     ah,al                   ; because if there's an error
 26273                                          call    getchr                  ; fetching the line number that's
 26274                                          xchg    al,ah                   ; supposed to be there, the next
 26275                                          mov     [linecount],ax          ; getchr call will get the same error
 26276                                          pop     ax
 26277                                  ;
 26278                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 26279                                  ;   which to obtain its original program name, it grovels through all of
 26280                                  ;   memory to find the filename that was used to exec it; it wants to find
 26281                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 26282                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 26283                                  ;   immediately before the filename, but since we are now storing line # info
 26284                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 26285                                  ;   spot.
 26286                                  ;
 26287                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 26288                                  ;   over the line number info, since we no longer need that info anyway. This
 26289                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 26290                                  ;   retrieved.
 26291                                  ;
 26292                                          cmp	byte [multi_pass_id],2	; final pass?
 26293                                          jb	short not_final		; no
 26294                                          ;test	word [install_flag],have_install_cmd
 26295                                  	test	byte [install_flag],have_install_cmd ; 1
 26296                                          jz	short final		; no install cmds, so yes it is
 26297                                          cmp	byte [multi_pass_id],3	; final pass?
 26298                                          jb	short not_final		; no
 26299                                  final:                                  ;
 26300                                  	mov	[es:si],al		; save backward-compatible command code
 26301                                  not_final:                              ;
 26302                                  ;endif
 26303                                  
 26304                                  %endif
 26305 00001F65 88C4                    	mov	ah,al
 26306 00001F67 E87B10                  	call	getchr
 26307 00001F6A 7314                    	jnc	short tryi
 26308                                  
 26309 00001F6C 803E[4903]02            	cmp	byte [multi_pass_id],2
 26310                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 26311                                  	; 27/10/2022
 26312 00001F71 73B2                    	jnb	short endconv	
 26313 00001F73 E90107                  	jmp	badop
 26314                                  	
 26315                                  coff:	
 26316                                  	; 11/12/2022
 26317                                  	; ds = cs
 26318                                  	;push	cs
 26319                                  	;pop	ds
 26320 00001F76 E86310                  	call	newline
 26321 00001F79 EBD6                    	jmp	short conflp	; 13/05/2019
 26322                                  
 26323                                  blank_line:
 26324 00001F7B E86710                  	call	getchr
 26325 00001F7E EBD1                    	jmp	short conflp
 26326                                  
 26327                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26328                                  ; 11/12/2022
 26329                                  ; (there is not a jump or call to here from anywhere!)
 26330                                  ;coff_p:
 26331                                  	;push	cs
 26332                                  	;pop	ds
 26333                                  
 26334                                  ;to handle install= commands,we are going to use multi-pass.
 26335                                  ;the first pass handles the other commands and only set install_flag when
 26336                                  ;it finds any install command. the second pass will only handle the
 26337                                  ;install= command.
 26338                                  
 26339                                  ;------------------------------------------------------------------------------
 26340                                  ;install command
 26341                                  ;------------------------------------------------------------------------------
 26342                                  
 26343                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26344                                  	; (SYSINIT:2250h)
 26345                                  tryi:
 26346 00001F80 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 26347 00001F85 7503                    	jne	short not_init_pass
 26348 00001F87 E92301                  	jmp	multi_try_doshi
 26349                                  not_init_pass:
 26350 00001F8A 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 26351                                          ; 11/12/2022
 26352                                  	;je	short multi_pass_coff2	; now it is NOPs
 26353 00001F8F 74E5                    	je	short coff
 26354                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26355                                  	;je	short multi_pass_coff	
 26356                                  					; This pass can be made use of if
 26357                                  					; we want do some config.sys process
 26358                                  					; after device drivers are loaded
 26359                                  					; and before install= commands
 26360                                  					; are processed
 26361                                  
 26362 00001F91 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 26363 00001F96 7411                    	je	short multi_try_i
 26364 00001F98 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 26365                                  	; 11/12/2022
 26366                                  	;je	short multi_pass_coff2
 26367 00001F9B 74D9                    	je	short coff
 26368                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26369                                  	;je	short multi_pass_coff	
 26370                                  
 26371                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 26372                                  ;       but don't process them now.        
 26373                                          
 26374 00001F9D 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 26375                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 26376                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26377 00001FA0 752A                    	jne	short tryb	
 26378                                  	
 26379                                  	;or	word [install_flag],have_install_cmd ; set the flag
 26380 00001FA2 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 26381                                  multi_pass_coff2:
 26382 00001FA7 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 26383                                  
 26384                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26385                                  ;precheck_installhigh:
 26386                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 26387                                  ;       jne     short tryb		; carry on with normal processing
 26388                                  ;	;or	word [install_flag],have_install_cmd
 26389                                  ;	or	byte [install_flag],have_install_cmd ; 1
 26390                                  ;       jmp	short coff
 26391                                  
 26392                                  multi_try_i:
 26393 00001FA9 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 26394                                  	;jne	short multi_try_n	; no, check for installhigh
 26395                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26396 00001FAC 7505                    	jne	short multi_pass_filter
 26397                                  
 26398                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26399                                  ;;ifdef	MULTI_CONFIG
 26400                                  ;       call    query_user              ; query the user if config_cmd
 26401                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26402                                  ;;endif
 26403                                  
 26404 00001FAE E873F0                  	call	do_install_exec 	;install it.
 26405 00001FB1 EBC3                    	jmp	short coff		;to handle next install= command.
 26406                                  
 26407                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26408                                  %if 0
 26409                                  
 26410                                  multi_try_n:
 26411                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 26412                                          jne	short multi_pass_filter	; no. ignore this.
 26413                                  ;ifdef	MULTI_CONFIG
 26414                                          call    query_user              ; query the user if config_cmd
 26415                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26416                                  ;endif
 26417                                  
 26418                                  ;       The memory environment is in its normal DOS state, so do
 26419                                  ;       the standard calls to set the alloc strategy for loading high
 26420                                  
 26421                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 26422                                  	int	21h			;get alloc strategy
 26423                                  	mov	bx,ax
 26424                                          push    bx                      ; save for the return
 26425                                  
 26426                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 26427                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 26428                                  	int	21h			;set alloc strategy
 26429                                  
 26430                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 26431                                          int     21h                     ; get link state
 26432                                          xor     ah,ah                   ; clear top byte
 26433                                          push    ax                      ; save for return
 26434                                  
 26435                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 26436                                  	mov	bx,1
 26437                                  	int	21h			;link in UMBs
 26438                                  
 26439                                  	call	do_install_exec 	;install it.
 26440                                  
 26441                                          mov     ax,(ALLOCOPER<<8)|3
 26442                                          pop     bx                      ; recover original link state
 26443                                          int     21h
 26444                                          pop     bx                      ; recover original alloc strategy
 26445                                          mov     ax,(ALLOCOPER<<8)|1
 26446                                          int     21h
 26447                                  
 26448                                  	jmp	coff			;to handle next install= command.
 26449                                  
 26450                                  %endif
 26451                                  
 26452                                  multi_pass_filter:
 26453 00001FB3 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 26454 00001FB6 740A                    	je	short multi_pass_adjust
 26455 00001FB8 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 26456 00001FBB 7405                    	je	short multi_pass_adjust
 26457 00001FBD 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 26458 00001FC0 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 26459                                  
 26460                                  multi_pass_adjust:			; these commands need to
 26461 00001FC2 FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 26462 00001FC6 FF06[D203]              	inc	word [count]		;  for newline proc.
 26463                                  
 26464                                  multi_pass_coff:
 26465                                  	; 11/12/2022
 26466 00001FCA EBAA                    	jmp	short coff		; to handle next install= commands.
 26467                                  
 26468                                  ;------------------------------------------------------------------------------
 26469                                  ; buffer command
 26470                                  ;------------------------------------------------------------------------------
 26471                                  
 26472                                  ;******************************************************************************
 26473                                  ;									      *
 26474                                  ; function: parse the parameters of buffers= command.			      *
 26475                                  ;									      *
 26476                                  ; input :								      *
 26477                                  ;	es:si -> parameters in command line.				      *
 26478                                  ; output:								      *
 26479                                  ;	buffers set							      *
 26480                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 26481                                  ;	h_buffers set if secondary buffer cache specified.		      *
 26482                                  ;									      *
 26483                                  ; subroutines to be called:						      *
 26484                                  ;	sysinit_parse							      *
 26485                                  ; logic:								      *
 26486                                  ; {									      *
 26487                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 26488                                  ;	set dx,cx to 0; 						      *
 26489                                  ;	reset buffer_slash_x;						      *
 26490                                  ;	while (end of command line)					      *
 26491                                  ;	{ sysinit_parse;						      *
 26492                                  ;	  if (no error) then						      *
 26493                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 26494                                  ;		    buffer_slash_x = 1					      *
 26495                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 26496                                  ;			  buffers = result_val._$P_picked_val;		      *
 26497                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 26498                                  ;	  else	{show error message;error exit} 			      *
 26499                                  ;	};								      *
 26500                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 26501                                  ; };									      *
 26502                                  ;									      *
 26503                                  ;******************************************************************************
 26504                                  
 26505                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26506                                  	; (SYSINIT:229Ch)
 26507                                  tryb:
 26508 00001FCC 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 26509 00001FCF 7557                    	jne	short tryc
 26510                                  
 26511                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26512                                  ;;ifdef	MULTI_CONFIG
 26513                                  ;       call    query_user              ; query the user if config_cmd
 26514                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 26515                                  ;;endif
 26516                                  
 26517                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26518                                  	; 18/12/2022
 26519 00001FD1 31C9                    	xor	cx,cx
 26520                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 26521 00001FD3 880E[C41C]              	mov	[p_buffer_slash_x],cl ; 0
 26522                                  
 26523 00001FD7 BF[7D1C]                	mov	di,buf_parms
 26524                                  	;xor	cx,cx	; 18/12/2022
 26525                                  	; 04/01/2023
 26526                                  	;mov	dx,cx
 26527                                  do7:
 26528 00001FDA E87B06                  	call	sysinit_parse
 26529 00001FDD 7303                    	jnc	short if7		; parse error,
 26530                                  	; 04/01/2023
 26531                                  	;call	badparm_p		;  and show messages and end the search loop.
 26532                                  	;;jmp	short sr7
 26533                                  	; 31/12/2022
 26534                                  ;sr7:
 26535                                  	;jmp	coff
 26536                                  	; 04/01/2023
 26537 00001FDF E9F405                  	jmp	badparm_p_coff
 26538                                  if7:
 26539 00001FE2 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26540 00001FE5 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 26541                                  	;cmp	word [result_val_swoff],switch_x
 26542 00001FE7 813E[C81C][BD1C]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 26543                                  	;jne	short if11
 26544                                  	; 31/12/2022
 26545 00001FED 74EB                    	je	short do7 ;je short en11
 26546                                  
 26547                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 26548                                  	;jmp	short en11 ; 31/12/2022
 26549                                  if11:
 26550                                  	;mov	ax,[rv_dword]
 26551 00001FEF A1[CA1C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26552 00001FF2 83F901                  	cmp	cx,1
 26553 00001FF5 7505                    	jne	short if13
 26554                                  
 26555 00001FF7 A3[C01C]                	mov	[p_buffers],ax
 26556                                  	;jmp	short en11
 26557                                  	; 31/12/2022
 26558 00001FFA EBDE                    	jmp	short do7
 26559                                  if13:
 26560 00001FFC A3[C21C]                	mov	[p_h_buffers],ax
 26561                                  en11:
 26562 00001FFF EBD9                    	jmp	short do7
 26563                                  en7:
 26564 00002001 833E[C01C]63            	cmp	word [p_buffers],99
 26565 00002006 760B                    	jbe	short if18
 26566                                  
 26567                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 26568                                  ;	jne	short if18
 26569                                  
 26570 00002008 E87806                  	call	badparm_p
 26571 0000200B C706[C21C]0000          	mov	word [p_h_buffers],0
 26572 00002011 EB12                    	jmp	short sr7
 26573                                  if18:
 26574 00002013 A1[C01C]                	mov	ax,[p_buffers]	; we don't have any problem.
 26575 00002016 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 26576                                  
 26577 00002019 A1[C21C]                	mov	ax,[p_h_buffers]
 26578 0000201C A3[9902]                	mov	[h_buffers],ax
 26579                                  
 26580                                  ;	mov	al,[p_buffer_slash_x]	; M016
 26581                                  ;	mov	[buffer_slash_x],al
 26582                                  
 26583 0000201F A1[2B03]                	mov	ax,[linecount]
 26584 00002022 A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 26585                                  	; 31/12/2022
 26586                                  	;jmp	short sr7
 26587                                  	; 04/01/2023
 26588                                  sr7:
 26589 00002025 E94EFF                  	jmp	coff
 26590                                  
 26591                                  ;------------------------------------------------------------------------------
 26592                                  ; break command
 26593                                  ;------------------------------------------------------------------------------
 26594                                  
 26595                                  ;****************************************************************************
 26596                                  ;									    *
 26597                                  ; function: parse the parameters of break = command.			    *
 26598                                  ;									    *
 26599                                  ; input :								    *
 26600                                  ;	es:si -> parameters in command line.				    *
 26601                                  ; output:								    *
 26602                                  ;	turn the control-c check on or off.				    *
 26603                                  ;									    *
 26604                                  ; subroutines to be called:						    *
 26605                                  ;	sysinit_parse							    *
 26606                                  ; logic:								    *
 26607                                  ; {									    *
 26608                                  ;	set di to brk_parms;						    *
 26609                                  ;	set dx,cx to 0; 						    *
 26610                                  ;	while (end of command line)					    *
 26611                                  ;	{ sysinit_parse;						    *
 26612                                  ;	  if (no error) then						    *
 26613                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 26614                                  ;		   set p_ctrl_break,on;					    *
 26615                                  ;	       else					  /*off 	 */ *
 26616                                  ;		   set p_ctrl_break,off;				    *
 26617                                  ;	  else {show message;error_exit};				    *
 26618                                  ;	};								    *
 26619                                  ;	if (no error) then						    *
 26620                                  ;	   dos function call to set ctrl_break check according to	    *
 26621                                  ; };									    *
 26622                                  ;									    *
 26623                                  ;****************************************************************************
 26624                                  
 26625                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26626                                  	; (SYSINIT:22FFh)
 26627                                  tryc:
 26628 00002028 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 26629 0000202B 7534                    	jne	short trym
 26630                                  
 26631                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26632                                  ;;ifdef MULTI_CONFIG
 26633                                  ;       call    query_user              ; query the user if config_cmd
 26634                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 26635                                  ;;endif
 26636 0000202D BF[CE1C]                	mov	di,brk_parms
 26637 00002030 31C9                    	xor	cx,cx
 26638                                  	; 04/01/2023
 26639                                  	;mov	dx,cx
 26640                                  do22:
 26641 00002032 E82306                  	call	sysinit_parse
 26642 00002035 7303                    	jnc	short if22		; parse error
 26643                                  	;call	badparm_p		;  show message and end the search loop.
 26644                                  	;;jmp	short sr22
 26645                                  	; 31/12/2022
 26646                                  ;sr22:
 26647                                  	;jmp	coff
 26648                                  	; 04/01/2023
 26649 00002037 E99C05                  	jmp	badparm_p_coff
 26650                                  if22:
 26651 0000203A 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26652 0000203D 7415                    	je	short en22		; then end the $endloop
 26653                                  
 26654                                  	;cmp	byte [result_val_itag],1
 26655 0000203F 803E[C71C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26656 00002044 7507                    	jne	short if26
 26657                                  
 26658 00002046 C606[F31C]01            	mov	byte [p_ctrl_break],1	; turn it on
 26659                                  	;jmp	short en26
 26660                                  	; 31/12/2022
 26661 0000204B EBE5                    	jmp	short do22
 26662                                  if26:
 26663 0000204D C606[F31C]00            	mov	byte [p_ctrl_break],0	; turn it off
 26664                                  en26:
 26665 00002052 EBDE                    	jmp	short do22		; we actually set the ctrl break
 26666                                  en22:
 26667 00002054 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 26668 00002056 B001                    	mov	al,1
 26669 00002058 8A16[F31C]              	mov	dl,[p_ctrl_break]
 26670 0000205C CD21                    	int	21h
 26671                                  	; 31/12/2022
 26672                                  	;jmp	short sr22
 26673                                  	; 04/01/2023
 26674                                  sr22:
 26675 0000205E E915FF                  	jmp	coff
 26676                                  
 26677                                  ;------------------------------------------------------------------------------
 26678                                  ; multitrack command
 26679                                  ;------------------------------------------------------------------------------
 26680                                  
 26681                                  ;******************************************************************************
 26682                                  ;									      *
 26683                                  ; function: parse the parameters of multitrack= command.		      *
 26684                                  ;									      *
 26685                                  ; input :								      *
 26686                                  ;	es:si -> parameters in command line.				      *
 26687                                  ; output:								      *
 26688                                  ;	turn multrk_flag on or off.					      *
 26689                                  ;									      *
 26690                                  ; subroutines to be called:						      *
 26691                                  ;	sysinit_parse							      *
 26692                                  ; logic:								      *
 26693                                  ; {									      *
 26694                                  ;	set di to brk_parms;						      *
 26695                                  ;	set dx,cx to 0; 						      *
 26696                                  ;	while (end of command line)					      *
 26697                                  ;	{ sysinit_parse;						      *
 26698                                  ;	  if (no error) then						      *
 26699                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 26700                                  ;		   set p_mtrk,on;					      *
 26701                                  ;	       else					  /*off 	 */   *
 26702                                  ;		   set p_mtrk,off;					      *
 26703                                  ;	  else {show message;error_exit};				      *
 26704                                  ;	};								      *
 26705                                  ;	if (no error) then						      *
 26706                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 26707                                  ;									      *
 26708                                  ; };									      *
 26709                                  ;									      *
 26710                                  ;******************************************************************************
 26711                                  
 26712                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26713                                  trym:
 26714 00002061 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 26715 00002064 7569                    	jne	short tryu
 26716                                  
 26717                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26718                                  ;;ifdef	MULTI_CONFIG
 26719                                  ;       call    query_user      ; query the user if config_cmd
 26720                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 26721                                  ;;endif
 26722 00002066 BF[D21D]                	mov	di,mtrk_parms
 26723 00002069 31C9                    	xor	cx,cx
 26724                                  	; 04/01/2023
 26725                                  	;mov	dx,cx
 26726                                  do31:
 26727 0000206B E8EA05                  	call	sysinit_parse
 26728 0000206E 7303                    	jnc	short if31	; parse error
 26729                                  	;call	badparm_p	;  show message and end the search loop.
 26730                                  	;;jmp	short sr31
 26731                                  	; 31/12/2022
 26732                                  ;sr31:
 26733                                  	;jmp	coff
 26734                                  	; 04/01/2023
 26735 00002070 E96305                  	jmp	badparm_p_coff
 26736                                  if31:
 26737 00002073 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26738 00002076 7415                    	je	short en31	; then end the $endloop
 26739                                  
 26740                                  	;cmp	byte [result_val_itag],1
 26741 00002078 803E[C71C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26742 0000207D 7507                    	jne	short if35
 26743                                  
 26744 0000207F C606[E61D]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 26745                                  	;jmp	short en35
 26746                                  	; 31/12/2022
 26747 00002084 EBE5                    	jmp	short do31
 26748                                  if35:
 26749 00002086 C606[E61D]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 26750                                  en35:
 26751 0000208B EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 26752                                  en31:
 26753 0000208D 1E                      	push	ds
 26754                                  	;;mov	ax,Bios_Data ; 70h
 26755                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26756                                  	; 21/10/2022
 26757 0000208E B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26758 00002091 8ED8                    	mov	ds,ax
 26759                                  
 26760 00002093 2E803E[E61D]00          	cmp	byte [cs:p_mtrk],0
 26761 00002099 7508                    	jne	short if39
 26762                                  
 26763 0000209B C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 26764 000020A1 EB06                    	jmp	short en39
 26765                                  if39:
 26766 000020A3 C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 26767                                  en39:
 26768 000020A9 1F                      	pop	ds
 26769                                  	; 31/12/2022
 26770                                  	;jmp	short sr31
 26771                                  	; 04/01/2023
 26772                                  sr31:
 26773 000020AA E9C9FE                  	jmp	coff
 26774                                  
 26775                                  ;----------------------------------------------------------------------------
 26776                                  ; DOS=HIGH/LOW command
 26777                                  ;----------------------------------------------------------------------------
 26778                                  
 26779                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26780                                  multi_try_doshi:
 26781 000020AD 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 26782 000020B0 7403                    	je	short it_is_h
 26783                                  skip_it:
 26784 000020B2 E9FEFE                  	jmp	multi_pass_filter
 26785                                  it_is_h:				; M003 - removed initing DevUMB
 26786                                  					;	 & runhigh
 26787                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26788                                  ;;ifdef	MULTI_CONFIG
 26789                                  ;       call    query_user              ; query the user if config_cmd
 26790                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 26791                                  ;;endif
 26792 000020B5 BF[1D1E]                	mov	di,dos_parms
 26793 000020B8 31C9                    	xor	cx,cx
 26794                                  	; 04/01/2023
 26795                                  	;mov	dx,cx
 26796                                  h_do_parse:
 26797 000020BA E89B05                  	call	sysinit_parse
 26798 000020BD 7303                    	jnc	short h_parse_ok	; parse error
 26799                                  h_badparm:
 26800                                  	; 04/01/2023
 26801                                  	;call	badparm_p		; show message and end the search loop.
 26802                                  	;;jmp	short h_end
 26803                                  	; 11/12/2022
 26804                                  ;h_end:
 26805                                  	;jmp	coff
 26806                                  	; 04/01/2023
 26807 000020BF E91405                  	jmp	badparm_p_coff	
 26808                                  h_parse_ok:
 26809 000020C2 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26810 000020C5 7405                    	je	short h_end		; then end the $endloop
 26811 000020C7 E81006                  	call	ProcDOS
 26812 000020CA EBEE                    	jmp	short h_do_parse
 26813                                  	; 11/12/2022
 26814                                  	; 04/01/2023
 26815                                  h_end:
 26816 000020CC E9A7FE                  	jmp	coff
 26817                                  
 26818                                  ;-----------------------------------------------------------------------------
 26819                                  ; devicehigh command
 26820                                  ;-----------------------------------------------------------------------------
 26821                                  
 26822                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26823                                  tryu:
 26824 000020CF 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 26825 000020D2 7539                    	jne	short tryd
 26826                                  
 26827                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26828                                  ;;ifdef	MULTI_CONFIG
 26829                                  ;       call    query_user              ; query the user if config_cmd
 26830                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 26831                                  ;;endif
 26832                                  
 26833                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26834                                  ;	call	InitVar
 26835                                  ;	call	ParseSize		; process the size= option
 26836                                  ;	;jnc	short tryu_0
 26837                                  	
 26838                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 26839                                  
 26840                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26841                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 26842                                  	;mov	[cs:badparm_seg], es
 26843                                  	; 11/12/2022
 26844                                  	; ds = cs
 26845 000020D4 8936[1114]              	mov	[badparm_off], si
 26846 000020D8 8C06[1314]              	mov	[badparm_seg], es
 26847                                  	;
 26848 000020DC E86608                  	call	ParseSize
 26849 000020DF 7303                    	jnc	short tryu_2	; 28/10/2022
 26850                                  
 26851                                  	;call	badparm_p
 26852                                  	;jmp	coff
 26853                                  	; 04/01/2023
 26854 000020E1 E9F204                  	jmp	badparm_p_coff
 26855                                  
 26856                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26857                                  ;tryu_0:
 26858                                  ;	mov	ax,[cs:DevSizeOption]
 26859                                  ;	or	ax,ax
 26860                                  ;	jnz	short tryu_2
 26861                                  ;
 26862                                  ;	call	ParseVar
 26863                                  ;	jnc	short tryu_2
 26864                                  ;tryu_1:
 26865                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 26866                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 26867                                  ;	call	badparm_p		; so all we have to do is choke and
 26868                                  ;	jmp	coff			; die, rather verbosely.
 26869                                  
 26870                                  tryu_2:	
 26871 000020E4 56                      	push	si
 26872 000020E5 06                      	push	es
 26873                                  tryu_3:
 26874 000020E6 268A04                  	mov	al,[es:si]
 26875 000020E9 3C0D                    	cmp	al,cr
 26876 000020EB 740C                    	je	short tryu_4
 26877 000020ED 3C0A                    	cmp	al,lf
 26878 000020EF 7408                    	je	short tryu_4
 26879 000020F1 E8CC0E                  	call	delim
 26880 000020F4 7403                    	jz	short tryu_4
 26881 000020F6 46                      	inc	si
 26882 000020F7 EBED                    	jmp	short tryu_3
 26883                                  tryu_4:	
 26884                                  	; 11/12/2022
 26885                                  	; ds = cs
 26886 000020F9 A2[921E]                	mov	[DevSavedDelim],al
 26887                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 26888                                  					;  it with null
 26889                                  	; 18/12/2022
 26890 000020FC 29DB                    	sub	bx,bx
 26891 000020FE 26881C                  	mov	[es:si],bl ; 0
 26892                                   	;mov	byte [es:si],0
 26893                                  
 26894 00002101 07                      	pop	es
 26895 00002102 5E                      	pop	si
 26896                                  
 26897                                  ;------------------------------------------------------------------------------
 26898                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26899                                  ;------------------------------------------------------------------------------
 26900                                  
 26901                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26902                                  ;
 26903                                  ;	call	UmbTest			; See if UMBs are around...
 26904                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 26905                                  ;
 26906                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26907                                  ;	jmp	short LoadDevice
 26908                                  
 26909                                  ;------------------------------------------------------------------------------
 26910                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26911                                  ;------------------------------------------------------------------------------
 26912                                  
 26913                                  NrmTst:
 26914                                  	; 11/12/2022
 26915                                  	; ds = cs
 26916                                  	;;mov	byte [cs:DeviceHi],0
 26917                                  	;mov	byte [DeviceHi],0
 26918                                  	; 18/12/2022
 26919                                  	; bx = 0
 26920 00002103 381E[6E1E]              	cmp	[DevUMB],bl ; 0
 26921                                  	;cmp	byte [DevUMB],0
 26922                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26923 00002107 7417                    	je	short LoadDevice	; no, we don't
 26924                                  	;mov	byte [cs:DeviceHi],1
 26925                                  	; 11/12/2022
 26926                                  	;mov	byte [DeviceHi],1
 26927                                  	; 18/12/2022
 26928 00002109 FEC3                    	inc	bl ; mov bl,1 ; (*)
 26929                                  	; 11/12/2022
 26930                                  	;jmp	short LoadDevice2	; 11/12/2022
 26931 0000210B EB13                    	jmp	short LoadDevice
 26932                                  
 26933                                  ;------------------------------------------------------------------------------
 26934                                  ; device command
 26935                                  ;------------------------------------------------------------------------------
 26936                                  
 26937                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26938                                  	; (SYSINIT:2401h)
 26939                                  tryd:
 26940                                  	; 11/12/2022
 26941 0000210D 31DB                    	xor 	bx, bx
 26942                                  	;
 26943 0000210F 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 26944 00002112 7403                    	je	short gotd
 26945                                  skip_it2:
 26946 00002114 E93302                  	jmp	tryq
 26947                                  gotd:
 26948                                  
 26949                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26950                                  ;;ifdef	MULTI_CONFIG
 26951                                  ;       call    query_user              ; query the user if config_cmd
 26952                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26953                                  ;;endif
 26954                                  	; 11/12/2022
 26955                                  	; ds = cs
 26956                                  	;mov	byte [DeviceHi],0
 26957                                  	;mov	word [DevSizeOption],0
 26958 00002117 891E[7E1E]              	mov	[DevSizeOption],bx ; 0
 26959 0000211B C606[921E]20            	mov	byte [DevSavedDelim],' '
 26960                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 26961                                  	;mov	word [cs:DevSizeOption],0
 26962                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 26963                                  					;  be replaced with a ' '
 26964                                  LoadDevice:                             ; device= or devicehigh= command.
 26965                                  	; 11/12/2022
 26966                                  	;mov	byte [DeviceHi],0
 26967 00002120 881E[7D1E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26968                                  LoadDevice2:
 26969                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26970                                  	;
 26971                                  	;push    cs
 26972                                          ;pop     ds
 26973                                  	;
 26974                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26975                                  	;mov	[bpb_addr+2],es
 26976                                  	;
 26977                                  	;mov	[DevCmdLine],si		; save it for ourself
 26978                                  	;mov	[DevCmdLine+2],es
 26979                                  	;
 26980                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26981                                  
 26982                                  	; 11/12/2022
 26983                                  	; ds = cs
 26984                                  	;mov	bx,cs
 26985                                  	;mov	ds,bx
 26986                                  
 26987                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26988 00002124 8936[F803]              	mov	[bpb_addr],si
 26989                                  	;mov	[cs:bpb_addr+2],es
 26990 00002128 8C06[FA03]              	mov	[bpb_addr+2],es
 26991                                  
 26992                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26993 0000212C 8936[8E1E]              	mov	[DevCmdLine],si
 26994                                  	;mov	[cs:DevCmdLine+2],es	
 26995 00002130 8C06[901E]              	mov	[DevCmdLine+2],es	
 26996                                  
 26997 00002134 E8E00E                  	call	round
 26998                                  	
 26999 00002137 E81B07                  	call	SizeDevice
 27000 0000213A 7215                    	jc	short BadFile
 27001                                  
 27002                                  	; 11/12/2022
 27003                                  	; ds = cs
 27004                                  
 27005                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 27006                                  
 27007                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27008                                  ;
 27009                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 27010                                  ;
 27011                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 27012                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 27013                                  ;	jz	short DevConvLoad	; the actual load.
 27014                                  ;
 27015                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 27016                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 27017                                  ;
 27018                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 27019                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 27020                                  ;
 27021                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 27022                                  ;
 27023                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 27024                                  ;	or	ax,ax
 27025                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 27026                                  ;
 27027                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 27028                                  ;	jge	short DevConvLoad
 27029                                  ;
 27030                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 27031                                  ;	call	StoLoadSize		; minsize for load UMB.
 27032                                  
 27033                                  ; - End DeviceHigh primary logic changes --------------------------------------
 27034                                  
 27035                                  DevConvLoad:
 27036                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27037 0000213C E83206                  	call	InitDevLoad
 27038                                  
 27039                                  	; 11/12/2022
 27040                                  	; ds = cs
 27041 0000213F A1[621E]                	mov	ax,[DevLoadAddr]
 27042 00002142 0306[601E]              	add	ax,[DevSize]
 27043 00002146 7206                    	jc	short NoMem
 27044 00002148 3906[641E]              	cmp	[DevLoadEnd],ax
 27045 0000214C 7312                    	jae	short LoadDev
 27046                                  	
 27047                                  	; 11/12/2022
 27048                                  	;mov	ax,[cs:DevLoadAddr]
 27049                                  	;add	ax,[cs:DevSize]
 27050                                  	;jc	short NoMem
 27051                                  	;cmp	[cs:DevLoadEnd],ax
 27052                                  	;jae	short LoadDev
 27053                                  NoMem:
 27054                                  	; 11/12/2022
 27055                                  	; ds = cs
 27056                                  	;jmp	mem_err
 27057 0000214E E9050F                  	jmp	mem_err2
 27058                                  
 27059                                  BadFile:
 27060                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27061                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 27062                                  	;cmp    byte [es:si],' '
 27063                                          ;jae	short tryd_2
 27064 00002151 26803C0D                	cmp	byte [es:si],0Dh	; cr
 27065 00002155 7503                            jne	short tryd_2
 27066 00002157 E91D05                  	jmp	badop
 27067                                  tryd_2:
 27068 0000215A E80811                  	call	badload
 27069 0000215D E916FE                  	jmp	coff
 27070                                  
 27071                                  LoadDev:
 27072 00002160 06                      	push	es
 27073 00002161 1F                      	pop	ds
 27074                                  
 27075 00002162 89F2                    	mov	dx,si			;ds:dx points to file name
 27076 00002164 E83F07                  	call	ExecDev			; load device driver using exec call
 27077                                  badldreset:
 27078 00002167 1E                      	push	ds
 27079 00002168 07                      	pop	es			;es:si back to config.sys
 27080 00002169 0E                      	push	cs
 27081 0000216A 1F                      	pop	ds			;ds back to sysinit
 27082 0000216B 72E4                    	jc	short BadFile
 27083                                  goodld:
 27084                                  	; 11/12/2022
 27085                                  	; ds = cs
 27086                                  
 27087 0000216D 06                      	push	es
 27088 0000216E 56                      	push	si
 27089 0000216F E85107                  	call	RemoveNull
 27090 00002172 06                      	push	es
 27091 00002173 56                      	push	si
 27092                                  
 27093 00002174 0E                      	push	cs
 27094 00002175 07                      	pop	es
 27095                                  
 27096 00002176 1E                      	push	ds
 27097 00002177 56                      	push	si
 27098                                  
 27099                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 27100                                  	; 31/12/2022
 27101                                  	; ds = cs
 27102 00002178 C536[661E]              	lds	si,[DevEntry]
 27103                                  	
 27104                                  	;test	word [si+4],8000h
 27105                                  	; 11/12/2022
 27106 0000217C F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 27107                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 27108 00002180 7511                    	jnz	short got_device_com_cont   ; no.
 27109                                  
 27110 00002182 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 27111                                  	;cmp	byte [si+32],26
 27112 00002187 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 27113 0000218B 7206                    	jb	short got_device_com_cont
 27114                                  
 27115 0000218D 5E                      	pop	si
 27116 0000218E 1F                      	pop	ds
 27117                                  
 27118 0000218F 5E                      	pop	si			; clear the stack
 27119 00002190 07                      	pop	es
 27120                                  
 27121                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27122                                  	;call	RetFromUM		; Do this before we leave
 27123                                  
 27124 00002191 EB55                    	jmp	short badnumblock
 27125                                  
 27126                                  got_device_com_cont:
 27127 00002193 5E                      	pop	si
 27128 00002194 1F                      	pop	ds
 27129                                  
 27130                                  	; 11/12/2022
 27131                                  	; ds = cs
 27132                                  
 27133 00002195 E86505                  	call	LieInt12Mem
 27134 00002198 E8C405                  	call	UpdatePDB		; update the PSP:2 value M020
 27135                                  
 27136                                  	; 11/12/2022
 27137                                  	; ds = cs
 27138                                  	; 08/09/2023
 27139 0000219B 31C0                    	xor	ax, ax ; 0
 27140 0000219D 3806[0D14]              	cmp	byte [multdeviceflag],al ; 0
 27141                                  	;cmp	byte [multdeviceflag],0
 27142                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 27143                                  					;  driver in the file ; M027
 27144 000021A1 750B                    	jne	short skip_pass_limit	;		      ; M027
 27145                                  
 27146                                  	; 11/12/2022
 27147                                  	; ds = cs
 27148                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 27149                                  	;mov	bx,[cs:DevLoadEnd]
 27150                                  	;mov	[cs:break_addr+2],bx
 27151                                  
 27152                                  	;mov	word [break_addr],0
 27153                                  	; 08/09/2023
 27154 000021A3 A3[F403]                	mov	[break_addr],ax ; 0
 27155 000021A6 8B1E[641E]              	mov	bx,[DevLoadEnd]
 27156 000021AA 891E[F603]              	mov	[break_addr+2],bx
 27157                                  
 27158                                  skip_pass_limit:
 27159                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 27160                                  ;	number of installed devices (including DblSpace drives) where
 27161                                  ;	"drivenumber" is the number that the next block device will
 27162                                  ;	be assigned to. Because some naughty device drivers (like
 27163                                  ;	interlnk) look at the internal DOS variable instead of the
 27164                                  ;	value we pass it, we'll temporarily stick our value into
 27165                                  ;	DOS DATA while we're initializing the device drivers.
 27166                                  ;
 27167                                  ;	Note that this will make it impossible for this device
 27168                                  ;	driver to access the DblSpace drive letters, whether
 27169                                  ;	they are swapped-hosts or unswapped compressed drives,
 27170                                  ;	during its initialization phase.
 27171                                  
 27172                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27173                                  	;push	ds
 27174                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27175                                  	;
 27176                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 27177                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 27178                                  	;mov	ah,al
 27179                                  	;
 27180                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 27181                                  	;pop	ds
 27182                                  	;
 27183                                  	;push	ax			; save real sysi_numio/ncds in ax
 27184                                  
 27185                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27186                                  	; (SYSINIT:24B9h)
 27187                                  
 27188 000021AE BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 27189 000021B1 E8AB0E                  	call	calldev 		; calldev (sdevstrat);
 27190 000021B4 BB0800                  	mov	bx,SYSDEV.INT ; 8
 27191 000021B7 E8A50E                  	call	calldev 		; calldev (sdevint);
 27192                                  
 27193                                  	; 11/12/2022
 27194                                  	; ds <> cs
 27195                                  
 27196                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27197                                  	;pop	ax			; get real sysi_numio value
 27198                                  	;push	ds
 27199                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27200                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 27201                                  	;pop	ds
 27202                                  
 27203                                  	; 11/12/2022
 27204 000021BA 0E                      	push	cs
 27205 000021BB 1F                      	pop	ds
 27206                                  
 27207 000021BC E86E05                  	call	TrueInt12Mem
 27208                                  
 27209                                  	; 11/12/2022
 27210                                  	; ds = cs
 27211                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 27212                                  	;mov	[cs:DevBrkAddr],ax
 27213                                  	;mov	ax,[cs:break_addr+2]
 27214                                  	;mov	[cs:DevBrkAddr+2],ax
 27215 000021BF A1[F403]                	mov	ax,[break_addr]	
 27216 000021C2 A3[6A1E]                	mov	[DevBrkAddr],ax
 27217 000021C5 A1[F603]                	mov	ax,[break_addr+2]
 27218 000021C8 A3[6C1E]                	mov	[DevBrkAddr+2],ax
 27219                                  
 27220                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27221                                  	;call	RetFromUM		; There we go... all done.
 27222                                  
 27223                                  	; 11/12/2022
 27224 000021CB 803E[6E1E]00            	cmp	byte [DevUMB],0	
 27225                                  	;cmp	byte [cs:DevUMB],0
 27226 000021D0 7403                    	je	short tryd_3
 27227 000021D2 E8D208                  	call	AllocUMB
 27228                                  	; 31/12/2022
 27229                                  	; ds= cs
 27230                                  tryd_3:
 27231                                  
 27232                                  ;ifndef ROMDOS
 27233                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 27234                                  
 27235                                  	; 11/12/2022
 27236                                  	; ds = cs
 27237                                  	
 27238                                  	;cmp	byte [cs:runhigh],0FFh
 27239 000021D5 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 27240 000021DA 7503                    	jne	short tryd_4
 27241                                  	
 27242                                  	; 11/12/2022
 27243                                  	; ds = cs
 27244 000021DC E8F4E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 27245                                  tryd_4:
 27246                                  ;endif ; ROMDOS
 27247                                  
 27248 000021DF 5E                      	pop	si
 27249 000021E0 1F                      	pop	ds
 27250 000021E1 C60400                  	mov	byte [si],0		; *p = 0;
 27251                                  
 27252 000021E4 0E                      	push	cs
 27253 000021E5 1F                      	pop	ds
 27254                                  
 27255 000021E6 EB1F                    	jmp	short was_device_com
 27256                                  
 27257                                  ;----------------------------------------------------------------------------
 27258                                  
 27259                                  ;02/04/2019 - Retro DOS v4.0
 27260                                  
 27261                                  badnumblock:
 27262 000021E8 0E                      	push	cs
 27263 000021E9 1F                      	pop	ds
 27264 000021EA BA[5E37]                	mov	dx,badblock
 27265 000021ED E89D10                  	call	print
 27266                                  
 27267                                  ;------ fall thru -----------------------------------------------------------
 27268                                  
 27269                                  erase_dev_do:				; modified to show message "error in config.sys..."
 27270                                  	
 27271                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 27272                                  	
 27273 000021F0 5E                      	pop	si
 27274 000021F1 07                      	pop	es
 27275                                  
 27276 000021F2 0E                      	push	cs
 27277 000021F3 1F                      	pop	ds
 27278                                  
 27279                                  skip1_resetmemhi:
 27280                                  	; 11/12/2022
 27281                                  	; ds = cs
 27282 000021F4 833E[FD03]00            	cmp	word [configmsgflag],0
 27283                                  	;cmp	word [cs:configmsgflag],0
 27284 000021F9 7409                    	je	short no_error_line_msg
 27285                                  
 27286 000021FB E8AD04                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 27287                                  	; 11/12/2022
 27288                                  	; ds = cs
 27289                                  	;mov	word [cs:configmsgflag],0
 27290 000021FE C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 27291                                  
 27292                                  no_error_line_msg:
 27293 00002204 E96FFD                  	jmp	coff
 27294                                  
 27295                                  ;----------------------------------------------------------------------------
 27296                                  
 27297                                  was_device_com:
 27298                                  	; 14/12/2022
 27299                                  	; ds = cs
 27300 00002207 A1[6C1E]                	mov	ax,[DevBrkAddr+2]
 27301                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 27302 0000220A 3B06[641E]              	cmp	ax,[DevLoadEnd]
 27303                                  	;cmp	ax,[cs:DevLoadEnd]
 27304 0000220E 7605                    	jbe	short breakok
 27305                                  
 27306 00002210 5E                      	pop	si
 27307 00002211 07                      	pop	es
 27308 00002212 E93CFF                  	jmp	BadFile
 27309                                  
 27310                                  breakok:
 27311                                  	; 14/12/2022
 27312                                  	; ds = cs
 27313 00002215 C43E[6B02]              	les	di,[DOSINFO] 
 27314 00002219 C516[661E]              	lds	dx,[DevEntry]
 27315                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 27316 0000221D 89D6                    	mov	si,dx
 27317                                  
 27318                                  	; 14/11/2022
 27319                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 27320                                  
 27321                                  	; 14/12/2022
 27322                                  	; ds <> cs
 27323                                  	
 27324                                  	;mov	ax,[si+4]
 27325 0000221F 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 27326                                  	; 12/12/2022
 27327 00002222 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 27328                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 27329 00002225 7426                    	jz	short isblock
 27330                                  
 27331                                  ;------ lets deal with character devices
 27332                                  
 27333 00002227 2E800E[1014]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27334 0000222D E8C606                  	call	DevSetBreak		;go ahead and alloc mem for device
 27335                                  jc_edd:
 27336 00002230 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 27337                                  
 27338                                  	; 12/12/2022
 27339 00002232 A801                    	test	al,ISCIN
 27340                                  	;test	ax,ISCIN ; 1		;is it a console in?
 27341 00002234 7408                    	jz	short tryclk
 27342                                  
 27343 00002236 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 27344 0000223A 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 27345                                  tryclk: 
 27346                                  	; 12/12/2022
 27347 0000223E A808                    	test	al,ISCLOCK
 27348                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 27349 00002240 7408                    	jz	short golink
 27350                                  
 27351 00002242 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 27352 00002246 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 27353                                  golink: 
 27354 0000224A E9B000                  	jmp	linkit
 27355                                  
 27356                                  ;------ deal with block device drivers
 27357                                  
 27358                                  isblock:
 27359 0000224D 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 27360 00002251 08C0                    	or	al,al
 27361 00002253 749B                    	jz	short erase_dev_do
 27362                                  	;mov	[si+10],al
 27363 00002255 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 27364                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27365                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 27366                                  perdrv:
 27367 00002258 98                      	cbw				; warning no device > 127 units
 27368 00002259 89C1                    	mov	cx,ax
 27369 0000225B 88E6                    	mov	dh,ah
 27370                                  	;mov	dl,[es:di+32]
 27371 0000225D 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 27372 00002261 88D4                    	mov	ah,dl
 27373 00002263 00C4                    	add	ah,al			; check for too many devices
 27374 00002265 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 27375 00002268 7603                    	jbe	short ok_block
 27376 0000226A E97BFF                  	jmp	badnumblock
 27377                                  
 27378                                  ok_block:
 27379 0000226D 2E800E[1014]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27380 00002273 E88006                  	call	DevSetBreak		; alloc the device
 27381 00002276 72B8                    	jc	short jc_edd
 27382 00002278 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 27383                                  
 27384 0000227C 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 27385 00002281 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 27386                                  perunit:
 27387 00002286 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 27388                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 27389                                  	; 11/12/2022
 27390 0000228B 26C46E00                	les	bp,[es:bp]
 27391                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27392                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 27393                                  scandpb:
 27394                                  	;cmp	word [es:bp+25],-1
 27395 0000228F 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 27396 00002294 7406                    	je	short foundpb
 27397                                  	;les	bp,[es:bp+25]
 27398 00002296 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 27399 0000229A EBF3                    	jmp	short scandpb
 27400                                  foundpb:
 27401 0000229C 2EA1[6A1E]              	mov	ax,[cs:DevBrkAddr]
 27402 000022A0 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 27403 000022A4 2EA1[6C1E]              	mov	ax,[cs:DevBrkAddr+2]
 27404 000022A8 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 27405                                  
 27406 000022AC 2EC42E[6A1E]            	les	bp,[cs:DevBrkAddr]
 27407 000022B1 2E8306[6A1E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 27408                                  
 27409 000022B7 E81B06                  	call	RoundBreakAddr
 27410                                  
 27411 000022BA 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 27412 000022C0 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 27413                                  
 27414 000022C5 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 27415 000022C7 43                      	inc	bx
 27416 000022C8 43                      	inc	bx			;point to next guy
 27417                                  	;mov	[es:bp+DPB.DRIVE],dx
 27418                                  	; 11/12/2022
 27419 000022C9 26895600                	mov	[es:bp],dx ; 13/05/2019
 27420                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27421                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 27422                                  	
 27423 000022CD B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 27424 000022CF CD21                    	int	21h
 27425                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 27426                                  			; DS:SI -> BPB (BIOS Parameter Block)
 27427                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 27428                                  
 27429                                  	;mov	ax,[es:bp+2]
 27430 000022D1 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 27431 000022D5 06                      	push	es
 27432 000022D6 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 27433                                  	;cmp	ax,[es:di+10h]
 27434 000022DB 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 27435 000022DF 07                      	pop	es
 27436                                  	;jna	short iblk_1
 27437                                  	;jmp	short bad_bpb_size_sector
 27438                                  	; 29/10/2022
 27439 000022E0 775A                    	ja	short bad_bpb_size_sector
 27440                                  iblk_1:
 27441 000022E2 1E                      	push	ds
 27442 000022E3 52                      	push	dx
 27443                                  
 27444 000022E4 2EC516[661E]            	lds	dx,[cs:DevEntry]
 27445                                  	;mov	[es:bp+13h],dx
 27446 000022E9 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 27447                                  	;mov	[es:bp+15h],ds
 27448 000022ED 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 27449                                  
 27450 000022F1 5A                      	pop	dx
 27451 000022F2 1F                      	pop	ds
 27452                                  
 27453 000022F3 42                      	inc	dx
 27454 000022F4 FEC6                    	inc	dh
 27455 000022F6 E28E                    	loop	perunit
 27456                                  
 27457 000022F8 0E                      	push	cs
 27458 000022F9 1F                      	pop	ds
 27459                                  
 27460 000022FA E8C8E8                  	call	TempCDS 		; set cds for new drives
 27461                                  linkit:
 27462 000022FD 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 27463 00002302 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 27464 00002306 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 27465                                  
 27466 0000230A 2EC536[661E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 27467 0000230F 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 27468 00002313 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 27469 00002317 8B04                    	mov	ax,[si]			;get pointer to next device
 27470 00002319 2EA3[661E]              	mov	[cs:DevEntry],ax	;and save it
 27471                                  
 27472 0000231D 890C                    	mov	[si],cx			;link in the driver
 27473 0000231F 895402                  	mov	[si+2],dx
 27474                                  enddev:
 27475 00002322 5E                      	pop	si
 27476 00002323 07                      	pop	es
 27477 00002324 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 27478 00002325 740B                    	jz	short coffj3
 27479                                  
 27480 00002327 2EFE06[0D14]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 27481 0000232C E8E905                  	call	DevBreak		; M009
 27482                                  	; 11/12/2022
 27483                                  	; ds = cs (DevBreak)
 27484                                  
 27485                                  	; 03/04/2019 - Retro DOS v4.0
 27486                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 27487 0000232F E93BFE                  	jmp	goodld			; otherwise pretend we loaded it in
 27488                                  coffj3: 
 27489                                  	; 18/12/2022
 27490                                  	; ax = 0
 27491 00002332 2EA2[0D14]              	mov	[cs:multdeviceflag],al ; 0
 27492                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 27493 00002336 E8DF05                  	call	DevBreak
 27494                                  	; 11/12/2022
 27495                                  	; ds = cs (DevBreak)
 27496                                  	
 27497                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 27498                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 27499                                  ;					;  created a bogus arena to try
 27500                                  ;					;  to protect some of its resident-
 27501                                  ;					;  init code.
 27502                                  	;call	CheckDoubleSpace
 27503 00002339 E93AFC                  	jmp	coff
 27504                                  
 27505                                  ;----------------------------------------------------------------------------
 27506                                  
 27507                                  ;CheckDoubleSpace:
 27508                                  ;;;;	ifdef	dblspace_hooks
 27509                                  ;
 27510                                  ;;	Now check for two special MagicDrv cases:
 27511                                  ;;
 27512                                  ;;       a) the last driver load was MagicDrv final placement:
 27513                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 27514                                  ;;
 27515                                  ;;       b) MagicDrv is currently in temporary home:
 27516                                  ;;          -> call it to give it a chance to mount and shuffle drives
 27517                                  ;
 27518                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 27519                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 27520                                  ;
 27521                                  ;;	Now inquire of driver whether it is present, and final located
 27522                                  ;
 27523                                  ;	mov	ax,multMagicdrv ; 4A11h
 27524                                  ;	mov	bx,MD_VERSION ; 0
 27525                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 27526                                  ;	or	ax,ax			; is it there?
 27527                                  ;	jnz	short no_more_magic_calls ; done if not
 27528                                  ;
 27529                                  ;	test	dx,8000h		; is it final placed?
 27530                                  ;	jnz	short magic_not_yet_home ;  skip if not
 27531                                  ;
 27532                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 27533                                  ;;	don't keep checking it, and add its number of drive letters
 27534                                  ;;	to drivenumber.
 27535                                  ;
 27536                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 27537                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 27538                                  ;;					;  the drive number we'll pass to the
 27539                                  ;;					;  next loadable block device.
 27540                                  ;
 27541                                  ;	jmp	short no_more_magic_calls ; and finished.
 27542                                  ;
 27543                                  ;magic_not_yet_home:
 27544                                  ;	push	es
 27545                                  ;	push	si
 27546                                  ;
 27547                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 27548                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 27549                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 27550                                  ;
 27551                                  ;	mov	bx,2
 27552                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 27553                                  ;;					;   by this many units
 27554                                  ;
 27555                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 27556                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 27557                                  ;;					;  sees this, to prevent bad things
 27558                                  ;;					;  from happening if people run the
 27559                                  ;;					;  new driver with an old BIOS
 27560                                  ;	call	far [cs:MagicBackdoor]
 27561                                  ;
 27562                                  ;	pop	si
 27563                                  ;	pop	es
 27564                                  ;
 27565                                  ;no_more_magic_calls:
 27566                                  ;
 27567                                  ;;;;	endif
 27568                                  ;	retn
 27569                                  
 27570                                  ; 03/04/2019 - Retro DOS v4.0
 27571                                  
 27572                                  bad_bpb_size_sector:
 27573 0000233C 5E                      	pop	si
 27574 0000233D 07                      	pop	es
 27575 0000233E BA[8036]                	mov	dx,badsiz_pre
 27576 00002341 BB[5E36]                	mov	bx,crlfm
 27577 00002344 E8240F                  	call	prnerr
 27578                                  
 27579 00002347 E92CFC                  	jmp	coff
 27580                                  
 27581                                  ;------------------------------------------------------------------------------
 27582                                  ; country command
 27583                                  ;      the syntax is:
 27584                                  ;	country=country id {,codepage {,path}}
 27585                                  ;	country=country id {,,path}	:default codepage id in dos
 27586                                  ;------------------------------------------------------------------------------
 27587                                  
 27588                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27589                                  	; (SYSINIT:2663h)
 27590                                  tryq:
 27591 0000234A 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 27592 0000234D 7403                    	je	short tryq_cont
 27593                                  skip_it3:
 27594 0000234F E90801                  	jmp	tryf
 27595                                  tryq_cont:
 27596                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27597                                  ;;ifdef	MULTI_CONFIG
 27598                                  ;       call    query_user		; query the user if config_cmd
 27599                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 27600                                  ;;endif
 27601                                  	; 14/12/2022
 27602                                  	; ds = cs
 27603                                  	; bx = 0
 27604                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 27605                                  	;mov	word [cs:p_code_page],0
 27606 00002352 881E[1633]              	mov	[cntry_drv],bl ; 0
 27607 00002356 891E[2B1D]              	mov	[p_code_page],bx ; 0
 27608                                  	
 27609 0000235A BF[F41C]                	mov	di,cntry_parms
 27610 0000235D 31C9                    	xor	cx,cx
 27611                                  	; 04/01/2023
 27612                                  	;mov	dx,cx
 27613                                  do52:
 27614 0000235F E8F602                  	call	sysinit_parse
 27615 00002362 730B                    	jnc	short if52		; parse error,check error code and
 27616                                  
 27617 00002364 E8E000                  	call	cntry_error		; show message and end the search loop.
 27618                                  	; 14/12/2022
 27619                                  	; ds = cs
 27620 00002367 C706[291D]FFFF          	mov	word [p_cntry_code],-1
 27621                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 27622 0000236D EB34                    	jmp	short sr52
 27623                                  if52:
 27624 0000236F 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 27625 00002372 742F                    	jz	short sr52		; then end the search loop
 27626                                  
 27627                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 27628                                  	; 14/12/2022
 27629                                  	; ds = cs
 27630 00002374 803E[C61C]01            	cmp	byte [result_val],_$P_Number	
 27631                                  	;cmp	byte [cs:result_val],_$P_Number
 27632 00002379 7512                    	jnz	short if56
 27633                                  
 27634                                  	;;mov	ax,[cs:rw_dword]
 27635                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27636                                  	; 14/12/2022
 27637 0000237B A1[CA1C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27638 0000237E 83F901                  	cmp	cx,1
 27639 00002381 7505                    	jne	short if57
 27640                                  
 27641                                  	;mov	[cs:p_cntry_code],ax
 27642                                  	; 14/12/2022
 27643 00002383 A3[291D]                	mov	[p_cntry_code],ax
 27644                                  
 27645                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27646                                  	;jmp	short en57
 27647                                  	; 12/12/2022
 27648                                  	;jmp	short en56
 27649 00002386 EBD7                    	jmp	short do52
 27650                                  
 27651                                  if57:
 27652                                  	;mov	[cs:p_code_page],ax
 27653                                  	; 14/12/2022
 27654                                  	; ds = cs
 27655 00002388 A3[2B1D]                	mov	[p_code_page],ax
 27656                                  en57:
 27657                                  	;jmp	short en56		; path entered
 27658                                  	; 12/12/2022
 27659 0000238B EBD2                    	jmp	short do52
 27660                                  
 27661                                  if56:
 27662 0000238D 1E                      	push	ds
 27663 0000238E 06                      	push	es
 27664 0000238F 56                      	push	si
 27665 00002390 57                      	push	di
 27666                                  
 27667 00002391 0E                      	push	cs
 27668 00002392 07                      	pop	es
 27669                                  
 27670                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 27671                                  	; 14/12/2022
 27672 00002393 C536[CA1C]              	lds	si,[rv_dword]
 27673 00002397 BF[1633]                	mov	di,cntry_drv
 27674 0000239A E8BD0E                  	call	move_asciiz
 27675                                  
 27676 0000239D 5F                      	pop	di
 27677 0000239E 5E                      	pop	si
 27678 0000239F 07                      	pop	es
 27679 000023A0 1F                      	pop	ds
 27680                                  
 27681                                  en56:
 27682 000023A1 EBBC                    	jmp	short do52
 27683                                  
 27684                                  sr52:
 27685                                  	; 14/12/2022
 27686                                  	; ds = cs
 27687 000023A3 833E[291D]FF            	cmp	word [p_cntry_code],-1
 27688                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 27689 000023A8 7509                    	jne	short tryq_open
 27690 000023AA E9C9FB                  	jmp	coff
 27691                                  
 27692                                  tryqbad:				;"invalid country code or code page"
 27693 000023AD F9                      	stc
 27694 000023AE BA[C736]                	mov     dx,badcountry
 27695 000023B1 EB79                    	jmp     tryqchkerr
 27696                                  
 27697                                  tryq_open:
 27698                                  	; 14/12/2022
 27699                                  	; ds = cs
 27700 000023B3 803E[1633]00            	cmp	byte [cntry_drv],0
 27701                                  	;cmp	byte [cs:cntry_drv],0
 27702 000023B8 7405                    	je	short tryq_def
 27703 000023BA BA[1633]                	mov	dx,cntry_drv
 27704 000023BD EB03                    	jmp	short tryq_openit
 27705                                  
 27706                                  tryq_def:
 27707 000023BF BA[1833]                	mov	dx,cntry_root
 27708                                  tryq_openit:
 27709 000023C2 B8003D                  	mov	ax,3D00h		;open a file
 27710 000023C5 F9                      	stc
 27711 000023C6 CD21                    	int	21h
 27712 000023C8 7242                    	jc	short tryqfilebad	;open failure
 27713                                  
 27714                                  	; 14/12/2022
 27715                                  	; ds = cs
 27716 000023CA A3[D803]                	mov	[cntryfilehandle],ax
 27717                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 27718 000023CD 89C3                    	mov	bx,ax
 27719 000023CF A1[291D]                	mov	ax,[p_cntry_code]
 27720 000023D2 8B16[2B1D]              	mov	dx,[p_code_page]
 27721                                  	;mov	ax,[cs:p_cntry_code]
 27722                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 27723                                  	;mov	cx,[cs:memhi]
 27724 000023D6 8B0E[E003]              	mov	cx,[memhi]
 27725 000023DA 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 27726                                  					; M023
 27727                                  	; 14/12/2022
 27728                                  	; ds = cs
 27729 000023DE 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 27730                                  	;cmp	cx,[cs:ALLOCLIM]
 27731 000023E2 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 27732                                  
 27733 000023E4 BE[1633]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 27734 000023E7 803C00                  	cmp	byte [si],0 		;default path?
 27735 000023EA 7502                    	jne	short tryq_set_for_dos
 27736                                  
 27737 000023EC 46                      	inc	si
 27738 000023ED 46                      	inc	si			;ds:si -> cntry_root
 27739                                  
 27740                                  tryq_set_for_dos:
 27741                                  	; 14/12/2022
 27742                                  	; ds = cs
 27743 000023EE C43E[7702]              	les	di,[sysi_country]
 27744                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 27745 000023F2 57                      	push	di			;save di
 27746                                  	;add	di,8
 27747 000023F3 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 27748 000023F6 E8610E                  	call	move_asciiz		;set the path to country.sys in dos.
 27749 000023F9 5F                      	pop	di			;es:di -> country info tab again.
 27750                                  
 27751                                  	; 14/12/2022	
 27752 000023FA 8B0E[E003]              	mov	cx,[memhi]
 27753                                  	;mov	cx,[cs:memhi]
 27754 000023FE 8ED9                    	mov	ds,cx
 27755 00002400 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 27756 00002402 E8DD0C                  	call	setdoscountryinfo	;now do the job!!!
 27757                                  	; ds <> cs ; 14/12/2022
 27758 00002405 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 27759                                  
 27760 00002407 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 27761 0000240A 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 27762                                  
 27763                                  tryqfilebad:
 27764 0000240C 0E                      	push	cs
 27765 0000240D 07                      	pop	es
 27766 0000240E 2E803E[1633]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 27767 00002414 7405                    	je	short tryqdefbad
 27768                                  
 27769 00002416 BE[1633]                	mov	si,cntry_drv
 27770 00002419 EB03                    	jmp	short tryqbadload
 27771                                  
 27772                                  tryqdefbad:				;default file has been used.
 27773 0000241B BE[1833]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 27774                                  tryqbadload:
 27775 0000241E E8440E                  	call	badload 		;ds will be restored to sysinit_seg
 27776                                  	;mov	cx,[cs:CONFBOT]
 27777                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27778                                  	;mov	cx,[cs:top_of_cdss]
 27779                                  	; 11/12/2022
 27780                                  	; ds = cs
 27781 00002421 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 27782 00002425 8EC1                    	mov	es,cx			;restore es -> confbot.
 27783 00002427 EB13                    	jmp	short coffj4
 27784                                  
 27785                                  tryqmemory:
 27786 00002429 BA[0A37]                	mov	dx,insufmemory
 27787                                  tryqchkerr:
 27788                                  	;mov	cx,[cs:CONFBOT]
 27789                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27790                                  	;mov	cx,[cs:top_of_cdss]
 27791                                  	; 12/12/2022
 27792 0000242C 0E                      	push	cs
 27793 0000242D 1F                      	pop	ds
 27794 0000242E 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 27795 00002432 8EC1                    	mov	es,cx			;restore es -> confbot seg
 27796                                  	;push	cs
 27797                                  	;pop	ds			;restore ds to sysinit_seg
 27798 00002434 7306                    	jnc	short coffj4		;if no error,then exit
 27799                                  
 27800 00002436 E8540E                  	call	print			;else show error message
 27801 00002439 E86F02                  	call	error_line
 27802                                  coffj4:
 27803                                  	;mov	bx,[cs:cntryfilehandle]
 27804                                  	; 11/12/2022
 27805                                  	; ds = cs
 27806 0000243C 8B1E[D803]              	mov	bx,[cntryfilehandle]
 27807 00002440 B43E                    	mov	ah,3Eh
 27808 00002442 CD21                    	int	21h			;close a file. don't care even if it fails.
 27809 00002444 E92FFB                  	jmp	coff
 27810                                  
 27811                                  ;--------------------------------------------
 27812                                  
 27813                                  cntry_error:
 27814                                  
 27815                                  ;function: show "invalid country code or code page" messages,or
 27816                                  ;		"error in country command" depending on the error code
 27817                                  ;		in ax returned by sysparse;
 27818                                  ;in:	ax - error code
 27819                                  ;	ds - sysinitseg
 27820                                  ;	es - confbot
 27821                                  ;out:	show message.  dx destroyed.
 27822                                  
 27823 00002447 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 27824 0000244A 7505                    	jne	short if64
 27825 0000244C BA[C736]                	mov	dx,badcountry		;"invalid country code or code page"
 27826 0000244F EB03                    	jmp	short en64
 27827                                  if64:
 27828 00002451 BA[ED36]                	mov	dx,badcountrycom	;"error in contry command"
 27829                                  en64:
 27830 00002454 E8360E                  	call	print
 27831                                  	;call	error_line
 27832                                  	;retn
 27833                                  	; 11/12/2022
 27834 00002457 E95102                  	jmp	error_line
 27835                                  
 27836                                  ;------------------------------------------------------------------------------
 27837                                  ; files command
 27838                                  ;------------------------------------------------------------------------------
 27839                                  
 27840                                  ;******************************************************************************
 27841                                  ; function: parse the parameters of files= command.			      *
 27842                                  ;									      *
 27843                                  ; input :								      *
 27844                                  ;	es:si -> parameters in command line.				      *
 27845                                  ; output:								      *
 27846                                  ;	variable files set.						      *
 27847                                  ;									      *
 27848                                  ; subroutines to be called:						      *
 27849                                  ;	sysinit_parse							      *
 27850                                  ; logic:								      *
 27851                                  ; {									      *
 27852                                  ;	set di points to files_parms;					      *
 27853                                  ;	set dx,cx to 0; 						      *
 27854                                  ;	while (end of command line)					      *
 27855                                  ;	{ sysinit_parse;						      *
 27856                                  ;	  if (no error) then						      *
 27857                                  ;	     files = result_val._$P_picked_val				      *
 27858                                  ;	  else								      *
 27859                                  ;	     error exit;						      *
 27860                                  ;	};								      *
 27861                                  ; };									      *
 27862                                  ;									      *
 27863                                  ;******************************************************************************
 27864                                  
 27865                                  tryf:
 27866 0000245A 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 27867 0000245D 7523                    	jne	short tryl
 27868                                  
 27869                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27870                                  ;;ifdef	MULTI_CONFIG
 27871                                  ;       call    query_user              ; query the user if config_cmd
 27872                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 27873                                  ;;endif
 27874                                  
 27875                                  	; 14/12/2022
 27876                                  	; ds = cs
 27877                                  
 27878 0000245F BF[2D1D]                	mov	di,files_parms
 27879 00002462 31C9                    	xor	cx,cx
 27880                                  	; 04/01/2023
 27881                                  	;mov	dx,cx
 27882                                  do67:
 27883 00002464 E8F101                  	call	sysinit_parse
 27884 00002467 7303                    	jnc	short if67		; parse error
 27885                                  	;call	badparm_p		;  and show messages and end the search loop.
 27886                                  	;jmp	short sr67
 27887                                  	; 04/01/2023
 27888 00002469 E96A01                  	jmp	badparm_p_coff
 27889                                  if67:
 27890 0000246C 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27891 0000246F 7408                    	je	short en67		; then end the $endloop
 27892                                  
 27893                                  	; 14/12/2022
 27894                                  	; ds = cs
 27895                                  	;;mov	al,[cs:rv_dword]
 27896                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27897                                  	;mov	[cs:p_files],al		; save it temporarily
 27898                                  	;mov	al,[rv_dword]
 27899 00002471 A0[CA1C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27900 00002474 A2[4C1D]                	mov	[p_files],al
 27901                                  
 27902 00002477 EBEB                    	jmp	short do67
 27903                                  en67:
 27904                                  	; 14/12/2022
 27905                                  	; ds = cs
 27906 00002479 A0[4C1D]                	mov	al,[p_files]
 27907 0000247C A2[9D02]                	mov	[FILES],al	
 27908                                  	;mov	al,[cs:p_files]
 27909                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 27910                                  sr67:
 27911 0000247F E9F4FA                  	jmp	coff
 27912                                  
 27913                                  ; 04/04/2019 - Retro DOS v4.0
 27914                                  
 27915                                  ;------------------------------------------------------------------------------
 27916                                  ; lastdrive command
 27917                                  ;------------------------------------------------------------------------------
 27918                                  
 27919                                  ;******************************************************************************
 27920                                  ; function: parse the parameters of lastdrive= command. 		      *
 27921                                  ;									      *
 27922                                  ; input :								      *
 27923                                  ;	es:si -> parameters in command line.				      *
 27924                                  ; output:								      *
 27925                                  ;	set the variable num_cds.					      *
 27926                                  ;									      *
 27927                                  ; subroutines to be called:						      *
 27928                                  ;	sysinit_parse							      *
 27929                                  ; logic:								      *
 27930                                  ; {									      *
 27931                                  ;	set di points to ldrv_parms;					      *
 27932                                  ;	set dx,cx to 0; 						      *
 27933                                  ;	while (end of command line)					      *
 27934                                  ;	{ sysinit_parse;						      *
 27935                                  ;	  if (no error) then						      *
 27936                                  ;	     set num_cds to the returned value; 			      *
 27937                                  ;	  else	/*error exit*/						      *
 27938                                  ;	     error exit;						      *
 27939                                  ;	};								      *
 27940                                  ; };									      *
 27941                                  ;									      *
 27942                                  ;******************************************************************************
 27943                                  
 27944                                  tryl:
 27945 00002482 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 27946 00002485 7523                    	jne	short tryp
 27947                                  
 27948                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27949                                  ;;ifdef	MULTI_CONFIG
 27950                                  ;       call    query_user      ; query the user if config_cmd
 27951                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 27952                                  ;;endif
 27953                                  	; 14/12/2022
 27954                                  	; ds = cs
 27955                                  
 27956 00002487 BF[841D]                	mov	di,ldrv_parms
 27957 0000248A 31C9                    	xor	cx,cx
 27958                                  	; 04/01/2023
 27959                                  	;mov	dx,cx
 27960                                  do73:
 27961 0000248C E8C901                  	call	sysinit_parse
 27962 0000248F 7303                    	jnc	short if73	; parse error
 27963                                  	;call	badparm_p	;  and show messages and end the search loop.
 27964                                  	;jmp	short sr73
 27965                                  	; 04/01/2023
 27966 00002491 E94201                  	jmp	badparm_p_coff
 27967                                  if73:
 27968 00002494 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27969 00002497 7408                    	je	short en73	; then end the $endloop
 27970                                  
 27971                                  	; 14/12/2022
 27972                                  	; ds = cs
 27973                                  	;;mov	al,[cs:rv_dword]
 27974                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27975                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27976                                  
 27977                                  	;mov	al,[rv_dword]
 27978 00002499 A0[CA1C]                	mov	al,[rv_byte]
 27979 0000249C A2[981D]                	mov	[p_ldrv],al
 27980                                  
 27981 0000249F EBEB                    	jmp	short do73
 27982                                  en73:
 27983                                  	; 14/12/2022
 27984                                  	; ds = cs
 27985 000024A1 A0[981D]                	mov	al,[p_ldrv]
 27986 000024A4 A2[A002]                	mov	[NUM_CDS],al
 27987                                  	;mov	al,[cs:p_ldrv]
 27988                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27989                                  sr73:
 27990 000024A7 E9CCFA                  	jmp	coff
 27991                                  
 27992                                  ;--------------------------------------------------------------------------
 27993                                  ; setting drive parameters
 27994                                  ;--------------------------------------------------------------------------
 27995                                  
 27996                                  tryp:
 27997 000024AA 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27998 000024AD 7511                    	jne	short tryk
 27999                                  
 28000                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28001                                  ;;ifdef	MULTI_CONFIG
 28002                                  ;       call    query_user      ; query the user if config_cmd
 28003                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 28004                                  ;;endif
 28005                                  
 28006 000024AF E83508                  	call	parseline
 28007 000024B2 7209                    	jc	short trypbad
 28008 000024B4 E85C07                  	call	setparms
 28009 000024B7 E89007                  	call	diddleback
 28010                                  
 28011                                  ; No error check here, because setparms and diddleback have no error 
 28012                                  ; returns, and setparms as coded now can return with carry set. 
 28013                                  ;       jc	short trypbad
 28014                                  
 28015                                  	; 12/12/2022
 28016                                  	; cf = 0
 28017                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28018                                  	;jc	short trypbad
 28019                                  	
 28020 000024BA E9B9FA                  	jmp	coff
 28021                                  trypbad:
 28022 000024BD E9B701                  	jmp	badop
 28023                                  
 28024                                  ;--------------------------------------------------------------------------
 28025                                  ; setting internal stack parameters
 28026                                  ; stacks=m,n where
 28027                                  ;	m is the number of stacks (range 8 to 64,default 9)
 28028                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 28029                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 28030                                  ;	any combinations that are not within the specified limits will
 28031                                  ;	result in "unrecognized command" error.
 28032                                  ;--------------------------------------------------------------------------
 28033                                  
 28034                                  ;**************************************************************************
 28035                                  ;									  *
 28036                                  ; function: parse the parameters of stacks= command.			  *
 28037                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 28038                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 28039                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 28040                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 28041                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 28042                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 28043                                  ;	    (or if "0,0" pair has been entered.)			  *
 28044                                  ; input :								  *
 28045                                  ;	es:si -> parameters in command line.				  *
 28046                                  ; output:								  *
 28047                                  ;	set the variables stack_count,stack_size.			  *
 28048                                  ;									  *
 28049                                  ; subroutines to be called:						  *
 28050                                  ;	sysinit_parse							  *
 28051                                  ; logic:								  *
 28052                                  ; {									  *
 28053                                  ;	set di points to stks_parms;					  *
 28054                                  ;	set dx,cx to 0; 						  *
 28055                                  ;	while (end of command line)					  *
 28056                                  ;	{ sysinit_parse;						  *
 28057                                  ;	  if (no error) then						  *
 28058                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 28059                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 28060                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 28061                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 28062                                  ;	     }								  *
 28063                                  ;	  else	/*error exit*/						  *
 28064                                  ;	     error exit;						  *
 28065                                  ;	};								  *
 28066                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 28067                                  ;	if o.k.,then set stack_count,stack_size;			  *
 28068                                  ;	 else error_exit;						  *
 28069                                  ; };									  *
 28070                                  ;**************************************************************************
 28071                                  
 28072                                  tryk:
 28073                                          ;if      stacksw
 28074                                  
 28075 000024C0 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 28076 000024C3 7402                    	je	short do_tryk
 28077                                  skip_it4:
 28078 000024C5 EB74                    	jmp	short trys	; 15/12/2022
 28079                                  do_tryk:
 28080                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28081                                  ;;ifdef	MULTI_CONFIG
 28082                                  ;       call    query_user              ; query the user if config_cmd
 28083                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 28084                                  ;;endif
 28085                                  	; 14/12/2022
 28086                                  	; ds = cs
 28087                                  
 28088 000024C7 BF[991D]                	mov	di,stks_parms
 28089 000024CA 31C9                    	xor	cx,cx
 28090                                  	; 04/01/2023
 28091                                  	;mov	dx,cx
 28092                                  do79:
 28093 000024CC E88901                  	call	sysinit_parse
 28094 000024CF 730B                    	jnc	short if79		; parse error
 28095                                  
 28096 000024D1 BA[7937]                	mov	dx,badstack		; "invalid stack parameter"
 28097 000024D4 E8B60D                  	call	print			;  and show messages and end the search loop.
 28098 000024D7 E8D101                  	call	error_line
 28099                                  	;jmp	sr79
 28100                                  	; 11/12/2022
 28101 000024DA EB39                    	jmp	short sr79
 28102                                  if79:
 28103 000024DC 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28104 000024DF 7412                    	je	short en79		; then end the $endloop
 28105                                  
 28106                                  	; 14/12/2022
 28107                                  	; ds = cs
 28108                                  
 28109                                  	;;mov	ax,[cs:rv_dword]
 28110                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28111                                  	;mov	ax,[rv_dword]
 28112 000024E1 A1[CA1C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 28113                                  
 28114 000024E4 83F901                  	cmp	cx,1
 28115 000024E7 7505                    	jne	short if83
 28116                                  
 28117                                  	; 14/12/2022
 28118                                  	;mov	[cs:p_stack_count],ax
 28119                                  	;jmp	short en83
 28120 000024E9 A3[CE1D]                	mov	[p_stack_count],ax
 28121 000024EC EBDE                    	jmp	short do79
 28122                                  if83:
 28123                                  	; 14/12/2022
 28124                                  	;mov	[cs:p_stack_size],ax
 28125 000024EE A3[D01D]                	mov	[p_stack_size],ax
 28126                                  en83:
 28127 000024F1 EBD9                    	jmp	short do79
 28128                                  en79:
 28129                                  	; 14/12/2022
 28130                                  	; ds = cs
 28131 000024F3 A1[CE1D]                	mov	ax,[p_stack_count]
 28132 000024F6 09C0                    	or	ax,ax
 28133 000024F8 741E                    	jz	short if87		
 28134                                  
 28135                                  	; 14/12/2022
 28136                                  	;cmp	word [p_stack_count],0
 28137                                  	;;cmp	word [cs:p_stack_count],0
 28138                                  	;je	short if87
 28139                                  
 28140                                  	; 14/12/2022
 28141 000024FA 83F808                  	cmp	ax, mincount ; 8
 28142                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 28143                                  	; 15/12/2022
 28144 000024FD 721F                    	jb	short en87
 28145 000024FF 833E[D01D]20            	cmp	word [p_stack_size],minsize ; 32
 28146                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 28147                                  	; 15/12/2022
 28148 00002504 7218                    	jb	short en87
 28149                                  if94:
 28150                                  	; 14/12/2022
 28151                                  	; ds = cs
 28152                                  	; ax = [p_stack_count]
 28153                                  	;mov	ax,[p_stack_count]
 28154                                  	;;mov	ax,[cs:p_stack_count]
 28155 00002506 A3[8A02]                	mov	[stack_count],ax
 28156                                  	;mov	[cs:stack_count],ax
 28157                                  	;mov	ax,[cs:p_stack_size]
 28158 00002509 A1[D01D]                	mov	ax,[p_stack_size]
 28159                                  	;mov	[cs:stack_size],ax
 28160 0000250C A3[8C02]                	mov	[stack_size],ax
 28161                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28162 0000250F C706[8E02]FFFF          	mov	word [stack_addr],-1
 28163                                  sr79:
 28164 00002515 E95EFA                  	jmp	coff
 28165                                  
 28166                                  if87:
 28167                                  	; 14/12/2022
 28168 00002518 3906[D01D]              	cmp	[p_stack_size],ax ; 0
 28169 0000251C 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 28170                                  	;cmp	word [cs:p_stack_size],0
 28171                                  	;je	short if94
 28172                                  en87:
 28173                                  	; 15/12/2022
 28174                                  	; ([p_stack_count] is invalid, use default values)
 28175                                  	; 14/12/2022
 28176                                  	; ds = cs
 28177 0000251E C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 28178 00002524 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 28179 0000252A C706[8E02]0000          	mov	word [stack_addr],0
 28180                                  	;mov	word [cs:stack_count],defaultcount ; 9
 28181                                  	;				; reset to default value.
 28182                                  	;mov	word [cs:stack_size],defaultsize ; 128
 28183                                  	;mov	word [cs:stack_addr],0
 28184                                  
 28185 00002530 BA[7937]                	mov	dx,badstack
 28186 00002533 E8570D                  	call	print
 28187 00002536 E87201                  	call	error_line
 28188 00002539 EBDA                    	jmp	short sr79
 28189                                  
 28190                                  ; 15/12/2022
 28191                                  %if 0
 28192                                  	mov	di,stks_parms
 28193                                  	xor	cx,cx
 28194                                  	; 04/01/2023
 28195                                  	;mov	dx,cx
 28196                                  do79:
 28197                                  	call	sysinit_parse
 28198                                  	jnc	short if79		; parse error
 28199                                  
 28200                                  	mov	dx,badstack		; "invalid stack parameter"
 28201                                  	call	print			;  and show messages and end the search loop.
 28202                                  	call	error_line
 28203                                  	;jmp	sr79
 28204                                  	; 11/12/2022
 28205                                  	jmp	short sr79
 28206                                  if79:
 28207                                  	cmp	ax,_$P_RC_EOL		; end of line?
 28208                                  	je	short en79		; then end the $endloop
 28209                                  
 28210                                  	;mov	ax,[cs:rv_dword]
 28211                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28212                                  	cmp	cx,1
 28213                                  	jne	short if83
 28214                                  
 28215                                  	mov	[cs:p_stack_count],ax
 28216                                  	jmp	short en83
 28217                                  if83:
 28218                                  	mov	[cs:p_stack_size],ax
 28219                                  en83:
 28220                                  	jmp	short do79
 28221                                  en79:
 28222                                  	cmp	word [cs:p_stack_count],0
 28223                                  	je	short if87
 28224                                  
 28225                                  	cmp	word [cs:p_stack_count],mincount ; 8
 28226                                  	jb	short ll88
 28227                                  	cmp	word [cs:p_stack_size],minsize ; 32
 28228                                  	jnb	short if88
 28229                                  ll88:
 28230                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28231                                  if88:
 28232                                  	jmp	short en87
 28233                                  
 28234                                  	; 11/12/2022
 28235                                  if94:
 28236                                  	mov	ax,[cs:p_stack_count]
 28237                                  	mov	[cs:stack_count],ax
 28238                                  	mov	ax,[cs:p_stack_size]
 28239                                  	mov	[cs:stack_size],ax
 28240                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28241                                  sr79:
 28242                                  	jmp	coff
 28243                                  
 28244                                  if87:
 28245                                  	cmp	word [cs:p_stack_size],0
 28246                                  	je	short en87
 28247                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28248                                  en87:
 28249                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 28250                                  	jne	short if94
 28251                                  
 28252                                  	mov	word [cs:stack_count],defaultcount ; 9
 28253                                  					; reset to default value.
 28254                                  	mov	word [cs:stack_size],defaultsize ; 128
 28255                                  	mov	word [cs:stack_addr],0
 28256                                  
 28257                                  	mov	dx,badstack
 28258                                  	call	print
 28259                                  	call	error_line
 28260                                  	jmp	short sr79
 28261                                  
 28262                                  %endif
 28263                                  
 28264                                  ; 11/12/2022
 28265                                  %if 0 
 28266                                  
 28267                                  if94:
 28268                                  	mov	ax,[cs:p_stack_count]
 28269                                  	mov	[cs:stack_count],ax
 28270                                  	mov	ax,[cs:p_stack_size]
 28271                                  	mov	[cs:stack_size],ax
 28272                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28273                                  sr79:
 28274                                  	jmp	coff
 28275                                  
 28276                                  %endif
 28277                                  
 28278                                  	;endif
 28279                                  
 28280                                  ;------------------------------------------------------------------------
 28281                                  ; shell command
 28282                                  ;------------------------------------------------------------------------
 28283                                  
 28284                                  trys:
 28285 0000253B 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 28286 0000253E 753C                    	jne	short tryx
 28287                                  
 28288                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28289                                  ;;ifdef	MULTI_CONFIG
 28290                                  ;       call    query_user              ; query the user if config_cmd
 28291                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 28292                                  ;       mov	byte [cs:newcmd],1
 28293                                  ;;endif
 28294                                  
 28295                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 28296                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28297                                  	;mov	byte [cs:command_line+1],0
 28298                                  	; 15/12/2022
 28299                                  	; ds = cs
 28300 00002540 C606[AA02]00            	mov	byte [command_line+1],0
 28301                                  
 28302 00002545 BF[6433]                        mov     di,commnd+1		; we already have the first char
 28303 00002548 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 28304                                  storeshell:
 28305 0000254B E8970A                  	call	getchr
 28306 0000254E 08C0                            or      al,al                   ; this is the normal case: "organize"
 28307 00002550 7419                            jz	short getshparms	; put a ZERO right after the filename
 28308                                  
 28309 00002552 3C20                            cmp     al," "                  ; this may happen if there are no args
 28310 00002554 7205                            jb	short endofshell	; I suppose...
 28311 00002556 8805                    	mov	[di],al
 28312 00002558 47                      	inc	di
 28313                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 28314                                          ;jb	short storeshell	; commnd (the filename)
 28315                                          ;jmp	short endofshell
 28316                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28317 00002559 EBF0                    	jmp	short storeshell
 28318                                  
 28319                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28320                                  ;getshparms:
 28321                                  ;	mov     byte [di],0		; zero-terminate the filename
 28322                                  ;	mov     di,command_line+1	; prepare to process the command-line
 28323                                  ;
 28324                                  ;parmloop:
 28325                                  ;	call	getchr
 28326                                  ;	cmp	al," "
 28327                                  ;	jb	short endofparms
 28328                                  ;	mov	[di],al
 28329                                  ;	inc	di
 28330                                  ;	cmp     di,command_line+126
 28331                                  ;	jb	short parmloop
 28332                                  ;endofparms:
 28333                                  ;	mov     cx,di
 28334                                  ;	sub     cx,command_line+1
 28335                                  ;	mov     [cs:command_line],cl
 28336                                  ;
 28337                                  ;endofshell:
 28338                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 28339                                  ;					; the command-line as the case may be)
 28340                                  ;skipline:
 28341                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28342                                  ;       je	short endofline		; the line: watch for ever-present LF
 28343                                  ;call	getchr
 28344                                  ;       jnc	short skipline		; keep it up as long as there are chars
 28345                                  ;
 28346                                  ;endofline:
 28347                                  ;       jmp     conflp
 28348                                  
 28349                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28350                                  endofshell:
 28351 0000255B C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 28352                                  					; the command-line as the case may be)
 28353 0000255E E8840A                  	call	getchr
 28354                                  skipline:
 28355 00002561 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28356 00002563 7403                    	je	short endofline		; the line: watch for ever-present LF
 28357 00002565 E87D0A                  	call	getchr
 28358                                  endofline:
 28359 00002568 E9E6F9                  	jmp     conflp
 28360                                  
 28361                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28362                                  getshparms:
 28363                                  	; 18/12/2022
 28364                                  	; al = 0
 28365 0000256B 8805                    	mov	[di],al ; 0
 28366                                  	;mov	byte [di],0		; zero-terminate the filename
 28367 0000256D BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 28368                                  parmloop:
 28369 00002570 E8720A                  	call	getchr
 28370 00002573 3C20                    	cmp	al," " ; 20h
 28371 00002575 72E4                    	jb	short endofshell
 28372 00002577 8805                    	mov	[di],al
 28373 00002579 47                      	inc	di
 28374 0000257A EBF4                    	jmp	short parmloop
 28375                                  
 28376                                  ;------------------------------------------------------------------------
 28377                                  ; fcbs command
 28378                                  ;------------------------------------------------------------------------
 28379                                  
 28380                                  ;************************************************************************
 28381                                  ; function: parse the parameters of fcbs= command.			*
 28382                                  ;									*
 28383                                  ; input :								*
 28384                                  ;	es:si -> parameters in command line.				*
 28385                                  ; output:								*
 28386                                  ;	set the variables fcbs,keep.					*
 28387                                  ;									*
 28388                                  ; subroutines to be called:						*
 28389                                  ;	sysinit_parse							*
 28390                                  ; logic:								*
 28391                                  ; {									*
 28392                                  ;	set di points to fcbs_parms;					*
 28393                                  ;	set dx,cx to 0; 						*
 28394                                  ;	while (end of command line)					*
 28395                                  ;	{ sysparse;							*
 28396                                  ;	  if (no error) then						*
 28397                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 28398                                  ;		   fcbs = result_val._$P_picked_val;			*
 28399                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 28400                                  ;		   keep = result_val._$P_picked_val;			*
 28401                                  ;	     }								*
 28402                                  ;	  else	/*error exit*/						*
 28403                                  ;	     error exit;						*
 28404                                  ;	};								*
 28405                                  ; };									*
 28406                                  ;************************************************************************
 28407                                  
 28408                                  tryx:
 28409 0000257C 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 28410                                          ;jne	short try1
 28411                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28412 0000257F 752F                    	jne	short tryy	; comment command
 28413                                  
 28414                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28415                                  ;;ifdef	MULTI_CONFIG
 28416                                  ;       call    query_user      ; query the user if config_cmd
 28417                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 28418                                  ;;endif
 28419                                  
 28420 00002581 BF[4D1D]                	mov	di,fcbs_parms
 28421 00002584 31C9                    	xor	cx,cx
 28422                                  	; 04/01/2023
 28423                                  	;mov	dx,cx
 28424                                  do98:
 28425 00002586 E8CF00                  	call	sysinit_parse
 28426                                          ; 04/01/2023
 28427                                  	;jnc	short if98	; parse error
 28428                                          ;call	badparm_p	;  and show messages and end the search loop.
 28429                                  	;jmp	short sr98
 28430                                  	;------------------------
 28431                                  	; 04/01/2023
 28432 00002589 724B                    	jc	short badparm_p_coff
 28433                                  if98:
 28434 0000258B 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28435 0000258E 7412                    	je	short en98	; then end the $endloop
 28436                                  
 28437                                  	;;mov	al,[cs:rv_dword]
 28438                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28439                                  	; 15/12/2022
 28440                                  	; ds = cs
 28441 00002590 A0[CA1C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28442 00002593 83F901                  	cmp	cx,1		; the first positional?
 28443 00002596 7505                    	jne	short if102
 28444                                  	;mov	[cs:p_fcbs],al
 28445                                  	; 15/12/2022
 28446 00002598 A2[821D]                	mov	[p_fcbs],al
 28447                                  	;jmp	short en102
 28448 0000259B EBE9                    	jmp	short do98
 28449                                  if102:
 28450                                  	;mov	[cs:p_keep],al
 28451                                  	; 15/12/2022
 28452 0000259D A2[831D]                	mov	[p_keep],al
 28453                                  en102:
 28454 000025A0 EBE4                    	jmp	short do98
 28455                                  en98:
 28456                                  	; 15/12/2022
 28457                                  	; ds = cs
 28458 000025A2 A0[821D]                	mov	al,[p_fcbs]
 28459 000025A5 A2[9E02]                	mov	[FCBS],al
 28460 000025A8 C606[9F02]00            	mov	byte [KEEP],0
 28461                                  	;mov	al,[cs:p_fcbs]	 ; M017
 28462                                  	;mov	[cs:FCBS],al	 ; M017
 28463                                  	;mov	byte [cs:KEEP],0 ; M017
 28464                                  sr98:
 28465 000025AD E9C6F9                  	jmp	coff
 28466                                  
 28467                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28468                                  ;-------------------------------------------------------------------------
 28469                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 28470                                  ;		line number
 28471                                  ;-------------------------------------------------------------------------
 28472                                  
 28473                                  tryy:
 28474 000025B0 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28475 000025B3 750B                    	jne	short try0
 28476                                  
 28477                                  donothing:
 28478                                  	; 15/12/2022
 28479                                  	; ds = cs
 28480 000025B5 FF0E[D603]              	dec	word [chrptr]
 28481 000025B9 FF06[D203]              	inc	word [count]
 28482                                  	; 02/11/2022
 28483                                  	;dec	word [cs:chrptr]
 28484                                  	;inc	word [cs:count]
 28485                                  
 28486 000025BD E9B6F9                  	jmp	coff
 28487                                  
 28488                                  ;------------------------------------------------------------------------
 28489                                  ; rem command
 28490                                  ;------------------------------------------------------------------------
 28491                                  
 28492                                  try0:				; do nothing with this line.
 28493 000025C0 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 28494 000025C3 74F0                    	je	short donothing
 28495                                  
 28496                                  ; 07/04/2019 - Retro DOS v4.0
 28497                                  
 28498                                  ;-----------------------------------------------------------------------
 28499                                  ; switches command
 28500                                  ;-----------------------------------------------------------------------
 28501                                  
 28502                                  ;***********************************************************************
 28503                                  ;								       *
 28504                                  ; function: parse the option switches specified.		       *
 28505                                  ; note - this command is intended for the future use also.	       *
 28506                                  ; when we need to set system data flag,use this command.	       *
 28507                                  ;								       *
 28508                                  ; input :							       *
 28509                                  ;	es:si -> parameters in command line.			       *
 28510                                  ; output:							       *
 28511                                  ;	p_swit_k set if /k option chosen.			       *
 28512                                  ;								       *
 28513                                  ; subroutines to be called:					       *
 28514                                  ;	sysinit_parse						       *
 28515                                  ; logic:							       *
 28516                                  ; {								       *
 28517                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 28518                                  ;	set dx,cx to 0; 					       *
 28519                                  ;	while (end of command line)				       *
 28520                                  ;	{ sysinit_parse;					       *
 28521                                  ;	  if (no error) then					       *
 28522                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 28523                                  ;		    p_swit_k = 1				       *
 28524                                  ;	       endif						       *
 28525                                  ;	  else {show error message;error exit}			       *
 28526                                  ;	};							       *
 28527                                  ; };								       *
 28528                                  ;								       *
 28529                                  ;***********************************************************************
 28530                                  
 28531                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 28532                                  
 28533                                  try1:
 28534 000025C5 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 28535 000025C8 7402                    	je	short do_try1	; switches= command entered?
 28536                                  skip_it5:
 28537                                  	;jmp	tryv
 28538                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28539 000025CA EB7A                    	jmp	tryz
 28540                                  
 28541                                  do_try1:
 28542                                  
 28543                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28544                                  ;;ifdef	MULTI_CONFIG
 28545                                  ;       call    query_user      ; query the user if config_cmd
 28546                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 28547                                  ;;endif
 28548                                  
 28549 000025CC BF[E71D]                	mov	di,swit_parms
 28550 000025CF 31C9                    	xor	cx,cx
 28551                                  	; 04/01/2023
 28552                                  	;mov	dx,cx
 28553                                  do110:
 28554 000025D1 E88400                  	call	sysinit_parse
 28555 000025D4 7306                    	jnc	short if110	; parse error
 28556                                  	;call	badparm_p	;  and show messages and end the search loop.
 28557                                  	;jmp	short sr110
 28558                                  	; -----------------------
 28559                                  	; 04/01/2023
 28560                                  badparm_p_coff:
 28561 000025D6 E8AA00                  	call	badparm_p
 28562 000025D9 E99AF9                  	jmp	coff
 28563                                  	;------------------------
 28564                                  if110:
 28565 000025DC 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28566 000025DF 742D                    	je	short en110	; then jmp to $endloop for semantic check
 28567                                  
 28568                                  	; 15/12/2022
 28569                                  	; ds = cs
 28570                                  	;;cmp	word [cs:result_val_swoff],swit_k
 28571                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28572 000025E1 813E[C81C][FF1D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28573 000025E7 7507                    	jne	short if115	;				;M059
 28574                                  	; 15/12/2022
 28575 000025E9 C606[1A1E]01            	mov	byte [p_swit_k],1
 28576                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 28577 000025EE EBE1                    	jmp	short do110
 28578                                  if115:	
 28579                                  	; 15/12/2022							;M059
 28580                                  	;;cmp	word [cs:result_val_swoff],swit_t
 28581                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 28582 000025F0 813E[C81C][0B1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 28583 000025F6 7507                    	jne	short if116					;M059 M063
 28584                                  	; 15/12/2022
 28585 000025F8 C606[1B1E]01            	mov	byte [p_swit_t],1
 28586                                  	;mov	byte [cs:p_swit_t],1				;M059
 28587 000025FD EBD2                    	jmp	short do110					;M059
 28588                                  if116:
 28589                                  	; 15/12/2022
 28590                                  	;;cmp	word [cs:result_val_swoff],swit_w
 28591                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 28592 000025FF 813E[C81C][171E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 28593 00002605 75CA                    	jne	short do110					;M063
 28594                                  	; 15/12/2022
 28595 00002607 C606[1C1E]01            	mov	byte [p_swit_w],1
 28596                                  	;mov	byte [cs:p_swit_w],1				;M063
 28597 0000260C EBC3                    	jmp	short do110					;M063
 28598                                  en110:
 28599                                  	; 15/12/2022
 28600                                  	; ds = cs
 28601 0000260E 803E[1A1E]01            	cmp	byte [p_swit_k],1
 28602                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 28603 00002613 1E                      	push	ds
 28604                                  	;;mov	ax,Bios_Data
 28605                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 28606                                  	; 21/10/2022
 28607 00002614 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 28608 00002617 8ED8                    	mov	ds,ax
 28609 00002619 750A                    	jne	short if117
 28610 0000261B C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 28611 00002620 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 28612                                  if117:
 28613                                  	; 15/12/2022
 28614                                  	; ds <> cs
 28615 00002625 2EA0[1B1E]              	mov	al,[cs:p_swit_t]				;M059
 28616 00002629 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 28617                                  
 28618 0000262C 2E803E[1C1E]00          	cmp	byte [cs:p_swit_w],0				;M063
 28619 00002632 740E                    	je	short skip_dos_flag				;M063
 28620 00002634 06                      	push	es
 28621 00002635 53                      	push	bx
 28622 00002636 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 28623 00002638 CD21                    	int	21h						;M063
 28624                                  			; DOS - 2+ internal - GET LIST OF LISTS
 28625                                  			; Return: ES:BX -> DOS list of lists
 28626                                  	;or	bytes [es:86h],2
 28627 0000263A 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 28628 00002640 5B                      	pop	bx
 28629 00002641 07                      	pop	es
 28630                                  skip_dos_flag:							;M063
 28631 00002642 1F                      	pop	ds
 28632                                  sr110:
 28633 00002643 E930F9                  	jmp	coff
 28634                                  
 28635                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28636                                  ;
 28637                                  ;tryv:
 28638                                  ;
 28639                                  ;;ifdef	MULTI_CONFIG
 28640                                  ;;------------------------------------------------------------------------
 28641                                  ;; set command (as in "set var=value<cr/lf>")
 28642                                  ;;------------------------------------------------------------------------
 28643                                  ;
 28644                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 28645                                  ;       jne	short tryn
 28646                                  ;       call    query_user      ; query the user if config_cmd
 28647                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 28648                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 28649                                  ;       jnc	short sr110	; no error
 28650                                  ;err:    
 28651                                  ;	call    error_line      ; whoops, display error in line XXX
 28652                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 28653                                  ;
 28654                                  ;;------------------------------------------------------------------------
 28655                                  ;; numlock command (as in "numlock=on|off")
 28656                                  ;;------------------------------------------------------------------------
 28657                                  ;tryn:
 28658                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 28659                                  ;       jne	short tryy            ;
 28660                                  ;       call    query_user      ; query thye user if config_cmd
 28661                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 28662                                  ;       call    set_numlock
 28663                                  ;       jc	short err
 28664                                  ;       jmp	short sr110	; all done
 28665                                  ;
 28666                                  ;;endif	;MULTI_CONFIG
 28667                                  
 28668                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28669                                  ;;-------------------------------------------------------------------------
 28670                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 28671                                  ;;		line number
 28672                                  ;;-------------------------------------------------------------------------
 28673                                  ;
 28674                                  ;tryy:
 28675                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 28676                                  ;	jne	short try0
 28677                                  ;donothing:
 28678                                  ;	dec	word [chrptr]
 28679                                  ;	inc	word [count]
 28680                                  ;	jmp	coff
 28681                                  ;
 28682                                  ;;------------------------------------------------------------------------
 28683                                  ;; rem command
 28684                                  ;;------------------------------------------------------------------------
 28685                                  ;
 28686                                  ;try0:				;do nothing with this line.
 28687                                  ;	cmp     ah,CONFIG_REM ; '0'
 28688                                  ;	je	short donothing
 28689                                  
 28690                                  ; 30/10/2022
 28691                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 28692                                  
 28693                                  ;------------------------------------------------------------------------
 28694                                  ; bogus command
 28695                                  ;------------------------------------------------------------------------
 28696                                  
 28697                                  tryz:
 28698 00002646 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 28699                                  	;je	short donothing
 28700                                  	; 02/11/2022
 28701 00002649 740A                    	je	short tryz_donothing
 28702                                  
 28703 0000264B FF0E[D603]              	dec	word [chrptr]
 28704 0000264F FF06[D203]              	inc	word [count]
 28705 00002653 EB22                    	jmp	short badop
 28706                                  
 28707                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 28708                                  tryz_donothing:
 28709 00002655 E95DFF                  	jmp	donothing
 28710                                  
 28711                                  ; 07/04/2019 - Retro DOS v4.0
 28712                                  
 28713                                  ;------------------------------------------------------------------------------
 28714                                  
 28715                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28716                                  ;
 28717                                  ;
 28718                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 28719                                  ;;
 28720                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 28721                                  ;
 28722                                  ;CheckProtmanArena:
 28723                                  ;	push	es
 28724                                  ;	mov	ax,[cs:area]	; get our arena header
 28725                                  ;	dec	ax
 28726                                  ;	mov	es,ax
 28727                                  ;	add	ax,[es:3]	; find end of arena
 28728                                  ;	inc	ax
 28729                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 28730                                  ;	ja	short CheckProtmanDone
 28731                                  ;
 28732                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 28733                                  ;CheckProtmanDone:
 28734                                  ;	pop	es
 28735                                  ;	retn
 28736                                  
 28737                                  ;------------------------------------------------------------------------------
 28738                                  
 28739                                  sysinit_parse:
 28740                                  
 28741                                  ;------------------------------------------------------------------------------
 28742                                  ;set up registers for sysparse
 28743                                  ;in)	es:si -> command line in confbot
 28744                                  ;	di -> offset of the parse control definition.
 28745                                  ;
 28746                                  ;out)	calls sysparse.
 28747                                  ;	carry will set if parse error.
 28748                                  ;	*** the caller should check the eol condition by looking at ax
 28749                                  ;	*** after each call.
 28750                                  ;	*** if no parameters are found,then ax will contain a error code.
 28751                                  ;	*** if the caller needs to look at the synomym@ of the result,
 28752                                  ;	***  the caller should use cs:@ instead of es:@.
 28753                                  ;	cx register should be set to 0 at the first time the caller calls this
 28754                                  ;	 procedure.
 28755                                  ;	ax - exit code
 28756                                  ;	bl - terminated delimeter code
 28757                                  ;	cx - new positional ordinal
 28758                                  ;	si - set to pase scanned operand
 28759                                  ;	dx - selected result buffer
 28760                                  ;------------------------------------------------------------------------------
 28761                                  
 28762                                  	; 24/10/2022
 28763 00002658 06                      	push	es			;save es,ds
 28764 00002659 1E                      	push	ds
 28765                                  
 28766                                  	; 09/09/2023
 28767                                  	; ds = cs
 28768 0000265A 8C06[1314]              	mov	[badparm_seg],es	;save the pointer to the parm
 28769 0000265E 8936[1114]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 28770                                  
 28771 00002662 06                      	push	es
 28772 00002663 1F                      	pop	ds			;now ds:si -> command line
 28773                                  
 28774 00002664 0E                      	push	cs
 28775 00002665 07                      	pop	es			;now es:di -> control definition
 28776                                  
 28777                                  	; 09/09/2023
 28778                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 28779                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 28780                                  
 28781                                  	;mov	dx,0
 28782                                  	; 04/01/2023
 28783 00002666 29D2                    	sub	dx,dx ; 0
 28784 00002668 E850EE                  	call	SysParse
 28785                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 28786                                  	; 06/09/2023
 28787 0000266B 21C0                    	and	ax,ax
 28788                                  
 28789                                  ;**cas note: when zero true after cmp, carry clear
 28790                                  
 28791                                  	;je	short ll4
 28792                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 28793                                  	; 12/12/2022
 28794 0000266D 7405                    	je	short en4 ; cf=0
 28795 0000266F 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 28796                                  	;jne	short if4
 28797                                  	; 12/12/2022
 28798 00002672 7400                    	je	short en4 ; cf=0
 28799                                  	; 06/09/2023
 28800                                  	; cf=1
 28801                                  
 28802                                  ; 12/12/2022
 28803                                  ;ll4:
 28804                                  ;	; 12/12/2022
 28805                                  ;	; cf=0
 28806                                  ;	;clc
 28807                                  ;	jmp	short en4
 28808                                  
 28809                                  if4:
 28810                                  	; 24/10/2022
 28811                                  	; 06/09/2023 (cf=1)
 28812                                  	;stc
 28813                                  en4:
 28814 00002674 1F                      	pop	ds
 28815 00002675 07                      	pop	es
 28816 00002676 C3                      	retn
 28817                                  
 28818                                  ; 11/12/2022
 28819                                  %if 0
 28820                                  
 28821                                  ;----------------------------------------------------------------------------
 28822                                  ;
 28823                                  ; procedure : badop_p
 28824                                  ;
 28825                                  ;             same thing as badop,but will make sure to set ds register back
 28826                                  ;             to sysinitseg and return back to the caller.
 28827                                  ;
 28828                                  ;----------------------------------------------------------------------------
 28829                                  
 28830                                  badop_p:
 28831                                  	push	cs
 28832                                  	pop	ds		;set ds to configsys seg.
 28833                                  	mov	dx,badopm
 28834                                  	call	print
 28835                                          ;call	error_line
 28836                                  	;retn
 28837                                  	; 11/12/2022
 28838                                  	jmp	error_line
 28839                                  
 28840                                  %endif
 28841                                  
 28842                                  ;----------------------------------------------------------------------------
 28843                                  ;
 28844                                  ; label : badop
 28845                                  ;
 28846                                  ;----------------------------------------------------------------------------
 28847                                  
 28848                                  badop:	
 28849 00002677 BA[3A36]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 28850 0000267A E8100C                  	call	print
 28851 0000267D E82B00                  	call	error_line	;show "error in config.sys ..." .
 28852 00002680 E9F3F8                  	jmp	coff
 28853                                  
 28854                                  ;----------------------------------------------------------------------------
 28855                                  ;
 28856                                  ; procedure : badparm_p
 28857                                  ;
 28858                                  ;             show "bad command or parameters - xxxxxx"
 28859                                  ;             in badparm_seg,badparm_off -> xxxxx
 28860                                  ;
 28861                                  ;----------------------------------------------------------------------------
 28862                                  
 28863                                  	; 24/10/2022
 28864                                  badparm_p:
 28865                                  	; 11/12/2022
 28866                                  	; ds = cs
 28867                                  	; 11/12/2022
 28868                                  	;push	ds ; *
 28869 00002683 52                      	push	dx
 28870 00002684 56                      	push	si
 28871                                  
 28872                                  	; 11/12/2022
 28873                                  	; ds = cs
 28874                                  	;push	cs
 28875                                  	;pop	ds
 28876                                  
 28877 00002685 BA[6136]                	mov	dx,badparm
 28878 00002688 E8020C                  	call	print			; "bad command or parameters - "
 28879 0000268B C536[1114]              	lds	si,[badparm_ptr]
 28880                                  
 28881                                  ;	print "xxxx" until cr.
 28882                                  
 28883                                  do1:
 28884 0000268F 8A14                    	mov	dl,[si]			; get next character
 28885 00002691 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 28886 00002694 7407                    	je	short en1		; exit loop if so
 28887                                  
 28888 00002696 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 28889 00002698 CD21                    	int	21h			; display character
 28890 0000269A 46                      	inc	si			; next character
 28891 0000269B EBF2                    	jmp	short do1
 28892                                  en1:
 28893 0000269D 0E                      	push	cs
 28894 0000269E 1F                      	pop	ds
 28895                                  
 28896 0000269F BA[5E36]                	mov	dx,crlfm
 28897 000026A2 E8E80B                  	call	print
 28898 000026A5 E80300                  	call	error_line
 28899                                  
 28900 000026A8 5E                      	pop	si
 28901 000026A9 5A                      	pop	dx
 28902                                  	; 11/12/2022
 28903                                  	;pop	ds ; *
 28904                                  badparmp_ret:
 28905 000026AA C3                      	retn
 28906                                  
 28907                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 28908                                  %if 0
 28909                                  
 28910                                  ;----------------------------------------------------------------------------
 28911                                  ;
 28912                                  ; procedure : getchr
 28913                                  ;
 28914                                  ;----------------------------------------------------------------------------
 28915                                  
 28916                                  	; 24/10/2022
 28917                                  getchr:
 28918                                  	; 12/12/2022
 28919                                  	;push	cx
 28920                                  	;mov	cx,[count]
 28921                                  	;jcxz	nochar
 28922                                  	; 12/12/2022
 28923                                  	cmp	word [count],1 
 28924                                  	jb	short nochar ; cf=1 ([count] = 0)
 28925                                  	
 28926                                  	mov	si,[chrptr]
 28927                                  	mov	al,[es:si]
 28928                                  	dec	word [count]
 28929                                  	inc	word [chrptr]
 28930                                  	; 12/12/202
 28931                                  	; cf=0
 28932                                  	;clc
 28933                                  ;get_ret:
 28934                                  	;pop	cx
 28935                                  	;retn
 28936                                  nochar: 
 28937                                  	; 12/12/2022
 28938                                  	; cf=1
 28939                                  	;stc
 28940                                  	;jmp	short get_ret
 28941                                  	
 28942                                  	retn
 28943                                  %endif
 28944                                  
 28945                                  ; 11/12/2022
 28946                                  %if 0
 28947                                  
 28948                                  ;----------------------------------------------------------------------------
 28949                                  ;
 28950                                  ; procedure : incorrect_order
 28951                                  ;
 28952                                  ;             show "incorrect order in config.sys ..." message.
 28953                                  ;
 28954                                  ;----------------------------------------------------------------------------
 28955                                  
 28956                                  incorrect_order:
 28957                                  	mov	dx,badorder
 28958                                  	call	print
 28959                                  	call	showlinenum
 28960                                  	retn
 28961                                  
 28962                                  %endif
 28963                                  
 28964                                  ;----------------------------------------------------------------------------
 28965                                  ;
 28966                                  ; procedure : error_line
 28967                                  ;
 28968                                  ;             show "error in config.sys ..." message.
 28969                                  ;
 28970                                  ;----------------------------------------------------------------------------
 28971                                  
 28972                                  	; 11/12/2022
 28973                                  	; 24/10/2022
 28974                                  error_line:
 28975                                  	; 11/12/2022
 28976                                  	; ds = cs
 28977                                  	;push	cs
 28978                                  	;pop	ds
 28979                                  
 28980 000026AB BA[9637]                	mov	dx,errorcmd
 28981 000026AE E8DC0B                  	call	print
 28982                                  	;call	showlinenum
 28983                                  	;retn
 28984                                  	; 11/12/2022
 28985                                  	;jmp	short shortlinemum
 28986                                  
 28987                                  ;----------------------------------------------------------------------------
 28988                                  ;
 28989                                  ; procedure : showlinenum
 28990                                  ;
 28991                                  ; convert the binary linecount to decimal ascii string in showcount
 28992                                  ; and display showcount at the current curser position.
 28993                                  ; in.) linecount
 28994                                  ;
 28995                                  ; out) the number is printed.
 28996                                  ;
 28997                                  ;----------------------------------------------------------------------------
 28998                                  
 28999                                  	; 11/12/2022
 29000                                  	; ds = cs
 29001                                  	; 24/10/2022
 29002                                  showlinenum:
 29003 000026B1 06                      	push	es
 29004                                  	; 11/12/2022
 29005                                  	;push	ds
 29006 000026B2 57                      	push	di
 29007                                  
 29008 000026B3 0E                      	push	cs
 29009 000026B4 07                      	pop	es		; es=cs
 29010                                  
 29011                                  	; 11/12/2022
 29012                                  	;push	cs
 29013                                  	;pop	ds
 29014                                  
 29015 000026B5 BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 29016 000026B8 B90A00                  	mov	cx,10		; decimal divide factor
 29017                                  	;mov	ax,[cs:linecount]
 29018                                  	; 11/12/2022
 29019 000026BB A1[2B03]                	mov	ax,[linecount]
 29020                                  sln_loop:
 29021                                  	; 11/12/2022
 29022 000026BE 39C8                    	cmp	ax,cx ; < 10 ?
 29023                                  	;cmp	ax,10		; < 10?
 29024 000026C0 720C                    	jb	short sln_last
 29025                                  
 29026 000026C2 31D2                    	xor	dx,dx
 29027 000026C4 F7F1                    	div	cx	; cx = 10
 29028 000026C6 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 29029 000026C9 8815                    	mov	[di],dl
 29030 000026CB 4F                      	dec	di
 29031 000026CC EBF0                    	jmp	short sln_loop
 29032                                  
 29033                                  sln_last:
 29034 000026CE 0C30                    	or	al,30h	; "0"
 29035 000026D0 8805                    	mov	[di],al
 29036 000026D2 89FA                    	mov	dx,di
 29037 000026D4 E8B60B                  	call	print		; show it.
 29038 000026D7 5F                      	pop	di
 29039                                  	; 11/12/2022
 29040                                  	;pop	ds
 29041 000026D8 07                      	pop	es
 29042 000026D9 C3                      	retn
 29043                                  
 29044                                  ; 07/04/2019 - Retro DOS v4.0
 29045                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 29046                                  
 29047                                  ;----------------------------------------------------------------------------
 29048                                  ;
 29049                                  ; procedure : ProcDOS
 29050                                  ;
 29051                                  ;	Process the result of DOS= parsing
 29052                                  ;
 29053                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 29054                                  ;				= 2 for DOS=LOW
 29055                                  ;				= 3 for DOS=UMB
 29056                                  ;				= 4 for DOS=NOUMB
 29057                                  ;----------------------------------------------------------------------------
 29058                                  
 29059                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 29060                                  	; (SYTSINIT:2AB5h)
 29061                                  ProcDOS:
 29062                                  	; 01/01/2023
 29063                                  	; ds = cs
 29064 000026DA 30E4                    	xor	ah,ah
 29065                                  	;;mov	al,[cs:result_val_itag]
 29066                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 29067                                  	; 04/01/2023
 29068 000026DC A0[C71C]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 29069 000026DF 48                      	dec	ax
 29070 000026E0 7415                    	jz	short pd_hi
 29071 000026E2 48                      	dec	ax
 29072 000026E3 740E                    	jz	short pd_lo
 29073 000026E5 48                      	dec	ax
 29074 000026E6 7405                    	jz	short pd_umb
 29075                                  	;;mov	byte [cs:DevUMB],0
 29076                                  	; 18/12/2022
 29077                                  	;mov	byte [cs:DevUMB],ah ; 0
 29078                                  	; 01/01/2023
 29079 000026E8 8826[6E1E]              	mov	byte [DevUMB],ah ; 0
 29080 000026EC C3                      	retn
 29081                                  pd_umb:
 29082                                  	; 04/01/2023
 29083 000026ED C606[6E1E]FF            	mov	byte [DevUMB],0FFh
 29084                                  	;mov	byte [cs:DevUMB],0FFh
 29085 000026F2 C3                      	retn
 29086                                  pd_lo:
 29087                                  	; 04/01/2023
 29088 000026F3 A2[6A02]                	mov	[runhigh],al ; 0
 29089                                  	; 18/12/2022
 29090                                  	;mov	[cs:runhigh],al ; 0
 29091                                  	;;mov	byte [cs:runhigh],0
 29092 000026F6 C3                      	retn
 29093                                  pd_hi:
 29094                                  	; 04/01/2023
 29095 000026F7 C606[6A02]FF            	mov	byte [runhigh],0FFh
 29096                                  	;mov	byte [cs:runhigh],0FFh
 29097                                  limx:	; 11/12/2022
 29098 000026FC C3                      	retn
 29099                                  
 29100                                  ;----------------------------------------------------------------------------
 29101                                  ;
 29102                                  ; procedure : LieInt12Mem
 29103                                  ;
 29104                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 29105                                  ;		alloclim set to the limit of low memory.
 29106                                  ;
 29107                                  ;	Output : none
 29108                                  ;
 29109                                  ;	Changes the ROM BIOS variable which stores the total low memory
 29110                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 29111                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 29112                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 29113                                  ;	converted into Ks and stored in 40:13h
 29114                                  ;
 29115                                  ;----------------------------------------------------------------------------
 29116                                  
 29117                                  LieInt12Mem:
 29118                                  	; 11/12/2022
 29119                                  	; ds = cs
 29120 000026FD A1[A302]                	mov	ax,[ALLOCLIM]
 29121                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 29122                                  					; assuming that it is 3Com
 29123 00002700 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 29124 00002703 740A                    	jz	short lim_set		; yes, lie to him differently
 29125                                  	; 13/05/2019
 29126                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 29127                                  	;je	short limx		; no, don't lie
 29128                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 29129                                  	; 11/12/2022
 29130                                  	; ds = cs
 29131 00002705 803E[7D1E]00            	cmp	byte [DeviceHi],0
 29132 0000270A 74F0                    	je	short limx
 29133 0000270C A1[641E]                	mov	ax,[DevLoadEnd]
 29134                                  lim_set:
 29135                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29136                                  	; 11/12/2022
 29137                                  	;call	SetInt12Mem
 29138                                  ;limx:
 29139                                  	;retn
 29140                                  	
 29141                                  	;jmp	short SetInt12Mem 
 29142                                  
 29143                                  ;----------------------------------------------------------------------------
 29144                                  ;
 29145                                  ; procedure : SetInt12Mem
 29146                                  ;
 29147                                  ;	Input : AX = Memory size to be set (in paras)
 29148                                  ;	Output : none
 29149                                  ;
 29150                                  ;	Sets the variable 40:13 to the memory size passed in AX
 29151                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 29152                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 29153                                  ;	restoring the value of 40:13
 29154                                  ;
 29155                                  ;----------------------------------------------------------------------------
 29156                                  
 29157                                  	; 01/11/2022
 29158                                  SetInt12Mem:
 29159 0000270F 1E                      	push	ds
 29160 00002710 BB4000                  	mov	bx,40h
 29161 00002713 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 29162 00002715 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 29163 00002719 2E891E[811E]            	mov	[cs:OldInt12Mem],bx	; save it
 29164 0000271E B106                    	mov	cl,6
 29165 00002720 D3E8                    	shr	ax,cl			; convert paras into Ks
 29166 00002722 A31300                  	mov	[13h],ax		; Lie
 29167 00002725 2EC606[801E]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 29168 0000272B 1F                      	pop	ds
 29169                                  ;limx:
 29170 0000272C C3                      	retn
 29171                                  
 29172                                  ;----------------------------------------------------------------------------
 29173                                  ;
 29174                                  ; procedure : TrueInt12Mem
 29175                                  ;
 29176                                  ;	Input : Int12Lied = 0 if we are not lying currently
 29177                                  ;			  = 0ffh if we are lying
 29178                                  ;		OldInt12Mem = Saved value of 40:13h
 29179                                  ;
 29180                                  ;	Output : none
 29181                                  ;
 29182                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 29183                                  ;	and resets the flag which indicates that we were lying
 29184                                  ;
 29185                                  ;----------------------------------------------------------------------------
 29186                                  
 29187                                  TrueInt12Mem:
 29188                                  	; 11/12/2022
 29189                                  	; ds = cs
 29190 0000272D 803E[801E]00            	cmp	byte [Int12Lied],0
 29191                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 29192                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 29193                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 29194 00002732 7412                    	je	short timx		; no, we weren't
 29195                                  	; 18/12/2022
 29196 00002734 B84000                  	mov	ax,40h
 29197 00002737 8826[801E]              	mov	[Int12Lied],ah ; 0
 29198                                  	;mov	byte [Int12Lied],0
 29199                                  	;mov	byte [cs:Int12Lied],0
 29200 0000273B 1E                      	push	ds
 29201                                  	;mov	ax,40h
 29202 0000273C 8ED8                    	mov	ds,ax
 29203 0000273E 2EA1[811E]              	mov	ax,[cs:OldInt12Mem]
 29204 00002742 A31300                  	mov	[13h],ax		; restore INT 12 memory
 29205 00002745 1F                      	pop	ds
 29206                                  timx:
 29207 00002746 C3                      	retn
 29208                                  
 29209                                  ;----------------------------------------------------------------------------
 29210                                  ;
 29211                                  ; procedure : IsIt3Com?
 29212                                  ;
 29213                                  ;	Input : DevEntry = Seg:0 of device driver
 29214                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 29215                                  ;		 else Zero flag is reset
 29216                                  ;
 29217                                  ;----------------------------------------------------------------------------
 29218                                  
 29219                                  IsIt3Com:
 29220                                  	; 11/12/2022
 29221                                  	; ds = cs
 29222 00002747 1E                      	push	ds
 29223 00002748 06                      	push	es
 29224 00002749 56                      	push	si
 29225                                  	; 11/12/2022
 29226 0000274A C536[661E]              	lds	si,[DevEntry]
 29227                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 29228 0000274E 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 29229 00002751 0E                      	push	cs
 29230 00002752 07                      	pop	es
 29231 00002753 BF[831E]                	mov	di,ThreeComName
 29232 00002756 B90800                  	mov	cx,8			; name length
 29233 00002759 F3A6                    	rep	cmpsb
 29234 0000275B 5E                      	pop	si
 29235 0000275C 07                      	pop	es
 29236 0000275D 1F                      	pop	ds
 29237 0000275E C3                      	retn
 29238                                  
 29239                                  ;M020 : BEGIN
 29240                                  ;----------------------------------------------------------------------------
 29241                                  
 29242                                  UpdatePDB:
 29243 0000275F 1E                      	push	ds
 29244 00002760 B462                    	mov	ah,62h
 29245 00002762 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 29246 00002764 8EDB                    	mov	ds,bx
 29247 00002766 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 29248                                  	;mov	[2],bx
 29249 0000276B 891E0200                	mov	[PDB.BLOCK_LEN],bx
 29250 0000276F 1F                      	pop	ds
 29251 00002770 C3                      	retn
 29252                                  
 29253                                  ; M020 : END
 29254                                  
 29255                                  ;----------------------------------------------------------------------------
 29256                                  
 29257                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29258                                  
 29259                                  %if 0
 29260                                  
 29261                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 29262                                  ;include highexit.inc	; umb's, etc
 29263                                  
 29264                                  ; ----------------------------------------------------------------------
 29265                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 29266                                  ; ----------------------------------------------------------------------
 29267                                  ; 07/04/2019 - Retro DOS v4.0
 29268                                  
 29269                                  ;******************************************************************************
 29270                                  ;
 29271                                  ; This file contains routines needed to parse and implement user-given
 29272                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 29273                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 29274                                  ; the variables in highvar.inc, for use by the rest of the routines.
 29275                                  ;
 29276                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 29277                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 29278                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 29279                                  ;    DH/LH module opts
 29280                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 29281                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 29282                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 29283                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 29284                                  ; available during the load.
 29285                                  ;
 29286                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 29287                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 29288                                  ; upper-memory block which was not specified by the user... in addition, if
 29289                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 29290                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 29291                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 29292                                  ; free any UMBs so allocated.
 29293                                  ;
 29294                                  ; When a device driver loads, there is the additional problem of allocating its
 29295                                  ; initial load site; this should be restricted to the first UMB specified on
 29296                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 29297                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 29298                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 29299                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 29300                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 29301                                  ;
 29302                                  ;******************************************************************************
 29303                                  
 29304                                  SWTCH	equ	'/'		; Switch character
 29305                                  
 29306                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 29307                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 29308                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 29309                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 29310                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 29311                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 29312                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 29313                                  
 29314                                  CR	equ	0Dh		; Carriage Return
 29315                                  LF	equ	0Ah		; Line Feed
 29316                                  TAB	equ	09h		; Tab character (^I)
 29317                                  
 29318                                  ; -----------------------------------------------------------------------------
 29319                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 29320                                  ; -----------------------------------------------------------------------------
 29321                                  ; ENTRY:       None
 29322                                  ; EXIT:        Variables listed in highvar.inc are initialized
 29323                                  ; ERROR EXIT:  None
 29324                                  ; USES:        Flags, variables in highvar.inc
 29325                                  ; -----------------------------------------------------------------------------
 29326                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 29327                                  ; are largely ignored, but it is initialized nonetheless.
 29328                                  ; -----------------------------------------------------------------------------
 29329                                  
 29330                                  InitVar:
 29331                                  	;pushreg <ax, cx, di, es>
 29332                                  	push	ax
 29333                                  	push	cx
 29334                                  	push	di
 29335                                  	push	es
 29336                                  
 29337                                  	;dataseg es			;Point ES into appropriate data segment
 29338                                  	push	cs
 29339                                  	pop	es
 29340                                  
 29341                                  	xor	ax,ax
 29342                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 29343                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 29344                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 29345                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 29346                                  					;Later is the # of the 1st spec'd UMB
 29347                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 29348                                  
 29349                                  	cld
 29350                                  
 29351                                  	mov	cx,MAXUMB ; 16		;For each entry
 29352                                  	mov	di,UmbUsed		;on the UmbUsed array,
 29353                                  	rep	stosb			;	Store 0
 29354                                  
 29355                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 29356                                  	mov	di,UmbSize		;on the UmbSize array,
 29357                                  	rep	stosw			;	Store 0
 29358                                  
 29359                                  	;normseg es			; Return ES
 29360                                  
 29361                                  	;popreg	<es, di, cx, ax>
 29362                                  	pop	es
 29363                                  	pop	di
 29364                                  	pop	cx
 29365                                  	pop	ax	 	
 29366                                  
 29367                                  	retn
 29368                                  
 29369                                  ; -----------------------------------------------------------------------------
 29370                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 29371                                  ; -----------------------------------------------------------------------------
 29372                                  ; ENTRY   : None
 29373                                  ; EXIT    : None
 29374                                  ; ERROR   : None
 29375                                  ; USES    : Flags, fm_umb, fm_strat
 29376                                  ; -----------------------------------------------------------------------------
 29377                                  
 29378                                  FixMem:
 29379                                  	push	ax
 29380                                  	push	bx
 29381                                  	push	cx
 29382                                  	push	dx
 29383                                  	push	es
 29384                                  
 29385                                  	call	fm_link		; Link in UMBs
 29386                                  
 29387                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 29388                                  	jc	short fmX	; (if couldn't get it, leave now).
 29389                                  
 29390                                  	mov	es,ax		; It returns in AX, so move it to ES.
 29391                                  
 29392                                  ; - Walk MCB Chain ------------------------------------------------------------
 29393                                  
 29394                                  	xor	dx,dx		; We're keeping the address of the last MCB
 29395                                  	mov 	cx,dx		; in CX... and the last owner
 29396                                  	inc	dx		; in dx as we go through the loop:
 29397                                  
 29398                                  ; ------------------------------------------
 29399                                  ; FM10--DX  = last MCB's owner's PSP address
 29400                                  ;       CX  = last MCB's address (segment)
 29401                                  ; ------------------------------------------
 29402                                  
 29403                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 29404                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 29405                                  	or	bx,dx			; dx was owner of previous MCB
 29406                                  	jnz	short fm30		; If not both zero, don't cat.
 29407                                  
 29408                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 29409                                  
 29410                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 29411                                  	mov	es,cx			; Go back to prev MCB's address
 29412                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 29413                                  
 29414                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 29415                                  	;add	bx,1			; And add one for the header
 29416                                  	; 14/08/2023
 29417                                  	inc	bx
 29418                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 29419                                  
 29420                                  	; ---------------------------------------------------------------------
 29421                                  
 29422                                  fm30:	mov	cx,es			; Put this address on the stack
 29423                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 29424                                  
 29425                                  	mov	bx,es			; Move to the next MCB
 29426                                  	add	bx,[es:ARENA.SIZE]
 29427                                  	inc	bx
 29428                                  	mov	es,bx
 29429                                  
 29430                                  	;cmp	al,'Z'
 29431                                  	cmp	al,arena_signature_end
 29432                                  	jne	short fm10		; If signature != 'Z', there are more.
 29433                                  fmX:	
 29434                                  	call	fm_unlink		; Unlink UMBs
 29435                                  
 29436                                  	pop	es
 29437                                  	pop	dx
 29438                                  	pop	cx
 29439                                  	pop	bx
 29440                                  	pop	ax
 29441                                  
 29442                                  	retn
 29443                                  
 29444                                  ; -----------------------------------------------------------------------------
 29445                                  ;*** fm_link - links UMBs not already linked in
 29446                                  ; -----------------------------------------------------------------------------
 29447                                  ; ENTRY:    None
 29448                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 29449                                  ; ERROR:    None
 29450                                  ; USES:     AX, BX, fm_umb
 29451                                  ; -----------------------------------------------------------------------------
 29452                                  
 29453                                  fm_link:
 29454                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 29455                                  	int	21h			; Current link-state is now in al
 29456                                  
 29457                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 29458                                  	;
 29459                                  	;push	es
 29460                                  	;push	cs
 29461                                  	;pop	es
 29462                                  	;mov	[es:fm_umb],al
 29463                                  	;pop	es
 29464                                  	
 29465                                  	mov	[cs:fm_umb],al
 29466                                  
 29467                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29468                                  	mov	bx,1
 29469                                  	int	21h
 29470                                  	retn
 29471                                  
 29472                                  ; -----------------------------------------------------------------------------
 29473                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 29474                                  ; -----------------------------------------------------------------------------
 29475                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 29476                                  ; EXIT:     None
 29477                                  ; ERROR:    None
 29478                                  ; USES:     AX, BX
 29479                                  ; -----------------------------------------------------------------------------
 29480                                  
 29481                                  fm_unlink:
 29482                                  	xor	bx,bx
 29483                                  	
 29484                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 29485                                  	;
 29486                                  	;push	ds
 29487                                  	;push	cs
 29488                                  	;pop	ds
 29489                                  	;mov	bl,[fm_umb]	
 29490                                  	;pop	ds
 29491                                  	
 29492                                  	mov	bl,[cs:fm_umb]
 29493                                  
 29494                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29495                                  	int	21h			; so just use that, and call int 21h
 29496                                  	retn
 29497                                  
 29498                                  ; 08/04/2019 - Retro DOS v4.0
 29499                                  
 29500                                  ; -----------------------------------------------------------------------------
 29501                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 29502                                  ; laid out in highvar.inc
 29503                                  ; -----------------------------------------------------------------------------
 29504                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 29505                                  ; EXIT:     ES:SI points to first character in child program name
 29506                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 29507                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 29508                                  ; -----------------------------------------------------------------------------
 29509                                  ; Error codes (in AX if carry set on return):
 29510                                  ;
 29511                                  PV_InvArg	equ	1	; Invalid argument passed
 29512                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 29513                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 29514                                  ;
 29515                                  ; This routine exects ES:SI to point to a string much like the following:
 29516                                  ;    "/S/L:1,200;2 module options"
 29517                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 29518                                  ; required, though that's what this routine is supposed to parse.
 29519                                  ;
 29520                                  optS		equ	'S'	; /S
 29521                                  optL		equ	'L'	; /L:...
 29522                                  ;
 29523                                  ; -----------------------------------------------------------------------------
 29524                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 29525                                  ; a command-line for spawning a child process. For a typical LH command, say,
 29526                                  ;     lh /l:1,1000;2 print/d:lpt2
 29527                                  ; the arguments would look like (one per line):
 29528                                  ;     lh
 29529                                  ;     /l
 29530                                  ;     1
 29531                                  ;     1000
 29532                                  ;     2
 29533                                  ;     print
 29534                                  ;     /d
 29535                                  ;     :lpt2
 29536                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 29537                                  ; arg was the filename. So, inside this routine, we keep a running counter
 29538                                  ; of the number of arguments LH will need to skip in order to get to the
 29539                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 29540                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 29541                                  ; for:
 29542                                  ;    Each /L
 29543                                  ;    Each /S (there should be only one)
 29544                                  ;    Each UMB number (they follow ":" or ";")
 29545                                  ;    Each UMB size   (they follow ",")
 29546                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 29547                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 29548                                  ; -----------------------------------------------------------------------------
 29549                                  
 29550                                  ParseVar:
 29551                                  	;pushreg <di, ds, es>
 29552                                  	push	di
 29553                                  	push	ds
 29554                                  	push	es
 29555                                  
 29556                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 29557                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 29558                                  	cld
 29559                                  
 29560                                  ; ------------------------------------------------
 29561                                  ; PV10--ES:SI = any whitespace on the command-line
 29562                                  ; ------------------------------------------------
 29563                                  
 29564                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 29565                                  	call	isWhite
 29566                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 29567                                  	;cmp	al,'/'
 29568                                  	cmp	al,SWTCH
 29569                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 29570                                  
 29571                                  	dec	si		; Backup--it's now "odule options", and we need
 29572                                  	clc			; that "m" we just read (or whatever it is).
 29573                                  	jmp	short pvX	; Then return with carry clear == we're done.
 29574                                  
 29575                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 29576                                  	;toUpper al		; So we make it upper-case, and...
 29577                                  	and	al,0DFh
 29578                                  	;cmp	al,'S'
 29579                                  	cmp	al,optS		; just read 'S'?
 29580                                  	jne	short pv30
 29581                                  
 29582                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 29583                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29584                                  
 29585                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 29586                                  	;
 29587                                  	;push	es
 29588                                  	;push	cs
 29589                                  	;pop	es
 29590                                  	;mov	[es:fUmbTiny],1	
 29591                                  	;pop	es
 29592                                  
 29593                                  	mov	byte [cs:fUmbTiny],1
 29594                                  
 29595                                  	jmp	short pv10	; possibly even "/L...".
 29596                                  
 29597                                  pv30:	;cmp	al,'L'
 29598                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 29599                                  	jne	short pvE1		; switch!
 29600                                  
 29601                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 29602                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29603                                  
 29604                                  	call	parseL
 29605                                  	jnc	short pv10	; If no carry, go back and look for more
 29606                                  
 29607                                  	dec	si		; Else, back up and exit.
 29608                                  	jmp	short pvErr	; AX has already been set by parseL
 29609                                  
 29610                                  pvE1:	;mov	ax,3
 29611                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 29612                                  pvErr:	dec	si
 29613                                  	dec	si
 29614                                  	stc
 29615                                  pvX:	;popreg	<es, ds, di>
 29616                                  	pop	es
 29617                                  	pop	ds
 29618                                  	pop	di
 29619                                  	retn
 29620                                  
 29621                                  ; -----------------------------------------------------------------------------
 29622                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 29623                                  ; -----------------------------------------------------------------------------
 29624                                  ; ENTRY:    ES:SI points to colon
 29625                                  ; EXIT:     ES:SI points to first character not parsed
 29626                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 29627                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 29628                                  ; -----------------------------------------------------------------------------
 29629                                  ; If the string here is terminated with anything other than whitespace or a
 29630                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 29631                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 29632                                  ; makes sure the app /L: is reported as being the culprit.
 29633                                  ; -----------------------------------------------------------------------------
 29634                                  
 29635                                  parseL:
 29636                                  	lodsb
 29637                                  	cmp	al,':'		; Make sure they did /L:
 29638                                  	jne	short plE1	; If they didn't, return with carry set.
 29639                                  
 29640                                  ; ------------------------------------------
 29641                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 29642                                  ; ------------------------------------------
 29643                                  
 29644                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 29645                                  	jc	short plE2	; And error if it's a bad number.
 29646                                  	call	convUMB		; Convert any address to a UMB number
 29647                                  
 29648                                  	mov	cl,al		; Remember the UMB number
 29649                                  	call	stowUMB		; Mark this UMB # as used;
 29650                                  	jc	short plE2	; If it was already marked, it'll error
 29651                                  
 29652                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 29653                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29654                                  
 29655                                  	lodsb
 29656                                  	cmp	al,';'		; Did "umb;" ?
 29657                                  	je	short pl10	; Yep: go back and get another UMB.
 29658                                  
 29659                                  	call	isWhite		; Did "umb " ?
 29660                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 29661                                  
 29662                                  	call	isEOL		; Did "umb" ?
 29663                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 29664                                  
 29665                                  	;cmp	al,'/'
 29666                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 29667                                  	je	short plSwX	; If so, back up ES:SI one character and return
 29668                                  
 29669                                  	cmp	al,','		; Did "umb," ?
 29670                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 29671                                  
 29672                                  ; --- Read a size -------------------------------------------------------------
 29673                                  
 29674                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 29675                                  	jc	short plE1	; And error if it's a bad size.
 29676                                  
 29677                                  	call	toPara		; Convert from bytes to paragraphs
 29678                                  
 29679                                  	call	stowSiz		; CL still has the UMB number for this routine
 29680                                  
 29681                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 29682                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29683                                  
 29684                                  	lodsb
 29685                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 29686                                  	je	short pl10	;
 29687                                  
 29688                                  	call	isWhite		; Did it end with whitespace?
 29689                                  	jz	short plX	; If so, we're done here--go back.
 29690                                  
 29691                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 29692                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 29693                                  
 29694                                  	;cmp	al,'/'
 29695                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 29696                                  	je	short plSwX	; If so, again, we're done here.
 29697                                  plE1:	
 29698                                  	;mov	ax,1
 29699                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 29700                                  	dec	si
 29701                                  	stc
 29702                                  	retn
 29703                                  
 29704                                  plE2:	;mov	ax,2
 29705                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 29706                                  	; 12/12/2022
 29707                                  	; cf=1
 29708                                  	;stc
 29709                                  	retn
 29710                                  plSwX:	
 29711                                  	dec	si		; If we hit a '/' character, back up one char
 29712                                  				; so the whitespace checker will see it too.
 29713                                  plX:	; 12/12/2022
 29714                                  	; cf=0
 29715                                  	;clc			; Then just return with carry clear, so
 29716                                  	retn			; ParseVar will go about its business.
 29717                                  
 29718                                  ; -----------------------------------------------------------------------------
 29719                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 29720                                  ; -----------------------------------------------------------------------------
 29721                                  ; ENTRY:    None
 29722                                  ; EXIT:     None
 29723                                  ; ERROR:    None
 29724                                  ; USES:     fm_argc, flags
 29725                                  ; -----------------------------------------------------------------------------
 29726                                  
 29727                                  ;incArgc:
 29728                                  	;push	ax
 29729                                  
 29730                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 29731                                  
 29732                                  	;mov	al,[cs:fm_argc]
 29733                                  
 29734                                  	;inc	al		; Increment it,
 29735                                  
 29736                                  	;;putdata fm_argc, al	; And store it right back.
 29737                                  
 29738                                  	;mov	[cs:fm_argc],al
 29739                                  
 29740                                  	;pop	ax
 29741                                  	;retn
 29742                                  
 29743                                  ; -----------------------------------------------------------------------------
 29744                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 29745                                  ; -----------------------------------------------------------------------------
 29746                                  ; ENTRY:    AL contains character to test
 29747                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 29748                                  ; ERROR:    None
 29749                                  ; USES:     ZF
 29750                                  ; -----------------------------------------------------------------------------
 29751                                  
 29752                                  isEOL:
 29753                                  	cmp	al,0		; Null-terminator
 29754                                  	je	short ieX
 29755                                  	cmp	al,CR ; 0Dh	; Carriage Return
 29756                                  	je	short ieX
 29757                                  	cmp	al,LF ; 0Ah	; LineFeed
 29758                                  ieX:	
 29759                                  	retn
 29760                                  
 29761                                  ; -----------------------------------------------------------------------------
 29762                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 29763                                  ; -----------------------------------------------------------------------------
 29764                                  ; ENTRY:    AL contains character to test
 29765                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 29766                                  ; ERROR:    None
 29767                                  ; USES:     ZF
 29768                                  ; -----------------------------------------------------------------------------
 29769                                  
 29770                                  isWhite:
 29771                                  	cmp	al,' '		; Space
 29772                                  	je	short iwX
 29773                                  	cmp	al,'='		; Equals (treat as whitespace)
 29774                                  	je	short iwX
 29775                                  	cmp	al,tab ; 9	; Tab
 29776                                  iwX:	
 29777                                  	retn
 29778                                  
 29779                                  ; -----------------------------------------------------------------------------
 29780                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 29781                                  ; -----------------------------------------------------------------------------
 29782                                  ; ENTRY:    AL contains UMB number
 29783                                  ; EXIT:     None
 29784                                  ; ERROR:    None
 29785                                  ; USES:     Flags, variables in highvar.inc
 29786                                  ; -----------------------------------------------------------------------------
 29787                                  
 29788                                  unMarkUMB:
 29789                                  	push	ax
 29790                                  	push	bx
 29791                                  	push	di
 29792                                  	push	es
 29793                                  
 29794                                  	push	cs
 29795                                  	pop	es
 29796                                  
 29797                                  	xor	ah,ah
 29798                                  	mov	bx,ax
 29799                                  
 29800                                  	; 19/04/2019
 29801                                  	
 29802                                  	;mov	byte [es:bx+UmbUsed],0
 29803                                  	mov	[es:bx+UmbUsed],ah ; 0
 29804                                  
 29805                                  	cmp	[es:UmbLoad],al
 29806                                  	jne	short umu10
 29807                                  
 29808                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 29809                                  	mov	[es:UmbLoad],ah ; 0
 29810                                  umu10:	
 29811                                  	pop	es
 29812                                  	pop	di
 29813                                  	pop	bx
 29814                                  	pop	ax
 29815                                  	retn
 29816                                  
 29817                                  ; -----------------------------------------------------------------------------
 29818                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 29819                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 29820                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 29821                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 29822                                  ; -----------------------------------------------------------------------------
 29823                                  ; ENTRY:    AL contains UMB number, as specified by the user
 29824                                  ; EXIT:     None
 29825                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 29826                                  ; USES:     AX, Flags, variables in highvar.inc
 29827                                  ; -----------------------------------------------------------------------------
 29828                                  
 29829                                  stowUMB:
 29830                                  	cmp	al,MAXUMB ; 16
 29831                                  	jb	short su10
 29832                                  	stc
 29833                                  	retn			; Ooops-- UMB>=MAXUMB
 29834                                  su10:	
 29835                                  	push	bx
 29836                                  	push	di
 29837                                  	push	si
 29838                                  	push	ds
 29839                                  	push	es
 29840                                  	push	cs
 29841                                  	pop	es
 29842                                  	push	cs
 29843                                  	pop	ds
 29844                                  	
 29845                                  	;cmp	byte [UmbLoad],0FFh
 29846                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 29847                                  	jne	short su20
 29848                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 29849                                  su20:	
 29850                                  	or	al,al		; If they gave UMB 0, there's really nothing
 29851                                  	jz	short su30	; that we should do here.
 29852                                  
 29853                                  	mov	bl,al
 29854                                  	xor	bh,bh
 29855                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 29856                                  
 29857                                  	xchg	[es:bx+UmbUsed],al
 29858                                  
 29859                                  	or	al,al		; If it was already 1, then al==1... and that
 29860                                  	jz	short su30	; means an error.
 29861                                  
 29862                                  	stc			; OOOPS!  This one's been used before.  :(
 29863                                  su30:	
 29864                                  	pop	es
 29865                                  	pop	ds
 29866                                  	pop	si
 29867                                  	pop	di
 29868                                  	pop	bx
 29869                                  	retn
 29870                                  
 29871                                  ; -----------------------------------------------------------------------------
 29872                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 29873                                  ; -----------------------------------------------------------------------------
 29874                                  ; ENTRY:    CL contains UMB number, AX contains size
 29875                                  ; EXIT:     None
 29876                                  ; ERROR:    None
 29877                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 29878                                  ; -----------------------------------------------------------------------------
 29879                                  
 29880                                  ; 13/05/2019
 29881                                  
 29882                                  stowSiz:
 29883                                  	push	bx
 29884                                  	;push	di ; ?
 29885                                  	push	es
 29886                                  
 29887                                  	push	cs
 29888                                  	pop	es	
 29889                                  
 29890                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 29891                                  	mov	bh,0			;     bx==UMB number, AX==size
 29892                                  	shl	bl,1			;     bx==offset into array, AX=size
 29893                                  	mov	[es:bx+UmbSize],ax	; Store the size
 29894                                  	
 29895                                  	pop	es
 29896                                  	;pop	di ; ?
 29897                                  	pop	bx
 29898                                  
 29899                                  	retn
 29900                                  
 29901                                  ; -----------------------------------------------------------------------------
 29902                                  ;*** toDigit - converts a character-digit to its binary counterpart
 29903                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 29904                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 29905                                  ; A-F are considered valid iff gnradix is 16.
 29906                                  ; -----------------------------------------------------------------------------
 29907                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 29908                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 29909                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 29910                                  ; USES:     CL, Flags
 29911                                  ; -----------------------------------------------------------------------------
 29912                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29913                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29914                                  ; will be 10 or 16.
 29915                                  ; -----------------------------------------------------------------------------
 29916                                  
 29917                                  gnradix:
 29918                                  	dw	0		; Must be a word--16x16 multiplication
 29919                                  
 29920                                  toDigit:
 29921                                  	cmp	word [cs:gnradix],16
 29922                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 29923                                  
 29924                                  toDigit_hex:
 29925                                  	cmp	cl,'a'	; 61h
 29926                                  	jb	short td10
 29927                                  	cmp	cl,'f'	; 66h
 29928                                  	ja	short tdE	; Nothing valid above 'z' at all...
 29929                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 29930                                  	;clc			; <- CLC is implicit from last SUB
 29931                                  	retn
 29932                                  td10:	
 29933                                  	cmp	cl,'A'  ; 41h
 29934                                  	jb	short td20	; Below 'A'?  Not a letter...
 29935                                  	cmp	cl,'F'	; 46h
 29936                                  	ja	short tdE	; Above 'F'?  Not a digit.
 29937                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 29938                                  	;clc			; <- CLC is implicit from last SUB
 29939                                  	retn
 29940                                  toDigit_dec:
 29941                                  td20:	
 29942                                  	cmp	cl,'0'		; If less than zero,
 29943                                  	;jb	short tdE	; Done.
 29944                                  	jb	short tdEr ; 08/04/2019
 29945                                  	cmp	cl,'9'		; Or, if greater than nine,
 29946                                  	ja	short tdE	; Done.
 29947                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 29948                                  	;clc			; <- CLC is implicit from last SUB
 29949                                  	retn
 29950                                  tdE:	
 29951                                  	stc
 29952                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 29953                                  	retn
 29954                                  
 29955                                  ; -----------------------------------------------------------------------------
 29956                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 29957                                  ; -----------------------------------------------------------------------------
 29958                                  ; ENTRY:    ES:SI points to an ascii string to scan
 29959                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 29960                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 29961                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 29962                                  ; -----------------------------------------------------------------------------
 29963                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29964                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29965                                  ; will be 10 or 16.
 29966                                  ; -----------------------------------------------------------------------------
 29967                                  
 29968                                  ; 08/04/2019 - Retro DOS v4.0
 29969                                  
 29970                                  GetXNum:
 29971                                  	;pushreg <bx, cx, ds>
 29972                                  	push	bx
 29973                                  	push	cx
 29974                                  	push	ds
 29975                                  
 29976                                  	cld
 29977                                  	xor	ax,ax
 29978                                  	xor	bx,bx
 29979                                  	xor	cx,cx
 29980                                  	xor	dx,dx			; Start with 0 (makes sense)
 29981                                  
 29982                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 29983                                  
 29984                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 29985                                  	;call	toDigit
 29986                                  	call	toDigit_dec
 29987                                  	jc	short gxnE		; If it's not a digit, leave now.
 29988                                  
 29989                                  	or	cl,cl
 29990                                  	jnz	short gxn20		; Doesn't have '0x'
 29991                                  	mov	cl,[es:si+1]
 29992                                  	cmp	cl,'x'			; Either 'x'...
 29993                                  	je	short gxn10
 29994                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29995                                  	jne	short gxn20
 29996                                  
 29997                                  gxn10:	
 29998                                  	mov	word [cs:gnradix], 16
 29999                                  	inc	si			; Since we read "0x", march over it.
 30000                                  	inc	si
 30001                                  
 30002                                  ; ------------------------------------------------------
 30003                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 30004                                  ;        DX:AX = current total
 30005                                  ;        BX    = 0
 30006                                  ;        CH    = 0
 30007                                  ; ------------------------------------------------------
 30008                                  
 30009                                  gxn20:	
 30010                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 30011                                  	inc	si
 30012                                  
 30013                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 30014                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 30015                                  
 30016                                  	call	mul32		; Multiply DX:AX by gnradix
 30017                                  	jc	short gxnX	; (if it's too big, error out)
 30018                                  
 30019                                  	add	ax,cx		; Add the digit
 30020                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 30021                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 30022                                  	;jmp	short gxn20
 30023                                  	jnc	short gxn20
 30024                                  gxnE:	
 30025                                  	;stc			; In this case, we need to set the carry
 30026                                  	jmp	short gxnX	; and leave--there were no digits given.
 30027                                  gxnQ:	
 30028                                  	dec	si		; Don't read in the offensive character.
 30029                                  	clc			; And clear carry, so they know it's okay.
 30030                                  gxnX:	
 30031                                  	pop	ds
 30032                                  	pop	cx
 30033                                  	pop	bx
 30034                                  	retn
 30035                                  
 30036                                  ; -----------------------------------------------------------------------------
 30037                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 30038                                  ; -----------------------------------------------------------------------------
 30039                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 30040                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 30041                                  ; ERROR:   Carry set if number was too large
 30042                                  ; USES:    Flags, AX, DX
 30043                                  ; -----------------------------------------------------------------------------
 30044                                  
 30045                                  mul32:
 30046                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 30047                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 30048                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 30049                                  	jc	short m32E	; Too big?
 30050                                  
 30051                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 30052                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 30053                                  
 30054                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 30055                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 30056                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30057                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30058                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 30059                                  	retn
 30060                                  m32E:	
 30061                                  	pop	ax
 30062                                  	retn
 30063                                  
 30064                                  ; -----------------------------------------------------------------------------
 30065                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 30066                                  ; -----------------------------------------------------------------------------
 30067                                  ; ENTRY:   DX:AX = the number to be divided
 30068                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 30069                                  ; ERROR:   None
 30070                                  ; USES:    Flags, AX, DX
 30071                                  ; -----------------------------------------------------------------------------
 30072                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 30073                                  ;       can't ensure a 386 host machine. Sorry.
 30074                                  ; -----------------------------------------------------------------------------
 30075                                  
 30076                                  toPara:
 30077                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 30078                                  
 30079                                  	mov	cl,4		;
 30080                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 30081                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 30082                                  	mov	cl,12
 30083                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 30084                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 30085                                  
 30086                                  	pop	cx
 30087                                  	retn
 30088                                  
 30089                                  ; -----------------------------------------------------------------------------
 30090                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 30091                                  ; -----------------------------------------------------------------------------
 30092                                  ; ENTRY:  Nothing
 30093                                  ; EXIT:   AX contains 0x9FFF for most systems
 30094                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30095                                  ; USES:   Flags, AX
 30096                                  ; -----------------------------------------------------------------------------
 30097                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 30098                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 30099                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 30100                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 30101                                  ; -----------------------------------------------------------------------------
 30102                                  
 30103                                  UmbHead:
 30104                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 30105                                  
 30106                                  	;push	si ; ?
 30107                                  	;push	ds ; ? 
 30108                                  	;push	es
 30109                                  	;push	bx ; *	
 30110                                  
 30111                                  	; 09/04/2019
 30112                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30113                                  
 30114                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30115                                  	int	21h
 30116                                  
 30117                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 30118                                  	cmp	ax,0FFFFh
 30119                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 30120                                  
 30121                                  	clc				; Else, it isn't (CLC done by prev cmp)
 30122                                  	;jmp	short uhX
 30123                                  	; 12/12/2022
 30124                                  	retn
 30125                                  uhE:	
 30126                                  	stc
 30127                                  uhX:	
 30128                                  	;pop	bx ; *
 30129                                  	;pop	es
 30130                                  	;pop	ds ; ?
 30131                                  	;pop	si ; ?
 30132                                  	retn
 30133                                  
 30134                                  ; -----------------------------------------------------------------------------
 30135                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 30136                                  ; -----------------------------------------------------------------------------
 30137                                  ; ENTRY:  ES:0 should point to a valid MCB
 30138                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 30139                                  ; USES:   Flags
 30140                                  ; -----------------------------------------------------------------------------
 30141                                  
 30142                                  isSysMCB:
 30143                                  	;push	ax
 30144                                  
 30145                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30146                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30147                                  	;je	short ism10
 30148                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 30149                                  	;;je	short ism10
 30150                                  	;;jmp	short ismX		; Anything else isn't.
 30151                                  	;jne	short ismX
 30152                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 30153                                  	jne	short ismX 
 30154                                  ism10:	
 30155                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 30156                                  	;cmp	ax,'SC' ; 4353h
 30157                                  	cmp	word [es:ARENA.NAME],'SC'
 30158                                  ismX:	
 30159                                  	;pop	ax
 30160                                  	retn
 30161                                  
 30162                                  ; 09/04/2019 - Retro DOS v4.0
 30163                                  
 30164                                  ; -----------------------------------------------------------------------------
 30165                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 30166                                  ; -----------------------------------------------------------------------------
 30167                                  ; ENTRY:  AX contains a segment address
 30168                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 30169                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 30170                                  ; USES:   Flags, AX
 30171                                  ; -----------------------------------------------------------------------------
 30172                                  ; An address in the following areas is treated as:
 30173                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 30174                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 30175                                  ;      ...
 30176                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 30177                                  ; -----------------------------------------------------------------------------
 30178                                  
 30179                                  AddrToUmb:
 30180                                  	push	cx
 30181                                  	push	dx
 30182                                  	push	es
 30183                                  
 30184                                  	mov	dx,ax		; DX = address to search for
 30185                                  
 30186                                  	call	UmbHead		; AX = first segment
 30187                                  	jc	short atuE	; If it couldn't get it, error out.
 30188                                  
 30189                                  	; 14/08/2023
 30190                                  	;mov	es,ax ; *	; ES = first UMB segment
 30191                                  	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 30192                                  
 30193                                  	; 22/07/2023
 30194                                  atu10:
 30195                                  	mov	es,ax ; * ; ** ; 14/08/2023
 30196                                  ; ----------------------------------------
 30197                                  ; ATU10--ES - Current MCB address
 30198                                  ;        DX - Address given for conversion
 30199                                  ;        CX - Current UMB #
 30200                                  ; ----------------------------------------
 30201                                  
 30202                                  ;atu10:	
 30203                                  	;mov	ax,es ; * ; 14/08/2023
 30204                                          cmp	ax,dx		; Present segment >= given segment?
 30205                                  	jae	short atuX	; Yep--done.
 30206                                  
 30207                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 30208                                  	jnz	short atu20
 30209                                  
 30210                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 30211                                  atu20:	
 30212                                  	;mov	al,[es:ARENA.SIGNATURE]
 30213                                  	;cmp	al,arena_signature_end  ; 'Z'
 30214                                  	; 14/08/2023
 30215                                  	; ax = es
 30216                                  	;mov	ax,es ; **
 30217                                  	add	ax,[es:ARENA.SIZE]
 30218                                  	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 30219                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 30220                                  
 30221                                  	;NextMCB es,ax
 30222                                  
 30223                                  	;mov	ax,es ; **
 30224                                  	;;add	ax,[es:3]
 30225                                  	;add	ax,[es:ARENA.SIZE]
 30226                                  	inc	ax
 30227                                  	; 14/08/2023
 30228                                  	;mov	es,ax ; *
 30229                                  	jmp	short atu10
 30230                                  
 30231                                  ; -----------------------------------------------------------------------------
 30232                                  ; if we get to atu30, they specified a number that was past the last MCB.
 30233                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 30234                                  ; -----------------------------------------------------------------------------
 30235                                  
 30236                                  atu30:	
 30237                                  	; 14/08/2023
 30238                                  	; ax = es + [es:ARENA.SIZE] 
 30239                                  	;mov	ax,es ; **
 30240                                  	;add	ax,[es:ARENA.SIZE] ; **
 30241                                  	cmp	ax,dx		; Present >= given?
 30242                                  	jae	short atuX	; Yep! It _was_ inside.
 30243                                  atuE:	
 30244                                  	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 30245                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 30246                                  atuX:	
 30247                                  	mov	ax,cx		; Return the UMB number in AX
 30248                                  	
 30249                                  	pop	es	
 30250                                  	pop	dx
 30251                                  	pop	cx
 30252                                  	retn
 30253                                  
 30254                                  ; -----------------------------------------------------------------------------
 30255                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 30256                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 30257                                  ; address rather than a UMB number... and use that address to look up a UMB.
 30258                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 30259                                  ; -----------------------------------------------------------------------------
 30260                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 30261                                  ; EXIT:   AX will contain a UMB number
 30262                                  ; ERROR:  None
 30263                                  ; USES:   Flags, AX
 30264                                  ; -----------------------------------------------------------------------------
 30265                                  
 30266                                  convUMB:
 30267                                  	cmp	word [cs:gnradix],16
 30268                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 30269                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 30270                                  ;cmp	ax,0FFFFh
 30271                                  	;jne	short cu10
 30272                                  	;inc	ax		; If too high, ignore it (make it conventional)
 30273                                  	; 14/08/2023
 30274                                  	inc	ax
 30275                                  	jz	short cu10	; If too high, ignore it (make it conventional)
 30276                                  	dec	ax
 30277                                  cu10:	
 30278                                  	retn
 30279                                  
 30280                                  ; -----------------------------------------------------------------------------
 30281                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 30282                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 30283                                  ; of the usual HIGH_FIRST.  See the code.
 30284                                  ; -----------------------------------------------------------------------------
 30285                                  ; ENTRY:  None
 30286                                  ; EXIT:   None
 30287                                  ; ERROR:  None
 30288                                  ; USES:   Flags, fm_umb, fm_strat
 30289                                  ; -----------------------------------------------------------------------------
 30290                                  
 30291                                  setUMBs:
 30292                                  	push	ax
 30293                                  	push	bx
 30294                                  	call	fm_link
 30295                                  	pop	bx
 30296                                  	pop	ax
 30297                                  	retn
 30298                                  
 30299                                  ; -----------------------------------------------------------------------------
 30300                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 30301                                  ; -----------------------------------------------------------------------------
 30302                                  ; ENTRY:  None
 30303                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 30304                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 30305                                  ; ERROR:  None
 30306                                  ; USES:   Flags, fm_strat, fm_umb
 30307                                  ; -----------------------------------------------------------------------------
 30308                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 30309                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 30310                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 30311                                  ; such that the load UMB is too small, and shouldn't be used.
 30312                                  ; -----------------------------------------------------------------------------
 30313                                  
 30314                                  loadLow:
 30315                                  	;push	ds
 30316                                  	;push	cs		; Point DS into appropriate data segment
 30317                                  	;pop	ds	
 30318                                  
 30319                                  	;mov	al,[UmbLoad]
 30320                                  	mov	al,[cs:UmbLoad]
 30321                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 30322                                  	jne	short ll10
 30323                                  
 30324                                  	stc
 30325                                  ll15:
 30326                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 30327                                  	;stc
 30328                                  	;jmp	short llX
 30329                                  	retn
 30330                                  ll10:	
 30331                                  	or	al,al		; AL=the load UMB: Is it == 0?
 30332                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 30333                                  
 30334                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 30335                                  	retn
 30336                                  
 30337                                  	;mov	al,1
 30338                                  	;clc
 30339                                  ;llX:
 30340                                  	;pop	ds		; Return DS to where it was
 30341                                  	;retn
 30342                                  
 30343                                  ; -----------------------------------------------------------------------------
 30344                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 30345                                  ; -----------------------------------------------------------------------------
 30346                                  ; ENTRY:  None
 30347                                  ; EXIT:   None
 30348                                  ; ERROR:  None
 30349                                  ; USES:   Flags, fm_strat, fm_umb
 30350                                  ; -----------------------------------------------------------------------------
 30351                                  
 30352                                  HideUMBs:
 30353                                  	push	ax
 30354                                  	push	cx
 30355                                  	push	ds
 30356                                  	push	es
 30357                                  
 30358                                  	call	UmbTest		; See if we REALLY linked in anything...
 30359                                  	jc	short husX	; ...if not, there's nothing for us to do.
 30360                                  
 30361                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 30362                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 30363                                  
 30364                                  	;putdata fInHigh,1	; Remember that we're now running high
 30365                                  	mov	byte [cs:fInHigh],1
 30366                                  
 30367                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 30368                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 30369                                  
 30370                                  	cmp	al,UNSPECIFIED	; If they didn't,
 30371                                  	je	short husX	; then we shouldn't do this loop:
 30372                                  
 30373                                  	xor	cx,cx
 30374                                  
 30375                                  ; -----------------------------------------------
 30376                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 30377                                  ; -----------------------------------------------
 30378                                  
 30379                                  hus10:	inc	cx		; For each UMB:
 30380                                  	cmp	cx,MAXUMB ; 16
 30381                                  	jae	short hus20
 30382                                  
 30383                                  	mov	al,cl		; (stopping as soon as we're outside of the
 30384                                  	push	es
 30385                                  	call	findUMB		; valid range of UMBs)
 30386                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 30387                                  	jc	short hus20
 30388                                  
 30389                                  	call	_hideUMB_	; hide what we need to hide.
 30390                                  
 30391                                  	jmp	short hus10
 30392                                  hus20:	
 30393                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 30394                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 30395                                  
 30396                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 30397                                  	jnz	short husX	; If not, we're done.
 30398                                  
 30399                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 30400                                  husX:	
 30401                                  	pop	es
 30402                                  	pop	ds
 30403                                  	pop	cx
 30404                                  	pop	ax
 30405                                  	retn
 30406                                  
 30407                                  ; -----------------------------------------------------------------------------
 30408                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 30409                                  ; -----------------------------------------------------------------------------
 30410                                  ; ENTRY:  None
 30411                                  ; EXIT:   AL == load UMB
 30412                                  ; ERROR:  None
 30413                                  ; USES:   Flags, AX
 30414                                  ; -----------------------------------------------------------------------------
 30415                                  
 30416                                  ;GetLoadUMB:
 30417                                  ;	;getdata al, UmbLoad
 30418                                  ;	push	ds
 30419                                  ;	push	cs
 30420                                  ;	pop	ds
 30421                                  ;	mov	al,[UmLoad]
 30422                                  ;	pop	ds
 30423                                  ;	retn
 30424                                  
 30425                                  ; -----------------------------------------------------------------------------
 30426                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 30427                                  ; -----------------------------------------------------------------------------
 30428                                  ; ENTRY:  None
 30429                                  ; EXIT:   AX == load UMB minimum size
 30430                                  ; ERROR:  None
 30431                                  ; USES:   Flags, AX
 30432                                  ; -----------------------------------------------------------------------------
 30433                                  
 30434                                  GetLoadSize:
 30435                                  	; 09/04/2019 - Retro DOS v4.0
 30436                                  	mov	al,[cs:UmbLoad]
 30437                                  	jmp	short GetSize
 30438                                  
 30439                                  	;push	bx
 30440                                  	;;push	si
 30441                                  	;push	ds
 30442                                  	;push	cs
 30443                                  	;pop	ds
 30444                                  
 30445                                  	;mov	al,[UmbLoad]
 30446                                  
 30447                                  	;xor	ah,ah			;    ax==UMB
 30448                                  	;mov	bx,UmbSize		;    bx==array
 30449                                  	;shl	al,1	                ;    ax==offset
 30450                                  	;;add	ax,bx			;    ax==element index
 30451                                  	;;mov	si,ax			; ds:si==element index
 30452                                  
 30453                                  	;;lodsw				;    ax==size
 30454                                  
 30455                                  	;add	bx,ax
 30456                                  	;mov	ax,[bx]
 30457                                  
 30458                                  	;pop	ds
 30459                                  	;;pop	si
 30460                                  	;pop	bx
 30461                                  	;retn
 30462                                  
 30463                                  ; -----------------------------------------------------------------------------
 30464                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 30465                                  ; -----------------------------------------------------------------------------
 30466                                  ; ENTRY:  AL == a UMB number
 30467                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 30468                                  ; ERROR:  None
 30469                                  ; USES:   Flags, AX
 30470                                  ; -----------------------------------------------------------------------------
 30471                                  
 30472                                  GetSize:
 30473                                  	; 09/04/2019 - Retro DOS v4.0
 30474                                  
 30475                                  	push	bx
 30476                                  	;push	si
 30477                                  	;push	ds
 30478                                  	;push	cs
 30479                                  	;pop	ds
 30480                                  
 30481                                  	xor	ah,ah			;    ax==UMB
 30482                                  	mov	bx,UmbSize		;    bx==array
 30483                                  	shl	al,1	                ;    ax==offset
 30484                                  	;add	ax,bx			;    ax==element index
 30485                                  	;mov	si,ax			; ds:si==element index
 30486                                  
 30487                                  	;lodsw				;    ax==size
 30488                                  
 30489                                  	add	bx,ax
 30490                                  	;mov	ax,[bx]
 30491                                  	mov	ax,[cs:bx]
 30492                                  
 30493                                  	;pop	ds
 30494                                  	;pop	si
 30495                                  	pop	bx
 30496                                  	retn
 30497                                  
 30498                                  ; -----------------------------------------------------------------------------
 30499                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 30500                                  ; -----------------------------------------------------------------------------
 30501                                  ; ENTRY:   AL == new load UMB
 30502                                  ; EXIT:    None
 30503                                  ; ERROR:   None
 30504                                  ; USES:    Flags, AX
 30505                                  ; -----------------------------------------------------------------------------
 30506                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 30507                                  ;          time you would ever need this, so that's okay.
 30508                                  ; -----------------------------------------------------------------------------
 30509                                  
 30510                                  ;StoLoadUMB:
 30511                                  ;	;putdata UmbLoad, al
 30512                                  ;	push	es
 30513                                  ;	push	cs
 30514                                  ;	pop	es
 30515                                  ;	mov	[es:UmbLoad],al
 30516                                  ;	pop	es
 30517                                  ;	retn
 30518                                  
 30519                                  ; -----------------------------------------------------------------------------
 30520                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 30521                                  ; -----------------------------------------------------------------------------
 30522                                  ; ENTRY:  AL == new load size
 30523                                  ; EXIT:   None
 30524                                  ; ERROR:  None
 30525                                  ; USES:   Flags, AX
 30526                                  ; -----------------------------------------------------------------------------
 30527                                  
 30528                                  StoLoadSize:
 30529                                  	push	dx
 30530                                  
 30531                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 30532                                  	;
 30533                                  	;push	ds
 30534                                  	;push	cs
 30535                                  	;pop	ds
 30536                                  	;mov	dl,[UmbLoad]
 30537                                  	;pop	ds	
 30538                                  
 30539                                  	mov	dl,[cs:UmbLoad]
 30540                                  
 30541                                  	cmp	dl,UNSPECIFIED ; 0FFh
 30542                                  	je	short sls10
 30543                                  
 30544                                  	call	stowSiz			; We've got a function to do just this
 30545                                  sls10:	
 30546                                  	pop	dx
 30547                                  	retn
 30548                                  
 30549                                  ; -----------------------------------------------------------------------------
 30550                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 30551                                  ; -----------------------------------------------------------------------------
 30552                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 30553                                  ; EXIT:     None; free elements in UMB marked as hidden
 30554                                  ; ERROR:    None
 30555                                  ; USES:     Flags
 30556                                  ; -----------------------------------------------------------------------------
 30557                                  
 30558                                  hideUMB:
 30559                                  	push	ax
 30560                                  	push	es
 30561                                  
 30562                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 30563                                  	jc	short huX
 30564                                  
 30565                                  ; ------------------------------------------------
 30566                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 30567                                  ;            we're not in the same UMB, so exit.
 30568                                  ; ------------------------------------------------
 30569                                  
 30570                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30571                                  	jz	short huX	; If it is, we've finished the UMB.
 30572                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 30573                                  	or	word [es:ARENA.OWNER],0
 30574                                  	jnz	short hu20
 30575                                  
 30576                                  	call	hideMCB
 30577                                  hu20:	
 30578                                  	mov	al,[es:ARENA.SIGNATURE]
 30579                                  	cmp	al,arena_signature_end  ;'Z'
 30580                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 30581                                  
 30582                                  	;NextMCB es, ax		; Go on forward.
 30583                                  	mov     ax,es
 30584                                  	;add	ax,[es:3]
 30585                                  	add     ax,[es:ARENA.SIZE]
 30586                                  	inc     ax
 30587                                  	mov     es,ax
 30588                                  
 30589                                  	jmp	short hu10
 30590                                  huX:	
 30591                                  	pop	es
 30592                                  	pop	ax
 30593                                  	retn
 30594                                  
 30595                                  ; -----------------------------------------------------------------------------
 30596                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 30597                                  ; -----------------------------------------------------------------------------
 30598                                  ; ENTRY:    None
 30599                                  ; EXIT:     ZF set if user DIDN'T specify /S
 30600                                  ; ERROR:    None
 30601                                  ; USES:     Flags
 30602                                  ; -----------------------------------------------------------------------------
 30603                                  
 30604                                  isTiny:
 30605                                  	push	ax
 30606                                  
 30607                                  	;getdata al, fUmbTiny
 30608                                  	;
 30609                                  	;push	ds
 30610                                  	;push	cs
 30611                                  	;pop	ds
 30612                                  	;mov	al,[fUmbTiny]
 30613                                  	;pop	ds
 30614                                  
 30615                                  	mov	al,[cs:fUmbTiny]		
 30616                                  
 30617                                  	or	al,al
 30618                                  	pop	ax
 30619                                  	retn
 30620                                  
 30621                                  ; -----------------------------------------------------------------------------
 30622                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 30623                                  ; -----------------------------------------------------------------------------
 30624                                  ; ENTRY:    ES:0 should point to an MCB
 30625                                  ; EXIT:     ZF set if MCB is free, else !ZF
 30626                                  ; ERROR:    None
 30627                                  ; USES:     Flags
 30628                                  ; -----------------------------------------------------------------------------
 30629                                  
 30630                                  ;isFreeMCB:
 30631                                  ;	or	word [es:ARENA.OWNER],0
 30632                                  ;	retn
 30633                                  
 30634                                  ; -----------------------------------------------------------------------------
 30635                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 30636                                  ; -----------------------------------------------------------------------------
 30637                                  ; ENTRY:    ES:0 should point to an MCB
 30638                                  ; EXIT:     None; MCB marked as HIDDEN
 30639                                  ; ERROR:    None
 30640                                  ; USES:     None
 30641                                  ; -----------------------------------------------------------------------------
 30642                                  
 30643                                  hideMCB:
 30644                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30645                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 30646                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 30647                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 30648                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 30649                                  	retn
 30650                                  
 30651                                  ; -----------------------------------------------------------------------------
 30652                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 30653                                  ; -----------------------------------------------------------------------------
 30654                                  ; ENTRY:    ES:0 should point to an MCB
 30655                                  ; EXIT:     None; MCB marked as FREE
 30656                                  ; ERROR:    None
 30657                                  ; USES:     None
 30658                                  ; -----------------------------------------------------------------------------
 30659                                  
 30660                                  unHideMCB:
 30661                                  	push	ax
 30662                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 30663                                  	mov	ax,'  ' ; 2020h
 30664                                  	mov	[es:ARENA.NAME+0],ax
 30665                                  	mov	[es:ARENA.NAME+2],ax
 30666                                  	mov	[es:ARENA.NAME+4],ax
 30667                                  	mov	[es:ARENA.NAME+6],ax
 30668                                  	pop	ax
 30669                                  	retn
 30670                                  
 30671                                  ; -----------------------------------------------------------------------------
 30672                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 30673                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 30674                                  ; -----------------------------------------------------------------------------
 30675                                  ; ENTRY:    AL should be to a valid UMB number
 30676                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 30677                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 30678                                  ; USES:     Flags, ES
 30679                                  ; -----------------------------------------------------------------------------
 30680                                  
 30681                                  findUMB:
 30682                                  	push	ax
 30683                                  	push	cx
 30684                                  	push	dx
 30685                                  
 30686                                  	xor	ah,ah		; Zap ah, so al==ax
 30687                                  
 30688                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 30689                                  
 30690                                  	call	UmbHead		; Returns first UMB segment in AX
 30691                                  	mov	es,ax
 30692                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30693                                  
 30694                                  ; ---------------------------------------------
 30695                                  ; FU10--CX - This UMB number; 0 == conventional
 30696                                  ;       DX - The UMB number they're looking for
 30697                                  ;       ES - The current MCB address
 30698                                  ; ---------------------------------------------
 30699                                  
 30700                                  fu10:	
 30701                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 30702                                  	je	short fuX	; searching for--so exit.
 30703                                  
 30704                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30705                                  	jnz	short fu20
 30706                                  
 30707                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30708                                  fu20:	
 30709                                  	mov	al,[es:ARENA.SIGNATURE]
 30710                                  	cmp	al,arena_signature_end ; 'Z'
 30711                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 30712                                  
 30713                                  	;NextMCB es, ax		; Go on forward.
 30714                                  	mov     ax,es
 30715                                  	;add	ax,[es:3]
 30716                                  	add     ax,[es:ARENA.SIZE]
 30717                                  	inc     ax
 30718                                  	mov     es,ax
 30719                                  
 30720                                  	jmp	short fu10
 30721                                  fuE:	
 30722                                  	stc
 30723                                  fuX:
 30724                                  	pop	dx
 30725                                  	pop	cx
 30726                                  	pop	ax		; The address is already in ES.
 30727                                  	retn
 30728                                  
 30729                                  ; -----------------------------------------------------------------------------
 30730                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 30731                                  ; -----------------------------------------------------------------------------
 30732                                  ; ENTRY:    AL should be to a valid UMB number
 30733                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 30734                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 30735                                  ; USES:     Flags, ES
 30736                                  ; -----------------------------------------------------------------------------
 30737                                  
 30738                                  BigFree:
 30739                                  	push	bx
 30740                                  	push	cx
 30741                                  
 30742                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 30743                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 30744                                  
 30745                                  	xor	bx,bx			; Segment address of largest free MCB
 30746                                  	xor	cx,cx			; Size of largest free MCB
 30747                                  
 30748                                  ; ---------------------------------------------
 30749                                  ; BF10--ES - Current MCB address
 30750                                  ;       BX - Address of largest free MCB so far
 30751                                  ;       CX - Size of largest free MCB so far
 30752                                  ; ---------------------------------------------
 30753                                  
 30754                                  bf10:	
 30755                                  	call	isSysMCB		; If we've left the MCB, we're done.
 30756                                  	jz	short bf30
 30757                                  
 30758                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 30759                                  	or	word [es:ARENA.OWNER],0
 30760                                  	jnz	short bf20
 30761                                  
 30762                                  	mov	ax,[es:ARENA.SIZE]
 30763                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 30764                                  	cmp	cx,ax
 30765                                  	jg	short bf20		; Unless we're bigger,
 30766                                  
 30767                                  	mov	bx,es			; Store this new element's address,
 30768                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 30769                                  	mov	cx,ax
 30770                                  
 30771                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 30772                                  	cmp	al,arena_signature_end	; 'Z'
 30773                                  	jz	short bf30		; 'Z' means this was the last MCB.
 30774                                  
 30775                                  	;NextMCB es,ax		; Go on forward.
 30776                                  	mov     ax,es
 30777                                  	;add	ax,[es:3]
 30778                                  	add     ax,[es:ARENA.SIZE]
 30779                                  	inc     ax
 30780                                  	mov     es,ax
 30781                                  
 30782                                  	jmp	short bf10
 30783                                  
 30784                                  bf30:	mov	es,bx			; Return the address
 30785                                  	mov	ax,cx			; Return the size
 30786                                  	or	bx,bx
 30787                                  	jnz	short bfX		; (if size==0, there's nothing free)
 30788                                  bfE:	
 30789                                  	stc
 30790                                  bfX:
 30791                                  	pop	cx
 30792                                  	pop	bx
 30793                                  	retn
 30794                                  
 30795                                  ; -----------------------------------------------------------------------------
 30796                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 30797                                  ; -----------------------------------------------------------------------------
 30798                                  ; ENTRY:    AL should be to a valid UMB number
 30799                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 30800                                  ; ERROR:    None
 30801                                  ; USES:     Flags
 30802                                  ; -----------------------------------------------------------------------------
 30803                                  
 30804                                  isSpecified:
 30805                                  	push	ax
 30806                                  
 30807                                  	xor	bh,bh
 30808                                  	mov	bl,al
 30809                                  
 30810                                  	;getdata al, DS:UmbUsed[bx]
 30811                                  	;
 30812                                  	;push	ds
 30813                                  	;push	cs
 30814                                  	;pop	ds
 30815                                  	;mov	al,[bx+UmbUsed]
 30816                                  	;pop	ds
 30817                                  	
 30818                                  	mov	al,[cs:bx+UmbUsed]
 30819                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 30820                                  
 30821                                  	pop	ax
 30822                                  	retn
 30823                                  
 30824                                  ; -----------------------------------------------------------------------------
 30825                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 30826                                  ; -----------------------------------------------------------------------------
 30827                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 30828                                  ; EXIT:     None; MCB broken if carry clear
 30829                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 30830                                  ; USES:     Flags
 30831                                  ; -----------------------------------------------------------------------------
 30832                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 30833                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 30834                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 30835                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 30836                                  ; minimum for performing a split.
 30837                                  ; -----------------------------------------------------------------------------
 30838                                  
 30839                                  MIN_SPLIT_SIZE	equ	20h
 30840                                  
 30841                                  shrinkMCB:
 30842                                  	;pushreg <bx, cx, es>
 30843                                  	push	bx
 30844                                  	push	cx
 30845                                  	push	es
 30846                                  
 30847                                  	mov	bx,ax			; Move things around... and
 30848                                  	mov	ax,es			; save this one for later.
 30849                                  
 30850                                  	mov	cx,[es:ARENA.SIZE]
 30851                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 30852                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 30853                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 30854                                  	; 18/12/2022
 30855                                  	cmp	cx,bx
 30856                                  	jb	short smE ; (*)
 30857                                  
 30858                                  	mov	dl,[es:ARENA.SIGNATURE]
 30859                                  	mov	cx,[es:ARENA.SIZE]
 30860                                  
 30861                                  	mov	[es:ARENA.SIZE],bx
 30862                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 30863                                  
 30864                                  	add	ax,bx
 30865                                  	inc	ax
 30866                                  	mov	es,ax			; Move to new arena area
 30867                                  
 30868                                  	mov	ax,cx
 30869                                  	sub	ax,bx
 30870                                  	; 12/12/2022
 30871                                  	; ax > 0
 30872                                  	dec	ax			; And prepare the new size
 30873                                  
 30874                                  	; 18/12/2022
 30875                                  	mov	[es:ARENA.SIGNATURE],dl
 30876                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 30877                                  	mov	[es:ARENA.SIZE],ax
 30878                                  	;mov	ax,'  ' ; 2020h
 30879                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 30880                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 30881                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 30882                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 30883                                  
 30884                                  	; 18/12/2022
 30885                                  	call	freeMCB	; (**)
 30886                                  
 30887                                  	; 12/12/2022
 30888                                  	; cf=0
 30889                                  	;clc
 30890                                  	; 18/12/2022
 30891                                  	;jmp	short smX
 30892                                  smE:	
 30893                                  	; 18/12/2022
 30894                                  	; cf=1 (*)
 30895                                  	;stc
 30896                                  smX:	
 30897                                  	;popreg	<es, cx, bx>
 30898                                  	pop	es
 30899                                  	pop	cx
 30900                                  	pop	bx
 30901                                  	retn
 30902                                  
 30903                                  ; -----------------------------------------------------------------------------
 30904                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 30905                                  ; -----------------------------------------------------------------------------
 30906                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 30907                                  ; EXIT:     None; UMB is hidden as necessary
 30908                                  ; ERROR:    None
 30909                                  ; USES:     Flags, AX, CX
 30910                                  ; -----------------------------------------------------------------------------
 30911                                  ; PRIMARY LOGIC:
 30912                                  ;
 30913                                  ; If the UMB is specified in the DH/LH statement, then:
 30914                                  ;    If the largest free segment is too small (check specified size), then:
 30915                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 30916                                  ;    Else, if largest free segment is LARGER than specified size, then:
 30917                                  ;       If /S was given on the command-line, then:
 30918                                  ;          Break that element into two pieces
 30919                                  ;          Set a flag that we're shrinking
 30920                                  ;       Endif
 30921                                  ;    Endif
 30922                                  ; Endif
 30923                                  ; If the UMB is NOT specified (or was removed by the above):
 30924                                  ;    Hide all free elements in the UMB
 30925                                  ;    If the flag that we're shrinking was set, then:
 30926                                  ;       UN-hide the lower portion of the shrunken UMB
 30927                                  ;    ENDIF
 30928                                  ; ENDIF
 30929                                  ; -----------------------------------------------------------------------------
 30930                                  
 30931                                  _hideUMB_:
 30932                                  	push	bx
 30933                                  	push	dx
 30934                                  	push	es
 30935                                  
 30936                                  	mov	al,cl
 30937                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 30938                                  	jz	short hu_20
 30939                                  
 30940                                  	mov	al,cl		; Retrieve the size of the largest
 30941                                  	call	BigFree		; free element in AX; put its address in ES
 30942                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 30943                                  
 30944                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 30945                                  	mov	al,cl		; Retrieve the user's specified
 30946                                  	call	GetSize		; minimum size for this umb (into AX)
 30947                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 30948                                  
 30949                                  	or	ax,ax		; If they didn't specify one,
 30950                                  	jz	short hu_20	; Skip over all this.
 30951                                  
 30952                                  	cmp	ax,bx		; Ah... if (specified > max free)
 30953                                  	jbe	short hu_10
 30954                                  
 30955                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 30956                                  	call	unMarkUMB
 30957                                  	jmp	short hu_20
 30958                                  hu_10:	
 30959                                  	call	isTiny		; Returns ZF clear if user specified /S
 30960                                  	jz	short hu_20
 30961                                  
 30962                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 30963                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 30964                                  
 30965                                  	mov	dx,es
 30966                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 30967                                  
 30968                                  hu_20:	mov	ax,cx
 30969                                  	call	isSpecified	; If they specified this UMB, we're done...
 30970                                  	jnz	short hu_X	; so leave.
 30971                                  
 30972                                  	xor	dx,dx
 30973                                  hu_30:	
 30974                                  	mov	al,cl
 30975                                  
 30976                                  	call	hideUMB		; Hides everything in UMB #al
 30977                                  
 30978                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 30979                                  	jz	short hu_X	; So we should leave.
 30980                                  
 30981                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 30982                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 30983                                  hu_X:	
 30984                                  	pop	es
 30985                                  	pop	dx
 30986                                  	pop	bx
 30987                                  	retn
 30988                                  
 30989                                  ; -----------------------------------------------------------------------------
 30990                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 30991                                  ; -----------------------------------------------------------------------------
 30992                                  ; Entry:  None
 30993                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 30994                                  ; Error:  None
 30995                                  ; Uses:   Flags
 30996                                  ; -----------------------------------------------------------------------------
 30997                                  
 30998                                  UnFreeze:
 30999                                  	push	ax
 31000                                  	push	es
 31001                                  
 31002                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 31003                                  	jc	short ufX
 31004                                  
 31005                                  	mov	es,ax
 31006                                  
 31007                                  ; ------------------------------
 31008                                  ; UF10--ES - Current MCB address
 31009                                  ; ------------------------------
 31010                                  
 31011                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 31012                                  	jnz	short uf20
 31013                                  	call	unHideMCB
 31014                                  uf20:	
 31015                                  	mov	al,[es:ARENA.SIGNATURE]
 31016                                  
 31017                                  	cmp	al,arena_signature_end ; 'Z'
 31018                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 31019                                  
 31020                                  	;NextMCB es, ax		; Go on forward.
 31021                                  	mov     ax,es
 31022                                  	;add	ax,[es:3]
 31023                                  	add     ax,[es:ARENA.SIZE]
 31024                                  	inc     ax
 31025                                  	mov     es,ax
 31026                                  
 31027                                  	jmp	short uf10
 31028                                  ufX:	
 31029                                  	pop	es
 31030                                  	pop	ax
 31031                                  	retn
 31032                                  
 31033                                  ; -----------------------------------------------------------------------------
 31034                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 31035                                  ; -----------------------------------------------------------------------------
 31036                                  ; ENTRY:    ES:0 should point to an MCB
 31037                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 31038                                  ; ERROR:    None
 31039                                  ; USES:     Flags
 31040                                  ; -----------------------------------------------------------------------------
 31041                                  
 31042                                  isFrozMCB:
 31043                                  	;push	ax
 31044                                  
 31045                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 31046                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 31047                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 31048                                  	jne	short ifmX
 31049                                  
 31050                                  	;mov	ax,[es:ARENA.NAME+0]
 31051                                  	;cmp	ax,'FR' ; 5246h
 31052                                  	cmp	word [es:ARENA.NAME+0],'FR'
 31053                                  	jne	short ifmX
 31054                                  	;mov	ax,[es:ARENA.NAME+2]
 31055                                  	;cmp	ax,'OZ' ; 5A4Fh
 31056                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 31057                                  	jne	short ifmX
 31058                                  	;mov	ax,[es:ARENA.NAME+4]
 31059                                  	;cmp	ax,'EN' ; 4E45h
 31060                                  	cmp	word [es:ARENA.NAME+4],'EN'
 31061                                  	jne	short ifmX
 31062                                  	;mov	ax,[es:ARENA.NAME+6]
 31063                                  	;cmp	ax,'  ' ; 2020h
 31064                                  	cmp	word [es:ARENA.NAME+6],'  '
 31065                                  ifmX:	
 31066                                  	;pop	ax
 31067                                  	retn
 31068                                  
 31069                                  ; -----------------------------------------------------------------------------
 31070                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 31071                                  ; -----------------------------------------------------------------------------
 31072                                  ; ENTRY:    ES:0 should point to an MCB
 31073                                  ; EXIT:     None; MCB frozen
 31074                                  ; ERROR:    None
 31075                                  ; USES:     None
 31076                                  ; -----------------------------------------------------------------------------
 31077                                  
 31078                                  frezMCB:
 31079                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 31080                                  	mov	word [es:ARENA.NAME+0],'FR'
 31081                                  	mov	word [es:ARENA.NAME+2],'OZ'
 31082                                  	mov	word [es:ARENA.NAME+4],'EN'
 31083                                  	mov	word [es:ARENA.NAME+6],'  '
 31084                                  	retn
 31085                                  
 31086                                  ; -----------------------------------------------------------------------------
 31087                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 31088                                  ; -----------------------------------------------------------------------------
 31089                                  ; Entry:  None
 31090                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 31091                                  ; Error:  None
 31092                                  ; Uses:   Flags
 31093                                  ; -----------------------------------------------------------------------------
 31094                                  
 31095                                  FreezeUM:
 31096                                  	push	ax
 31097                                  	push	cx
 31098                                  	push	dx
 31099                                  	push	es
 31100                                  
 31101                                  	;call	GetLoadUMB
 31102                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 31103                                  
 31104                                  	xor	ah,ah		; Zap ah, so al==ax
 31105                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 31106                                  
 31107                                  	call	UmbHead		; Returns first UMB segment in AX
 31108                                  	mov	es,ax
 31109                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31110                                  
 31111                                  ; -----------------------------------------
 31112                                  ; FUM10--ES - Current MCB address
 31113                                  ;        CX - Current UMB number
 31114                                  ;        DX - UMB number to skip (load UMB)
 31115                                  ; -----------------------------------------
 31116                                  
 31117                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31118                                  	jnz	short fum20
 31119                                  
 31120                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31121                                  fum20:	
 31122                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 31123                                  	je	short fum30	; freeze anything... so skip that section.
 31124                                  
 31125                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 31126                                  	or	word [es:ARENA.OWNER],0
 31127                                  	jnz	short fum30	; either.
 31128                                  
 31129                                  	call	frezMCB
 31130                                  fum30:	
 31131                                  	mov	al,[es:ARENA.SIGNATURE]
 31132                                  	cmp	al,arena_signature_end ; 'Z'
 31133                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 31134                                  
 31135                                  	;NextMCB es, ax		; Go on forward.
 31136                                  	mov     ax,es
 31137                                  	;add	ax,[es:3]
 31138                                  	add     ax,[es:ARENA.SIZE]
 31139                                  	inc     ax
 31140                                  	mov     es,ax
 31141                                  	
 31142                                  	jmp	short fum10
 31143                                  
 31144                                  fumX:	pop	es
 31145                                  	pop	dx
 31146                                  	pop	cx
 31147                                  	pop	ax
 31148                                  	retn
 31149                                  
 31150                                  ; -----------------------------------------------------------------------------
 31151                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 31152                                  ; -----------------------------------------------------------------------------
 31153                                  ; ENTRY:    None
 31154                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 31155                                  ; ERROR:    None
 31156                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 31157                                  ; -----------------------------------------------------------------------------
 31158                                  
 31159                                  UmbTest:
 31160                                  	push	ax
 31161                                  	push	bx
 31162                                  	push	ds
 31163                                  	push	es
 31164                                  
 31165                                  	call	fm_link			; Link in UMBs (if not already linked)
 31166                                  	call	WalkMem			; Check to see if they're really linked
 31167                                  	pushf				; And remember what we found out
 31168                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 31169                                  	popf				; And restore what we found out.
 31170                                  
 31171                                  	pop	es
 31172                                  	pop	ds
 31173                                  	pop	bx
 31174                                  	pop	ax
 31175                                  	retn
 31176                                  
 31177                                  ; -----------------------------------------------------------------------------
 31178                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 31179                                  ; -----------------------------------------------------------------------------
 31180                                  ; ENTRY:    None
 31181                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 31182                                  ; ERROR:    None
 31183                                  ; USES:     Flags
 31184                                  ; -----------------------------------------------------------------------------
 31185                                  
 31186                                  WalkMem:
 31187                                  	push	ax ; ?
 31188                                  	push	bx ; ?
 31189                                  	push	es ; ? no need to save contents of these registers ?
 31190                                  		   	
 31191                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31192                                  	int	21h
 31193                                  
 31194                                  	mov	ax,[es:bx-2]
 31195                                  	mov	es,ax
 31196                                  
 31197                                  ; ------------------------------
 31198                                  ; UM10: ES = Current MCB pointer
 31199                                  ; ------------------------------
 31200                                  
 31201                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 31202                                  	cmp	al,arena_signature_end ;  'Z'
 31203                                  	je	short um20		; If signature == 'Z', hay no more.
 31204                                  
 31205                                  	;NextMCB es, bx			; Move to the next MCB
 31206                                  
 31207                                  	mov     bx,es
 31208                                  	;add	bx,[es:3]
 31209                                  	add     bx,[es:ARENA.SIZE]
 31210                                  	inc     bx
 31211                                  	mov     es,bx
 31212                                  		
 31213                                  	jmp	short um10		; And restart the loop.
 31214                                  um20:	
 31215                                  	mov	ax,es
 31216                                  
 31217                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 31218                                  
 31219                                  	pop	es ; ?
 31220                                  	pop	bx ; ?
 31221                                  	pop	ax ; ?
 31222                                  	retn
 31223                                  
 31224                                  ; -----------------------------------------------------------------------------
 31225                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 31226                                  ; -----------------------------------------------------------------------------
 31227                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31228                                  ; EXIT:     None
 31229                                  ; ERROR:    None
 31230                                  ; USES:     AX, BX
 31231                                  ; -----------------------------------------------------------------------------
 31232                                  
 31233                                  hl_unlink:
 31234                                  	xor	bh,bh
 31235                                  
 31236                                  	;getdata bl,fm_umb		; Restore original link-state
 31237                                  	;
 31238                                  	;push	ds
 31239                                  	;push	cs
 31240                                  	;pop	ds
 31241                                  	;mov	bl,[fm_umb]
 31242                                  	;pop	ds
 31243                                  
 31244                                  	mov	bl,[cs:fm_umb]
 31245                                  
 31246                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31247                                  	int	21h
 31248                                  	retn
 31249                                  
 31250                                  ; ----------------------------------------------------------------------
 31251                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 31252                                  ; ----------------------------------------------------------------------
 31253                                  ; 09/04/2019 - Retro DOS v4.0
 31254                                  
 31255                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 31256                                  ;   Date:     May 14, 1992
 31257                                  
 31258                                  ;   Modification log:
 31259                                  ;
 31260                                  ;     DATE    WHO      DESCRIPTION
 31261                                  ;   --------  -------  --------------------------------------------------------
 31262                                  ;   05/14/92  t-richj  Original
 31263                                  ;   06/21/92  t-richj  Final revisions before check-in
 31264                                  
 31265                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 31266                                  
 31267                                  ; -----------------------------------------------------------------------------
 31268                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 31269                                  ; -----------------------------------------------------------------------------
 31270                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 31271                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 31272                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 31273                                  ; ERROR:  None
 31274                                  ; USES:   fInHigh (from highvar.inc), carry flag
 31275                                  ; -----------------------------------------------------------------------------
 31276                                  
 31277                                  UnHideUMBs:
 31278                                  	push	ax		; Save ax for what we're about to do
 31279                                  
 31280                                  ; -----------------------------------------------------------------------------
 31281                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 31282                                  ;    length of time. Those six constitute a check of whether or not we should
 31283                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 31284                                  ;    will destroy the current link-state and memory-allocation strategy after
 31285                                  ;    every command execution.
 31286                                  ; -----------------------------------------------------------------------------
 31287                                  
 31288                                  	;getdata al,fInHigh	; Get InHigh from data segment
 31289                                  	;
 31290                                  	;push	ds
 31291                                  	;push	cs
 31292                                  	;pop	ds
 31293                                  	;mov	al,[fInHigh]
 31294                                  	;pop	ds	
 31295                                  
 31296                                  	mov	al,[cs:fInHigh]
 31297                                  
 31298                                  	or	al,al
 31299                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 31300                                  
 31301                                  	pop	ax		; then there's nothing to do here... so
 31302                                  	stc			; restore everything and return. Just like
 31303                                  	retn			; that.
 31304                                  uhu10:	
 31305                                  	call	linkumb		; Make sure UMBs are linked in.
 31306                                  	call	FreeUMBs
 31307                                  
 31308                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 31309                                  	;
 31310                                  	;push	es
 31311                                  	;push	cs
 31312                                  	;pop	es
 31313                                  	;mov	byte [es:fInHigh],0
 31314                                  	;pop	ds	
 31315                                  
 31316                                  	mov	byte [cs:fInHigh],0	
 31317                                  
 31318                                  	call	he_unlink	; Unlink UMBs
 31319                                  
 31320                                  	pop	ax
 31321                                  	; 12/12/2022
 31322                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 31323                                  	retn
 31324                                  
 31325                                  ; -----------------------------------------------------------------------------
 31326                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 31327                                  ; -----------------------------------------------------------------------------
 31328                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31329                                  ; EXIT:     None
 31330                                  ; ERROR:    None
 31331                                  ; USES:     AX, BX
 31332                                  ; -----------------------------------------------------------------------------
 31333                                  
 31334                                  he_unlink:
 31335                                  	xor	bh, bh
 31336                                  
 31337                                  	;getdata bl, fm_umb	; Restore original link-state
 31338                                  	mov	bl,[cs:fm_umb]	
 31339                                  
 31340                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31341                                  	int	21h
 31342                                  	retn
 31343                                  
 31344                                  ; -----------------------------------------------------------------------------
 31345                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 31346                                  ; -----------------------------------------------------------------------------
 31347                                  ; ENTRY:    None
 31348                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 31349                                  ; ERROR:    None (ignore CF)
 31350                                  ; USES:     Flags
 31351                                  ; -----------------------------------------------------------------------------
 31352                                  
 31353                                  FreeUMBs:
 31354                                  	push	ax
 31355                                  	push	es
 31356                                  
 31357                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 31358                                  	jc	short fusX
 31359                                  
 31360                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 31361                                  fus10:	
 31362                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 31363                                  	jnz	short fus20
 31364                                  	call	freeMCB
 31365                                  fus20:	   
 31366                                  	mov	al,[es:ARENA.SIGNATURE]
 31367                                  	cmp	al,arena_signature_end ; 'Z'
 31368                                  	jz	short fusX	; That means this was the last MCB--that's it.
 31369                                  
 31370                                  	mov	ax,es
 31371                                  	add	ax,[es:ARENA.SIZE]
 31372                                  	inc	ax
 31373                                  	mov	es,ax		; Go on forward.
 31374                                  
 31375                                  	jmp	short fus10
 31376                                  fusX:	
 31377                                  	pop	es
 31378                                  	pop	ax
 31379                                  	retn
 31380                                  
 31381                                  ; -----------------------------------------------------------------------------
 31382                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 31383                                  ; -----------------------------------------------------------------------------
 31384                                  ; ENTRY:    ES:0 should point to an MCB
 31385                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 31386                                  ; ERROR:    None
 31387                                  ; USES:     Flags
 31388                                  ; -----------------------------------------------------------------------------
 31389                                  
 31390                                  isHideMCB:
 31391                                  	;push	ax
 31392                                  
 31393                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 31394                                  	jne	short ihm_x				; then check for HIDDEN
 31395                                  
 31396                                  	;mov	ax,[es:ARENA.NAME]
 31397                                  	;cmp	ax,'HI' ; 4948h
 31398                                  	cmp	word [es:ARENA.NAME+0],'HI'
 31399                                  	jne	short ihm_x
 31400                                  	;mov	ax,[es:ARENA.NAME+2]
 31401                                  	;cmp	ax,'DD' ; 4444h
 31402                                  	cmp	word [es:ARENA.NAME+2],'DD'
 31403                                  	jne	short ihm_x
 31404                                  	;mov	ax,[es:ARENA.NAME+4]
 31405                                  	;cmp	ax,'EN' ; 4E45h
 31406                                  	cmp	word [es:ARENA.NAME+4],'EN'
 31407                                  	jne	short ihm_x
 31408                                  	;mov	ax,[es:ARENA.NAME+6]
 31409                                  	;cmp	ax,'  ' ; 2020h
 31410                                  	cmp	word [es:ARENA.NAME+6],'  '
 31411                                  ihm_x:	
 31412                                  	;pop	ax
 31413                                  	retn
 31414                                  
 31415                                  ; -----------------------------------------------------------------------------
 31416                                  ;*** freeMCB - marks as free the MCB at ES:0
 31417                                  ; -----------------------------------------------------------------------------
 31418                                  ; ENTRY:    ES:0 should point to an MCB
 31419                                  ; EXIT:     None; MCB free'd
 31420                                  ; ERROR:    None
 31421                                  ; USES:     AX
 31422                                  ; -----------------------------------------------------------------------------
 31423                                  
 31424                                  freeMCB:
 31425                                  	mov	word [es:ARENA.OWNER],0
 31426                                  	mov	ax,'  '
 31427                                  	mov	[es:ARENA.NAME+0],ax
 31428                                  	mov	[es:ARENA.NAME+2],ax
 31429                                  	mov	[es:ARENA.NAME+4],ax
 31430                                  	mov	[es:ARENA.NAME+6],ax
 31431                                  	retn
 31432                                  
 31433                                  ; -----------------------------------------------------------------------------
 31434                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 31435                                  ; -----------------------------------------------------------------------------
 31436                                  ; ENTRY:  Nothing
 31437                                  ; EXIT:   AX contains 0x9FFF for most systems
 31438                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 31439                                  ; USES:   Flags, AX
 31440                                  ; -----------------------------------------------------------------------------
 31441                                  
 31442                                  HeadUmb:
 31443                                  	; 13/05/2019
 31444                                  
 31445                                  	;push	si ; ?
 31446                                  	;push	ds ; ?
 31447                                  	;push	es
 31448                                  	;push	bx ; *
 31449                                  
 31450                                  	; 09/04/2019
 31451                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 31452                                  
 31453                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31454                                  	int	21h
 31455                                  			; DOS - 2+ internal - GET LIST OF LISTS
 31456                                  			; Return: ES:BX -> DOS list of lists
 31457                                  	;mov	ax,[es:8Ch]
 31458                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 31459                                  	cmp	ax,0FFFFh
 31460                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 31461                                  
 31462                                  	;clc				; Else, it isn't.
 31463                                  	;jmp	short xhu_x
 31464                                  xhu_e:	
 31465                                  	;stc
 31466                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 31467                                  xhu_x:	
 31468                                  	;pop	bx ; *
 31469                                  	;pop	es	
 31470                                  	;pop	ds ; ?
 31471                                  	;pop	si ; ?
 31472                                  	retn
 31473                                  
 31474                                  ; -----------------------------------------------------------------------------
 31475                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 31476                                  ; -----------------------------------------------------------------------------
 31477                                  ; ENTRY:    None
 31478                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 31479                                  ; ERROR:    None
 31480                                  ; USES:     AX, BX, fm_umb
 31481                                  ; -----------------------------------------------------------------------------
 31482                                  
 31483                                  linkumb:
 31484                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 31485                                  	int	21h			; Current link-state is now in al
 31486                                  
 31487                                  	or	al,al			; BUGBUG: proper check?
 31488                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 31489                                  
 31490                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31491                                  	mov	bx,1
 31492                                  	int	21h
 31493                                  lumbX:
 31494                                  	retn
 31495                                  
 31496                                  %endif
 31497                                  
 31498                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31499                                  ; (SYSINIT:2B5Fh)
 31500                                  
 31501                                  ; ----------------------------------------------------------------------
 31502                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 31503                                  ; ----------------------------------------------------------------------
 31504                                  ; 09/04/2019 - Retro DOS v4.0
 31505                                  
 31506                                  ;----------------------------------------------------------------------------
 31507                                  ;
 31508                                  ; procedure : InitDevLoad
 31509                                  ;
 31510                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 31511                                  ;			 = 1 indicates load in UMB:
 31512                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 31513                                  ;		                    = 1 indicates a DOS 5-style load
 31514                                  ;		DevSize  = Size of the device driver file in paras
 31515                                  ;
 31516                                  ;	Output : none
 31517                                  ;
 31518                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 31519                                  ;	Also sets up a header for the Device driver entry for mem utility
 31520                                  ;
 31521                                  ;----------------------------------------------------------------------------
 31522                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 31523                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 31524                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 31525                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 31526                                  ;----------------------------------------------------------------------------
 31527                                  
 31528                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31529                                  InitDevLoad:
 31530                                  	; 11/12/2022
 31531                                  	; ds = cs
 31532 00002771 803E[7D1E]00            	cmp	byte [DeviceHi],0
 31533                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 31534                                  	;je	short InitForLo		; no, init for lo mem
 31535 00002776 741F                    	je	short initforlo_x ; 09/04/2019
 31536                                  
 31537                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31538                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 31539                                  ;	je	short InitForConv
 31540                                  ;
 31541                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 31542                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 31543                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 31544                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 31545                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 31546                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 31547                                  ;
 31548                                  ;	call	ShrinkUMB		; Stop using the old device arena
 31549                                  ;
 31550                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 31551                                  ;	call	FreezeUM		; Hide everything BUT the load area
 31552                                  ;	call	GetUMBForDev		; And grab that load area as needed
 31553                                  ;	pushf
 31554                                  ;	call	UnFreeze		; Then unhide everything frozen
 31555                                  ;	popf
 31556                                  ;
 31557                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 31558                                  ;
 31559                                  ;	jmp	short InitForHi
 31560                                  
 31561                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31562                                  	; (SYSINIT:2B67h)
 31563                                  InitForConv:
 31564                                  	; 11/12/2022
 31565                                  	; ds = cs
 31566 00002778 E83700                  	call	SpaceInUMB		; Do we have space left in the
 31567                                  					;  current UMB ?
 31568 0000277B 7308                    	jnc	short InitForHi		; yes, we have
 31569 0000277D E83D04                  	call	ShrinkUMB		; shrink the current UMB in use
 31570 00002780 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 31571 00002783 720D                    	jc	short InitForLo		; we didn't succeed, so load
 31572                                  					;  in low memory
 31573                                  InitForHi:
 31574                                  	; 11/12/2022
 31575                                  	; ds = cs
 31576                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 31577                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 31578                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 31579 00002785 A1[731E]                	mov	ax,[DevUMBFree]
 31580 00002788 8B16[6F1E]              	mov	dx,[DevUMBAddr]
 31581 0000278C 0316[711E]              	add	dx,[DevUMBSize]
 31582 00002790 EB0C                    	jmp	short idl1
 31583                                  
 31584                                  InitForLo:
 31585                                  	; 11/12/2022
 31586                                  	; ds = cs
 31587                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 31588 00002792 C606[7D1E]00            	mov	byte [DeviceHi],0
 31589                                  initforlo_x:
 31590                                  	; 11/12/2022
 31591                                  	; ds = cs
 31592                                  					;  into UMB indicate that
 31593                                  					;  we are loading low
 31594                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 31595                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 31596 00002797 A1[E003]                	mov	ax,[memhi]
 31597 0000279A 8B16[A302]              	mov	dx,[ALLOCLIM]
 31598                                  idl1:
 31599 0000279E E86600                  	call	DevSetMark		; setup a sub-arena for DD
 31600                                  	; 11/12/2022
 31601                                  	; ds = cs
 31602                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 31603                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 31604                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 31605                                  	;mov	[cs:DevEntry+2],ax
 31606 000027A1 A3[621E]                	mov	[DevLoadAddr],ax
 31607 000027A4 8916[641E]              	mov	[DevLoadEnd],dx
 31608 000027A8 C706[661E]0000          	mov	word [DevEntry],0
 31609 000027AE A3[681E]                	mov	[DevEntry+2],ax
 31610 000027B1 C3                      	retn
 31611                                  
 31612                                  ;----------------------------------------------------------------------------
 31613                                  ;
 31614                                  ; procedure : SpaceInUMB?
 31615                                  ;
 31616                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 31617                                  ;	Output : Carry set if no space in UMB
 31618                                  ;		 Carry clear if Space is available for the device in
 31619                                  ;		   current UMB
 31620                                  ;
 31621                                  ;----------------------------------------------------------------------------
 31622                                  
 31623                                  SpaceInUMB:
 31624                                  	; 11/12/2022
 31625                                  	; ds = cs
 31626                                  	;mov	ax,[cs:DevUMBSize]
 31627                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 31628                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 31629 000027B2 A1[711E]                	mov	ax,[DevUMBSize]
 31630 000027B5 0306[6F1E]              	add	ax,[DevUMBAddr]		; End of UMB
 31631 000027B9 2B06[731E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 31632                                  	; 11/12/2022
 31633                                  	;or	ax,ax			; Nospace ?
 31634                                  	;jnz	short spcinumb1
 31635                                  	;stc
 31636                                  	;retn
 31637                                  	; 11/12/2022
 31638 000027BD 83F801                  	cmp	ax,1
 31639 000027C0 7205                    	jb	short spcinumb2	; cf=1
 31640                                  spcinumb1:
 31641 000027C2 48                      	dec	ax			; space for sub-arena
 31642                                  	; 11/12/2022
 31643                                  	; ds = cs
 31644 000027C3 3B06[601E]              	cmp	ax,[DevSize]
 31645                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 31646                                  spcinumb2:
 31647 000027C7 C3                      	retn
 31648                                  
 31649                                  ;----------------------------------------------------------------------------
 31650                                  ;
 31651                                  ; procedure : PrepareMark
 31652                                  ;
 31653                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 31654                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 31655                                  ;
 31656                                  ;----------------------------------------------------------------------------
 31657                                  
 31658                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31659                                  ;
 31660                                  ;PrepareMark:
 31661                                  ;	push	ds
 31662                                  ;	mov	ds,ax
 31663                                  ;	mov	word [ARENA.OWNER],8
 31664                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 31665                                  ;	pop	ds
 31666                                  ;
 31667                                  ;	inc	ax
 31668                                  ;	mov	[cs:DevUMBAddr],ax
 31669                                  ;	mov	[cs:DevUMBFree],ax
 31670                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31671                                  ;	retn
 31672                                  
 31673                                  ;----------------------------------------------------------------------------
 31674                                  ;
 31675                                  ; procedure : GetUMBForDev
 31676                                  ;
 31677                                  ;	Input : DevSize
 31678                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 31679                                  ;		 the device.
 31680                                  ;		 If success carry clear
 31681                                  ;
 31682                                  ;	Allocates the biggest UMB for loading devices and updates
 31683                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 31684                                  ;	UMB.
 31685                                  ;
 31686                                  ;	This routine relies on the fact that all of the low memory
 31687                                  ;	is allocated, and any DOS alloc calls should return memory
 31688                                  ;	from the UMB pool.
 31689                                  ;
 31690                                  ;----------------------------------------------------------------------------
 31691                                  
 31692                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31693                                  	; (SYSINIT:2BC6h)
 31694                                  
 31695                                  GetUMBForDev:
 31696                                  	; 11/12/2022
 31697                                  	; ds = cs
 31698 000027C8 BBFFFF                  	mov	bx,0FFFFh
 31699 000027CB B80048                  	mov	ax,4800h
 31700 000027CE CD21                    	int	21h
 31701                                  		; DOS - 2+ - ALLOCATE MEMORY
 31702                                  		; BX = number of 16-byte paragraphs desired
 31703                                  
 31704 000027D0 09DB                    	or	bx,bx
 31705                                  	;jz	short gufd_err
 31706                                  	; 09/09/2023
 31707 000027D2 742E                    	jz	short gufd_error ; bx = 0
 31708                                  
 31709 000027D4 4B                      	dec	bx
 31710                                  	; 11/12/2022
 31711                                  	; ds = cs
 31712 000027D5 391E[601E]              	cmp	[DevSize],bx
 31713                                  	;cmp	[cs:DevSize],bx
 31714 000027D9 7725                    	ja	short gufd_err
 31715                                  
 31716 000027DB 43                      	inc	bx
 31717                                  
 31718 000027DC B80048                  	mov	ax,4800h
 31719 000027DF CD21                    	int	21h
 31720 000027E1 721D                    	jc	short gufd_err
 31721                                  
 31722                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31723                                  	;dec	ax
 31724                                  	;call	PrepareMark
 31725                                  	;
 31726                                  PrepareMark:
 31727 000027E3 1E                      	push	ds
 31728 000027E4 48                      	dec	ax
 31729 000027E5 8ED8                    	mov	ds,ax
 31730 000027E7 C70601000800            	mov	word [ARENA.OWNER],8
 31731 000027ED C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 31732 000027F3 40                      	inc	ax
 31733 000027F4 1F                      	pop	ds
 31734                                  	; 11/12/2022
 31735                                  	; ds = cs
 31736                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31737                                  	;mov	[cs:DevUMBAddr],ax
 31738                                  	;mov	[cs:DevUMBFree],ax
 31739                                  gufd_x:		; 09/09/2023
 31740 000027F5 891E[711E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 31741 000027F9 A3[6F1E]                	mov	[DevUMBAddr],ax
 31742 000027FC A3[731E]                	mov	[DevUMBFree],ax
 31743                                  	;
 31744                                  	; 11/12/2022
 31745                                  	; cf=0
 31746                                  	;clc				; mark no error
 31747 000027FF C3                      	retn
 31748                                  
 31749                                  	; 09/09/2023
 31750                                  %if 1
 31751                                  gufd_err:
 31752 00002800 31DB                    	xor	bx,bx ; 0
 31753                                  gufd_error:
 31754 00002802 31C0                    	xor	ax,ax ; 0
 31755 00002804 F9                      	stc	; cf=1
 31756 00002805 EBEE                    	jmp	short gufd_x	
 31757                                  %endif
 31758                                  
 31759                                  ; 09/09/2023
 31760                                  %if 0
 31761                                  gufd_err:
 31762                                  	xor	ax,ax ; 0
 31763                                  	; 11/12/2022
 31764                                  	; ds = cs
 31765                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 31766                                  	;mov	[cs:DevUMBAddr],ax
 31767                                  	;mov	[cs:DevUMBFree],ax
 31768                                  	mov	[DevUMBSize],ax		; erase the previous values
 31769                                  	mov	[DevUMBAddr],ax
 31770                                  	mov	[DevUMBFree],ax
 31771                                  	stc
 31772                                  	retn
 31773                                  %endif
 31774                                  
 31775                                  ;----------------------------------------------------------------------------
 31776                                  ;
 31777                                  ; procedure : DevSetMark
 31778                                  ;
 31779                                  ;	Input : AX - Free segment were device is going to be loaded
 31780                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 31781                                  ;
 31782                                  ;	Creates a sub-arena for the device driver
 31783                                  ;	puts 'D' marker in the sub-arena
 31784                                  ;	Put the owner of the sub-arena as (AX+1)
 31785                                  ;	Copies the file name into sub-arena name field
 31786                                  ;
 31787                                  ;	Size field of the sub-arena will be set only at succesful
 31788                                  ;	completion of Device load.
 31789                                  ;
 31790                                  ;----------------------------------------------------------------------------
 31791                                  
 31792                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31793                                  	; (SYSINIT:2C13h)
 31794                                  
 31795                                  DevSetMark:
 31796 00002807 06                      	push	es
 31797 00002808 57                      	push	di
 31798 00002809 1E                      	push	ds
 31799 0000280A 56                      	push	si
 31800 0000280B 8EC0                    	mov	es,ax
 31801 0000280D 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 31802 00002813 40                      	inc	ax
 31803 00002814 26A30100                	mov	[es:devmark.seg],ax
 31804                                  
 31805                                  ;-------------- Copy file name
 31806                                  
 31807 00002818 50                      	push	ax			; save load addr
 31808                                  
 31809                                  	; 09/09/2023
 31810                                  	; ds = cs
 31811                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 31812 00002819 C536[F803]              	lds	si,[bpb_addr]
 31813                                  
 31814 0000281D 89F7                    	mov	di,si
 31815 0000281F FC                      	cld
 31816                                  dsm_again:
 31817 00002820 AC                      	lodsb
 31818 00002821 3C3A                    	cmp	al,':'
 31819 00002823 7504                    	jne	short isit_slash
 31820 00002825 89F7                    	mov	di,si
 31821 00002827 EBF7                    	jmp	short dsm_again
 31822                                  isit_slash:
 31823 00002829 3C5C                    	cmp	al, '\'
 31824 0000282B 7504                    	jne	short isit_null
 31825 0000282D 89F7                    	mov	di,si
 31826 0000282F EBEF                    	jmp	short dsm_again
 31827                                  isit_null:
 31828 00002831 08C0                    	or	al,al
 31829 00002833 75EB                    	jnz	short dsm_again
 31830 00002835 89FE                    	mov	si,di
 31831                                  
 31832 00002837 BF0800                  	mov	di,devmark.filename ; 8
 31833 0000283A B90800                  	mov	cx,8			; maximum 8 characters
 31834                                  dsm_next_char:
 31835 0000283D AC                      	lodsb
 31836 0000283E 08C0                    	or	al, al
 31837 00002840 7407                    	jz	short blankout
 31838 00002842 3C2E                    	cmp	al, '.'
 31839 00002844 7403                    	je	short blankout
 31840 00002846 AA                      	stosb
 31841 00002847 E2F4                    	loop	dsm_next_char
 31842                                  blankout:
 31843 00002849 E304                    	jcxz	dsm_exit
 31844 0000284B B020                    	mov	al, ' '
 31845 0000284D F3AA                    	rep	stosb			; blank out the rest
 31846                                  dsm_exit:
 31847 0000284F 58                      	pop	ax			; restore load addr
 31848 00002850 5E                      	pop	si
 31849 00002851 1F                      	pop	ds
 31850 00002852 5F                      	pop	di
 31851 00002853 07                      	pop	es
 31852 00002854 C3                      	retn
 31853                                  
 31854                                  ;----------------------------------------------------------------------------
 31855                                  ;
 31856                                  ; procedure : SizeDevice
 31857                                  ;
 31858                                  ;	Input : ES:SI - points to device file to be sized
 31859                                  ;
 31860                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 31861                                  ;
 31862                                  ;	Calculates the size of the device file in paras and stores it
 31863                                  ;	in DevSize
 31864                                  ;
 31865                                  ;----------------------------------------------------------------------------
 31866                                  
 31867                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31868                                  SizeDevice:
 31869                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31870                                  	; 11/12/2022 ; *
 31871 00002855 1E                      	push	ds ; *
 31872 00002856 06                      	push	es
 31873 00002857 1F                      	pop	ds
 31874 00002858 89F2                    	mov	dx,si			; ds:dx -> file name
 31875 0000285A B8003D                  	mov	ax,3D00h		; open
 31876 0000285D CD21                    	int	21h
 31877 0000285F 7243                    	jc	short sd_err		; open failed
 31878                                  
 31879 00002861 89C3                    	mov	bx,ax			; BX - file handle
 31880 00002863 B80242                  	mov	ax,4202h		; seek
 31881 00002866 31C9                    	xor	cx,cx
 31882 00002868 89CA                    	mov	dx,cx			; to end of file
 31883 0000286A CD21                    	int	21h
 31884 0000286C 722F                    	jc	short sd_close		; did seek fail (impossible)
 31885 0000286E 83C00F                  	add	ax,15			; para convert
 31886 00002871 83D200                  	adc	dx,0
 31887 00002874 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 31888 00002878 7409                    	jz	short szdev1		; no
 31889 0000287A 2EC706[601E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 31890                                  					; assuming that we fail later
 31891 00002881 EB1A                    	jmp	short sd_close
 31892                                  szdev1:
 31893 00002883 B104                    	mov	cl,4			; convert it to paras
 31894 00002885 D3E8                    	shr	ax,cl
 31895 00002887 B10C                    	mov	cl,12
 31896 00002889 D3E2                    	shl	dx,cl
 31897 0000288B 09D0                    	or	ax,dx
 31898                                  	;
 31899                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31900 0000288D 2E3B06[7E1E]            	cmp     ax,[cs:DevSizeOption]
 31901                                  	;ja	short szdev2
 31902                                  	; 14/08/2023
 31903 00002892 7305                    	jnb	short szdev2
 31904                                  
 31905 00002894 2EA1[7E1E]              	mov     ax,[cs:DevSizeOption]
 31906                                  	; 12/12/2022
 31907 00002898 F8                      	clc
 31908                                  szdev2:
 31909 00002899 2EA3[601E]              	mov	[cs:DevSize],ax		; save file size
 31910                                  
 31911                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31912                                  	; 12/12/2022
 31913                                  	; cf=0
 31914                                  	;clc
 31915                                  sd_close:
 31916 0000289D 9C                      	pushf				; let close not spoil our
 31917                                  					;  carry flag
 31918 0000289E B8003E                  	mov	ax,3E00h		; close
 31919 000028A1 CD21                    	int	21h			; we are not checking for err
 31920 000028A3 9D                      	popf
 31921                                  sd_err:
 31922                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31923                                  	; 11/12/2022 ; *
 31924 000028A4 1F                      	pop     ds ; *
 31925 000028A5 C3                      	retn
 31926                                  
 31927                                  ;----------------------------------------------------------------------------
 31928                                  ;
 31929                                  ; procedure : ExecDev
 31930                                  ;
 31931                                  ;	Input : ds:dx -> device to be executed
 31932                                  ;		DevLoadAddr - contains where device has to be loaded
 31933                                  ;
 31934                                  ;	Output : Carry if error
 31935                                  ;		 Carry clear if no error
 31936                                  ;
 31937                                  ;	Loads a device driver using the 4b03h function call
 31938                                  ;
 31939                                  ;----------------------------------------------------------------------------
 31940                                  
 31941                                  	; 01/11/2022
 31942                                  ExecDev:
 31943 000028A6 2E8B1E[621E]            	mov	bx,[cs:DevLoadAddr]
 31944 000028AB 2E891E[791E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 31945                                  					;  block for exec with
 31946                                  					;  Load address
 31947 000028B0 2E891E[7B1E]            	mov	[cs:DevExecReloc],bx
 31948 000028B5 8CCB                    	mov	bx,cs
 31949 000028B7 8EC3                    	mov	es,bx
 31950 000028B9 BB[791E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 31951 000028BC B003                    	mov	al,3	; (load program only)
 31952 000028BE B44B                    	mov	ah,EXEC ; 4Bh
 31953 000028C0 CD21                    	int	21h			;load in the device driver
 31954                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 31955                                  		; DS:DX -> ASCIZ filename
 31956                                  		; ES:BX -> parameter block
 31957                                  		; AL = subfunction 
 31958 000028C2 C3                      	retn
 31959                                  
 31960                                  ;----------------------------------------------------------------------------
 31961                                  ;
 31962                                  ; procedure : RetFromUM
 31963                                  ;
 31964                                  ;	Input : None
 31965                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 31966                                  ;		 ConvLoad clear if did.
 31967                                  ;
 31968                                  ;	Prepares memory for more devices after returning from loading one
 31969                                  ;	using the DOS 6 options (/L:... etc).
 31970                                  ;
 31971                                  ;----------------------------------------------------------------------------
 31972                                  
 31973                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31974                                  ;RetFromUM:
 31975                                  ;	pushf
 31976                                  ;	mov	byte [cs:ConvLoad],1
 31977                                  ;	call	UnHideUMBs
 31978                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 31979                                  ;	mov	byte [cs:ConvLoad],0
 31980                                  ;rfUM1:	
 31981                                  ;	popf
 31982                                  ;	retn
 31983                                  
 31984                                  ;----------------------------------------------------------------------------
 31985                                  ;
 31986                                  ; procedure : RemoveNull
 31987                                  ;
 31988                                  ;	Input : ES:SI points to a null terminated string
 31989                                  ;
 31990                                  ;	Output : none
 31991                                  ;
 31992                                  ;	Replaces the null at the end of a string with blank
 31993                                  ;
 31994                                  ;----------------------------------------------------------------------------
 31995                                  
 31996                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31997                                  	; (SYSINIT:2CCEh)
 31998                                  RemoveNull:
 31999                                  	; 11/12/2022
 32000                                  	; ds = cs
 32001                                  rn_next:
 32002 000028C3 268A1C                  	mov	bl,[es:si]
 32003 000028C6 08DB                    	or	bl,bl			; null ?
 32004 000028C8 7403                    	jz	short rn_gotnull
 32005 000028CA 46                      	inc	si			; advance the pointer
 32006 000028CB EBF6                    	jmp	short rn_next
 32007                                  rn_gotnull:
 32008                                  	; 11/12/2022
 32009 000028CD 8A1E[921E]              	mov	bl,[DevSavedDelim]
 32010                                  	;mov	bl,[cs:DevSavedDelim]
 32011 000028D1 26881C                  	mov	[es:si],bl		; replace null with blank
 32012                                  	; 02/11/2022
 32013                                  ; 11/12/2022
 32014                                  rba_ok:		; 10/04/2019
 32015 000028D4 C3                      	retn
 32016                                  
 32017                                  ;----------------------------------------------------------------------------
 32018                                  ;
 32019                                  ; procedure : RoundBreakAddr
 32020                                  ;
 32021                                  ;	Input : DevBrkAddr
 32022                                  ;	Output : DevBrkAddr
 32023                                  ;
 32024                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 32025                                  ;
 32026                                  ;----------------------------------------------------------------------------
 32027                                  
 32028                                  RoundBreakAddr:
 32029 000028D5 2EA1[6A1E]              	mov	ax,[cs:DevBrkAddr]
 32030 000028D9 E8C8E7                  	call	ParaRound
 32031 000028DC 2E0106[6C1E]            	add	[cs:DevBrkAddr+2],ax
 32032 000028E1 2EC706[6A1E]0000        	mov	word [cs:DevBrkAddr],0
 32033 000028E8 2EA1[641E]              	mov	ax,[cs:DevLoadEnd]
 32034 000028EC 2E3906[6C1E]            	cmp	[cs:DevBrkAddr+2],ax
 32035 000028F1 76E1                    	jbe	short rba_ok
 32036 000028F3 E95E07                  	jmp	mem_err
 32037                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32038                                  	; 11/12/2022
 32039                                  ;rba_ok:
 32040                                  ;	retn
 32041                                  
 32042                                  ;----------------------------------------------------------------------------
 32043                                  ;
 32044                                  ; procedure : DevSetBreak
 32045                                  ;
 32046                                  ;	Input : DevBrkAddr
 32047                                  ;	Output : Carry set if Device returned Init failed
 32048                                  ;		 Else carry clear
 32049                                  ;
 32050                                  ;----------------------------------------------------------------------------
 32051                                  
 32052                                  DevSetBreak:
 32053 000028F6 50                      	push	ax
 32054                                  
 32055 000028F7 2EA1[6C1E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 32056 000028FB 2E803E[0D14]00          	cmp	byte [cs:multdeviceflag],0
 32057 00002901 750F                    	jne	short set_break_continue ;do not check it.
 32058 00002903 2E3B06[621E]            	cmp	ax,[cs:DevLoadAddr]
 32059 00002908 7508                    	jne	short set_break_continue ;if not same, then o.k.
 32060                                  
 32061                                  	;cmp	word [cs:DevBrkAddr],0
 32062                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 32063                                  	; 12/12/2022
 32064 0000290A 2E833E[6A1E]01          	cmp	word [cs:DevBrkAddr],1
 32065 00002910 7204                    	jb	short break_failed
 32066                                  
 32067                                  set_break_continue:
 32068 00002912 E8C0FF                  	call	RoundBreakAddr
 32069                                  	; 12/12/2022
 32070 00002915 F8                      	clc
 32071                                  break_failed:
 32072 00002916 58                      	pop	ax
 32073                                  	;clc
 32074 00002917 C3                      	retn
 32075                                  
 32076                                  	; 12/12/2022
 32077                                  ;break_failed:
 32078                                  	;pop	ax
 32079                                  	;stc
 32080                                  	;retn
 32081                                  
 32082                                  ;----------------------------------------------------------------------------
 32083                                  ;
 32084                                  ; procedure : DevBreak
 32085                                  ;
 32086                                  ;	Input : DevLoadAddr & DevBrkAddr
 32087                                  ;	Output : none
 32088                                  ;
 32089                                  ;	Marks a succesful install of a device driver
 32090                                  ;	Sets device size field in sub-arena &
 32091                                  ;	Updates Free ptr in UMB or adjusts memhi
 32092                                  ;
 32093                                  ;----------------------------------------------------------------------------
 32094                                  
 32095                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32096                                  DevBreak:
 32097                                  	;push	ds ; 11/12/2022
 32098                                  
 32099                                  	; 11/12/2022
 32100 00002918 0E                      	push	cs
 32101 00002919 1F                      	pop	ds
 32102                                  	;mov	ax,[cs:DevLoadAddr]
 32103                                  	;mov	bx,[cs:DevBrkAddr+2]
 32104 0000291A A1[621E]                	mov	ax,[DevLoadAddr]
 32105 0000291D 8B1E[6C1E]              	mov	bx,[DevBrkAddr+2]
 32106                                  	; 11/12/2022
 32107 00002921 1E                      	push	ds
 32108                                  
 32109 00002922 48                      	dec	ax			; seg of sub-arena
 32110 00002923 8ED8                    	mov	ds,ax
 32111 00002925 40                      	inc	ax			; Back to Device segment
 32112 00002926 29D8                    	sub	ax,bx
 32113 00002928 F7D8                    	neg	ax			; size of device in paras
 32114 0000292A A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 32115                                  	
 32116                                  	; 11/12/2022
 32117 0000292D 1F                      	pop	ds
 32118                                  	; ds = cs
 32119                                   	
 32120 0000292E 803E[7D1E]00            	cmp	byte [DeviceHi],0
 32121                                  	;cmp	byte [cs:DeviceHi],0
 32122 00002933 7405                    	je	short db_lo
 32123                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 32124                                  	;jmp	short db_exit
 32125                                  	; 11/12/2022
 32126 00002935 891E[731E]              	mov	[DevUMBFree],bx
 32127 00002939 C3                      	retn	
 32128                                  db_lo:
 32129                                  	; 11/12/2022
 32130                                  	; ds = cs
 32131                                  	;mov	[cs:memhi],bx
 32132                                  	;mov	word [cs:memlo],0
 32133 0000293A 891E[E003]              	mov	[memhi],bx
 32134 0000293E C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 32135                                  db_exit:
 32136                                  	;pop	ds ; 11/12/2022
 32137                                  	; 17/09/2023
 32138                                  ;sd_ret:	; 09/09/2023
 32139 00002944 C3                      	retn
 32140                                  
 32141                                  ; 10/04/2019 - Retro DOS v4.0
 32142                                  
 32143                                  ;----------------------------------------------------------------------------
 32144                                  ;
 32145                                  ; procedure : ParseSize
 32146                                  ;
 32147                                  ;	Parses the command line for SIZE= command
 32148                                  ;
 32149                                  ;	ES:SI = command line to parsed
 32150                                  ;
 32151                                  ;	returns ptr to command line after SIZE= option in ES:SI
 32152                                  ;	updates the DevSizeOption variable with value supplied
 32153                                  ;	in SIZE=option
 32154                                  ;	Returns carry if the SIZE option was invalid
 32155                                  ;
 32156                                  ;----------------------------------------------------------------------------
 32157                                  
 32158                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32159                                  	; (SYSINIT:2D5Ah)
 32160                                  
 32161                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization & BugFix)
 32162                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 32163                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 32164                                  ParseSize:
 32165                                  	;push	bx
 32166                                  	;mov	bx,si
 32167                                  
 32168                                  	; 09/09/2023
 32169 00002945 56                      	push	si ; * ; mov bx,si
 32170                                  
 32171                                  	; 11/12/2022
 32172                                  	; ds = cs
 32173                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 32174                                  	;mov	[cs:DevCmdLine],si
 32175                                  	;mov	[cs:DevCmdLine+2],es
 32176 00002946 C706[7E1E]0000          	mov	word [DevSizeOption],0 ; init the value
 32177 0000294C 8936[8E1E]              	mov	[DevCmdLine],si
 32178 00002950 8C06[901E]              	mov	[DevCmdLine+2],es	
 32179 00002954 E82400                  	call	SkipDelim
 32180 00002957 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 32181 0000295C 7528                    	jne	short ps_no_size
 32182 0000295E 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 32183 00002964 7520                    	jne	short ps_no_size
 32184 00002966 268A4404                	mov	al,[es:si+4]
 32185 0000296A E85306                  	call	delim
 32186                                  	;jne	short ps_no_size
 32187                                  	; 22/07/2023 - 09/09/2023 (cf=0)
 32188 0000296D 7518                    	jne	short ps_no_size_2 ; cf=0 here
 32189 0000296F 83C605                  	add	si,5
 32190 00002972 E81400                  	call	GetHexNum
 32191 00002975 7210                    	jc	short ps_err
 32192                                  	; 11/12/2022
 32193                                  	; ds = cs
 32194                                  	;mov	[cs:DevSizeOption],ax
 32195 00002977 A3[7E1E]                	mov	[DevSizeOption],ax
 32196                                  	
 32197                                  	; 09/09/2023
 32198 0000297A 58                      	pop	ax  ; * (discard previous si value on top of stack)
 32199                                  
 32200                                  ;	call	SkipDelim ; **
 32201                                  ;	
 32202                                  ;	; 22/07/2023
 32203                                  ;;ps_no_size_2:
 32204                                  ;	; cf = 0
 32205                                  ;	retn
 32206                                  
 32207                                  	; 09/09/2023
 32208                                  	;jmp	short SkipDelim
 32209                                  
 32210                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 32211                                  %if 1
 32212                                  	; 01/11/2022
 32213                                  SkipDelim:
 32214                                  sd_next_char:
 32215 0000297B 268A04                  	mov	al,[es:si]
 32216 0000297E E83F06                  	call	delim
 32217 00002981 7505                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 32218 00002983 46                      	inc	si
 32219 00002984 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 32220                                  	; 11/12/2022
 32221                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32222                                  ;sd_ret:
 32223                                  	;retn
 32224                                  %endif
 32225                                  
 32226                                  	;;;call	SkipDelim ; **
 32227                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32228                                  	;mov	bx,si
 32229                                  ps_no_size:
 32230                                  	;mov	si,bx
 32231                                  	;pop	bx
 32232 00002986 F8                      	clc	; cf=0
 32233                                  	;retn
 32234                                  	; 11/12/2022
 32235                                  ps_err:		; cf=1
 32236                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 32237                                  	; 09/09/2023
 32238 00002987 5E                      	pop	si ; * ; mov si,bx
 32239                                  	; 17/09/2023
 32240                                  sd_ret:	; cf=?
 32241 00002988 C3                      	retn
 32242                                  
 32243                                  ;ps_err:
 32244                                  	; 02/11/2022
 32245                                  	;pop	bx
 32246                                  	;stc
 32247                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32248                                  	; 11/12/2022
 32249                                  	; cf=1
 32250                                  	;stc
 32251                                  	; 11/12/2022
 32252                                  ;sd_ret: 
 32253                                  	; 22/07/2023
 32254                                  	; 12/04/2019
 32255                                  	;retn
 32256                                  
 32257                                  ; 12/04/2019 - Retro DOS v4.0
 32258                                  
 32259                                  ;----------------------------------------------------------------------------
 32260                                  ;
 32261                                  ; procedure : SkipDelim
 32262                                  ;
 32263                                  ;	Skips delimiters in the string pointed to by ES:SI
 32264                                  ;	Returns ptr to first non-delimiter character in ES:SI
 32265                                  ;
 32266                                  ;----------------------------------------------------------------------------
 32267                                  
 32268                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 32269                                  %if 0
 32270                                  	; 01/11/2022
 32271                                  SkipDelim:
 32272                                  sd_next_char:
 32273                                  	mov	al,[es:si]
 32274                                  	call	delim
 32275                                  	jnz	short sd_ret
 32276                                  	inc	si
 32277                                  	jmp	short sd_next_char ; 01/11/2022
 32278                                  	; 11/12/2022
 32279                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32280                                  ;sd_ret:
 32281                                  	;retn
 32282                                  %endif
 32283                                  
 32284                                  ;----------------------------------------------------------------------------
 32285                                  ;
 32286                                  ; procedure : GetHexNum
 32287                                  ;
 32288                                  ;	Converts an ascii string terminated by a delimiter into binary.
 32289                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 32290                                  ;
 32291                                  ;	Returns in AX the number number of paras equivalent to the
 32292                                  ;	hex number of bytes specified by the hexadecimal string.
 32293                                  ;
 32294                                  ;	Returns carry in case it encountered a non-hex character or
 32295                                  ;	if it encountered crlf
 32296                                  ;
 32297                                  ;----------------------------------------------------------------------------
 32298                                  
 32299                                  ; 13/05/2019
 32300                                  
 32301                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32302                                  	; (SYSINIT:2DA5h)
 32303                                  GetHexNum:
 32304 00002989 31C0                    	xor	ax,ax
 32305 0000298B 31D2                    	xor	dx,dx
 32306                                  ghn_next:
 32307 0000298D 268A1C                  	mov	bl,[es:si]
 32308 00002990 80FB0D                  	cmp	bl,cr  ; 0Dh
 32309 00002993 7436                    	je	short ghn_err
 32310 00002995 80FB0A                  	cmp	bl,lf  ; 0Ah
 32311 00002998 7431                    	je	short ghn_err
 32312 0000299A 50                      	push	ax
 32313 0000299B 88D8                    	mov	al,bl
 32314 0000299D E82006                  	call	delim
 32315 000029A0 58                      	pop	ax
 32316                                  	; 04/01/2023
 32317 000029A1 B90400                  	mov	cx,4
 32318 000029A4 7410                    	jz	short ghn_into_paras
 32319 000029A6 E82400                  	call	GetNibble
 32320                                  	;jc	short ghn_err
 32321                                  	; 11/12/2022
 32322 000029A9 7221                    	jc	short ghn_ret ; cf=1
 32323                                  	; 04/01/2023
 32324                                  	;mov	cx,4
 32325                                  ghn_shift1:
 32326 000029AB D1E0                    	shl	ax,1
 32327 000029AD D1D2                    	rcl	dx,1
 32328 000029AF E2FA                    	loop	ghn_shift1
 32329 000029B1 08D8                    	or	al,bl
 32330 000029B3 46                      	inc	si
 32331 000029B4 EBD7                    	jmp	short ghn_next
 32332                                  ghn_into_paras:
 32333 000029B6 83C00F                  	add	ax,15
 32334 000029B9 83D200                  	adc	dx,0
 32335 000029BC F7C2F0FF                	test	dx,0FFF0h
 32336 000029C0 7509                    	jnz	short ghn_err
 32337                                  	; 04/01/2023
 32338                                  	;mov	cx,4
 32339                                  ghn_shift2:
 32340 000029C2 F8                      	clc
 32341 000029C3 D1DA                    	rcr	dx,1
 32342 000029C5 D1D8                    	rcr	ax,1
 32343 000029C7 E2F9                    	loop	ghn_shift2
 32344 000029C9 F8                      	clc
 32345 000029CA C3                      	retn
 32346                                  	; 11/12/2022
 32347                                  ghn_err:
 32348                                  gnib_err:
 32349 000029CB F9                      	stc
 32350                                  ghn_ret:
 32351                                  gnib_ret:
 32352 000029CC C3                      	retn
 32353                                  
 32354                                  ;----------------------------------------------------------------------------
 32355                                  ;
 32356                                  ; procedure : GetNibble
 32357                                  ;
 32358                                  ;	Convert one nibble (hex digit) in BL into binary
 32359                                  ;
 32360                                  ;	Retruns binary value in BL
 32361                                  ;
 32362                                  ;	Returns carry if BL contains non-hex digit
 32363                                  ;
 32364                                  ;----------------------------------------------------------------------------
 32365                                  
 32366                                  GetNibble:
 32367 000029CD 80FB30                  	cmp	bl,'0'
 32368                                  	;jb	short gnib_err
 32369                                  	; 11/12/2022
 32370 000029D0 72FA                    	jb	short gnib_ret ; cf=1
 32371 000029D2 80FB39                  	cmp	bl,'9'
 32372 000029D5 7704                    	ja	short is_it_hex
 32373 000029D7 80EB30                  	sub	bl,'0'		; clc
 32374 000029DA C3                      	retn
 32375                                  is_it_hex:
 32376 000029DB 80FB41                  	cmp	bl,'A'
 32377                                  	;jb	short gnib_err
 32378                                  	; 11/12/2022
 32379 000029DE 72EC                    	jb	short gnib_ret ; cf=1
 32380 000029E0 80FB46                  	cmp	bl,'F'
 32381 000029E3 77E6                    	ja	short gnib_err ; 11/12/2022
 32382 000029E5 80EB37                  	sub	bl,'A'- 10	; clc
 32383 000029E8 C3                      	retn
 32384                                  
 32385                                  	; 11/12/2022
 32386                                  ;gnib_err:
 32387                                  ;	stc
 32388                                  ;gnib_ret:
 32389                                  ;	retn
 32390                                  
 32391                                  ;============================================================================
 32392                                  
 32393                                  ; 12/04/2019 - Retro DOS v4.0
 32394                                  
 32395                                  ; umb.inc (MSDOS 6.0, 1991)
 32396                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 32397                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 32398                                  
 32399                                  XMM_REQUEST_UMB	equ 10h
 32400                                  XMM_RELEASE_UMB	equ 11h
 32401                                  
 32402                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32403                                  
 32404                                  ;---------------------------------------------------------------------------
 32405                                  ;
 32406                                  ; Procedure Name	: umb_insert
 32407                                  ;
 32408                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 32409                                  ;			: BX = seg address of UMB to be linked in
 32410                                  ;			: DX = size of UMB to be linked in paras
 32411                                  ;			; DS = data
 32412                                  ;
 32413                                  ; Outputs		: links the UMB into the arena chain
 32414                                  ;
 32415                                  ; Uses			: AX, CX, ES, DX, BX
 32416                                  ;
 32417                                  ;---------------------------------------------------------------------------
 32418                                  
 32419                                  umb_insert:
 32420 000029E9 1E                      	push	ds
 32421                                  
 32422                                  	; 31/12/2022
 32423                                  	; ds = cs
 32424                                  
 32425                                  	;mov	ds,[cs:DevDOSData]
 32426 000029EA 8E1E[8C1E]              	mov	ds,[DevDOSData] ; 31/12/2022 
 32427                                  	;mov	ds,[8Ch]
 32428 000029EE 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 32429 000029F2 8CD8                    	mov	ax,ds
 32430 000029F4 8EC0                    	mov	es,ax
 32431                                  ui_next:
 32432 000029F6 39D8                    	cmp	ax,bx			; Q: is current block above
 32433                                  					;    new block
 32434 000029F8 770F                    	ja	short ui_insert		; Y: insert it
 32435                                  					; Q: is current block the
 32436                                  					;    last
 32437 000029FA 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32438 00002A00 745C                    	je	short ui_append		; Y: append new block to chain
 32439                                  					; N: get next block
 32440 00002A02 8ED8                    	mov	ds,ax			; M005
 32441                                  	;call	get_next		; ax = es = next block
 32442 00002A04 E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 32443 00002A07 EBED                    	jmp	short ui_next
 32444                                  
 32445                                  ui_insert:
 32446 00002A09 8CD9                    	mov	cx,ds			; ds = previous arena
 32447 00002A0B 41                      	inc	cx			; top of previous block
 32448                                  
 32449 00002A0C 29D9                    	sub	cx,bx
 32450 00002A0E F7D9                    	neg	cx			; cx = size of used block
 32451                                  	;mov	byte [0],'M'
 32452 00002A10 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32453                                  	;mov	word [1],8
 32454 00002A15 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 32455                                  	;mov	[3],cx
 32456 00002A1B 890E0300                	mov	[ARENA.SIZE],cx	
 32457                                  	;mov	word [8],4353h ; 'SC'
 32458 00002A1F C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 32459                                  
 32460                                  ; prepare the arena at start of new block
 32461                                  
 32462 00002A25 8EC3                    	mov	es,bx
 32463 00002A27 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32464 00002A2D 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 32465                                  					; mark as free
 32466 00002A34 83EA02                  	sub	dx,2			; make room for arena at
 32467                                  					; start & end of new block
 32468 00002A37 2689160300              	mov	[es:ARENA.SIZE],dx
 32469                                  
 32470                                  ; prepare arena at end of new block
 32471                                  	
 32472 00002A3C 01D3                    	add	bx,dx
 32473 00002A3E 43                      	inc	bx
 32474 00002A3F 8EC3                    	mov	es,bx			; es=arena at top of new block
 32475 00002A41 43                      	inc	bx			; bx=top of new block
 32476                                  
 32477                                  					; ax contains arena just above
 32478                                  					; this block
 32479 00002A42 29D8                    	sub	ax,bx			; ax = size of used block
 32480                                  	
 32481 00002A44 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32482 00002A4A 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32483 00002A51 26A30300                	mov	[es:ARENA.SIZE],ax	
 32484 00002A55 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32485                                  
 32486 00002A5C EB47                    	jmp	short ui_done
 32487                                  
 32488                                  ui_append:
 32489                                  					; es = arena of last block	
 32490 00002A5E 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 32491 00002A63 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 32492                                  					; going to rsrv on top of this 
 32493                                  					; block for the next arena.
 32494                                  	; 13/05/2019
 32495 00002A69 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32496                                  
 32497 00002A6F 89C1                    	mov	cx,ax			; cx=top of prev block-1
 32498 00002A71 40                      	inc	ax
 32499 00002A72 29D8                    	sub	ax,bx			; ax=top of prev block - 
 32500                                  					;    seg. address of new block
 32501 00002A74 F7D8                    	neg	ax
 32502                                  
 32503 00002A76 8EC1                    	mov	es,cx			; ds = arena of unused block
 32504                                  
 32505 00002A78 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32506 00002A7E 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32507 00002A85 26A30300                	mov	[es:ARENA.SIZE],ax	
 32508 00002A89 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 32509                                  
 32510                                  ; prepare the arena at start of new block
 32511 00002A90 8EC3                    	mov	es,bx
 32512 00002A92 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 32513 00002A98 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 32514                                  					; mark as free
 32515 00002A9F 4A                      	dec	dx			; make room for arena
 32516 00002AA0 2689160300              	mov	[es:ARENA.SIZE],dx	
 32517                                  ui_done:
 32518                                  uc_done: ; 31/12/2022 ; *!
 32519 00002AA5 1F                      	pop	ds
 32520                                  	; ds = cs ; 31/12/2022
 32521                                  ;uc_done:	; 18/12/2022
 32522                                  au_exit:	; 09/09/2023
 32523 00002AA6 C3                      	retn
 32524                                  
 32525                                  ;----------------------------------------------------------------------------
 32526                                  ;
 32527                                  ; procedure : AllocUMB
 32528                                  ;
 32529                                  ;	Allocate all UMBs and link it to DOS arena chain
 32530                                  ;
 32531                                  ;----------------------------------------------------------------------------
 32532                                  
 32533                                  AllocUMB:
 32534                                  	; 31/12/2022
 32535                                  	; ds = cs
 32536 00002AA7 E84700                  	call	InitAllocUMB		; link in the first UMB
 32537 00002AAA 72FA                    	jc	short au_exit		; quit on error
 32538                                  au_next:
 32539 00002AAC E87000                  	call	umb_allocate		; allocate
 32540 00002AAF 7205                    	jc	short au_coalesce
 32541 00002AB1 E835FF                  	call	umb_insert		; & insert till no UMBs
 32542 00002AB4 EBF6                    	jmp	short au_next
 32543                                  au_coalesce:
 32544                                  	; 09/09/2023
 32545                                  ;	call	umb_coalesce		; coalesce all UMBs
 32546                                  ;au_exit:
 32547                                  ;	; 31/12/2022
 32548                                  ;	; ds = cs
 32549                                  ;	retn
 32550                                  
 32551                                  	; 09/09/2023
 32552                                  	;jmp	short umb_coalesce
 32553                                  
 32554                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32555                                  
 32556                                  ;----------------------------------------------------------------------------
 32557                                  ;
 32558                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 32559                                  ;
 32560                                  ;	Coalesce adds the block following the argument to the argument block,
 32561                                  ;	iff it's free. Coalesce is usually used to join free blocks, but
 32562                                  ;	some callers (such as $setblock) use it to join a free block to it's
 32563                                  ;	preceeding allocated block.
 32564                                  ;
 32565                                  ;	EXIT	'C' clear if OK
 32566                                  ;		  (ds) unchanged, this block updated
 32567                                  ;		  (ax) = address of next block, IFF not at end
 32568                                  ;		'C' set if arena trashed
 32569                                  ;	USES	cx, di, ds, es
 32570                                  ;
 32571                                  ;----------------------------------------------------------------------------
 32572                                  
 32573                                  umb_coalesce:
 32574                                  	; 31/12/2022
 32575                                  	; ds = cs
 32576 00002AB6 1E                      	push	ds ; *!
 32577                                  
 32578 00002AB7 31FF                    	xor	di, di
 32579                                  
 32580                                  	;mov	es,[cs:DevDOSData]
 32581                                  	; 31/12/2022
 32582 00002AB9 8E06[8C1E]              	mov	es,[DevDOSData]
 32583 00002ABD 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 32584                                  uc_nextfree:
 32585 00002AC2 8CC0                    	mov	ax,es
 32586 00002AC4 8ED8                    	mov	ds,ax
 32587                                  	;cmp	[es:1],di
 32588 00002AC6 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 32589 00002ACB 7407                    	je	short uc_again		; Y: try to coalesce with next block
 32590                                  					; N: get next arena
 32591 00002ACD E86B00                  	call	get_next		; es, ax = next arena
 32592 00002AD0 72D3                    	jc	short uc_done	; *!
 32593 00002AD2 EBEE                    	jmp	short uc_nextfree
 32594                                  uc_again:
 32595 00002AD4 E86400                  	call	get_next		; ES, AX <- next block
 32596 00002AD7 72CC                    	jc	short uc_done	; *!
 32597                                  uc_check:
 32598 00002AD9 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 32599 00002ADE 75E2                    	jne	short uc_nextfree	; N: get next free arena
 32600                                  					; Y: coalesce
 32601 00002AE0 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 32602 00002AE5 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 32603                                  	;add	[3],cx
 32604 00002AE6 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 32605 00002AEA 268A0D                  	mov     cl,[es:di]              ; move up signature
 32606 00002AED 880D                    	mov     [di],cl
 32607 00002AEF EBE3                    	jmp     short uc_again		; try again
 32608                                  
 32609                                  	; 18/12/2022
 32610                                  ;uc_done:
 32611                                  	;retn
 32612                                  
 32613                                  ;----------------------------------------------------------------------------
 32614                                  ;
 32615                                  ; procedure : InitAllocUMB
 32616                                  ;
 32617                                  ;----------------------------------------------------------------------------
 32618                                  
 32619                                  InitAllocUMB:
 32620                                  	; 31/12/2022
 32621                                  	; ds = cs
 32622 00002AF1 E820DF                  	call	IsXMSLoaded
 32623 00002AF4 7527                    	jnz	short iau_err		; quit on no XMS driver
 32624 00002AF6 B452                    	mov	ah,52h
 32625 00002AF8 CD21                    	int	21h			; get DOS DATA seg
 32626                                  	; 31/12/2022
 32627                                  	; ds = cs
 32628                                  	;mov	[cs:DevDOSData],es	; & save it for later
 32629 00002AFA 8C06[8C1E]              	mov	[DevDOSData],es		; & save it for later
 32630 00002AFE B81043                  	mov	ax,4310h
 32631 00002B01 CD2F                    	int	2Fh
 32632                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 32633                                  	;mov	[cs:DevXMSAddr+2],es
 32634 00002B03 891E[751E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 32635 00002B07 8C06[771E]              	mov	[DevXMSAddr+2],es	
 32636                                  	; 31/12/2022
 32637 00002B0B 803E[8B1E]00            	cmp	byte [FirstUMBLinked],0 
 32638                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 32639                                  	;jne	short ia_1		; quit if we already did it
 32640                                  	; 12/12/2022
 32641 00002B10 770A                    	ja	short ia_1 ; cf=0
 32642 00002B12 E83900                  	call	LinkFirstUMB		; else link the first UMB
 32643                                  	;jc	short iau_err
 32644                                  	; 12/12/2022
 32645 00002B15 7207                    	jc	short iau_err2  ; cf=1
 32646                                  	; 31/12/2022
 32647                                  	; ds = cs
 32648 00002B17 C606[8B1E]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32649                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32650                                  ia_1:
 32651                                  	; 12/12/2022
 32652                                  	; cf=0
 32653                                  	;clc
 32654 00002B1C C3                      	retn
 32655                                  iau_err:
 32656 00002B1D F9                      	stc
 32657                                  iau_err2:
 32658 00002B1E C3                      	retn
 32659                                  
 32660                                  ;-------------------------------------------------------------------------
 32661                                  ;
 32662                                  ; Procedure Name	: umb_allocate
 32663                                  ;
 32664                                  ; Inputs		: DS = data
 32665                                  ;
 32666                                  ; Outputs		: if UMB available
 32667                                  ;				Allocates the largest available UMB and 
 32668                                  ;			  	BX = segment of allocated block
 32669                                  ;				DX = size of allocated block
 32670                                  ;				NC
 32671                                  ;			  else 
 32672                                  ;				CY
 32673                                  ;
 32674                                  ; Uses			: BX, DX
 32675                                  ;
 32676                                  ;-------------------------------------------------------------------------
 32677                                  
 32678                                  umb_allocate:
 32679                                  	; 31/12/2022
 32680                                  	; ds = cs
 32681 00002B1F 50                      	push	ax
 32682 00002B20 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32683 00002B22 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 32684                                  					;   possible
 32685                                  	; 31/12/2022
 32686 00002B25 FF1E[751E]              	call	far [DevXMSAddr]
 32687                                  	;call	far [cs:DevXMSAddr]
 32688                                  					; dx now contains the size of
 32689                                  					; the largest UMB
 32690 00002B29 09D2                    	or	dx,dx
 32691 00002B2B 740B                    	jz	short ua_err
 32692                                  	
 32693 00002B2D B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32694                                  
 32695                                  	; 31/12/2022
 32696 00002B2F FF1E[751E]              	call	far [DevXMSAddr]
 32697                                  	;call	far [cs:DevXMSAddr]
 32698                                  
 32699 00002B33 83F801                  	cmp	ax,1			; Q: was the reqst successful
 32700                                  	;jne	short ua_err		; N: error
 32701                                  	; 14/08/2023
 32702 00002B36 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 32703                                  ua_err:
 32704 00002B38 F9                      	stc	
 32705                                  
 32706                                  	;clc
 32707                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32708                                  	; 12/12/2022
 32709                                  	; cf=0
 32710                                  	;clc 
 32711                                  ua_done:
 32712 00002B39 58                      	pop	ax
 32713 00002B3A C3                      	retn
 32714                                  	; 14/08/2023
 32715                                  ;ua_err:
 32716                                  	;stc
 32717                                  	;jmp	short ua_done
 32718                                  
 32719                                  ; 13/04/2019 - Retro DOS v4.0
 32720                                  
 32721                                  ;----------------------------------------------------------------------------
 32722                                  ;
 32723                                  ;**	get_next - Find Next item in Arena
 32724                                  ;
 32725                                  ;	ENTRY	dS - pointer to block head
 32726                                  ;	EXIT	AX,ES - pointers to next head
 32727                                  ;		'C' set if arena damaged
 32728                                  ;
 32729                                  ;----------------------------------------------------------------------------
 32730                                  
 32731                                  	; 01/11/2022
 32732                                  get_next:
 32733 00002B3B 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 32734 00002B40 740A                    	je	short gn_err
 32735                                  _get_next_:
 32736 00002B42 8CD8                    	mov     ax,ds                   ; ax=current block
 32737 00002B44 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 32738 00002B48 40                      	inc     ax                      ; remember that header!
 32739 00002B49 8EC0                    	mov	es,ax
 32740                                  	;clc
 32741                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32742                                  	; 11/12/2022
 32743                                  	; cf=0
 32744                                  	;clc
 32745 00002B4B C3                      	retn
 32746                                  gn_err:
 32747 00002B4C F9                      	stc
 32748                                  	; 11/12/2022	
 32749                                  lfu_err:	 ; cf=1
 32750 00002B4D C3                      	retn
 32751                                  
 32752                                  ;----------------------------------------------------------------------------
 32753                                  ;
 32754                                  ; procedure : LinkFirstUMB
 32755                                  ;
 32756                                  ;----------------------------------------------------------------------------
 32757                                  
 32758                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32759                                  	; (SYSINIT:2F81h)
 32760                                  LinkFirstUMB:
 32761                                  	; 31/12/2022
 32762                                  	; ds = cs
 32763 00002B4E E8CEFF                  	call	umb_allocate
 32764 00002B51 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 32765                                  
 32766                                  ; bx = segment of allocated UMB
 32767                                  ; dx = size of UMB
 32768                                  
 32769                                  	; 31/12/2022
 32770                                  	; ds = cs
 32771                                  
 32772 00002B53 CD12                    	int	12h			; ax = size of memory
 32773 00002B55 B106                    	mov	cl,6
 32774 00002B57 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 32775                                  
 32776 00002B59 89C1                    	mov	cx,ax			; cx = size in paras
 32777 00002B5B 29D8                    	sub	ax,bx			; ax = - size of unused block
 32778                                  
 32779 00002B5D F7D8                    	neg	ax
 32780                                  
 32781                                  	;sub	cx,1			; cx = first umb_arena
 32782                                  	; 09/09/2023
 32783 00002B5F 49                      	dec	cx
 32784 00002B60 8EC1                    	mov	es,cx			; es = first umb_arena
 32785                                  	
 32786 00002B62 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32787 00002B68 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32788                                  					
 32789 00002B6F 26A30300                	mov	[es:ARENA.SIZE],ax	
 32790 00002B73 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32791                                  
 32792                                  ; put in the arena for the first UMB
 32793                                  
 32794 00002B7A 8EC3                    	mov	es,bx			; es has first free umb seg
 32795 00002B7C 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32796 00002B82 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 32797                                  					; mark as free 
 32798 00002B89 4A                      	dec	dx			; make room for arena
 32799 00002B8A 2689160300              	mov	[es:ARENA.SIZE],dx	
 32800                                  
 32801                                  	;mov	es,[cs:DevDOSData]
 32802                                  	; 31/12/2022
 32803 00002B8F 8E06[8C1E]              	mov	es,[DevDOSData] ; ds = cs
 32804                                  	; 18/09/2023
 32805 00002B93 26890E8C00              	mov	[es:UMB_ARENA],cx
 32806                                  	;mov	di,UMB_ARENA ; 8Ch
 32807                                  	;mov	[es:di],cx		; initialize umb_head in DOS
 32808                                  					;  data segment with the arena
 32809                                  					;  just below Top of Mem
 32810                                  
 32811                                  ; we must now scan the arena chain and update the size of the last arena
 32812                                  
 32813                                  	;mov	di,DOS_ARENA ; 24h
 32814                                  	;mov	es,[es:di]		; es = start arena
 32815                                  	; 18/09/2023
 32816 00002B98 268E062400              	mov	es,[es:DOS_ARENA]
 32817 00002B9D 31FF                    	xor	di,di
 32818                                  ;scan_next
 32819                                  ; 09/12/2022
 32820                                  scannext:
 32821 00002B9F 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 32822 00002BA3 740C                    	je	short got_last
 32823                                  	
 32824 00002BA5 8CC0                    	mov	ax,es
 32825 00002BA7 2603060300              	add	ax,[es:ARENA.SIZE]
 32826 00002BAC 40                      	inc	ax
 32827 00002BAD 8EC0                    	mov	es,ax
 32828                                  	;jmp	short scan_next
 32829                                  	; 09/12/2022
 32830 00002BAF EBEE                    	jmp	short scannext
 32831                                  got_last:
 32832                                  	;sub	word [es:ARENA.SIZE],1
 32833                                  	; 09/09/2023
 32834 00002BB1 26FF0E0300              	dec	word [es:ARENA.SIZE]
 32835                                  
 32836 00002BB6 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32837                                  	;clc
 32838                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32839                                  	; 11/12/2022
 32840                                  	; cf=0
 32841                                  	;clc
 32842 00002BBC C3                      	retn
 32843                                  
 32844                                  ; 11/12/2022
 32845                                  ;;lfu_err:
 32846                                  ;	;stc
 32847                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32848                                  ;	; 11/12/2022
 32849                                  ;	; cf=1
 32850                                  ;	;stc
 32851                                  ;	retn
 32852                                  
 32853                                  ;----------------------------------------------------------------------------
 32854                                  ;
 32855                                  ; procedure : ShrinkUMB
 32856                                  ;
 32857                                  ;	Shrinks the current UMB in use, so that the unused portions
 32858                                  ;	of the UMB is given back to the DOS free mem pool
 32859                                  ;
 32860                                  ;----------------------------------------------------------------------------
 32861                                  
 32862                                  ShrinkUMB:
 32863                                  	; 12/12/2022
 32864                                  	; ds = cs
 32865 00002BBD 833E[6F1E]00            	cmp	word [DevUMBAddr],0
 32866                                  	;cmp	word [cs:DevUMBAddr],0
 32867 00002BC2 7421                    	je	short su_exit
 32868 00002BC4 06                      	push	es
 32869 00002BC5 53                      	push	bx
 32870                                  	; 12/12/2022
 32871                                  	;mov	bx,[cs:DevUMBFree]
 32872                                  	;sub	bx,[cs:DevUMBAddr]
 32873                                  	;mov	es,[cs:DevUMBAddr]
 32874 00002BC6 8B1E[731E]              	mov	bx,[DevUMBFree]
 32875 00002BCA 2B1E[6F1E]              	sub	bx,[DevUMBAddr]
 32876 00002BCE 8E06[6F1E]              	mov	es,[DevUMBAddr]
 32877                                  	
 32878 00002BD2 B8004A                  	mov	ax,4A00h
 32879 00002BD5 CD21                    	int	21h
 32880                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 32881                                  		; ES = segment address of block to change
 32882                                  		; BX = new size in paragraphs
 32883 00002BD7 8CC0                    	mov	ax,es
 32884 00002BD9 48                      	dec	ax
 32885 00002BDA 8EC0                    	mov	es,ax
 32886 00002BDC 26C70601000800          	mov	word [es:ARENA.OWNER],8
 32887 00002BE3 5B                      	pop	bx
 32888 00002BE4 07                      	pop	es
 32889                                  su_exit:
 32890 00002BE5 C3                      	retn
 32891                                  
 32892                                  ;----------------------------------------------------------------------------
 32893                                  ;
 32894                                  ; procedure : UnlinkUMB
 32895                                  ;
 32896                                  ;	Unlinks the UMBs from the DOS arena chain
 32897                                  ;
 32898                                  ;----------------------------------------------------------------------------
 32899                                  
 32900                                  UnlinkUMB:
 32901                                  	; 12/12/2022
 32902                                  	; ds = cs
 32903 00002BE6 1E                      	push	ds
 32904 00002BE7 06                      	push	es
 32905                                  	; 12/12/2022
 32906 00002BE8 803E[8B1E]00            	cmp	byte [FirstUMBLinked],0
 32907                                  	;cmp	byte [cs:FirstUMBLinked],0
 32908 00002BED 7420                    	je	short ulu_x		; nothing to unlink
 32909                                  	; 12/12/2022
 32910 00002BEF 8E06[8C1E]              	mov	es,[DevDOSData]
 32911                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 32912 00002BF3 268E1E2400              	mov	ds,[es:DOS_ARENA]
 32913 00002BF8 268B3E8C00              	mov	di,[es:UMB_ARENA]
 32914                                  ulu_next:
 32915 00002BFD E83BFF                  	call	get_next
 32916 00002C00 720D                    	jc	short ulu_x
 32917 00002C02 39C7                    	cmp	di,ax			; is the next one UMB ?
 32918 00002C04 7404                    	je	short ulu_found
 32919 00002C06 8ED8                    	mov	ds,ax
 32920 00002C08 EBF3                    	jmp	short ulu_next
 32921                                  ulu_found:
 32922                                  	;mov	byte [0],'Z'
 32923 00002C0A C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32924                                  ulu_x:
 32925 00002C0F 07                      	pop	es
 32926 00002C10 1F                      	pop	ds
 32927 00002C11 C3                      	retn
 32928                                  
 32929                                  ; ----------------------------------------------------------------------
 32930                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 32931                                  ; ----------------------------------------------------------------------
 32932                                  ; 14/04/2019 - Retro DOS v4.0
 32933                                  
 32934                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 32935                                  ;
 32936                                  ; Summary:
 32937                                  ;
 32938                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 32939                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 32940                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 32941                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 32942                                  ;   and/or config.inc for the full list.
 32943                                  ;
 32944                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 32945                                  ;   configuration support. blockname is either MENU, which contains one
 32946                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 32947                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 32948                                  ;   INCLUDE allows the current block to name another block for inclusion
 32949                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 32950                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 32951                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 32952                                  ;
 32953                                  ; Example:
 32954                                  ;
 32955                                  ;   [menu]
 32956                                  ;   menuitem=misc,Miscellaneous
 32957                                  ;   menuitem=network,Network Configuration
 32958                                  ;   menudefault=network,15
 32959                                  ;
 32960                                  ;   [network]
 32961                                  ;   include misc
 32962                                  ;   device=foo
 32963                                  ;
 32964                                  ;   [misc]
 32965                                  ;   device=bar
 32966                                  ;   include alternate
 32967                                  ;
 32968                                  ;   [alternate]
 32969                                  ;   device=tar
 32970                                  ;
 32971                                  ;
 32972                                  ;   When the menu is displayed
 32973                                  ;
 32974                                  ;    1. Miscellaneous
 32975                                  ;    2. Network Configuration
 32976                                  ;
 32977                                  ;   #2 is highlighted as the default option, and will be automatically
 32978                                  ;   selected after 15 seconds. It will invoke the following lines in the
 32979                                  ;   following order:
 32980                                  ;
 32981                                  ;       DEVICE=BAR
 32982                                  ;       DEVICE=TAR
 32983                                  ;       DEVICE=FOO
 32984                                  ;
 32985                                  
 32986                                  ;MULTI_CONFIG equ 1
 32987                                  
 32988                                  ; the following depend on the positions of the various letters in switchlist
 32989                                  
 32990                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 32991                                  
 32992                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 32993                                  flagdrive	equ 00001000b ; 8 
 32994                                  flagcyln	equ 00010000b ; 16
 32995                                  flagseclim	equ 00100000b ; 32
 32996                                  flagheads	equ 01000000b ; 64
 32997                                  flagff		equ 10000000b ; 128
 32998                                  
 32999                                  ;----------------------------------------------------------------------------
 33000                                  ; 19/04/2019 - Retro DOS v4.0
 33001                                  
 33002                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 33003                                  
 33004                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33005                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 33006                                  
 33007 00002C12 00                      insert_blank:	db 	0
 33008                                  
 33009                                  ;----------------------------------------------------------------------------
 33010                                  ;
 33011                                  ; procedure : setparms
 33012                                  ;
 33013                                  ; the following set of routines is used to parse the drivparm = command in
 33014                                  ; the config.sys file to change the default drive parameters.
 33015                                  ;
 33016                                  ;----------------------------------------------------------------------------
 33017                                  
 33018                                  setparms:
 33019 00002C13 1E                      	push	ds
 33020 00002C14 50                      	push	ax
 33021 00002C15 53                      	push	bx
 33022 00002C16 51                      	push	cx
 33023 00002C17 52                      	push	dx
 33024                                  
 33025 00002C18 0E                      	push	cs
 33026 00002C19 1F                      	pop	ds
 33027                                  
 33028 00002C1A 31DB                    	xor	bx,bx
 33029 00002C1C 8A1E[9C35]              	mov	bl,[drive]
 33030                                  	; 18/12/2022
 33031 00002C20 43                      	inc	bx
 33032                                  	;inc	bl			; get it correct for ioctl call
 33033                                  					; (1=a,2=b...)
 33034 00002C21 BA[7434]                	mov	dx,deviceparameters
 33035                                  	;mov	ah,IOCTL ; 44h
 33036                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 33037                                  	; 14/08/2023
 33038 00002C24 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 33039                                  	;mov	ch,RAWIO ; 8
 33040                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 33041                                  	; 14/08/2023
 33042 00002C27 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 33043 00002C2A CD21                    	int	21h
 33044                                  
 33045                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33046                                  ;
 33047                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 33048                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 33049                                  ;	; 21/10/2022
 33050                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 33051                                  ;	mov	ds,ax			; set Bios_Data segment
 33052                                  ;
 33053                                  ;	test	word [cs:switches],flagec35 ; 4
 33054                                  ;	jz	short not_ec35
 33055                                  
 33056                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33057                                  	;test	word [switches],flagec35 ; 4
 33058                                  	; 12/12/2022
 33059 00002C2C F606[9D35]04            	test	byte [switches],flagec35 ; 4
 33060 00002C31 7411                    	jz	short eot_ok
 33061                                  
 33062                                  	;mov	cl,[cs:drive]		; which drive was this for?
 33063                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33064 00002C33 8A0E[9C35]              	mov	cl,[drive]
 33065 00002C37 B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 33066 00002C3A 8ED8                    	mov	ds,ax	
 33067                                  
 33068 00002C3C B001                    	mov	al,1			; assume drive 0
 33069 00002C3E D2E0                    	shl	al,cl			; set proper bit depending on drive
 33070                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 33071 00002C40 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 33072                                  
 33073                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33074                                  ;
 33075                                  ;not_ec35:
 33076                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 33077                                  ;;	sectors per track than any old ones.
 33078                                  ;
 33079                                  ;	;mov	al,[cs:deviceparameters+20]
 33080                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33081                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 33082                                  ;	cmp	al,[EOT]
 33083                                  ;	jbe	short eot_ok
 33084                                  ;	mov	[EOT],al
 33085                                  
 33086                                  eot_ok:
 33087 00002C44 5A                      	pop	dx			; fix up all the registers
 33088 00002C45 59                      	pop	cx
 33089 00002C46 5B                      	pop	bx
 33090 00002C47 58                      	pop	ax
 33091 00002C48 1F                      	pop	ds ; 13/05/2019
 33092 00002C49 C3                      	retn
 33093                                  
 33094                                  ;----------------------------------------------------------------------------
 33095                                  ;
 33096                                  ; procedure : diddleback
 33097                                  ;
 33098                                  ; replace default values for further drivparm commands
 33099                                  ;
 33100                                  ;----------------------------------------------------------------------------
 33101                                  
 33102                                  diddleback:
 33103 00002C4A 1E                      	push	ds
 33104 00002C4B 0E                      	push	cs
 33105 00002C4C 1F                      	pop	ds
 33106                                  	;mov	word [deviceparameters+4],80
 33107 00002C4D C706[7834]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33108                                  	;mov	byte [deviceparameters+1],2
 33109 00002C53 C606[7534]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 33110                                  	;mov	word [deviceparameters+2],0
 33111 00002C58 C706[7634]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 33112 00002C5E C706[9D35]0000          	mov	word [switches],0	    ; zero all switches
 33113 00002C64 1F                      	pop	ds
 33114 00002C65 C3                      	retn
 33115                                  
 33116                                  ; 04/01/2023
 33117                                  %if 0
 33118                                  
 33119                                  ; 15/04/2019 - Retro DOS v4.0
 33120                                  
 33121                                  ;----------------------------------------------------------------------------
 33122                                  ;
 33123                                  ; procedure : parseline
 33124                                  ;
 33125                                  ; entry point is parseline. al contains the first character in command line.
 33126                                  ;
 33127                                  ;----------------------------------------------------------------------------
 33128                                  
 33129                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33130                                  	; (SYSINIT:30ACh)
 33131                                  
 33132                                  parseline:
 33133                                  	push	ds
 33134                                  
 33135                                  	push	cs
 33136                                  	pop	ds
 33137                                  
 33138                                  nextswtch:
 33139                                  	cmp	al,cr			; carriage return?
 33140                                  	je	short done_line
 33141                                  	cmp	al,lf			; linefeed?
 33142                                  	je	short put_back		; put it back and done
 33143                                  
 33144                                  ; anything less or equal to a space is ignored.
 33145                                  
 33146                                  	cmp	al,' '                  ; space?
 33147                                  	jbe	short getnext		; skip over space
 33148                                  	cmp	al,'/'
 33149                                  	je	short getparm
 33150                                  	stc				; mark error invalid-character-in-input
 33151                                  	jmp	short exitpl
 33152                                  
 33153                                  getparm:
 33154                                  	call	check_switch
 33155                                  	mov	[switches],bx		; save switches read so far
 33156                                  	jc	short swterr
 33157                                  getnext:
 33158                                  	call	getchr
 33159                                  	jc	short done_line
 33160                                  	jmp	short nextswtch
 33161                                  swterr:
 33162                                  	jmp	short exitpl		; exit if error
 33163                                  
 33164                                  done_line:
 33165                                  	; 12/12/2022
 33166                                  	test	byte [switches],flagdrive ; 8
 33167                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33168                                  	jnz	short okay
 33169                                  	stc				; mark error no-drive-specified
 33170                                  	jmp	short exitpl
 33171                                  
 33172                                  okay:
 33173                                  	mov	ax,[switches]
 33174                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33175                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33176                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33177                                  	;clc			    ; everything is fine
 33178                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33179                                  	; 12/12/2022
 33180                                  	; cf=0
 33181                                  	;clc
 33182                                  	call	setdeviceparameters
 33183                                  exitpl:
 33184                                  	pop	ds
 33185                                  	retn
 33186                                  put_back:
 33187                                  	inc	word [count]		; one more char to scan
 33188                                  	dec	word [chrptr]		; back up over linefeed
 33189                                  	jmp	short done_line
 33190                                  
 33191                                  %endif
 33192                                  
 33193                                  ;----------------------------------------------------------------------------
 33194                                  ;
 33195                                  ; procedure : check_switch
 33196                                  ;
 33197                                  ; processes a switch in the input. it ensures that the switch is valid, and
 33198                                  ; gets the number, if any required, following the switch. the switch and the
 33199                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 33200                                  ; error.
 33201                                  ;
 33202                                  ;----------------------------------------------------------------------------
 33203                                  
 33204                                  ; 09/09/2023
 33205                                  
 33206                                  err_swtch:
 33207 00002C66 31CB                    	xor	bx,cx			; remove this switch from the records
 33208                                  err_check:
 33209 00002C68 F9                      	stc
 33210                                  err_chk:
 33211                                  done_swtch:	; 09/09/2023 (cf=0)
 33212 00002C69 C3                      	retn
 33213                                  
 33214                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 33215                                  
 33216                                  check_switch:
 33217 00002C6A E87803                  	call	getchr
 33218                                  	;jc	short err_check
 33219 00002C6D 72FA                    	jc	short err_chk
 33220 00002C6F 24DF                            and     al,0DFh                 ; convert it to upper case
 33221 00002C71 3C41                    	cmp	al,'A'
 33222                                  	;jb	short err_check
 33223 00002C73 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 33224 00002C75 3C5A                    	cmp	al,'Z'
 33225 00002C77 77EF                    	ja	short err_check
 33226                                  
 33227 00002C79 06                      	push	es
 33228                                  
 33229 00002C7A 0E                      	push	cs
 33230 00002C7B 07                      	pop	es
 33231                                  
 33232                                  	;mov	cl,[switchlist]		; get number of valid switches
 33233                                  	;mov	ch,0
 33234                                  	;mov	di,1+switchlist		; point to string of valid switches
 33235                                  	; 09/09/2023
 33236 00002C7C BF[3036]                	mov	di,switchlist
 33237 00002C7F 8A0D                    	mov	cl,[di]
 33238 00002C81 B500                    	mov	ch,0
 33239 00002C83 47                      	inc	di	; 1+switchlist
 33240                                  
 33241 00002C84 F2AE                    	repne	scasb
 33242                                  
 33243 00002C86 07                      	pop	es
 33244 00002C87 75DF                    	jnz	short err_check
 33245                                  
 33246 00002C89 B80100                  	mov	ax,1
 33247 00002C8C D3E0                    	shl	ax,cl			; set bit to indicate switch
 33248 00002C8E 8B1E[9D35]              	mov	bx,[switches]		; get switches so far
 33249 00002C92 09C3                    	or	bx,ax			; save this with other switches
 33250 00002C94 89C1                    	mov	cx,ax
 33251                                  	; 12/12/2022
 33252 00002C96 A8F8                    	test	al,switchnum ; 0F8h
 33253                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 33254 00002C98 74CF                    	jz	short done_swtch
 33255                                  
 33256 00002C9A E84803                  	call	getchr
 33257 00002C9D 72C7                    	jc	short err_swtch
 33258                                  
 33259 00002C9F 3C3A                    	cmp	al,':'
 33260 00002CA1 75C3                    	jne	short err_swtch
 33261                                  
 33262 00002CA3 E83F03                  	call	getchr
 33263 00002CA6 53                      	push	bx			; preserve switches
 33264                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33265                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 33266                                  	; 12/12/2022
 33267                                  	; ds = cs
 33268 00002CA7 C606[2A03]20            	mov	byte [sepchr],' '
 33269 00002CAC E8DB03                  	call	getnum
 33270                                  	;mov	byte [cs:sepchr],0
 33271                                  	; 12/12/2022
 33272 00002CAF C606[2A03]00            	mov	byte [sepchr],0
 33273 00002CB4 5B                      	pop	bx			; restore switches
 33274                                  
 33275                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 33276                                  ; not check for carry set here. if there is an error, it will be detected
 33277                                  ; further on (hopefully).
 33278                                  
 33279                                  	; 09/09/2023
 33280                                  	;call	process_num
 33281                                  	;jmp	short process_num
 33282                                  
 33283                                  ;done_swtch:
 33284                                  ;	;clc
 33285                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33286                                  ;	; 12/12/2022
 33287                                  ;	; cf=0
 33288                                  ;	;clc
 33289                                  ;	retn
 33290                                  
 33291                                  ;----------------------------------------------------------------------------
 33292                                  ;
 33293                                  ; procedure : process_num
 33294                                  ;
 33295                                  ; this routine takes the switch just input, and the number following (if any),
 33296                                  ; and sets the value in the appropriate variable. if the number input is zero
 33297                                  ; then it does nothing - it assumes the default value that is present in the
 33298                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 33299                                  ;
 33300                                  ;----------------------------------------------------------------------------
 33301                                  
 33302                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33303                                  	; (SYSINIT:3156h)
 33304                                  process_num:
 33305 00002CB5 850E[9D35]              	test	[switches],cx		; if this switch has been done before,
 33306 00002CB9 752B                    	jnz	short done_ret		; ignore this one.
 33307                                  	; 12/12/2022
 33308 00002CBB F6C108                  	test	cl,flagdrive ; 8
 33309                                  	;test	cx,flagdrive ; 8
 33310 00002CBE 7404                    	jz	short try_f
 33311 00002CC0 A2[9C35]                	mov	byte [drive],al
 33312                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33313                                  	;jmp	short done_ret
 33314                                  	; 12/12/2022
 33315                                  	; cf=0
 33316 00002CC3 C3                      	retn	; 13/05/2019
 33317                                  try_f:
 33318                                  	; 12/12/2022
 33319 00002CC4 F6C180                  	test	cl,flagff ; 80h
 33320                                  	;test	cx,flagff ; 80h
 33321 00002CC7 7404                    	jz	short try_t
 33322                                  
 33323                                  ; ensure that we do not get bogus form factors that are not supported
 33324                                  
 33325                                  	;mov	[deviceparameters+1],al
 33326 00002CC9 A2[7534]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 33327                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33328                                  	;jmp	short done_ret
 33329                                  	; 12/12/2022
 33330                                  	; cf=0
 33331 00002CCC C3                      	retn	; 13/05/2019
 33332                                  try_t:
 33333 00002CCD 09C0                    	or	ax,ax
 33334 00002CCF 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 33335                                  	; 12/12/2022
 33336 00002CD1 F6C110                  	test	cl,flagcyln ; 10h
 33337                                  	;test	cx,flagcyln ; 10h
 33338 00002CD4 7404                    	jz	short try_s
 33339                                  
 33340                                  	;mov	[deviceparameters+4],ax
 33341 00002CD6 A3[7834]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 33342                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33343                                  	;jmp	short done_ret
 33344                                  	; 12/12/2022
 33345                                  	; cf=0
 33346 00002CD9 C3                      	retn	; 13/05/2019
 33347                                  try_s:
 33348                                  	; 12/12/2022
 33349 00002CDA F6C120                  	test	cl,flagseclim ; 20h
 33350                                  	;test	cx,flagseclim ; 20h
 33351 00002CDD 7404                    	jz	short try_h
 33352 00002CDF A3[9A35]                	mov	[slim],ax
 33353                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33354                                  	;jmp	short done_ret
 33355                                  	; 12/12/2022
 33356                                  	; cf=0
 33357 00002CE2 C3                      	retn	; 13/05/2019
 33358                                  
 33359                                  ; must be for number of heads
 33360                                  
 33361                                  try_h:
 33362 00002CE3 A3[9835]                	mov	[hlim],ax
 33363                                  done_ret:
 33364                                  	;clc
 33365                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33366                                  	; 12/12/2022
 33367                                  	; cf=0 (test instruction resets cf)
 33368                                  	;clc
 33369 00002CE6 C3                      	retn
 33370                                  
 33371                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33372                                  %if 1
 33373                                  
 33374                                  ; 15/04/2019 - Retro DOS v4.0
 33375                                  
 33376                                  ;----------------------------------------------------------------------------
 33377                                  ;
 33378                                  ; procedure : parseline
 33379                                  ;
 33380                                  ; entry point is parseline. al contains the first character in command line.
 33381                                  ;
 33382                                  ;----------------------------------------------------------------------------
 33383                                  
 33384                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33385                                  	; (SYSINIT:30ACh)
 33386                                  parseline:
 33387                                  	; 04/01/2023
 33388                                  	; ds = cs ; *
 33389                                  
 33390                                  	;push	ds ; *
 33391                                  
 33392                                  	;push	cs ; *
 33393                                  	;pop	ds ; *
 33394                                  
 33395                                  nextswtch:
 33396 00002CE7 3C0D                    	cmp	al,cr			; carriage return?
 33397 00002CE9 741C                    	je	short done_line
 33398 00002CEB 3C0A                    	cmp	al,lf			; linefeed?
 33399 00002CED 7421                    	je	short put_back		; put it back and done
 33400                                  
 33401                                  ; anything less or equal to a space is ignored.
 33402                                  
 33403 00002CEF 3C20                    	cmp	al,' '                  ; space?
 33404 00002CF1 760F                    	jbe	short getnext		; skip over space
 33405 00002CF3 3C2F                    	cmp	al,'/'
 33406 00002CF5 7402                    	je	short getparm
 33407 00002CF7 F9                      	stc				; mark error invalid-character-in-input
 33408                                  	;jmp	short exitpl
 33409                                  	; 04/01/2023
 33410                                  swterr:
 33411 00002CF8 C3                      	retn
 33412                                  
 33413                                  getparm:
 33414 00002CF9 E86EFF                  	call	check_switch
 33415 00002CFC 891E[9D35]              	mov	[switches],bx		; save switches read so far
 33416 00002D00 72F6                    	jc	short swterr
 33417                                  getnext:
 33418 00002D02 E8E002                  	call	getchr
 33419                                  	;jc	short done_line
 33420                                  	;jmp	short nextswtch
 33421                                  	; 04/01/2023
 33422 00002D05 73E0                    	jnc	short nextswtch
 33423                                  ;swterr:
 33424                                  	;jmp	short exitpl		; exit if error
 33425                                  
 33426                                  done_line:
 33427                                  	; 12/12/2022
 33428 00002D07 F606[9D35]08            	test	byte [switches],flagdrive ; 8
 33429                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33430 00002D0C 750C                    	jnz	short okay
 33431 00002D0E F9                      	stc				; mark error no-drive-specified
 33432                                  	;jmp	short exitpl
 33433                                  	; 04/01/2023
 33434 00002D0F C3                      	retn
 33435                                  
 33436                                  ;exitpl:
 33437                                  	; 04/01/2023
 33438                                  	; ds = cs
 33439                                  	;;pop	ds ; *
 33440                                  	;retn
 33441                                  
 33442                                  put_back:
 33443 00002D10 FF06[D203]              	inc	word [count]		; one more char to scan
 33444 00002D14 FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 33445 00002D18 EBED                    	jmp	short done_line
 33446                                  
 33447                                  okay:
 33448 00002D1A A1[9D35]                	mov	ax,[switches]
 33449 00002D1D 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33450 00002D20 A3[7634]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33451 00002D23 C706[9A34]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33452                                  	;clc			    ; everything is fine
 33453                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33454                                  	; 12/12/2022
 33455                                  	; cf=0
 33456                                  	;clc
 33457                                  	;call	setdeviceparameters
 33458                                  	; 04/01/2023
 33459                                  	;jmp	short setdeviceparameters
 33460                                  
 33461                                  %endif
 33462                                  
 33463                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 33464                                  
 33465                                  ;----------------------------------------------------------------------------
 33466                                  ;
 33467                                  ; procedure : setdeviceparameters
 33468                                  ;
 33469                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 33470                                  ; system based on the form factor. it is assumed that the bpbs for the
 33471                                  ; various form factors are present in the bpbtable. for hard files,
 33472                                  ; the recommended bpb is the same as the bpb on the drive.
 33473                                  ; no attempt is made to preserve registers since we are going to jump to
 33474                                  ; sysinit straight after this routine.
 33475                                  ;
 33476                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 33477                                  ;	  we always return no carry
 33478                                  ;
 33479                                  ;	note:  there is a routine by the same name in msdioctl.asm
 33480                                  ;
 33481                                  ;----------------------------------------------------------------------------
 33482                                  
 33483                                  ; 15/04/2019 - Retro DOS v4.0
 33484                                  
 33485                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33486                                  setdeviceparameters:
 33487                                  	; 04/01/2023
 33488                                  	; ds = cs
 33489                                  	
 33490 00002D29 06                      	push	es
 33491                                  
 33492 00002D2A 0E                      	push	cs
 33493 00002D2B 07                      	pop	es
 33494                                  
 33495 00002D2C 31DB                    	xor	bx,bx
 33496 00002D2E 8A1E[7534]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 33497 00002D32 80FB00                  	cmp	bl,DEV_5INCH ; 0
 33498 00002D35 7506                    	jne	short got_80
 33499                                  
 33500 00002D37 C706[7834]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33501                                  							; 48 tpi=40 cyl
 33502                                  got_80:
 33503 00002D3D D1E3                    	shl	bx,1			; get index into bpb table
 33504 00002D3F 8BB7[1C36]              	mov	si,[bpbtable+bx]	; get address of bpb
 33505                                  
 33506                                  	;mov	di,deviceparameters+7	
 33507                                  	; 02/11/2022
 33508 00002D43 BF[7B34]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 33509 00002D46 B91F00                  	mov	cx,A_BPB.size ; 31
 33510 00002D49 FC                      	cld
 33511                                  	;repe	movsb
 33512                                  	; 02/11/2022
 33513 00002D4A F3A4                    	rep	movsb
 33514                                  
 33515 00002D4C 07                      	pop	es
 33516                                  
 33517                                  	; 12/12/2022
 33518 00002D4D F606[9D35]20            	test	byte [switches],flagseclim ; 20h
 33519                                  	;test	word [switches],flagseclim ; 20h
 33520 00002D52 7406                    	jz	short see_heads
 33521                                  
 33522 00002D54 A1[9A35]                	mov	ax,[slim]
 33523                                  	;mov	[deviceparameters+20],ax
 33524 00002D57 A3[8834]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 33525                                  
 33526                                  see_heads:
 33527                                  	; 12/12/2022
 33528 00002D5A F606[9D35]40            	test	byte [switches],flagheads ; 40h
 33529                                  	;test	word [switches],flagheads ; 40h
 33530 00002D5F 7406                    	jz	short heads_not_altered
 33531                                  
 33532 00002D61 A1[9835]                	mov	ax,[hlim]
 33533                                  	;mov	[deviceparameters+22],ax	
 33534 00002D64 A3[8A34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 33535                                  
 33536                                  heads_not_altered:
 33537                                  
 33538                                  ; set up correct media descriptor byte and sectors/cluster
 33539                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 33540                                  
 33541                                  	;mov	byte [deviceparameters+9],2
 33542                                  	; 02/11/2022
 33543                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 33544                                  	; 04/01/2023
 33545 00002D67 B80200                  	mov	ax,2	
 33546 00002D6A A2[7D34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 33547                                  
 33548 00002D6D B3F0                    	mov	bl,0F0h			; get default mediabyte
 33549                                  
 33550                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 33551                                  
 33552                                  	;mov	bh,[deviceparameters+17]
 33553                                  	; 02/11/2022
 33554 00002D6F 8A3E[8534]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 33555                                  
 33556                                  	; 04/01/2023
 33557                                  	; ax = 2
 33558 00002D73 3906[8A34]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 33559                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 33560 00002D77 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 33561                                  
 33562 00002D79 7524                    	jne	short only_one_head	; one head, do one head stuff
 33563                                  
 33564                                  ;	two head drives will use the mediadescriptor from the bpb
 33565                                  
 33566 00002D7B 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 33567                                  
 33568                                  ;	two sided drives have two special cases to look for. One is
 33569                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 33570                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 33571                                  ;	   one sector/cluster.
 33572                                  
 33573                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 33574                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 33575                                  ;	   type of 2 headed drive is all set.
 33576                                  
 33577 00002D7D 833E[8834]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 33578 00002D82 7509                    	jne	short not_144m
 33579 00002D84 833E[7834]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33580 00002D89 7502                    	jne	short not_144m
 33581                                  
 33582                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 33583                                  
 33584 00002D8B EB24                    	jmp	short got_one_secperclus_drive
 33585                                  
 33586                                  ;	check for 320K
 33587                                  
 33588                                  not_144m:
 33589 00002D8D 833E[7834]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33590 00002D92 7521                    	jne	short got_correct_mediad
 33591 00002D94 833E[8834]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33592 00002D99 751A                    	jne	short got_correct_mediad
 33593                                  
 33594 00002D9B B3FC                    	mov	bl,0FCh
 33595 00002D9D EB16                    	jmp	short got_correct_mediad
 33596                                  
 33597                                  only_one_head:
 33598                                  
 33599                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 33600                                  
 33601 00002D9F 803E[7534]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 33602 00002DA4 740B                    	je	short got_one_secperclus_drive
 33603                                  
 33604                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 33605                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 33606                                  ;	  besides 8 will be considered 0fch
 33607                                  
 33608 00002DA6 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 33609 00002DA8 833E[8834]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33610                                  	; 12/12/2022
 33611 00002DAD 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 33612                                  
 33613 00002DAF B3FE                    	mov	bl,0FEh			; 160K mediaid
 33614                                  
 33615                                  ;	we've either got a one sided drive, or a 1.44M drive
 33616                                  ;	  either case we'll use 1 sector per cluster instead of 2
 33617                                  
 33618                                  got_one_secperclus_drive:
 33619                                  	; 04/01/2023
 33620                                  	; ax = 2
 33621 00002DB1 48                      	dec	ax  ; ax = 1
 33622 00002DB2 A2[7D34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 33623                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 33624                                  
 33625                                  got_correct_mediad:
 33626 00002DB5 881E[8534]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 33627                                  
 33628                                  ;	 Calculate the correct number of Total Sectors on medium
 33629                                  
 33630 00002DB9 A1[7834]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 33631 00002DBC F726[8A34]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 33632 00002DC0 F726[8834]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33633 00002DC4 A3[8334]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 33634 00002DC7 F8                      	clc				; we currently return no errors
 33635                                  
 33636 00002DC8 C3                      	retn
 33637                                  
 33638                                  ;	M047 -- end rewritten routine
 33639                                  
 33640                                  ;----------------------------------------------------------------------------
 33641                                  ;
 33642                                  ; procedure : organize
 33643                                  ;
 33644                                  ;----------------------------------------------------------------------------
 33645                                  
 33646                                  ; 09/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 33647                                  %if 1
 33648                                  end_commd_line:
 33649 00002DC9 AA                      	stosb				; store line feed char in buffer for the linecount.
 33650                                  	;mov	byte [cs:com_level],0	; reset the command level.
 33651                                  	; 03/01/2023
 33652                                  	; ds = cs
 33653                                  	;mov	byte [com_level],0
 33654                                  	;jmp	short org1
 33655                                  	; 09/09/2023
 33656 00002DCA EB11                    	jmp	short org0
 33657                                  nochar1:
 33658 00002DCC F9                      	stc
 33659 00002DCD C3                      	retn
 33660                                  %endif
 33661                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33662                                  	; (SYSINIT:3234h)
 33663                                  
 33664                                  organize:
 33665                                  	; 04/01/2023
 33666                                  	; ds = cs
 33667 00002DCE 8B0E[D203]              	mov	cx,[count]
 33668                                  	;mov	cx,[cs:count]
 33669 00002DD2 E3F8                    	jcxz	nochar1
 33670                                  
 33671                                  ;ifndef	MULTI_CONFIG
 33672                                  ;
 33673                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 33674                                  ;;   because we the case of values in SET commands preserved
 33675                                  ;
 33676                                  ;	call	mapcase
 33677                                  ;endif
 33678                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33679 00002DD4 E82502                  	call	mapcase
 33680                                  
 33681 00002DD7 31F6                    	xor	si,si
 33682 00002DD9 89F7                    	mov	di,si
 33683 00002DDB 31C0                    	xor	ax,ax
 33684                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 33685                                  	;;mov	byte [cs:com_level],0
 33686                                  	; 12/12/2022
 33687                                  	;mov	[cs:com_level],al ; 0
 33688                                  	; 04/01/2023
 33689                                  	; ds = cs
 33690                                  	; 09/09/2023
 33691                                  	;mov	[com_level],al ; 0
 33692                                  org0:
 33693 00002DDD C606[CC03]00            	mov	byte [com_level],0 ; 09/09/2023
 33694                                  org1:
 33695 00002DE2 E8A501                  	call	skip_comment
 33696 00002DE5 74E2                    	jz	short end_commd_line	; found a comment string and skipped.
 33697 00002DE7 E88A01                  	call	get2			; not a comment string. then get a char.
 33698 00002DEA 3C0A                    	cmp	al,lf ; 0Ah
 33699 00002DEC 74DB                    	je	short end_commd_line	; starts with a blank line.
 33700 00002DEE 3C20                    	cmp	al,' ' ; 20h
 33701 00002DF0 76F0                    	jbe	short org1		; skip leading control characters
 33702                                  	; 09/09/2023
 33703                                  	;jmp	short findit
 33704                                  
 33705                                  ; 09/09/2023
 33706                                  %if 0
 33707                                  end_commd_line:
 33708                                  	stosb				; store line feed char in buffer for the linecount.
 33709                                  	;mov	byte [cs:com_level],0	; reset the command level.
 33710                                  	; 03/01/2023
 33711                                  	; ds = cs
 33712                                  	mov	byte [com_level],0
 33713                                  	jmp	short org1
 33714                                  
 33715                                  nochar1:
 33716                                  	stc
 33717                                  	retn
 33718                                  %endif
 33719                                  
 33720                                  findit:
 33721 00002DF2 51                      	push	cx
 33722 00002DF3 56                      	push	si
 33723 00002DF4 57                      	push	di
 33724 00002DF5 89F5                    	mov	bp,si
 33725 00002DF7 4D                      	dec	bp
 33726 00002DF8 BE[E333]                        mov     si,comtab		; prepare to search command table
 33727 00002DFB B500                    	mov	ch,0
 33728                                  findcom:
 33729 00002DFD 89EF                    	mov	di,bp
 33730 00002DFF 8A0C                    	mov	cl,[si]
 33731 00002E01 46                      	inc	si
 33732 00002E02 E324                    	jcxz	nocom
 33733                                  
 33734                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33735                                  
 33736                                  ;ifdef	MULTI_CONFIG
 33737                                  ;
 33738                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 33739                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 33740                                  ;;   anything in particular)
 33741                                  ;
 33742                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 33743                                  ;       je	short semicolon
 33744                                  ;loopcom:
 33745                                  ;       mov     al,[es:di]
 33746                                  ;       inc     di
 33747                                  ;       and     al,~20h ; 0DFh		; force upper case
 33748                                  ;       inc     si                      ; compare to byte @es:di
 33749                                  ;       cmp     al,[si-1]
 33750                                  ;       loope   loopcom
 33751                                  ;;else
 33752                                  ;;	repe	cmpsb
 33753                                  ;endif
 33754                                  	; 02/11/2022
 33755 00002E04 F3A6                    	repe	cmpsb
 33756                                  
 33757 00002E06 9F                      	lahf
 33758 00002E07 01CE                            add     si,cx                   ; bump to next position without affecting flags
 33759 00002E09 9E                      	sahf
 33760 00002E0A AC                              lodsb                           ; get indicator letter
 33761 00002E0B 75F0                    	jnz	short findcom
 33762 00002E0D 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 33763 00002E11 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 33764 00002E13 26803D0A                	cmp	byte [es:di],lf
 33765 00002E17 740A                    	je	short gotcom0
 33766                                  
 33767                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33768                                  ;
 33769                                  ;;ifdef	MULTI_CONFIG
 33770                                  ;
 33771                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 33772                                  ;
 33773                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 33774                                  ;       je	short gotcom0
 33775                                  ;;endif
 33776                                  ;	push	ax
 33777                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 33778                                  ;
 33779                                  ;;ifdef	MULTI_CONFIG
 33780                                  ;
 33781                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 33782                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 33783                                  ;;   stored in the CONFIG.SYS memory image.
 33784                                  ;
 33785                                  ;       cmp     al,'?'                  ; explicit interactive command?
 33786                                  ;       jne	short no_query		; no
 33787                                  ;       pop     ax                      ; yes, so retrieve the original code
 33788                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 33789                                  ;       jmp     short gotcom0           ;
 33790                                  ;semicolon:
 33791                                  ;       mov     al,CONFIG_REM
 33792                                  ;       jmp     short gotcom0
 33793                                  ;no_query:
 33794                                  ;;endif  ;MULTI_CONFIG
 33795                                  
 33796                                  	; 02/11/2022
 33797 00002E19 50                      	push	ax
 33798 00002E1A 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 33799                                  
 33800 00002E1D E8A001                  	call	delim
 33801                                  no_delim:
 33802 00002E20 58                      	pop	ax
 33803 00002E21 75DA                    	jnz	short findcom
 33804                                  gotcom0:
 33805 00002E23 5F                      	pop	di
 33806 00002E24 5E                      	pop	si
 33807 00002E25 59                      	pop	cx
 33808 00002E26 EB0F                    	jmp	short gotcom
 33809                                  nocom:
 33810 00002E28 5F                      	pop	di
 33811 00002E29 5E                      	pop	si
 33812 00002E2A 59                      	pop	cx
 33813 00002E2B B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 33814 00002E2D AA                      	stosb				; save indicator char.
 33815                                  _skipline:
 33816 00002E2E E84301                  	call	get2
 33817 00002E31 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 33818 00002E33 75F9                            jne     short _skipline
 33819 00002E35 EB92                    	jmp	short end_commd_line	; handle next command line
 33820                                  gotcom:
 33821 00002E37 AA                              stosb                           ; save indicator char in buffer
 33822                                  
 33823                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33824                                  ;;ifdef	MULTI_CONFIG
 33825                                  ;
 33826                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 33827                                  ;;   it screws up the direct comparisons below.
 33828                                  ;
 33829                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33830                                  ;;endif
 33831                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 33832                                  ;
 33833                                  ;;ifdef	MULTI_CONFIG
 33834                                  ;
 33835                                  ;;   There is no whitespace/delimiter between the "begin block" character
 33836                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 33837                                  ;;   skipping code
 33838                                  ;
 33839                                  ;       cmp     al,CONFIG_BEGIN
 33840                                  ;       je	short org31
 33841                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 33842                                  ;       je      short no_mapcase
 33843                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 33844                                  ;       je      short no_mapcase
 33845                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 33846                                  ;       je      short no_mapcase
 33847                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 33848                                  ;       je      short no_mapcase
 33849                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 33850                                  ;no_mapcase:
 33851                                  ;;endif
 33852                                  
 33853                                  	; 02/11/2022
 33854                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 33855                                  	; 04/01/2023
 33856                                  	; ds = cs
 33857 00002E38 A2[D003]                	mov	[cmd_indicator],al
 33858                                  org2:	
 33859 00002E3B E83601                  	call    get2                    ; skip the command name until delimiter
 33860 00002E3E 3C0A                            cmp     al,lf
 33861 00002E40 740B                    	je	short org21
 33862 00002E42 3C0D                    	cmp	al,cr
 33863 00002E44 7407                    	je	short org21
 33864                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33865                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 33866                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 33867                                  
 33868 00002E46 E87701                  	call	delim
 33869 00002E49 75F0                            jnz	short org2
 33870 00002E4B EB02                    	jmp	short org3
 33871                                  org21:					;if cr or lf then
 33872 00002E4D 4E                      	dec	si			; undo si, cx register
 33873 00002E4E 41                      	inc	cx			;  and continue
 33874                                  org3:	
 33875                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 33876                                  	;je	short get_cmt_token
 33877                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33878                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33879                                  	;;je	short org_file
 33880                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 33881                                  	;je	short org_file
 33882                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33883                                          ;;je	short org_file
 33884                                  	;; 02/11/2022
 33885                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33886                                  	;je	short org_file
 33887                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 33888                                  	;je	short org_file
 33889                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 33890                                  	;je	short org_switch
 33891                                  
 33892                                  	; 04/01/2023
 33893                                  	; ds = cs
 33894                                  
 33895 00002E4F 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 33896 00002E54 7456                    	je	short get_cmt_token
 33897                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33898                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33899                                  	;je	short org_file
 33900 00002E56 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 33901 00002E5B 7429                    	je	short org_file
 33902                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33903                                          ;je	short org_file
 33904                                  	; 02/11/2022
 33905 00002E5D 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33906 00002E62 7422                    	je	short org_file
 33907 00002E64 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 33908 00002E69 741B                    	je	short org_file
 33909 00002E6B 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 33910 00002E70 7403                    	je	short org_switch
 33911                                  	
 33912                                  org31:
 33913 00002E72 E99500                  	jmp	org4
 33914                                  
 33915                                  org_switch:
 33916 00002E75 E81201                  	call	skip_comment
 33917 00002E78 7472                    	jz	short end_commd_line_brdg
 33918                                  
 33919 00002E7A E8F700                  	call	get2
 33920 00002E7D E84801                  	call	org_delim
 33921 00002E80 74F3                    	jz	short org_switch
 33922                                  
 33923 00002E82 AA                      	stosb
 33924 00002E83 E99300                  	jmp	org5
 33925                                  
 33926                                  org_file:			; get the filename and put 0 at end
 33927 00002E86 E80101                  	call	skip_comment
 33928 00002E89 7464                    	jz	short org_put_zero
 33929                                  
 33930 00002E8B E8E600                  	call	get2		; not a comment
 33931 00002E8E E82F01                  	call	delim
 33932 00002E91 74F3                    	jz	short org_file	; skip the possible delimiters
 33933                                  
 33934 00002E93 AA                      	stosb			; copy the first non delim char found in buffer
 33935                                  
 33936                                  org_copy_file:
 33937 00002E94 E8F300                  	call	skip_comment	; comment char in the filename?
 33938 00002E97 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 33939                                  
 33940 00002E99 E8D800                  	call	get2
 33941 00002E9C 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 33942 00002E9E 7457                    	je	short end_file_slash ; this will be the special case.
 33943                                  
 33944 00002EA0 AA                      	stosb			; save the char. in buffer
 33945 00002EA1 E81C01                  	call	delim
 33946 00002EA4 7459                    	jz	short end_copy_file
 33947                                  
 33948 00002EA6 3C20                    	cmp	al, ' '
 33949 00002EA8 77EA                    	ja	short org_copy_file ; keep copying
 33950 00002EAA EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 33951                                  
 33952                                  get_cmt_token:			; get the token. just max. 2 char.
 33953 00002EAC E8C500                  	call	get2
 33954 00002EAF 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 33955 00002EB1 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 33956 00002EB3 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 33957 00002EB5 74F5                    	je	short get_cmt_token ;  character.)
 33958 00002EB7 3C3D                    	cmp	al,'='		; = is special in this case.
 33959 00002EB9 74F1                    	je	short get_cmt_token
 33960 00002EBB 3C0D                    	cmp	al,cr
 33961 00002EBD 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 33962 00002EBF 3C0A                    	cmp	al,lf
 33963 00002EC1 7422                    	je	short get_cmt_end
 33964                                  
 33965                                  	; 04/01/2023
 33966                                  	; ds = cs
 33967                                  	;mov	[cs:cmmt1],al	; store it
 33968                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 33969 00002EC3 A2[CE03]                	mov	[cmmt1],al	; store it
 33970 00002EC6 C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 33971 00002ECB E8A600                  	call	get2
 33972 00002ECE 3C20                    	cmp	al,' ' ; 20h
 33973 00002ED0 7413                    	je	short get_cmt_end
 33974 00002ED2 3C09                    	cmp	al,tab ; 9
 33975 00002ED4 740F                    	je	short get_cmt_end
 33976 00002ED6 3C0D                    	cmp	al,cr  ; 0Dh
 33977 00002ED8 740B                    	je	short get_cmt_end
 33978 00002EDA 3C0A                    	cmp	al,lf  ; 0Ah
 33979 00002EDC 740E                    	je	short end_commd_line_brdg
 33980                                  
 33981                                  	;mov	[cs:cmmt2],al
 33982                                  	;inc	byte [cs:cmmt]
 33983                                  	; 04/01/2023
 33984 00002EDE A2[CF03]                	mov	[cmmt2],al
 33985 00002EE1 FE06[CD03]              	inc	byte [cmmt]
 33986                                  
 33987                                  get_cmt_end:
 33988 00002EE5 E88C00                  	call	get2
 33989 00002EE8 3C0A                    	cmp	al,lf
 33990 00002EEA 75F9                    	jne	short get_cmt_end	; skip it.
 33991                                  end_commd_line_brdg: 
 33992 00002EEC E9DAFE                  	jmp	end_commd_line		; else jmp to end_commd_line
 33993                                  
 33994                                  org_put_zero:				; make the filename in front of
 33995 00002EEF 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 33996 00002EF3 47                      	inc	di
 33997 00002EF4 E9D2FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 33998                                  
 33999                                  end_file_slash: 			; al = "/" option char.
 34000 00002EF7 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 34001 00002EFB 47                      	inc	di			; and
 34002 00002EFC AA                      	stosb				; store "/" after that.
 34003 00002EFD EB1A                    	jmp	short org5		; continue with the rest of the line
 34004                                  
 34005                                  end_copy_file:
 34006 00002EFF 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 34007 00002F04 3C0A                    	cmp	al,lf
 34008 00002F06 74E4                    	je	short end_commd_line_brdg
 34009 00002F08 EB0F                    	jmp	short org5
 34010                                  
 34011                                  org4:					; org4 skips all delimiters after the command name except for '/'
 34012 00002F0A E87D00                  	call	skip_comment
 34013 00002F0D 74DD                    	jz	short end_commd_line_brdg
 34014                                  
 34015 00002F0F E86200                  	call	get2
 34016 00002F12 E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 34017 00002F15 74F3                    	jz	short org4
 34018 00002F17 EB08                    	jmp	short org51
 34019                                  
 34020                                  org5:					; rest of the line
 34021 00002F19 E86E00                  	call	skip_comment		; comment?
 34022 00002F1C 74CE                    	jz	short end_commd_line_brdg
 34023 00002F1E E85300                  	call	get2			; not a comment.
 34024                                  
 34025                                  org51:
 34026 00002F21 AA                      	stosb				; copy the character
 34027 00002F22 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 34028 00002F24 743A                    	je	short at_quote
 34029 00002F26 3C20                    	cmp	al,' '  ; 20h
 34030 00002F28 77EF                    	ja	short org5
 34031                                  					; M051 - Start
 34032                                  	; 04/01/2023
 34033                                  	; ds = cs
 34034 00002F2A 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 34035                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 34036 00002F2F 7514                    	jne	short not_dh		; N: 
 34037 00002F31 3C0A                    	cmp	al,lf			; Q: is this line feed
 34038 00002F33 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 34039 00002F35 3C0D                    	cmp	al,cr			; Q: is this a cr
 34040 00002F37 75E0                    	jne	short org5		; N: 
 34041 00002F39 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 34042 00002F3E AA                      	stosb				; put cr after blank
 34043 00002F3F FE06[122C]              	inc	byte [insert_blank]
 34044                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 34045                                  					; inserted
 34046 00002F43 EBD4                    	jmp	short org5
 34047                                  not_dh:					; M051 - End
 34048                                  
 34049 00002F45 3C0A                    	cmp	al,lf			; line feed?
 34050 00002F47 740F                    	je	short org1_brdg		; handles the next command line.
 34051 00002F49 EBCE                    	jmp	short org5		; handles next char in this line.
 34052                                  
 34053                                  org_dhlf:				; M051 - Start
 34054                                  	; 04/01/2023
 34055                                  	; ds = cs
 34056 00002F4B 803E[122C]01            	cmp	byte [insert_blank],1
 34057                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 34058 00002F50 7406                    	je	short org1_brdg		; Y:
 34059 00002F52 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 34060 00002F57 AA                      	stosb				; put lf after blank
 34061                                  					; M051 - End
 34062                                  org1_brdg:
 34063 00002F58 C606[122C]00            	mov	byte [insert_blank],0 
 34064                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 34065                                  					; M051: devicehigh
 34066 00002F5D E982FE                  	jmp	org1
 34067                                  
 34068                                  at_quote:
 34069 00002F60 803E[CC03]00            	cmp	byte [com_level],0
 34070                                  	;cmp	byte [cs:com_level],0
 34071 00002F65 7407                    	je	short up_level
 34072                                  	;mov	byte [cs:com_level],0	; reset it.
 34073 00002F67 C606[CC03]00            	mov	byte [com_level],0
 34074 00002F6C EBAB                    	jmp	short org5
 34075                                  
 34076                                  up_level:
 34077                                  	;inc	byte [cs:com_level]	; set it.
 34078 00002F6E FE06[CC03]              	inc	byte [com_level]
 34079 00002F72 EBA5                    	jmp	short org5
 34080                                  
 34081                                  ;----------------------------------------------------------------------------
 34082                                  ;
 34083                                  ; procedure : get2
 34084                                  ;
 34085                                  ;----------------------------------------------------------------------------
 34086                                  
 34087                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34088                                  	; (SYSINIT:33FAh)
 34089                                  	; 04/01/2023
 34090                                  get2:
 34091 00002F74 E304                    	jcxz	noget
 34092                                  	;
 34093                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34094                                  	;;lods	byte ptr es:[si]
 34095                                  	; 12/12/2022
 34096 00002F76 26                      	es	
 34097 00002F77 AC                      	lodsb
 34098                                  	;mov	al, [es:si]
 34099                                  	;inc	si
 34100                                  	;
 34101 00002F78 49                      	dec	cx
 34102 00002F79 C3                      	retn
 34103                                  noget:
 34104 00002F7A 59                      	pop	cx
 34105                                  	; 04/01/2023
 34106                                  	; ds = cs
 34107                                  	;mov	[cs:count],di ; 13/05/2019
 34108                                  	;mov	[cs:org_count],di
 34109 00002F7B 893E[D203]              	mov	[count],di
 34110 00002F7F 893E[D403]              	mov	[org_count],di
 34111 00002F83 31F6                    	xor	si,si
 34112                                  	;mov	[cs:chrptr],si
 34113 00002F85 8936[D603]              	mov	[chrptr],si
 34114                                  
 34115                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34116                                  ;;ifndef MULTI_CONFIG
 34117                                  ;;	retn
 34118                                  ;;else
 34119                                  ;
 34120                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 34121                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 34122                                  ;;   and the new boot menu stuff...
 34123                                  ;
 34124                                  ;	mov     cx,di
 34125                                  ;	jmp     menu_check
 34126                                  ;;endif
 34127                                  
 34128                                  	; 02/11/2022
 34129 00002F89 C3                      	retn
 34130                                  
 34131                                  ;----------------------------------------------------------------------------
 34132                                  ;
 34133                                  ; procedure : skip_comment
 34134                                  ;
 34135                                  ;skip the commented string until lf, if current es:si-> a comment string.
 34136                                  ;in) es:si-> string
 34137                                  ;	 cx -> length.
 34138                                  ;out) zero flag not set if not found a comment string.
 34139                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 34140                                  ;	  the line feed character at this moment when return.
 34141                                  ;	  ax register destroyed.
 34142                                  ;	  if found, si, cx register adjusted accordingly.
 34143                                  ;
 34144                                  ;----------------------------------------------------------------------------
 34145                                  
 34146                                  	; 04/01/2023 - Retro DOS v4.0
 34147                                  
 34148                                  skip_comment:
 34149 00002F8A E3EE                    	jcxz	noget		; get out of the organize routine.
 34150                                  
 34151                                  	; 04/01/2023
 34152                                  	; ds = cs	
 34153                                  
 34154 00002F8C 803E[CC03]00            	cmp	byte [com_level],0
 34155                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 34156 00002F91 752C                    	jne	short no_commt	 ; (not inside quotations)
 34157                                  
 34158 00002F93 803E[CD03]01            	cmp	byte [cmmt],1
 34159                                  	;cmp	byte [cs:cmmt],1
 34160 00002F98 7225                    	jb	short no_commt
 34161                                  
 34162 00002F9A 268A04                  	mov	al,[es:si]
 34163                                  	
 34164 00002F9D 3806[CE03]              	cmp	[cmmt1],al
 34165                                  	;cmp	[cs:cmmt1],al
 34166 00002FA1 751C                    	jne	short no_commt
 34167                                  
 34168 00002FA3 803E[CD03]02            	cmp	byte [cmmt],2
 34169                                  	;cmp	byte [cs:cmmt],2
 34170 00002FA8 750A                    	jne	short skip_cmmt
 34171                                  
 34172 00002FAA 268A4401                	mov	al,[es:si+1]
 34173                                  	
 34174 00002FAE 3806[CF03]              	cmp	[cmmt2],al
 34175                                  	;cmp	[cs:cmmt2],al
 34176 00002FB2 750B                    	jne	short no_commt
 34177                                  skip_cmmt:
 34178 00002FB4 E3C4                    	jcxz	noget		; get out of organize routine.
 34179 00002FB6 268A04                  	mov	al,[es:si]
 34180 00002FB9 46                      	inc	si
 34181 00002FBA 49                      	dec	cx
 34182 00002FBB 3C0A                    	cmp	al,lf		; line feed?
 34183 00002FBD 75F5                    	jne	short skip_cmmt
 34184                                  no_commt:
 34185 00002FBF C3                      	retn
 34186                                  
 34187                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34188                                  %if 0
 34189                                  
 34190                                  ;ifdef	MULTI_CONFIG
 34191                                  
 34192                                  ;----------------------------------------------------------------------------
 34193                                  ;
 34194                                  ;   kbd_read: wait for keystroke
 34195                                  ;
 34196                                  ;   INPUT
 34197                                  ;       DS == CS == sysinitseg
 34198                                  ;
 34199                                  ;   OUTPUT
 34200                                  ;       Carry SET to clean boot, CLEAR otherwise
 34201                                  ;
 34202                                  ;   OTHER REGS USED
 34203                                  ;       All
 34204                                  ;
 34205                                  ;   HISTORY
 34206                                  ;       Created 16-Nov-1992 by JeffPar
 34207                                  ;
 34208                                  ;----------------------------------------------------------------------------
 34209                                  
 34210                                  kbd_read:
 34211                                          test    byte [bDisableUI],2
 34212                                          jnz     short kbd_nodelay
 34213                                  
 34214                                          push    ds              ; the bios timer tick count is incremented
 34215                                          sub     ax,ax           ; 18.2 times per second;
 34216                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 34217                                  	;mov	dx,[046Ch]	; get initial value
 34218                                  kbd_loop:
 34219                                          mov     ah,1            ;
 34220                                          int     16h             ; peek the keyboard
 34221                                          jnz	short kbd_loopdone ; something's there, get out
 34222                                          mov     ah,2            ; peek the shift states
 34223                                          int     16h             ;
 34224                                          test    al,03h          ; either right or left shift key bits set?
 34225                                          jnz	short kbd_loopdone ; yes
 34226                                          mov     ax,[046Ch]	;
 34227                                  	;sub	ax,dx           ; get difference
 34228                                  	; 15/04/2019 - Retro DOS v4.0
 34229                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 34230                                  
 34231                                  	cmp     al,37           ; reached limit?
 34232                                          jb	short kbd_loop	; not yet
 34233                                  kbd_loopdone:
 34234                                          pop     ds              ; delay complete!
 34235                                  kbd_nodelay:
 34236                                          sub     bx,bx           ; assume clean boot
 34237                                          mov     ah,2            ; peek the shift states
 34238                                          int     16h             ;
 34239                                          test    al,03h          ; either right or left shift key bits set?
 34240                                          jz      short kbd_notshift ; no
 34241                                          inc     bx              ; yes
 34242                                          inc     bx
 34243                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 34244                                  	or	byte [bQueryOpt],4
 34245                                  kbd_notshift:                   ;
 34246                                          mov     ah,1            ; peek the keyboard
 34247                                          int     16h             ;
 34248                                          jz	short kbd_test	; no key present
 34249                                          or      al,al           ; is it a function key?
 34250                                          jnz	short kbd_test	; no
 34251                                  
 34252                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 34253                                          cmp     ah,62h          ; CTRL F5
 34254                                          je	short kbd_cfg_bypass
 34255                                  	
 34256                                          cmp     ah,3Fh          ; F5 function key?
 34257                                          jne	short kbd_notf5	; no
 34258                                  kbd_cfg_bypass:
 34259                                          mov     dx,_$CleanMsg
 34260                                          call    print
 34261                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 34262                                  	or	byte [bQueryOpt],4           ;
 34263                                          jmp     short kbd_eat   ; yes, clean boot selected
 34264                                  kbd_notf5:
 34265                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 34266                                          cmp     ah,65h          ; CTRL F8
 34267                                          je	short kbd_cfg_confirm
 34268                                  
 34269                                          cmp     ah,42h          ; F8 function key?
 34270                                          jne	short kbd_exit	; no
 34271                                  kbd_cfg_confirm:
 34272                                          mov     dx,_$InterMsg
 34273                                          call    print           ;
 34274                                          mov     bl,1            ; yes, interactive-boot option enabled
 34275                                          mov     [bQueryOpt],bl  ; change default setting
 34276                                  kbd_eat:                        ;
 34277                                          mov     ah,0            ;
 34278                                          int     16h             ; eat the key we assumed was a signal
 34279                                          mov	byte [secElapsed],-1
 34280                                          or      bx,bx           ;
 34281                                          jz	short kbd_clean	;
 34282                                  kbd_test:                       ;
 34283                                          cmp     bl,2            ;
 34284                                          jb	short kbd_exit	;
 34285                                  kbd_clean:                      ;
 34286                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 34287                                          stc                     ; set carry to indicate abort
 34288                                          retn			;
 34289                                  kbd_exit:                       ;
 34290                                          clc                     ; clear carry to indicate success
 34291                                          retn			;
 34292                                  
 34293                                  ;----------------------------------------------------------------------------
 34294                                  ;
 34295                                  ;   set_numlock: set numlock LED
 34296                                  ;
 34297                                  ;   INPUT
 34298                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 34299                                  ;
 34300                                  ;   OUTPUT
 34301                                  ;       None
 34302                                  ;
 34303                                  ;   OTHER REGS USED
 34304                                  ;       None
 34305                                  ;
 34306                                  ;   HISTORY
 34307                                  ;       Created 16-Nov-1992 by JeffPar
 34308                                  ;
 34309                                  ;----------------------------------------------------------------------------
 34310                                  
 34311                                  set_numlock:
 34312                                          push    ax
 34313                                          push    ds
 34314                                          sub     ax,ax
 34315                                          mov     ds,ax
 34316                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 34317                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 34318                                          jne	short not_off	; no
 34319                                          and     byte [0417h],~20h ; 0DFh
 34320                                          jmp     short set_done
 34321                                  not_off:
 34322                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 34323                                          stc
 34324                                          jne	short set_done	; no
 34325                                          or      byte [0417h],20h
 34326                                  set_done:
 34327                                          pop     ds
 34328                                          pop     ax
 34329                                          retn
 34330                                  
 34331                                  ; 16/04/2019 - Retro DOS v4.0
 34332                                  
 34333                                  ;----------------------------------------------------------------------------
 34334                                  ;
 34335                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 34336                                  ;
 34337                                  ;   INPUT
 34338                                  ;       CX == "organized" config.sys memory image length
 34339                                  ;    ES:SI -> "organized" config.sys memory image
 34340                                  ;       DS == CS == sysinitseg
 34341                                  ;
 34342                                  ;   OUTPUT
 34343                                  ;       Same as above;  the idea is that menu_check simply transforms
 34344                                  ;       a block-structured config.sys image into a conventional image,
 34345                                  ;       based on the user's block selection and any other boot-time options
 34346                                  ;       the user may have employed...
 34347                                  ;
 34348                                  ;   OTHER REGS USED
 34349                                  ;       All
 34350                                  ;
 34351                                  ;   NOTES
 34352                                  ;       [count] and [org_count] are set to the new config.sys image length
 34353                                  ;
 34354                                  ;   HISTORY
 34355                                  ;       Created 16-Mar-1992 by JeffPar
 34356                                  ;
 34357                                  ;----------------------------------------------------------------------------
 34358                                  
 34359                                  menu_check:
 34360                                  
 34361                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 34362                                  ;   disable clean/interactive boot options
 34363                                  
 34364                                          push    cx              ;
 34365                                          push    si              ;
 34366                                          sub     bx,bx           ; remains ZERO until first block
 34367                                  swchk_loop:                     ;
 34368                                          call    get_char        ; get first char of current line
 34369                                          jc	short swchk_end	; hit eof
 34370                                          cmp     al,CONFIG_BEGIN ;
 34371                                          jne	short swchk_next1 ;
 34372                                          inc     bx              ; remember that we've seen a block
 34373                                          jmp     short swchk_nextline
 34374                                  swchk_next1:                    ;
 34375                                          cmp     al,CONFIG_NUMLOCK
 34376                                          jne	short swchk_next2 ;
 34377                                          or      bx,bx           ; only do NUMLOCK commands that exist
 34378                                          jnz	short swchk_nextline ; before the first block
 34379                                          call    set_numlock     ; REM it out so we don't act on it later, too
 34380                                          mov     byte [es:si-1],CONFIG_REM
 34381                                          jmp     short swchk_nextline
 34382                                  swchk_next2:                    ;
 34383                                          cmp     al,CONFIG_SWITCHES
 34384                                          jne	short swchk_nextline ; this line ain't it
 34385                                  swchk_scan:                     ;
 34386                                          call    get_char        ; look for /N or /F
 34387                                  swchk_scan1:                    ;
 34388                                          cmp     al,LF           ; end of line?
 34389                                          je	short swchk_nextline ; yes
 34390                                          cmp     al,'/'          ; switch-char?
 34391                                          jne	short swchk_scan ; no
 34392                                          call    get_char        ;
 34393                                          and     al,~20h ; 0DFh	; convert to upper case
 34394                                          cmp     al,[swit_n+1]
 34395                                          jne	short swchk_scan2 ; no
 34396                                          or      byte [bDisableUI],1
 34397                                          jmp	short swchk_scan ; continue looking for switches of interest
 34398                                  swchk_scan2:                    ;
 34399                                          cmp     al,[swit_f+1]
 34400                                          jne	short swchk_scan1 ; no
 34401                                          or      byte [bDisableUI],2
 34402                                          jmp     short swchk_scan ; continue looking for switches of interest
 34403                                  swchk_nextline:                 ;
 34404                                          call    skip_opt_line   ;
 34405                                          jmp     short swchk_loop ;
 34406                                  swchk_end:                      ;
 34407                                          pop     si              ;
 34408                                          pop     cx              ;
 34409                                  
 34410                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 34411                                  ;   the DisableUI flag is still clear
 34412                                  
 34413                                          test    byte [bDisableUI],1
 34414                                          jnz	short menu_search
 34415                                  ;
 34416                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 34417                                  ;   there is anything at all in the keyboard buffer
 34418                                  ;
 34419                                          call    kbd_read
 34420                                          jnc	short menu_search
 34421                                          jmp	menu_abort
 34422                                  
 34423                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 34424                                  
 34425                                  menu_search:
 34426                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 34427                                          mov     di,szMenu	;
 34428                                          call    find_block      ; find the MENU block
 34429                                          jnc	short menu_found ;
 34430                                          mov     byte [szBoot],0
 34431                                          jmp	no_selection ; not found
 34432                                  
 34433                                  ;   Process the requested menu color(s)
 34434                                  
 34435                                  menu_color:
 34436                                          push    cx              ;
 34437                                          push    dx              ;
 34438                                          mov     dx,0007h        ; default color setting
 34439                                          call    get_number	; get first number
 34440                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 34441                                          mov     ch,bl           ; save it in CH
 34442                                          and     dl,0F0h         ;
 34443                                          or      dl,bl           ;
 34444                                          call    delim           ; did we hit a delimiter
 34445                                          jne	short check_color ; no, all done
 34446                                          call    get_number	; get next number
 34447                                          and     bl,0Fh		; second # is background color (for high nibble)
 34448                                          mov     dh,bl           ; save it in DH
 34449                                          and     dl,0Fh		;
 34450                                          mov     cl,4            ;
 34451                                          shl     bl,cl           ;
 34452                                          or      dl,bl           ;
 34453                                  check_color:                    ;
 34454                                          cmp     ch,dh           ; are foreground/background the same?
 34455                                          jne	short set_color	; no
 34456                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 34457                                  set_color:
 34458                                          mov     [bMenuColor],dl ;
 34459                                          pop     dx              ;
 34460                                          pop     cx              ;
 34461                                          jmp	menu_nextitem
 34462                                  
 34463                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 34464                                  ;   above is there simply to alleviate short jump problems)
 34465                                  
 34466                                  menu_found:
 34467                                          mov     byte [bDefBlock],1
 34468                                          mov     word [offDefBlock],0
 34469                                          mov     byte [secTimeOut],-1
 34470                                          and     byte [bQueryOpt],~2 ; 0FDh
 34471                                  
 34472                                          call    skip_opt_line   ; skip to next line
 34473                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 34474                                  
 34475                                  ;   Process the menu block now
 34476                                  
 34477                                  menu_process:
 34478                                          call    get_char        ; get first char of current line
 34479                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 34480                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34481                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 34482                                          je	short to_menu_getdefault
 34483                                          cmp     al,CONFIG_SUBMENU
 34484                                          je	short menu_item	; go process sub-menu
 34485                                          cmp     al,CONFIG_MENUITEM
 34486                                          je	short menu_item	; go process menu item
 34487                                          cmp     al,CONFIG_MENUDEFAULT
 34488                                          je	short menu_default ; go process menu default
 34489                                          cmp     al,CONFIG_MENUCOLOR
 34490                                          je	short menu_color ; go process menu color
 34491                                          cmp     al,CONFIG_NUMLOCK
 34492                                          je	short menu_numlock ;
 34493                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 34494                                          je	short menu_nextitem ;
 34495                                          call    any_delim       ; allow blank lines and such
 34496                                          je	short menu_nextitem ;
 34497                                          stc                     ;
 34498                                          call    print_error     ; non-MENU command!
 34499                                          jmp     short menu_nextitem
 34500                                  menu_numlock:
 34501                                          call    set_numlock
 34502                                          jmp     short menu_nextitem
 34503                                  to_menu_getdefault:
 34504                                          jmp     short menu_getdefault
 34505                                  
 34506                                  ;   Save the offset of the default block name, we'll need it later
 34507                                  
 34508                                  menu_default:
 34509                                          mov     [offDefBlock],si; save address of default block name
 34510                                          cmp     byte [secElapsed],0
 34511                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 34512                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 34513                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 34514                                          call    skip_delim      ; something is typed
 34515                                          jc	short menu_nextitem ;
 34516                                          mov     si,bx           ;
 34517                                          call    get_number      ; get number (of seconds for timeout)
 34518                                          cmp     bl,90           ; limit it to a reasonable number
 34519                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 34520                                          mov     bl,90           ;  display function can handle)
 34521                                  timeout_ok:                     ;
 34522                                          mov     [secTimeOut],bl ;
 34523                                  timeout_skip:
 34524                                          jmp     short menu_nextitem
 34525                                  
 34526                                  ;   Verify that this is a valid menu item by searching for the named block
 34527                                  
 34528                                  menu_item:
 34529                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 34530                                          jae	short menu_nextitem ;
 34531                                          mov     di,si           ; DS:DI -> block name to search for
 34532                                          call    srch_block      ;
 34533                                          je	short menu_itemfound ;
 34534                                          stc                     ;
 34535                                          call    print_error     ; print error and pause
 34536                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 34537                                  
 34538                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 34539                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 34540                                  ;   and CX are unmodified
 34541                                  
 34542                                  menu_itemfound:
 34543                                          inc     dx              ; otherwise, increment total block count
 34544                                          mov     bx,dx           ; and use it to index the arrays of offsets
 34545                                          mov	[abBlockType+bx],al
 34546                                          add     bx,bx           ; of recorded block names and descriptions
 34547                                  
 34548                                  ;   There should be a description immediately following the block name on
 34549                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 34550                                  ;   description...
 34551                                  
 34552                                          mov     [aoffBlockName+bx],si
 34553                                          mov     [aoffBlockDesc+bx],si
 34554                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 34555                                          call    skip_token      ;
 34556                                          jc	short menu_nextitem ; hit eol/eof
 34557                                          call    skip_delim      ;
 34558                                          jc	short menu_nextitem ; hit eol/eof
 34559                                          xchg    bx,di           ;
 34560                                          mov     [aoffBlockDesc+bx],di
 34561                                  
 34562                                  menu_nextitem:
 34563                                          call    skip_opt_line   ;
 34564                                          jmp     menu_process    ; go back for more lines
 34565                                  
 34566                                  ;   Display menu items now, after determining which one is default
 34567                                  
 34568                                  menu_getdefault:
 34569                                          or      dl,dl           ; where there any valid blocks at all?
 34570                                          jnz	short menu_valid ; yes
 34571                                          sub     bx,bx           ; no, so force autoselect of 0
 34572                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 34573                                  menu_valid:
 34574                                          sub     bx,bx           ;
 34575                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 34576                                          mov     di,[offDefBlock];
 34577                                          or      di,di           ; does a default block exist?
 34578                                          jz	short menu_nodefault ; no
 34579                                          inc     bx              ; yes, walk name table, looking for default
 34580                                  menu_chkdefault:
 34581                                          push    bx              ;
 34582                                          add     bx,bx           ;
 34583                                          mov     si,[aoffBlockName+bx]
 34584                                          mov     cx,128          ; arbitrary maximum length of a name
 34585                                          push    ds              ;
 34586                                          push    es              ;
 34587                                          pop     ds              ;
 34588                                          call    comp_names      ; is this block the same as the default?
 34589                                          pop     ds              ;
 34590                                          pop     bx              ;
 34591                                          je	short menu_setdefault ; yes
 34592                                          inc     bx              ;
 34593                                          cmp     bl,[bMaxBlock]  ; all done searching?
 34594                                          jbe	short menu_chkdefault ; not yet
 34595                                  menu_nodefault:
 34596                                          mov     bl,1            ; if no default, force default to #1
 34597                                  menu_setdefault:
 34598                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 34599                                  
 34600                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 34601                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 34602                                  ;   supposed to skip menu display and run with the specified default block;
 34603                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 34604                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 34605                                  ;   with no timeout)
 34606                                  
 34607                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 34608                                          jne	short menu_display ; no
 34609                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 34610                                          jnz	short menu_display ; yes, so *don't* assume default after all
 34611                                          jmp     not_topmenu	;
 34612                                  
 34613                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 34614                                  
 34615                                  menu_display:
 34616                                          mov     ah,0Fh          ; get current video mode
 34617                                          int     10h             ;
 34618                                          mov     ah,00h          ; just re-select that mode
 34619                                          int     10h             ;
 34620                                          push    es              ;
 34621                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 34622                                          mov     es,ax           ; and save the current (default) video page
 34623                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 34624                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 34625                                          mov     al,[es:0062h]   ;
 34626                                          mov     [bCRTPage],al   ;
 34627                                          mov     ax,[bMenuPage]	; select new page for menu
 34628                                          int     10h             ;
 34629                                          mov     ax,0600h        ; clear entire screen
 34630                                          mov     bh,[bMenuColor] ; using this color
 34631                                          sub     cx,cx           ; upper left row/col
 34632                                          ;mov	dl,[es:CRT_Cols] 
 34633                                          mov	dl,[es:4Ah]
 34634                                  	dec     dl              ;
 34635                                          ;mov	dh,[es:CRT_Rows];
 34636                                          mov	dh,[es:84h]
 34637                                  	or      dh,dh           ; # of rows valid?
 34638                                          jnz	short menu_clear ; hopefully
 34639                                          mov     dh,[bLastRow]   ; no, use a default
 34640                                  menu_clear:
 34641                                          int     10h             ; clear the screen using the req. attribute
 34642                                          pop     es              ;
 34643                                          mov     [bLastRow],dh   ; save DH
 34644                                          mov     dx,_$MenuHeader
 34645                                          call    print           ; cursor now on row 3 (numbered from 0)
 34646                                  
 34647                                          test    byte [bDisableUI],1
 34648                                          jnz     short menu_nostatus
 34649                                          mov     bh,[bMenuPage]  ;
 34650                                          mov     dh,[bLastRow]   ; restore DH
 34651                                          mov     dl,0            ; print the status line on row DH, col 0,
 34652                                          mov     ah,02h          ; now that we can trash the cursor position
 34653                                          int     10h             ;
 34654                                          mov     dx,_$StatusLine
 34655                                          call    print           ;
 34656                                          mov     ah,3            ; get cursor position
 34657                                          int     10h             ;
 34658                                          sub     dl,2            ;
 34659                                          mov     [bLastCol],dl   ; save column where status char will go
 34660                                  
 34661                                  menu_nostatus:
 34662                                          mov     bx,1            ; now prepare to display all the menu items
 34663                                  menu_disploop:
 34664                                          call    print_item	; print item #BL
 34665                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 34666                                          cmp     bl,[bMaxBlock]  ; all done?
 34667                                          jbe	short menu_disploop ; not yet
 34668                                  
 34669                                  ;   Set cursor position to just below the menu items
 34670                                  
 34671                                          mov     dl,0            ; select column
 34672                                          mov     dh,bl           ;
 34673                                          add     dh,4            ; select row below menu
 34674                                          mov     bh,[bMenuPage]  ;
 34675                                          mov     ah,02h          ; set cursor position beneath the block list
 34676                                          int     10h             ;
 34677                                  
 34678                                          mov     dx,_$MenuPrmpt
 34679                                          call    print           ;
 34680                                          call    select_item     ; make a selection, return # in BX
 34681                                          mov     dx,crlfm	
 34682                                          call    print           ;
 34683                                          push    word [bDisableUI]
 34684                                          or      byte [bDisableUI],1
 34685                                          call    show_status     ; clear the status line now
 34686                                          pop     word [bDisableUI]
 34687                                  
 34688                                  ;   Now begins the "re-organization" process...
 34689                                  
 34690                                  menu_autoselect:
 34691                                          cmp     bx,-1           ; clean boot requested?
 34692                                          jne	short normal_boot ; no
 34693                                          call    disable_autoexec; basically, add a /D to the command.com line
 34694                                  menu_abort:
 34695                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 34696                                          jmp	menu_exit	;
 34697                                  
 34698                                  normal_boot:
 34699                                          cmp     bx,-2           ; back to top-level menu?
 34700                                          jne	short not_topmenu ; no
 34701                                          mov     cx,[count]      ; yes, start all over
 34702                                          sub     si,si           ;
 34703                                          jmp     menu_search
 34704                                  
 34705                                  not_topmenu:
 34706                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 34707                                          jne	short not_submenu
 34708                                          add     bx,bx           ;
 34709                                          mov     di,[aoffBlockName+bx]
 34710                                          call    srch_block      ; THIS CANNOT FAIL!
 34711                                          mov     si,di           ;
 34712                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 34713                                          jmp     menu_found
 34714                                  
 34715                                  not_submenu:
 34716                                          add     bx,bx           ; get BX -> name of selected block
 34717                                          mov     bx,[aoffBlockName+bx]
 34718                                  
 34719                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 34720                                  ;   the offset relative to ES of the block name to be processed (along with
 34721                                  ;   all the "common" lines of course)
 34722                                  
 34723                                  no_selection:
 34724                                          mov     [offDefBlock],bx; save selection
 34725                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 34726                                          sub     si,si           ;
 34727                                          push    ds              ;
 34728                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 34729                                          sub     di,di           ;
 34730                                  
 34731                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 34732                                  ;
 34733                                  ;   Work our way through the config.sys image again, this time copying
 34734                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 34735                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 34736                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 34737                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 34738                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 34739                                  ;
 34740                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 34741                                  ;   stack we're running on, then we should check it inside copy_block
 34742                                  
 34743                                  copyblock_loop:
 34744                                          push    bx              ; save selected block name
 34745                                          call    copy_block      ; process (named or common) block
 34746                                          pop     bx              ;
 34747                                          jc	short move_config ; hit eof
 34748                                  
 34749                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 34750                                  
 34751                                  copyblock_begin:
 34752                                          push    ax              ;
 34753                                          push    cx              ;
 34754                                          push    si              ;
 34755                                          push    di              ; always do "common" blocks
 34756                                          mov     di,szCommon
 34757                                          push    ds              ;
 34758                                          push    cs              ;
 34759                                          pop     ds              ;
 34760                                          call    comp_names      ;
 34761                                          pop     ds              ;
 34762                                          pop     di              ;
 34763                                          pop     si              ;
 34764                                          pop     cx              ;
 34765                                          pop     ax              ;
 34766                                          je	short copyblock_check
 34767                                          or      bx,bx           ; is there a block name to check?
 34768                                          jz	short copyblock_skip ; no
 34769                                          push    di              ;
 34770                                          mov     di,bx           ; check block against given block name
 34771                                          push    ds              ;
 34772                                          push    es              ;
 34773                                          pop     ds              ;
 34774                                          call    comp_names      ; is this the block we really want to do?
 34775                                          pop     ds              ;
 34776                                          pop     di              ;
 34777                                  copyblock_check:
 34778                                          jc	short move_config ; hit eof
 34779                                          jne	short copyblock_skip  ;
 34780                                          call    skip_opt_line   ;
 34781                                          jmp	short copyblock_loop 
 34782                                  
 34783                                  copyblock_skip:                 ;
 34784                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 34785                                          call    get_char        ;
 34786                                          jc	short move_config ; hit eof
 34787                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34788                                          cmp     al,CONFIG_BEGIN ;
 34789                                          je	short copyblock_begin
 34790                                          jmp     short copyblock_skip ; anything else is just skipped
 34791                                  ;
 34792                                  ;   To create as little risk to the rest of SysInit as little as possible,
 34793                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 34794                                  ;   copy the new config.sys image to "confbot"
 34795                                  ;
 34796                                  move_config:
 34797                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 34798                                          push    cx              ;
 34799                                  ;
 34800                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 34801                                  ;   since the configuration name only currently exists in the "confbot" area
 34802                                  ;
 34803                                   	;mov	cx,7
 34804                                  	mov     cx,szMenu-szBoot-1
 34805                                          mov     si,szBoot	; first copy the CONFIG= part
 34806                                          inc     di              ; skip a byte, in case absolutely nothing
 34807                                                                  ; was copied to the workspace, because we always
 34808                                                                  ; zero the first byte of the workspace (below)
 34809                                  copy_boot: 
 34810                                  	;lods    byte ptr cs:[si];
 34811                                          cs
 34812                                  	lodsb
 34813                                  	mov     [di],al         ;
 34814                                          inc     di              ;
 34815                                          loop    copy_boot       ;
 34816                                  
 34817                                          push    es              ; then copy the configuration name
 34818                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 34819                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 34820                                          or      si,si           ; valid?
 34821                                          jnz	short l1	; yes
 34822                                          push    cs              ;
 34823                                          pop     es              ;
 34824                                          mov     si,szCommon
 34825                                  l1:     mov     al,[es:si]      ;
 34826                                          call    any_delim       ;
 34827                                          je	short l2	;
 34828                                          mov     [di],al         ;
 34829                                          inc     si              ;
 34830                                          inc     di              ;
 34831                                          loop    l1              ;
 34832                                  l2:     mov     byte [di],lf	; terminate the configuration string
 34833                                          pop     es              ;
 34834                                  
 34835                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 34836                                  
 34837                                          sub     di,di           ;
 34838                                          mov     [cs:config_envlen],di
 34839                                          sub     si,si           ;
 34840                                          pop     cx              ; recover the size of "config_wrkseg"
 34841                                  
 34842                                          push    cx              ;
 34843                                          rep     movsb           ; moved!
 34844                                          pop     cx              ;
 34845                                          mov     ax,ds           ;
 34846                                          pop     ds              ;
 34847                                  
 34848                                  ;   Now that the config_wrkseg is available once again, we shall
 34849                                  ;   use it to create an environment. The first thing to go in will be
 34850                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 34851                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 34852                                  ;   is empty.
 34853                                  
 34854                                          push    es              ;
 34855                                          mov     es,ax           ;
 34856                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 34857                                          mov     byte [es:0],0	;empty the environment block
 34858                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 34859                                          pop     es
 34860                                  
 34861                                  ;   Before returning, restore the default video page setting but do NOT
 34862                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 34863                                  ;   displayed on a different page, then it's because we don't want to see
 34864                                  ;   all the device driver/TSR goop (which goes to the default page)
 34865                                  
 34866                                  menu_done:
 34867                                          cmp     byte [bMenuPage],0
 34868                                          je	short menu_exit	;
 34869                                          push    es              ;
 34870                                          mov     ax,40h          ;
 34871                                          mov     es,ax           ;
 34872                                          mov     ax,[wCRTStart]  ;
 34873                                          mov     [es:004Eh],ax   ;
 34874                                          mov     al,[bCRTPage]   ;
 34875                                          mov     [es:0062h],al   ;
 34876                                          pop     es              ;
 34877                                  menu_exit:
 34878                                          mov     [count],cx      ; set new counts
 34879                                          mov     [org_count],cx  ;
 34880                                          sub     si,si           ; always return ES:SI pointing to config.sys
 34881                                          retn
 34882                                  
 34883                                  ;----------------------------------------------------------------------------
 34884                                  ;
 34885                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 34886                                  ;
 34887                                  ;   INPUT
 34888                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 34889                                  ;
 34890                                  ;   OUTPUT
 34891                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 34892                                  ;       carry set if error (eg, missing =); clear otherwise
 34893                                  ;
 34894                                  ;   OTHER REGS USED
 34895                                  ;       None
 34896                                  ;
 34897                                  ;   NOTES
 34898                                  ;       None
 34899                                  ;
 34900                                  ;   HISTORY
 34901                                  ;       Created 29-Mar-1992 by JeffPar
 34902                                  ;
 34903                                  ;----------------------------------------------------------------------------
 34904                                  
 34905                                  copy_envvar:
 34906                                          push    cx              ;
 34907                                          push    si              ;
 34908                                          push    ds              ;
 34909                                          push    es              ;
 34910                                          push    es              ;
 34911                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 34912                                          pop     ds                 ; DS:SI to point to envvar
 34913                                  
 34914                                  ;   Have to calculate the length of the variable name (and if we hit
 34915                                  ;   the end of the line before we hit '=', then it's curtains for this
 34916                                  ;   config.sys line)
 34917                                  ;
 34918                                  ;   The check for NULL is important because copy_envvar is also used to copy
 34919                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 34920                                  ;   menu block existed (in order to prevent the creation of an environment)
 34921                                  
 34922                                          sub     cx,cx           ;
 34923                                  copy_varlen:                    ;
 34924                                          lodsb                   ;
 34925                                          or      al,al           ; NULL?
 34926                                          stc                     ;
 34927                                          jz	short copy_envexit ; yes, abort
 34928                                          cmp     al,cr          ;
 34929                                          stc                     ;
 34930                                          je	short copy_envexit
 34931                                          cmp     al,lf          ;
 34932                                          stc                     ;
 34933                                          je	short copy_envexit
 34934                                          inc     cx              ;
 34935                                          cmp     al,'='          ;
 34936                                          jne	short copy_varlen
 34937                                          mov     al,0            ;
 34938                                          mov     ah,[si]         ; save char after '='
 34939                                          sub     si,cx           ; back up to given varname
 34940                                          dec     cx              ; CX == # of bytes in varname
 34941                                          sub     di,di           ; start looking for DS:SI at ES:0
 34942                                  copy_varsrch:
 34943                                          cmp     byte [es:di],al
 34944                                          je	short copy_envprep ; search failed, just copy var
 34945                                          mov     bx,di           ; ES:BX -> start of this varname
 34946                                          push    cx              ;
 34947                                          push    si              ;
 34948                                          repe    cmpsb           ;
 34949                                          pop     si              ;
 34950                                          pop     cx              ;
 34951                                          jne	short copy_varnext ; no match, skip to next varname
 34952                                          cmp     byte [es:di],'='
 34953                                          jne     short copy_varnext ; no match, there's more characters
 34954                                  
 34955                                  ;   Previous occurrence of variable has been found; determine the
 34956                                  ;   entire length and then destroy it
 34957                                  
 34958                                          mov     cx,-1           ;
 34959                                          repne   scasb           ; guaranteed to get null (since we put it there)
 34960                                          push    si              ;
 34961                                          mov     si,di           ;
 34962                                          mov     di,bx           ;
 34963                                          mov     cx,[cs:config_envlen]
 34964                                          sub     cx,si           ; destroy variable now
 34965                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 34966                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 34967                                  
 34968                                  	rep	; 0F3h
 34969                                  	es	; 26h
 34970                                  	movsb	; 0A4h
 34971                                  
 34972                                  	pop     si
 34973                                  copy_envprep:
 34974                                          cmp     ah,cr          ; if there is nothing after the '='
 34975                                          je	short copy_envdel ; then just exit with variable deleted
 34976                                          cmp     ah,lf           ;
 34977                                          je	short copy_envdel
 34978                                          jmp     short copy_envloop
 34979                                  
 34980                                  copy_varnext:                   ;
 34981                                          push    cx              ;
 34982                                          mov     cx,-1           ;
 34983                                          repne   scasb           ;
 34984                                          pop     cx              ;
 34985                                          jmp	short copy_varsrch
 34986                                  
 34987                                  copy_envloop:                   ;
 34988                                          lodsb                   ;
 34989                                          cmp     al,cr           ;
 34990                                          je	short copy_envdone
 34991                                          cmp     al,lf           ;
 34992                                          je	short copy_envdone
 34993                                          stosb                   ;
 34994                                          jmp     short copy_envloop
 34995                                  
 34996                                  copy_envdone:                   ;
 34997                                          sub     al,al           ; do SUB to clear carry as well
 34998                                          stosb                   ; always null-terminate these puppies
 34999                                  copy_envdel:                    ;
 35000                                          mov     [es:di],al      ; and stick another null to terminate the env.
 35001                                          mov     [cs:config_envlen],di
 35002                                  
 35003                                  copy_envexit:                   ;
 35004                                          pop     es              ;
 35005                                          pop     ds              ;
 35006                                          pop     si              ;
 35007                                          pop     cx              ;
 35008                                  
 35009                                  copy_done:	; 18/12/2022
 35010                                          retn
 35011                                  
 35012                                  ;----------------------------------------------------------------------------
 35013                                  ;
 35014                                  ;   copy_block:  copy the current block to the new config.sys workspace
 35015                                  ;
 35016                                  ;   INPUT
 35017                                  ;       CX == remaining bytes in "organized" config.sys memory image
 35018                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 35019                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 35020                                  ;             config.sys image) where the current block is to be copied
 35021                                  ;
 35022                                  ;   OUTPUT
 35023                                  ;       Same as above
 35024                                  ;       AL also equals the last character read from the organized image
 35025                                  ;
 35026                                  ;   OTHER REGS USED
 35027                                  ;       All
 35028                                  ;
 35029                                  ;   NOTES
 35030                                  ;       None
 35031                                  ;
 35032                                  ;   HISTORY
 35033                                  ;       Created 16-Mar-1992 by JeffPar
 35034                                  ;
 35035                                  ;----------------------------------------------------------------------------
 35036                                  
 35037                                  copy_block:
 35038                                          call    get_char        ; check for include
 35039                                          jc	short copy_done	;
 35040                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35041                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 35042                                          je	short copy_done ;
 35043                                  
 35044                                          cmp     al,CONFIG_INCLUDE ; 'J'
 35045                                          mov     al,ah           ; AL == the original line code
 35046                                          jne	short copy_line	; not an "include" line
 35047                                  
 35048                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 35049                                  ;   never try to include the block again (no infinite include loops please),
 35050                                  ;   then search for the named block and call copy_block again.
 35051                                  
 35052                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 35053                                          push    di              ;
 35054                                  
 35055                                          mov     di,szMenu
 35056                                          call    comp_names_safe ; don't allow INCLUDE MENU
 35057                                          je	short copy_skip	;
 35058                                  
 35059                                          mov     di,szCommon
 35060                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 35061                                          je	short copy_skip	;
 35062                                  
 35063                                          mov     di,si           ; try to find the block
 35064                                          call    srch_block      ;
 35065                                          mov     dx,di           ;
 35066                                          pop     di              ;
 35067                                          jne	short copy_error ; no such block
 35068                                          push    cx              ;
 35069                                          mov     cx,bx           ;
 35070                                          push    si              ;
 35071                                          dec     dx              ;
 35072                                          mov     si,dx           ;
 35073                                          call    skip_line       ; skip the rest of the "block name" line
 35074                                          call    copy_block      ; and copy in the rest of that block
 35075                                          pop     si              ;
 35076                                          pop     cx              ;
 35077                                          sub     al,al           ; force skip_opt_line to skip...
 35078                                          jmp     short copy_nextline
 35079                                  
 35080                                  copy_skip:
 35081                                          pop     di
 35082                                  copy_error:
 35083                                          clc                     ;
 35084                                          call    print_error     ; note that carry is clear, no pause
 35085                                          jmp     short copy_nextline
 35086                                  
 35087                                  ;   Copy the line at ES:SI to the current location at DS:DI
 35088                                  
 35089                                  copy_line:
 35090                                          mov     [di],al         ;
 35091                                          inc     di              ;
 35092                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 35093                                          jb	short copy_nextline ; no
 35094                                          cmp     byte [cs:config_multi],0
 35095                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 35096                                          call    get_linenum	; BX == line # of line @ES:SI
 35097                                          mov     [di],bx         ; stash it immediately following the line code
 35098                                          inc     di              ;
 35099                                          inc     di              ;
 35100                                          jmp     short copy_next ;
 35101                                  copy_loop:                      ;
 35102                                          call    get_char        ;
 35103                                          jc	short copy_done ; end of file
 35104                                          mov     [di],al         ;
 35105                                          inc     di              ;
 35106                                  copy_next:
 35107                                          cmp     al,lf ; 0Ah	; done with line?
 35108                                          jne	short copy_loop	; nope
 35109                                  
 35110                                  copy_nextline:
 35111                                          call    skip_opt_line   ;
 35112                                          jmp     short copy_block
 35113                                  
 35114                                  	; 18/12/2022
 35115                                  ;copy_done:
 35116                                          ;retn
 35117                                  
 35118                                  ;----------------------------------------------------------------------------
 35119                                  ;
 35120                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 35121                                  ;
 35122                                  ;   INPUT
 35123                                  ;    ES:SI -> some line in the config.sys memory image
 35124                                  ;
 35125                                  ;   OUTPUT
 35126                                  ;       BX == line # (relative to 1)
 35127                                  ;
 35128                                  ;   OTHER REGS USED
 35129                                  ;       DX
 35130                                  ;
 35131                                  ;   NOTES
 35132                                  ;       None
 35133                                  ;
 35134                                  ;   HISTORY
 35135                                  ;       Created 16-Mar-1992 by JeffPar
 35136                                  ;
 35137                                  ;----------------------------------------------------------------------------
 35138                                  
 35139                                  get_linenum:
 35140                                          push    ax              ;
 35141                                          sub     bx,bx           ; BX == line # (to be returned)
 35142                                          push    cx              ;
 35143                                          mov     dx,si           ; DX == the offset we're looking for
 35144                                          push    si              ;
 35145                                          mov     cx,[cs:count]   ;
 35146                                          sub     si,si           ; prepare to scan entire file
 35147                                  get_linenum_loop:               ;
 35148                                          call    skip_line       ;
 35149                                          jc	short get_linenum_done
 35150                                          inc     bx              ;
 35151                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 35152                                          jb	short get_linenum_loop ; no
 35153                                  get_linenum_done:               ;
 35154                                          pop     si              ;
 35155                                          pop     cx              ;
 35156                                          pop     ax              ;
 35157                                          retn
 35158                                  
 35159                                  ;----------------------------------------------------------------------------
 35160                                  ;
 35161                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 35162                                  ;
 35163                                  ;   INPUT
 35164                                  ;       ES -> config.sys image
 35165                                  ;    ES:DI -> block name to find
 35166                                  ;
 35167                                  ;   OUTPUT
 35168                                  ;       ZF flag set, if found
 35169                                  ;    ES:DI -> just past the name in the block heading, if found
 35170                                  ;       BX == # bytes remaining from that point, if found
 35171                                  ;
 35172                                  ;   OTHER REGS USED
 35173                                  ;       None
 35174                                  ;
 35175                                  ;   NOTES
 35176                                  ;       This differs from "find_block" in that it searches the ENTIRE
 35177                                  ;       config.sys image, not merely the remaining portion, and that it
 35178                                  ;       takes a pointer to block name that is *elsewhere* in the image
 35179                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 35180                                  ;
 35181                                  ;   HISTORY
 35182                                  ;       Created 16-Mar-1992 by JeffPar
 35183                                  ;
 35184                                  ;----------------------------------------------------------------------------
 35185                                  
 35186                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 35187                                          push    ax              ;
 35188                                          push    cx              ;
 35189                                          mov     cx,[cs:count]   ;
 35190                                          push    si              ;
 35191                                          sub     si,si           ;
 35192                                          push    ds              ;
 35193                                          push    es              ;
 35194                                          pop     ds              ;
 35195                                          call    find_block      ;
 35196                                          mov     di,si           ;
 35197                                          mov     bx,cx           ;
 35198                                          pop     ds              ;
 35199                                          pop     si              ;
 35200                                          pop     cx              ;
 35201                                          pop     ax              ;
 35202                                  find_exit: ; 16/04/2019
 35203                                          retn			;
 35204                                  
 35205                                  ;----------------------------------------------------------------------------
 35206                                  ;
 35207                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 35208                                  ;
 35209                                  ;   INPUT
 35210                                  ;    DS:DI -> block name to find
 35211                                  ;    ES:SI -> remainder of config.sys image
 35212                                  ;       CX == remaining size of config.sys image
 35213                                  ;
 35214                                  ;   OUTPUT
 35215                                  ;       ZF flag set, if found (also, CF set if EOF)
 35216                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 35217                                  ;       CX == # bytes remaining from that point
 35218                                  ;
 35219                                  ;   OTHER REGS USED
 35220                                  ;       AX
 35221                                  ;
 35222                                  ;   NOTES
 35223                                  ;       This differs from "srch_block" in that it searches only the
 35224                                  ;       remaining portion of the config.sys image and leaves SI and CX
 35225                                  ;       pointing to where the search left off, and that it takes a pointer
 35226                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 35227                                  ;
 35228                                  ;   HISTORY
 35229                                  ;       Created 16-Mar-1992 by JeffPar
 35230                                  ;
 35231                                  ;----------------------------------------------------------------------------
 35232                                  
 35233                                  find_block:
 35234                                          call    get_char        ; get line code
 35235                                          jc	short find_exit	; end of file
 35236                                          and     al,~CONFIG_OPTION_QUERY
 35237                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 35238                                          je	short check_line ; no
 35239                                          cmp     al,CONFIG_INCLUDE
 35240                                          jne	short next_line	;
 35241                                          or	byte [cs:config_multi],1
 35242                                          jmp     short next_line ;
 35243                                  check_line:
 35244                                          or      byte [cs:config_multi],1
 35245                                          call    comp_names      ; compare block names
 35246                                          jbe	short find_exit	; end of file, or names matched
 35247                                  next_line:
 35248                                          call    skip_opt_line   ; no, so skip to next line
 35249                                          jmp	short find_block  ;
 35250                                  ;find_exit:
 35251                                  ;	retn
 35252                                  
 35253                                  ;----------------------------------------------------------------------------
 35254                                  ;
 35255                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 35256                                  ;
 35257                                  ;   INPUT
 35258                                  ;    DS:DI -> keyword to compare
 35259                                  ;    ES:SI -> position in config.sys
 35260                                  ;       CX == remaining bytes in config.sys
 35261                                  ;
 35262                                  ;   OUTPUT
 35263                                  ;       ZF flag set, if match (also, CF set if EOF)
 35264                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 35265                                  ;       CX == # bytes remaining from that point
 35266                                  ;
 35267                                  ;   OTHER REGS USED
 35268                                  ;       AX
 35269                                  ;
 35270                                  ;   NOTES
 35271                                  ;       None
 35272                                  ;
 35273                                  ;   HISTORY
 35274                                  ;       Created 16-Mar-1992 by JeffPar
 35275                                  ;
 35276                                  ;----------------------------------------------------------------------------
 35277                                  
 35278                                  comp_names:
 35279                                          push    di              ;
 35280                                  comp_loop:                      ;
 35281                                          call    get_char        ;
 35282                                          jc	short comp_exit	;
 35283                                          call    any_delim       ; is next character a delimiter?
 35284                                          mov     ah,[di]         ; (get next character we're supposed to match)
 35285                                          je	short comp_almost ; yes, it *could* be a match
 35286                                          inc     di              ;
 35287                                          and     ax,~2020h ; 0DFDFh 
 35288                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 35289                                          cmp     al,ah           ; match?
 35290                                          je	short comp_loop ; yes, keep looking at the characters
 35291                                          clc                     ; prevent erroneous eof indication: clear carry
 35292                                  comp_exit:                      ;
 35293                                          pop     di              ;
 35294                                          retn			;
 35295                                  comp_almost:                    ;
 35296                                          xchg    al,ah           ; we don't know for sure if it's a match
 35297                                          call    any_delim       ; until we verify that the second string has
 35298                                          xchg    al,ah           ; been exhausted also...
 35299                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 35300                                  
 35301                                  ;----------------------------------------------------------------------------
 35302                                  
 35303                                  comp_names_safe:
 35304                                          push    ax
 35305                                          push    cx
 35306                                          push	si
 35307                                          push    ds
 35308                                          push    cs
 35309                                          pop     ds
 35310                                          call    comp_names
 35311                                          pop     ds
 35312                                  	pop	si
 35313                                          pop     cx
 35314                                          pop     ax
 35315                                          retn
 35316                                  
 35317                                  ;----------------------------------------------------------------------------
 35318                                  ;
 35319                                  ;   print_item:  display menu item #BL
 35320                                  ;
 35321                                  ;   INPUT
 35322                                  ;       BL == menu item # to display
 35323                                  ;
 35324                                  ;   OUTPUT
 35325                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 35326                                  ;
 35327                                  ;   OTHER REGS USED
 35328                                  ;       None
 35329                                  ;
 35330                                  ;   NOTES
 35331                                  ;       This function saves/restores the current cursor position, so you
 35332                                  ;       needn't worry about it.
 35333                                  ;
 35334                                  ;   HISTORY
 35335                                  ;       Created 16-Mar-1992 by JeffPar
 35336                                  ;
 35337                                  ;----------------------------------------------------------------------------
 35338                                  
 35339                                  print_item:		; prints menu item #BL (1 to N)
 35340                                          push    ax              ;
 35341                                          push    bx              ;
 35342                                          push    cx              ;
 35343                                          push    dx              ;
 35344                                          push    si              ;
 35345                                          mov     ah,03h          ; get cursor position
 35346                                          mov     bh,[bMenuPage]  ; always page zero
 35347                                          int     10h             ; DH/DL = row/column
 35348                                          push    dx              ; save it
 35349                                          mov     ah,02h          ; set cursor position
 35350                                          mov     dh,bl           ;
 35351                                          add     dh,3            ;
 35352                                          mov     dl,5            ;
 35353                                          int     10h             ; set cursor position for correct row/col
 35354                                          mov     al,bl           ;
 35355                                          add     al,'0'          ; convert menu item # to ASCII digit
 35356                                          mov     ah,[bMenuColor] ; normal attribute
 35357                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 35358                                          jne	short print_other ; no
 35359                                          or      ah,70h          ; yes, set bgnd color to white
 35360                                          mov     ch,ah           ;
 35361                                          mov     cl,4            ;
 35362                                          rol     ch,cl           ;
 35363                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 35364                                          jne	short print_other ; no
 35365                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 35366                                  print_other:                    ;
 35367                                          mov     bh,0            ;
 35368                                          add     bx,bx           ;
 35369                                          mov     di,[aoffBlockDesc+bx]
 35370                                          mov     bl,ah           ; put the attribute in the correct register now
 35371                                          mov     bh,[bMenuPage]  ; get correct video page #
 35372                                          mov     ah,09h          ; write char/attr
 35373                                          mov     cx,1            ;
 35374                                          int     10h             ;
 35375                                          inc     dl              ; increment column
 35376                                          mov     ah,02h          ;
 35377                                          int     10h             ;
 35378                                          ;mov	ax,0900h+'.'    ;
 35379                                          mov	ax,092Eh
 35380                                  	int     10h             ; display '.'
 35381                                          inc     dl              ; increment column
 35382                                          mov     ah,02h          ;
 35383                                          int     10h             ;
 35384                                          ;mov	ax,0900h+' '    ;
 35385                                          mov	ax,0920h
 35386                                  	int     10h             ; display ' '
 35387                                          inc     dl              ; increment column
 35388                                          mov     ah,02h          ;
 35389                                          int     10h             ;
 35390                                          push    es              ;
 35391                                  print_loop:                     ;
 35392                                          mov     al,[es:di]	; get a character of the description
 35393                                          inc     di              ;
 35394                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 35395                                          jne	short print_nontab ;
 35396                                          mov     al,' '          ;
 35397                                  print_nontab:                   ;
 35398                                          cmp     al,' '          ;
 35399                                          jb	short print_done ; stop at the 1st character < space
 35400                                          cmp     al,'$'          ;
 35401                                          je	short print_done ; also stop on $
 35402                                          mov     ah,09h          ; display function #
 35403                                          int     10h             ;
 35404                                          inc     dl              ; increment column
 35405                                          cmp     dl,78           ; far enough?
 35406                                          jae	short print_done ; yes
 35407                                          mov     ah,02h          ;
 35408                                          int     10h             ;
 35409                                          jmp     print_loop      ;
 35410                                  print_done:                     ;
 35411                                          pop     es              ;
 35412                                          pop     dx              ;
 35413                                          mov     ah,02h          ;
 35414                                          int     10h             ; restore previous row/col
 35415                                          pop     si              ;
 35416                                          pop     dx              ;
 35417                                          pop     cx              ;
 35418                                          pop     bx              ;
 35419                                          pop     ax              ;
 35420                                          retn			;
 35421                                  
 35422                                  ;----------------------------------------------------------------------------
 35423                                  ;
 35424                                  ;   select_item:  wait for user to select menu item, with time-out
 35425                                  ;
 35426                                  ;   INPUT
 35427                                  ;       None
 35428                                  ;
 35429                                  ;   OUTPUT
 35430                                  ;       BX == menu item # (1-N), or -1 for clean boot
 35431                                  ;       Selected menu item highlighted
 35432                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 35433                                  ;
 35434                                  ;   OTHER REGS USED
 35435                                  ;       None
 35436                                  ;
 35437                                  ;   NOTES
 35438                                  ;       None
 35439                                  ;
 35440                                  ;   HISTORY
 35441                                  ;       Created 16-Mar-1992 by JeffPar
 35442                                  ;
 35443                                  ;----------------------------------------------------------------------------
 35444                                  
 35445                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 35446                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 35447                                          mov     al,bl           ;
 35448                                          call    disp_num        ;
 35449                                          call    show_status     ; display current interactive status
 35450                                          cmp     byte [secTimeOut],-1
 35451                                          je	short input_key	; no time-out, just go to input
 35452                                          mov     ah,GET_TIME ; 2Ch
 35453                                          int     21h             ;
 35454                                          mov     bh,dh           ; BH = initial # of seconds
 35455                                  check_time:
 35456                                          mov     al,[secTimeOut] ;
 35457                                          sub     al,[secElapsed] ;
 35458                                          jae	short show_time	;
 35459                                          or      byte [bQueryOpt],2  ; disable all further prompting
 35460                                          mov     byte [secElapsed],0
 35461                                          jmp	select_done	; time's up!
 35462                                  show_time:
 35463                                          push    bx              ;
 35464                                          mov     bl,al           ; save # in BL
 35465                                          mov     bh,[bMenuPage]  ;
 35466                                          mov     ah,03h          ; get cursor position
 35467                                          int     10h             ;
 35468                                          push    dx              ;
 35469                                  	add	dl,8		; move cursor to the right
 35470                                          mov     ah,02h          ; set cursor position
 35471                                          int     10h             ;
 35472                                          mov     dx,_$TimeOut
 35473                                          call    print           ; print the "Time remaining: " prompt
 35474                                          mov     al,bl           ; recover # from BL
 35475                                          cbw                     ; this works because AL is always <= 90
 35476                                          mov     cl,10           ;
 35477                                          div     cl              ; AL = tens digit, AH = ones digit
 35478                                          mov     cl,ah           ;
 35479                                          add     al,'0'          ;
 35480                                          mov     ah,0Eh          ;
 35481                                          int     10h             ; write TTY tens digit
 35482                                          mov     al,cl           ;
 35483                                          add     al,'0'          ;
 35484                                          mov     ah,0Eh          ;
 35485                                          int     10h             ; write TTY ones digit
 35486                                          pop     dx
 35487                                          mov     ah,02h          ; set cursor position back to where it was
 35488                                          int     10h             ;
 35489                                          pop     bx              ;
 35490                                  input_key:
 35491                                          mov     ah,RAW_CON_IO ; 6
 35492                                          mov     dl,0FFh         ; input request
 35493                                          int     21h             ;
 35494                                          jnz	short got_key	;
 35495                                          cmp     byte [secTimeOut],-1; is there a time-out?
 35496                                          je	short input_key	; no, just go back to input
 35497                                          mov     ah,GET_TIME     ;
 35498                                          int     21h             ; DH = seconds
 35499                                          mov     ah,dh           ;
 35500                                          sub     dh,bh           ; should generally be zero or one
 35501                                          mov     bh,ah           ;
 35502                                          jnc	short got_time	;
 35503                                          mov     dh,1            ; it wrapped back to zero, so assume one
 35504                                  got_time:
 35505                                          or      dh,dh           ; any change?
 35506                                          jz	short input_key	; no
 35507                                          add     [secElapsed],dh ;
 35508                                          jmp	short check_time ;
 35509                                  got_key:
 35510                                          push    ax              ;
 35511                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 35512                                          xchg    [secTimeOut],ax
 35513                                          cmp     al,-1           ; was time-out already disabled?
 35514                                          je	short timeout_disabled ; yes
 35515                                          push    bx              ; let's disable # seconds display
 35516                                          mov     ax,0A20h        ; write multiple spaces
 35517                                          mov     bx,[bMenuColor]
 35518                                          mov     cx,80           ; 80 of them, to be safe
 35519                                          int     10h             ; to completely obliterate # seconds display
 35520                                          pop     bx   		;
 35521                                  
 35522                                  timeout_disabled:
 35523                                          pop     ax              ;
 35524                                          or      al,al           ; extended key pressed?
 35525                                          jnz	short normal_key ; no
 35526                                          int     21h             ; get the next part of the key then
 35527                                          jz	short input_key	; hmmm, what happened to the second part?
 35528                                  
 35529                                          cmp     al,48h          ; up arrow?
 35530                                          jne	short not_up	; no
 35531                                          cmp     bl,1            ; are we as up as up can get?
 35532                                          jbe	short input_key	; yes, ignore it
 35533                                          dec     byte [bDefBlock] ;
 35534                                          call    print_item      ; re-print the current item
 35535                                          dec     bl              ; and then print the new current item
 35536                                          jmp     short print1
 35537                                  not_up:
 35538                                          cmp     al,50h          ; down arrow?
 35539                                          jne	short not_down	; no
 35540                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 35541                                          jae	short to_input_key ; yes, ignore it
 35542                                          inc     byte [bDefBlock] ;
 35543                                          call    print_item      ; re-print the current item
 35544                                          inc     bx              ; and then print the new current item
 35545                                  print1: 
 35546                                  	mov     al,bl           ;
 35547                                  print2: 
 35548                                  	call    print_item      ;
 35549                                          call    disp_num        ;
 35550                                  to_input_key:
 35551                                          jmp     input_key       ;
 35552                                  not_down:
 35553                                          test    byte [bDisableUI],1
 35554                                          jnz	short to_input_key ; don't allow F8 or F5
 35555                                          cmp     al,42h          ; F8 function key?
 35556                                          jne	short not_f8	; no
 35557                                          xor     byte [bQueryOpt],1
 35558                                          call    show_status     ;
 35559                                          jmp     input_key	;
 35560                                  not_f8:
 35561                                          cmp     al,3Fh          ; F5 function key?
 35562                                          jne	short to_input_key ; no
 35563                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 35564                                          mov     al,' '          ; don't want to display anything really;
 35565                                          jmp     short disp_input; just want to display the cr/lf sequence...
 35566                                  
 35567                                  normal_key:
 35568                                          cmp     al,0Dh          ; Enter?
 35569                                          je	short select_done ; yes
 35570                                          cmp     al,08h          ; backspace?
 35571                                          jne	short not_backspace ; no
 35572                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 35573                                          retn			;
 35574                                  not_backspace:
 35575                                          sub     al,'0'          ; is greater than '0'?
 35576                                          jbe	short to_input_key ; no
 35577                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 35578                                          ja	short to_input_key ; no
 35579                                          mov	[bDefBlock],al  ;
 35580                                          call    print_item      ; redisplay the current selection
 35581                                          mov     bl,al           ; set new selection
 35582                                          jmp	short print2
 35583                                  
 35584                                  select_done:
 35585                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 35586                                          mov     al,bl           ;
 35587                                          add     al,'0'          ; convert it into a digit, then display it
 35588                                  
 35589                                  	; fall into disp_input
 35590                                  
 35591                                  ; 16/04/2019 - Retro DOS v4.0
 35592                                  
 35593                                  ;----------------------------------------------------------------------------
 35594                                  ;
 35595                                  ;   disp_input:  display a single character + cr/lf
 35596                                  ;
 35597                                  ;   INPUT
 35598                                  ;       AL == character to display
 35599                                  ;
 35600                                  ;   OUTPUT
 35601                                  ;       None
 35602                                  ;
 35603                                  ;   OTHER REGS USED
 35604                                  ;       None
 35605                                  ;
 35606                                  ;   NOTES
 35607                                  ;       This function is used not only for the menu input selection but
 35608                                  ;       also for the interactive line prompting (the y/n/a thing).
 35609                                  ;
 35610                                  ;   HISTORY
 35611                                  ;       Created 16-Mar-1992 by JeffPar
 35612                                  ;
 35613                                  ;----------------------------------------------------------------------------
 35614                                  
 35615                                  disp_input:
 35616                                          push    ax
 35617                                          cmp     al,' '
 35618                                          jae	short disp_ok
 35619                                          mov     al,' '
 35620                                  disp_ok:
 35621                                          mov     dl,al
 35622                                          mov     ah,STD_CON_OUTPUT ; 2
 35623                                          int     21h
 35624                                          mov     dx,crlfm
 35625                                          call    print
 35626                                          pop     ax
 35627                                          retn
 35628                                  
 35629                                  ;----------------------------------------------------------------------------
 35630                                  
 35631                                  disp_num:
 35632                                          push    bx
 35633                                          add     al,'0'
 35634                                          mov     ah,0Ah
 35635                                          mov     bx,[bMenuColor]
 35636                                          mov     cx,1
 35637                                          int     10h
 35638                                          pop     bx
 35639                                          retn
 35640                                  
 35641                                  ;----------------------------------------------------------------------------
 35642                                  ;
 35643                                  ;   show_status:  display current interactive mode setting (on/off/none)
 35644                                  ;
 35645                                  ;   INPUT
 35646                                  ;       None
 35647                                  ;
 35648                                  ;   OUTPUT
 35649                                  ;       None
 35650                                  ;
 35651                                  ;   OTHER REGS USED
 35652                                  ;       None
 35653                                  ;
 35654                                  ;   NOTES
 35655                                  ;       None
 35656                                  ;
 35657                                  ;   HISTORY
 35658                                  ;       Created 16-Mar-1992 by JeffPar
 35659                                  ;
 35660                                  ;----------------------------------------------------------------------------
 35661                                  
 35662                                  show_status:
 35663                                          push    bx              ; BL = video page #
 35664                                          mov     bx,[bMenuColor]
 35665                                          mov     ah,03h          ; get cursor position
 35666                                          int     10h             ;
 35667                                          push    dx              ; save it
 35668                                          mov     ah,02h          ; set cursor position
 35669                                          mov     dx,[bLastCol]   ; set correct row/col
 35670                                          test    byte [bDisableUI],1
 35671                                          jz	short show_onoff ; just show on/off
 35672                                          mov     dl,0            ;
 35673                                          int     10h             ;
 35674                                          mov     ax,0A20h        ; write multiple spaces
 35675                                          mov     cx,80           ; 80 of them, to be exact
 35676                                          int     10h             ; to obliterate the status line
 35677                                          jmp     short show_done ;
 35678                                  show_onoff: 
 35679                                          int     10h
 35680                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 35681                                  		; AL = character, BH = display page - alpha mode
 35682                                  		; BL = color of character (graphics mode, PCjr only)
 35683                                  		; CX = number of times to write character
 35684                                  
 35685                                          mov     al,[_$NO]	; assume OFF
 35686                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 35687                                          jne	short show_noton ; no
 35688                                          mov     al,[_$YES]	; yes
 35689                                  show_noton:                     ;
 35690                                          mov     ah,0Eh          ; write TTY
 35691                                          int     10h             ;
 35692                                  show_done:                      ;
 35693                                          pop     dx              ;
 35694                                          mov     ah,02h          ;
 35695                                          int     10h             ; restore original cursor position
 35696                                          pop     bx              ;
 35697                                          retn			;
 35698                                  
 35699                                  ; 16/04/2019 - Retro DOS v4.0
 35700                                  
 35701                                  ;----------------------------------------------------------------------------
 35702                                  ;
 35703                                  ;   skip_token: advances ES:SI/CX past the current token
 35704                                  ;
 35705                                  ;   INPUT
 35706                                  ;    ES:SI -> position in config.sys
 35707                                  ;       CX == remaining bytes in config.sys
 35708                                  ;
 35709                                  ;   OUTPUT
 35710                                  ;       CF set if EOL/EOF hit
 35711                                  ;       AL == 1st char of delimiter
 35712                                  ;    ES:SI -> just past the delimiter
 35713                                  ;       CX == # bytes remaining from that point
 35714                                  ;
 35715                                  ;   OTHER REGS USED
 35716                                  ;       AX
 35717                                  ;
 35718                                  ;   NOTES
 35719                                  ;       None
 35720                                  ;
 35721                                  ;   HISTORY
 35722                                  ;       Created 16-Mar-1992 by JeffPar
 35723                                  ;
 35724                                  ;----------------------------------------------------------------------------
 35725                                  
 35726                                  skip_token:
 35727                                          call    get_char
 35728                                          jc	short skip_token_done
 35729                                          call    any_delim
 35730                                          jne	short skip_token
 35731                                  skip_check_eol:
 35732                                          cmp     al,cr ; 0Dh
 35733                                          je	short skip_token_eol
 35734                                          cmp     al,lf ; 0Ah
 35735                                          je	short skip_token_eol
 35736                                          clc
 35737                                          ;jmp	short skip_token_done
 35738                                  	retn
 35739                                  skip_token_eol:
 35740                                          stc
 35741                                  skip_token_done:
 35742                                          retn
 35743                                  
 35744                                  ;----------------------------------------------------------------------------
 35745                                  ;
 35746                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 35747                                  ;
 35748                                  ;   INPUT
 35749                                  ;    ES:SI -> position in config.sys
 35750                                  ;       CX == remaining bytes in config.sys
 35751                                  ;
 35752                                  ;   OUTPUT
 35753                                  ;       CF set if EOF hit
 35754                                  ;       AL == 1st char of token
 35755                                  ;    ES:SI -> just past the token
 35756                                  ;       CX == # bytes remaining from that point
 35757                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 35758                                  ;
 35759                                  ;   OTHER REGS USED
 35760                                  ;       AX
 35761                                  ;
 35762                                  ;   NOTES
 35763                                  ;       None
 35764                                  ;
 35765                                  ;   HISTORY
 35766                                  ;       Created 16-Mar-1992 by JeffPar
 35767                                  ;
 35768                                  ;----------------------------------------------------------------------------
 35769                                  
 35770                                  skip_delim:       ; returns carry set if eol/eof
 35771                                          call    get_char        ;
 35772                                          lea     bx,[si-1]       ; also returns BX -> next token
 35773                                          jc	short skip_token_done ;
 35774                                          call    delim           ;
 35775                                          je	short skip_delim ;
 35776                                          jmp	short skip_check_eol  ; 13/05/2019
 35777                                  
 35778                                  ;----------------------------------------------------------------------------
 35779                                  ;
 35780                                  ;   skip_opt_line: same as skip_line provided AL != LF
 35781                                  ;
 35782                                  ;   INPUT
 35783                                  ;       AL == last character read
 35784                                  ;    ES:SI -> position in config.sys
 35785                                  ;       CX == remaining bytes in config.sys
 35786                                  ;
 35787                                  ;   OUTPUT
 35788                                  ;       CF set if EOF hit
 35789                                  ;       AL == 1st char of new line
 35790                                  ;    ES:SI -> just past 1st char of new line
 35791                                  ;       CX == # bytes remaining from that point
 35792                                  ;
 35793                                  ;   OTHER REGS USED
 35794                                  ;       AX
 35795                                  ;
 35796                                  ;   NOTES
 35797                                  ;       In other words, the purpose here is to skip to the next line,
 35798                                  ;       unless ES:SI is already sitting at the front of the next line (which
 35799                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 35800                                  ;
 35801                                  ;   HISTORY
 35802                                  ;       Created 16-Mar-1992 by JeffPar
 35803                                  ;
 35804                                  ;----------------------------------------------------------------------------
 35805                                  
 35806                                  skip_opt_line:
 35807                                          cmp     al,lf ; 0Ah
 35808                                          je	short skip_line_done
 35809                                       
 35810                                  	; fall into skip_line
 35811                                  
 35812                                  ;----------------------------------------------------------------------------
 35813                                  ;
 35814                                  ;   skip_line: skip to the next line
 35815                                  ;
 35816                                  ;   INPUT
 35817                                  ;    ES:SI -> position in config.sys
 35818                                  ;       CX == remaining bytes in config.sys
 35819                                  ;
 35820                                  ;   OUTPUT
 35821                                  ;       CF set if EOF hit
 35822                                  ;    ES:SI -> just past 1st char of new line
 35823                                  ;       CX == # bytes remaining from that point
 35824                                  ;
 35825                                  ;   OTHER REGS USED
 35826                                  ;       AX
 35827                                  ;
 35828                                  ;   NOTES
 35829                                  ;       None
 35830                                  ;
 35831                                  ;   HISTORY
 35832                                  ;       Created 16-Mar-1992 by JeffPar
 35833                                  ;
 35834                                  ;----------------------------------------------------------------------------
 35835                                  
 35836                                  skip_line:
 35837                                          call    get_char
 35838                                          jc	short skip_line_done
 35839                                          cmp     al,lf ; 0Ah
 35840                                          jne	short skip_line
 35841                                  skip_line_done:
 35842                                  num_done:	; 18/12/2022
 35843                                          retn
 35844                                  
 35845                                  ;----------------------------------------------------------------------------
 35846                                  ;
 35847                                  ;   get_number: return binary equivalent of numeric string
 35848                                  ;
 35849                                  ;   INPUT
 35850                                  ;    ES:SI -> position in config.sys
 35851                                  ;       CX == remaining bytes in config.sys
 35852                                  ;
 35853                                  ;   OUTPUT
 35854                                  ;       AL == non-digit encountered
 35855                                  ;       BX == binary #
 35856                                  ;    ES:SI -> just past 1st non-digit
 35857                                  ;       CX == # bytes remaining from that point
 35858                                  ;
 35859                                  ;   OTHER REGS USED
 35860                                  ;       AX
 35861                                  ;
 35862                                  ;   NOTES
 35863                                  ;       None
 35864                                  ;
 35865                                  ;   HISTORY
 35866                                  ;       Created 16-Mar-1992 by JeffPar
 35867                                  ;
 35868                                  ;----------------------------------------------------------------------------
 35869                                  
 35870                                  ; 13/05/2019
 35871                                  
 35872                                  get_number:
 35873                                          sub     bx,bx           ; BX = result
 35874                                  num_loop:
 35875                                          call    get_char        ;
 35876                                          jc	short num_done	;
 35877                                          cmp     al,'0'          ; convert to value
 35878                                          jb	short num_done	; no more number
 35879                                          cmp     al,'9'          ;
 35880                                          ja	short num_done	;
 35881                                          push    ax              ;
 35882                                          mov     ax,10           ;
 35883                                          push    dx              ;
 35884                                          mul     bx              ;
 35885                                          pop     dx              ;
 35886                                          mov     bx,ax           ;
 35887                                          pop     ax              ;
 35888                                          sub     al,'0'          ;
 35889                                          cbw                     ;
 35890                                          add     bx,ax           ;
 35891                                          jmp	short num_loop	;
 35892                                  
 35893                                  	; 18/12/2022
 35894                                  ;num_done:
 35895                                          ;retn
 35896                                  
 35897                                  ;----------------------------------------------------------------------------
 35898                                  ;
 35899                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 35900                                  ;
 35901                                  ;   INPUT
 35902                                  ;    ES:SI -> position in config.sys
 35903                                  ;       CX == remaining bytes in config.sys
 35904                                  ;
 35905                                  ;   OUTPUT
 35906                                  ;       AL == next character
 35907                                  ;    ES:SI -> just past next character
 35908                                  ;       CX == # bytes remaining from that point
 35909                                  ;
 35910                                  ;   OTHER REGS USED
 35911                                  ;       AX
 35912                                  ;
 35913                                  ;   NOTES
 35914                                  ;       None
 35915                                  ;
 35916                                  ;   HISTORY
 35917                                  ;       Created 16-Mar-1992 by JeffPar
 35918                                  ;
 35919                                  ;----------------------------------------------------------------------------
 35920                                  
 35921                                  get_char:
 35922                                          sub     cx,1            ; use SUB to set carry,zero
 35923                                          jb	short get_fail	; out of data
 35924                                          ;lods	byte ptr es:[si] ;
 35925                                  	es	
 35926                                  	lodsb
 35927                                          mov     ah,al           ;
 35928                                          retn			;
 35929                                  get_fail:                       ; restore CX to zero
 35930                                          mov     cx,0            ; leave carry set, zero not set
 35931                                  nearby_ret:
 35932                                          retn
 35933                                  
 35934                                  ;----------------------------------------------------------------------------
 35935                                  ;
 35936                                  ;   query_user: ask user whether to execute current config.sys command
 35937                                  ;
 35938                                  ;   INPUT
 35939                                  ;       AL == current command code
 35940                                  ;    ES:SI -> current command line in config.sys
 35941                                  ;    config_cmd == current command code, but with QUERY bit intact
 35942                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 35943                                  ;
 35944                                  ;   OUTPUT
 35945                                  ;       CF set if command should be ignored (it is also REM'ed out)
 35946                                  ;
 35947                                  ;   OTHER REGS USED
 35948                                  ;       BX, CX, DX, DI
 35949                                  ;
 35950                                  ;   NOTES
 35951                                  ;       None
 35952                                  ;
 35953                                  ;   HISTORY
 35954                                  ;       Created 16-Mar-1992 by JeffPar
 35955                                  ;
 35956                                  ;----------------------------------------------------------------------------
 35957                                  
 35958                                  	; 12/12/2022
 35959                                  query_user:
 35960                                          test    byte [bQueryOpt],4	; answer no to everything?
 35961                                          ;jz	short qu_1		;
 35962                                          ; 12/12/2022
 35963                                  	;jmp	short skip_all		;
 35964                                  	jnz	short skip_all
 35965                                  qu_1:
 35966                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 35967                                          jnz	short nearby_ret	; yes (and return carry clear!)
 35968                                          push    ax                      ;
 35969                                          mov     al,[config_cmd]         ;
 35970                                          test    byte [bQueryOpt],1	; query every command?
 35971                                          jnz	short query_all		; yes
 35972                                          test    al,CONFIG_OPTION_QUERY  ;
 35973                                          ;jnz	short query_all		;
 35974                                          ; 12/12/2022
 35975                                  	;jmp	short do_cmd		;
 35976                                  	jz	short do_cmd ; cf=0
 35977                                  query_all:
 35978                                  
 35979                                  ;   Search for the command code (AL) in "comtab", and then print
 35980                                  ;   out the corresponding keyword, followed by the rest of the actual
 35981                                  ;   line pointed to by ES:SI
 35982                                  
 35983                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 35984                                          mov     dx,_$AutoPrmpt    	;
 35985                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35986                                          jz	short generic_prompt	; config_cmd must have been 0
 35987                                  
 35988                                          mov     dh,al                   ; save config_cmd in DH
 35989                                          sub     bx,bx                   ;
 35990                                          mov     di,comtab		;
 35991                                  find_match:                             ;
 35992                                          mov     bl,[di]                 ; get size of current keyword
 35993                                          or      bl,bl                   ;
 35994                                          jz	short line_print	; end of table
 35995                                          inc     di                      ;
 35996                                          cmp     al,[di+bx]              ; match?
 35997                                          je	short cmd_match		; yes
 35998                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 35999                                  	; 13/05/2019	
 36000                                          jmp	short find_match	; loop
 36001                                  cmd_match:                              ;
 36002                                          mov     cl,[di-1]               ;
 36003                                          mov     ch,0                    ;
 36004                                          mov     ah,STD_CON_OUTPUT ; 2
 36005                                  cmd_print:                              ;
 36006                                          mov     al,[di]                 ;
 36007                                          inc     di                      ;
 36008                                          mov     dl,al                   ;
 36009                                          int     21h                     ;
 36010                                          loop    cmd_print               ;
 36011                                          mov     dl,'='                  ;
 36012                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 36013                                          jne	short cmd_notset	;
 36014                                          mov     dl,' '                  ;
 36015                                  cmd_notset:
 36016                                          int     21h                     ; '=' looks funny on SET commands
 36017                                  line_print:                             ;
 36018                                  	;lods	byte ptr es:[si]        ;
 36019                                          es
 36020                                  	lodsb
 36021                                  	or      al,al                   ;
 36022                                          jnz	short non_null		;
 36023                                          mov     al,' '                  ;
 36024                                  non_null:                               ;
 36025                                          cmp     al,' '                  ; control code?
 36026                                          jb	short prompt_user	; yes, assume end of line
 36027                                          jne	short non_space		;
 36028                                          cmp     byte [es:si],' '	;
 36029                                          jb	short prompt_user	;
 36030                                  non_space:                              ;
 36031                                          mov     dl,al                   ;
 36032                                          mov     ah,STD_CON_OUTPUT ; 2	;
 36033                                          int     21h                     ;
 36034                                          jmp	short line_print	;
 36035                                  prompt_user:                            ;
 36036                                          mov     dx,_$InterPrmpt		;
 36037                                  
 36038                                  generic_prompt:
 36039                                          call    print                   ;
 36040                                  input_loop:                             ;
 36041                                          mov     ah,0                    ; read a key
 36042                                          int     16h                     ;
 36043                                          or      al,al                   ; is it a function key?
 36044                                          jnz	short not_func		; no
 36045                                          cmp     ah,3Fh                  ; F5 function key?
 36046                                          jne	short input_loop	; no
 36047                                          mov     al,[_$NO]                  ;
 36048                                          or      byte [bQueryOpt],4	; no more queries
 36049                                          jmp     short legal_char        ;
 36050                                  not_func:
 36051                                          and     al,~20h ; 0DFh		; converting to upper case
 36052                                          cmp     al,[_$NO]		; verify character is legal
 36053                                          je	short legal_char	;
 36054                                          cmp     al,[_$YES]		;
 36055                                          je	short legal_char	;
 36056                                          cmp     byte [config_cmd],0	;
 36057                                          je	short input_loop	; don't allow Esc on this query
 36058                                          cmp     al,1Bh                  ; Esc?
 36059                                          jne	short input_loop	;
 36060                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 36061                                          mov     al,[_$YES]
 36062                                  legal_char:                             ;
 36063                                          call    disp_input              ;
 36064                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 36065                                  
 36066                                          cmp     al,[_$NO]		; process line?
 36067                                          je	short skip_cmd		; no
 36068                                  	; 12/12/2022
 36069                                  	clc
 36070                                  do_cmd:
 36071                                  	pop     ax			;
 36072                                  	; 12/12/2022
 36073                                  	; cf=0
 36074                                  	;clc				; just do the command
 36075                                  	retn
 36076                                  
 36077                                  skip_cmd:
 36078                                  	pop     ax			;
 36079                                  skip_all:
 36080                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 36081                                  	stc
 36082                                  	retn
 36083                                  
 36084                                  ;----------------------------------------------------------------------------
 36085                                  ;
 36086                                  ;   print_error: displays multi-config error conditions
 36087                                  ;
 36088                                  ;   INPUT
 36089                                  ;    Carry set to pause, clear to not
 36090                                  ;    ES:SI -> current command line in config.sys
 36091                                  ;
 36092                                  ;   OUTPUT
 36093                                  ;       None
 36094                                  ;
 36095                                  ;   OTHER REGS USED
 36096                                  ;       None
 36097                                  ;
 36098                                  ;   NOTES
 36099                                  ;       None
 36100                                  ;
 36101                                  ;   HISTORY
 36102                                  ;       Created 16-Mar-1992 by JeffPar
 36103                                  ;
 36104                                  ;----------------------------------------------------------------------------
 36105                                  
 36106                                  print_error:
 36107                                          push    ax
 36108                                          push    bx
 36109                                          push    cx
 36110                                          push    dx
 36111                                          push    ds
 36112                                          push    cs
 36113                                          pop     ds
 36114                                          pushf
 36115                                          call    get_linenum
 36116                                          mov     [linecount],bx
 36117                                          call    error_line
 36118                                          popf
 36119                                          jnc	short pe_ret
 36120                                          mov     dx,_$PauseMsg
 36121                                          call    print
 36122                                          mov     ax,0C07h		; flush input buffer, then wait for key
 36123                                          int     21h			; wait for a key
 36124                                          or      al,al			; extended key?
 36125                                          jnz	short pe_1		; no
 36126                                          mov     ah,07h			; yes
 36127                                          int     21h			; eat it too
 36128                                  pe_1:     
 36129                                  	mov     dx,crlfm
 36130                                          call    print
 36131                                  pe_ret: 
 36132                                  	pop     ds
 36133                                          pop     dx
 36134                                          pop     cx
 36135                                          pop     bx
 36136                                          pop     ax
 36137                                  	retn
 36138                                  
 36139                                  ;----------------------------------------------------------------------------
 36140                                  
 36141                                  ;   This function is very simple:  it merely prepends a "/D" to the
 36142                                  ;   command-line for the shell;  this (undocumented) switch disables
 36143                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 36144                                  ;   displayed when there's no AUTOEXEC.BAT.
 36145                                  
 36146                                  disable_autoexec:
 36147                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 36148                                  	; 17/04/2019 - Retro DOS v4.0
 36149                                  
 36150                                  	test	byte [bQueryOpt],4
 36151                                  	jz	short disable_exit
 36152                                  	test	byte [dae_flag],1
 36153                                  	jnz	short disable_exit
 36154                                  	or	byte [dae_flag],1
 36155                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 36156                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 36157                                  	mov     dx,'D ' ; 2044h
 36158                                  dae_1:
 36159                                          ;mov	al,[def_swchr]
 36160                                  	mov     al,[command_line-1]     ; get default switchchar
 36161                                          or      al,al                   ; anything there?
 36162                                          jz	short disable_exit	; no, disable_autoexec already called
 36163                                          mov     bl,[command_line]       ;
 36164                                          mov     bh,0                    ; BX == command-line length
 36165                                          mov     cx,bx                   ;
 36166                                          add     bl,3                    ;
 36167                                          cmp     bl,126                  ;
 36168                                          ja	short disable_exit	;
 36169                                          mov     [command_line],bl       ; update length
 36170                                          add     bx,command_line+1	; make sure we move the NULL too
 36171                                          inc     cx                      ; (just for consistency sake)
 36172                                  disable_loop:                           ;
 36173                                          mov     ah,[bx-3]               ;
 36174                                          mov     [bx],ah                 ;
 36175                                          dec     bx                      ;
 36176                                          loop    disable_loop            ;
 36177                                          mov     [bx-2],al               ;
 36178                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 36179                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 36180                                          ;mov	byte [command_line-1],0 ;
 36181                                  disable_exit:                           ;
 36182                                          retn
 36183                                  
 36184                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 36185                                  	cmp     byte [bQueryOpt],1
 36186                                  	jnz     short disable_exit
 36187                                  	test	byte [dae_flag],2
 36188                                  	jnz     short disable_exit
 36189                                  	or      byte [dae_flag],2
 36190                                  	mov     dx,'Y ' ; 2059h ; 11/09/2023
 36191                                  	jmp     short dae_1
 36192                                  
 36193                                  ;endif  ;MULTI_CONFIG
 36194                                  
 36195                                  %endif	; 02/11/2022
 36196                                  
 36197                                  
 36198                                  ; 19/04/2019 - Retro DOS v4.0
 36199                                  
 36200                                  ;----------------------------------------------------------------------------
 36201                                  ;
 36202                                  ; procedure : delim
 36203                                  ;
 36204                                  ;----------------------------------------------------------------------------
 36205                                  
 36206                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36207                                  ;
 36208                                  ;;ifdef	MULTI_CONFIG
 36209                                  ;
 36210                                  ;any_delim:
 36211                                  ;       cmp     al,cr
 36212                                  ;       je	short delim_ret
 36213                                  ;       cmp     al,lf
 36214                                  ;       je	short delim_ret
 36215                                  ;       cmp     al,'['
 36216                                  ;       je	short delim_ret
 36217                                  ;       cmp     al,']'
 36218                                  ;       je	short delim_ret
 36219                                  ;
 36220                                  ;;endif  ;MULTI_CONFIG
 36221                                  
 36222                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36223                                  	; (SYSINIT:3450h)	
 36224                                  delim:
 36225 00002FC0 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 36226 00002FC2 7417                    	je	short delim_ret
 36227                                  
 36228 00002FC4 3C00                    	cmp	al,0		; special case for sysinit!!!
 36229 00002FC6 7413                    	je	short delim_ret
 36230                                  
 36231                                  org_delim:			; used by organize routine except for getting
 36232 00002FC8 3C20                    	cmp	al,' '          ; the filename.
 36233 00002FCA 740F                    	je	short delim_ret
 36234 00002FCC 3C09                            cmp     al,tab ; 9
 36235 00002FCE 740B                    	je	short delim_ret
 36236 00002FD0 3C3D                    	cmp	al,'='
 36237 00002FD2 7407                    	je	short delim_ret
 36238 00002FD4 3C2C                    	cmp	al,','
 36239 00002FD6 7403                    	je	short delim_ret
 36240 00002FD8 3C3B                    	cmp	al,';'
 36241                                  
 36242                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36243                                  ;ifdef	MULTI_CONFIG
 36244                                  ;   Make sure there's no chance of a false EOF indication
 36245 00002FDA F8                      	clc	; 09/09/2023 ('SkipDelim' must not be return with cf=1)
 36246                                  ;endif
 36247                                  	; 02/11/2022
 36248                                  delim_ret:
 36249                                  nl_ret:	; 10/09/2023
 36250 00002FDB C3                      	retn
 36251                                  
 36252                                  ;----------------------------------------------------------------------------
 36253                                  ;
 36254                                  ; procedure : newline
 36255                                  ;
 36256                                  ;  newline returns with first character of next line
 36257                                  ;
 36258                                  ;----------------------------------------------------------------------------
 36259                                  
 36260                                  newline:
 36261 00002FDC E80600                  	call	getchr			;skip non-control characters
 36262 00002FDF 72FA                    	jc	short nl_ret
 36263 00002FE1 3C0A                    	cmp	al,lf			;look for line feed
 36264 00002FE3 75F7                    	jne	short newline
 36265                                  
 36266                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36267                                  	;call	getchr
 36268                                  ;nl_ret:
 36269                                  	;retn
 36270                                  	; 10/09/2023
 36271                                  	;jmp	short getchr
 36272                                  
 36273                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36274                                  %if 1
 36275                                  
 36276                                  ;----------------------------------------------------------------------------
 36277                                  ;
 36278                                  ; procedure : getchr
 36279                                  ;
 36280                                  ;----------------------------------------------------------------------------
 36281                                  
 36282                                  	; 24/10/2022
 36283                                  getchr:
 36284                                  	; 12/12/2022
 36285                                  	;push	cx
 36286                                  	;mov	cx,[count]
 36287                                  	;jcxz	nochar
 36288                                  	; 12/12/2022
 36289 00002FE5 833E[D203]01            	cmp	word [count],1 
 36290 00002FEA 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 36291                                  	
 36292 00002FEC 8B36[D603]              	mov	si,[chrptr]
 36293 00002FF0 268A04                  	mov	al,[es:si]
 36294 00002FF3 FF0E[D203]              	dec	word [count]
 36295 00002FF7 FF06[D603]              	inc	word [chrptr]
 36296                                  	; 12/12/202
 36297                                  	; cf=0
 36298                                  	;clc
 36299                                  ;get_ret:
 36300                                  	;pop	cx
 36301                                  	;retn
 36302                                  nochar: 
 36303                                  	; 12/12/2022
 36304                                  	; cf=1
 36305                                  	;stc
 36306                                  	;jmp	short get_ret
 36307                                  	
 36308 00002FFB C3                      	retn
 36309                                  %endif
 36310                                  
 36311                                  ;----------------------------------------------------------------------------
 36312                                  ; 
 36313                                  ; procedure : mapcase
 36314                                  ;
 36315                                  ;----------------------------------------------------------------------------
 36316                                  
 36317                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 36318                                  mapcase:
 36319 00002FFC 51                      	push	cx
 36320 00002FFD 56                      	push	si
 36321 00002FFE 1E                      	push	ds
 36322                                  
 36323 00002FFF 06                      	push	es
 36324 00003000 1F                      	pop	ds
 36325                                  
 36326                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36327                                  ;;ifdef	MULTI_CONFIG
 36328                                  ;
 36329                                  ;	mov	bl,al                   ; same cmd code this line
 36330                                  ;;else
 36331                                  ;;	xor	si,si
 36332                                  ;;endif
 36333                                  	; 02/11/2022
 36334 00003001 31F6                    	xor	si, si
 36335                                  
 36336                                  convloop:
 36337 00003003 AC                      	lodsb
 36338 00003004 3C61                    	cmp	al,'a'
 36339 00003006 7209                    	jb	short noconv
 36340 00003008 3C7A                    	cmp	al,'z'
 36341 0000300A 7705                    	ja	short noconv
 36342 0000300C 2C20                    	sub	al,20h
 36343 0000300E 8844FF                  	mov	[si-1],al
 36344                                  noconv:
 36345                                  
 36346                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36347                                  ;;ifdef	MULTI_CONFIG
 36348                                  ;;
 36349                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 36350                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 36351                                  ;;   the line is a SET command or not (since we don't want to upper-case
 36352                                  ;;   anything after the "=" in a SET)
 36353                                  ;;
 36354                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 36355                                  ;       jne	short check_eol		; no, just check for end-of-line
 36356                                  ;       cmp     al,'='                  ; separator between SET var and value?
 36357                                  ;       je	short convdone		; yes
 36358                                  ;check_eol:
 36359                                  ;       cmp     al,cr
 36360                                  ;       je	short convdone
 36361                                  ;       cmp     al,lf
 36362                                  ;       je	short convdone
 36363                                  ;;endif
 36364                                  	
 36365                                  	; 02/11/2022
 36366 00003011 E2F0                    	loop	convloop
 36367                                  convdone:
 36368 00003013 1F                      	pop	ds
 36369 00003014 5E                      	pop	si
 36370 00003015 59                      	pop	cx
 36371 00003016 C3                      	retn
 36372                                  
 36373                                  ;----------------------------------------------------------------------------
 36374                                  ;
 36375                                  ; procedure : round
 36376                                  ;
 36377                                  ; round the values in memlo and memhi to paragraph boundary.
 36378                                  ; perform bounds check.
 36379                                  ;
 36380                                  ;----------------------------------------------------------------------------
 36381                                  
 36382                                  round:
 36383                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36384 00003017 1E                      	push	ds
 36385 00003018 0E                      	push	cs
 36386 00003019 1F                      	pop	ds
 36387                                  
 36388 0000301A 50                      	push	ax
 36389                                  	;mov	ax,[cs:memlo]
 36390 0000301B A1[DE03]                	mov	ax,[memlo]
 36391                                  
 36392 0000301E E883E0                  	call	ParaRound		; para round up
 36393                                  
 36394                                  	;add	[cs:memhi],ax
 36395 00003021 0106[E003]              	add	[memhi],ax
 36396                                  	;mov	word [cs:memlo],0
 36397 00003025 C706[DE03]0000          	mov	word [memlo],0
 36398                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 36399 0000302B A1[E003]                	mov	ax,[memhi]
 36400                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 36401 0000302E 3B06[A302]              	cmp	ax,[ALLOCLIM]
 36402                                  	;jae	short mem_err
 36403                                  	; 17/09/2023
 36404 00003032 7322                    	jae	short mem_err2 ; ds = cs
 36405                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 36406 00003034 F606[1014]02            	test	byte [setdevmarkflag],for_devmark ; 2
 36407 00003039 7416                    	jz	short skip_set_devmarksize
 36408 0000303B 06                      	push	es
 36409 0000303C 56                      	push	si
 36410                                  	;mov	si,[cs:devmark_addr]
 36411 0000303D 8B36[0E14]              	mov	si,[devmark_addr]
 36412 00003041 8EC6                    	mov	es,si
 36413 00003043 29F0                    	sub	ax,si
 36414 00003045 48                      	dec	ax
 36415                                  	;mov	[es:3],ax
 36416 00003046 26A30300                	mov	[es:devmark.size],ax	; paragraph
 36417                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 36418 0000304A 8026[1014]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 36419 0000304F 5E                      	pop	si
 36420 00003050 07                      	pop	es
 36421                                  skip_set_devmarksize:
 36422 00003051 58                      	pop	ax
 36423                                  
 36424                                  	; 10/09/2023
 36425 00003052 1F                      	pop	ds
 36426                                  
 36427                                  	; 11/12/2022
 36428                                  	; cf = 0
 36429                                  	; 02/11/2022
 36430                                  	;clc	; ? (not needed here)	; clear carry
 36431 00003053 C3                      	retn
 36432                                  
 36433                                  ;----------------------------------------------------------------------------
 36434                                  
 36435                                  mem_err:
 36436                                  	; 11/12/2022
 36437 00003054 0E                      	push	cs
 36438 00003055 1F                      	pop	ds
 36439                                  mem_err2:
 36440 00003056 BA[3737]                	mov	dx,badmem
 36441                                  	;push	cs
 36442                                  	;pop	ds
 36443 00003059 E83102                  	call	print
 36444 0000305C E9EBD7                  	jmp	stall
 36445                                  
 36446                                  ;----------------------------------------------------------------------------
 36447                                  ;
 36448                                  ; procedure : calldev
 36449                                  ;
 36450                                  ;----------------------------------------------------------------------------
 36451                                  
 36452                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36453                                  	; (SYSINIT:34E0h)
 36454                                  calldev:
 36455 0000305F 2E8E1E[681E]            	mov	ds,[cs:DevEntry+2]
 36456 00003064 2E031E[661E]            	add	bx,[cs:DevEntry]	; do a little relocation
 36457 00003069 8B07                    	mov	ax,[bx]
 36458                                  
 36459 0000306B 2EFF36[661E]            	push	word [cs:DevEntry]
 36460 00003070 2EA3[661E]              	mov	[cs:DevEntry],ax
 36461 00003074 BB[E603]                	mov	bx,packet
 36462 00003077 2EFF1E[661E]            	call	far [cs:DevEntry]
 36463 0000307C 2E8F06[661E]            	pop	word [cs:DevEntry]
 36464 00003081 C3                      	retn
 36465                                  
 36466                                  ;----------------------------------------------------------------------------
 36467                                  ;
 36468                                  ; procedure : todigit
 36469                                  ;
 36470                                  ;----------------------------------------------------------------------------
 36471                                  
 36472                                  todigit:
 36473 00003082 2C30                    	sub	al,'0'
 36474                                  	;jb	short notdig  ; 02/11/2022
 36475                                  	; 12/12/2022
 36476 00003084 7203                    	jb	short notdig2
 36477                                  	;cmp	al,9
 36478                                  	;ja	short notdig
 36479                                  	;clc
 36480                                  	;retn
 36481                                  	; 12/12/2022
 36482 00003086 3C0A                    	cmp	al,10
 36483 00003088 F5                      	cmc
 36484                                  notdig:
 36485                                  	;stc
 36486                                  notdig2:
 36487 00003089 C3                      	retn
 36488                                  
 36489                                  ;----------------------------------------------------------------------------
 36490                                  ;
 36491                                  ; procedure : getnum
 36492                                  ;
 36493                                  ; getnum parses a decimal number.
 36494                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 36495                                  ; error), if number is bad carry is set, zero is set, ax=0.
 36496                                  ;
 36497                                  ;----------------------------------------------------------------------------
 36498                                  
 36499                                  getnum:
 36500 0000308A 53                      	push	bx
 36501 0000308B 31DB                    	xor	bx,bx			; running count is zero
 36502                                  b2:
 36503 0000308D E8F2FF                  	call	todigit 		; do we have a digit ?
 36504 00003090 7247                    	jc	short badnum		; no, bomb
 36505                                  
 36506 00003092 93                      	xchg	ax,bx			; put total in ax
 36507 00003093 53                      	push	bx			; save digit (0 to 9)
 36508                                  	;mov	bx,10			; base of arithmetic
 36509                                  	; 12/12/2022
 36510 00003094 B30A                    	mov	bl,10
 36511 00003096 F7E3                    	mul	bx			; shift by one decimal digit
 36512 00003098 5B                      	pop	bx			; get back digit (0 to 9)
 36513 00003099 00D8                    	add	al,bl			; get total
 36514 0000309B 80D400                  	adc	ah,0			; make that 16 bits
 36515 0000309E 7239                    	jc	short badnum		; too big a number
 36516                                  
 36517 000030A0 93                      	xchg	ax,bx			; stash total
 36518                                  
 36519 000030A1 E841FF                  	call	getchr			;get next digit
 36520 000030A4 722D                    	jc	short b1		; no more characters
 36521 000030A6 3C20                    	cmp	al,' ' 			; space?
 36522 000030A8 741F                    	je	short b15		; then end of digits
 36523 000030AA 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 36524 000030AC 741B                    	je	short b15		; then end of digits.
 36525 000030AE 3C09                    	cmp	al, tab ; 9		; tab
 36526 000030B0 7417                    	je	short b15
 36527 000030B2 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 36528 000030B7 7410                    	je	short b15
 36529 000030B9 3C2F                    	cmp	al,'/'			; see if another switch follows
 36530                                  	;nop				; cas - remnant of old bad code
 36531                                  	;nop
 36532                                  	; 12/12/2022
 36533                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36534                                  	;nop
 36535                                  	;nop
 36536 000030BB 740C                    	je	short b15
 36537 000030BD 3C0A                    	cmp	al,lf			; line-feed?
 36538 000030BF 7408                    	je	short b15
 36539 000030C1 3C0D                    	cmp	al,cr			; carriage return?
 36540 000030C3 7404                    	je	short b15
 36541 000030C5 08C0                    	or	al,al			; end of line separator?
 36542 000030C7 75C4                    	jnz	short b2		; no, try as a valid char...
 36543                                  b15:
 36544 000030C9 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 36545 000030CE 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 36546                                  b1:
 36547 000030D3 89D8                    	mov	ax,bx			; get proper count
 36548 000030D5 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 36549 000030D7 5B                      	pop	bx
 36550 000030D8 C3                      	retn
 36551                                  badnum:
 36552                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36553                                  	;mov	byte [cs:sepchr],0
 36554 000030D9 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 36555                                  	; 12 /12/2022
 36556 000030DB 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 36557 000030DF 5B                      	pop	bx
 36558 000030E0 F9                      	stc				; and carry set
 36559 000030E1 C3                      	retn
 36560                                  
 36561                                  ;****************************************************************************
 36562                                  
 36563                                  setdoscountryinfo:
 36564                                  
 36565                                  ;----------------------------------------------------------------------------
 36566                                  ;input: es:di -> pointer to dos_country_cdpg_info
 36567                                  ;	ds:0  -> buffer.
 36568                                  ;	si = 0
 36569                                  ;	ax = country id
 36570                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 36571                                  ;	bx = file handle
 36572                                  ;	this routine can handle maximum 438 country_data entries.
 36573                                  ;
 36574                                  ;output: dos_country_cdpg_info set.
 36575                                  ;	 carry set if any file read failure or wrong information in the file.
 36576                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 36577                                  ;	 codepage_id in the file.
 36578                                  ;----------------------------------------------------------------------------
 36579                                  
 36580                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36581                                  
 36582 000030E2 57                      	push	di
 36583 000030E3 50                      	push	ax
 36584 000030E4 52                      	push	dx
 36585                                  
 36586 000030E5 31C9                    	xor	cx,cx
 36587 000030E7 31D2                    	xor	dx,dx
 36588 000030E9 B80002                  	mov	ax,512			;read 512 bytes
 36589 000030EC E84301                  	call	readincontrolbuffer	;read the file header
 36590 000030EF 724A                    	jc	short setdosdata_fail
 36591                                  
 36592 000030F1 06                      	push	es
 36593 000030F2 56                      	push	si
 36594                                  
 36595 000030F3 0E                      	push	cs
 36596 000030F4 07                      	pop	es
 36597                                  
 36598 000030F5 BF[5933]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 36599 000030F8 B90800                  	mov	cx,8			;length of the signature
 36600 000030FB F3A6                    	repz	cmpsb
 36601                                  
 36602 000030FD 5E                      	pop	si
 36603 000030FE 07                      	pop	es
 36604 000030FF 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 36605                                  
 36606 00003101 83C612                  	add	si,18			;si -> county info type
 36607 00003104 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 36608 00003107 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 36609                                  
 36610 00003109 46                      	inc	si			;si -> file offset
 36611 0000310A 8B14                    	mov	dx,[si]			;get the info file offset.
 36612 0000310C 8B4C02                  	mov	cx,[si+2]
 36613 0000310F B80018                  	mov	ax,6144			;read 6144 bytes.
 36614 00003112 E81D01                  	call	readincontrolbuffer	;read info
 36615 00003115 7224                    	jc	short setdosdata_fail
 36616                                  
 36617 00003117 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 36618 00003119 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 36619 0000311D 771C                    	ja	short setdosdata_fail
 36620                                  
 36621 0000311F 46                      	inc	si
 36622 00003120 46                      	inc	si			;si -> entry information packet
 36623 00003121 5A                      	pop	dx			;restore code page id
 36624 00003122 58                      	pop	ax			;restore country id
 36625 00003123 5F                      	pop	di
 36626                                  
 36627                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 36628 00003124 3B4402                  	cmp	ax,[si+2]		;compare country_id
 36629 00003127 7509                    	jne	short setdoscntry_next
 36630                                  
 36631                                  	;cmp	dx,0			;no user specified code page ?
 36632                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 36633                                  	; 10/09/2023
 36634 00003129 09D2                    	or	dx,dx ; cmp dx,0
 36635 0000312B 7413                    	jz	short setdoscntry_any_codepage
 36636 0000312D 3B5404                  	cmp	dx,[si+4]		;compare code page id
 36637 00003130 7411                    	je	short setdoscntry_got_it
 36638                                  
 36639                                  setdoscntry_next:
 36640 00003132 0334                    	add	si,[si]			;next entry
 36641 00003134 46                      	inc	si
 36642 00003135 46                      	inc	si			;take a word for size of entry itself
 36643 00003136 E2EC                    	loop	setdoscntry_find
 36644                                  
 36645                                  	;mov	cx,-1			;signals that bad country id entered.
 36646                                  	; 10/09/2023
 36647 00003138 49                      	dec	cx ; 0 -> -1
 36648                                  setdoscntry_fail:
 36649 00003139 F9                      	stc
 36650 0000313A C3                      	retn
 36651                                  
 36652                                  setdosdata_fail:
 36653 0000313B 5E                      	pop	si
 36654 0000313C 59                      	pop	cx
 36655 0000313D 5F                      	pop	di
 36656 0000313E EBF9                    	jmp	short setdoscntry_fail
 36657                                  
 36658                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 36659 00003140 8B5404                  	mov	dx,[si+4]
 36660                                  
 36661                                  setdoscntry_got_it:			;found the matching entry
 36662 00003143 2E8916[6133]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 36663 00003148 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 36664 0000314B 8B4C0C                  	mov	cx,[si+12]
 36665 0000314E B80002                  	mov	ax,512 			;read 512 bytes
 36666 00003151 E8DE00                  	call	readincontrolbuffer
 36667 00003154 72E3                    	jc	short setdoscntry_fail
 36668                                  
 36669 00003156 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 36670 00003158 46                      	inc	si
 36671 00003159 46                      	inc	si			;si -> first entry
 36672                                  
 36673                                  setdoscntry_data:
 36674 0000315A 57                      	push	di			;es:di -> dos_country_cdpg_info
 36675 0000315B 51                      	push	cx			;save # of entry left
 36676 0000315C 56                      	push	si			;si -> current entry in control buffer
 36677                                  
 36678 0000315D 8A4402                  	mov	al,[si+2]		;get data entry id
 36679 00003160 E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 36680 00003163 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 36681                                  
 36682 00003165 8B5404                  	mov	dx,[si+4]		;get offset of data
 36683 00003168 8B4C06                  	mov	cx,[si+6]
 36684 0000316B B80042                  	mov	ax,4200h
 36685 0000316E F9                      	stc
 36686 0000316F CD21                    	int	21h			;move pointer
 36687 00003171 72C8                    	jc	short setdosdata_fail
 36688                                  
 36689 00003173 BA0002                  	mov	dx,512			;start of data buffer
 36690 00003176 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 36691 00003179 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 36692 0000317B F9                      	stc
 36693 0000317C CD21                    	int	21h			;read the country.sys data
 36694 0000317E 72BB                    	jc	short setdosdata_fail 	;read failure
 36695                                  
 36696 00003180 39C8                    	cmp	ax,cx
 36697 00003182 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 36698                                  
 36699 00003184 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 36700 00003187 8B4C06                  	mov	cx,[si+6]
 36701 0000318A B80042                  	mov	ax,4200h
 36702 0000318D F9                      	stc
 36703 0000318E CD21                    	int	21h			;move pointer back again
 36704 00003190 72A9                    	jc	short setdosdata_fail
 36705                                  
 36706 00003192 56                      	push	si
 36707 00003193 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 36708 00003196 8B0C                    	mov	cx,[si]
 36709 00003198 5E                      	pop	si
 36710 00003199 BA0002                  	mov	dx,512			;start of data buffer
 36711 0000319C 83C10A                  	add	cx,10			;signature + a word for the length itself
 36712 0000319F B43F                    	mov	ah,3Fh			;read the data from the file.
 36713 000031A1 F9                      	stc
 36714 000031A2 CD21                    	int	21h
 36715 000031A4 7295                    	jc	short setdosdata_fail
 36716                                  
 36717 000031A6 39C8                    	cmp	ax,cx
 36718 000031A8 7591                    	jne	short setdosdata_fail
 36719                                  
 36720 000031AA 8A4402                  	mov	al,[si+2]		;save data id for future use.
 36721 000031AD BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 36722 000031B0 8B0C                    	mov	cx,[si]			;get the length of the file
 36723 000031B2 41                      	inc	cx			;take care of a word for lenght of tab
 36724 000031B3 41                      	inc	cx			;itself.
 36725 000031B4 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 36726 000031B8 7781                    	ja	short setdosdata_fail
 36727                                  
 36728                                  	;if	bugfix
 36729 000031BA E83100                  	call	setdbcs_before_copy
 36730                                  	;endif
 36731                                  
 36732 000031BD 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 36733 000031BF 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 36734                                  
 36735 000031C1 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 36736                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 36737 000031C5 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 36738                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 36739                                  	
 36740 000031C9 57                      	push	di			;save di
 36741                                  
 36742                                  	;push	ax
 36743                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 36744                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 36745                                  	;pop	ax
 36746                                  	; 10/09/2023
 36747 000031CA 2EFF36[6133]            	push	word [cs:cntrycodepage_id]
 36748 000031CF 8F4404                  	pop	word [si+4]
 36749                                  
 36750                                  setdoscntry_mov:
 36751 000031D2 F3A4                    	rep	movsb			;copy the table into dos
 36752 000031D4 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 36753 000031D6 7509                    	jne	short setdoscntry_data_next
 36754                                  
 36755 000031D8 5F                      	pop	di			;restore di
 36756 000031D9 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 36757                                  	;pop	word [es:di+26]		;restore
 36758 000031DD 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 36759                                  	;pop	word [es:di+24]
 36760                                  
 36761                                  setdoscntry_data_next:
 36762 000031E1 5E                      	pop	si			;restore control buffer pointer
 36763 000031E2 59                      	pop	cx			;restore # of entries left
 36764 000031E3 5F                      	pop	di			;restore pointer to dso_country_cdpg
 36765 000031E4 0334                    	add	si,[si]			;try to get the next entry
 36766 000031E6 46                      	inc	si
 36767 000031E7 46                      	inc	si			;take a word of entry length itself
 36768 000031E8 49                      	dec	cx
 36769                                  	; 10/09/2023
 36770 000031E9 741B                    	jz	short setdoscntry_ok 
 36771                                  	;cmp	cx,0
 36772                                  	;je	short setdoscntry_ok
 36773 000031EB E96CFF                  	jmp	setdoscntry_data
 36774                                  
 36775                                  	; 18/12/2022
 36776                                  ;setdoscntry_ok:
 36777                                  	;retn
 36778                                  
 36779                                  ;----------------------------------------------------------------------------
 36780                                  
 36781                                  	;if	bugfix
 36782                                  
 36783                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36784                                  
 36785                                  setdbcs_before_copy:
 36786 000031EE 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 36787 000031F0 7514                    	jne	short sdbcsbc		; jump if not
 36788                                  	
 36789                                  	; 10/09/2023
 36790 000031F2 50                      	push	ax
 36791 000031F3 31C0                    	xor	ax,ax
 36792 000031F5 263905                  	cmp	[es:di],ax ; 0
 36793 000031F8 740B                    	je	short sdbcsbc_pop
 36794                                  	
 36795                                  	;cmp	word [es:di],0		; zero byte data block?
 36796                                  	;je	short sdbcsbc		; jump if so
 36797                                  
 36798 000031FA 57                      	push	di
 36799                                  	; 10/09/2023
 36800                                  	;push	ax
 36801 000031FB 51                      	push	cx
 36802 000031FC 268B0D                  	mov	cx,[es:di]		; load block length
 36803                                  	;add	di,2			; points actual data
 36804 000031FF 47                      	inc	di
 36805 00003200 47                      	inc	di
 36806                                  	;xor	al,al			; fill bytes
 36807 00003201 F3AA                    	rep	stosb			; clear data block
 36808 00003203 59                      	pop	cx
 36809                                  	;pop	ax
 36810 00003204 5F                      	pop	di
 36811                                  
 36812                                  sdbcsbc_pop:	; 10/09/2023
 36813 00003205 58                      	pop	ax
 36814                                  sdbcsbc:
 36815                                  setdoscntry_ok:	; 18/12/2022
 36816 00003206 C3                      	retn
 36817                                  
 36818                                  	;endif
 36819                                  
 36820                                  ;----------------------------------------------------------------------------
 36821                                  
 36822                                  getcountrydestination:
 36823                                  
 36824                                  ;----------------------------------------------------------------------------
 36825                                  ;get the destination address in the dos country info table.
 36826                                  ;
 36827                                  ;input: al - data id
 36828                                  ;	es:di -> dos_country_cdpg_info
 36829                                  ;on return:
 36830                                  ;	es:di -> destination address of the matching data id
 36831                                  ;	carry set if no matching data id found in dos.
 36832                                  ;----------------------------------------------------------------------------
 36833                                  
 36834                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36835                                  
 36836 00003207 51                      	push	cx
 36837                                  	;add	di,74
 36838 00003208 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 36839                                  					;skip the reserved area, syscodepage etc.
 36840 0000320B 268B0D                  	mov	cx,[es:di]		;get the number of entries
 36841 0000320E 47                      	inc	di
 36842 0000320F 47                      	inc	di			;si -> the first start entry id
 36843                                  
 36844                                  getcntrydest:
 36845 00003210 263805                  	cmp	byte [es:di],al
 36846 00003213 7413                    	je	short getcntrydest_ok
 36847                                  
 36848 00003215 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 36849 00003219 7405                    	je	short getcntrydest_1
 36850                                  
 36851 0000321B 83C705                  	add	di,5			;next data id
 36852 0000321E EB03                    	jmp	short getcntrydest_loop
 36853                                  
 36854                                  getcntrydest_1:
 36855                                  	;add	di,41
 36856 00003220 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 36857                                  getcntrydest_loop:
 36858 00003223 E2EB                    	loop	getcntrydest
 36859 00003225 F9                      	stc
 36860                                  	;jmp	short getcntrydest_exit
 36861                                  getcntrydest_exit:
 36862                                  	; 10/09/2023
 36863 00003226 59                      	pop	cx
 36864 00003227 C3                      	retn
 36865                                  
 36866                                  getcntrydest_ok:
 36867                                  	; 10/09/2023
 36868 00003228 47                      	inc	di
 36869                                  
 36870                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 36871                                  ;	jne	short getcntrydest_ok1
 36872                                  ;
 36873                                  ;	;inc	di			;now di -> cccountryinfolen
 36874                                  ;	jmp	short getcntrydest_exit
 36875                                  
 36876                                  	; 10/09/2023
 36877 00003229 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 36878 0000322B 74F9                    	je	short getcntrydest_exit
 36879                                  
 36880                                  getcntrydest_ok1:
 36881                                  	;les	di,[es:di+1]		;get the destination in es:di
 36882                                  	; 10/09/2023
 36883 0000322D 26C43D                  	les	di,[es:di]
 36884                                  ;getcntrydest_exit:
 36885 00003230 59                      	pop	cx
 36886 00003231 C3                      	retn
 36887                                  
 36888                                  ;----------------------------------------------------------------------------
 36889                                  
 36890                                  readincontrolbuffer:
 36891                                  
 36892                                  ;----------------------------------------------------------------------------
 36893                                  ;move file pointer to cx:dx
 36894                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 36895                                  ;si will be set to 0 hence ds:si points to the control buffer.
 36896                                  ;
 36897                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 36898                                  ;	 be moved.
 36899                                  ;	 ax - # of bytes to read
 36900                                  ;	 bx - file handle
 36901                                  ;	 ds - buffer seg.
 36902                                  ;return: the control data information is read into ds:0 - ds:0200.
 36903                                  ;	 cx,dx value destroyed.
 36904                                  ;	 carry set if error in reading file.
 36905                                  ;----------------------------------------------------------------------------
 36906                                  
 36907 00003232 50                      	push	ax			;# of bytes to read
 36908 00003233 B80042                  	mov	ax,4200h
 36909 00003236 F9                      	stc
 36910 00003237 CD21                    	int	21h			;move pointer
 36911 00003239 59                      	pop	cx			;# of bytes to read
 36912 0000323A 7209                    	jc	short ricb_exit
 36913                                  
 36914 0000323C 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 36915 0000323E 31F6                    	xor	si,si
 36916 00003240 B43F                    	mov	ah,3Fh			;read into the buffer
 36917 00003242 F9                      	stc
 36918 00003243 CD21                    	int	21h			;should be less than 1024 bytes.
 36919                                  ricb_exit:
 36920 00003245 C3                      	retn
 36921                                  
 36922                                  ;----------------------------------------------------------------------------
 36923                                  
 36924                                  ;! set_country_path procedure is not called from anywhere !
 36925                                  ; Erdogan Tan - 04/08/2023 (Retro DOS v4.2)
 36926                                  %if 0
 36927                                  
 36928                                  set_country_path:
 36929                                  
 36930                                  ;----------------------------------------------------------------------------
 36931                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 36932                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 36933                                  ;     assumes current directory is the root directory.
 36934                                  ;out: ds:di -> full path (cntry_drv).
 36935                                  ;     set the cntry_drv string from the country=,,path command.
 36936                                  ;     ds, es, si value saved.
 36937                                  ;----------------------------------------------------------------------------
 36938                                  
 36939                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 36940                                  	; (SYSINIT:4EF4h)
 36941                                  
 36942                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 36943                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:36DDh)
 36944                                  
 36945                                  	push	si
 36946                                  
 36947                                  	push	ds			;switch ds, es
 36948                                  	push	es
 36949                                  	pop	ds
 36950                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 36951                                  
 36952                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 36953                                  	jc	short scp_default_drv 	;no, use current default drive.
 36954                                  
 36955                                  	mov	al,[si]
 36956                                  	inc	si
 36957                                  	inc	si			;si -> next char after ":"
 36958                                  	jmp	short scp_setdrv
 36959                                  
 36960                                  scp_default_drv:
 36961                                  	mov	ah,19h
 36962                                  	int	21h
 36963                                  	add	al,"A"			;convert it to a character.
 36964                                  
 36965                                  scp_setdrv:
 36966                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 36967                                  	mov	di,cntry_path
 36968                                  	mov	al,[si]
 36969                                  	cmp	al, "\"
 36970                                  	je	short scp_root_dir
 36971                                  
 36972                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 36973                                  	;je	short scp_root_dir
 36974                                  	;jmp	short scp_path
 36975                                  	; 04/01/2023
 36976                                  	jne	short scp_path
 36977                                  
 36978                                  scp_root_dir:
 36979                                  	dec	di			;di -> cntry_root
 36980                                  scp_path:
 36981                                  	call	move_asciiz		;copy it
 36982                                  
 36983                                  	mov	di,cntry_drv
 36984                                  scpath_exit:
 36985                                  
 36986                                  	push	ds			;switch ds, es
 36987                                  	push	es
 36988                                  	pop	ds
 36989                                  	pop	es			;ds, es value restored
 36990                                  
 36991                                  	pop	si
 36992                                  	retn
 36993                                  
 36994                                  %endif
 36995                                  
 36996                                  ;----------------------------------------------------------------------------
 36997                                  
 36998                                  chk_drive_letter:
 36999                                  
 37000                                  ;check if ds:[si] is a drive letter followed by ":".
 37001                                  ;assume that every alpha character is already converted to upper case.
 37002                                  ;carry set if not.
 37003                                  
 37004                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 37005                                  
 37006 00003246 50                      	push	ax
 37007 00003247 803C41                  	cmp	byte [si],"A"
 37008                                  	;jb	short cdletter_no
 37009 0000324A 720C                    	jb	short cdletter_exit
 37010 0000324C 803C5A                  	cmp	byte [si],"Z"
 37011 0000324F 7706                    	ja	short cdletter_no
 37012 00003251 807C013A                	cmp	byte [si+1],":"
 37013                                  	;jne	short cdletter_no
 37014                                  	;jmp	short cdletter_exit
 37015                                  	; 10/09/2023
 37016 00003255 7401                    	je	short cdletter_exit
 37017                                  
 37018                                  cdletter_no:
 37019 00003257 F9                      	stc
 37020                                  cdletter_exit:
 37021 00003258 58                      	pop	ax
 37022 00003259 C3                      	retn
 37023                                  
 37024                                  ;----------------------------------------------------------------------------
 37025                                  
 37026                                  move_asciiz:
 37027                                  
 37028                                  ;in: ds:si -> source es:di -> target
 37029                                  ;out: copy the string until 0.
 37030                                  ;assumes there exists a 0.
 37031                                  
 37032                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 37033                                  
 37034                                  masciiz_loop:
 37035                                  	; 10/09/2023
 37036 0000325A F604FF                  	test	byte [si],0FFh
 37037 0000325D A4                      	movsb
 37038                                  	;cmp	byte [si-1],0	; was it 0?
 37039                                  	;jne	short masciiz_loop
 37040 0000325E 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 37041 00003260 C3                      	retn
 37042                                  
 37043                                  
 37044                                  ;----------------------------------------------------------------------------
 37045                                  
 37046                                  ;	ds:dx points to string to output (asciz)
 37047                                  ;
 37048                                  ;	prints <badld_pre> <string> <badld_post>
 37049                                  
 37050                                  badfil:
 37051 00003261 0E                      	push	cs
 37052 00003262 07                      	pop	es
 37053                                  
 37054 00003263 89D6                    	mov	si,dx
 37055                                  badload:
 37056 00003265 BA[A136]                	mov	dx,badld_pre	; want to print config error
 37057 00003268 BB[5E36]                	mov	bx,crlfm
 37058                                  prnerr:
 37059 0000326B 0E                      	push	cs
 37060 0000326C 1F                      	pop	ds ; *
 37061 0000326D E81D00                  	call	print
 37062                                  prn1:
 37063 00003270 268A14                  	mov	dl,[es:si]
 37064 00003273 08D2                    	or	dl,dl
 37065 00003275 7407                    	jz	short prn2
 37066 00003277 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 37067 00003279 CD21                    	int	21h
 37068 0000327B 46                      	inc	si
 37069 0000327C EBF2                    	jmp	short prn1
 37070                                  prn2:
 37071 0000327E 89DA                    	mov	dx,bx
 37072 00003280 E80A00                  	call	print
 37073                                  	; 11/12/2022
 37074                                  	; ds = cs ; *
 37075 00003283 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 37076                                  	;cmp	byte [cs:donotshownum],1 
 37077 00003288 7407                    	je	short prnexit
 37078                                  	
 37079                                  	; 18/12/2022
 37080                                  	;call	error_line
 37081 0000328A E91EF4                  	jmp	error_line
 37082                                  ;prnexit:
 37083                                  	;retn
 37084                                  
 37085                                  ;----------------------------------------------------------------------------
 37086                                  
 37087                                  print:
 37088 0000328D B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 37089 0000328F CD21                    	int	21h
 37090                                  prnexit:	; 18/12/2022
 37091 00003291 C3                      	retn
 37092                                  
 37093                                  ;----------------------------------------------------------------------------
 37094                                  
 37095                                  ;  open device pointed to by dx, al has access code
 37096                                  ;   if unable to open do a device open null device instead
 37097                                  
 37098                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 37099                                  	; (SYSINIT:3764h)
 37100                                  open_dev:
 37101 00003292 E80500                  	call	open_file
 37102 00003295 7309                    	jnc	short open_dev3
 37103                                  
 37104                                  open_dev1:
 37105 00003297 BA[FA32]                	mov	dx,nuldev
 37106                                  	; 18/12/2022
 37107                                  	;call	open_file
 37108                                  ;of_retn:
 37109                                  	;retn
 37110                                  	; 18/12/2022
 37111                                  	;jmp	short open_file
 37112                                  open_file:
 37113 0000329A B43D                    	mov	ah,OPEN	; 3Dh
 37114 0000329C F9                      	stc
 37115 0000329D CD21                    	int	21h
 37116                                  of_retn:	; 18/12/2022
 37117 0000329F C3                      	retn
 37118                                  
 37119                                  open_dev3:
 37120 000032A0 89C3                    	mov	bx,ax			; handle from open to bx
 37121                                  	;;xor	ax,ax			; get device info
 37122                                  	;;mov	ah,IOCTL ; 44h
 37123                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 37124                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37125                                  	;xor	ax,ax
 37126                                  	;mov	ah,44h	; IOCTL
 37127                                  	; 11/12/2022
 37128 000032A2 B80044                  	mov	ax,4400h ; IOCTL<<8 
 37129                                  
 37130 000032A5 CD21                    	int	21h
 37131                                  
 37132 000032A7 F6C280                  	test	dl,10000000b ; 80h
 37133 000032AA 75F3                    	jnz	short of_retn
 37134                                  
 37135 000032AC B43E                    	mov	ah,CLOSE ; 3Eh
 37136 000032AE CD21                    	int	21h
 37137 000032B0 EBE5                    	jmp	short open_dev1
 37138                                  
 37139                                  ;----------------------------------------------------------------------------
 37140                                  
 37141                                  ; 18/12/2022
 37142                                  %if 0
 37143                                  open_file:
 37144                                  	mov	ah,OPEN	; 3Dh
 37145                                  	stc
 37146                                  	int	21h
 37147                                  	retn
 37148                                  %endif
 37149                                  
 37150                                  ;----------------------------------------------------------------------------
 37151                                  
 37152                                  ; test int24. return back to dos with the fake user response of "fail"
 37153                                  
 37154                                  int24:
 37155 000032B2 B003                    	mov	al,3			; fail the system call
 37156 000032B4 CF                      	iret				; return back to dos.
 37157                                  
 37158                                  ; 19/04/2019 - Retro DOS v4.0
 37159                                  
 37160                                  ;----------------------------------------------------------------------------
 37161                                  ; DATA
 37162                                  ;----------------------------------------------------------------------------
 37163                                  
 37164                                  ;include copyrigh.inc			; copyright statement
 37165                                  
 37166                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 37167                                  
 37168                                  ;MsDosVersion6Copyr:
 37169                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 37170                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 37171                                  
 37172                                  ; 22/10/2022
 37173                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 37174                                  
 37175                                  ; 28/12/2022
 37176                                  %if 0
 37177                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37178                                  MsDosVersion5Copyr:
 37179                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 37180                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 37181                                  %endif
 37182                                  
 37183                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37184                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37185                                  ; 20/04/2019 - Retro DOS v4.0
 37186                                  ;BOOTMES:
 37187                                  ;	db      13
 37188                                  ;	db      10
 37189                                  ;	db      "MS-DOS version "
 37190                                  ;	db      MAJOR_VERSION + "0"
 37191                                  ;	db      "."
 37192                                  ;	db      (MINOR_VERSION / 10) + "0"
 37193                                  ;	db      (MINOR_VERSION % 10) + "0"
 37194                                  ;	db      13,10
 37195                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 37196                                  ;	; 22/10/2022
 37197                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 37198                                  ;	;
 37199                                  ;	db	0
 37200                                  
 37201                                  	; 12/12/2022
 37202 000032B5 00                      	db	0
 37203                                  ; 12/12/2022
 37204                                  BOOTMES:
 37205 000032B6 0D0A                    	db	13,10
 37206                                  	;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 37207                                  	; 28/12/2022
 37208 000032B8 526574726F20444F53-     	db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 37208 000032C1 2076342E3120284D6F-
 37208 000032CA 646966696564204D53-
 37208 000032D3 444F5320352E302920 
 37209 000032DC 0D0A                    	db	13,10
 37210                                  	;db	"by Erdogan Tan [2022] "
 37211 000032DE 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 37211 000032E7 6E2054616E205B3230-
 37211 000032F0 32335D20           
 37212 000032F4 0D0A                    	db	13,10
 37213 000032F6 0D0A2400                	db	13,10,"$",0
 37214                                  
 37215 000032FA 4E554C00                nuldev:	db	"NUL",0
 37216 000032FE 434F4E00                condev:	db	"CON",0
 37217 00003302 41555800                auxdev:	db	"AUX",0
 37218 00003306 50524E00                prndev:	db	"PRN",0
 37219                                  
 37220                                  ;IFDEF	CONFIGPROC
 37221 0000330A 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 37221 00003313 595300             
 37222                                  
 37223 00003316 413A                    cntry_drv:  db	"A:"
 37224 00003318 5C                      cntry_root: db	"\"
 37225 00003319 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 37225 00003322 595300             
 37226                                  	    ;db	52 dup (0)
 37227 00003325 00<rep 34h>             	    times 52 db 0	
 37228                                  
 37229                                  country_file_signature:
 37230 00003359 FF434F554E545259        	db	0FFh,'COUNTRY'
 37231                                  
 37232                                  cntrycodepage_id: 
 37233 00003361 0000                    	dw	0 	
 37234                                  
 37235                                  ;ENDIF ; CONFIGPROC
 37236                                  
 37237                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37238                                  ;;ifdef	MULTI_CONFIG
 37239                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 37240                                  ;tmplate: db	64                      ; must precede commnd
 37241                                  ;;endif
 37242                                  	; 02/11/2022
 37243                                  	;db	12                      ; size of commnd line (excl. null)
 37244                                  
 37245 00003363 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 37245 0000336C 434F4D00           
 37246                                  	;db	51 dup (0)
 37247 00003370 00<rep 33h>             	times	51 db 0
 37248                                  ;endif
 37249                                  
 37250                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37251                                  ;;ifdef	MULTI_CONFIG
 37252                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 37253                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 37254                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 37255                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 37256                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 37257                                  ;	 db	9,"A:\DOS /P",0		;
 37258                                  ;def_swchr:	
 37259                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 37260                                  ;;endif
 37261                                  
 37262                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37263                                  ;command_line:
 37264                                  ;	db	2,"/P"			; default command.com args
 37265                                  ;	;db	125 dup (0)
 37266                                  ;	times	125 db 0
 37267                                  
 37268                                  pathstring:
 37269                                  	;db	64 dup (0)
 37270 000033A3 00<rep 40h>             	times	64 db 0
 37271                                  
 37272                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37273                                  %if 0
 37274                                  
 37275                                  dae_flag:
 37276                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 37277                                  
 37278                                  ;ifdef	MULTI_CONFIG
 37279                                  
 37280                                  MAX_MULTI_CONFIG equ 10
 37281                                  
 37282                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 37283                                  
 37284                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 37285                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 37286                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 37287                                  bLastCol:	db      0               ; ending column on status line
 37288                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 37289                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 37290                                                                          ; 2=disable default 2-second delay
 37291                                  bCRTPage:	db      0               ; value saved from BIOS data area
 37292                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 37293                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 37294                                  bDefBlock:	db      1               ; default block #
 37295                                  bMaxBlock:	db      0               ; maxmimum block #
 37296                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 37297                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 37298                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 37299                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 37300                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 37301                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 37302                                  
 37303                                  szBoot:		db      "CONFIG=",0
 37304                                  szMenu:		db      "MENU",0
 37305                                  szCommon:	db      "COMMON",0
 37306                                  
 37307                                  ;endif	;MULTI_CONFIG
 37308                                  
 37309                                  comtab:	 ; label byte
 37310                                  
 37311                                  ;            cmd len    command         cmd code
 37312                                  ;            -------    -------         --------
 37313                                  
 37314                                  ;ifdef MULTI_CONFIG
 37315                                          db      1,      "[",            CONFIG_BEGIN
 37316                                  ;endif
 37317                                          db      5,      "BREAK",        CONFIG_BREAK
 37318                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 37319                                          db      7,      "COMMENT",      CONFIG_COMMENT
 37320                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 37321                                          db      6,      "DEVICE",       CONFIG_DEVICE
 37322                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37323                                          db      3,      "DOS",          CONFIG_DOS
 37324                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37325                                          db      4,      "FCBS",         CONFIG_FCBS
 37326                                          db      5,      "FILES",        CONFIG_FILES
 37327                                  ;ifdef MULTI_CONFIG
 37328                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 37329                                  ;endif
 37330                                          db      7,      "INSTALL",      CONFIG_INSTALL
 37331                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 37332                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37333                                  ;ifdef MULTI_CONFIG
 37334                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 37335                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 37336                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 37337                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 37338                                  ;endif
 37339                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37340                                  ;ifdef MULTI_CONFIG
 37341                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 37342                                  ;endif
 37343                                          db      3,      "REM",          CONFIG_REM
 37344                                  ;ifdef MULTI_CONFIG
 37345                                          db      3,      "SET",          CONFIG_SET
 37346                                  ;endif
 37347                                          db      5,      "SHELL",        CONFIG_SHELL
 37348                                  ;if    STACKSW
 37349                                          db      6,      "STACKS",       CONFIG_STACKS
 37350                                  ;endif
 37351                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 37352                                  	db	0
 37353                                  %endif
 37354                                  
 37355                                  comtab:
 37356                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37357                                  	; (SYSINIT:38EDh)
 37358 000033E3 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 37359 000033EC 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 37360 000033F3 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 37361 000033FB 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37361 00003404 474855             
 37362 00003407 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 37363 0000340E 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 37364 00003414 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37364 0000341D 454C               
 37365 0000341F 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37365 00003428 434B4D             
 37366 0000342B 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37366 00003434 50                 
 37367 00003435 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 37368 0000343D 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 37369 00003446 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 37370 0000344D 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 37371 00003456 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 37372 0000345F 0352454D30              	db      3,      "REM",          CONFIG_REM
 37373 00003464 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 37373 0000346D 31                 
 37374 0000346E 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 37375 00003473 00                      	db	0
 37376                                  
 37377                                  deviceparameters:	
 37378                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 37379                                  devp.specialfunc:	; deviceparameters +
 37380 00003474 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 37381                                  devp.devtype:
 37382 00003475 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 37383                                  devp.devattr:
 37384 00003476 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 37385                                  devp.cylinders:
 37386 00003478 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 37387                                  
 37388 0000347A 00<rep 11Eh>            	times	286	db 0
 37389                                  	
 37390 00003598 0200                    hlim:	dw	2
 37391 0000359A 0900                    slim:	dw	9
 37392                                  
 37393 0000359C 00                      drive:	db	0
 37394                                  
 37395                                  switches:
 37396 0000359D 0000                    	dw	0
 37397                                  
 37398                                  ; the following are the recommended bpbs for the media that
 37399                                  ; we know of so far.
 37400                                  
 37401                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37402                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 37403                                  
 37404                                  ; 48 tpi diskettes
 37405                                  
 37406 0000359F 0002                    bpb48t	dw	512
 37407 000035A1 02                      	db	2
 37408 000035A2 0100                    	dw	1
 37409 000035A4 02                      	db	2
 37410 000035A5 7000                    	dw	112
 37411 000035A7 D002                    	dw	2*9*40 ; 720
 37412 000035A9 FD                      	db	0FDh
 37413 000035AA 0200                    	dw	2
 37414 000035AC 0900                    	dw	9
 37415 000035AE 0200                    	dw	2
 37416 000035B0 00000000                	dd	0
 37417 000035B4 00000000                        dd      0
 37418                                  
 37419                                  ; 96tpi diskettes
 37420                                  
 37421 000035B8 0002                    bpb96t:	dw	512
 37422 000035BA 01                      	db	1
 37423 000035BB 0100                    	dw	1
 37424 000035BD 02                      	db	2
 37425 000035BE E000                    	dw	224
 37426 000035C0 6009                    	dw	2*15*80 ; 2400
 37427 000035C2 F9                      	db	0F9h
 37428 000035C3 0700                    	dw	7
 37429 000035C5 0F00                    	dw	15
 37430 000035C7 0200                    	dw	2
 37431 000035C9 00000000                	dd	0
 37432 000035CD 00000000                        dd      0
 37433                                  
 37434                                  ; 3 1/2 inch diskette bpb
 37435                                  
 37436 000035D1 0002                    bpb35:	dw	512
 37437 000035D3 02                      	db	2
 37438 000035D4 0100                    	dw	1
 37439 000035D6 02                      	db	2
 37440 000035D7 7000                    	dw	112
 37441 000035D9 A005                    	dw	2*9*80 ; 1440
 37442 000035DB F9                      	db	0F9h
 37443 000035DC 0300                    	dw	3
 37444 000035DE 0900                    	dw	9
 37445 000035E0 0200                    	dw	2
 37446 000035E2 00000000                	dd	0
 37447 000035E6 00000000                        dd      0
 37448                                        
 37449 000035EA 0002                    bpb35h:	dw	512
 37450 000035EC 01                      	db	1
 37451 000035ED 0100                    	dw	1
 37452 000035EF 02                      	db	2
 37453 000035F0 E000                    	dw	224
 37454 000035F2 400B                    	dw	2*18*80 ; 2880
 37455 000035F4 F0                      	db	0F0h
 37456 000035F5 0900                    	dw	9
 37457 000035F7 1200                    	dw	18
 37458 000035F9 0200                    	dw	2
 37459 000035FB 00000000                	dd	0
 37460 000035FF 00000000                        dd      0
 37461                                  
 37462                                  ; m037 - BEGIN
 37463                                  
 37464 00003603 0002                    bpb288:	dw	512
 37465 00003605 02                      	db	2
 37466 00003606 0100                    	dw	1
 37467 00003608 02                      	db	2
 37468 00003609 F000                    	dw	240
 37469 0000360B 8016                    	dw	2*36*80 ; 5760
 37470 0000360D F0                      	db	0F0h
 37471 0000360E 0900                    	dw	9
 37472 00003610 2400                    	dw	36
 37473 00003612 0200                    	dw	2
 37474 00003614 00000000                	dd	0
 37475 00003618 00000000                        dd      0
 37476                                  
 37477                                  ; m037 - END
 37478                                  
 37479                                  ; 12/05/2019
 37480                                  
 37481                                  align 2
 37482                                  
 37483                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37484                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 37485                                  
 37486 0000361C [9F35]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 37487 0000361E [B835]                  	    dw	    bpb96t		; 96tpi drives
 37488 00003620 [D135]                  	    dw	    bpb35		; 3.5" drives
 37489                                  ; the following are not supported, so default to 3.5" media layout
 37490 00003622 [D135]                  	    dw	    bpb35		; not used - 8" drives
 37491 00003624 [D135]                  	    dw	    bpb35		; not used - 8" drives
 37492 00003626 [D135]                  	    dw	    bpb35		; not used - hard files
 37493 00003628 [D135]                  	    dw	    bpb35		; not used - tape drives
 37494 0000362A [EA35]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 37495 0000362C [D135]                  	    dw	    bpb35		; ERIMO				m037
 37496 0000362E [0336]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 37497                                  
 37498                                  switchlist: 
 37499 00003630 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 37500                                  
 37501                                  ;----------------------------------------------------------------------------
 37502                                  ; Messages
 37503                                  ;----------------------------------------------------------------------------
 37504                                  
 37505                                  ; 19/04/2019 - Retro DOS v4.0
 37506                                  
 37507                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 37508                                  
 37509 00003639 00                      	db 	0
 37510                                  
 37511                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37512                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 37513                                  
 37514                                  badopm:
 37515 0000363A 0D0A                    	db	0Dh,0Ah 
 37516 0000363C 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 37516 00003645 7A656420636F6D6D61-
 37516 0000364E 6E6420696E20434F4E-
 37516 00003657 4649472E535953     
 37517                                  crlfm:
 37518 0000365E 0D0A24                  	db	0Dh,0Ah,'$'
 37519                                  badparm:
 37520 00003661 0D0A                    	db	0Dh,0Ah
 37521 00003663 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 37521 0000366C 6E64206F7220706172-
 37521 00003675 616D6574657273202D-
 37521 0000367E 2024               
 37522                                  badsiz_pre:
 37523 00003680 0D0A                    	db	0Dh,0Ah
 37524 00003682 536563746F72207369-     	db	'Sector size too large in file $'
 37524 0000368B 7A6520746F6F206C61-
 37524 00003694 72676520696E206669-
 37524 0000369D 6C652024           
 37525                                  badld_pre:
 37526 000036A1 0D0A                    	db	0Dh,0Ah
 37527 000036A3 426164206F72206D69-     	db	'Bad or missing $'
 37527 000036AC 7373696E672024     
 37528                                  badcom:
 37529 000036B3 436F6D6D616E642049-     	db	'Command Interpreter',0
 37529 000036BC 6E7465727072657465-
 37529 000036C5 7200               
 37530                                  badcountry:
 37531 000036C7 0D0A                    	db	0Dh,0Ah
 37532 000036C9 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 37532 000036D2 6F756E74727920636F-
 37532 000036DB 6465206F7220636F64-
 37532 000036E4 6520706167650D0A24 
 37533                                  badcountrycom:
 37534 000036ED 0D0A                    	db	0Dh,0Ah
 37535 000036EF 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 37535 000036F8 434F554E5452592063-
 37535 00003701 6F6D6D616E640D0A24 
 37536                                  insufmemory:
 37537 0000370A 0D0A                    	db	0Dh,0Ah
 37538 0000370C 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 37538 00003715 656E74206D656D6F72-
 37538 0000371E 7920666F7220434F55-
 37538 00003727 4E5452592E53595320-
 37538 00003730 66696C650D0A24     
 37539                                  badmem:
 37540 00003737 0D0A                    	db	0Dh,0Ah
 37541 00003739 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 37541 00003742 74696F6E20746F6F20-
 37541 0000374B 6C6172676520666F72-
 37541 00003754 206D656D6F72790D0A-
 37541 0000375D 24                 
 37542                                  badblock:
 37543 0000375E 0D0A                    	db	0Dh,0Ah
 37544 00003760 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 37544 00003769 626C6F636B20646576-
 37544 00003772 696365730D0A24     
 37545                                  badstack:
 37546 00003779 0D0A                    	db	0Dh,0Ah
 37547 0000377B 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 37547 00003784 5441434B2070617261-
 37547 0000378D 6D65746572730D0A24 
 37548                                  	; 18/12/2022
 37549                                  ;badorder:
 37550                                  	;db	0Dh,0Ah
 37551                                  	;db	'Incorrect order in CONFIG.SYS line $'
 37552                                  errorcmd:
 37553 00003796 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 37553 0000379F 434F4E4649472E5359-
 37553 000037A8 53206C696E652024   
 37554                                  
 37555                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37556                                  %if 0
 37557                                  
 37558                                  OnOff:	db	'ON'
 37559                                  OnOff2:	db	'OFF'
 37560                                  
 37561                                  StartMsg:
 37562                                  	db	'Starting MS-DOS...',0Dh,0Ah
 37563                                  	db	0Ah,0
 37564                                  _$PauseMsg:
 37565                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 37566                                  _$CleanMsg:
 37567                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 37568                                  _$InterMsg:
 37569                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 37570                                  _$MenuHeader:
 37571                                  	db	0Dh,0Ah
 37572                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 37573                                  	db	'  =======================',0Dh,0Ah,'$'
 37574                                  _$MenuPrmpt:
 37575                                  	db	'  Enter a choice: $'
 37576                                  _$StatusLine:
 37577                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 37578                                  	db	'and AUTOEXEC.BAT [ ]$'
 37579                                  _$InterPrmpt:
 37580                                  	db	' [Y,N]?$'
 37581                                  _$YES:	db	'YES$'
 37582                                  _$NO:	db	'NO $'
 37583                                  _$TimeOut:
 37584                                  	db	'Time remaining: $'
 37585                                  badcomprmpt:
 37586                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 37587                                  	db	0Dh,0Ah,'$'
 37588                                  _$AutoPrmpt:
 37589                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 37590                                  
 37591                                  %endif
 37592                                  
 37593                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37594                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 37595                                  
 37596                                  TooManyDrivesMsg:
 37597 000037B0 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 37597 000037B9 4C6F676963616C2064-
 37597 000037C2 726976657320706173-
 37597 000037CB 74205A3A2065786973-
 37597 000037D4 7420616E642077696C-
 37597 000037DD 6C2062652069676E6F-
 37597 000037E6 7265640D0A24       
 37598                                  
 37599                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 37600                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 37601                                  	;db	7 dup(0)
 37602                                  
 37603                                  	;times	7 db 0
 37604                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37605                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 37606                                  	; 09/12/2022
 37607                                  	;times 4 db 0
 37608                                  
 37609                                  ;----------------------------------------------------------------------------
 37610                                  		; 09/12/2022
 37611                                  		;db 0
 37612                                  
 37613                                  number3div	equ ($-SYSINIT$)
 37614                                  number3mod	equ (number3div % 16)
 37615                                  
 37616                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 37617 000037EC 00<rep 4h>              		times (16-number3mod) db 0
 37618                                  %endif
 37619                                  
 37620                                  ;----------------------------------------------------------------------------
 37621                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 37622                                  ;----------------------------------------------------------------------------
 37623                                  
 37624                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 37625                                  
 37626                                  ;----------------------------------------------------------------------------
 37627                                  ; 20/04/2019 - Retro DOS v4.0
 37628                                  
 37629                                  ; 09/12/2022
 37630                                  ;
 37631                                  ;bss_start:
 37632                                  ;
 37633                                  ;ABSOLUTE bss_start
 37634                                  ;
 37635                                  ;alignb 16
 37636                                  
 37637                                  SI_end:  ; SI_end equ $
 37638                                  
 37639                                  ;----------------------------------------------------------------------------
 37640                                  
 37641                                  ;sysinitseg	ends
 37642                                  
 37643                                  ; ***************************************************************************
 37644                                  
 37645                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 37646                                  
 37647                                  SYSINITSIZE	equ SI_end - SYSINIT$
 37648                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 37649                                  
 37650                                  ;----------------------------------------------------------------------------
 37651                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 37652                                  ;----------------------------------------------------------------------------
 37653                                  
 37654                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 37655                                  ;----------------------------------------------------------------------------
 37656                                  ;----------------------------------------------------------------------------
 37657                                  
 37658                                  ; ----------------------------------------------------------------------------
 37659                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 37660                                  ; ----------------------------------------------------------------------------
 37661                                  ; 18/03/2019 - Retro DOS v4.0 
 37662                                  ; 11/06/2018 - Retro DOS v3.0 
 37663                                  
 37664                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 37665                                  		;; 28/06/2019 ('msdos6.s') 
 37666                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 37667                                  		
 37668                                  		; 27/09/2023 (BugFix)
 37669                                  		; 25/09/2023
 37670                                  		; 29/12/2022
 37671 000037F0 <bin 8E5Ah>             		incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 37672                                  		
 37673                                  		;; 28/12/2022 (BugFix)
 37674                                  		;; 22/12/2022
 37675                                  		;; 21/12/2022 ('msdos5.s')
 37676                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 37677                                  	
 37678                                  ; 28/09/2023	
 37679                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 37680                                  
 37681                                  align 2
 37682                                  
 37683                                  ; 21/12/2022
 37684                                  ;;END_OF_KERNEL:
 37685                                  ;END_OF_KERNEL equ $
 37686                                  
 37687                                  ; 28/09/2023
 37688                                  S3SIZE equ $-$$
 37689                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 37690                                  
 37691                                  ;=============================================================================
 37692                                  ;	END
 37693                                  ;=============================================================================
 37694                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 37695                                  ; ------------------------------
 37696                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
