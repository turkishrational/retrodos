     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 29/09/2023 - Retro DOS v4.1 (Previous: 27/09/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15 (2.11)
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]9C02              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]9C02              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [A512]9C02              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [D014]9C02              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [1C0A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 3904                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  
  3632                                  		; 29/09/2023
  3633                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  3634                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  3635                                  	
  3636                                  ; 20/12/2022
  3637                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3638                                  %if 0	
  3639                                  		cli
  3640                                  
  3641                                  		push	ax
  3642                                  		xor	ax, ax
  3643                                  		mov	ds, ax
  3644                                  		pop	ax
  3645                                  %endif
  3646                                  
  3647                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3648                                  
  3649                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3650                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3651                                  
  3652                                  ;-----------------------------------------------------------------------------
  3653                                  ; initialization - stage 1
  3654                                  ;-----------------------------------------------------------------------------
  3655                                  ; 02/06/2018 - Retro DOS v3.0
  3656                                  		
  3657                                  		; 21/12/2022
  3658                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3659                                  		;mov	bx, 60h
  3660                                  		;mov	es, bx
  3661                                  		;mov	si, bp
  3662                                  		;sub	di, di
  3663                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3664                                  		;;mov	cl, 35
  3665                                  		;rep	movsw
  3666                                  
  3667 00001763 0E                      		push	cs
  3668 00001764 1F                      		pop	ds
  3669                                  
  3670                                  		; 20/03/2019 - Retro DOS v4.0
  3671                                  		;cli		; turn interrupts off while manupulating stack
  3672                                  		;mov	ss, cx	; set stack segment register
  3673 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3674                                  		;sti		; turn interrupts on
  3675                                  
  3676                                  		; 27/03/2018
  3677                                  		;mov	cx, KERNEL_SIZE	; words !
  3678                                  
  3679                                  		; 20/03/2019
  3680 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3681                                  
  3682                                  		; 21/12/2022
  3683                                  		; 07/04/2018
  3684 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3685                                  		;mov	bl, KERNEL_SEGMENT
  3686 0000176E 8EC3                    		mov	es, bx
  3687 00001770 31FF                    		xor	di, di
  3688 00001772 89FE                    		mov	si, di
  3689                                  		
  3690                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3691                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3692 00001774 F3A5                    		rep	movsw
  3693                                  
  3694                                  		; 20/03/2019 - Retro DOS v4.0
  3695 00001776 53                      		push	bx
  3696 00001777 68[7B17]                		push	init0
  3697 0000177A CB                      		retf
  3698                                  init0:	
  3699                                  		; 20/12/2022
  3700                                  		; (combined kernel file > 64KB)
  3701                                  
  3702                                  		; 20/03/2019
  3703 0000177B B520                    		mov	ch, 20h
  3704 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3705                                  		;mov	cx, 1070h
  3706 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3707 00001782 8EC1                    		mov	es, cx
  3708                                  		
  3709                                  		; 21/12/2022
  3710                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3711                                  		; 28/09/2023
  3712                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  3713                                  
  3714                                  		;mov	cx, KERNEL_SIZE - 32768
  3715                                  		; 28/09/2023 (BugFix)
  3716 00001784 B96D01                  		mov	cx, NXWORDCOUNT
  3717                                  		;shr	cx, 1 ; 28/09/2023
  3718                                  		;xor	si, si
  3719                                  		;xor	di, di
  3720 00001787 F3A5                    		rep	movsw
  3721                                  
  3722                                  		; 28/09/2023
  3723                                  		;; 17/06/2018 
  3724                                  		;mov	ds, bx
  3725                                  		;; 21/03/2019
  3726                                  		;mov	es, bx
  3727                                  ;init0:
  3728                                  ;		;push	es
  3729                                  ;		push	bx ; 20/03/2019
  3730                                  ;		push	init1 ; 07/04/2018
  3731                                  ;		retf	; jump to 0070h:init1
  3732                                  ;init:
  3733                                  init1:
  3734                                  		; 20/12/2022
  3735                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3736                                  		; for full MSDOS compatibility.
  3737                                  
  3738 00001789 8EC1                    		mov	es, cx ; 0
  3739 0000178B 8ED9                    		mov	ds, cx ; 0
  3740                                  
  3741 0000178D B82205                  		mov	ax, SEC9
  3742                                  
  3743                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3744 00001790 B378                    		mov	bl, 1Eh*4
  3745                                  				; INT 1Eh points to diskette parms table
  3746                                  
  3747                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3748                                   		; (do not move the DPT if is not original ROMBIOS table)
  3749                                  
  3750                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3751                                  		;;jnz	short mov_dpt
  3752                                  
  3753                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3754                                  		;je	short dont_mov_dpt
  3755                                  
  3756                                  		;mov	si, [bx] ; [1Eh*4]		
  3757                                  ;mov_dpt:
  3758                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3759 00001792 C537                    		lds	si, [bx]
  3760 00001794 89C7                    		mov	di, ax  ; SEC9
  3761 00001796 B10B                    		mov	cl, 11
  3762                                  		;cld
  3763 00001798 F3A4                    		rep	movsb
  3764                                  
  3765                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3766 0000179A 8ED9                    		mov	ds, cx ; 0
  3767 0000179C 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3768 0000179E 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3769                                  ;dont_mov_dpt:
  3770                                  
  3771                                  ; 20/12/2022 - Retro DOS v4.0
  3772                                  %if 0
  3773                                  		; 27/12/2018 - Retro DOS v4.0
  3774                                  		; 'Starting MS-DOS...' message
  3775                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3776                                  		; (0070h:96A3h)
  3777                                  
  3778                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3779                                  		mov     ah, 0Eh
  3780                                  		;bh = 0
  3781                                          	mov     bl, 7		; "normal" attribute and page
  3782                                  startmsg_nxt_chr:  
  3783                                  		lodsb
  3784                                  		or	al, al
  3785                                          	jz	short startmsg_ok
  3786                                         
  3787                                  		int	10h		; video write
  3788                                          	jmp	short startmsg_nxt_chr
  3789                                  
  3790                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3791                                  
  3792                                  startmsg_ok:
  3793                                  
  3794                                  %endif
  3795                                  
  3796                                  ;-----------------------------------------------------------------------------
  3797                                  ; initialization - stage 2
  3798                                  ;-----------------------------------------------------------------------------
  3799                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3800                                  
  3801                                  
  3802                                  ; 19/03/2018
  3803                                  ; Retro DOS v2.0 (24/02/2018)
  3804                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3805                                  
  3806                                  ;------------------------------------------------------------------------
  3807                                  ;									:
  3808                                  ;	System initialization						:
  3809                                  ;									:
  3810                                  ;	The entry conditions are established by the bootstrap		:
  3811                                  ;	loader and are considered unknown. The following jobs		:
  3812                                  ;	will be performed by this module:				:
  3813                                  ;									:
  3814                                  ;	1.	All device initialization is performed			:
  3815                                  ;	2.	A local stack is set up and DS:SI are set		:
  3816                                  ;		to point to an initialization table. Then		:
  3817                                  ;		an inter-segment call is made to the first		:
  3818                                  ;		byte of the dos 					:
  3819                                  ;	3.	Once the dos returns from this call the ds		:
  3820                                  ;		register has been set up to point to the start		:
  3821                                  ;		of free memory. The initialization will then		:
  3822                                  ;		load the command program into this area 		:
  3823                                  ;		beginning at 100 hex and transfer control to		:
  3824                                  ;		this program.						:
  3825                                  ;									:
  3826                                  ;------------------------------------------------------------------------
  3827                                  		
  3828                                  		; 20/12/2022
  3829                                  		; ----------------------
  3830                                  		; Registers
  3831                                  		; ----------------------
  3832                                  		; DL = [bsDriveNumber]
  3833                                  		; DH = [bsMedia]
  3834                                  		; DS = 0, ES = 0, SS = 0
  3835                                  		; BP = 7C00h
  3836                                  		; SP = 700h
  3837                                  		; ----------------------
  3838                                  		; CX = 0				
  3839                                  
  3840                                  ; 02/10/2022 - 20/12/2022
  3841                                  ; ------------------------------------------------------------------------------
  3842                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3843                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3844                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3845                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3846                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3847                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3848                                  ; ------------------------------------------------------------------------------
  3849                                  
  3850                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3851                                  ;
  3852                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3853                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3854                                  ;;	data sector of the bios.
  3855                                  ;
  3856                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3857                                  ;		mov	[cs:bios_l], bx
  3858                                  
  3859                                  ; with the following information from msload, we don't need the
  3860                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3861                                  ;     limitation of msbio.com file.
  3862                                  
  3863                                  		; 21/12/2022
  3864 000017A1 FA                      		cli
  3865                                  
  3866 000017A2 0E                      		push	cs		; Save a peck of interrupt vectors...
  3867 000017A3 07                      		pop	es
  3868                                  		;push	cx
  3869                                  		;push	di
  3870                                  		; 20/12/2022
  3871 000017A4 B105                    		mov	cl, 5
  3872                                  		;mov	cx, 5		; NUMROMVECTORS
  3873                                  					; no. of rom vectors to	be saved
  3874                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3875 000017A6 BE[0001]                		mov	si, RomVectors
  3876                                  next_int_:		
  3877 000017A9 2E                      		cs	; 16/10/2022
  3878 000017AA AC                      		lodsb		
  3879                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3880 000017AB 98                      		cbw			; ax = interrupt number
  3881 000017AC D1E0                    		shl	ax, 1
  3882 000017AE D1E0                    		shl	ax, 1		; int no * 4
  3883 000017B0 89C7                    		mov	di, ax		; interrupt vector address
  3884 000017B2 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3885                                  					; saving address in di
  3886                                  		;lodsw			; movsw
  3887                                  		;stosw
  3888                                  		;lodsw			; movsw
  3889                                  		;stosw			; save the vector
  3890                                  		; 20/12/2022
  3891 000017B4 A5                      		movsw
  3892 000017B5 A5                      		movsw		
  3893                                  
  3894 000017B6 87F7                    		xchg	si, di
  3895 000017B8 E2EF                    		loop	next_int_
  3896                                  		
  3897                                  		;pop	di
  3898                                  		;pop	cx
  3899                                  
  3900                                  ; we need to save int13 in two places in case we are running on an at.
  3901                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3902                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3903                                  ; rom int13 routine, we must have that rom address also stored away.
  3904                                  
  3905                                  		; 20/12/2022
  3906                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3907                                  		;mov	[cs:Orig13], ax
  3908                                  		;mov	ax, [cs:Old13+2]
  3909                                  		;mov	[cs:Orig13+2], ax
  3910                                  
  3911                                  		; 16/10/2022
  3912 000017BA C7064C00[7407]          		mov	word [13h*4], block13
  3913                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3914                                  					; set up int 13	for new	action
  3915 000017C0 8C0E4E00                		mov	[13h*4+2], cs
  3916                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3917 000017C4 C7065400[4808]          		mov	word [15h*4], Int15
  3918                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3919                                  					; set up int 15	for new	action
  3920 000017CA 8C0E5600                		mov	[15h*4+2], cs
  3921                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3922 000017CE C7066400[F907]          		mov	word [19h*4], int19
  3923                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3924                                  					; set up int 19	for new	action
  3925 000017D4 8C0E6600                		mov	[19h*4+2], cs
  3926                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3927                                  
  3928                                  		; 20/12/2022
  3929 000017D8 0E                      		push	cs
  3930 000017D9 1F                      		pop	ds
  3931                                  		
  3932 000017DA A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3933 000017DD A3[B400]                		mov	[Orig13], ax
  3934 000017E0 A1[0801]                		mov	ax, [Old13+2]
  3935 000017E3 A3[B600]                		mov	[Orig13+2], ax
  3936                                  					; ;
  3937 000017E6 FB                      		sti
  3938 000017E7 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3939                                  					; Return: AX = equipment flag bits
  3940                                  
  3941                                  ; we have to support a system that does not have any diskette
  3942                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3943                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3944                                  ; otherwise, the system has only hardfiles.
  3945                                  ;
  3946                                  ; important thing is that still, for compatibility reason, the drive letter
  3947                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3948                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3949                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3950                                  ; drives will get "invalid drive letter ..." message. we are going to
  3951                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3952                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3953                                  
  3954                                  ; check the register returned by the equipment determination interrupt
  3955                                  ; we have to handle the case of no diskettes in the system by faking
  3956                                  ; two dummy drives.
  3957                                  ;
  3958                                  ; if the register indicates that we do have floppy drives we don't need
  3959                                  ; to do anything special.
  3960                                  ;
  3961                                  ; if the register indicates that we don't have any floppy drives then
  3962                                  ; what we need to do is set the fakefloppydrv variable, change the
  3963                                  ; register to say that we do have floppy drives and then go to execute
  3964                                  ; the code which starts at notsingle. this is because we can skip the
  3965                                  ; code given below which tries to find if there are one or two drives
  3966                                  ; since we already know about this.
  3967                                  
  3968                                  		; 06/05/2019 - Retro DOS v4.0
  3969 000017E9 88C1                    		mov	cl, al
  3970                                  
  3971                                  		; 12/12/2022
  3972 000017EB A801                    		test	al, 1
  3973                                  		;test	ax, 1		; floppy drives	present	?
  3974 000017ED 751F                    		jnz	short normalfloppydrv ;	yes.
  3975                                  
  3976                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3977                                  ; whether it is an old ROM BIOS or a new one
  3978                                  ;
  3979                                  ; WARNING !!!
  3980                                  ;
  3981                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3982                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3983                                  
  3984                                  		; 20/12/2022
  3985                                  		;push	ax
  3986                                  		;push	bx
  3987                                  		;push	cx
  3988 000017EF 52                      		push	dx
  3989                                  		;push	di
  3990 000017F0 06                      		push	es
  3991 000017F1 B408                    		mov	ah, 8
  3992 000017F3 B200                    		mov	dl, 0
  3993 000017F5 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3994                                  					; DL = drive number
  3995                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3996                                  					; DL = number of consecutive drives
  3997                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3998 000017F7 7202                    		jc	short _gdskp_error
  3999                                  		;;mov	[cs:flp_drvs], dl
  4000                                  		; 20/12/2022
  4001                                  		; ds = cs
  4002                                  		;mov	[flp_drvs], dl
  4003 000017F9 88D1                    		mov	cl, dl
  4004                                  _gdskp_error:	
  4005                                  		; 20/12/2022			
  4006 000017FB 07                      		pop	es
  4007                                  		;pop	di
  4008 000017FC 5A                      		pop	dx
  4009                                  		;pop	cx
  4010                                  		;pop	bx
  4011                                  		;pop	ax
  4012                                  		
  4013 000017FD 720F                    		jc	short normalfloppydrv
  4014                                  					; if error it is an old ROM BIOS
  4015                                  					; so, lets assume that ROM BIOS lied
  4016                                  		; 20/12/2022
  4017                                  		; ds = cs
  4018                                  		;cmp	byte [flp_drvs], 0
  4019                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4020                                  		;jz	short _set_fake_flpdrv
  4021                                  		;;mov	al, [cs:flp_drvs]
  4022                                  		;mov	al, [flp_drvs]
  4023                                  		;;dec	al		; make it zero based
  4024                                  		;; 18/12/2022
  4025                                  		;dec	ax
  4026                                  		;jmp	short got_num_flp_drvs
  4027                                  		
  4028                                  		; 20/12/2022
  4029 000017FF 08C9                    		or	cl, cl ; [flp_drvs]
  4030 00001801 7403                    		jz	short _set_fake_flpdrv		
  4031 00001803 49                      		dec	cx	
  4032 00001804 EB0C                    		jmp	short got_num_flp_drvs
  4033                                  ; ----------------------------------------------------------------------------
  4034                                  
  4035                                  _set_fake_flpdrv:
  4036                                  		;20/12/2022
  4037                                  		; ds = cs
  4038 00001806 FEC1                    		inc	cl	; cl = 1
  4039 00001808 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4040                                  		;mov	byte [fakefloppydrv], 1		
  4041                                  		;;mov	byte [cs:fakefloppydrv], 1
  4042                                  					; we don't have any floppy drives.
  4043                                  		; 20/12/2022
  4044                                  		;mov	ax, 1
  4045 0000180C EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4046                                  ; ----------------------------------------------------------------------------
  4047                                  
  4048                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4049                                  		; 20/12/2022
  4050                                  		;rol	al, 1		; there	exist floppy drives.
  4051                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4052 0000180E D0C1                    		rol	cl, 1
  4053 00001810 D0C1                    		rol	cl, 1
  4054                                  got_num_flp_drvs:			
  4055                                  		;;and	ax, 3		; only look at bits 0 &	1
  4056                                  		; 18/12/2022
  4057                                  		;and	al, 3
  4058                                  		; 20/12/2022
  4059 00001812 80E103                  		and	cl, 3
  4060 00001815 7505                    		jnz	short notsingle	; zero means single drive system
  4061                                  		; 20/12/2022
  4062 00001817 41                      		inc	cx
  4063                                  		;inc	ax		; pretend it's a two drive system
  4064                                  settwodrive:				; set this to two fakedrives
  4065                                  		; 20/12/2022
  4066                                  		; ds = cs
  4067 00001818 FE06[7800]              		inc	byte [single]
  4068                                  		;inc	byte [cs:single] ; remember this
  4069                                  notsingle:	
  4070                                  		; 20/12/2022			
  4071                                  		;inc	ax		; ax has number	of drives, 2-4
  4072                                  		;			; is also 0 indexed boot drive if we
  4073                                  		;			; booted off hard file
  4074                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4075                                  		; 20/12/2022
  4076 0000181C FEC1                    		inc	cl	; cl >= 2
  4077                                  
  4078                                  ; 16/10/2022
  4079                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4080                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4081                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4082                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4083                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4084                                  SEC9	EQU	522h	; address of disk parameters
  4085                                  CHROUT	EQU	29h
  4086                                  LSTDRV	EQU     504h
  4087                                  
  4088                                  ; determine whether we booted from floppy or hard disk...
  4089                                  
  4090                                  		; 20/12/2022
  4091 0000181E 88C8                    		mov	al, cl	; 26/05/2019
  4092                                  
  4093 00001820 F6C280                  		test	dl, 80h		; boot from floppy ?
  4094 00001823 7502                    		jnz	short gothrd	; no.
  4095 00001825 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4096                                  gothrd:					
  4097                                  
  4098                                  ; MSDOS 6.0
  4099                                  ;   ax = 0-based drive we booted from
  4100                                  ;   bios_l, bios_h set.
  4101                                  ;   cl = number of floppies including fake one
  4102                                  ;   ch = media byte
  4103                                  
  4104                                  ; Retro DOS 4.0 - 27/12/2018 
  4105                                  ;  (from Retro DOS v2.0 boot sector)
  4106                                  ;   dl = int 13 drive number we booted from
  4107                                  ;   dh = media byte
  4108                                  
  4109                                  		; 20/12/2022
  4110 00001827 88F5                    		mov	ch, dh		; 01/07/2018
  4111                                  
  4112                                  		; cl = number of floppies
  4113                                  		; ch = media byte
  4114                                  
  4115                                  		; set up local stack
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4119                                  					; bios_l, bios_h set.
  4120                                  					; cl = number of floppies including fake one
  4121                                  					; ch = media byte
  4122                                  		; 20/12/2022
  4123                                  		; es = ds = cs
  4124                                  		; ss = 0
  4125                                  		; sp = 700h
  4126                                  
  4127                                  		; 20/12/2022
  4128                                  		;cli
  4129                                  		;mov	ss, dx		; set stack segment and stack pointer
  4130                                  		;mov	sp, 700h
  4131                                  		;sti
  4132                                  
  4133 00001829 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4134                                  		
  4135 0000182A 88EC                    		mov	ah, ch		; FAT ID to AH
  4136 0000182C 50                      		push	ax ; (**)	; save boot drive number and media byte
  4137                                  		
  4138                                  ; let model_byte, secondary_model_byte be set here!!!
  4139                                  
  4140 0000182D B4C0                    		mov	ah, 0C0h
  4141 0000182F CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4142 00001831 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4143 00001833 80FC00                  		cmp	ah, 0
  4144 00001836 7510                    		jnz	short no_rom_system_conf
  4145                                  
  4146                                  ;		; 20/12/2022
  4147                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4148                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4149                                  ;
  4150                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4151                                  ;
  4152                                  ;		on return:
  4153                                  ;		CF = 0 if successful
  4154                                  ;		   = 1 if error
  4155                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4156                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4157                                  ;
  4158                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4159                                  ;
  4160                                  ;		Offset Size	     Description
  4161                                  ;
  4162                                  ;		  00   word   length of descriptor (8 minimum)
  4163                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4164                                  ;		  03   byte   secondary model byte
  4165                                  ;		  04   byte   BIOS revision level (zero based)
  4166                                  ;		  05   byte   feature information, see below
  4167                                  ;		  06   dword  reserved
  4168                                  
  4169                                  		; 20/12/2022
  4170                                  		; ds = cs
  4171 00001838 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4172 0000183C A2[3E06]                		mov	[model_byte], al
  4173                                  		;mov	[cs:model_byte], al
  4174                                  					; get/save model byte
  4175 0000183F 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4176 00001843 A2[3F06]                		mov	[secondary_model_byte], al
  4177                                  		;mov	[cs:secondary_model_byte], al
  4178                                  					; get/save secondary model byte
  4179 00001846 EB0C                    		jmp	short turn_timer_on
  4180                                  ;-----------------------------------------------------------------------------
  4181                                  
  4182                                  no_rom_system_conf:			
  4183 00001848 BEFFFF                  		mov	si, 0FFFFh
  4184 0000184B 8EC6                    		mov	es, si
  4185                                  		; 20/12/2022
  4186 0000184D 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4187 00001851 A2[3E06]                		mov	[model_byte], al
  4188                                  		;mov	[cs:model_byte], al ; save model byte
  4189                                  turn_timer_on:				
  4190 00001854 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4191 00001856 E620                    		out	20h, al		; Interrupt controller,	8259A.
  4192                                  					; AKPORT
  4193                                  
  4194                                  ; some olivetti m24 machines have an 8530 serial communications
  4195                                  ; chip installed at io address 50h and 52h. if we're running
  4196                                  ; on one of those, we must inhibit the normal aux port initialization
  4197                                  
  4198                                  		; 20/12/2022
  4199                                  		; ds = cs
  4200 00001858 803E[3E06]00            		cmp	byte [model_byte], 0
  4201                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4202 0000185D 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4203                                  					; (except olivetti m24)
  4204 0000185F E466                    		in	al, 66h		; is 8530 installed?
  4205 00001861 A820                    		test	al, 20h
  4206 00001863 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4207 00001865 B00F                    		mov	al, 0Fh		; double check
  4208 00001867 E650                    		out	50h, al
  4209 00001869 E450                    		in	al, 50h
  4210 0000186B A801                    		test	al, 1		; this test was	copied from olivetti
  4211 0000186D 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4212                                  
  4213                                  not_olivetti_m24:
  4214 0000186F B003                    		mov	al, 3		; init com4
  4215 00001871 E85808                  		call	aux_init
  4216 00001874 B002                    		mov	al, 2		; init com3
  4217 00001876 E85308                  		call	aux_init
  4218 00001879 B001                    		mov	al, 1		; init com2
  4219 0000187B E84E08                  		call	aux_init
  4220 0000187E 30C0                    		xor	al, al		; init com1
  4221 00001880 E84908                  		call	aux_init
  4222                                  
  4223                                  skip_aux_port_init:			
  4224 00001883 B002                    		mov	al, 2		; init lpt3
  4225 00001885 E83C08                  		call	print_init
  4226 00001888 B001                    		mov	al, 1		; init lpt2
  4227 0000188A E83708                  		call	print_init
  4228 0000188D 30C0                    		xor	al, al		; init lpt1
  4229 0000188F E83208                  		call	print_init
  4230                                  
  4231 00001892 31D2                    		xor	dx, dx	; 0
  4232 00001894 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4233 00001896 8EC2                    		mov	es, dx
  4234 00001898 31C0                    		xor	ax, ax
  4235                                  		; 16/10/2022
  4236 0000189A BF3405                  		mov	di, INITSPOT	; 0534h
  4237                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4238                                  					; IBM wants 4 zeros here
  4239 0000189D AB                      		stosw
  4240 0000189E AB                      		stosw
  4241 0000189F 8CC8                    		mov	ax, cs		; fetch	segment
  4242 000018A1 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4243                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4244                                  					; break	entry point
  4245 000018A7 A36E00                  		mov	[BRKADR+2], ax		
  4246                                  		;mov	ds:6Eh,	ax	; vector for break
  4247 000018AA C706A400[6207]          		mov	word [CHROUT*4], outchr
  4248                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4249 000018B0 A3A600                  		mov	[CHROUT*4+2], ax
  4250                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4251                                  
  4252 000018B3 BF0400                  		mov	di, 4
  4253 000018B6 BB[F406]                		mov	bx, intret ; 19/10/2022
  4254                                  		;mov	bx, offset intret ; intret (cs:intret)
  4255                                  					; will initialize rest of interrupts
  4256 000018B9 93                      		xchg	ax, bx
  4257 000018BA AB                      		stosw			; location 4
  4258 000018BB 93                      		xchg	ax, bx		; cs:
  4259 000018BC AB                      		stosw			; int 1	; location 6
  4260 000018BD 83C704                  		add	di, 4
  4261 000018C0 93                      		xchg	ax, bx
  4262 000018C1 AB                      		stosw			; location 12
  4263 000018C2 93                      		xchg	ax, bx		; cs:
  4264 000018C3 AB                      		stosw			; int 3	; location 14
  4265 000018C4 93                      		xchg	ax, bx
  4266 000018C5 AB                      		stosw			; location 16
  4267 000018C6 93                      		xchg	ax, bx		; cs:
  4268 000018C7 AB                      		stosw			; int 4	; location 18
  4269                                  
  4270                                  
  4271                                  ;		; 20/12/2022
  4272                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4273                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4274                                  ;	
  4275                                  ;		50:00	byte	Print screen status byte
  4276                                  ;				 00 = PrtSc not active,
  4277                                  ;				 01 = PrtSc in progress
  4278                                  ;				 FF = error
  4279                                  ;		50:01  3 bytes	Used by BASIC
  4280                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4281                                  ;		50:05  10bytes	POST work area
  4282                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4283                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4284                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4285                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4286                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4287                                  ;		50:20	word	DOS dynamic storage
  4288                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4289                                  ;		50:30	4bytes	MODE command
  4290                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4291                                  
  4292 000018C8 89160005                		mov	[0500h], dx ; 0
  4293                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4294 000018CC 89160405                		mov	[LSTDRV], dx	; [0504h]
  4295                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4296                                  
  4297                                  ; we need to initialize the cs:motorstartup variable from the disk
  4298                                  ; parameter table at sec9. the offsets in this table are defined in
  4299                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4300                                  
  4301 000018D0 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4302                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4303                                  					; [522h+0Ah]
  4304                                  		; 20/12/2022
  4305                                  		; ds = 0
  4306                                  
  4307 000018D3 2EA2[2601]              		mov	[cs:motorstartup], al
  4308 000018D7 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4309 000018DD 720B                    		jb	short no_diddle	; no
  4310 000018DF C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4311                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4312                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4313 000018E5 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4314                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4315                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4316                                  no_diddle:				
  4317 000018EA CD12                    		int	12h		; MEMORY SIZE -
  4318                                  					; Return: AX = number of contiguous 1K blocks of memory
  4319 000018EC B106                    		mov	cl, 6
  4320 000018EE D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4321                                  		
  4322                                  		; 20/12/2022
  4323                                  		; 03/07/2018 - 27/12/2018
  4324                                  		;pop	cx ; (**)
  4325                                  		;mov	[cs:drvfat], cx
  4326                                  		
  4327 000018F0 50                      		push	ax ; (*)	; save real top	of memory
  4328                                  
  4329                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4330                                  
  4331                                  ;M068 - BEGIN
  4332                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4333                                  
  4334                                  		; 20/12/2022
  4335                                  		; ds = 0
  4336                                  
  4337                                  		;push	ds
  4338                                  		;push	bx		; pushes not required but since this
  4339                                  					; happens to be a last minute change
  4340                                  					; & since it is only init code.
  4341                                  		;xor	bx, bx
  4342                                  		;mov	ds, bx
  4343                                  
  4344                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  4345                                  		;mov	bx, [2Fh*4]
  4346                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4347                                  		;mov	ds, [2Fh*4+2]
  4348                                  		; 29/09/2023
  4349 000018F1 C51EBC00                		lds	bx, [2Fh*4]
  4350                                  
  4351 000018F5 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4352                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4353 000018FA 750F                    		jnz	short SkipRPL
  4354 000018FC 807F054C                		cmp	byte [bx+5], 'L'
  4355                                  		;cmp	byte ptr [bx+5], 'L'
  4356 00001900 7509                    		jnz	short SkipRPL
  4357 00001902 89C2                    		mov	dx, ax		; get TOM into DX
  4358 00001904 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4359 00001907 CD2F                    		int	2Fh		; Get new TOM from any RPL
  4360 00001909 89D0                    		mov	ax, dx
  4361                                  SkipRPL:	
  4362                                  		; 20/12/2022
  4363                                  		;pop	bx
  4364                                  		;pop	ds
  4365                                  
  4366                                  ;M068 - END
  4367                                  		; 20/12/2022
  4368                                  		; 27/12/2018
  4369 0000190B 0E                      		push	cs
  4370 0000190C 1F                      		pop	ds
  4371                                  
  4372                                  		; 18/03/2019 - Retro DOS v4.0
  4373                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4374                                  		;mov	[cs:fatloc], ax	; location to read fat
  4375                                  
  4376                                  		; 01/07/2018
  4377                                  		; 08/04/2018
  4378                                  		; 28/03/2018
  4379                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4380 0000190D 83E840                  		sub	ax, 64
  4381 00001910 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4382                                  		;mov	[cs:init_bootseg], ax
  4383                                  
  4384                                  		; 27/12/2018 - Retro DOS v4.0
  4385                                  		;;pop	ax ; (*)	; get back real top of memory
  4386                                  		;pop	dx ; (*)
  4387                                  		; 29/09/2023 (BugFix)
  4388 00001913 58                      		pop	ax ; (*)	; get back real top of memory
  4389                                  
  4390                                  		; 20/12/2022
  4391                                  		; 27/12/2018
  4392 00001914 59                      		pop	cx ; (**)
  4393 00001915 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4394                                  
  4395                                  		; 20/12/2022
  4396                                  
  4397                                  		;mov	dx, 46Dh	; SYSINIT segment
  4398 00001919 BA3904                  		mov	dx, SYSINITSEG	; 17/10/2022
  4399 0000191C 8EDA                    		mov	ds, dx
  4400                                  
  4401                                  ; set pointer to resident device driver chain
  4402                                  
  4403                                  		; 17/10/2022
  4404 0000191E C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4405                                  		;mov	word [273h], res_dev_list
  4406                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4407                                  					; [SYSINIT+DEVICE_LIST]
  4408 00001924 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4409                                  		;mov	[275h], cs
  4410                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4411                                  
  4412 00001928 A3[9202]                		mov	[MEMORYSIZE], ax
  4413                                  		;mov	[292h], ax
  4414                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4415                                  
  4416 0000192B FEC1                    		inc	cl
  4417 0000192D 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4418                                  		;mov	[296h], cl
  4419                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4420                                  
  4421 00001931 C706[7102]B807          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4422                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4423                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4424                                  					; dos_load_seg
  4425                                  
  4426                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4427                                  ; printer cards. we initialize this value to point to an iret only if
  4428                                  ;
  4429                                  ; 1) the original segment points to storage inside valid ram.
  4430                                  ;
  4431                                  ; 2) the original segment is 0F000:xxxx
  4432                                  
  4433                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4434                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4435                                  		;mov	es, ax
  4436                                  		; 20/12/2022
  4437                                  		;push	ds ; SYSINITSEG
  4438                                  		;pop	es
  4439 00001937 8EC2                    		mov	es, dx ; SYSINITSEG
  4440 00001939 31C0                    		xor	ax, ax ; 0
  4441 0000193B 8ED8                    		mov	ds, ax		; segment 0
  4442                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4443 0000193D A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4444                                  		; 18/10/2022
  4445 00001940 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4446                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4447 00001945 7605                    		jbe	short resetintf
  4448 00001947 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4449 0000194A 750A                    		jnz	short keepintf
  4450                                  resetintf:	
  4451 0000194C C7063C00[F406]          		mov	word [0Fh*4], intret			
  4452                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4453 00001952 8C0E3E00                		mov	word [0Fh*4+2], cs
  4454                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4455                                  keepintf:				
  4456                                  ; end important
  4457                                  
  4458                                  ; 17/10/2022
  4459                                  ; 28/12/2018 - Retro DOS v4.0
  4460                                  
  4461                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4462                                  ;
  4463                                  ; we will check if the system has ibm extended keyboard by
  4464                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4465                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4466                                  ; for the extended keyboard function. use cx as the temporary register.
  4467                                  
  4468                                  		; 20/12/2022
  4469                                  		; ds = 0
  4470                                  		;xor	cx, cx
  4471                                  		;mov	ds, cx
  4472                                  
  4473 00001956 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4474                                  
  4475                                  		; 20/12/2022
  4476                                  		; 20/03/2019
  4477 0000195A 0E                      		push	cs
  4478 0000195B 1F                      		pop	ds
  4479                                  
  4480                                  		;test	cl, 00010000b ; 10h
  4481 0000195C F6C110                  		test	cl, 10h		; extended keyboard ?
  4482 0000195F 740A                    		jz	short org_key	; no, original keyboard
  4483                                  
  4484                                  		; 20/12/2022
  4485                                  		;  ds = cs
  4486 00001961 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4487 00001966 C606[E604]11            		mov	byte [keysts_func], 11h
  4488                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4489                                  		;mov	byte [cs:keysts_func], 11h
  4490                                  					; change for extended keyboard functions
  4491                                  org_key:
  4492                                  
  4493                                  ; 02/06/2018 - Retro DOS v3.0
  4494                                  
  4495                                  ;**************************************************************
  4496                                  ;	will initialize the number of drives
  4497                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4498                                  ;	the indications are as follows:
  4499                                  ;
  4500                                  ;	bits	7	6	drives
  4501                                  ;		0	0	1
  4502                                  ;		0	1	2
  4503                                  ;		1	0	3
  4504                                  ;		1	1	4
  4505                                  ;**************************************************************
  4506                                  		
  4507                                  		; 20/12/2022
  4508                                  		; ds = cs		
  4509                                  		;push	cs
  4510                                  		;pop	ds
  4511                                  		; 21/12/2022
  4512                                  		;push	cs
  4513                                  		;pop	es
  4514                                  
  4515 0000196B E89F08                  		call	cmos_clock_read	; If cmos clock	exists,
  4516                                  					; then set the system time according to	that.
  4517                                  					; also,	reset the cmos clock rate.
  4518                                  		; 18/10/2022
  4519                                  		;mov	word ptr BData_start, offset harddrv ;
  4520                                  					; set up pointer to hdrive
  4521                                  		; 02/10/2022
  4522 0000196E C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4523                                  		
  4524                                  		; 20/12/2022
  4525                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4526 00001974 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4527 00001975 30E4                    		xor	ah, ah		; chuck	fat id byte
  4528 00001977 A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4529 0000197A A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4530 0000197D D1E0                    		shl	ax, 1
  4531 0000197F 0106[4417]              		add	[last_dskdrv_table], ax
  4532                                  
  4533 00001983 B280                    		mov	dl, 80h
  4534 00001985 B408                    		mov	ah, 8
  4535 00001987 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4536                                  					; DL = drive number
  4537                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4538                                  					; DL = number of consecutive drives
  4539                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4540 00001989 7204                    		jc	short enddrv
  4541 0000198B 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4542                                  enddrv:
  4543                                  		; 21/12/2022
  4544 0000198F 0E                      		push	cs
  4545 00001990 07                      		pop	es
  4546                                  
  4547                                  ; scan the list of drives to determine their type. we have three flavors of
  4548                                  ; diskette drives:
  4549                                  ;
  4550                                  ;   48tpi drives    we do nothing special for them
  4551                                  ;   96tpi drives    mark the fact that they have changeline support.
  4552                                  ;   3.5"  drives    mark changeline support and small.
  4553                                  ;
  4554                                  ; the following code uses registers for certain values:
  4555                                  ;
  4556                                  ;   dl - physical drive
  4557                                  ;   ds:di - points to current bds
  4558                                  ;   cx - flag bits for bds
  4559                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4560                                  					
  4561 00001991 30D2                    		xor	dl, dl
  4562                                  
  4563                                  		; 20/12/2022
  4564                                  		; ds = cs
  4565                                  		; 17/06/2018		 
  4566                                  		;push	cs
  4567                                  		;pop	ds
  4568                                  
  4569 00001993 C606[2C01]09            		mov	byte [eot], 9
  4570 00001998 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4571                                  					; to set aside two bdss	for the	two fake floppy	drives
  4572                                  
  4573                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4574                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4575                                  
  4576                                  ; check to see if we are faking floppy drives. if not we don't
  4577                                  ; do anything special. if we are faking floppy drives we need
  4578                                  ; to set aside two bdss for the two fake floppy drives. we
  4579                                  ; don't need to initalise any fields though. so starting at start_bds
  4580                                  ; use the link field in the bds structure to go to the second bds
  4581                                  ; in the list and initalise it's link field to -1 to set the end of
  4582                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4583                                  ; the bds for harddrives.
  4584                                  
  4585 0000199B 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4586 000019A0 750B                    		jnz	short loop_drive
  4587 000019A2 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4588                                  					; di <-	first bds link
  4589 000019A4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4590                                  					; di <-	second bds link
  4591 000019A6 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4592 000019AA E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4593                                  ;-----------------------------------------------------------------------------
  4594                                  
  4595                                  loop_drive:				
  4596 000019AD 3A16[7500]              		cmp	dl, [drvmax]
  4597 000019B1 7203                    		jb	short got_more
  4598 000019B3 E90201                  		jmp	done_drives
  4599                                  ;-----------------------------------------------------------------------------
  4600                                  
  4601                                  got_more:				
  4602 000019B6 31C9                    		xor	cx, cx		; zero all flags
  4603 000019B8 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4604                                  					; get next bds
  4605 000019BA B600                    		mov	dh, 0 ; ff48tpi
  4606                                  					; set form factor to 48	tpi
  4607 000019BC C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per	side
  4608                                  		
  4609                                  		; 20/12/2022
  4610                                  		;push	ds ; 11/05/2019	
  4611 000019C1 57                      		push	di
  4612 000019C2 52                      		push	dx
  4613 000019C3 51                      		push	cx
  4614 000019C4 06                      		push	es ; ((*)) ; 20/12/2022	
  4615                                  		
  4616 000019C5 B408                    		mov	ah, 8
  4617 000019C7 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4618                                  					; DL = drive number
  4619                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4620                                  					; DL = number of consecutive drives
  4621                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4622 000019C9 7276                    		jc	short noparmsfromrom
  4623                                  
  4624                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4625                                  ; in this case, we are going to put bogus informations to bds table.
  4626                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4627                                  ; they are calculated at the later time. this is just for the diagnostic
  4628                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4629                                  ; this should only happen with drive b.
  4630                                  
  4631 000019CB 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4632 000019CE 7505                    		jnz	short pfr_ok
  4633                                  
  4634                                  		;mov	ch, 39		; rom gave wrong info.
  4635                                  		;mov	cl, 9		; let's default to 360k.
  4636                                  		; 20/12/2022
  4637 000019D0 B90927                  		mov	cx, 2709h
  4638                                  
  4639 000019D3 B601                    		mov	dh, 1
  4640                                  pfr_ok:					
  4641 000019D5 FEC6                    		inc	dh		; make number of heads 1-based
  4642 000019D7 FEC5                    		inc	ch		; make number of cylinders 1-based
  4643 000019D9 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4644 000019DD 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4645 000019E0 880E[D116]              		mov	[sec_trk], cl
  4646 000019E4 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4647                                  
  4648                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4649                                  
  4650 000019E8 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4651                                  		;jbe	short eot_ok
  4652                                  		; 09/12/2022
  4653                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4654                                  		; 14/08/2023
  4655 000019EC 7604                    		jbe	short eotok
  4656 000019EE 880E[2C01]              		mov	[eot], cl
  4657                                  ;eot_ok:					
  4658                                  eotok:
  4659                                  		; 20/12/2022
  4660 000019F2 07                      		pop	es ; ((*)) es = cs = ds		
  4661 000019F3 59                      		pop	cx
  4662 000019F4 5A                      		pop	dx
  4663 000019F5 5F                      		pop	di
  4664                                  		;pop	ds ; 20/12/2022
  4665                                  
  4666                                  ; Check	for presence of	changeline
  4667                                  
  4668 000019F6 B415                    		mov	ah, 15h
  4669 000019F8 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4670                                  					; DL = drive ID
  4671                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4672                                  					; CX:DX	= number of sectors on the media
  4673 000019FA 720D                    		jc	short changeline_done
  4674 000019FC 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4675 000019FF 7508                    		jnz	short changeline_done
  4676                                  
  4677                                  ; we have a drive with change line support.
  4678                                  
  4679 00001A01 80C902                  		or	cl, 2		; fchangeline
  4680                                  					; signal type
  4681 00001A04 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4682                                  
  4683                                  ; we now try to set up the form factor for the types of media that we know
  4684                                  ; and can recognise. for the rest, we set the form factor as "other".
  4685                                  
  4686                                  changeline_done:
  4687                                  
  4688                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4689                                  			
  4690 00001A09 803E[D216]28            		cmp	byte [num_cyln], 40
  4691 00001A0E 750B                    		jnz	short try_80
  4692 00001A10 803E[D116]09            		cmp	byte [sec_trk], 9
  4693 00001A15 7653                    		jbe	short nextdrive
  4694                                  gotother:				
  4695 00001A17 B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4696 00001A19 EB4F                    		jmp	short nextdrive
  4697                                  ;-----------------------------------------------------------------------------
  4698                                  
  4699                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4700                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4701                                  
  4702                                  try_80:					
  4703 00001A1B 803E[D216]50            		cmp	byte [num_cyln], 80
  4704 00001A20 75F5                    		jnz	short gotother
  4705 00001A22 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4706 00001A24 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4707 00001A29 743F                    		jz	short nextdrive	; yeah,	go update
  4708                                  
  4709                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4710                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4711                                  		;mov	dh, ff144
  4712                                  		;cmp	byte [sec_trk], 18
  4713                                  		;je	short nextdrive
  4714                                  
  4715 00001A2B 803E[D116]0F            		cmp	byte [sec_trk], 15
  4716 00001A30 740B                    		jz	short got96
  4717                                  		
  4718 00001A32 803E[D116]09            		cmp	byte [sec_trk], 9
  4719 00001A37 75DE                    		jnz	short gotother
  4720                                  		
  4721 00001A39 B602                    		mov	dh, 2 ; ffSmall
  4722 00001A3B EB2D                    		jmp	short nextdrive
  4723                                  ; ----------------------------------------------------------------------------
  4724                                  
  4725                                  got96:					
  4726 00001A3D B601                    		mov	dh, 1 ; ff96tpi
  4727 00001A3F EB29                    		jmp	short nextdrive
  4728                                  ; ----------------------------------------------------------------------------
  4729                                  
  4730                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4731                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4732                                  
  4733                                  noparmsfromrom:				
  4734                                  		; 20/12/2022
  4735 00001A41 07                      		pop	es ; ((*)) 
  4736 00001A42 59                      		pop	cx
  4737 00001A43 5A                      		pop	dx
  4738 00001A44 5F                      		pop	di
  4739                                  		;pop	ds ; 20/12/2022
  4740                                  		
  4741 00001A45 B415                    		mov	ah, 15h
  4742 00001A47 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4743                                  					; DL = drive ID
  4744                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4745                                  					; CX:DX	= number of sectors on the media
  4746 00001A49 721F                    		jc	short nextdrive
  4747                                  		
  4748 00001A4B 80FC02                  		cmp	ah, 2		; is there changeline?
  4749 00001A4E 751A                    		jnz	short nextdrive
  4750                                  
  4751 00001A50 80C902                  		or	cl, 2 ; fchangeline
  4752 00001A53 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4753 00001A58 C606[D216]50            		mov	byte [num_cyln], 80
  4754 00001A5D B601                    		mov	dh, 1 ; ff96tpi 
  4755 00001A5F B00F                    		mov	al, 15
  4756 00001A61 3A06[2C01]              		cmp	al, [eot]
  4757 00001A65 7603                    		jbe	short nextdrive ; eot_ok2
  4758 00001A67 A2[2C01]                		mov	[eot], al
  4759                                  ; ----------------------------------------------------------------------------
  4760                                  
  4761                                  ;eot_ok2:
  4762                                  nextdrive:				
  4763 00001A6A 80C920                  		or	cl, 20h	; fi_own_physical
  4764                                  					; set this true	for all	drives
  4765 00001A6D 88D7                    		mov	bh, dl		; save int13 drive number
  4766                                  
  4767                                  ; we need to do special things if we have a single drive system and are setting
  4768                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4769                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4770                                  ; we detect the presence of this situation by examining the flag single for the
  4771                                  ; value 2.
  4772 00001A6F 803E[7800]02            		cmp	byte [single], 2
  4773 00001A74 7505                    		jnz	short not_special
  4774 00001A76 FECF                    		dec	bh		; int13	drive number same for logical drive
  4775 00001A78 80F120                  		xor	cl, 20h	; fi_own_physical
  4776                                  					; reset	ownership flag for logical drive
  4777                                  not_special:
  4778                                  
  4779                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4780                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4781                                  ; form factor is of type "ffother".
  4782                                  				
  4783 00001A7B 31C0                    		xor	ax, ax		; fill BDS for drive
  4784 00001A7D A0[D016]                		mov	al, [num_heads]
  4785 00001A80 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4786 00001A83 A0[D116]                		mov	al, [sec_trk]
  4787 00001A86 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4788 00001A89 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4789 00001A8C 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4790 00001A8F 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4791 00001A92 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4792 00001A95 8A1E[D216]              		mov	bl, [num_cyln]
  4793 00001A99 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4794 00001A9C 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4795 00001AA1 7511                    		jnz	short no_single
  4796 00001AA3 C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4797                                  					; single drive system
  4798                                  		; 18/12/2022
  4799 00001AA8 80C910                  		or	cl, 10h
  4800                                  		;or	cx, 10h	; fi_am_mult
  4801                                  					; set that this	is one of several drives
  4802 00001AAB 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4803                                  					; save flags
  4804 00001AAE 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4805                                  					; move to next BDS in list
  4806 00001AB0 FEC2                    		inc	dl		; add a	number
  4807 00001AB2 EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4808                                  ; ----------------------------------------------------------------------------
  4809                                  
  4810                                  no_single:				
  4811                                  		;inc	dl
  4812                                  		; 18/12/2022
  4813 00001AB4 42                      		inc	dx
  4814 00001AB5 E9F5FE                  		jmp	loop_drive
  4815                                  ; ----------------------------------------------------------------------------
  4816                                  
  4817                                  done_drives:	
  4818                                  		;mov	word [di+BDS.link], -1			
  4819 00001AB8 C705FFFF                		mov	word [di], -1	; set link to null
  4820                                  
  4821                                  ; set up all the hard drives in	the system
  4822                                  
  4823                                  		; 20/12/2022
  4824                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4825                                  dohard:					
  4826 00001ABC 8A36[4317]              		mov	dh, [hnum]
  4827 00001AC0 08F6                    		or	dh, dh		; done if no hardfiles
  4828 00001AC2 745B                    		jz	short static_configure
  4829 00001AC4 B280                    		mov	dl, 80h
  4830                                  dohard1:				
  4831 00001AC6 52                      		push	dx
  4832 00001AC7 8B3E[4617]              		mov	di, [end_of_bdss]
  4833 00001ACB 8A1E[7500]              		mov	bl, [drvmax]
  4834 00001ACF B700                    		mov	bh, 0		; first	primary	partition (or active)
  4835 00001AD1 E8C801                  		call	sethard
  4836 00001AD4 7208                    		jb	short hardfile_err
  4837 00001AD6 E8EA06                  		call	dmax_check	; error	if already 26 drives
  4838 00001AD9 7303                    		jnb	short hardfile_err
  4839 00001ADB E8FA06                  		call	xinstall_bds	; insert new bds into linked list
  4840                                  hardfile_err:				
  4841 00001ADE 5A                      		pop	dx
  4842 00001ADF FEC2                    		inc	dl		; next hard drive
  4843 00001AE1 FECE                    		dec	dh
  4844 00001AE3 75E1                    		jnz	short dohard1
  4845                                  
  4846                                  ; end of physical drive	initialization
  4847                                  
  4848                                  ; *** do not change the position of the following statement.
  4849                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4850                                  ; *** drive number of mini disk(s).
  4851                                  					
  4852 00001AE5 E8ED05                  		call	domini		; for setting up mini disks, if found
  4853                                  
  4854                                  ; -- begin added section
  4855                                  
  4856 00001AE8 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4857 00001AEC B280                    		mov	dl, 80h
  4858                                  dohardx1:				
  4859 00001AEE B701                    		mov	bh, 1		; do all subsequent primary partitions
  4860                                  dohardx2:				
  4861 00001AF0 52                      		push	dx
  4862 00001AF1 53                      		push	bx
  4863 00001AF2 8B3E[4617]              		mov	di, [end_of_bdss]
  4864 00001AF6 8A1E[7500]              		mov	bl, [drvmax]
  4865 00001AFA E89F01                  		call	sethard
  4866 00001AFD 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4867 00001AFF E8C106                  		call	dmax_check	; make sure <=26 drives
  4868 00001B02 7309                    		jnb	short dohardx4	; skip if error
  4869 00001B04 E8D106                  		call	xinstall_bds	; insert new bds into linked list
  4870 00001B07 5B                      		pop	bx		; get partition	number
  4871 00001B08 5A                      		pop	dx		; restore physical drive counts
  4872 00001B09 FEC7                    		inc	bh
  4873 00001B0B EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4874                                  ; ----------------------------------------------------------------------------
  4875                                  
  4876                                  dohardx4:				
  4877 00001B0D 5B                      		pop	bx		; unjunk partition number from stack
  4878 00001B0E 5A                      		pop	dx		; restore physical drive counts
  4879 00001B0F FEC2                    		inc	dl		; next hard drive
  4880 00001B11 FECE                    		dec	dh
  4881 00001B13 75D9                    		jnz	short dohardx1
  4882                                  
  4883                                  ; -- end changed section
  4884                                  
  4885                                  ;******************************************************************************
  4886                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4887                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4888                                  ; than two diskette drives
  4889                                  ;
  4890                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4891                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4892                                  ;		letters. to do this, scan for disk drives and assign logical
  4893                                  ;		drive number starting from 2 and then rescan diskette drives
  4894                                  ;		and assign next to the last logical drive number of last disk
  4895                                  ;		drive to the 3rd and 4th diskette drives.
  4896                                  ;******************************************************************************
  4897                                  
  4898 00001B15 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4899                                  		;jbe	short static_configure ; no - no need for remapping
  4900 00001B1A 7603                    		jbe	short no_remap
  4901 00001B1C E8F900                  		call	remap		; remap	bds chain to adjust driver letters
  4902                                  no_remap:
  4903                                  
  4904                                  ; End of drive initialization.
  4905                                  
  4906                                  ; ----------------------------------------------------------------------------
  4907                                  
  4908                                  ;we now decide, based on the configurations available so far, what
  4909                                  ;code or data we need to keep as a stay resident code. the following table
  4910                                  ;shows the configurations under consideration. they are listed in the order
  4911                                  ;of their current position memory.
  4912                                  ;
  4913                                  ;configuration will be done in two ways:
  4914                                  ;
  4915                                  ;first, we are going to set "static configuration". static configuration will
  4916                                  ;consider from basic configuration to endof96tpi configuration. the result
  4917                                  ;of static configuration will be the address the dynamic configuration will
  4918                                  ;use to start with.
  4919                                  ;
  4920                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4921                                  ;involves possible relocation of code or data. dynamic configuration routine
  4922                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4923                                  ;code individually. after these operation, [dosdatasg] will be set.
  4924                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4925                                  
  4926                                  ; -- begin changed section
  4927                                  ;
  4928                                  ;   1.	 basic configuration for msbio (endfloppy)
  4929                                  ;   2.   end96tpi	; a system that supports "change line error"
  4930                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4931                                  ;   4.	 endatrom	;some of at rom fix module.
  4932                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4933                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4934                                  ;
  4935                                  
  4936                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4937                                  
  4938                                  static_configure:			
  4939 00001B1F 8B3E[4617]              		mov	di, [end_of_bdss]
  4940 00001B23 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4941                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4942 00001B27 750D                    		jnz	short dynamic_configure	; that's the end, then
  4943                                  		; 18/10/2022
  4944 00001B29 BF[1709]                		mov	di, end96tpi
  4945                                  		;mov	di, offset harddrv ; end96tpi
  4946                                  					; keep everything up to	end96tpi
  4947 00001B2C 803E[7700]00            		cmp	byte [fhave96], 0
  4948 00001B31 7503                    		jnz	short dynamic_configure
  4949                                  		
  4950 00001B33 BF[FC08]                		mov	di, endfloppy
  4951                                  dynamic_configure:
  4952                                  		; 20/12/2022
  4953                                  		;push	cs
  4954                                  		;pop	es
  4955                                  		
  4956 00001B36 FC                      		cld			; clear direction
  4957                                  
  4958                                  ; -- end changed section
  4959                                  
  4960                                  		; 20/12/2022
  4961                                  		; ds = cs <> es
  4962                                  		; ss = 0
  4963                                  		; sp = 700h
  4964                                  
  4965 00001B37 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  4966 00001B3C 7577                    		jnz	short checkcmosclock
  4967 00001B3E 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  4968 00001B43 7470                    		jz	short checkcmosclock
  4969 00001B45 97                      		xchg	ax, di		; save allocation pointer in ax
  4970 00001B46 BE00F0                  		mov	si, 0F000h
  4971 00001B49 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  4972 00001B4B BE[4C17]                		mov	si, bios_date	; "01/10/84"
  4973 00001B4E BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  4974 00001B51 B90900                  		mov	cx, 9		; bdate_l
  4975                                  					; Only patch ROM for bios 01/10/84
  4976 00001B54 F3A6                    		repe cmpsb		; check	for date + zero	on end
  4977 00001B56 97                      		xchg	ax, di		; restore allocation pointer
  4978                                  
  4979                                  ; M015 -- begin changes
  4980                                  
  4981                                  		;jnz	short checkcmosclock
  4982                                  		; 02/10/2022
  4983 00001B57 7508                    		jnz	short checkcompaqbug
  4984                                  
  4985                                  ; install at rom fix
  4986                                  
  4987                                  		; 19/10/2022
  4988                                  		;mov	cx, offset endatrom
  4989 00001B59 B9[0A14]                		mov	cx, endatrom
  4990                                  		;mov	si, offset ibm_disk_io
  4991 00001B5C BE[DC12]                		mov	si, ibm_disk_io
  4992 00001B5F EB46                    		jmp	short install_int13_patch
  4993                                  ; ----------------------------------------------------------------------------
  4994                                  
  4995                                  ; M065 -- begin changes
  4996                                  ;
  4997                                  ; On certain systems with Western Digital disk controllers, the
  4998                                  ; following detection scheme caused an unpredictable and serious
  4999                                  ; failure. In particular, they've implemented a nonstandard
  5000                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5001                                  ; what happens to be at es:[bx] and other memory locations indexed
  5002                                  ; off of it.
  5003                                  ;
  5004                                  ; Compaq was unable to tell us exactly which kind of systems have
  5005                                  ; the bug, except that they guarantee that the bug was fixed in
  5006                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5007                                  ; string, and then look for date codes before 08/04/86 to decide
  5008                                  ; when to install the hook.
  5009                                  
  5010                                  ;checkcmosclock:
  5011                                  ; 02/10/2022				
  5012                                  checkcompaqbug:
  5013                                  		; 20/12/2022
  5014                                  		; es = 0F000h
  5015                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5016                                  		;mov	es, ax
  5017                                  
  5018                                  		; 19/10/2022
  5019 00001B61 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5020                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5021 00001B68 754B                    		jnz	short not_compaq_patch
  5022 00001B6A 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5023                                  		;cmp	word ptr es:0FFECh, 'PM'
  5024 00001B71 7542                    		jnz	short not_compaq_patch
  5025 00001B73 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5026                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5027 00001B7A 7539                    		jnz	short not_compaq_patch
  5028                                  
  5029                                  ; We're running on a COMPAQ. Now look at the date code.
  5030                                  
  5031 00001B7C 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5032 00001B80 86E0                    		xchg	ah, al
  5033 00001B82 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5034                                  		;cmp	ax, '86'        ; 3836h
  5035                                  					; is it	86?
  5036 00001B85 772E                    		ja	short not_compaq_patch
  5037 00001B87 7218                    		jb	short do_compaq_patch
  5038 00001B89 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5039 00001B8D 86E0                    		xchg	ah, al
  5040 00001B8F 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5041                                  		;cmp	ax, '08'        ; 3038h
  5042                                  					; is it	08?
  5043 00001B92 7721                    		ja	short not_compaq_patch
  5044 00001B94 720B                    		jb	short do_compaq_patch
  5045 00001B96 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5046 00001B9A 86E0                    		xchg	ah, al
  5047 00001B9C 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5048                                  		;cmp	ax, '04'        ; 3034h
  5049                                  					; is it	04?
  5050 00001B9F 7314                    		jnb	short not_compaq_patch
  5051                                  
  5052                                  do_compaq_patch:			
  5053 00001BA1 B9[2B14]                		mov	cx, end_compaq_i13hook
  5054 00001BA4 BE[0A14]                		mov	si, endatrom
  5055                                  
  5056                                  install_int13_patch:			
  5057 00001BA7 0E                      		push	cs
  5058 00001BA8 07                      		pop	es
  5059                                  		; 18/10/2022
  5060 00001BA9 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5061 00001BAD 8C0E[B600]              		mov	[Orig13+2], cs
  5062 00001BB1 29F1                    		sub	cx, si		; size of rom fix module
  5063 00001BB3 F3A4                    		rep movsb		; relocate it
  5064                                  
  5065                                  ; M065 -- end changes
  5066                                  
  5067                                  ; ----------------------------------------------------------------------------
  5068                                  not_compaq_patch:			; M065
  5069                                  		; 17/10/2022
  5070                                  checkcmosclock:	
  5071                                  		; 18/10/2022		
  5072 00001BB5 0E                      		push	cs
  5073 00001BB6 07                      		pop	es
  5074                                  
  5075                                  		; 20/12/2022
  5076                                  		; ds = cs = es
  5077                                  		; ss = 0
  5078                                  		; sp = 700h
  5079                                  
  5080 00001BB7 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5081 00001BBC 7518                    		jnz	short checkk09	; no
  5082                                  
  5083 00001BBE 893E[0605]              		mov	word [daycnttoday], di
  5084                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5085 00001BC2 B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5086 00001BC5 BE[2C14]                		mov	si, daycnt_to_day
  5087 00001BC8 F3A4                    		rep movsb
  5088 00001BCA 893E[0205]              		mov	word [bintobcd], di
  5089                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5090                                  					; let original segment stay
  5091 00001BCE B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5092 00001BD1 BE[FD14]                		mov	si, bin_to_bcd
  5093 00001BD4 F3A4                    		rep movsb
  5094                                  checkk09:				
  5095 00001BD6 57                      		push	di ; ? ; save ? ; 20/12/2022
  5096 00001BD7 B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5097 00001BDA B301                    		mov	bl, 1		; wait for 1 clock tick
  5098 00001BDC 268A3D                  		mov	bh, [es:di]
  5099 00001BDF F9                      		stc			; Assume we will fail
  5100 00001BE0 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5101                                  					; AL = condition type, BH = condition compare or mask value
  5102                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5103                                  					; DX = I/O port	address	if AL bit 4 set
  5104 00001BE2 5F                      		pop	di ; ?
  5105 00001BE3 721B                    		jc	short configdone ; 20/12/2022
  5106                                  
  5107 00001BE5 C606[7900]01            		mov	byte [fhavek09], 1
  5108                                  					; remember we have a k09 type
  5109 00001BEA 1E                      		push	ds
  5110 00001BEB 31C0                    		xor	ax, ax
  5111 00001BED 8ED8                    		mov	ds, ax
  5112                                  		
  5113 00001BEF 893EB001                		mov	[6Ch*4], di
  5114                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5115                                  					; new int 6ch handler
  5116                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5117 00001BF3 8C0EB201                		mov	word [6Ch*4+2], cs
  5118 00001BF7 1F                      		pop	ds
  5119                                  		; 20/12/2022
  5120                                  		; ds = cs = es
  5121 00001BF8 BE[0815]                		mov	si, int6c
  5122 00001BFB B9C201                  		mov	cx, endk09-int6c ; 459
  5123                                  		;mov	cx, 459		; endk09 - int6c
  5124                                  					; size of k09 routine
  5125 00001BFE F3A4                    		rep movsb		;
  5126                                  					; set up config	stuff for sysinit
  5127                                  ; ----------------------------------------------------------------------------
  5128                                  ; Set up config stuff for SYSINIT
  5129                                  
  5130                                  ; 17/10/2022
  5131                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5132                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5133                                  ; 09/12/2022
  5134                                  SETDRIVE equ SetDrive
  5135                                  GETBP equ GetBp
  5136                                  		
  5137                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5138                                  configdone:				
  5139 00001C00 0E                      		push	cs		; di is	final ending address of	msbio.
  5140 00001C01 1F                      		pop	ds
  5141 00001C02 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5142                                  		; 10/12/2022
  5143                                  		;shr	di, 1
  5144                                  		;shr	di, 1
  5145                                  		;shr	di, 1
  5146                                  		;shr	di, 1
  5147 00001C05 B104                    		mov	cl, 4
  5148 00001C07 D3EF                    		shr	di, cl		
  5149                                  		; 10/12/2022
  5150                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5151                                  		; 19/10/2022 - Temporary !
  5152                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5153                                  		; 14/08/2023
  5154 00001C09 83C770                  		add	di, 70h
  5155 00001C0C 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5156                                  
  5157                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5158                                  
  5159                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5160                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5161                                  	     
  5162                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5163                                  
  5164                                  ; ----------------------------------------------------------------------------
  5165                                  ; ----------------------------------------------------------------------------
  5166                                  %if 0
  5167                                  		mov	ax, [drvfat]	; get drive and	fat id
  5168                                  		; 22/12/2022
  5169                                  		; Note: SETDRIVES uses AL (drive number) only
  5170                                  		mov	bp, SETDRIVE
  5171                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5172                                  					; at 2C7h:4D7h = 70h:2A47h
  5173                                  		push	cs		; simulate far call
  5174                                  		call	call_bios_code	; get bds for drive
  5175                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5176                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5177                                  		push	cs
  5178                                  		call	call_bios_code
  5179                                  
  5180                                  	; resort to funky old segment definitions for now
  5181                                  
  5182                                  		; 22/12/2022
  5183                                  		;push	es		; copy bds to ds:di
  5184                                  		;pop	ds
  5185                                  
  5186                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5187                                  	;
  5188                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5189                                  	;	  back. Apparently it was what actually setup es: for the following
  5190                                  	; cas----
  5191                                  
  5192                                  		; 22/12/2022
  5193                                  		;xor	di, di
  5194                                  		;mov	al, [es:di]	; get fat id byte
  5195                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5196                                  		;mov	[es:drvfat+1], al
  5197                                  		;mov	ax, [es:drvfat]
  5198                                  		
  5199                                  		; 22/12/2022
  5200                                  		; ds = cs
  5201                                  	;;;	mov	al, [drvfat]
  5202                                  
  5203                                  	; cas -- why do a SECOND setdrive here???
  5204                                  
  5205                                  		; 22/12/2022
  5206                                  		;push	es		; save whatever's in es
  5207                                  		;push	ds		; copy bds to es:di
  5208                                  		;pop	es
  5209                                  		;push	cs		; copy Bios_Data to ds
  5210                                  		;pop	ds
  5211                                  	
  5212                                  	; 22/12/2022
  5213                                  	;;;	mov	bp, SETDRIVE
  5214                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5215                                  	;;;	push	cs		; simulate far call
  5216                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5217                                  	
  5218                                  		; 22/12/2022
  5219                                  		;push	es		; copy bds back to ds:di
  5220                                  		;pop	ds
  5221                                  		;pop	es		; pop whatever was in es
  5222                                  
  5223                                  	; Now we load in the MSDOS.SYS file
  5224                                  
  5225                                  	; 22/12/2022
  5226                                  	; -----
  5227                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5228                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5229                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5230                                  	;				; get size of fat on media
  5231                                  	;	;mov	es:16DEh, bl
  5232                                  	;	mov	[es:fbigfat], bl
  5233                                  	;	mov	cl, [di+8]
  5234                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5235                                  	;	;sub	es:16D8h, ax
  5236                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5237                                  	;				; need a logical sector number that will
  5238                                  	;				; be used by getclus(diskrd procedure)
  5239                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5240                                  	;	;sbb	es:16DAh, ax
  5241                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5242                                  	; -----
  5243                                  		
  5244                                  	; -----	; 22/12/2022
  5245                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5246                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5247                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5248                                  					; get size of fat on media
  5249                                  		mov	[fbigfat], bl
  5250                                  		mov	cl, [es:di+8]
  5251                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5252                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5253                                  					; need a logical sector number that will
  5254                                  					; be used by getclus(diskrd procedure)
  5255                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5256                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5257                                  	; ------
  5258                                  
  5259                                  		xor	ch, ch	 ; cx = sectors/cluster
  5260                                  
  5261                                  	; the boot program has left the directory at 0:500h
  5262                                  
  5263                                  		push	ds
  5264                                  		xor	di, di
  5265                                  		mov	ds, di
  5266                                  		mov	bx, [53Ah]
  5267                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5268                                  					; (First cluster field of 2nd dir entry
  5269                                  					; of root directory in the buffer at 500h)
  5270                                  		pop	ds
  5271                                  loadit:
  5272                                  		mov	ax, SYSINITSEG	; 46Dh
  5273                                  		;mov	ax, 46Dh	; sysinit segment
  5274                                  		mov	es, ax
  5275                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5276                                  		;mov	es, [es:271h]
  5277                                  
  5278                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5279                                  ; ----------------------------------------------------------------------------
  5280                                  
  5281                                  		;test	byte [cs:fbigfat], fbig
  5282                                  		test	byte [cs:fbigfat], 40h ; fbig
  5283                                  		jnz	short eofbig
  5284                                  		cmp	bx, 0FF7h
  5285                                  		jmp	short iseofx
  5286                                  ; ----------------------------------------------------------------------------
  5287                                  
  5288                                  eofbig:
  5289                                  		cmp	bx, 0FFF7h
  5290                                  iseofx:
  5291                                  		jb	short loadit	; keep loading until cluster = eof
  5292                                  
  5293                                  %endif
  5294                                  ; ----------------------------------------------------------------------------
  5295                                  ; ----------------------------------------------------------------------------
  5296                                  
  5297 00001C10 E8F803                  		call	setdrvparms	; 
  5298                                  
  5299                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5300                                  		;jmp	far 46Dh:267h
  5301 00001C13 EA[6702]3904            		jmp	SYSINITSEG:SYSINITSTART
  5302                                  
  5303                                  ; =============== S U B	R O U T	I N E ========================================
  5304                                  
  5305                                  ; Following are subroutines to support resident device driver initialization
  5306                                  ;
  5307                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5308                                  
  5309                                  ;	M035 -- begin changed section
  5310                                  
  5311                                  ;******************************************************************************
  5312                                  ; module name: remap
  5313                                  ;
  5314                                  ; descriptive name: all the code for himem that could be separated from msbio
  5315                                  ;
  5316                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5317                                  ;	     letters) if more than two diskette drives on the system.
  5318                                  ;
  5319                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5320                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5321                                  ;	       letters. to do this, scan for disk drives and assign logical
  5322                                  ;	       drive number starting from 2 and then rescan diskette drives
  5323                                  ;	       and assign next to the last logical drive number of last disk
  5324                                  ;	       drive to the 3rd and 4th diskette drives.
  5325                                  
  5326                                  ; input:       none
  5327                                  ; exit:	drive letters have been remapped in bds chain
  5328                                  ; exit error:  none
  5329                                  ; called from: msinit
  5330                                  ;
  5331                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5332                                  ;	  found in the system
  5333                                  ;	  this function assumes that there are no more than 26 drives assigned
  5334                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5335                                  ;	  this function assumes that the first entries in the chain are
  5336                                  ;	   floppy drives, and all the rest are hard drives
  5337                                  ;	  will alter the boot drive if necessary to reflect remapping
  5338                                  ;
  5339                                  ;******************************************************************************
  5340                                  
  5341                                  ; 17/10/2022
  5342                                  ; 02/10/2022
  5343                                  
  5344                                  remap:		; proc near		
  5345 00001C18 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5346                                  
  5347                                  ; search for 1st fixed disk physical drive num
  5348                                  
  5349                                  drive_loop:				
  5350 00001C1D 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5351                                  					; first	hard disk??
  5352 00001C21 7409                    		jz	short fdrv_found ; yes,	continue
  5353 00001C23 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5354                                  					; get next bds,	assume segment
  5355 00001C25 83FFFF                  		cmp	di, -1		; last bds?
  5356 00001C28 75F3                    		jnz	short drive_loop ; loop	if not
  5357 00001C2A EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5358                                  
  5359                                  ;------------------------------------------------------------------------------
  5360                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5361                                  ;logical drive nums to 3, 4, 5 etc.
  5362                                  ;------------------------------------------------------------------------------
  5363                                  
  5364                                  fdrv_found:				
  5365 00001C2C B002                    		mov	al, 2		; start	with logical drv num=2
  5366                                  fdrv_loop:				
  5367 00001C2E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5368                                  					; found	??
  5369 00001C31 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5370                                  					; ds:di--> next	bds
  5371                                  		;inc	al		; set num for next drive
  5372                                  		; 18/12/2022
  5373 00001C33 40                      		inc	ax
  5374 00001C34 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ??
  5375 00001C37 75F5                    		jnz	short fdrv_loop	; no - assign more disk	drives
  5376                                  
  5377                                  ;------------------------------------------------------------------------------
  5378                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5379                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5380                                  ; any more.
  5381                                  ;------------------------------------------------------------------------------
  5382                                  
  5383 00001C39 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5384                                  					; get first bds
  5385 00001C3E 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5386                                  					; ds:di-->bds2
  5387 00001C40 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5388 00001C45 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5389                                  remap_loop1:				
  5390 00001C48 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5391                                  					; set new num to next floppy
  5392 00001C4A 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5393 00001C4D FEC0                    		inc	al		; new number for next floppy
  5394 00001C4F FECC                    		dec	ah		; count	down extra floppies
  5395 00001C51 75F5                    		jnz	short remap_loop1
  5396                                  
  5397                                  ; now we've got to adjust the boot drive if we reassigned it
  5398                                  
  5399 00001C53 2EA0[CA16]              		mov	al, [cs:drvfat]
  5400 00001C57 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5401 00001C59 7220                    		jb	short rmap_exit
  5402 00001C5B 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5403 00001C60 7204                    		jb	short remap_boot_flop ;	brif so
  5404                                  
  5405                                  ; we've got to remap the boot hard drive
  5406                                  ; subtract the number of EXTRA floppies from it
  5407                                  
  5408 00001C62 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5409 00001C64 EB05                    		jmp	short remap_change_boot_drv
  5410                                  ; ---------------------------------------------------------------------------
  5411                                  
  5412                                  ; we've got to remap the boot floppy.
  5413                                  ; add the number of hard drive partitions to it
  5414                                  
  5415                                  remap_boot_flop:			
  5416 00001C66 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5417                                  remap_change_boot_drv:			
  5418 00001C6B 2EA2[CA16]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5419 00001C6F FEC0                    		inc	al
  5420 00001C71 1E                      		push	ds
  5421 00001C72 BF3904                  		mov	di, SYSINITSEG	; 46Dh
  5422                                  		;mov	di, 46Dh	; SYSINIT segment
  5423 00001C75 8EDF                    		mov	ds, di
  5424 00001C77 A2[9602]                		mov	[DEFAULTDRIVE], al
  5425                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5426                                  					; pass it to sysinit as	well
  5427 00001C7A 1F                      		pop	ds
  5428                                  rmap_exit:				
  5429 00001C7B C3                      		retn
  5430                                  
  5431                                  ; =============== S U B	R O U T	I N E =======================================
  5432                                  
  5433                                  ; 17/10/2022
  5434                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5435                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5436                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5437                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5438                                  ;**************************************************
  5439                                  ; getboot - get the boot sector for a hard disk
  5440                                  ;
  5441                                  ; Reads the boot sector from a specified drive into
  5442                                  ; a buffer at the top of memory.
  5443                                  ;
  5444                                  ; dl = int13 drive number to read boot sector for
  5445                                  ;**************************************************
  5446                                  
  5447                                  ; 17/10/2022
  5448                                  bootbias equ 200h
  5449                                  
  5450                                  getboot:	; proc near		
  5451                                  		
  5452                                  		; 08/04/2018
  5453                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5454                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5455                                  		; 02/10/2022 - Retro DOS v4.0
  5456                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5457                                  
  5458 00001C7C 2EA1[CD16]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5459 00001C80 8EC0                    		mov	es, ax
  5460                                  		; 17/10/2022
  5461 00001C82 BB0002                  		mov	bx, bootbias ; 200h
  5462                                  		;mov	bx, 200h	; bootbias
  5463                                  					; load BX, ES:BX is where sector goes
  5464 00001C85 B80102                  		mov	ax, 201h
  5465 00001C88 30F6                    		xor	dh, dh
  5466 00001C8A B90100                  		mov	cx, 1
  5467 00001C8D CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5468                                  					; AL = number of sectors to read, CH = track, CL = sector
  5469                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5470                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5471 00001C8F 7209                    		jb	short erret
  5472                                  		; 17/10/2022
  5473 00001C91 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5474                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5475                                  					; Dave Litton magic word?
  5476 00001C98 7401                    		jz	short norm_ret	; yes
  5477                                  erret:					
  5478 00001C9A F9                      		stc
  5479                                  norm_ret:				
  5480 00001C9B C3                      		retn
  5481                                  
  5482                                  ; =============== S U B	R O U T	I N E =======================================
  5483                                  
  5484                                  ; 28/12/2018 - Retro DOS v4.0 
  5485                                  
  5486                                  ;***************************************************************************
  5487                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5488                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5489                                  ;   our own logical sectors start. we also read in our boot sector to
  5490                                  ;   determine version number
  5491                                  ;
  5492                                  ;   inputs:	dl is rom drive number (80...)
  5493                                  ;		bh is partition number (0....) 
  5494                                  ;		ds:di points to bds
  5495                                  ;   outputs:	carry clear -> bpb is filled in
  5496                                  ;		carry set   -> bpb is left uninitialized due to error
  5497                                  ;	trashes (at least) si, cx
  5498                                  ;	MUST PRESERVE ES:!!!!
  5499                                  ;***************************************************************************
  5500                                  
  5501                                  sethard:	; proc near		
  5502                                  		; 14/08/2023
  5503                                  		; ds = cs = BIOSDATA
  5504 00001C9C 57                      		push	di
  5505 00001C9D 53                      		push	bx
  5506                                  		;push	ds  ; ds = cs = BIOSDATA ; 14/08/2023
  5507 00001C9E 06                      		push	es
  5508 00001C9F 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5509 00001CA2 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5510 00001CA5 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5511                                  					; fnon_removable
  5512 00001CA9 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5513                                  					; ffHardFile
  5514 00001CAD C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5515 00001CB2 88FE                    		mov	dh, bh		; partition number
  5516 00001CB4 52                      		push	dx
  5517 00001CB5 B408                    		mov	ah, 8
  5518 00001CB7 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5519                                  					; DL = drive number
  5520                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5521                                  					; DL = number of consecutive drives
  5522                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5523 00001CB9 FEC6                    		inc	dh
  5524 00001CBB 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5525 00001CBE 5A                      		pop	dx
  5526 00001CBF 7263                    		jb	short setret	; error	if no hard disk
  5527 00001CC1 80E13F                  		and	cl, 3Fh
  5528 00001CC4 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5529 00001CC7 52                      		push	dx		; save partition number
  5530 00001CC8 E8B1FF                  		call	getboot
  5531 00001CCB 5A                      		pop	dx		; restore partition number
  5532 00001CCC 7256                    		jb	short setret
  5533 00001CCE BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5534                                  
  5535                                  ; The first 'active' partition is 00, the second is 01....
  5536                                  ;   then the remainder of the 'primary' but non-active partitions
  5537                                  
  5538                                  act_part:				
  5539 00001CD1 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5540 00001CD6 7418                    		jz	short no_act	; no
  5541 00001CD8 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5542 00001CDC 740C                    		jz	short got_good_act
  5543 00001CDE 26803F04                		cmp	byte [es:bx], 4
  5544 00001CE2 7406                    		jz	short got_good_act
  5545 00001CE4 26803F06                		cmp	byte [es:bx], 6
  5546 00001CE8 7506                    		jnz	short no_act
  5547                                  got_good_act:				
  5548 00001CEA 08F6                    		or	dh, dh		; is this our target partition #?
  5549 00001CEC 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5550 00001CEE FECE                    		dec	dh		; count	down
  5551                                  no_act:					
  5552 00001CF0 83C310                  		add	bx, 16
  5553 00001CF3 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5554                                  					; last entry done?
  5555 00001CF7 75D8                    		jnz	short act_part	; no, process next entry
  5556 00001CF9 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5557                                  					; restore original value of bx
  5558                                  
  5559                                  ; Now scan the non-active partitions
  5560                                  
  5561                                  get_primary:				
  5562 00001CFC 26F647FC80              		test	byte [es:bx-4], 80h
  5563 00001D01 7518                    		jnz	short not_prim	; we've already scanned
  5564                                  					; the ACTIVE ones
  5565 00001D03 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5566 00001D07 740C                    		jz	short got_prim
  5567 00001D09 26803F04                		cmp	byte [es:bx], 4
  5568 00001D0D 7406                    		jz	short got_prim
  5569 00001D0F 26803F06                		cmp	byte [es:bx], 6
  5570 00001D13 7506                    		jnz	short not_prim
  5571                                  got_prim:				
  5572 00001D15 08F6                    		or	dh, dh		; is this our target partition?
  5573 00001D17 740F                    		jz	short set2
  5574 00001D19 FECE                    		dec	dh
  5575                                  not_prim:				
  5576 00001D1B 83C310                  		add	bx, 16
  5577 00001D1E 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5578 00001D22 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5579                                  setret:					
  5580 00001D24 F9                      		stc			; error	return
  5581 00001D25 E9A002                  		jmp	ret_hard_err
  5582                                  
  5583                                  ; ---------------------------------------------------------------------------
  5584                                  
  5585                                  ;  until we get the real logical boot record and get the bpb,
  5586                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5587                                  ;  for the convenience of the computation.
  5588                                  ;
  5589                                  ;  at the end of this procedure, if a bpb information is gotten from
  5590                                  ;  the valid boot record, then we are going to use those bpb information
  5591                                  ;  without change.
  5592                                  ;
  5593                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5594                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5595                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5596                                  
  5597                                  set2:					
  5598                                  		; 14/08/2023
  5599                                  		; ds = cs = BIOSDATA segment (0070h)
  5600 00001D28 8816[CF16]              		mov	[rom_drv_num], dl
  5601                                  		;mov	[cs:rom_drv_num], dl
  5602                                  			; save the rom bios drive number we are handling now.
  5603 00001D2C 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5604 00001D30 268B5706                		mov	dx, [es:bx+6]
  5605                                  
  5606                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5607                                  ; sectors should be allowed	
  5608                                  
  5609 00001D34 83E801                  		sub	ax, 1
  5610 00001D37 83DA00                  		sbb	dx, 0
  5611 00001D3A 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5612 00001D3E 2613570A                		adc	dx, [es:bx+10]
  5613 00001D42 7305                    		jnb	short okdrive
  5614 00001D44 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5615                                  okdrive:				
  5616 00001D49 268B4704                		mov	ax, [es:bx+4]
  5617 00001D4D 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5618                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5619 00001D50 268B4706                		mov	ax, [es:bx+6]
  5620 00001D54 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5621 00001D57 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5622 00001D5B 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5623 00001D5F 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5624 00001D62 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5625                                  					; bpb->maxsec =	p->partitionlength
  5626 00001D65 83FA00                  		cmp	dx, 0
  5627 00001D68 7705                    		ja	short okdrive_1
  5628 00001D6A 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5629 00001D6D 72B5                    		jb	short setret	; return -1;
  5630                                  okdrive_1:				
  5631 00001D6F 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5632 00001D72 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5633 00001D75 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5634                                  					; usually equal	to the # of sec/trk.
  5635 00001D77 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5636 00001D7A 50                      		push	ax
  5637 00001D7B 89D0                    		mov	ax, dx
  5638 00001D7D 31D2                    		xor	dx, dx
  5639 00001D7F F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5640                                  					; (track)temp_h:ax + (sector)dx
  5641                                  		; 17/10/2022
  5642                                  		;mov	[cs:temp_h], ax
  5643                                  		; 14/08/2023 (ds=cs)
  5644 00001D81 A3[2905]                		mov	[temp_h], ax
  5645 00001D84 58                      		pop	ax
  5646 00001D85 F7F3                    		div	bx
  5647 00001D87 88D1                    		mov	cl, dl
  5648 00001D89 FEC1                    		inc	cl
  5649 00001D8B 31DB                    		xor	bx, bx
  5650 00001D8D 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5651 00001D90 50                      		push	ax
  5652 00001D91 31D2                    		xor	dx, dx
  5653                                  		;mov	ax, [cs:temp_h]
  5654 00001D93 A1[2905]                		mov	ax, [temp_h] ; 14/08/2023
  5655 00001D96 F7F3                    		div	bx
  5656                                  		;mov	[cs:temp_h], ax
  5657 00001D98 A3[2905]                		mov	[temp_h], ax ; 14/08/2023
  5658 00001D9B 58                      		pop	ax
  5659 00001D9C F7F3                    		div	bx		; dl is head, ax is cylinder
  5660                                  		; 14/08/2023 (ds=cs)
  5661 00001D9E 833E[2905]00            		cmp	word [temp_h], 0
  5662                                  		;cmp	word [cs:temp_h], 0
  5663 00001DA3 775F                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5664 00001DA5 3D0004                  		cmp	ax, 1024
  5665 00001DA8 775A                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5666                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5667                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5668                                  			; ('ja' must be 'jnb')
  5669                                  okdrive_2:
  5670                                   		; 28/07/2019
  5671                                  ; dl is head.
  5672                                  ; ax is cylinder
  5673                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5674                                  
  5675                                  ;*** for mini disks ***
  5676                                  
  5677 00001DAA 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5678                                  					; check	for mini disk
  5679 00001DAE 7503                    		jnz	short oknotmini	; not mini disk.
  5680 00001DB0 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5681                                  					; set the physical track number
  5682                                  oknotmini:
  5683                                  ;*** end of added logic for mini disk
  5684                                  				
  5685 00001DB3 D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5686 00001DB5 D0CC                    		ror	ah, 1		; two bits of upper byte
  5687 00001DB7 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5688 00001DBA 08E1                    		or	cl, ah		; move two bits	to correct spot
  5689 00001DBC 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5690                                  					; cl is	sector + 2 high	bits of	cylinder
  5691 00001DBE 88D6                    		mov	dh, dl		; dh is	head
  5692                                  		
  5693                                  		; 14/08/2023 (ds=cs)
  5694 00001DC0 8A16[CF16]              		mov	dl, [rom_drv_num]
  5695                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  5696                                  
  5697                                  
  5698                                  ; cl is sector + 2 high bits of cylinder
  5699                                  ; ch is low 8 bits of cylinder
  5700                                  ; dh is head
  5701                                  ; dl is drive
  5702                                  
  5703                                  ; for convenience, we are going to read the logical boot sector
  5704                                  ; into cs:disksector area.
  5705                                  
  5706                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5707                                  ; is to be read in is cs:disksector.
  5708                                  
  5709 00001DC4 0E                      		push	cs
  5710 00001DC5 07                      		pop	es
  5711 00001DC6 BB[4E01]                		mov	bx, disksector	; for convenience,
  5712                                  					; we are going to read the logical boot	sector
  5713                                  					; into cs:disksector area.
  5714 00001DC9 B80102                  		mov	ax, 201h
  5715 00001DCC CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5716                                  					; AL = number of sectors to read, CH = track, CL = sector
  5717                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5718                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5719                                  
  5720                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5721                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5722                                  ; media if we recognize the version number.
  5723                                  
  5724                                  		; 14/08/2023
  5725                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  5726                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  5727 00001DCE 53                      		push	bx
  5728 00001DCF 50                      		push	ax
  5729                                  		; 14/08/2023
  5730                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  5731 00001DD0 803FE9                  		cmp	byte [bx], 0E9h
  5732                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5733 00001DD3 740B                    		jz	short check_1_ok ; yes
  5734 00001DD5 803FEB                  		cmp	byte [bx], 0EBh
  5735                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5736 00001DD8 7525                    		jnz	short invalid_boot_record ; no
  5737 00001DDA 807F0290                		cmp	byte [bx+2], 90h
  5738                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5739 00001DDE 751F                    		jnz	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  5740                                  check_1_ok:	
  5741                                  		; 14/08/2023			
  5742 00001DE0 BB[5901]                		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  5743                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5744                                  					; point	to the bpb in the boot record
  5745                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5746 00001DE3 8A470A                  		mov	al, [bx+10] ; 14/08/2023 
  5747                                  					; get the mediadescriptor byte
  5748 00001DE6 24F0                    		and	al, 0F0h	; mask off low nibble
  5749 00001DE8 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5750 00001DEA 7513                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5751                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5752 00001DEC 813F0002                		cmp	word [bx], 512 ; 14/08/2023
  5753 00001DF0 750D                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5754                                  
  5755                                  check2_ok:				; yes, mediadescriptor ok.
  5756 00001DF2 8A4702                  		mov	al, [bx+2] ; 14/08/2023
  5757                                  		;mov	al, [cs:bx+2]	; now make sure that
  5758                                  					; the sectorspercluster	is
  5759                                  					; a power of 2
  5760                                  					;
  5761                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5762                                  					; get the sectorspercluster
  5763 00001DF5 08C0                    		or	al, al		; is it	zero?
  5764 00001DF7 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5765                                  
  5766                                  ck_power_of_two:			
  5767 00001DF9 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5768 00001DFB 73FC                    		jnb	short ck_power_of_two
  5769 00001DFD 740B                    		jz	short valid_boot_record
  5770                                  
  5771                                  invalid_boot_record:			
  5772 00001DFF 58                      		pop	ax
  5773 00001E00 5B                      		pop	bx
  5774 00001E01 E90F01                  		jmp	unknown		; jump to invalid boot record
  5775                                  					; unformatted or illegal media.
  5776                                  	; 14/08/2023	
  5777                                  ; ---------------------------------------------------------------------------
  5778                                  setret_brdg:				
  5779 00001E04 E91DFF                  		jmp	setret
  5780                                  ; ---------------------------------------------------------------------------
  5781                                  
  5782                                  unknown3_0_j:				
  5783 00001E07 E90D01                  		jmp	unknown3_0	; legally formatted media,
  5784                                  					; although, content might be bad.
  5785                                  ; ---------------------------------------------------------------------------
  5786                                  
  5787                                  valid_boot_record:			
  5788 00001E0A 58                      		pop	ax
  5789 00001E0B 5B                      		pop	bx
  5790                                  
  5791                                  ; Signature found. Now check version.
  5792                                  
  5793                                  		; 14/08/2023
  5794 00001E0C 817F08322E              		cmp	word [bx+8], '2.'
  5795                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5796                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5797 00001E11 7506                    		jnz	short try5
  5798 00001E13 807F0A30                		cmp	byte [bx+10], '0'
  5799                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5800                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5801                                  		; 14/08/2023
  5802                                  		;jnz	short try5
  5803                                  		;jmp	short copybpb
  5804 00001E17 7425                    		jz	short copybpb
  5805                                  
  5806                                  	; 14/08/2023
  5807                                  ; ---------------------------------------------------------------------------
  5808                                  ;
  5809                                  ;setret_brdg:				
  5810                                  ;		jmp	setret
  5811                                  ; ---------------------------------------------------------------------------
  5812                                  ;
  5813                                  ;unknown3_0_j:				
  5814                                  ;		jmp	unknown3_0	; legally formatted media,
  5815                                  ;					; although, content might be bad.
  5816                                  ; ---------------------------------------------------------------------------
  5817                                  
  5818                                  try5:					
  5819 00001E19 E8B001                  		call	cover_fdisk_bug
  5820                                  
  5821                                  ; see if it is an os2 signature
  5822                                  
  5823                                  		; 14/08/2023
  5824                                  		; ds = cs = BIOSDATA segment
  5825 00001E1C 817F08302E              		cmp	word [bx+8], '0.'
  5826                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5827                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5828 00001E21 750C                    		jnz	short no_os2
  5829 00001E23 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  5830                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5831 00001E26 2C31                    		sub	al, '1'
  5832                                  		;sub	al, 31h		; '1'
  5833 00001E28 24FE                    		and	al, 0FEh
  5834 00001E2A 7412                    		jz	short copybpb	; accept either	'1' or '2'
  5835 00001E2C E9E400                  		jmp	unknown
  5836                                  ; ---------------------------------------------------------------------------
  5837                                  
  5838                                  ; no os2 signature, this is to check for real dos versions
  5839                                  
  5840                                  no_os2:					
  5841                                  		; 14/08/2023
  5842                                  		; ds = cs = BIOSDATA
  5843 00001E2F 817F08332E              		cmp	word [bx+8], '3.'			
  5844                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5845                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5846 00001E34 72D1                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5847                                  					; do not trust it, but still legal.
  5848 00001E36 7506                    		jnz	short copybpb	; honor	os2 boot record
  5849                                  					; or dos 4.0 version
  5850 00001E38 807F0A31                		cmp	byte [bx+10], '1' ; 14/08/2023
  5851                                  		;cmp	byte [cs:bx+10], '1'
  5852                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5853 00001E3C 72C9                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  5854                                  copybpb:
  5855                                  
  5856                                  ; 03/10/2022
  5857                                  
  5858                                  ; we have a valid boot sector. use the bpb in it to build the
  5859                                  ; bpb in bios. it is assumed that only
  5860                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5861                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5862                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5863                                  ; need to be set (all other values in already). fbigfat is also set.
  5864                                  
  5865                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5866                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5867                                  ; and system id according to the boot record.
  5868                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5869                                  
  5870                                  		; 10/12/2022
  5871                                  		; (number of FATs optimization)
  5872 00001E3E BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5873                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5874                                  		;mov	cl, [cs:si+05h]
  5875                                  		; 14/08/2023
  5876                                  		; ds = cs = BIOSDATA segment (0070h)
  5877 00001E41 8A4C05                  		mov	cl, [si+05h] ; number of FATs
  5878                                  
  5879 00001E44 807C1B29                		cmp	byte [si+1Bh], 29h ; 14/08/2023
  5880                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5881                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5882                                  					; [disksector+EXT_BOOT.SIG]
  5883                                  					; EXT_BOOT_SIGNATURE
  5884 00001E48 7542                    		jnz	short copybpb_fat ; conventional fat system
  5885                                  
  5886                                  		; 03/10/2022
  5887                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5888                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5889                                  		;	     number of FATs must be 2 ; =*?=
  5890                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5891                                  		;
  5892                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5893                                  
  5894                                  		; 10/12/2022
  5895                                  		;cmp	byte [cs:disksector+10h], 0
  5896                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5897                                  		;jnz	short copybpb_fat ; a fat system.
  5898 00001E4A 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5899 00001E4C 753E                    		jnz	short copybpb_fat ; a fat system.
  5900                                  
  5901                                  ; non fat based	media.
  5902                                  
  5903 00001E4E 57                      		push	di
  5904                                  		; 14/08/2023
  5905                                  		;push	ds  ; ds = cs = BIOSDATA segment
  5906 00001E4F 1E                      		push	ds
  5907 00001E50 07                      		pop	es
  5908                                  		; 14/08/2023
  5909                                  		; ds = cs
  5910                                  		;push	cs
  5911                                  		;pop	ds
  5912                                  
  5913                                  		; 10/12/2022
  5914                                  		; (number of FATs optimization)
  5915                                  		; SI = disksector+11
  5916                                  		; 17/10/2022
  5917                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5918                                  		;mov	si, disksector+11
  5919 00001E51 83C706                  		add	di, 6		; add di,BDS.BPB
  5920                                  
  5921                                  ; just for completeness, we'll make sure that total_sectors and
  5922                                  ; big_total_sectors aren't both zero. I've seen examples of
  5923                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5924                                  ; got that way. If it occurs, then use the values from the
  5925                                  ; partition table.
  5926                                  
  5927                                  		; 18/12/2022
  5928 00001E54 29C9                    		sub	cx, cx 
  5929                                  
  5930                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5931                                  		;jnz	short already_nonz 
  5932                                  		;			; how about big_total?
  5933                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5934                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5935                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5936                                  		;jnz	short already_nonz
  5937                                  
  5938                                  		; 14/08/2023
  5939                                  		; ds = cs = BIOSDATA segment (0070h)
  5940                                  
  5941                                  		; 18/12/2022
  5942                                  		;cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5943                                  		; 14/08/2023
  5944 00001E56 394C08                  		cmp	[si+8], cx ; 0
  5945 00001E59 751C                    		jnz	short already_nonz
  5946                                  					     	; how about big_total?
  5947                                  		;cmp	[cs:si+15h], cx ; 0 	; [cs:si+EBPB.BIGTOTALSECTORS]
  5948                                  		; 14/08/2023
  5949 00001E5B 394C15                  		cmp	[si+15h], cx ; 0
  5950 00001E5E 7517                    		jnz	short already_nonz	; we're okay if any are != 0
  5951                                  		;cmp	[cs:si+17h], cx ; 0  	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5952 00001E60 394C17                  		cmp	[si+17h], cx ; 0
  5953 00001E63 7512                    		jnz	short already_nonz
  5954                                  
  5955                                  ; now let's copy the values from the partition table (now in the BDS)
  5956                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5957                                  
  5958 00001E65 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5959                                  		; 14/08/2023
  5960                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5961 00001E68 894408                  		mov	[si+8], ax
  5962 00001E6B 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5963                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5964 00001E6E 894415                  		mov	[si+15h], ax
  5965 00001E71 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5966                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5967 00001E74 894417                  		mov	[si+17h], ax
  5968                                  
  5969                                  already_nonz:	
  5970                                  		; 18/12/2022
  5971                                  		; cx = 0
  5972 00001E77 B119                    		mov	cl, 25		
  5973                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5974 00001E79 F3A4                    		rep movsb
  5975 00001E7B 1F                      		pop	ds
  5976 00001E7C 5F                      		pop	di
  5977 00001E7D 06                      		push	es
  5978 00001E7E 1E                      		push	ds
  5979 00001E7F 07                      		pop	es
  5980 00001E80 0E                      		push	cs
  5981 00001E81 1F                      		pop	ds
  5982                                  		; 14/08/2023
  5983 00001E82 BD[3607]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  5984                                  		; 18/12/2022
  5985                                  		;mov	bp, mov_media_ids
  5986                                  		;;mov	bp, 751h	; mov_media_ids
  5987                                  					; at 2C7h:751h = 70h:2CC1h
  5988                                  					; set volume id, systemid, serial.
  5989 00001E85 0E                      		push	cs		; simulate far call
  5990 00001E86 E8CEF8                  		call	call_bios_code
  5991                                  		; 14/08/2023
  5992                                  		; ds = cs = es
  5993                                  		;push	es
  5994                                  		;pop	ds
  5995                                  		;pop	es
  5996 00001E89 E93501                  		jmp	goodret
  5997                                  ; ---------------------------------------------------------------------------
  5998                                  
  5999                                  ; ****** cas ---
  6000                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  6001                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  6002                                  ; happens with some frequency -- perhaps through some OS/2 setup
  6003                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  6004                                  ; from the boot sector into the DPB anyway, we've just been using
  6005                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  6006                                  ; we'll go ahead and copy it into the DPB, except in the case
  6007                                  ; that it equals zero, in which case we just use the values in
  6008                                  ; the DPB from the partition table.
  6009                                  
  6010                                  ; 17/10/2022
  6011                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  6012                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  6013                                  ; 09/12/2022
  6014                                  MOVMEDIAIDS equ mov_media_ids
  6015                                  CLEARIDS equ clear_ids
  6016                                  ; 11/09/2023
  6017                                  CLEARIDS_X equ clear_ids_x
  6018                                  
  6019                                  copybpb_fat:
  6020                                  		; 10/12/2022
  6021                                  		; (number of FATs optimization)
  6022                                  		; SI = disksector+11				
  6023                                  		; 17/10/2022
  6024                                  		;mov	si, disksector+11
  6025                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6026                                  					; cs:si	-> bpb in boot
  6027 00001E8C 31D2                    		xor	dx, dx
  6028                                  		; 14/08/2023
  6029                                  		; ds = cs = BIOSDATA segment (0070h)
  6030 00001E8E 8B4408                  		mov	ax, [si+8]
  6031                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6032                                  					; get totsec from boot sec
  6033 00001E91 09C0                    		or	ax, ax
  6034 00001E93 7514                    		jnz	short copy_totsec ; if non zero, use that
  6035 00001E95 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  6036                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6037                                  					; get the big version
  6038                                  					; (32 bit total	sectors)
  6039 00001E98 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  6040                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6041                                  		; 10/12/2022
  6042                                  		; (number of FATs optimization)
  6043                                  		; CL = number of FATs (2 or 1) 
  6044 00001E9B 89D3                    		mov	bx, dx		; see if it is a big zero
  6045 00001E9D 09C3                    		or	bx, ax
  6046 00001E9F 7508                    		jnz	short copy_totsec
  6047                                  			; screw it. it was bogus.
  6048 00001EA1 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6049 00001EA4 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6050 00001EA7 EB06                    		jmp	short fat_big_small
  6051                                  
  6052                                  		;mov	cx, dx
  6053                                  		;or	cx, ax		; see if it is a big zero
  6054                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6055                                  copy_totsec:				
  6056 00001EA9 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6057                                  					; make DPB match boot sec
  6058 00001EAC 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6059                                  
  6060                                  		; 10/12/2022
  6061                                  ;totsec_already_set:			
  6062                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6063                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6064                                  
  6065                                  ; determine fat entry size.
  6066                                  
  6067                                  fat_big_small:
  6068                                  
  6069                                  ;at this moment dx;ax = total sector number
  6070                                  
  6071                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6072                                  ;from the BPB on the disk
  6073                                  				
  6074                                  		; 14/08/2023
  6075                                  		; ds = cs = BIOSDATA segment (0070h)
  6076                                  				
  6077 00001EAF 8B5C03                  		mov	bx, [si+3]
  6078                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6079                                  					; get #reserved_sectors	from BPB
  6080 00001EB2 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6081                                  					; update BDS field
  6082 00001EB5 29D8                    		sub	ax, bx
  6083 00001EB7 83DA00                  		sbb	dx, 0		; update the count
  6084                                  		; 14/08/2023
  6085 00001EBA 8B5C0B                  		mov	bx, [si+0Bh]
  6086                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6087                                  					; bx = sectors/fat
  6088 00001EBD 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6089                                  					; set in bds bpb
  6090                                  		; 10/12/2022
  6091                                  		; (number of FATs optimization)
  6092                                  		; CL = number of FATs (2 or 1) 
  6093                                  		;dec	cl ; *
  6094                                  		; 18/12/2022
  6095 00001EC0 49                      		dec	cx ; *
  6096 00001EC1 D3E3                    		shl	bx, cl
  6097                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6098                                  		
  6099 00001EC3 29D8                    		sub	ax, bx		; sub #	fat sectors
  6100 00001EC5 83DA00                  		sbb	dx, 0
  6101 00001EC8 8B5C06                  		mov	bx, [si+6] ; 14/08/2023
  6102                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6103                                  					; # root entries
  6104 00001ECB 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6105                                  					; set in bds bpb
  6106 00001ECE B104                    		mov	cl, 4
  6107 00001ED0 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6108 00001ED2 29D8                    		sub	ax, bx		; sub #	dir sectors
  6109 00001ED4 83DA00                  		sbb	dx, 0		;
  6110                                  					; dx:ax	now contains the
  6111                                  					; # of data sectors
  6112 00001ED7 31C9                    		xor	cx, cx ; *
  6113 00001ED9 8A4C02                  		mov	cl, [si+2] ; 14/08/2023
  6114                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6115                                  					; sectors per cluster
  6116 00001EDC 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6117                                  					; set in bios bpb
  6118 00001EDF 50                      		push	ax
  6119 00001EE0 89D0                    		mov	ax, dx
  6120 00001EE2 31D2                    		xor	dx, dx
  6121 00001EE4 F7F1                    		div	cx		; cx = sectors per cluster
  6122                                  		; 14/08/2023 (ds=cs)
  6123 00001EE6 A3[2905]                		mov	[temp_h], ax
  6124                                  		;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6125                                  					; # clusters.
  6126 00001EE9 58                      		pop	ax
  6127 00001EEA F7F1                    		div	cx
  6128                                  		;cmp	word [cs:temp_h], 0
  6129 00001EEC 833E[2905]00            		cmp	word [temp_h], 0 ; 14/08/2023
  6130 00001EF1 7718                    		ja	short toobig_ret ; too big cluster number
  6131 00001EF3 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6132                                  					; is this 16-bit fat?
  6133 00001EF6 7205                    		jb	short copymediaid ; no,	small fat
  6134                                  		; 17/10/2022
  6135 00001EF8 800E[CC16]40            		or	byte [fbigfat], 40h
  6136                                  		;or	ds:fbigfat, 40h	; fbig
  6137                                  					; 16 bit fat
  6138                                  copymediaid:				
  6139 00001EFD 06                      		push	es
  6140 00001EFE 1E                      		push	ds
  6141 00001EFF 07                      		pop	es
  6142                                  		; 14/08/2023
  6143                                  		; ds = cs = BIOSDATA
  6144                                  		;push	cs
  6145                                  		;pop	ds
  6146                                  		; 17/10/2022
  6147 00001F00 BD[3607]                		mov	bp, MOVMEDIAIDS
  6148                                  		;mov	bp, 751h	; mov_media_ids
  6149                                  					; at 2C7h:751h = 70h:2CC1h
  6150                                  					; copy filesys_id, volume label
  6151 00001F03 0E                      		push	cs		; simulate far call
  6152 00001F04 E850F8                  		call	call_bios_code
  6153                                  		; 14/08/2023
  6154                                  		;push	es
  6155                                  		;pop	ds
  6156 00001F07 07                      		pop	es
  6157 00001F08 E99800                  		jmp	massage_bpb	; now final check for bpb info
  6158                                  					; and return.
  6159                                  ; ---------------------------------------------------------------------------
  6160                                  
  6161                                  toobig_ret:				
  6162                                  		; 14/08/2023 (ds=cs=BIOSDATA)
  6163 00001F0B 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  6164                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  6165                                  					; too big (32 bit clust #) for FAT16
  6166 00001F10 E9AE00                  		jmp	goodret		; still	drive letter is	assigned
  6167                                  					; but useless. to big for
  6168                                  					; current pc dos fat file system
  6169                                  ; ---------------------------------------------------------------------------
  6170                                  
  6171                                  unknown:	
  6172                                  		; 12/12/2022
  6173 00001F13 804D2402                		or	byte [di+24h], 02h			
  6174                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6175                                  					; unformatted_media
  6176                                  					; Set unformatted media	flag.
  6177                                  
  6178                                  ; the boot signature may not be	recognizable,
  6179                                  ; but we should	try and	read it	anyway.
  6180                                  
  6181                                  unknown3_0:				
  6182 00001F17 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6183                                  					; [di+BDS.totalsecs32+2]
  6184 00001F1A 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6185 00001F1D BE[FC16]                		mov	si, disktable2
  6186                                  
  6187                                  scan:					
  6188                                  		;cmp	dx, [cs:si]	; total sectors hw
  6189                                  		; 14/08/2023 (ds=cs)
  6190 00001F20 3B14                    		cmp	dx, [si] 
  6191 00001F22 720C                    		jb	short gotparm
  6192 00001F24 7705                    		ja	short scan_next
  6193                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  6194 00001F26 3B4402                  		cmp	ax, [si+2]
  6195 00001F29 7605                    		jbe	short gotparm
  6196                                  
  6197                                  scan_next:				
  6198 00001F2B 83C60A                  		add	si, 10		; 5*2
  6199 00001F2E EBF0                    		jmp	short scan	; covers upto 512 mb media
  6200                                  ; ---------------------------------------------------------------------------
  6201                                  
  6202                                  gotparm:				
  6203 00001F30 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6204                                  		;or	ds:fbigfat, cl
  6205                                  		; 17/10/2022
  6206 00001F33 080E[CC16]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  6207                                  		; 14/08/2023
  6208                                  		; ds = cs = BIOSDATA
  6209 00001F37 8B4C04                  		mov	cx, [si+4]
  6210                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6211                                  					; cl = log base 2 of ch
  6212 00001F3A 8B5406                  		mov	dx, [si+6]
  6213                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  6214                                  
  6215                                  ; now calculate size of fat table
  6216                                  
  6217 00001F3D 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6218                                  					; save number of (root)	dir entries
  6219 00001F40 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6220 00001F43 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6221 00001F46 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6222                                  					; save sectors per cluster
  6223                                  		; 17/10/2022
  6224 00001F49 F606[CC16]40            		test	byte [fbigfat], 40h
  6225                                  		;test	ds:fbigfat, 40h	; fbig
  6226                                  					; if (fbigfat)
  6227 00001F4E 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6228                                  
  6229                                  ; we don't need to change "small fat" logic since it is gauranteed
  6230                                  ; that double word total sector will not use 12 bit fat (unless
  6231                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6232                                  ; so in this case we assume dx = 0 !!
  6233                                  
  6234 00001F50 31DB                    		xor	bx, bx		; (12 bit fat)
  6235 00001F52 88EB                    		mov	bl, ch
  6236 00001F54 4B                      		dec	bx
  6237 00001F55 01C3                    		add	bx, ax		; dx=0
  6238 00001F57 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6239 00001F59 43                      		inc	bx		; BDS.secperclus
  6240 00001F5A 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6241 00001F5D 89DE                    		mov	si, bx
  6242 00001F5F D1EB                    		shr	bx, 1
  6243 00001F61 01F3                    		add	bx, si
  6244 00001F63 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6245 00001F67 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6246 00001F69 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6247                                  					; save number of fat sectors
  6248 00001F6C EB35                    		jmp	short massage_bpb
  6249                                  ; ---------------------------------------------------------------------------
  6250                                  
  6251                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6252                                  
  6253                                  dobig:					
  6254 00001F6E B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6255 00001F70 52                      		push	dx		; save total sectors (high)
  6256 00001F71 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6257 00001F74 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6258 00001F76 29D0                    		sub	ax, dx
  6259 00001F78 5A                      		pop	dx
  6260 00001F79 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6261 00001F7C 83E801                  		sub	ax, 1
  6262 00001F7F 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6263                                  					; total	secs - reserved	secs - root dir	secs
  6264 00001F82 B302                    		mov	bl, 2
  6265 00001F84 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6266                                  					; bx = 256 * BDS.secperclus + 2
  6267                                  
  6268                                  ; I don't understand why to add bx here!!!
  6269                                  
  6270                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6271                                  		; 27/09/2022
  6272                                  		; (Microsoft FAT32 File	System Specification,
  6273                                  		; December 2000, Page 21)
  6274                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6275                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6276                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6277                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6278                                  		
  6279                                  					; dx:ax = TmpVal1, bx = TmpVal2
  6280 00001F87 01D8                    		add	ax, bx		; 
  6281 00001F89 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  6282 00001F8C 83E801                  		sub	ax, 1		
  6283 00001F8F 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  6284                                  
  6285                                  ; assuming dx in the table will never be bigger than bx.
  6286                                  
  6287 00001F92 F7F3                    		div	bx		; BDS.fatsecs =
  6288                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6289 00001F94 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6290                                  					; number of fat	sectors
  6291                                  
  6292                                  ; now, set the default filesys_id, volume label, serial number
  6293                                  
  6294                                  		; 14/08/2023
  6295                                  		; [di+1Fh] = [fbigfat]
  6296                                  		;
  6297                                  		;;mov	bl, ds:fbigfat
  6298                                  		;; 17/10/2022
  6299                                  		;mov	bl, [fbigfat]
  6300                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6301                                  
  6302                                  		; 14/08/2023
  6303                                  		;push	ds ; ds = cs = BIOSDATA
  6304 00001F97 1E                      		push	ds
  6305 00001F98 07                      		pop	es
  6306                                  		; 14/08/2023 
  6307                                  		; ds = cs = BIOSDATA
  6308                                  		;push	cs
  6309                                  		;pop	ds
  6310                                  		; 11/09/2023
  6311 00001F99 A0[CC16]                		mov	al, [fbigfat]
  6312 00001F9C BD[D005]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  6313                                  		; 17/10/2022
  6314                                  		;mov	bp, CLEARIDS
  6315                                  		;;mov	bp, 5D9h	; clear_ids
  6316                                  					; at 2C7h:5D9h = 70h:2B49h
  6317                                  					; at BIOSCODE:06ABh
  6318                                  					;	in PCDOS 7.1 IBMBIO.COM
  6319 00001F9F 0E                      		push	cs
  6320 00001FA0 E8B4F7                  		call	call_bios_code
  6321                                  
  6322                                  		; 14/08/2023
  6323                                  		;pop	ds ; ds = cs = BIOSDATA
  6324                                  
  6325                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6326                                  ; set according to the partition information. we are going to
  6327                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6328                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6329                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6330                                  ; we don't do this for the bpb information from the boot record. we
  6331                                  ; are not going to change the bpb information from the boot record.
  6332                                  
  6333                                  massage_bpb:
  6334                                  		; 14/08/2023
  6335                                  		; [di+1Fh] = [fbigfat]
  6336                                  		;
  6337                                  		;; 12/12/2022
  6338                                  		;mov	bl, [fbigfat]
  6339                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6340                                  		;			; set size of fat on media
  6341                                  		;
  6342 00001FA3 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6343 00001FA6 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6344                                  		; 11/09/2023
  6345 00001FA9 09D2                    		or	dx, dx
  6346 00001FAB 7514                    		jnz	short goodret	
  6347                                  		;cmp	dx, 0		; double word total sectors?
  6348                                  		;;ja	short goodret	; don't have to change it.
  6349                                  		;; 12/12/2022
  6350                                  		;ja	short short goodret2
  6351                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6352                                  		;ja	short goodret	; don't have to change it.
  6353                                  		; 12/12/2022
  6354 00001FAD 395519                  		cmp	[di+19h], dx ; 0
  6355                                  		;ja	short goodret2
  6356 00001FB0 770F                    		ja	short goodret	; 11/09/2023
  6357 00001FB2 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6358                                  		;jb	short goodret
  6359                                  		; 12/12/2022
  6360                                  		;jc	short goodret
  6361 00001FB5 7209                    		jc	short goodret_clc ; 11/09/2023
  6362 00001FB7 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6363 00001FBA 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6364                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6365                                  		; 12/12/2022
  6366 00001FBD 89551B                  		mov	[di+1Bh], dx ; 0
  6367                                  goodret_clc:
  6368                                  		; 11/09/2023
  6369 00001FC0 F8                      		clc 
  6370                                  goodret:
  6371                                  		;mov	bl, ds:fbigfat
  6372                                  		; 11/09/2023
  6373                                  		; 12/12/2022
  6374                                  		; 17/10/2022
  6375 00001FC1 8A1E[CC16]              		mov	bl, [fbigfat]
  6376 00001FC5 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6377                                  					; set size of fat on media
  6378                                  		; 11/09/2023
  6379                                  		;clc
  6380                                  ret_hard_err:
  6381                                  		; 12/12/2022
  6382                                  goodret2:
  6383 00001FC8 07                      		pop	es
  6384                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  6385 00001FC9 5B                      		pop	bx
  6386 00001FCA 5F                      		pop	di
  6387 00001FCB C3                      		retn
  6388                                  
  6389                                  ; =============== S U B	R O U T	I N E =======================================
  6390                                  
  6391                                  ; 15/10/2022
  6392                                  
  6393                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6394                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6395                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6396                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6397                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6398                                  
  6399                                  		; 17/10/2022
  6400                                  cover_fdisk_bug:	
  6401                                  		; 14/08/2023		; ds = cs
  6402 00001FCC 50                      		push	ax
  6403 00001FCD 52                      		push	dx
  6404 00001FCE 56                      		push	si
  6405                                  		; 14/08/2023
  6406 00001FCF 803E[7401]29            		cmp	byte [disksector+26h], 29h
  6407                                  		;cmp	byte [cs:disksector+26h], 29h
  6408                                  					; [disksector+EXT_BOOT.SIG],
  6409                                  					; EXT_BOOT_SIGNATURE
  6410 00001FD4 742B                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6411 00001FD6 817F073130              		cmp	word [bx+7], 3031h
  6412                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6413 00001FDB 7506                    		jnz	short cfb_chk_totalsecs ; 14/08/2023
  6414 00001FDD 807F0A30                		cmp	byte [bx+10], '0'
  6415                                  		;cmp	byte [cs:bx+10], '0'
  6416 00001FE1 751E                    		jnz	short cfb_retit
  6417                                  cfb_chk_totalsecs:
  6418                                  		; 17/10/2022		
  6419 00001FE3 BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6420                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6421                                  		; 14/08/2023
  6422 00001FE6 837C0800                		cmp	word [si+8], 0
  6423                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6424                                  					; just to make sure.
  6425 00001FEA 7415                    		jz	short cfb_retit
  6426                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6427                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6428                                  		; 14/08/2023
  6429 00001FEC 8B4408                  		mov	ax, [si+8]
  6430 00001FEF 034411                  		add	ax, [si+11h]
  6431                                  
  6432 00001FF2 730D                    		jnb	short cfb_retit
  6433 00001FF4 750B                    		jnz	short cfb_retit
  6434                                  					; if carry set and ax=0
  6435 00001FF6 FF4C08                  		dec	word [si+8]
  6436                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  6437                                  					; then decrease	BPB_TOTALSECTORS by 1
  6438 00001FF9 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6439 00001FFD 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6440                                  cfb_retit:				
  6441 00002001 5E                      		pop	si
  6442 00002002 5A                      		pop	dx
  6443 00002003 58                      		pop	ax
  6444 00002004 C3                      		retn
  6445                                  
  6446                                  ; ---------------------------------------------------------------------------
  6447                                  
  6448 00002005 0200                    word2:		dw 2
  6449 00002007 0300                    word3:		dw 3
  6450 00002009 0002                    word512:	dw 512
  6451                                  
  6452                                  ; =============== S U B	R O U T	I N E =======================================
  6453                                  
  6454                                  ; 15/10/2022
  6455                                  
  6456                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6457                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6458                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6459                                  ; as the bpb on the drive.
  6460                                  ;
  6461                                  ; no attempt is made to preserve registers since we are going to jump to
  6462                                  ; sysinit straight after this routine.
  6463                                  
  6464                                  setdrvparms:
  6465 0000200B 31DB                    		xor	bx, bx
  6466                                  		; 18/10/2022
  6467 0000200D C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6468                                  _next_bds:				
  6469 00002011 06                      		push	es
  6470 00002012 57                      		push	di
  6471 00002013 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6472 00002017 80FB05                  		cmp	bl, 5		; ffHardFile
  6473 0000201A 753E                    		jnz	short nothardff
  6474 0000201C 31D2                    		xor	dx, dx
  6475 0000201E 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6476 00002022 09C0                    		or	ax, ax
  6477 00002024 7508                    		jnz	short get_ccyl
  6478 00002026 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6479 0000202A 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6480                                  
  6481                                  get_ccyl:				
  6482 0000202E 52                      		push	dx
  6483 0000202F 50                      		push	ax
  6484 00002030 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6485 00002034 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6486                                  					; assume sectors per cyl. < 64k.
  6487 00002038 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6488 0000203A 58                      		pop	ax
  6489 0000203B 5A                      		pop	dx		; dx:ax	= total	sectors
  6490 0000203C 50                      		push	ax
  6491 0000203D 89D0                    		mov	ax, dx
  6492 0000203F 31D2                    		xor	dx, dx
  6493 00002041 F7F1                    		div	cx
  6494 00002043 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6495 00002047 58                      		pop	ax
  6496 00002048 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6497 0000204A 09D2                    		or	dx, dx
  6498 0000204C 7401                    		jz	short no_cyl_rnd ; came out even
  6499 0000204E 40                      		inc	ax		; round	up
  6500                                  
  6501                                  no_cyl_rnd:				
  6502 0000204F 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6503 00002053 06                      		push	es
  6504 00002054 1F                      		pop	ds
  6505 00002055 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6506                                  					; ds:si	-> bpb for hard	file
  6507 00002058 EB55                    		jmp	short set_recbpb
  6508                                  ; ---------------------------------------------------------------------------
  6509                                  
  6510                                  nothardff:				
  6511 0000205A 0E                      		push	cs
  6512 0000205B 1F                      		pop	ds
  6513                                  
  6514                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6515                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6516                                  
  6517                                  		; 10/12/2022
  6518                                  		; ds = cs
  6519                                  		; 17/10/2022 (ds=cs)
  6520 0000205C 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6521                                  		;cmp	byte [cs:fakefloppydrv], 1
  6522 00002061 7454                    		jz	short go_to_next_bds
  6523 00002063 80FB07                  		cmp	bl, 7		; ffother
  6524                                  					; special case "other" type of medium
  6525 00002066 753D                    		jnz	short not_process_other
  6526                                  process_other:
  6527 00002068 31D2                    		xor	dx, dx
  6528 0000206A 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6529 0000206D F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6530 00002070 F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6531 00002073 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6532                                  					; have the total number of sectors
  6533 00002076 48                      		dec	ax
  6534 00002077 B201                    		mov	dl, 1
  6535                                  _again:					
  6536 00002079 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6537 0000207C 7206                    		jb	short _@@
  6538 0000207E D1E8                    		shr	ax, 1
  6539 00002080 D0E2                    		shl	dl, 1
  6540 00002082 EBF5                    		jmp	short _again
  6541                                  ; ---------------------------------------------------------------------------
  6542                                  
  6543                                  _@@:					
  6544 00002084 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6545 00002087 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6546 00002089 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6547                                  __@@:					
  6548 0000208E 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6549                                  
  6550                                  ; logic to get the sectors/fat area.
  6551                                  ; fat entry is assumed to be 1.5 bytes!!!
  6552                                  
  6553                                  		; 10/12/2022
  6554                                  		; ds = cs
  6555                                  		; 17/10/2022 (ds=cs)
  6556 00002091 F726[0720]              		mul	word [word3]
  6557 00002095 F736[0520]              		div	word [word2]
  6558 00002099 31D2                    		xor	dx, dx
  6559 0000209B F736[0920]              		div	word [word512]
  6560                                  		;
  6561                                  		; 10/12/2022
  6562                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6563                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6564                                  		;xor	dx, dx
  6565                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6566                                  		;
  6567 0000209F 40                      		inc	ax		; + 1
  6568                                  no_round_up:
  6569 000020A0 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6570 000020A3 EB12                    		jmp	short go_to_next_bds
  6571                                  ; ---------------------------------------------------------------------------
  6572                                  
  6573                                  not_process_other:			
  6574 000020A5 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6575                                  		;mov	si, bpbtable
  6576                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6577                                  		; 09/12/2022
  6578                                  		;mov	si, BPBTABLE
  6579                                  		;mov	si, [bx+si]	; get address of bpb
  6580                                  		; 10/12/2022
  6581                                  		;mov	si, [BPBTABLE+bx]
  6582                                  		; 13/12/2022
  6583                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6584                                  		; 14/08/2023
  6585                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6586                                  							; correct offset
  6587 000020A7 8BB7[AC72]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6588                                  		
  6589                                  		; 28/08/2023
  6590 000020AB 81C6903C                		add	si, SYSINIT_OFFSET
  6591                                  set_recbpb:				
  6592 000020AF 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6593                                  					; es:di	-> recbpb
  6594 000020B2 B91900                  		mov	cx, 25		; bpbx.size
  6595 000020B5 F3A4                    		rep movsb		; move (size bpbx) bytes	
  6596                                  go_to_next_bds:				
  6597 000020B7 5F                      		pop	di
  6598 000020B8 07                      		pop	es		; restore pointer to bds
  6599 000020B9 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6600 000020BC 83FFFF                  		cmp	di, 0FFFFh	; -1
  6601 000020BF 740A                    		jz	short got_end_of_bds_chain
  6602 000020C1 E94DFF                  		jmp	_next_bds
  6603                                  ; ---------------------------------------------------------------------------
  6604                                  
  6605                                  		; 18/12/2022
  6606                                  ;got_end_of_bds_chain:			
  6607                                  		;retn
  6608                                  
  6609                                  ; =============== S U B	R O U T	I N E =======================================
  6610                                  
  6611                                  ; 15/10/2022
  6612                                  ; 30/12/2018 - Retro DOS v4.0
  6613                                  
  6614                                  ; al = device number
  6615                                  
  6616                                  print_init:	
  6617 000020C4 98                      		cbw
  6618 000020C5 89C2                    		mov	dx, ax
  6619 000020C7 B401                    		mov	ah, 1
  6620 000020C9 CD17                    		int	17h		; PRINTER - INITIALIZE
  6621                                  					; DX = printer port (0-3)
  6622                                  					; Return: AH = status
  6623                                  got_end_of_bds_chain:	; 18/12/2022
  6624 000020CB C3                      		retn
  6625                                  
  6626                                  ; =============== S U B	R O U T	I N E =======================================
  6627                                  
  6628                                  ; al = device number
  6629                                  
  6630                                  aux_init:
  6631 000020CC 98                      		cbw
  6632 000020CD 89C2                    		mov	dx, ax
  6633                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6634                                  					; 2400,n,1,8 (msequ.inc)
  6635                                  		;mov	ah, 0
  6636                                  		; 10/12/2022
  6637 000020CF B8A300                  		mov	ax, 00A3h
  6638 000020D2 CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6639                                  					; 	AL = initializing parameters,
  6640                                  					;	DX = port number (0-3)
  6641                                  					; Return: AH = RS-232 status code bits,
  6642                                  					;	  AL = modem status bits
  6643 000020D4 C3                      		retn
  6644                                  
  6645                                  ; =============== S U B	R O U T	I N E =======================================
  6646                                  
  6647                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6648                                  ; 30/12/2018 - Retro DOS v4.0
  6649                                  ; 03/06/2018 - Retro DOS v3.0
  6650                                  ; (19/03/2018 - Retro DOS v2.0)
  6651                                  
  6652                                  ; domini **********************************************************************
  6653                                  ;
  6654                                  ;mini disk initialization routine. called right after dohard
  6655                                  ;modified for >2 hardfile support
  6656                                  ;
  6657                                  ; **cs=ds=es=datagrp
  6658                                  ;
  6659                                  ; **domini will search for every extended partition in the system, and
  6660                                  ;   initialize it.
  6661                                  ;
  6662                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6663                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6664                                  ;   address of bdsm table.
  6665                                  ;
  6666                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6667                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6668                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6669                                  ;
  6670                                  ; **domini will use the same routine in sethard routine after label set2 to
  6671                                  ;   save coding.
  6672                                  ;
  6673                                  ; **drvmax determined in dohard routine will be used for the next
  6674                                  ;   available logical mini disk drive number.
  6675                                  ;
  6676                                  ; input: drvmax, dskdrvs
  6677                                  ;
  6678                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6679                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6680                                  ;
  6681                                  ; called modules:
  6682                                  ;		  getboot
  6683                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6684                                  ;
  6685                                  ;		  setmini (new, it will use set2 routine)
  6686                                  ;
  6687                                  ; variables used: end_of_bdsm
  6688                                  ;		  rom_minidisk_num
  6689                                  ;		  mini_hdlim, mini_seclim
  6690                                  ;		  BDS_STRUC, start_bds
  6691                                  ;
  6692                                  ;******************************************************************************
  6693                                  
  6694                                  		; 19/10/2022
  6695                                  domini:	
  6696 000020D5 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6697                                  		; 10/12/2022
  6698 000020D9 20F6                    		and	dh, dh
  6699                                  		;cmp	dh, 0
  6700 000020DB 7431                    		jz	short dominiret	; no hard file?	then exit.
  6701 000020DD B280                    		mov	dl, 80h		; start	with hardfile 80h
  6702                                  domini_loop:				
  6703 000020DF 52                      		push	dx
  6704 000020E0 8816[4217]              		mov	[rom_minidisk_num], dl
  6705 000020E4 B408                    		mov	ah, 8
  6706 000020E6 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6707                                  					; DL = drive number
  6708                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6709                                  					; DL = number of consecutive drives
  6710                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6711 000020E8 FEC6                    		inc	dh
  6712 000020EA 31C0                    		xor	ax, ax
  6713 000020EC 88F0                    		mov	al, dh
  6714 000020EE A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6715 000020F1 80E13F                  		and	cl, 3Fh
  6716 000020F4 88C8                    		mov	al, cl
  6717 000020F6 A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6718 000020F9 06                      		push	es
  6719 000020FA 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6720 000020FE E87BFB                  		call	getboot		; read master boot record into
  6721                                  					; initbootsegment:bootbias
  6722 00002101 7203                    		jb	short domininext
  6723 00002103 E80900                  		call	find_mini_partition
  6724                                  domininext:				
  6725 00002106 07                      		pop	es
  6726 00002107 5A                      		pop	dx
  6727 00002108 FEC2                    		inc	dl		; next hard file
  6728 0000210A FECE                    		dec	dh
  6729 0000210C 75D1                    		jnz	short domini_loop
  6730                                  dominiret:				
  6731 0000210E C3                      		retn
  6732                                  
  6733                                  ; =============== S U B	R O U T	I N E =======================================
  6734                                  
  6735                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6736                                  ; 30/12/2018 - Retro DOS v4.0
  6737                                  
  6738                                  ;find_mini_partition tries to find every extended partition on a disk.
  6739                                  ;at entry:	di -> bdsm entry
  6740                                  ;		es:bx -> 07c0:bootbias - master boot record
  6741                                  ;		rom_minidisk_num - rom drive number
  6742                                  ;		drvmax - logical drive number
  6743                                  ;		mini_hdlim, mini_seclim
  6744                                  ;
  6745                                  ;called routine: setmini which uses set2 (in sethard routine)
  6746                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6747                                  
  6748                                  
  6749                                  find_mini_partition:	
  6750 0000210F 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6751                                  fmpnext:				
  6752 00002113 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6753 00002117 740A                    		jz	short fmpgot
  6754 00002119 83C310                  		add	bx, 16
  6755 0000211C 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6756 00002120 75F1                    		jnz	short fmpnext
  6757                                  		;jmp	short fmpnextfound ; extended partition	not found
  6758                                  		; 18/12/2022
  6759                                  fmpnextfound:
  6760 00002122 C3                      		retn
  6761                                  
  6762                                  ;		; 30/07/2019 - Retro DOS v3.2
  6763                                  ;		jb	short fmpnext
  6764                                  ;fmpret:
  6765                                  ;		retn	; 29/05/2019
  6766                                  
  6767                                  ; ---------------------------------------------------------------------------
  6768                                  
  6769                                  		; 19/10/2022
  6770                                  fmpgot:					; found my partition.				
  6771 00002123 E89D00                  		call	dmax_check	; check	for drvmax already 26
  6772 00002126 73FA                    		jnb	short fmpnextfound ; done if too many
  6773 00002128 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  6774 0000212C C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6775                                  		; 10/12/2022
  6776 00002131 804D2301                		or	byte [di+23h], 1
  6777                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6778                                  					; fNon_Removable
  6779 00002135 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6780                                  					; ffHardFile
  6781 00002139 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6782 0000213E A1[4817]                		mov	ax, [mini_hdlim]
  6783 00002141 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6784 00002144 A1[4A17]                		mov	ax, [mini_seclim]
  6785 00002147 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6786 0000214A A0[4217]                		mov	al, [rom_minidisk_num]
  6787 0000214D 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6788                                  					; set physical number
  6789 00002150 A0[7500]                		mov	al, [drvmax]
  6790 00002153 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6791                                  					; set logical number
  6792 00002156 26837F0A00              		cmp	word [es:bx+10], 0
  6793 0000215B 7707                    		ja	short fmpgot_cont
  6794 0000215D 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6795                                  					; only lower word is meaningful.
  6796 00002162 72BE                    		jb	short fmpnextfound
  6797                                  					; should be bigger than 64 sectors at least
  6798                                  fmpgot_cont:				
  6799 00002164 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6800 00002167 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6801 0000216B 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6802 0000216E D0C6                    		rol	dh, 1
  6803 00002170 D0C6                    		rol	dh, 1
  6804 00002172 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6805 00002176 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6806                                  					; set hidden trks
  6807 00002179 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6808 0000217D 268A7701                		mov	dh, [es:bx+1]	; head
  6809 00002181 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6810 00002185 BB0002                  		mov	bx, 200h	; bootbias
  6811 00002188 B80102                  		mov	ax, 201h
  6812 0000218B CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6813                                  					; AL = number of sectors to read, CH = track, CL = sector
  6814                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6815                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6816 0000218D 7293                    		jb	short fmpnextfound
  6817 0000218F BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6818                                  
  6819                                  		; 14/08/2023
  6820                                  		;push	es
  6821 00002192 E80800                  		call	setmini		; install a mini disk.
  6822                                  					; bx value saved.
  6823                                  		;pop	es  ; 14/08/2023
  6824 00002195 7203                    		jb	short fmpnextchain
  6825 00002197 E83E00                  		call	xinstall_bds	; -- install the bdsm into table
  6826                                  fmpnextchain:				
  6827 0000219A E976FF                  		jmp	fmpnext		; let's find out
  6828                                  					; if we	have any chained partition
  6829                                  ; ---------------------------------------------------------------------------
  6830                                  
  6831                                  		; 18/12/2022
  6832                                  ;fmpnextfound:				
  6833                                  		;retn
  6834                                  
  6835                                  ; =============== S U B	R O U T	I N E =======================================
  6836                                  
  6837                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6838                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6839                                  
  6840                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6841                                  	
  6842 0000219D 57                      		push	di
  6843 0000219E 53                      		push	bx
  6844                                  		; 14/08/2023
  6845                                  		; ds = cs = BIOSDATA segment
  6846                                  		;push	ds
  6847 0000219F 06                      		push	es
  6848                                  setmini_1:				
  6849 000021A0 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6850 000021A4 741A                    		jz	short setmini_2
  6851 000021A6 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6852 000021AA 7414                    		jz	short setmini_2
  6853 000021AC 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6854 000021B0 740E                    		jz	short setmini_2
  6855 000021B2 83C310                  		add	bx, 16
  6856 000021B5 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6857 000021B9 75E5                    		jnz	short setmini_1
  6858 000021BB F9                      		stc
  6859 000021BC 07                      		pop	es
  6860                                  		; 14/08/2023
  6861                                  		;pop	ds
  6862 000021BD 5B                      		pop	bx
  6863 000021BE 5F                      		pop	di
  6864 000021BF C3                      		retn
  6865                                  
  6866                                  ; ---------------------------------------------------------------------------
  6867                                  setmini_2:				
  6868 000021C0 E965FB                  		jmp	set2		; branch into middle of sethard
  6869                                  
  6870                                  ; =============== S U B	R O U T	I N E =======================================
  6871                                  
  6872                                  ; 15/10/2022
  6873                                  ; 28/12/2018 - Retro DOS v4.0
  6874                                  ;
  6875                                  ; dmax_check --- call this when we want to install a new drive.
  6876                                  ;		it checks for drvmax < 26 to see if there is
  6877                                  ;		a drive letter left.
  6878                                  ;
  6879                                  ;	drvmax < 26 : carry SET!
  6880                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6881                                  ;			trash ax
  6882                                  
  6883                                  dmax_check:	
  6884 000021C3 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6885 000021C8 720D                    		jb	short dmax_ok	; return with carry if okay
  6886 000021CA 06                      		push	es
  6887                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6888 000021CB B83904                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6889 000021CE 8EC0                    		mov	es, ax
  6890                                  		; 18/10/2022
  6891 000021D0 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6892                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6893                                  					; set message flag
  6894                                  					; [SYSINIT+toomanydrivesflag]
  6895 000021D6 07                      		pop	es
  6896                                  
  6897                                  		;;push	es
  6898                                  		;;mov	ax,SYSINIT_SEG
  6899                                  		;;mov	es,ax
  6900                                  		;;mov	byte [es:toomanydrivesflag],1
  6901                                  					; set message flag
  6902                                  		;;pop	es
  6903                                  		;
  6904                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6905                                  dmax_ok:				
  6906 000021D7 C3                      		retn
  6907                                  
  6908                                  ; =============== S U B	R O U T	I N E =======================================
  6909                                  
  6910                                  ; 18/10/2022
  6911                                  ; 15/10/2022
  6912                                  ; 28/12/2018 - Retro DOS v4.0						
  6913                                  ;								 
  6914                                  ;	link next bds (at ds:di) into the chain. assume that the
  6915                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6916                                  ;	  dskdrv_table, and end_of_bdss.	
  6917                                  
  6918                                  xinstall_bds:		
  6919 000021D8 56                      		push	si
  6920 000021D9 53                      		push	bx
  6921 000021DA 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6922                                  xinstall_bds_1:				
  6923 000021DE 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6924 000021E1 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6925                                  		;mov	si, [si+BDS.link]
  6926 000021E3 8B34                    		mov	si, [si]	; chain	through	list
  6927 000021E5 EBF7                    		jmp	short xinstall_bds_1
  6928                                  ; ---------------------------------------------------------------------------
  6929                                  
  6930                                  xinstall_bds_2:				
  6931                                  		;mov	[si+BDS.link], di
  6932 000021E7 893C                    		mov	[si], di
  6933                                  		;mov	[si+BDS.link+2], ds
  6934 000021E9 8C5C02                  		mov	[si+2], ds
  6935                                  		;mov	word [di+BDS.link], -1
  6936 000021EC C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6937                                  		;mov	[di+BDS.link+2], ds
  6938 000021F0 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6939                                  		; 20/03/2019 - Retro DOS v4.0
  6940                                  		;lea	bx, [di+BDS.BPB]
  6941 000021F3 8D5D06                  		lea	bx, [di+6]
  6942 000021F6 8B36[4417]              		mov	si, [last_dskdrv_table]
  6943 000021FA 891C                    		mov	[si], bx
  6944 000021FC 8306[4417]02            		add	word [last_dskdrv_table], 2
  6945 00002201 FE06[7500]              		inc	byte [drvmax]
  6946 00002205 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6947 0000220A 5B                      		pop	bx
  6948 0000220B 5E                      		pop	si
  6949 0000220C C3                      		retn
  6950                                  
  6951                                  ; =============== S U B	R O U T	I N E =======================================
  6952                                  
  6953                                  ; 17/10/2022
  6954                                  ; 15/10/2022
  6955                                  ; 28/12/2018 - Retro DOS v4.0
  6956                                  ; 03/06/2018 - Retro DOS v3.0
  6957                                  
  6958                                  cmos_clock_read:	
  6959 0000220D 50                      		push	ax
  6960 0000220E 51                      		push	cx
  6961 0000220F 52                      		push	dx
  6962 00002210 55                      		push	bp
  6963 00002211 31ED                    		xor	bp, bp
  6964                                  loop_clock:				
  6965 00002213 31C9                    		xor	cx, cx
  6966 00002215 31D2                    		xor	dx, dx
  6967 00002217 B402                    		mov	ah, 2
  6968 00002219 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6969                                  					; Return: CH = hours in	BCD
  6970                                  					; CL = minutes in BCD
  6971                                  					; DH = seconds in BCD
  6972 0000221B 83F900                  		cmp	cx, 0
  6973 0000221E 7512                    		jnz	short clock_present
  6974 00002220 83FA00                  		cmp	dx, 0
  6975 00002223 750D                    		jnz	short clock_present
  6976 00002225 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6977 00002228 741C                    		jz	short no_readdate ; was	at zero	setting.
  6978 0000222A 45                      		inc	bp		; only perform delay once.
  6979 0000222B B90040                  		mov	cx, 4000h	; 16384
  6980                                  delay:					
  6981 0000222E E2FE                    		loop	delay
  6982 00002230 EBE1                    		jmp	short loop_clock
  6983                                  ; ---------------------------------------------------------------------------
  6984                                  
  6985                                  clock_present:				
  6986 00002232 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6987 00002238 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6988                                  					; possibly destroyed by	cp dos and
  6989                                  					; post routine did not restore that.
  6990 0000223B 56                      		push	si
  6991 0000223C E8EAF2                  		call	read_real_date	; read real-time clock for date
  6992 0000223F FA                      		cli
  6993                                  		;mov	ds:daycnt, si	; set system date
  6994 00002240 8936[F004]              		mov	[daycnt], si
  6995 00002244 FB                      		sti
  6996 00002245 5E                      		pop	si
  6997                                  
  6998                                  no_readdate:				
  6999 00002246 5D                      		pop	bp
  7000 00002247 5A                      		pop	dx
  7001 00002248 59                      		pop	cx
  7002 00002249 58                      		pop	ax
  7003 0000224A C3                      		retn
  7004                                  
  7005                                  ; ---------------------------------------------------------------------------
  7006                                  
  7007                                  ; the following code is written by jack gulley in engineering group.
  7008                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  7009                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  7010                                  ; the cmos clock rate are still slow which slow down disk operations
  7011                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  7012                                  ; to fix this problem at the request of cp dos.
  7013                                  ;
  7014                                  ; the program is modified to be run on msinit. equates are defined
  7015                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  7016                                  ;
  7017                                  ;  the following code cmosck is used to insure that the cmos has not
  7018                                  ;	had its rate controls left in an invalid state on older at's.
  7019                                  ;
  7020                                  ;	it checks for an at model byte "fc" with a submodel type of
  7021                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  7022                                  ;	bits in case post has not done it. this initilization routine
  7023                                  ;	is only needed once when dos loads. it should be run as soon
  7024                                  ;	as possible to prevent slow diskette access.
  7025                                  ;
  7026                                  ;	this code exposes one to dos clearing cmos setup done by a
  7027                                  ;	resident program that hides and re-boots the system.
  7028                                  
  7029                                  cmosck:					; check and reset rtc rate bits	
  7030                                  
  7031                                  ;model byte and submodel byte were already determined in msinit.
  7032                                  
  7033                                  	; 16/06/2018 - Retro DOS v3.0
  7034                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  7035                                  			
  7036 0000224B 50                      		push	ax
  7037 0000224C 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  7038 00002252 7525                    		jnz	short cmosck9	; Exit if not an AT model
  7039 00002254 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  7040                                  					; Is it 06 for the industral AT ?
  7041 0000225A 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  7042 0000225C 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  7043                                  					; Is it 00, 01, 02, or 03 ?
  7044 00002262 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  7045                                  					; Also,Secondary_model_byte = 0 
  7046                                  					;   when AH=0C0h, int 15h failed.
  7047                                  					;	RESET THE CMOS PERIODIC RATE 
  7048                                  					;  Model=FC submodel=00,01,02,03 or 06 
  7049                                  cmosck4:				
  7050 00002264 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7051                                  					; NMI disabled on return
  7052 00002266 B426                    		mov	ah, 26h		; 00100110b
  7053                                  					; Set divider &	rate selection
  7054 00002268 E83000                  		call	cmos_write
  7055 0000226B B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7056                                  					; NMI disabled on return
  7057 0000226D E80B00                  		call	cmos_read
  7058 00002270 2407                    		and	al, 7		; 00000111b
  7059                                  					; clear	SET,PIE,AIE,UIE,SQWE
  7060 00002272 88C4                    		mov	ah, al
  7061 00002274 B00B                    		mov	al, 0Bh		; cmos_reg_b
  7062                                  					; NMI enabled on return
  7063 00002276 E82200                  		call	cmos_write
  7064                                  cmosck9:				
  7065 00002279 58                      		pop	ax
  7066 0000227A C3                      		retn
  7067                                  
  7068                                  ; =============== S U B	R O U T	I N E =======================================
  7069                                  
  7070                                  ;--- CMOS_READ -----------------------------------------------------------------
  7071                                  ;		read byte from cmos system clock configuration table	       :
  7072                                  ;									       :
  7073                                  ; input: (al)=	cmos table address to be read				       :
  7074                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7075                                  ;		bits 6-0 = address of table location to read		       :
  7076                                  ;									       :
  7077                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7078                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  7079                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7080                                  ;		the cmos address register is pointed to a default value and    :
  7081                                  ;		the interrupt flag restored to the entry state on return.      :
  7082                                  ;		only the (al) register and the nmi state is changed.	       :
  7083                                  ;-------------------------------------------------------------------------------
  7084                                  
  7085                                  cmos_read:				; read location (al) into (al)	
  7086 0000227B 9C                      		pushf
  7087 0000227C FA                      		cli
  7088 0000227D 53                      		push	bx
  7089 0000227E 50                      		push	ax		; AL = cmos table address to be	read
  7090 0000227F 0C80                    		or	al, 80h
  7091 00002281 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7092                                  					; RTC Seconds
  7093 00002283 90                      		nop			; (undocumented	delay needed)
  7094 00002284 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7095 00002286 89C3                    		mov	bx, ax
  7096 00002288 58                      		pop	ax
  7097 00002289 2480                    		and	al, 80h
  7098 0000228B 0C0F                    		or	al, 0Fh
  7099 0000228D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7100                                  					; RTC Seconds
  7101 0000228F 90                      		nop
  7102 00002290 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7103 00002292 89D8                    		mov	ax, bx
  7104 00002294 5B                      		pop	bx
  7105 00002295 0E                      		push	cs		; *place code segment in stack and
  7106 00002296 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7107 00002299 C3                      		retn			; return with flags restored
  7108                                  
  7109                                  ; ---------------------------------------------------------------------------
  7110                                  
  7111                                  cmos_popf:				
  7112 0000229A CF                      		iret			; popf for level b- parts
  7113                                  					; return far and restore flags
  7114                                  
  7115                                  ; =============== S U B	R O U T	I N E =======================================
  7116                                  
  7117                                  ;--- cmos_write ----------------------------------------------------------------
  7118                                  ;		write byte to cmos system clock configuration table	       :
  7119                                  ;									       :
  7120                                  ; input: (al)=	cmos table address to be written to			       :
  7121                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7122                                  ;		bits 6-0 = address of table location to write		       :
  7123                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7124                                  ;									       :
  7125                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7126                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7127                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7128                                  ;		the cmos address register is pointed to a default value and    :
  7129                                  ;		the interrupt flag restored to the entry state on return.      :
  7130                                  ;		only the cmos location and the nmi state is changed.	       :
  7131                                  ;-------------------------------------------------------------------------------
  7132                                  
  7133                                  cmos_write:				; write (ah) to location (al)	
  7134 0000229B 9C                      		pushf			; write (ah) to location (al)
  7135 0000229C 50                      		push	ax		; save work register values
  7136 0000229D FA                      		cli
  7137 0000229E 50                      		push	ax		; save user nmi	state
  7138 0000229F 0C80                    		or	al, 80h		; disable nmi for us
  7139 000022A1 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7140                                  					; RTC Seconds
  7141 000022A3 90                      		nop
  7142 000022A4 88E0                    		mov	al, ah
  7143 000022A6 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7144 000022A8 58                      		pop	ax		; get user nmi
  7145 000022A9 2480                    		and	al, 80h
  7146 000022AB 0C0F                    		or	al, 0Fh
  7147 000022AD E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7148                                  					; RTC Seconds
  7149 000022AF 90                      		nop
  7150 000022B0 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7151 000022B2 58                      		pop	ax		; restore work registers
  7152 000022B3 0E                      		push	cs		; *place code segment in stack and
  7153 000022B4 E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  7154 000022B7 C3                      		retn
  7155                                  
  7156                                  ; 21/12/2022
  7157                                  ; ---------------------------------------------------------------------------
  7158                                  ; ---------------------------------------------------------------------------
  7159                                  %if 0
  7160                                  
  7161                                  ; ---------------------------------------------------------------------------
  7162                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7163                                  ; ---------------------------------------------------------------------------
  7164                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7165                                  ; ---------------------------------------------------------------------------
  7166                                  
  7167                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7168                                  ;
  7169                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7170                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7171                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7172                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7173                                  
  7174                                  ; =============== S U B	R O U T	I N E =======================================
  7175                                  
  7176                                  ; GetClus, read in a cluster at a specified address
  7177                                  ;
  7178                                  ;  bx = cluster to read
  7179                                  ;  cx = sectors per cluster
  7180                                  ;  es:di = load location
  7181                                  
  7182                                  ; 17/10/2022
  7183                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7184                                  ; 09/12/2022
  7185                                  DISKRD equ diskrd
  7186                                  
  7187                                  		; 17/10/2022
  7188                                  getclus:				
  7189                                  		push	cx
  7190                                  		push	di
  7191                                  		mov	[cs:doscnt], cx
  7192                                  		mov	ax, bx
  7193                                  		dec	ax
  7194                                  		dec	ax
  7195                                  		mul	cx		; convert to logical sector
  7196                                  					; dx:ax	= matching logical sector number
  7197                                  					;	  starting from the data sector
  7198                                  		add	ax, [cs:bios_l]
  7199                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7200                                  unpack:					
  7201                                  		push	ds
  7202                                  		push	ax
  7203                                  		push	bx
  7204                                  		mov	si, [cs:fatloc]
  7205                                  		mov	ds, si
  7206                                  		mov	si, bx		; next cluster
  7207                                  		test	byte [cs:fbigfat], 40h	; fbig
  7208                                  					; 16 bit fat?
  7209                                  		jnz	short unpack16	; yes
  7210                                  		shr	si, 1		; 12 bit fat. si=si/2
  7211                                  					; si = clus + clus/2
  7212                                  		add	si, bx		;
  7213                                  					; (si =	byte offset of the cluster in the FAT)
  7214                                  		push	dx
  7215                                  		xor	dx, dx
  7216                                  		call	get_fat_sector
  7217                                  		pop	dx
  7218                                  		mov	ax, [bx]	; save it into ax
  7219                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7220                                  		; 25/06/2023
  7221                                  		;mov	al, [bx]	; splitted fat
  7222                                  		mov	[cs:temp_cluster], al
  7223                                  		inc	si		; (next	byte)
  7224                                  		push	dx
  7225                                  		xor	dx, dx
  7226                                  		call	get_fat_sector
  7227                                  		pop	dx
  7228                                  		;mov	al, ds:0
  7229                                  		mov	al, [0] ; 19/10/2022
  7230                                  		mov	[cs:temp_cluster+1], al
  7231                                  		mov	ax, [cs:temp_cluster]
  7232                                  even_odd:				
  7233                                  		pop	bx		; restore old fat entry	value
  7234                                  		push	bx		; save it right	away.
  7235                                  		shr	bx, 1		; was it even or odd?
  7236                                  		jnb	short havclus	; it was even.
  7237                                  		shr	ax, 1		; odd. massage fat value and keep
  7238                                  					; the highest 12 bits.
  7239                                  		shr	ax, 1
  7240                                  		shr	ax, 1
  7241                                  		shr	ax, 1
  7242                                  havclus:				
  7243                                  		mov	bx, ax		; now bx = new fat entry.
  7244                                  		and	bx, 0FFFh	; keep low 12 bits.
  7245                                  		jmp	short unpackx
  7246                                  ; ---------------------------------------------------------------------------
  7247                                  
  7248                                  unpack16:				
  7249                                  		push	dx
  7250                                  		xor	dx, dx
  7251                                  		shl	si, 1		; extend to 32 bit offset
  7252                                  		adc	dx, 0
  7253                                  		call	get_fat_sector
  7254                                  		pop	dx
  7255                                  		mov	bx, [bx]	;
  7256                                  					; bx = new fat entry.
  7257                                  unpackx:				
  7258                                  		pop	si		; restore old bx value into si
  7259                                  		pop	ax		; restore logical sector (low)
  7260                                  		pop	ds
  7261                                  		sub	si, bx
  7262                                  		cmp	si, -1		; one apart?
  7263                                  		jnz	short getcl2
  7264                                  		add	[cs:doscnt], cx
  7265                                  		jmp	short unpack
  7266                                  ; ---------------------------------------------------------------------------
  7267                                  
  7268                                  getcl2:					
  7269                                  		push	bx
  7270                                  		push	dx		; sector to read (high)
  7271                                  		push	ax		; sector to read (low)
  7272                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7273                                  		mov	cx, [cs:doscnt]
  7274                                  		pop	dx		; sector to read for diskrd (low)
  7275                                  		pop	word [cs:start_sec_h]
  7276                                  					; sector to read for diskrd (high)
  7277                                  		push	ds
  7278                                  		push	cs
  7279                                  		pop	ds
  7280                                  		push	cs		; simulate far call
  7281                                  		; 17/10/2022
  7282                                  		mov	bp, DISKRD	; 8E5h
  7283                                  		;mov	bp, 8E5h	; offset diskrd
  7284                                  					; 2C7h:8E5h = 70h:2E55h
  7285                                  		call	call_bios_code	; read the clusters
  7286                                  		pop	ds
  7287                                  		pop	bx
  7288                                  		pop	di
  7289                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7290                                  		xchg	ah, al		; multiply by 256
  7291                                  		shl	ax, 1		; times	2 equal	512
  7292                                  		add	di, ax		; update load location
  7293                                  		pop	cx		; restore sectors/cluster
  7294                                  		retn
  7295                                  
  7296                                  ; =============== S U B	R O U T	I N E =======================================
  7297                                  
  7298                                  
  7299                                  ;function: find and read the corresponding fat sector into ds:0
  7300                                  ;
  7301                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7302                                  ;     ds - fatloc segment
  7303                                  ;     cs:drvfat - logical drive number, fat id
  7304                                  ;     cs:md_sectorsize
  7305                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7306                                  ;
  7307                                  ;out). corresponding fat sector read in.
  7308                                  ;      bx = offset value from fatlog segment.
  7309                                  ;      other registera saved.
  7310                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7311                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7312                                  ;      should save this byte, and read the next fat sector to get the rest
  7313                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7314                                  
  7315                                  		; 17/10/2022
  7316                                  get_fat_sector:	
  7317                                  		push	ax
  7318                                  		push	cx
  7319                                  		push	di
  7320                                  		push	si
  7321                                  		push	es
  7322                                  		push	ds
  7323                                  		mov	ax, si
  7324                                  		mov	cx, [cs:md_sectorsize] ; 512
  7325                                  		div	cx		; ax = sector number, dx = offset
  7326                                  		nop
  7327                                  
  7328                                  		; Get rid of the assumption that
  7329                                  		; there	is only	one reserved sector
  7330                                  
  7331                                  		push	es
  7332                                  		push	ds
  7333                                  		push	di
  7334                                  		push	ax
  7335                                  		push	cs
  7336                                  		pop	ds
  7337                                  
  7338                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7339                                  		mov	bp, SETDRIVE
  7340                                  		;mov	bp, 4D7h	; setdrive
  7341                                  					; at 2C7h:4D7h = 70h:2A47h
  7342                                  		push	cs		; simulate far call
  7343                                  		call	call_bios_code	; get bds for drive
  7344                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7345                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7346                                  					; add #reserved_sectors
  7347                                  		pop	di
  7348                                  		pop	ds
  7349                                  		pop	es
  7350                                  		cmp	ax, [cs:last_fat_sec_num]
  7351                                  		jz	short gfs_split_chk ; don't need to read it again.
  7352                                  		mov	[cs:last_fat_sec_num], ax 
  7353                                  					; sector number
  7354                                  					; (in the partition, without hidden sectors)
  7355                                  		push	dx
  7356                                  		mov	word [cs:start_sec_h], 0 
  7357                                  					; prepare to read the fat sector
  7358                                  					; start_sec_h is always	0 for fat sector.
  7359                                  		mov	dx, ax
  7360                                  		mov	cx, 1		; 1 sector read
  7361                                  		mov	ax, [cs:drvfat]
  7362                                  		push	ds
  7363                                  		pop	es
  7364                                  		xor	di, di		; es:di	-> fatloc segment:0
  7365                                  		push	ds
  7366                                  		push	cs
  7367                                  		pop	ds
  7368                                  		push	cs		; simulate far call
  7369                                  		mov	bp, DISKRD	; 8E5h
  7370                                  		;mov	bp, 8E5h	; offset diskrd
  7371                                  					; 2C7h:8E5h = 70h:2E55h
  7372                                  		call	call_bios_code
  7373                                  		pop	ds
  7374                                  		pop	dx
  7375                                  		mov	cx, [cs:md_sectorsize] ; 512
  7376                                  
  7377                                  gfs_split_chk:				
  7378                                  		dec	cx		; 511
  7379                                  		cmp	dx, cx		; if offset points to the
  7380                                  					; last byte of this sector,
  7381                                  					; then splitted	entry.
  7382                                  		mov	bx, dx		; set bx to dx
  7383                                  		pop	ds
  7384                                  		pop	es
  7385                                  		pop	si
  7386                                  		pop	di
  7387                                  		pop	cx
  7388                                  		pop	ax
  7389                                  		retn
  7390                                  
  7391                                  ; 15/10/2022
  7392                                  ;Bios_Data_Init	ends
  7393                                  
  7394                                  %endif
  7395                                  ; ---------------------------------------------------------------------------
  7396                                  ; ---------------------------------------------------------------------------
  7397                                  
  7398                                  		; 09/12/2022
  7399                                  		;db 0
  7400                                  
  7401                                  numbertodiv	equ ($-BData_start)
  7402                                  numbertomod	equ (numbertodiv % 16)
  7403                                  
  7404                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
  7405 000022B8 00<rep 8h>              		times (16-numbertomod) db 0
  7406                                  %endif
  7407                                  
  7408                                  ;align 16
  7409                                  
  7410                                  ; 09/12/2022
  7411                                  IOSYSCODESEGOFF equ $ - BData_start
  7412                                  ; 29/09/2023
  7413                                  ;IOSYSCODESEGOFF equ $-$$
  7414                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7415                                  
  7416                                  ; 28/09/2023
  7417                                  S1SIZE equ $-$$
  7418                                  
  7419                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7420                                  ; ---------------------------------------------------------------------------
  7421                                  		;db 4 dup(0)
  7422                                  ; 09/12/2022		
  7423                                  ;		times 4 db 0	; 19/10/2022
  7424                                  ; ---------------------------------------------------------------------------
  7425                                  
  7426                                  ;============================================================================
  7427                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7428                                  ;============================================================================
  7429                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7430                                  
  7431                                  section .BIOSCODE vstart=0  
  7432                                  
  7433                                  BCode_start:	 ; 09/12/2022
  7434                                   
  7435                                  ; 02/10/2022
  7436                                  
  7437                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7438                                  ;----------------------------------------------------------------------------
  7439                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7440                                  ;----------------------------------------------------------------------------
  7441                                  
  7442                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7443 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7444 00000030 7000                    BiosDataWord:	dw 70h
  7445                                  
  7446                                  ; 15/10/2022
  7447                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7448                                  ; 09/12/2022
  7449                                  BIOSDATAWORD	equ BiosDataWord
  7450                                  
  7451                                  ; ---------------------------------------------------------------------------
  7452                                  
  7453                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7454                                  
  7455                                  ;************************************************************************
  7456                                  ;*									*
  7457                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7458                                  ;*	  trashes di, cx, es						*
  7459                                  ;*									*
  7460                                  ;*	cas -- should be made disposable!				*
  7461                                  ;*									*
  7462                                  ;************************************************************************
  7463                                  
  7464                                  _seg_reinit:
  7465 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7466                                  					; at 2C7h:30h or 70h:25A0h
  7467                                  		;mov	di, (offset cdev+2)
  7468 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7469 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7470                                  
  7471                                  _seg_reinit_1:				
  7472 0000003D AB                      		stosw			; modify Bios_Code entry points
  7473 0000003E 47                      		inc	di
  7474 0000003F 47                      		inc	di
  7475 00000040 E2FB                    		loop	_seg_reinit_1
  7476 00000042 CB                      		retf
  7477                                  
  7478                                  ; ---------------------------------------------------------------------------
  7479                                  
  7480                                  ; 15/10/2022
  7481                                  
  7482                                  ;************************************************************************
  7483                                  ;*									*
  7484                                  ;*	chardev_entry - main device driver dispatch routine		*
  7485                                  ;*	   called with a dummy parameter block on the stack		*
  7486                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7487                                  ;*									*
  7488                                  ;*	will eventually take care of doing the transitions in		*
  7489                                  ;*	   out of Bios_Code						*
  7490                                  ;*									*
  7491                                  ;************************************************************************
  7492                                  
  7493                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7494 00000043 56                      		push	si
  7495 00000044 50                      		push	ax
  7496 00000045 51                      		push	cx
  7497 00000046 52                      		push	dx
  7498 00000047 57                      		push	di
  7499 00000048 55                      		push	bp
  7500 00000049 1E                      		push	ds
  7501 0000004A 06                      		push	es
  7502 0000004B 53                      		push	bx
  7503 0000004C 89E5                    		mov	bp, sp
  7504 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7505                                  		;;mov	ds, word [cs:0030h]
  7506                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7507 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7508 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7509 00000059 A2[2100]                		mov	[auxnum], al
  7510 0000005C 8826[E704]              		mov	[printdev], ah
  7511 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7512 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7513 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7514 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7515 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7516 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7517                                  		; 17/10/2022
  7518 00000076 81FE[9604]              		cmp	si, DSKTBL
  7519                                  		;cmp	si, 4A2h	; dsktbl
  7520                                  					; at 2C7h:4A2h = 70h:2A12h
  7521 0000007A 7517                    		jnz	short no_sector32_mapping
  7522                                  
  7523                                  ; Special case for 32-bit start sector number:
  7524                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7525                                  ;      set high 16 bits of secnum to 0
  7526                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7527                                  ;
  7528                                  ; pass high word of sector number in start_sec_h, low word in dx
  7529                                  ;
  7530                                  ; note: start_l and start_h are the offsets within the io_request packet
  7531                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7532                                  ;	  it has been used.
  7533                                  ;
  7534                                  ; note: remember not to destroy the registers which have been set up before
  7535                                  
  7536                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7537 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7538 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7539 00000085 750C                    		jnz	short no_sector32_mapping
  7540 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7541                                  					; 32 bits dsk req
  7542                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7543 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7544 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7545                                  					; dx = packet.start_l
  7546                                  no_sector32_mapping:			
  7547 00000093 97                      		xchg	ax, di
  7548 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7549 00000098 2E3A04                  		cmp	al, cs:[si]
  7550 0000009B 732C                    		jnb	short command_error
  7551 0000009D 98                      		cbw			; note that al <= 15 means ok
  7552 0000009E D1E0                    		shl	ax, 1
  7553 000000A0 01C6                    		add	si, ax
  7554 000000A2 97                      		xchg	ax, di
  7555 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7556 000000A7 FC                      		cld
  7557                                  		; 17/10/2022
  7558 000000A8 2EFF5401                		call	near [cs:si+1]
  7559                                  		;call	word ptr cs:si+1
  7560 000000AC 7202                    		jb	short already_got_ah_status
  7561 000000AE B401                    		mov	ah, 1
  7562                                  already_got_ah_status:
  7563                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7564                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7565                                  					; cas note: shouldn't be needed!
  7566 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7567                                  		;lds	bx, ds:ptrsav
  7568 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7569 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7570                                  					; mark operation complete
  7571 000000BC 5B                      		pop	bx
  7572 000000BD 07                      		pop	es
  7573 000000BE 1F                      		pop	ds
  7574 000000BF 5D                      		pop	bp
  7575 000000C0 5F                      		pop	di
  7576 000000C1 5A                      		pop	dx
  7577 000000C2 59                      		pop	cx
  7578 000000C3 58                      		pop	ax
  7579 000000C4 5E                      		pop	si
  7580 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7581                                  	
  7582                                  		; fall through into bc_retf
  7583                                  ; ---------------------------------------------------------------------------	
  7584                                  bc_retf:
  7585 000000C8 CB                      		retf
  7586                                  ; ---------------------------------------------------------------------------
  7587                                  
  7588                                  command_error:				
  7589 000000C9 E80900                  		call	bc_cmderr
  7590 000000CC EBE2                    		jmp	short already_got_ah_status
  7591                                  ; 15/10/2022
  7592                                  ; 01/05/2019
  7593                                  
  7594                                  ;----------------------------------------------------------------------------
  7595                                  ; The following piece of hack is for supporting CP/M compatibility
  7596                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7597                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7598                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7599                                  ; high.
  7600                                  ;----------------------------------------------------------------------------
  7601                                  
  7602                                  		;db 7 dup(0)
  7603                                  
  7604                                  		; 15/10/2022
  7605                                  
  7606 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7607                                  
  7608 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7609                                  				;  which is the CP/M call 5 entry point
  7610                                  		
  7611                                  
  7612                                  ; ---------------------------------------------------------------------------
  7613                                  
  7614                                  ;	exit - all routines return through this path
  7615                                  
  7616                                  bc_cmderr:				
  7617 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7618                                  					; unknown command error
  7619                                  
  7620                                  ; =============== S U B	R O U T	I N E =======================================
  7621                                  
  7622                                  ;	now zero the count field by subtracting its current value,
  7623                                  ;	  which is still in cx, from itself.
  7624                                  
  7625                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7626                                  ;	  in order to return the number actually complete
  7627                                  
  7628                                  bc_err_cnt:	
  7629                                  		;les	bx, ds:ptrsav
  7630                                  		; 19/10/2022
  7631 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7632 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7633                                  					; # of successful i/o's
  7634 000000DF B481                    		mov	ah, 81h		; mark error return
  7635 000000E1 F9                      		stc			; indicate abnormal end
  7636 000000E2 C3                      		retn
  7637                                  
  7638                                  ; 15/10/2022
  7639                                  
  7640                                  ;Bios_Code ends
  7641                                  
  7642                                  ;----------------------------------------------------------------------------
  7643                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7644                                  ;----------------------------------------------------------------------------
  7645                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7646                                  ; 10/01/2019 - Retro DOS v4.0
  7647                                  
  7648                                  ; 30/04/2019
  7649                                  
  7650                                  ;title	mschar - character and clock devices
  7651                                  
  7652                                  ;MODE_CTRLBRK	equ	0FFh
  7653                                  
  7654                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7655                                  
  7656                                  ;************************************************************************
  7657                                  ;*									*
  7658                                  ;*	device driver dispatch tables					*
  7659                                  ;*									*
  7660                                  ;*	each table starts with a byte which lists the number of		*
  7661                                  ;*	legal functions, followed by that number of words. Each		*
  7662                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7663                                  ;*	handles the function. The functions are terminated with		*
  7664                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7665                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7666                                  ;*	returned as abnormal completion status. Notice that ds		*
  7667                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7668                                  ;*									*
  7669                                  ;************************************************************************
  7670                                  
  7671                                  		; 13/12/2022
  7672                                  		;db 0
  7673                                  
  7674                                  		; 13/12/202
  7675 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7676                                  					; 2C7h:0E4h = 70h:2654h
  7677 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7678                                  					; 00 init
  7679 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7680 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7681 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7682                                  					; 03
  7683 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7684                                  					; 04
  7685 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7686                                  					; 05
  7687 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7688 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7689                                  					; 07
  7690 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7691                                  					; 08
  7692 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7693 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7694                                  con_table_end:
  7695 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7696                                  					; 2C7h:0FBh = 70h:266Bh
  7697 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7698 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7699 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7700 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7701 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7702                                  					; 04 indicate zero chars read
  7703 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7704                                  					; 05 read non-destructive
  7705 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7706 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7707 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7708 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7709 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7710 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7711 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7712 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7713 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7714 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7715 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7716 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7717 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7718 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7719 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7720 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7721 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7722 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7723 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7724 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7725                                  prn_table_end:
  7726 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7727                                  					; 2C7h:130h = 70h:26A0h
  7728 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7729 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7730 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7731 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7732 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7733 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7734 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7735 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7736 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7737 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7738 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7739                                  aux_table_end:
  7740 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7741                                  					; 2C7h:147h = 70h:26B7h
  7742 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7743 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7744 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7745 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7746 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7747 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7748 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7749 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7750 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7751 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7752                                  tim_table_end:
  7753                                  
  7754                                  ; ---------------------------------------------------------------------------
  7755                                  
  7756                                  ;************************************************************************
  7757                                  ;*									*
  7758                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7759                                  ;*									*
  7760                                  ;************************************************************************
  7761                                  
  7762                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7763                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7764 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7765                                  con_loop:				
  7766 0000015D E80500                  		call	chrin		; get char in al
  7767 00000160 AA                      		stosb			; store	char at	es:di
  7768 00000161 E2FA                    		loop	con_loop
  7769                                  con_exit:				
  7770 00000163 F8                      		clc
  7771 00000164 C3                      		retn
  7772                                  
  7773                                  ; =============== S U B	R O U T	I N E =======================================
  7774                                  
  7775                                  ;************************************************************************
  7776                                  ;*									*
  7777                                  ;*	chrin - input single char from keyboard into al			*
  7778                                  ;*									*
  7779                                  ;*	  we are going to issue extended keyboard function, if		*
  7780                                  ;*	  supported. the returning value of the extended keystroke	*
  7781                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7782                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7783                                  ;*	  this creates a conflict when the user entered real		*
  7784                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7785                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7786                                  ;*	  in the following manner:					*
  7787                                  ;*									*
  7788                                  ;*	      ah = 16h							*
  7789                                  ;*	      int 16h							*
  7790                                  ;*	      if al == 0, then extended code (in ah)			*
  7791                                  ;*	      else if al == 0E0h, then					*
  7792                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7793                                  ;*		else greek_alpha character.				*
  7794                                  ;*									*
  7795                                  ;*	also, for compatibility reason, if an extended code is		*
  7796                                  ;*	  detected, then we are going to change the value in al		*
  7797                                  ;*	  from 0E0h to 00h.						*
  7798                                  ;*									*
  7799                                  ;************************************************************************
  7800                                  
  7801                                  		; 19/10/2022
  7802                                  chrin:		
  7803 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7804 00000169 30C0                    		xor	al, al
  7805 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7806 0000016F 08C0                    		or	al, al
  7807 00000171 752A                    		jnz	short keyret
  7808 00000173 CD16                    		int	16h		; KEYBOARD -
  7809 00000175 09C0                    		or	ax, ax
  7810 00000177 74EC                    		jz	short chrin
  7811 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7812 0000017C 7504                    		jnz	short alt_ext_chk
  7813 0000017E B010                    		mov	al, 10h
  7814 00000180 EB1B                    		jmp	short keyret
  7815                                  ; ---------------------------------------------------------------------------
  7816                                  
  7817                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7818                                  ;    if character read was 0E0h then
  7819                                  ;      if extended byte was zero (i.e. ah == 0) then
  7820                                  ;	 goto keyret
  7821                                  ;      else
  7822                                  ;	 set al to zero
  7823                                  ;	 goto alt_save
  7824                                  ;      endif
  7825                                  ;    endif
  7826                                  ;  endif
  7827                                  
  7828                                  alt_ext_chk:
  7829 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7830 00000187 740C                    		jz	short not_ext
  7831 00000189 3CE0                    		cmp	al, 0E0h
  7832 0000018B 7508                    		jnz	short not_ext
  7833 0000018D 08E4                    		or	ah, ah
  7834 0000018F 740C                    		jz	short keyret
  7835 00000191 30C0                    		xor	al, al
  7836 00000193 EB04                    		jmp	short alt_save
  7837                                  ; ---------------------------------------------------------------------------
  7838                                  
  7839                                  not_ext:				
  7840 00000195 08C0                    		or	al, al		; special case?
  7841 00000197 7504                    		jnz	short keyret
  7842                                  alt_save:				
  7843 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7844                                  keyret:					
  7845 0000019D C3                      		retn
  7846                                  
  7847                                  ; ---------------------------------------------------------------------------
  7848                                  
  7849                                  ;************************************************************************
  7850                                  ;*									*
  7851                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7852                                  ;*									*
  7853                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7854                                  ;*	in the status word of the request packet, and there is no	*
  7855                                  ;*	character in the input buffer, the driver issues a system	*
  7856                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7857                                  ;*	a 'char-not-found' to the dos.					*
  7858                                  ;*									*
  7859                                  ;************************************************************************
  7860                                  
  7861                                  		; 19/10/2022
  7862                                  con_rdnd:				
  7863 0000019E A0[0C00]                		mov	al, [altah]
  7864 000001A1 08C0                    		or	al, al
  7865 000001A3 754C                    		jnz	short rdexit
  7866 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7867 000001A9 CD16                    		int	16h		; KEYBOARD -
  7868 000001AB 751D                    		jnz	short gotchr
  7869 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7870 000001B2 7412                    		jz	short z_bus_exit
  7871 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7872                                  		; 12/12/2022
  7873 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7874                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7875 000001BD 7407                    		jz	short z_bus_exit
  7876 000001BF B80041                  		mov	ax, 4100h
  7877 000001C2 30DB                    		xor	bl, bl
  7878 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7879                                  					; AL = condition type, BH = condition compare or mask value
  7880                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7881                                  					; DX = I/O port	address	if AL bit 4 set
  7882                                  z_bus_exit:				
  7883 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7884 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7885 000001C9 C3                      		retn
  7886                                  ; ---------------------------------------------------------------------------
  7887                                  
  7888                                  gotchr:					
  7889 000001CA 09C0                    		or	ax, ax
  7890 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7891 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7892 000001D2 CD16                    		int	16h		; KEYBOARD -
  7893 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7894                                  ; ---------------------------------------------------------------------------
  7895                                  
  7896                                  notbrk:					
  7897 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7898 000001D9 7504                    		jnz	short rd_ext_chk
  7899 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7900 000001DD EB12                    		jmp	short rdexit
  7901                                  ; ---------------------------------------------------------------------------
  7902                                  
  7903                                  rd_ext_chk:				
  7904 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7905 000001E4 740B                    		jz	short rdexit
  7906 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7907 000001E8 7507                    		jnz	short rdexit
  7908 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7909 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7910 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7911                                  					; change it for	compatibility
  7912                                  rdexit:					
  7913 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7914 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7915                                  					; return keyboard character here
  7916                                  bc_exvec:				
  7917 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7918                                  					; indicate normal termination
  7919 000001FA C3                      		retn
  7920                                  ; ---------------------------------------------------------------------------
  7921                                  
  7922                                  ;************************************************************************
  7923                                  ;*									*
  7924                                  ;*	con_write - console write routine				*
  7925                                  ;*									*
  7926                                  ;*	entry:	es:di -> buffer						*
  7927                                  ;*		cx    =  count						*
  7928                                  ;*									*
  7929                                  ;************************************************************************
  7930                                  
  7931                                  con_writ:
  7932                                  		;jcxz	short bc_exvec
  7933 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  7934                                  		; 12/12/2022
  7935                                  		;jcxz	cc_ret
  7936                                  con_lp:					
  7937 000001FD 268A05                  		mov	al, [es:di]
  7938 00000200 47                      		inc	di
  7939 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  7940                                  					; AL = character to display
  7941 00000203 E2F8                    		loop	con_lp
  7942                                  cc_ret:					
  7943 00000205 F8                      		clc
  7944 00000206 C3                      		retn
  7945                                  
  7946                                  ; =============== S U B	R O U T	I N E =======================================
  7947                                  
  7948                                  ;************************************************************************
  7949                                  ;*									*
  7950                                  ;*	con_flush - flush out keyboard queue				*
  7951                                  ;*									*
  7952                                  ;************************************************************************
  7953                                  
  7954                                  con_flush:
  7955 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  7956                                  flloop:					; while	(charavail()) charread();	
  7957 0000020C B401                    		mov	ah, 1
  7958 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  7959                                  					; Return: ZF clear if character	in buffer
  7960                                  					; AH = scan code, AL = character
  7961                                  					; ZF set if no character in buffer
  7962 00000210 74F3                    		jz	short cc_ret
  7963 00000212 30E4                    		xor	ah, ah
  7964 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  7965                                  					; Return: AH = scan code, AL = character
  7966 00000216 EBF4                    		jmp	short flloop
  7967                                  
  7968                                  ; ---------------------------------------------------------------------------
  7969                                  
  7970                                  ; 15/10/2022
  7971                                  
  7972                                  ;************************************************************************
  7973                                  ;*									*
  7974                                  ;*	some equates for rom bios printer i/o				*
  7975                                  ;*									*
  7976                                  ;************************************************************************
  7977                                  
  7978                                  ; ibm rom status bits (i don't trust them, neither should you)
  7979                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  7980                                  ; whole slew of bits, only one of which is correct.
  7981                                  
  7982                                  ;notbusystatus	equ 10000000b		; not busy
  7983                                  ;nopaperstatus	equ 00100000b		; no more paper
  7984                                  ;prnselected	equ 00010000b		; printer selected
  7985                                  ;ioerrstatus	equ 00001000b		; some kinda error
  7986                                  ;timeoutstatus	equ 00000001b		; time out.
  7987                                  ;
  7988                                  ;noprinter	equ 00110000b		; no printer attached
  7989                                  
  7990                                  ; 18/03/2019 - Retro DOS v4.0
  7991                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  7992                                  
  7993                                  ; ---------------------------------------------------------------------------
  7994                                  
  7995                                  ;************************************************************************
  7996                                  ;*									*
  7997                                  ;*	prn_input - return with no error but zero chars read		*
  7998                                  ;*									*
  7999                                  ;*	enter with cx = number of characters requested			*
  8000                                  ;*									*
  8001                                  ;************************************************************************
  8002                                  
  8003                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  8004 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  8005                                  					; (sub reqpkt.count,cx)
  8006                                  		; 12/12/2022
  8007                                  prn_done:
  8008 0000021B F8                      		clc			; but return with carry	reset for no error
  8009 0000021C C3                      		retn
  8010                                  ; ---------------------------------------------------------------------------
  8011                                  
  8012                                  ;************************************************************************
  8013                                  ;*									*
  8014                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  8015                                  ;*									*
  8016                                  ;*	auxnum has printer number					*
  8017                                  ;*									*
  8018                                  ;************************************************************************
  8019                                  
  8020                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  8021                                  		;jcxz	short prn_done	; no chars to output
  8022 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  8023                                  prn_loop:				
  8024 0000021F BB0200                  		mov	bx, 2		; retry	count
  8025                                  prn_out:				
  8026 00000222 E83600                  		call	prnstat		; get status
  8027 00000225 751D                    		jnz	short TestPrnError
  8028 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  8029 0000022A 30E4                    		xor	ah, ah
  8030 0000022C E82E00                  		call	prnop		; print	to printer
  8031 0000022F 7419                    		jz	short prn_con	; no error - continue
  8032 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8033 00000234 7509                    		jnz	short _prnwf
  8034 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8035 00000238 C606[0C00]00            		mov	byte [altah], 0
  8036 0000023D EB08                    		jmp	short pmessg
  8037                                  ; ---------------------------------------------------------------------------
  8038                                  
  8039                                  _prnwf:					
  8040 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  8041 00000242 7406                    		jz	short prn_con
  8042                                  TestPrnError:				
  8043 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  8044 00000245 75DB                    		jnz	short prn_out
  8045                                  pmessg:					
  8046 00000247 E98DFE                  		jmp	bc_err_cnt
  8047                                  ; ---------------------------------------------------------------------------
  8048                                  
  8049                                  prn_con:				
  8050 0000024A 47                      		inc	di		; point	to next	char and continue
  8051 0000024B E2D2                    		loop	prn_loop
  8052                                  ;prn_done:				
  8053                                  		; 12/12/2022
  8054                                  prn_done2:
  8055                                  		;clc
  8056                                  		; cf=0
  8057 0000024D C3                      		retn
  8058                                  ; ---------------------------------------------------------------------------
  8059                                  
  8060                                  ;************************************************************************
  8061                                  ;*									*
  8062                                  ;*	prn_stat - device driver entry to return printer status		*
  8063                                  ;*									*
  8064                                  ;************************************************************************
  8065                                  
  8066                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8067 0000024E E80A00                  		call	prnstat		; device in dx
  8068 00000251 75F4                    		jnz	short pmessg
  8069 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  8070                                  		;jnz	short prn_done
  8071                                  		; 12/12/2022
  8072 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  8073 00000258 E96BFF                  		jmp	z_bus_exit
  8074                                  ; ---------------------------------------------------------------------------
  8075                                  
  8076                                  ;************************************************************************
  8077                                  ;*									*
  8078                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8079                                  ;*		 printer status. Return meaningful error code		*
  8080                                  ;*									*
  8081                                  ;************************************************************************
  8082                                  
  8083                                  prnstat:				
  8084 0000025B B402                    		mov	ah, 2		; set command for get status
  8085                                  					; PRINTER - GET	STATUS
  8086                                  					; DX = printer port (0-3)
  8087                                  					; Return: AH = status
  8088                                  
  8089                                  ; =============== S U B	R O U T	I N E =======================================
  8090                                  
  8091                                  ;************************************************************************
  8092                                  ;*									*
  8093                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8094                                  ;*		return zero true if no error				*
  8095                                  ;*		return zero false if error, al = error code		*
  8096                                  ;*									*
  8097                                  ;************************************************************************
  8098                                  
  8099                                  prnop:	
  8100 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8101 00000261 CD17                    		int	17h
  8102                                  
  8103                                  	; This check was added to see if this is a case of no
  8104                                  	; printer being installed. This tests checks to be sure
  8105                                  	; the error is noprinter (30h)
  8106                                  
  8107 00000263 50                      		push	ax
  8108 00000264 80E430                  		and	ah, 30h
  8109 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  8110 0000026A 58                      		pop	ax
  8111 0000026B 7506                    		jnz	short NextTest
  8112 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8113 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  8114                                  
  8115                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8116                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8117                                  ; careful about breaking basic.
  8118                                  
  8119                                  NextTest:				
  8120 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8121                                  					; i/o error?
  8122 00000276 740A                    		jz	short checknotready ; no, try not ready
  8123                                  
  8124                                  ; at this point, we know we have an error. the converse is not true
  8125                                  
  8126 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  8127                                  					; first, assume	out of paper
  8128 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  8129 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  8130 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  8131                                  ret1:					
  8132 00000281 C3                      		retn
  8133                                  ; ---------------------------------------------------------------------------
  8134                                  
  8135                                  checknotready:				
  8136 00000282 B002                    		mov	al, 2		; assume not-ready
  8137 00000284 F6C401                  		test	ah, 1
  8138 00000287 C3                      		retn
  8139                                  
  8140                                  ; ---------------------------------------------------------------------------
  8141                                  
  8142                                  ;************************************************************************
  8143                                  ;*									*
  8144                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8145                                  ;*		     this entry point should never block waiting for	*
  8146                                  ;*		     device to come ready.				*
  8147                                  ;*									*
  8148                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8149                                  ;*	outputs: set the number of bytes transferred in the		*
  8150                                  ;*		 device driver request packet				*
  8151                                  ;*									*
  8152                                  ;************************************************************************
  8153                                  
  8154                                  		; 19/10/2022
  8155                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8156 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8157                                  prn_tilbloop:				
  8158 0000028A 51                      		push	cx
  8159 0000028B 53                      		push	bx
  8160 0000028C 30FF                    		xor	bh, bh
  8161 0000028E 8A1E[E704]              		mov	bl, [printdev]
  8162 00000292 D1E3                    		shl	bx, 1
  8163                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8164 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  8165 00000298 5B                      		pop	bx
  8166                                  prn_getstat:				
  8167 00000299 E8BFFF                  		call	prnstat		; get status
  8168 0000029C 7514                    		jnz	short prn_bperr	; error
  8169 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8170 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8171 000002A3 59                      		pop	cx		; get original count
  8172 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8173 000002A6 26                      		es
  8174 000002A7 AC                      		lodsb
  8175                                  		;lods	byte ptr es:[si] ; es
  8176                                  					; lodsb
  8177 000002A8 30E4                    		xor	ah, ah
  8178 000002AA E8B0FF                  		call	prnop
  8179 000002AD 7504                    		jnz	short prn_berr	; error
  8180 000002AF E2D9                    		loop	prn_tilbloop
  8181                                  		; 12/12/2022
  8182                                  		; cf=0 (prnop)
  8183                                  		;clc			; normal no-error return
  8184 000002B1 C3                      		retn			;   from device driver
  8185                                  
  8186                                  ; ---------------------------------------------------------------------------
  8187                                  
  8188                                  prn_bperr:				
  8189 000002B2 59                      		pop	cx		; restore transfer count from stack
  8190                                  prn_berr:				
  8191 000002B3 E921FE                  		jmp	bc_err_cnt
  8192                                  ; ---------------------------------------------------------------------------
  8193                                  
  8194                                  ; 15/10/2022
  8195                                  
  8196                                  ;************************************************************************
  8197                                  ;*									*
  8198                                  ;*	prn_genioctl - get/set printer retry count			*
  8199                                  ;*									*
  8200                                  ;************************************************************************
  8201                                  
  8202                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8203                                  ; 11/01/2019
  8204                                  
  8205                                  ;********************************;*
  8206                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8207                                  ;********************************;*
  8208                                  
  8209                                  ;;RAWIO SUB-FUNCTIONS
  8210                                  ;;get_retry_count equ 65h
  8211                                  ;;set_retry_count equ 45h
  8212                                  
  8213                                  ;;struc A_RETRYCOUNT
  8214                                  ;;.rc_count: resw 1
  8215                                  ;;endstruc
  8216                                  
  8217                                  ;ioc_pc equ 5
  8218                                  
  8219                                  ; ---------------------------------------------------------------------------
  8220                                  
  8221                                  		; 19/10/2022
  8222                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8223 000002B6 C43E[1200]              		les	di, [ptrsav]
  8224 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8225                                  					; ioc_pc
  8226 000002BF 7403                    		jz	short prnfunc_ok
  8227                                  
  8228                                  prnfuncerr:				
  8229 000002C1 E911FE                  		jmp	bc_cmderr
  8230                                  ; ---------------------------------------------------------------------------
  8231                                  
  8232                                  prnfunc_ok:				
  8233 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8234 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8235 000002CC 30FF                    		xor	bh, bh
  8236                                  		;mov	bl, ds:printdev	; get index into retry counts
  8237 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8238 000002D2 D1E3                    		shl	bx, 1
  8239                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8240 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8241 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8242 000002DA 7407                    		jz	short prngetcount
  8243 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8244 000002DE 75E1                    		jnz	short prnfuncerr
  8245 000002E0 268B0D                  		mov	cx, [es:di]
  8246                                  prngetcount:				
  8247                                  		;mov	ds:wait_count[bx], cx
  8248 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8249 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8250                                  					; return current retry count
  8251                                  		; 12/12/2022
  8252                                  		; cf=0
  8253                                  		;clc
  8254 000002EA C3                      		retn
  8255                                  ; ---------------------------------------------------------------------------
  8256                                  
  8257                                  ;************************************************************************
  8258                                  ;*									*
  8259                                  ;*  prn_ioctl_query							*
  8260                                  ;*									*
  8261                                  ;*  Added for 5.00							*
  8262                                  ;************************************************************************
  8263                                  
  8264                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8265 000002EB C43E[1200]              		les	di, [ptrsav]
  8266 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8267                                  					; ioc_pc
  8268 000002F4 750D                    		jnz	short prn_query_err
  8269 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8270 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8271 000002FC 7404                    		jz	short IOCtlSupported
  8272 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8273 00000300 7501                    		jnz	short prn_query_err
  8274                                  IOCtlSupported:	
  8275                                  		; 12/12/2022
  8276                                  		; cf=0		
  8277                                  		;clc
  8278 00000302 C3                      		retn
  8279                                  ; ---------------------------------------------------------------------------
  8280                                  
  8281                                  prn_query_err:
  8282                                  		; 12/12/2022				
  8283                                  		;stc
  8284 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8285                                  ; ---------------------------------------------------------------------------
  8286                                  
  8287                                  ;************************************************************************
  8288                                  ;*									*
  8289                                  ;*	aux port driver code -- "aux" == "com1"				*
  8290                                  ;*									*
  8291                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8292                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8293                                  ;*									*
  8294                                  ;************************************************************************
  8295                                  
  8296                                  ;	values in ah, requesting function of int 14h in rom bios
  8297                                  
  8298                                  ;auxfunc_send	 equ	1	;transmit
  8299                                  ;auxfunc_receive equ	2	;read
  8300                                  ;auxfunc_status	 equ	3	;request status
  8301                                  
  8302                                  ;	error flags, reported by int 14h, reported in ah:
  8303                                  
  8304                                  ;flag_data_ready equ	01h	;data ready
  8305                                  ;flag_overrun	 equ	02h	;overrun error
  8306                                  ;flag_parity	 equ	04h	;parity error
  8307                                  ;flag_frame	 equ	08h	;framing error
  8308                                  ;flag_break	 equ	10h	;break detect
  8309                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8310                                  ;flag_timeout	 equ	80h	;timeout
  8311                                  
  8312                                  ;	these flags reported in al:
  8313                                  
  8314                                  ;flag_cts	 equ	10h	;clear to send
  8315                                  ;flag_dsr	 equ	20h	;data set ready
  8316                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8317                                  
  8318                                  ; ---------------------------------------------------------------------------
  8319                                  
  8320                                  ;************************************************************************
  8321                                  ;*									*
  8322                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8323                                  ;*		   at es:di						*
  8324                                  ;*									*
  8325                                  ;************************************************************************
  8326                                  
  8327                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8328                                  		;jcxz	short exvec2
  8329 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8330 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8331 0000030B 30C0                    		xor	al, al
  8332 0000030D 8607                    		xchg	al, [bx]
  8333 0000030F 08C0                    		or	al, al
  8334 00000311 7503                    		jnz	short aux2
  8335                                  aux1:					
  8336 00000313 E80500                  		call	auxin		; get character	from port
  8337                                  					; won't return if error
  8338                                  aux2:					
  8339 00000316 AA                      		stosb
  8340 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8341                                  exvec2:					
  8342 00000319 F8                      		clc			; all done, successful exit
  8343                                  auxin_retn:	; 18/12/2022
  8344 0000031A C3                      		retn
  8345                                  ; ---------------------------------------------------------------------------
  8346                                  
  8347                                  ;************************************************************************
  8348                                  ;*									*
  8349                                  ;*	auxin - call rom bios to read character from aux port		*
  8350                                  ;*		if error occurs, map the error and return one		*
  8351                                  ;*		level up to device driver exit code, setting		*
  8352                                  ;*		the number of bytes transferred appropriately		*
  8353                                  ;*									*
  8354                                  ;************************************************************************
  8355                                  
  8356                                  auxin:					
  8357 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8358 0000031D E83C00                  		call	auxop
  8359 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8360                                  		;jnz	short arbad	; skip if any error bits set
  8361                                  		;retn
  8362                                  		; 25/06/2023 (BugFix)
  8363 00000323 74F5                    		jz	short auxin_retn
  8364                                  ; ---------------------------------------------------------------------------
  8365                                  
  8366                                  arbad:					
  8367 00000325 58                      		pop	ax		; remove return	address	(near call)
  8368 00000326 30C0                    		xor	al, al
  8369 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8370 0000032A E9AAFD                  		jmp	bc_err_cnt
  8371                                  
  8372                                  ; ---------------------------------------------------------------------------
  8373                                  
  8374                                  ;************************************************************************
  8375                                  ;*									*
  8376                                  ;*	aux_rdnd - non-destructive aux port read			*
  8377                                  ;*									*
  8378                                  ;************************************************************************
  8379                                  
  8380                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8381 0000032D E85200                  		call	getbx
  8382 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8383 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8384 00000334 7511                    		jnz	short auxdrx	; then return character
  8385 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8386 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8387 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8388 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8389 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8390 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8391 00000345 8807                    		mov	[bx], al
  8392                                  auxdrx:					
  8393 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8394                                  ; ---------------------------------------------------------------------------
  8395                                  
  8396                                  auxbus:					
  8397 0000034A E979FE                  		jmp	z_bus_exit
  8398                                  ; ---------------------------------------------------------------------------
  8399                                  
  8400                                  ;************************************************************************
  8401                                  ;*									*
  8402                                  ;*	aux_wrst - return aux port write status				*
  8403                                  ;*									*
  8404                                  ;************************************************************************
  8405                                  
  8406                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8407 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8408 00000350 A820                    		test	al, 20h		; test data set	ready
  8409 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8410 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8411 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8412                                  		; 12/12/2022
  8413                                  		; cf=0	; (test instruction resets cf)
  8414                                  		;clc
  8415 00000359 C3                      		retn
  8416                                  ; ---------------------------------------------------------------------------
  8417                                  
  8418                                  ;************************************************************************
  8419                                  ;*									*
  8420                                  ;*	auxstat - call rom bios to determine aux port status		*
  8421                                  ;*									*
  8422                                  ;*	exit:	ax = status						*
  8423                                  ;*		dx = [auxnum]						*
  8424                                  ;*									*
  8425                                  ;************************************************************************
  8426                                  
  8427                                  auxstat:				
  8428 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8429                                  
  8430                                  		; fall into auxop
  8431                                  
  8432                                  ; =============== S U B	R O U T	I N E =======================================
  8433                                  
  8434                                  ;************************************************************************
  8435                                  ;*									*
  8436                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8437                                  ;*									*
  8438                                  ;*	entry:	ah = int 14h function number				*
  8439                                  ;*	exit:	ax = results						*
  8440                                  ;*		dx = [auxnum]						*
  8441                                  ;*									*
  8442                                  ;************************************************************************
  8443                                  
  8444                                  auxop:		; proc near		
  8445 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8446                                  					; 0=init, 1=send, 2=receive, 3=status
  8447                                  					; get port number
  8448 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8449                                  					; DX = port number (0-3)
  8450                                  					; Return: AX = port status code
  8451 00000362 C3                      		retn
  8452                                  
  8453                                  ; ---------------------------------------------------------------------------
  8454                                  
  8455                                  ;************************************************************************
  8456                                  ;*									*
  8457                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8458                                  ;*		   auxbuf [auxnum] to zero				*
  8459                                  ;*									*
  8460                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8461                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8462                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8463                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8464                                  ;*									*
  8465                                  ;************************************************************************
  8466                                  
  8467                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8468 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8469 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8470                                  					; zero out buffer
  8471                                  		;clc			; all done, successful return
  8472                                  		; 12/12/2022
  8473                                  		; cf=0 ('add' instruction in 'getbx')
  8474 00000369 C3                      		retn
  8475                                  ; ---------------------------------------------------------------------------
  8476                                  
  8477                                  ;************************************************************************
  8478                                  ;*									*
  8479                                  ;*	aux_writ - write to aux device					*
  8480                                  ;*									*
  8481                                  ;************************************************************************
  8482                                  
  8483                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8484                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8485 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8486                                  aux_loop:				
  8487 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8488                                  					; move di pointer to next character
  8489 0000036F 47                      		inc	di
  8490 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8491 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8492 00000375 F6C480                  		test	ah, 80h		; check	for error
  8493 00000378 7405                    		jz	short awok	; then no error
  8494 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8495 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8496                                  ; ---------------------------------------------------------------------------
  8497                                  
  8498                                  awok:					
  8499 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8500                                  					; still	more character to print
  8501                                  		;clc			; all done, successful return
  8502                                  		; 12/12/2022
  8503                                  		; cf=0 (test instruction above)	
  8504 00000381 C3                      		retn
  8505                                  
  8506                                  ; =============== S U B	R O U T	I N E =======================================
  8507                                  
  8508                                  ;************************************************************************
  8509                                  ;*									*
  8510                                  ;*	getbx - return bx -> single byte input buffer for		*
  8511                                  ;*		selected aux port ([auxnum])				*
  8512                                  ;*									*
  8513                                  ;************************************************************************
  8514                                  
  8515                                  getbx:	
  8516 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8517                                  					; for selected aux port	([auxnum])
  8518                                  		;add	bx, offset auxbuf
  8519 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8520                                  		; 12/12/2022
  8521                                  		; cf=0 (if [uaxnum] is valid number) 
  8522 0000038A C3                      		retn
  8523                                  
  8524                                  ; ---------------------------------------------------------------------------
  8525                                  
  8526                                  ; 15/10/2022
  8527                                  
  8528                                  ;----------------------------------------------------------------
  8529                                  ;								:
  8530                                  ;		    clock device driver 			:
  8531                                  ;								:
  8532                                  ;								:
  8533                                  ;   this file contains the clock device driver. 		:
  8534                                  ;								:
  8535                                  ;   the routines in this files are:				:
  8536                                  ;								:
  8537                                  ;	routine 		function			:
  8538                                  ;	------- 		--------			:
  8539                                  ;	tim_writ		set the current time		:
  8540                                  ;	tim_read		read the current time		:
  8541                                  ;	time_to_ticks		convert time to corresponding	:
  8542                                  ;				  number of clock ticks 	:
  8543                                  ;								:
  8544                                  ; the clock ticks at the rate of:				:
  8545                                  ;								:
  8546                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8547                                  ; see each routine for information on the use.			:
  8548                                  ;								:
  8549                                  ;----------------------------------------------------------------
  8550                                  
  8551                                  ; convert time to ticks
  8552                                  ; input : time in cx and dx
  8553                                  ; ticks returned in cx:dx
  8554                                  
  8555                                  ;19/07/2019
  8556                                  ;09/03/2019
  8557                                  
  8558                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8559                                  
  8560                                  ; first convert from hour,min,sec,hund. to
  8561                                  ; total number of 100th of seconds
  8562                                  
  8563 0000038B B03C                    		mov	al, 60
  8564 0000038D F6E5                    		mul	ch		; hours	to minutes
  8565 0000038F B500                    		mov	ch, 0
  8566 00000391 01C8                    		add	ax, cx		; total	minutes
  8567 00000393 B97017                  		mov	cx, 6000	; 60*100
  8568 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8569 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8570 0000039A 89C1                    		mov	cx, ax
  8571 0000039C B064                    		mov	al, 100
  8572 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8573 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8574 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8575 000003A5 B700                    		mov	bh, 0
  8576 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8577 000003A9 83D200                  		adc	dx, 0
  8578                                  
  8579                                  	; dx:cx is time in 1/100 sec
  8580                                  
  8581 000003AC 92                      		xchg	ax, dx
  8582 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8583 000003AE BB0BE9                  		mov	bx, 59659
  8584 000003B1 F7E3                    		mul	bx		; multiply low half
  8585 000003B3 87D1                    		xchg	dx, cx
  8586 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8587 000003B6 F7E3                    		mul	bx		; multiply high	half
  8588 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8589 000003BA 83D200                  		adc	dx, 0
  8590 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8591 000003BE BB0500                  		mov	bx, 5
  8592 000003C1 F6F3                    		div	bl		; divide high half by 5
  8593 000003C3 88C1                    		mov	cl, al
  8594 000003C5 B500                    		mov	ch, 0
  8595 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8596 000003C9 98                      		cbw
  8597 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8598 000003CB F7F3                    		div	bx		; divide low half by 5
  8599 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8600 000003CF CB                      		retf			; far return
  8601                                  
  8602                                  ; ---------------------------------------------------------------------------
  8603                                  
  8604                                  ; 17/10/2022
  8605                                  ; 15/10/2022
  8606                                  
  8607                                  ;--------------------------------------------------------------------
  8608                                  ;
  8609                                  ; tim_writ sets the current time
  8610                                  ;
  8611                                  ; on entry es:[di] has the current time:
  8612                                  ;
  8613                                  ;	number of days since 1-1-80	(word)
  8614                                  ;	minutes (0-59)			(byte)
  8615                                  ;	hours (0-23)			(byte)
  8616                                  ;	hundredths of seconds (0-99)	(byte)
  8617                                  ;	seconds (0-59)			(byte)
  8618                                  ;
  8619                                  ; each number has been checked for the correct range.
  8620                                  ;
  8621                                  ;	NOTE: Any changes in this routine probably require corresponding
  8622                                  ;	changes in the version that is built with the power manager driver.
  8623                                  ;	See ptime.asm.
  8624                                  ;
  8625                                  ;--------------------------------------------------------------------
  8626                                  
  8627                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8628 000003D0 268B05                  		mov	ax, [es:di]
  8629 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8630                                  					; end to avoid tick windows.
  8631 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8632                                  		;cmp	ds:havecmosclock, 0
  8633 000003D9 7426                    		jz	short no_cmos_1
  8634 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8635                                  					; get binary hours
  8636                                  					; convert to bcd
  8637 000003DF FF1E[0205]              		call	far [bintobcd]
  8638                                  		;call	ds:bintobcd	; call far [bintobcd]
  8639 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8640 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8641 000003E9 FF1E[0205]              		call	far [bintobcd]
  8642                                  		;call	ds:bintobcd	; convert to bcd
  8643 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8644 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8645 000003F3 FF1E[0205]              		call	far [bintobcd]
  8646                                  		;call	ds:bintobcd
  8647 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8648 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8649 000003FB FA                      		cli
  8650 000003FC B403                    		mov	ah, 3
  8651 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8652                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8653                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8654                                  					; Return: CMOS clock set
  8655 00000400 FB                      		sti
  8656                                  no_cmos_1:				
  8657 00000401 268B4D02                		mov	cx, [es:di+2]
  8658 00000405 268B5504                		mov	dx, [es:di+4]
  8659                                  		; 17/10/2022
  8660 00000409 FF1E[E206]              		call	far [ttticks]
  8661                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8662                                  					; convert time to ticks
  8663                                  					; cx:dx	now has	time in	ticks
  8664 0000040D FA                      		cli			; turn off timer
  8665 0000040E B401                    		mov	ah, 1
  8666 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8667                                  					; CX:DX	= clock	count
  8668                                  					; Return: time of day set
  8669                                  		;pop	ds:daycnt
  8670 00000412 8F06[F004]              		pop	word [daycnt]
  8671 00000416 FB                      		sti
  8672                                  		;cmp	ds:havecmosclock, 0
  8673 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8674 0000041C 740A                    		jz	short no_cmos_2
  8675 0000041E FF1E[0605]              		call	far [daycnttoday]
  8676                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8677                                  					; convert to bcd format
  8678 00000422 FA                      		cli
  8679 00000423 B405                    		mov	ah, 5
  8680 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8681                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8682                                  					; CH = century (19h or 20h)
  8683                                  					; Return: CMOS clock set
  8684 00000427 FB                      		sti
  8685                                  no_cmos_2:
  8686                                  		; 12/12/2022
  8687                                  		; cf=0				
  8688                                  		;clc
  8689 00000428 C3                      		retn
  8690                                  
  8691                                  ; ---------------------------------------------------------------------------
  8692                                  
  8693                                  ; 15/10/2022
  8694                                  
  8695                                  ;----------------------------------------------------------------------------
  8696                                  ; gettime reads date and time
  8697                                  ; and returns the following information:
  8698                                  ;
  8699                                  ;	es:[di]  =count of days since 1-1-80
  8700                                  ;	es:[di+2]=hours
  8701                                  ;	es:[di+3]=minutes
  8702                                  ;	es:[di+4]=seconds
  8703                                  ;	es:[di+5]=hundredths of seconds
  8704                                  ;
  8705                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8706                                  ;	changes in the version that is built with the power manager driver.
  8707                                  ;	See ptime.asm.
  8708                                  ;----------------------------------------------------------------------------
  8709                                  
  8710                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8711 00000429 E84E00                  		call	GetTickCnt
  8712 0000042C 8B36[F004]              		mov	si, [daycnt]
  8713                                  
  8714                                  ; we now need to convert the time in tick to the time in 100th of
  8715                                  ; seconds. the relation between tick and seconds is:
  8716                                  ;
  8717                                  ;		 65,536 seconds
  8718                                  ;	       ----------------
  8719                                  ;		1,193,180 tick
  8720                                  ;
  8721                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8722                                  ;
  8723                                  ;	ticks from clock  * 65,536 * 100
  8724                                  ;      --------------------------------- = time in 100th of seconds
  8725                                  ;		1,193,180
  8726                                  ;
  8727                                  ; fortunately this formula simplifies to:
  8728                                  ;
  8729                                  ;	ticks from clock * 5 * 65,536
  8730                                  ;      --------------------------------- = time in 100th of seconds
  8731                                  ;		59,659
  8732                                  ;
  8733                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8734                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8735                                  ; my 16 bits to the left.
  8736                                  ;
  8737                                  ; start with ticks in cx:dx
  8738                                  ; multiply by 5
  8739                                  
  8740 00000430 89C8                    		mov	ax, cx
  8741 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8742                                  					; multiply by 5
  8743 00000434 D1E2                    		shl	dx, 1
  8744 00000436 D1D1                    		rcl	cx, 1		; times	2
  8745 00000438 D1E2                    		shl	dx, 1
  8746 0000043A D1D1                    		rcl	cx, 1		; times	4
  8747 0000043C 01DA                    		add	dx, bx
  8748 0000043E 11C8                    		adc	ax, cx		; times	5
  8749 00000440 92                      		xchg	ax, dx
  8750                                  
  8751                                  ; now have ticks * 5 in	dx:ax
  8752                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8753                                  
  8754 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8755 00000444 F7F1                    		div	cx		; dx now has remainder
  8756                                  					; ax has high word of final quotient
  8757 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8758 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8759 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8760                                  
  8761                                  ; rounding based on the	remainder may be added here
  8762                                  ; the result in	bx:ax is time in 1/100 second.
  8763                                  
  8764 0000044C 89DA                    		mov	dx, bx		
  8765 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8766                                  
  8767                                  ; division by 200 is necessary to ensure no overflow--max result
  8768                                  ; is number of seconds in a day/2 = 43200.
  8769                                  
  8770 00000451 F7F1                    		div	cx
  8771 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8772 00000456 7203                    		jb	short noadj
  8773 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8774                                  noadj:					
  8775 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8776 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8777                                  
  8778                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8779                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8780                                  
  8781 0000045E D1D0                    		rcl	ax, 1		
  8782 00000460 B200                    		mov	dl, 0
  8783 00000462 D1D2                    		rcl	dx, 1
  8784 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8785 00000467 F7F1                    		div	cx
  8786 00000469 88D7                    		mov	bh, dl		; save the seconds
  8787 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8788 0000046D 86C4                    		xchg	al, ah
  8789                                  
  8790                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8791                                  
  8792 0000046F 50                      		push	ax
  8793 00000470 89F0                    		mov	ax, si		; daycnt
  8794 00000472 AB                      		stosw
  8795 00000473 58                      		pop	ax
  8796 00000474 AB                      		stosw
  8797 00000475 89D8                    		mov	ax, bx
  8798 00000477 AB                      		stosw
  8799 00000478 F8                      		clc
  8800 00000479 C3                      		retn
  8801                                  
  8802                                  ; =============== S U B	R O U T	I N E =======================================
  8803                                  
  8804                                  ; 15/10/2022
  8805                                  
  8806                                  ;----------------------------------------------------------------------------
  8807                                  ;
  8808                                  ; procedure : GetTickCnt
  8809                                  ;
  8810                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8811                                  ;		of rollover [except when power management driver is in use]. 
  8812                                  ;		Uses the following logic for updating Daycnt
  8813                                  ;
  8814                                  ;		if ( rollover ) {
  8815                                  ;			if ( t_switch )
  8816                                  ;				daycnt++ ;
  8817                                  ;			else
  8818                                  ;				daycnt += rollover ;
  8819                                  ;		}
  8820                                  ;
  8821                                  ; USES : AX
  8822                                  ;
  8823                                  ; RETURNS : CX:DX - tick count
  8824                                  ; MODIFIES : daycnt
  8825                                  ;
  8826                                  ;----------------------------------------------------------------------------
  8827                                  
  8828                                  		; 17/10/2022
  8829                                  GetTickCnt:	
  8830 0000047A 30E4                    		xor	ah, ah
  8831 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8832                                  					; Return: CX:DX	= clock	count
  8833                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8834                                  					; midnight
  8835                                  					; Otherwise, AL	> 0
  8836 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8837 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8838 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8839                                  					; and not flag
  8840 00000487 0106[F004]              		add	[daycnt], ax
  8841 0000048B C3                      		retn
  8842                                  ; ---------------------------------------------------------------------------
  8843                                  
  8844                                  inc_case:				
  8845 0000048C 08C0                    		or	al, al
  8846 0000048E 7404                    		jz	short no_rollover
  8847 00000490 FF06[F004]              		inc	word [daycnt]
  8848                                  no_rollover:				
  8849 00000494 C3                      		retn
  8850                                  
  8851                                  ;----------------------------------------------------------------------------
  8852                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8853                                  ;----------------------------------------------------------------------------
  8854                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8855                                  ; 09/03/2019 - Retro DOS v4.0
  8856                                  
  8857                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8858                                  ; 26/05/2018 - Retro DOS v3.0
  8859                                  ; 23/03/2018 - Retro DOS v2.0
  8860                                  
  8861                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8862                                  
  8863                                  ;struc BPB_TYPE
  8864                                  ;.SECSIZE:	resw 1
  8865                                  ;.SECALL:	resb 1
  8866                                  ;.RESNUM:	resw 1
  8867                                  ;.FATNUM:	resb 1
  8868                                  ;.DIRNUM:	resw 1
  8869                                  ;.SECNUM:	resw 1
  8870                                  ;.FATID:	resb 1
  8871                                  ;.FATSIZE:	resw 1
  8872                                  ;.SLIM:		resw 1
  8873                                  ;.HLIM:		resw 1
  8874                                  ;.HIDDEN:	resw 1
  8875                                  ;.size:
  8876                                  ;endstruc
  8877                                  
  8878                                  ;-----------------------------------------------------------------
  8879                                  ;	disk interface routines
  8880                                  ;-----------------------------------------------------------------
  8881                                  
  8882                                  ; device attribute bits:
  8883                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8884                                  
  8885                                  ;MAXERR		equ	5
  8886                                  ;MAX_HD_FMT_ERR	equ	2
  8887                                  
  8888                                  ;LSTDRV	equ 504h
  8889                                  
  8890                                  ; some floppies do not have changeline. as a result, media-check would
  8891                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8892                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8893                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8894                                  ; the time of the last successful disk operation and compare it with the current
  8895                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8896                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8897                                  ; since we cannot trust the timer to be always available, we record the number 
  8898                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8899                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8900                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8901                                  ; the time of last successful access, if we see that time has passed too,
  8902                                  ; we reset the counter.
  8903                                  
  8904                                  accessmax	equ	5
  8905                                  
  8906                                  ; due to various bogosities, we need to continually adjust what the head
  8907                                  ; settle time is.  the following algorithm is used:
  8908                                  ;
  8909                                  ;   get the current head settle value.
  8910                                  ;   if it is 0, then
  8911                                  ;	set slow = 15
  8912                                  ;   else
  8913                                  ;	set slow = value
  8914                                  ;   ...
  8915                                  ;*********************************************
  8916                                  ;************ old algorithm ******************
  8917                                  ;*   if we are seeking and writing then
  8918                                  ;*	 use slow
  8919                                  ;*   else
  8920                                  ;*	 use fast
  8921                                  ;*********************************************
  8922                                  ;*********** ibm's requested logic ***********
  8923                                  ;   if we are seeking and writing and not on an at then
  8924                                  ;	use slow
  8925                                  ;   else
  8926                                  ;	use fast
  8927                                  ;   ...
  8928                                  ;   restore current head settle value
  8929                                  ;
  8930                                  ;
  8931                                  ;---------------------------------------
  8932                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  8933                                  					; it on after handling config.sys file as a
  8934                                  					; default value, if multrk_flag = multrk_off1.
  8935                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  8936                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  8937                                  
  8938                                  ; close data segment, open Bios_Code segment
  8939                                  
  8940                                  ; 15/10/2022
  8941                                  
  8942                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  8943                                  
  8944                                  ;-----------------------------------------------------------------
  8945                                  ;	command jump table
  8946                                  ;-----------------------------------------------------------------
  8947                                  
  8948 00000495 00                      		db 0
  8949                                  
  8950                                  ; 11/12/2022
  8951                                  %if 0
  8952                                  
  8953                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  8954                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  8955                                  		dw 1742h		; dsk_init
  8956                                  		dw 4EBh			; media_chk
  8957                                  		dw 592h			; get_bpb
  8958                                  		dw 0D5h			; bc_cmderr
  8959                                  		dw 857h			; dsk_read
  8960                                  		dw 83Dh			; x_bus_exit
  8961                                  		dw 558h			; ret_carry_clear
  8962                                  		dw 558h			; ret_carry_clear
  8963                                  		dw 849h			; dsk_writ
  8964                                  		dw 841h			; dsk_writv
  8965                                  		dw 558h			; ret_carry_clear
  8966                                  		dw 558h			; ret_carry_clear
  8967                                  		dw 0D5h			; bc_cmderr
  8968                                  		dw 80Ah			; dsk_open
  8969                                  		dw 81Ah			; dsk_close
  8970                                  		dw 831h			; dsk_rem
  8971                                  		dw 558h			; ret_carry_clear
  8972                                  		dw 558h			; ret_carry_clear
  8973                                  		dw 558h			; ret_carry_clear
  8974                                  		dw 0C6Bh		; do_generic_ioctl
  8975                                  		dw 558h			; ret_carry_clear
  8976                                  		dw 558h			; ret_carry_clear
  8977                                  		dw 558h			; ret_carry_clear
  8978                                  		dw 1124h		; ioctl_getown
  8979                                  		dw 1142h		; ioctl_setown
  8980                                  		dw 129Ah		; ioctl_support_query
  8981                                  
  8982                                  ;dtbl_siz equ $-dsktbl
  8983                                  
  8984                                  %endif
  8985                                  		; 11/12/2022
  8986 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  8987 00000497 [C316]                  		dw dsk_init
  8988 00000499 [DF04]                  		dw media_chk
  8989 0000049B [8505]                  		dw get_bpb
  8990 0000049D [D500]                  		dw bc_cmderr
  8991 0000049F [3508]                  		dw dsk_read
  8992 000004A1 [1B08]                  		dw x_bus_exit
  8993 000004A3 [4B05]                  		dw ret_carry_clear
  8994 000004A5 [4B05]                  		dw ret_carry_clear
  8995 000004A7 [2708]                  		dw dsk_writ
  8996 000004A9 [1F08]                  		dw dsk_writv
  8997 000004AB [4B05]                  		dw ret_carry_clear
  8998 000004AD [4B05]                  		dw ret_carry_clear
  8999 000004AF [D500]                  		dw bc_cmderr
  9000 000004B1 [EB07]                  		dw dsk_open
  9001 000004B3 [FA07]                  		dw dsk_close
  9002 000004B5 [1008]                  		dw dsk_rem
  9003 000004B7 [4B05]                  		dw ret_carry_clear
  9004 000004B9 [4B05]                  		dw ret_carry_clear
  9005 000004BB [4B05]                  		dw ret_carry_clear
  9006 000004BD [420C]                  		dw do_generic_ioctl
  9007 000004BF [4B05]                  		dw ret_carry_clear
  9008 000004C1 [4B05]                  		dw ret_carry_clear
  9009 000004C3 [4B05]                  		dw ret_carry_clear
  9010 000004C5 [D910]                  		dw ioctl_getown
  9011 000004C7 [F610]                  		dw ioctl_setown
  9012 000004C9 [4412]                  		dw ioctl_support_query
  9013                                  
  9014                                  dtbl_siz equ $-dsktbl
  9015                                  
  9016                                  ; =============== S U B	R O U T	I N E =======================================
  9017                                  
  9018                                  ; ---------------------------------------------------------------------------
  9019                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  9020                                  ; the one that belongs to the drive specified. carry is set if none exists
  9021                                  ; for the drive. Pointer is returned in es:[di]
  9022                                  ;
  9023                                  ;  AL contains the logical drive number.
  9024                                  ; ---------------------------------------------------------------------------
  9025                                  
  9026                                  SetDrive:	
  9027                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  9028 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9029                                  X_Scan_Loop:				
  9030 000004CF 26384505                		cmp	[es:di+5], al	
  9031 000004D3 7409                    		jz	short X_SetDrv
  9032 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9033 000004D8 83FFFF                  		cmp	di, 0FFFFh
  9034 000004DB 75F2                    		jnz	short X_Scan_Loop
  9035 000004DD F9                      		stc
  9036                                  X_SetDrv:				
  9037 000004DE C3                      		retn
  9038                                  
  9039                                  ; ---------------------------------------------------------------------------
  9040                                  
  9041                                  ; 15/10/2022
  9042                                  
  9043                                  ; ---------------------------------------------------------------------
  9044                                  ; if id is f9, have a 96tpi disk else
  9045                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9046                                  ;  otherwise if within 2 secs of last disk operation media could not
  9047                                  ;    have changed, otherwise dont know if media has changed
  9048                                  ; ---------------------------------------------------------------------
  9049                                  
  9050                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9051 000004DF E8E9FF                  		call	SetDrive
  9052 000004E2 BE0100                  		mov	si, 1
  9053 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9054                                  					; fchanged_by_format
  9055 000004EA 7416                    		jz	short WeAreNotFakingIt
  9056                                  		; 12/12/2022
  9057 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9058                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9059                                  					; ~fchanged_by_format ;	reset flag
  9060 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9061                                  					; Ensure that we ask the rom if media has changed
  9062 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9063                                  					; fnon_removable
  9064 000004FB 740C                    		jz	short wehaveafloppy
  9065 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  9066 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  9067                                  ; ---------------------------------------------------------------------------
  9068                                  
  9069                                  WeAreNotFakingIt:
  9070                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9071 00000502 26F6452301              		test	byte [es:di+23h], 1
  9072 00000507 7525                    		jnz	short Media_Done
  9073                                  wehaveafloppy:				
  9074 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  9075                                  
  9076                                  		; If we have a floppy with changeline support, we ask the ROM
  9077                                  		; to determine if media has changed. We do not perform the
  9078                                  		; 2 second check for these drives.
  9079                                  
  9080 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9081 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9082 00000512 E87912                  		call	mediacheck	;  Call	into removable routine
  9083 00000515 7236                    		jb	short err_exitj
  9084 00000517 E8C913                  		call	haschange
  9085 0000051A 7512                    		jnz	short Media_Done
  9086                                  mChk_NoChangeLine:
  9087                                  		; If we come here, we have a floppy with no changeline support
  9088                                  			
  9089 0000051C BE0100                  		mov	si, 1		; Presume no change
  9090 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9091 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9092                                  					; Is drive of last access the same?
  9093 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9094 00000528 E82800                  		call	Check_Time_Of_Access
  9095 0000052B EB01                    		jmp	short Media_Done
  9096                                  ; ---------------------------------------------------------------------------
  9097                                  
  9098                                  Media_Unk:				
  9099 0000052D 4E                      		dec	si		; ; Return "I don't know"
  9100                                  
  9101                                  		; SI now contains the correct value for media change.
  9102                                  		; Clean up the left overs
  9103                                  Media_Done:	
  9104                                  		; 19/10/2022			
  9105 0000052E 06                      		push	es
  9106 0000052F C41E[1200]              		les	bx, [ptrsav]
  9107 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9108 00000537 07                      		pop	es
  9109 00000538 09F6                    		or	si, si
  9110 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  9111 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  9112 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9113 00000543 E82F13                  		call	media_set_vid
  9114                                  mChk1_NoChangeLine:			
  9115 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9116                                  					; Make sure we ask rom for media check
  9117                                  ret_carry_clear:			
  9118 0000054B F8                      		clc			; volidok
  9119 0000054C C3                      		retn
  9120                                  ; ---------------------------------------------------------------------------
  9121                                  
  9122                                  err_exitj:				
  9123 0000054D E87D06                  		call	maperror	; guaranteed to	set carry
  9124                                  ret81:					
  9125 00000550 B481                    		mov	ah, 81h		; return error status
  9126 00000552 C3                      		retn			; return with carry set
  9127                                  
  9128                                  ; =============== S U B	R O U T	I N E =======================================
  9129                                  
  9130                                  ; ---------------------------------------------------------------------------
  9131                                  ; perform a check on the time passed since the last access for this physical
  9132                                  ; drive.
  9133                                  ; we are accessing the same drive. if the time of last successful access was
  9134                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9135                                  ; returns in si:
  9136                                  ;	0 - if time of last access was >= 2 seconds
  9137                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9138                                  ; registers affected ax,cx,dx, flags.
  9139                                  ;
  9140                                  ;	assume es:di -> bds, ds->Bios_Data
  9141                                  ; ---------------------------------------------------------------------------
  9142                                  
  9143                                  		; 19/10/2022
  9144                                  Check_Time_Of_Access:
  9145 00000553 BE0100                  		mov	si, 1		; presume no change.
  9146 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9147 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9148                                  					; get stored time
  9149 0000055D 29C2                    		sub	dx, ax
  9150 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9151 00000563 19C1                    		sbb	cx, ax
  9152 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9153 00000567 09D2                    		or	dx, dx		; time must pass
  9154 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  9155 0000056B FE06[1D01]              		inc	byte [accesscount]
  9156 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  9157                                  					; if count is less than threshold, ok
  9158 00000574 720C                    		jb	short timecheck_ret
  9159 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9160 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9161                                  ; ---------------------------------------------------------------------------
  9162                                  
  9163                                  timepassed:				
  9164 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9165                                  					; min elapsed time? (2 seconds)
  9166 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9167                                  
  9168                                  		; everything indicates that we do not know what has happened.
  9169                                  timecheck_unk:				
  9170 00000581 4E                      		dec	si		; presume i don't know
  9171                                  timecheck_ret:				
  9172 00000582 C3                      		retn
  9173                                  
  9174                                  ; ---------------------------------------------------------------------------
  9175                                  ; 15/10/2022
  9176                                  Err_Exitj2:
  9177 00000583 EBC8                    		jmp	short err_exitj
  9178                                  
  9179                                  ; ---------------------------------------------------------------------------
  9180                                  
  9181                                  ; 15/10/2022
  9182                                  
  9183                                  ; ==========================================================================
  9184                                  ; Build a valid bpb for the disk in the drive.
  9185                                  ; ==========================================================================
  9186                                  
  9187                                  		; 19/10/2022
  9188                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9189 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9190 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9191 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9192                                  					; fnon_removable
  9193 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9194                                  
  9195                                  		; let's set the default value for volid,vol_serial,
  9196                                  		; filesys_id in bds table
  9197                                  
  9198 00000592 E83700                  		call	clear_ids
  9199                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9200 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9201 0000059A E85B00                  		call	GetBp		; build	a bpb if necessary
  9202 0000059D 72B1                    		jb	short ret81
  9203                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9204 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9205                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9206 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9207 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9208                                  					; otherwise, conventional boot record
  9209                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9210 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9211 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9212 000005B2 E83413                  		call	set_volume_id
  9213                                  already_gotbpb:				
  9214 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9215                                  					; return the bpb from the current bds
  9216                                  
  9217                                  ;		 fall into setptrsav, es:di -> result
  9218                                  
  9219                                  ; ---------------------------------------------------------------------------
  9220                                  
  9221                                  ; 15/10/2022
  9222                                  
  9223                                  ; ==========================================================================
  9224                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9225                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9226                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9227                                  ;It fails, for instance, when we install an external drive using driver.sys
  9228                                  ;because then the BDS segment is no longer Bios_Data. 
  9229                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9230                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9231                                  ;restored before returning to the caller.
  9232                                  ; ==========================================================================
  9233                                  
  9234                                  		; 19/10/2022
  9235                                  SetPtrSav:	; return point for dsk_init				
  9236 000005B8 8CC1                    		mov	cx, es		; save es
  9237                                  		;les	bx, ds:ptrsav
  9238 000005BA C41E[1200]              		les	bx, [ptrsav]
  9239 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9240 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9241 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9242 000005CA F8                      		clc
  9243 000005CB C3                      		retn
  9244                                  
  9245                                  ; =============== S U B	R O U T	I N E =======================================
  9246                                  
  9247                                  ; 15/10/2022
  9248                                  
  9249                                  ; -----------------------------------------------------
  9250                                  ; clear ids in bds table. only applied for floppies.
  9251                                  ;input:  es:di -> bds table
  9252                                  ;	assumes ds: -> Bios_Data
  9253                                  ;output: volid set to "NO NAME    "
  9254                                  ;	 vol_serial set to 0.
  9255                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9256                                  ;	   depending on the flag fatsize in bds.
  9257                                  ;
  9258                                  ;	trashes si, cx
  9259                                  ; -----------------------------------------------------
  9260                                  
  9261                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9262                                  ;size_of_EXT_SYSTEM_ID equ 8
  9263                                  
  9264                                  clear_ids:
  9265                                  		; 11/09/2023 - Retro DOS v4.1 IO.SYS (Optimization & BugFix)
  9266 000005CC 268A451F                		mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
  9267                                  clear_ids_x:	; 11/09/2023		
  9268                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
  9269 000005D0 57                      		push	di
  9270 000005D1 31C9                    		xor	cx, cx		; no serial number
  9271 000005D3 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9272 000005D7 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9273                                  
  9274                                  		; BUGBUG - there's a lot in common here and with
  9275                                  		; mov_media_ids.. see if we can save some space by
  9276                                  		; merging them... jgl
  9277                                  
  9278                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9279                                  		; 10/12/2022
  9280 000005DB B10B                    		mov	cl, 11 ; cx = 11		
  9281                                  
  9282                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9283 000005DD BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9284 000005E0 83C74B                  		add	di, 75		; BDS.volid
  9285 000005E3 F3A4                    		rep movsb
  9286                                  		
  9287                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
  9288                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9289                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
  9290                                  		;test	byte [es:di+1Fh], 40h
  9291                                  
  9292                                  			; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
  9293                                  			; Microsoft/IBM code has a bug here because the BDS's
  9294                                  			; .volid and .filesys_id fields will be reset
  9295                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9296                                  			; at the BDS offset 31 but current (this) code checks flags
  9297                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9298                                  			;
  9299                                  			; Correct Code:
  9300                                  			; ;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9301                                  			; 11/09/2023
  9302                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
  9303                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
  9304                                  			;
  9305                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9306                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9307                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9308                                  			;
  9309                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9310                                  			; 'clear_ids' is used for floppy disks only and the default
  9311                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9312                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9313                                  
  9314 000005E5 A840                    		test	al, 40h ; * 
  9315                                  		
  9316                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9317 000005E7 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9318 000005EA 7503                    		jnz	short ci_bigfat
  9319                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9320 000005EC BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9321                                  ci_bigfat:				
  9322                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9323                                  		; 10/12/2022
  9324 000005EF B108                    		mov	cl, 8 ; cx = 8 
  9325 000005F1 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9326                                  					; filesys_id field
  9327 000005F4 F3A4                    		rep movsb
  9328 000005F6 5F                      		pop	di		; restore bds pointer
  9329 000005F7 C3                      		retn
  9330                                  
  9331                                  ; =============== S U B	R O U T	I N E =======================================
  9332                                  
  9333                                  ; 15/10/2022
  9334                                  
  9335                                  ; ---------------------------------------------------------------------------
  9336                                  ;	getbp - return bpb from the drive specified by the bds.
  9337                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9338                                  ;	    note that we never come here for fixed disks.
  9339                                  ;	    for all other cases,
  9340                                  ;	      - it reads boot sector to pull out the bpb
  9341                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9342                                  ;		to get the fat id byte to build the bpb from there.
  9343                                  ;
  9344                                  ;   inputs:	es:di point to correct bds.
  9345                                  ;
  9346                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9347                                  ;		carry set, and al=7 if invalid disk.
  9348                                  ;		carry set and error code in al if other error.
  9349                                  ;		if failed to recognize the boot record, then will set the
  9350                                  ;		set_id_flag to 0.
  9351                                  ;		this routine will only work for a floppy diskette.
  9352                                  ;		     for a fixed disk, it will just return.
  9353                                  ;
  9354                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9355                                  ;	  segment definitions. It should be migrated towards.
  9356                                  ;	   now es:di has the bds, ds: has Bios_Data
  9357                                  ; ---------------------------------------------------------------------------
  9358                                  
  9359                                  GetBp:		; if returning fake bpb then return bpb as is.
  9360                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9361 000005F8 26F6452305              		test	byte [es:di+23h], 5
  9362 000005FD 7403                    		jz	short getbp1	; getbp1
  9363 000005FF E99A00                  		jmp	getret_exit
  9364                                  ; ---------------------------------------------------------------------------
  9365                                  
  9366                                  getbp1:					
  9367 00000602 51                      		push	cx
  9368 00000603 52                      		push	dx
  9369 00000604 53                      		push	bx
  9370                                  
  9371                                  		; attempt to read in boot sector and determine bpb.
  9372                                  		; we assume that the 2.x and greater dos disks all
  9373                                  		; have a valid boot sector.
  9374                                  
  9375 00000605 E8A900                  		call	readbootsec
  9376 00000608 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9377 0000060A 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9378 0000060C 7508                    		jnz	short dofatbpb
  9379 0000060E E8EE00                  		call	movbpb		; move bpb into	registers
  9380 00000611 EB57                    		jmp	short Has1
  9381                                  ; ---------------------------------------------------------------------------
  9382                                  
  9383                                  getbp_err_ret_brdg:			
  9384 00000613 E98700                  		jmp	getbp_err_ret
  9385                                  ; ---------------------------------------------------------------------------
  9386                                  
  9387                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9388                                  		; and fill in bpb from there.
  9389                                  dofatbpb:				
  9390 00000616 E85201                  		call	readfat		; puts media descriptor	byte in	ah
  9391 00000619 72F8                    		jb	short getbp_err_ret_brdg
  9392                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9393 0000061B 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9394 00000620 7403                    		jz	short bpb_nochangeline ; brif not
  9395 00000622 E86512                  		call	hidensity	; may not return! May add sp, 2	and
  9396                                  					; jump to has1!!!!!! or	has720K
  9397                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9398 00000625 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9399                                  					; ffSmall
  9400 0000062A 7515                    		jnz	short is_floppy
  9401 0000062C 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9402 0000062F 7576                    		jnz	short got_unknown_medium
  9403                                  Has720K:				
  9404                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9405 00000631 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9406                                  
  9407                                  		; es points to segment of bds. the following should be modified
  9408                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9409                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9410                                  
  9411                                  		; 10/12/2022
  9412                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9413                                  		; 21/12/2022
  9414 00000634 8A07                    		mov	al, [bx]
  9415 00000636 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9416 00000639 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9417 0000063C 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9418                                  		; 19/10/2022 - Temporary !
  9419                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9420                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9421                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9422                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9423                                  
  9424 0000063F EB29                    		jmp	short Has1
  9425                                  ; ---------------------------------------------------------------------------
  9426                                  
  9427                                  is_floppy:			; must be a 5.25" floppy if we come here
  9428 00000641 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9429 00000644 7261                    		jb	short got_unknown_medium
  9430 00000646 B001                    		mov	al, 1		; set number of	fat sectors
  9431 00000648 BB0840                  		mov	bx, 16392	; 64*256+8
  9432                                  					; set dir entries and sector max
  9433 0000064B B94001                  		mov	cx, 320		; 40*8
  9434                                  					; set size of drive
  9435 0000064E BA0101                  		mov	dx, 257		; 01*256+1
  9436                                  					; set head limit and sec/all unit
  9437 00000651 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9438 00000654 7507                    		jnz	short has8	; nz = has 8 sectors
  9439 00000656 FEC0                    		inc	al		; inc number of	fat sectors
  9440 00000658 FEC3                    		inc	bl		; inc sector max
  9441                                  		;add	cx, 40		; increase size	(to 360)
  9442                                  		; 18/12/2022
  9443 0000065A 80C128                  		add	cl, 40
  9444                                  has8:					
  9445 0000065D F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9446 00000660 7408                    		jz	short Has1	; jz = 1 head
  9447 00000662 01C9                    		add	cx, cx		; double size of disk
  9448 00000664 B770                    		mov	bh, 112		; increase number of directory entries
  9449 00000666 FEC6                    		inc	dh		; inc sec/all unit
  9450 00000668 FEC2                    		inc	dl		; inc head limit
  9451                                  Has1:					
  9452                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
  9453 0000066A 1E                      		push	ds
  9454 0000066B 06                      		push	es
  9455 0000066C 1F                      		pop	ds		
  9456                                  				
  9457                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9458                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9459                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9460                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
  9461                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9462                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9463                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9464                                  
  9465 0000066D 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
  9466 00000670 30F6                    		xor	dh, dh
  9467 00000672 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
  9468 00000675 88FA                    		mov	dl, bh
  9469 00000677 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  9470 0000067A 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
  9471 0000067D 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
  9472 00000680 886510                  		mov	[di+10h], ah	; [di+BDS.media]
  9473 00000683 88C2                    		mov	dl, al
  9474 00000685 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
  9475 00000688 88DA                    		mov	dl, bl
  9476 0000068A 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
  9477                                  
  9478                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9479                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9480                                  		; to 0 since this code is for floppies
  9481                                  
  9482                                  		; 18/12/2022
  9483                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9484                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9485                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9486                                  		; 18/12/2022
  9487 0000068D 29C9                    		sub	cx, cx ; 0
  9488                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9489                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9490                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9491                                  		
  9492                                  		; 02/09/2023
  9493 0000068F 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
  9494 00000692 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
  9495 00000695 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
  9496                                  		
  9497 00000698 1F                      		pop	ds ; 02/09/2023
  9498                                  getret:					
  9499 00000699 5B                      		pop	bx
  9500 0000069A 5A                      		pop	dx
  9501 0000069B 59                      		pop	cx
  9502                                  getret_exit:				
  9503 0000069C C3                      		retn
  9504                                  ; ---------------------------------------------------------------------------
  9505                                  
  9506                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9507                                  		;mov	ds:set_id_flag,	0
  9508                                  		; 19/10/2022
  9509 0000069D C606[0A05]00            		mov	byte [set_id_flag], 0
  9510 000006A2 E82805                  		call	maperror
  9511 000006A5 EBF2                    		jmp	short getret
  9512                                  ; ---------------------------------------------------------------------------
  9513                                  
  9514                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9515                                  		; we do	not assume any type of bpb for this medium.
  9516                                  
  9517                                  got_unknown_medium:			
  9518                                  		;mov	ds:set_id_flag,	0 
  9519 000006A7 C606[0A05]00            		mov	byte [set_id_flag], 0
  9520 000006AC B007                    		mov	al, 7
  9521 000006AE F9                      		stc
  9522 000006AF EBE8                    		jmp	short getret
  9523                                  
  9524                                  ; =============== S U B	R O U T	I N E =======================================
  9525                                  
  9526                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9527                                  
  9528                                  ; ----------------------------------------------------------------
  9529                                  ; read in the boot sector. set carry if error in reading sector.
  9530                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9531                                  ;
  9532                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9533                                  ; ----------------------------------------------------------------
  9534                                  
  9535                                  ; 10/03/2019 - Retro DOS v4.0
  9536                                  
  9537                                  readbootsec:	
  9538 000006B1 B600                    		mov	dh, 0		; head 0
  9539 000006B3 B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9540 000006B6 E8BF00                  		call	read_sector
  9541 000006B9 7243                    		jb	short err_ret
  9542 000006BB 31DB                    		xor	bx, bx		; assume valid boot sector
  9543                                  
  9544                                  		; put a sanity check for the boot sector in here to detect
  9545                                  		; boot sectors that do not have valid bpbs. we examine the
  9546                                  		; first two bytes - they must contain a long jump (69h) or a
  9547                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9548                                  		; (E9h). if this test is passed, we further check by examining
  9549                                  		; the signature at the end of the boot sector for the word
  9550                                  		; AA55h. if the signature is not present, we examine the media
  9551                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9552                                  		; logic is modified a little bit. we are not going to check
  9553                                  		; signature. instead we are going to sanity check the media
  9554                                  		; byte in bpb regardless of the validity of signature. this is
  9555                                  		; to save the already developed commercial products that have
  9556                                  		; good jump instruction and signature but with the false bpb
  9557                                  		; informations
  9558                                  
  9559                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9560                                  
  9561                                  		; 02/09/2023
  9562                                  		; 19/10/2022
  9563                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
  9564                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
  9565                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9566                                  		;jz	short check_bpb_mediabyte ; no need for	nop
  9567                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
  9568                                  		;jnz	short invalidbootsec
  9569                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
  9570                                  		;jnz	short invalidbootsec
  9571                                  
  9572                                  		; 02/09/2023 (PCDOS 7.1)
  9573 000006BD A0[4E01]                		mov	al, [disksector]
  9574 000006C0 3C69                    		cmp	al, 69h		; is it a direct jump?
  9575 000006C2 740F                    		je	short check_bpb_mediabyte
  9576                                  					; don't need to find a nop
  9577 000006C4 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
  9578 000006C6 740B                    		je	short check_bpb_mediabyte
  9579                                  					; no need for nop
  9580 000006C8 3CEB                    		cmp	al, 0EBh	; how about a short jump?
  9581 000006CA 7530                    		jne	short invalidbootsec
  9582 000006CC 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9583 000006D1 7529                    		jne	short invalidbootsec
  9584                                  
  9585                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9586                                  ;
  9587                                  ;; 10/03/2019
  9588                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9589                                  ;;
  9590                                  ;; Don't have to perform the following signature check since
  9591                                  ;; we need to check the media byte even with the good signatured diskette.
  9592                                  ;;
  9593                                  ;;check_signature:
  9594                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9595                                  ;;							 ; disk or 1.x media.
  9596                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9597                                  ;;					       ; may need some special handling
  9598                                  
  9599                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9600                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9601                                  ; by examining the media descriptor in the boot sector.
  9602                                  
  9603                                  		; 19/10/2022
  9604                                  check_bpb_mediabyte:
  9605 000006D3 A0[6301]                		mov	al, [disksector+15h]
  9606                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9607 000006D6 50                      		push	ax ; 02/09/2023
  9608 000006D7 24F0                    		and	al, 0F0h
  9609 000006D9 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9610 000006DB 58                      		pop	ax ; 02/09/2023
  9611 000006DC 751E                    		jnz	short invalidbootsec
  9612                                  
  9613                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9614                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9615                                  ; sectors. these are specifically diskettes that were formatted in drives
  9616                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9617                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9618                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9619                                  ; help our build bpb routine to recognise these specific cases, and to
  9620                                  ; set up out copy of the bpb accordingly.
  9621                                  ; we do this by checking to see if the boot sector is off a diskette that
  9622                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9623                                  ; sec/clus field to 1. if not, we carry on as normal.
  9624                                  
  9625                                  checksinglesided:
  9626                                  		;mov	al, [disksector+15h]
  9627                                  		; 02/09/2023
  9628                                  		; al = [disksector+15h]
  9629 000006DE 3CF0                    		cmp	al, 0F0h
  9630 000006E0 741B                    		jz	short gooddsk
  9631 000006E2 A801                    		test	al, 1
  9632 000006E4 7517                    		jnz	short gooddsk
  9633 000006E6 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9634 000006EC 7507                    		jnz	short mustbeearlier
  9635 000006EE 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9636 000006F3 7308                    		jnb	short gooddsk
  9637                                  
  9638                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9639                                  
  9640                                  mustbeearlier:				
  9641 000006F5 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9642                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9643 000006FA EB01                    		jmp	short gooddsk
  9644                                  ; ---------------------------------------------------------------------------
  9645                                  
  9646                                  invalidbootsec:				
  9647 000006FC 43                      		inc	bx		; indicate that boot sector invalid
  9648                                  		; 10/12/2022
  9649                                  movbpb_ret:
  9650                                  gooddsk:				
  9651 000006FD F8                      		clc
  9652                                  err_ret:
  9653 000006FE C3                      		retn
  9654                                  ; ---------------------------------------------------------------------------
  9655                                  
  9656                                  		; 10/12/2022
  9657                                  ;err_ret:				
  9658                                  		;retn
  9659                                  
  9660                                  ; =============== S U B	R O U T	I N E =======================================
  9661                                  
  9662                                  ; 15/10/2022
  9663                                  ; ---------------------------------------------------------------------------
  9664                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9665                                  ; getbp routine at has1
  9666                                  ;
  9667                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9668                                  ; serial number, volume label, file system id in bds according to
  9669                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9670                                  ; to signal that volume label is set already from the extended boot record
  9671                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9672                                  ; the volume label in the root directory.)
  9673                                  ; ---------------------------------------------------------------------------
  9674                                  
  9675                                  ; 10/03/2019 - Retro DOS v4.0
  9676                                  
  9677                                  		; 19/10/2022
  9678                                  movbpb:	
  9679 000006FF 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9680                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9681                                  					; sectors per unit
  9682 00000703 8A3E[5F01]              		mov	bh, [disksector+11h]
  9683                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9684                                  					; number of directory entries
  9685 00000707 8B0E[6101]              		mov	cx, [disksector+13h]
  9686                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9687                                  					; size of drive
  9688 0000070B 8A26[6301]              		mov	ah, [disksector+15h]
  9689                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9690                                  					; media	descriptor
  9691 0000070F A0[6401]                		mov	al, [disksector+16h];
  9692                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9693                                  					; number of fat	sectors
  9694 00000712 8A1E[6601]              		mov	bl, [disksector+18h]
  9695                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9696                                  					; sectors per track
  9697 00000716 8A16[6801]              		mov	dl, [disksector+1Ah]
  9698                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9699                                  					; number of heads
  9700 0000071A 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9701 0000071F 75DC                    		jnz	short movbpb_ret
  9702 00000721 E81200                  		call	mov_media_ids
  9703 00000724 7205                    		jb	short movbpb_conv ; conventional boot record?
  9704 00000726 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9705                                  movbpb_conv:				
  9706 0000072B 803E[7700]01            		cmp	byte [fhave96], 1
  9707 00000730 75CB                    		jnz	short movbpb_ret
  9708 00000732 E8A811                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9709                                  		; 10/12/2022
  9710                                  		; cf = 0
  9711                                  ;movbpb_ret:				
  9712                                  		;clc
  9713 00000735 C3                      		retn
  9714                                  
  9715                                  ; =============== S U B	R O U T	I N E =======================================
  9716                                  
  9717                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9718                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9719                                  ;by es:di.
  9720                                  
  9721                                  ;in.) es:di -> bds
  9722                                  ;     ds:disksector = valid extended boot record.
  9723                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9724                                  ;      the boot record information.
  9725                                  ;     carry flag set if not an extended bpb.
  9726                                  ;     all registers saved except the flag.
  9727                                  
  9728                                  		; 19/10/2022
  9729                                  mov_media_ids:		
  9730 00000736 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9731                                  					; [disksector+EXT_BOOT.SIG],
  9732                                  					; EXT_BOOT_SIGNATURE
  9733 0000073B 752C                    		jnz	short mmi_not_ext
  9734 0000073D 51                      		push	cx
  9735 0000073E 8B0E[7501]              		mov	cx, [disksector+27h]
  9736                                  					; [disksector+EXT_BOOT.SERIAL]
  9737 00000742 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9738 00000746 8B0E[7701]              		mov	cx, [disksector+29h]
  9739                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9740 0000074A 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9741 0000074E 57                      		push	di
  9742 0000074F 56                      		push	si
  9743 00000750 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9744 00000753 BE[7901]                		mov	si, disksector+2Bh
  9745                                  		;mov	si, (offset disksector+2Bh) ;
  9746                                  					; disksector+EXT_BOOT.VOL_LABEL
  9747 00000756 83C74B                  		add	di, 75		; BDS.volid
  9748 00000759 F3A4                    		rep movsb
  9749                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9750                                  		; 10/12/2022
  9751 0000075B B108                    		mov	cl, 8 ; cx = 8
  9752 0000075D BE[8401]                		mov	si, disksector+36h
  9753                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9754 00000760 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9755 00000763 F3A4                    		rep movsb
  9756 00000765 5E                      		pop	si
  9757 00000766 5F                      		pop	di
  9758 00000767 59                      		pop	cx
  9759                                  		; 10/12/2022
  9760                                  		; cf = 0
  9761                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9762                                  				; (20/09/2022)
  9763 00000768 C3                      		retn
  9764                                  ; ---------------------------------------------------------------------------
  9765                                  
  9766                                  mmi_not_ext:				
  9767 00000769 F9                      		stc
  9768 0000076A C3                      		retn
  9769                                  
  9770                                  ; =============== S U B	R O U T	I N E =======================================
  9771                                  
  9772                                  ; 15/10/2022
  9773                                  ; --------------------------------------------------------------
  9774                                  ; read in the fat sector and get the media byte from it.
  9775                                  ; input : es:di -> bds
  9776                                  ; output:
  9777                                  ;	  carry set if an error occurs, ax contains error code.
  9778                                  ;	  otherwise, ah contains media byte on exit
  9779                                  ; --------------------------------------------------------------
  9780                                  
  9781                                  readfat:	
  9782                                  		;mov	dh, 0
  9783                                  		; 10/12/2022
  9784 0000076B 30F6                    		xor	dh, dh
  9785 0000076D B90200                  		mov	cx, 2		; head 0
  9786                                  					; cylinder 0, sector 2
  9787 00000770 E80500                  		call	read_sector
  9788 00000773 7202                    		jb	short bad_fat_ret
  9789 00000775 8A27                    		mov	ah, [bx]	; media	byte
  9790                                  bad_fat_ret:				
  9791 00000777 C3                      		retn
  9792                                  
  9793                                  ; =============== S U B	R O U T	I N E =======================================
  9794                                  
  9795                                  ; 15/10/2022
  9796                                  
  9797                                  ; ---------------------------------------------------------------------------
  9798                                  ; read a single sector into the temp buffer.
  9799                                  ; perform three retries in case of error.
  9800                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9801                                  ;		cx has sector and cylinder
  9802                                  ;		dh has head
  9803                                  ;		es:di has bds
  9804                                  ;		ds has Bios_Data
  9805                                  ;
  9806                                  ;   outputs:	carry clear
  9807                                  ;		    Bios_Data:bx point to sector
  9808                                  ;		       (note: some callers assume location of buffer)
  9809                                  ;
  9810                                  ;		carry set
  9811                                  ;		    ax has rom error code
  9812                                  ;
  9813                                  ; register bp is preserved.
  9814                                  ; ---------------------------------------------------------------------------
  9815                                  
  9816                                  ; 10/03/2019 - Retro DOS v4.0
  9817                                  
  9818                                  		; 19/10/2022
  9819                                  read_sector:	
  9820 00000778 55                      		push	bp
  9821 00000779 BD0300                  		mov	bp, 3		; make 3 attempts
  9822 0000077C 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9823 00000780 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9824                                  rd_ret:					
  9825 00000783 06                      		push	es
  9826 00000784 1E                      		push	ds
  9827 00000785 07                      		pop	es
  9828 00000786 B80102                  		mov	ax, 201h
  9829 00000789 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9830                                  					; AL = number of sectors to read, CH = track, CL = sector
  9831                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9832                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9833 0000078B 07                      		pop	es
  9834 0000078C 734A                    		jnb	short okret2
  9835                                  rd_rty:					
  9836 0000078E E87404                  		call	again		; reset	disk, decrement	bp, preserve ax
  9837 00000791 7442                    		jz	short err_rd_ret
  9838 00000793 26F6452301              		test	byte [es:di+23h], 1
  9839                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9840                                  					; fnon_removable
  9841 00000798 75E9                    		jnz	short rd_ret
  9842 0000079A 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9843 0000079F 7510                    		jnz	short rd_skip1_dpt
  9844 000007A1 50                      		push	ax
  9845 000007A2 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9846 000007A3 C536[2D01]              		lds	si, [dpt]
  9847                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9848                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9849                                  		;			; NORMSETTLE
  9850                                  		; 12/12/2022
  9851 000007A7 B00F                    		mov	al, 15
  9852 000007A9 864409                  		xchg	al, [si+9]
  9853                                  		; 
  9854 000007AC 1F                      		pop	ds
  9855 000007AD A2[2A01]                		mov	[save_head_sttl], al
  9856 000007B0 58                      		pop	ax
  9857                                  rd_skip1_dpt:				
  9858 000007B1 06                      		push	es
  9859 000007B2 1E                      		push	ds
  9860 000007B3 07                      		pop	es
  9861 000007B4 B80102                  		mov	ax, 201h
  9862 000007B7 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9863                                  					; AL = number of sectors to read, CH = track, CL = sector
  9864                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9865                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9866 000007B9 07                      		pop	es
  9867 000007BA 9C                      		pushf
  9868 000007BB 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9869 000007C0 750E                    		jnz	short rd_skip2_dpt
  9870 000007C2 50                      		push	ax
  9871 000007C3 A0[2A01]                		mov	al, [save_head_sttl]
  9872 000007C6 1E                      		push	ds
  9873 000007C7 C536[2D01]              		lds	si, [dpt]
  9874 000007CB 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9875 000007CE 1F                      		pop	ds
  9876 000007CF 58                      		pop	ax
  9877                                  rd_skip2_dpt:				
  9878 000007D0 9D                      		popf
  9879 000007D1 7305                    		jnb	short okret2
  9880 000007D3 EBB9                    		jmp	short rd_rty
  9881                                  ; ---------------------------------------------------------------------------
  9882                                  
  9883                                  err_rd_ret:				
  9884 000007D5 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9885                                  					; return error
  9886 000007D7 F9                      		stc
  9887                                  
  9888                                  ; update information pertaining to last drive accessed, time of access, last
  9889                                  ; track accessed in that drive.
  9890                                  
  9891                                  okret2:					
  9892 000007D8 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9893 000007DC 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9894 000007E0 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9895                                  					; save last track accessed on this drive
  9896                                  					; preserve flags in case error occurred
  9897 000007E4 9C                      		pushf
  9898 000007E5 E8FD03                  		call	set_tim
  9899 000007E8 9D                      		popf			; restore flags
  9900 000007E9 5D                      		pop	bp
  9901 000007EA C3                      		retn
  9902                                  
  9903                                  ;----------------------------------------------------------------------------
  9904                                  ;	disk open/close routines
  9905                                  ;----------------------------------------------------------------------------
  9906                                  
  9907                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9908 000007EB 803E[7700]00            		cmp	byte [fhave96], 0
  9909 000007F0 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9910 000007F2 E8D6FC                  		call	SetDrive	; get bds for drive
  9911 000007F5 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9912                                  dsk_open_exit:	
  9913                                  		; 10/12/2022
  9914                                  		; cf = 0			
  9915                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9916                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9917 000007F9 C3                      		retn
  9918                                  ; ---------------------------------------------------------------------------
  9919                                  
  9920                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9921 000007FA 803E[7700]00            		cmp	byte [fhave96], 0
  9922 000007FF 740E                    		jz	short exitjx	; done if no changeline	support
  9923 00000801 E8C7FC                  		call	SetDrive	; get bds for drive
  9924 00000804 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9925 00000809 7404                    		jz	short exitjx	; watch	out for	wrap
  9926 0000080B 26FF4D20                		dec	word [es:di+20h]
  9927                                  exitjx:					
  9928                                  		; 10/12/2022
  9929                                  		; cf = 0
  9930                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9931                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9932 0000080F C3                      		retn
  9933                                  
  9934                                  ;----------------------------------------------------------------------------
  9935                                  ;		disk removable routine
  9936                                  ;----------------------------------------------------------------------------
  9937                                  
  9938                                  		; al is	unit #
  9939                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9940 00000810 E8B8FC                  		call	SetDrive	; get bds for this drive
  9941                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9942 00000813 26F6452301              		test	byte [es:di+23h], 1
  9943                                  		;jnz	short x_bus_exit ; non_rem
  9944 00000818 7501                    		jnz	short non_rem	; 15/10/2022
  9945                                  		; 10/12/2022
  9946                                  		; cf = 0
  9947                                  		;clc			; CF is already ZERO here
  9948                                  					; 15/10/2022
  9949 0000081A C3                      		retn
  9950                                  ; ---------------------------------------------------------------------------
  9951                                  
  9952                                  non_rem:
  9953                                  x_bus_exit:				
  9954 0000081B B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9955                                  					; return busy status
  9956 0000081D F9                      		stc
  9957                                  dsk_ret:				
  9958 0000081E C3                      		retn
  9959                                  
  9960                                  ;----------------------------------------------------------------------------
  9961                                  ;		disk i/o routines
  9962                                  ;----------------------------------------------------------------------------
  9963                                  
  9964                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9965                                  		;mov	word [wrtverify], 103h
  9966                                  		; 19/10/2022
  9967 0000081F C706[2001]0301          		mov	word [rflag], 103h
  9968                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
  9969 00000825 EB06                    		jmp	short dsk_cl
  9970                                  ; ---------------------------------------------------------------------------
  9971                                  
  9972                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
  9973                                  		;mov	word [wrtverify], 3
  9974                                  		; 19/10/2022
  9975 00000827 C706[2001]0300          		mov	word [rflag], 3
  9976                                  		;mov	word ptr ds:rflag, 3 ; romwrite
  9977                                  
  9978                                  dsk_cl:					
  9979 0000082D E89800                  		call	diskio		; romwrite
  9980                                  ; ---------------------------------------------------------------------------
  9981                                  
  9982                                  dsk_io:					
  9983 00000830 73EC                    		jnb	short dsk_ret
  9984 00000832 E9A2F8                  		jmp	bc_err_cnt
  9985                                  ; ---------------------------------------------------------------------------
  9986                                  
  9987                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
  9988 00000835 E88B00                  		call	diskrd
  9989 00000838 EBF6                    		jmp	short dsk_io
  9990                                  
  9991                                  ; =============== S U B	R O U T	I N E =======================================
  9992                                  
  9993                                  ; 15/10/2022
  9994                                  ; 10/03/2019 - Retro DOS v4.0
  9995                                  
  9996                                  ;-----------------------------------------------------------
  9997                                  ; miscellaneous odd jump routines. 
  9998                                  ; moved out of mainline for speed.
  9999                                  
 10000                                  ; if we have a system where we have virtual drives, we need 
 10001                                  ; to prompt the user to place the correct disk in the drive.
 10002                                  ;
 10003                                  ;	assume es:di -> bds, ds:->Bios_Data
 10004                                  ;-----------------------------------------------------------
 10005                                  
 10006                                  		; 19/10/2022
 10007                                  checksingle:		
 10008 0000083A 50                      		push	ax
 10009 0000083B 53                      		push	bx
 10010 0000083C 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 10011                                  
 10012                                  ; if hard drive, cannot change disk.
 10013                                  ; if current owner of physical drive, no need to change diskette.
 10014                                  
 10015 00000840 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 10016 00000843 7573                    		jnz	short singleret
 10017 00000845 F6C310                  		test	bl, 10h		; fi_am_mult
 10018                                  					; is there a drive sharing this	physical drive?
 10019 00000848 746E                    		jz	short singleret
 10020                                  
 10021                                  
 10022                                  ; look for the previous owner of this physical drive
 10023                                  ; and reset its ownership flag.
 10024                                  
 10025 0000084A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10026                                  					; get physical drive number
 10027 0000084E 06                      		push	es		; preserve pointer to current bds
 10028 0000084F 57                      		push	di
 10029 00000850 C43E[1901]              		les	di, [start_bds] ; get first bds
 10030                                  scan_list:				
 10031 00000854 26384504                		cmp	[es:di+4], al
 10032 00000858 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 10033 0000085A B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 10034 0000085C 26845D23                		test	[es:di+23h], bl
 10035 00000860 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 10036 00000862 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
 10037 00000866 5F                      		pop	di		; restore pointer to current bds
 10038 00000867 07                      		pop	es
 10039 00000868 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
 10040                                  
 10041                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 10042                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 10043                                  ; in this case.
 10044 0000086C 803E[7A00]01            		cmp	byte [fsetowner], 1
 10045 00000871 7517                    		jnz	short not_fsetowner
 10046                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 10047 00000873 26807D0400              		cmp	byte [es:di+4], 0
 10048 00000878 753E                    		jnz	short singleret
 10049 0000087A 268A4505                		mov	al, [es:di+5]
 10050                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 10051                                  					; get the DOS drive letter
 10052 0000087E 06                      		push	es
 10053 0000087F 8E06[1A00]              		mov	es, [zeroseg]
 10054 00000883 26A20405                		mov	[es:LSTDRV], al
 10055                                  		;mov	es:504h, al	; [es:LSTDRV]
 10056                                  					; set up sdsb
 10057 00000887 07                      		pop	es		; restore bds pointer
 10058 00000888 EB2E                    		jmp	short singleret
 10059                                  ; ---------------------------------------------------------------------------
 10060                                  
 10061                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10062                                  ; we now check to see if we are in a single drive system and the application
 10063                                  ; has "cleverly" diddled the sdsb
 10064                                  
 10065                                  not_fsetowner:				
 10066 0000088A 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10067 0000088F 7517                    		jnz	short ignore_sdsb
 10068 00000891 50                      		push	ax
 10069 00000892 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10070 00000896 88C4                    		mov	ah, al
 10071 00000898 06                      		push	es
 10072 00000899 8E06[1A00]              		mov	es, [zeroseg]
 10073 0000089D 2686060405              		xchg	al, [es:LSTDRV]
 10074                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10075                                  					; then swap(curr_drv,req_drv)
 10076 000008A2 07                      		pop	es
 10077 000008A3 38C4                    		cmp	ah, al		; else
 10078 000008A5 58                      		pop	ax		; swap(curr_drv,req_drv)
 10079 000008A6 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10080                                  ignore_sdsb:				
 10081 000008A8 E85C0E                  		call	swpdsk
 10082 000008AB EB0B                    		jmp	short singleret
 10083                                  ; ---------------------------------------------------------------------------
 10084                                  
 10085                                  scan_skip:	
 10086 000008AD 26C43D                  		les	di, [es:di]			
 10087                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10088                                  					; go to	next bds
 10089 000008B0 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10090 000008B3 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10091 000008B5 F9                      		stc
 10092 000008B6 5F                      		pop	di		; restore current bds
 10093 000008B7 07                      		pop	es
 10094                                  
 10095                                  singleret:				
 10096 000008B8 5B                      		pop	bx
 10097 000008B9 58                      		pop	ax
 10098 000008BA C3                      		retn
 10099                                  
 10100                                  ; ---------------------------------------------------------------------------
 10101                                  
 10102                                  baddrive:				
 10103 000008BB B008                    		mov	al, 8		; sector not found
 10104 000008BD EB02                    		jmp	short baddrive_ret
 10105                                  ; ---------------------------------------------------------------------------
 10106                                  
 10107                                  unformatteddrive:				
 10108 000008BF B007                    		mov	al, 7		; unknown media
 10109                                  baddrive_ret:				
 10110 000008C1 F9                      		stc
 10111                                  ; ---------------------------------------------------------------------------
 10112                                  
 10113                                  ioret:		
 10114 000008C2 C3                      		retn
 10115                                  
 10116                                  ; ---------------------------------------------------------------------------
 10117                                  
 10118                                  ; 15/10/52022
 10119                                  
 10120                                  ; ---------------------------------------------------------------------------
 10121                                  ;	disk i/o handler
 10122                                  ;
 10123                                  ;	al = drive number (0-6)
 10124                                  ;	ah = media descriptor
 10125                                  ;	cx = sector count
 10126                                  ;	dx = first sector (low)
 10127                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10128                                  ;	ds = cs
 10129                                  ;	es:di = transfer address
 10130                                  ;	[rflag]=operation (2=read, 3=write)
 10131                                  ;	[verify]=1 for verify after write
 10132                                  ;
 10133                                  ;	if successful carry flag = 0
 10134                                  ;	  else cf=1 and al contains error code
 10135                                  ; ---------------------------------------------------------------------------
 10136                                  
 10137                                  diskrd:	
 10138                                  		;mov	ds:rflag, 2	; romread
 10139                                  		; 19/10/2022
 10140 000008C3 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10141                                  
 10142                                  ; =============== S U B	R O U T	I N E =======================================
 10143                                  
 10144                                  		; 19/10/2022
 10145                                  diskio:
 10146 000008C8 89FB                    		mov	bx, di		; es:bx	= transfer address
 10147 000008CA 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
 10148 000008CE E8FAFB                  		call	SetDrive
 10149 000008D1 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10150 000008D5 A2[1F01]                		mov	[medbyt], al
 10151                                  		;jcxz	short ioret
 10152 000008D8 E3E8                    		jcxz	ioret
 10153                                  
 10154                                  ; see if the media is formatted or not by checking the flags field in
 10155                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10156                                  ; go to the error exit at label unformatteddrive.
 10157                                  
 10158 000008DA 26F6452402              		test	byte [es:di+24h], 2
 10159                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10160                                  					; unformatted_media
 10161 000008DF 75DE                    		jnz	short unformatteddrive
 10162 000008E1 890E[2201]              		mov	[seccnt], cx	; save sector count
 10163 000008E5 8926[3501]              		mov	[spsav], sp	; save sp
 10164                                  
 10165                                  ; ensure that we are trying to access valid sectors on the drive
 10166                                  
 10167 000008E9 89D0                    		mov	ax, dx
 10168 000008EB 31F6                    		xor	si, si
 10169 000008ED 01CA                    		add	dx, cx
 10170                                  		;adc	si, 0
 10171                                  		; 02/09/2023 (PCDOS 7.1)
 10172 000008EF D1D6                    		rcl	si, 1
 10173 000008F1 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10174                                  					; > 32 bit sector ?
 10175 000008F6 740C                    		jz	short sanity32
 10176                                  		;cmp	si, 0
 10177                                  		; 02/09/2023
 10178 000008F8 09F6                    		or	si, si
 10179 000008FA 75BF                    		jnz	short baddrive
 10180 000008FC 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10181 00000900 77B9                    		ja	short baddrive
 10182 00000902 EB12                    		jmp	short sanityok
 10183                                  ; ---------------------------------------------------------------------------
 10184                                  
 10185                                  sanity32:				
 10186 00000904 0336[2B05]              		add	si, [start_sec_h]
 10187 00000908 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10188 0000090C 7208                    		jb	short sanityok
 10189 0000090E 77AB                    		ja	short baddrive
 10190 00000910 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10191 00000914 77A5                    		ja	short baddrive
 10192                                  
 10193                                  sanityok:				
 10194 00000916 8B16[2B05]              		mov	dx, [start_sec_h]
 10195 0000091A 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10196 0000091E 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10197                                  
 10198                                  ; now dx;ax have the physical first sector.
 10199                                  ; since the following procedures is going to destroy ax, let's
 10200                                  ; save it temporarily to saved_word.
 10201                                  
 10202 00000922 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
 10203                                  
 10204                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10205                                  ; will do it because we will skip the set up stuff with hard disks.
 10206                                  
 10207 00000925 06                      		push	es
 10208                                  		;mov	es, [zeroseg]
 10209                                  		; 02/09/2023
 10210 00000926 31F6                    		xor	si, si ; 0
 10211 00000928 8EC6                    		mov	es, si
 10212 0000092A 26C4367800              		les	si, [es:DSKADR]
 10213                                  		;les	si, es:78h	; [es:DSKADR]
 10214                                  					; current disk parm table
 10215 0000092F 8936[2D01]              		mov	[dpt], si
 10216 00000933 8C06[2F01]              		mov	[dpt+2], es
 10217 00000937 07                      		pop	es
 10218 00000938 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10219                                  					; fnon_removable
 10220 0000093D 7510                    		jnz	short skip_setup
 10221 0000093F E8F8FE                  		call	checksingle
 10222                                  
 10223                                  ; check to see if we have previously noted a change line. the routine
 10224                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10225                                  ; the proper error code.
 10226                                  
 10227 00000942 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10228 00000947 7403                    		jz	short diskio_nochangeline ; brif not
 10229 00000949 E8890E                  		call	checklatchio	; will do a sneaky pop stack return
 10230                                  					; if a disk error occurs
 10231                                  diskio_nochangeline:			
 10232 0000094C E84700                  		call	iosetup		; set up tables	and variables for i/o
 10233                                  
 10234                                  ; now the settle values are correct for the following code
 10235                                  
 10236                                  skip_setup:
 10237                                  
 10238                                  ; 32 bit sector calculation.
 10239                                  ; dx:[saved_word] = starting sector number.
 10240                                  				
 10241 0000094F 89D0                    		mov	ax, dx
 10242 00000951 31D2                    		xor	dx, dx
 10243                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10244                                  					 ; divide by sec per track
 10245                                  		; 02/09/2023
 10246 00000953 268B4D13                		mov	cx, [es:di+13h]
 10247 00000957 F7F1                    		div	cx
 10248 00000959 A3[2905]                		mov	[temp_h], ax
 10249 0000095C A1[2D05]                		mov	ax, [saved_word]
 10250 0000095F F7F1                    		div	cx ; 02/09/2023
 10251                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10252                                  					; now, [temp_h]:ax = track #, dx = sector
 10253                                  		;inc	dl		; sector number	is 1 based.
 10254                                  		; 18/12/2022
 10255 00000961 42                      		inc	dx
 10256 00000962 8816[3101]              		mov	[cursec], dl	; save current sector
 10257 00000966 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10258                                  					; get number of	heads
 10259 0000096A 50                      		push	ax
 10260 0000096B 31D2                    		xor	dx, dx
 10261 0000096D A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10262 00000970 F7F1                    		div	cx
 10263 00000972 A3[2905]                		mov	[temp_h], ax
 10264 00000975 58                      		pop	ax
 10265 00000976 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10266 00000978 833E[2905]00            		cmp	word [temp_h], 0
 10267 0000097D 7714                    		ja	short baddrive_brdg
 10268 0000097F 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10269 00000982 770F                    		ja	short baddrive_brdg
 10270 00000984 8816[3201]              		mov	[curhd], dl	; save current head
 10271 00000988 A3[3301]                		mov	[curtrk], ax	; save current track
 10272                                  
 10273                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10274                                  ; violations here. not true. we perform the operation as if everything is
 10275                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10276                                  
 10277 0000098B A1[2201]                		mov	ax, [seccnt]
 10278 0000098E E88400                  		call	block		; (cas - call/ret)
 10279                                  		;call	done
 10280                                  		;retn
 10281                                  		; 18/12/2022
 10282 00000991 EB4B                    		jmp	done
 10283                                  
 10284                                  ; ---------------------------------------------------------------------------
 10285                                  
 10286                                  baddrive_brdg:				
 10287 00000993 E925FF                  		jmp	baddrive
 10288                                  
 10289                                  ; =============== S U B	R O U T	I N E =======================================
 10290                                  
 10291                                  ;--------------------------------------------------------------
 10292                                  ; set the drive-last-accessed flag for diskette only. 
 10293                                  ; we know that the hard disk will not be removed.
 10294                                  ; es:di -> current bds.
 10295                                  ; ds -> Bios_Data
 10296                                  ; ax,cx,si are destroyed.
 10297                                  ;--------------------------------------------------------------
 10298                                  
 10299                                  		; 19/10/2022
 10300                                  iosetup:	
 10301 00000996 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10302 0000099A A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10303                                  
 10304                                  ; determine proper head settle values
 10305                                  
 10306 0000099D 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10307 000009A2 7539                    		jnz	short skip_dpt_setting
 10308 000009A4 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10309 000009A7 1E                      		push	ds
 10310 000009A8 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10311 000009AC 884404                  		mov	[si+4],	al
 10312 000009AF 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10313 000009B2 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10314 000009B5 1F                      		pop	ds
 10315 000009B6 A2[2601]                		mov	[motorstartup], al
 10316 000009B9 8826[2B01]              		mov	[save_eot], ah
 10317                                  
 10318                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10319                                  ; motor start time to 4. this checking for every i/o is going to affect
 10320                                  ; performance across the board, but is necessary!!
 10321                                  
 10322 000009BD 1E                      		push	ds
 10323 000009BE C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10324 000009C2 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10325                                  					; ffSmall
 10326 000009C7 7505                    		jnz	short motor_start_ok
 10327 000009C9 B004                    		mov	al, 4
 10328 000009CB 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10329                                  motor_start_ok:
 10330                                  
 10331                                  ; ds:si now points to disk parameter table.
 10332                                  ; get current settle and set fast settle
 10333                                  				
 10334                                  		;xor	al, al
 10335                                  		;inc	al		; ibm wants fast settle	to be 1
 10336                                  		; 18/12/2022
 10337 000009CE 31C0                    		xor	ax, ax
 10338 000009D0 40                      		inc	ax
 10339 000009D1 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10340                                  					; get settle and set up	for fast
 10341 000009D4 1F                      		pop	ds
 10342 000009D5 A2[2701]                		mov	[settlecurrent], al
 10343 000009D8 B00F                    		mov	al, 15		; NORMSETTLE
 10344                                  					; someone has diddled the settle
 10345 000009DA A2[2801]                		mov	[settleslow], al
 10346                                  skip_dpt_setting:			
 10347 000009DD C3                      		retn
 10348                                  
 10349                                  ; =============== S U B	R O U T	I N E =======================================
 10350                                  
 10351                                  ;--------------------------------------------------------------
 10352                                  ; set time of last access, and reset default values in the dpt.
 10353                                  ;
 10354                                  ;	  note: trashes (at least) si
 10355                                  ;--------------------------------------------------------------
 10356                                  
 10357                                  		; 19/10/2022
 10358                                  done:
 10359 000009DE 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10360                                  					; fnon_removable
 10361 000009E3 752F                    		jnz	short ddbx	; do not set for non-removable media
 10362 000009E5 E8FD01                  		call	set_tim
 10363                                  ;diddleback:
 10364                                  ; 09/12/2022
 10365                                  diddle_back:				
 10366 000009E8 9C                      		pushf
 10367 000009E9 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10368 000009EE 7523                    		jnz	short nodiddleback
 10369 000009F0 50                      		push	ax
 10370 000009F1 06                      		push	es
 10371 000009F2 C436[2D01]              		les	si, [dpt]
 10372 000009F6 A0[2B01]                		mov	al, [save_eot]
 10373 000009F9 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10374 000009FD A0[2701]                		mov	al, [settlecurrent]
 10375 00000A00 8A26[2601]              		mov	ah, [motorstartup]
 10376 00000A04 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10377 00000A08 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10378 00000A0D 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10379 00000A11 07                      		pop	es
 10380 00000A12 58                      		pop	ax
 10381                                  nodiddleback:				
 10382 00000A13 9D                      		popf
 10383                                  ddbx:					
 10384 00000A14 C3                      		retn
 10385                                  
 10386                                  ; =============== S U B	R O U T	I N E =======================================
 10387                                  
 10388                                  ;--------------------------------------------------------------
 10389                                  ;read the number of sectors specified in ax, 
 10390                                  ;handling track boundaries
 10391                                  ;es:di -> bds for this drive
 10392                                  ;--------------------------------------------------------------
 10393                                  
 10394                                  		 ; 19/10/2022
 10395                                  block:	
 10396 00000A15 09C0                    		or	ax, ax
 10397 00000A17 74FB                    		jz	short ddbx
 10398 00000A19 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10399                                  					; fnon_removable
 10400 00000A1E 740D                    		jz	short block_floppy ;
 10401                                  
 10402                                  ; check	to see if multi	track operation	is allowed. if not
 10403                                  ; we have to go	to the block_floppy below to break up the operation.
 10404                                  
 10405 00000A20 F606[2F05]80            		test	byte [multrk_flag], 80h
 10406                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10407 00000A25 7406                    		jz	short block_floppy
 10408 00000A27 E82900                  		call	Disk
 10409 00000A2A 31C0                    		xor	ax, ax
 10410 00000A2C C3                      		retn
 10411                                  ; ---------------------------------------------------------------------------
 10412                                  
 10413                                  block_floppy:
 10414                                  
 10415                                  ; read at most 1 track worth. perform minimization at sector / track
 10416                                  				
 10417 00000A2D 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10418 00000A31 FEC1                    		inc	cl
 10419 00000A33 2A0E[3101]              		sub	cl, [cursec]
 10420 00000A37 30ED                    		xor	ch, ch
 10421 00000A39 39C8                    		cmp	ax, cx
 10422 00000A3B 7302                    		jnb	short gotmin
 10423 00000A3D 89C1                    		mov	cx, ax
 10424                                  
 10425                                  gotmin:
 10426                                  
 10427                                  ; ax is the requested number of sectors to read
 10428                                  ; cx is the number that we can do on this track
 10429                                  					
 10430 00000A3F 50                      		push	ax
 10431 00000A40 51                      		push	cx
 10432 00000A41 89C8                    		mov	ax, cx
 10433 00000A43 E80D00                  		call	Disk
 10434 00000A46 59                      		pop	cx
 10435 00000A47 58                      		pop	ax
 10436                                  
 10437                                  ; cx is the number of sectors just transferred
 10438                                  
 10439 00000A48 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10440 00000A4A D0E1                    		shl	cl, 1
 10441 00000A4C 00CF                    		add	bh, cl		; adjust transfer address
 10442 00000A4E EBC5                    		jmp	short block
 10443                                  dskerr_brdg:				
 10444 00000A50 E9EC00                  		jmp	dskerr
 10445                                  
 10446                                  ; =============== S U B	R O U T	I N E =======================================
 10447                                  
 10448                                  ; 15/10/2022
 10449                                  
 10450                                  ;--------------------------------------------------------------
 10451                                  ;perform disk i/o with retries
 10452                                  ; al = number of sectors (1-8, all on one track)
 10453                                  ; es:di point to drive parameters
 10454                                  ; xfer_seg:bx = transfer address 
 10455                                  ;		(must not cross a 64k physical boundary)
 10456                                  ; [rflag] = 2 if read, 3 if write
 10457                                  ; [verify] = 0 for normal, 1 for verify after write
 10458                                  ;--------------------------------------------------------------
 10459                                  
 10460                                  		 ; 19/10/2022
 10461                                  Disk:
 10462                                  
 10463                                  ; Check for hard disk format and
 10464                                  ; if TRUE then set max error count to 2
 10465                                  
 10466 00000A53 BD0500                  		mov	bp, 5		; MAXERR
 10467                                  					; set up retry count
 10468 00000A56 26F6452301              		test	byte [es:di+23h], 1	;
 10469                                  					; [es:di+BDS.flags], fnon_removable
 10470 00000A5B 7408                    		jz	short GetRdWrInd
 10471 00000A5D 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10472 00000A60 7403                    		jz	short GetRdWrInd
 10473 00000A62 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10474                                  GetRdWrInd:				
 10475 00000A65 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10476 00000A69 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10477 00000A6D 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10478                                  ;retry:
 10479                                  ; 09/12/2022
 10480                                  _retry:					
 10481 00000A71 50                      		push	ax
 10482 00000A72 8B16[3301]              		mov	dx, [curtrk]
 10483 00000A76 26F6452301              		test	byte [es:di+23h], 1
 10484 00000A7B 740B                    		jz	short disk_not_mini
 10485 00000A7D 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10486                                  					; is this a mini disk? ((logical dos partition))
 10487 00000A82 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10488 00000A84 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10489                                  					; add hidden trks.
 10490                                  disk_not_mini:				
 10491 00000A88 D0CE                    		ror	dh, 1
 10492 00000A8A D0CE                    		ror	dh, 1
 10493 00000A8C 0A36[3101]              		or	dh, [cursec]
 10494 00000A90 89D1                    		mov	cx, dx
 10495 00000A92 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10496 00000A94 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10497 00000A98 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10498                                  					; [es:di+BDS.drivenum]
 10499 00000A9C 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10500 00000AA1 7413                    		jz	short do_fast	; hard files use fast speed
 10501                                  
 10502                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10503                                  ; this helps when we have just done a reset disk operation and the head has
 10504                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10505                                  
 10506 00000AA3 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10507 00000AA8 740A                    		jz	short do_writej
 10508 00000AAA 80FC02                  		cmp	ah, 2		; romread
 10509 00000AAD 7407                    		jz	short do_fast
 10510 00000AAF 80FC04                  		cmp	ah, 4		; romverify
 10511 00000AB2 7402                    		jz	short do_fast
 10512                                  do_writej:	
 10513                                  
 10514                                  ; reads always fast, unless we have just done a disk reset operation
 10515                                  			
 10516 00000AB4 EB56                    		jmp	short do_write	; reads	always fast
 10517                                  ; ---------------------------------------------------------------------------
 10518                                  
 10519                                  do_fast:				
 10520 00000AB6 E8FC00                  		call	fastspeed	; change settle	mode
 10521                                  
 10522                                  testerr:				
 10523 00000AB9 7295                    		jb	short dskerr_brdg
 10524                                  
 10525                                  ; set drive and track of last access
 10526                                  
 10527 00000ABB 8816[7600]              		mov	[step_drv], dl
 10528 00000ABF 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10529                                  no_set:
 10530                                  		;cmp	word [wrtverify], 103h
 10531 00000AC3 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10532 00000AC9 7452                    		jz	short doverify
 10533                                  noverify:				
 10534 00000ACB 58                      		pop	ax
 10535                                  
 10536                                  ; check the flags word in the bds to see if the drive is non removable
 10537                                  ; if not we needn't do anything special
 10538                                  ; if it is a hard disk then check to see if multi-track operation
 10539                                  ; is specified. if specified we don't have to calculate for the next
 10540                                  ; track since we are already done. so we can go to the exit of this routine.
 10541                                  
 10542 00000ACC 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10543                                  					; fnon_removable
 10544 00000AD1 7407                    		jz	short its_removable
 10545 00000AD3 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10546 00000AD8 7530                    		jnz	short disk_ret
 10547                                  its_removable:				
 10548 00000ADA 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10549 00000ADD 30E4                    		xor	ah, ah
 10550 00000ADF 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10551 00000AE3 00C1                    		add	cl, al
 10552 00000AE5 880E[3101]              		mov	[cursec], cl
 10553 00000AE9 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10554                                  					; see if sector/track limit reached
 10555 00000AED 761B                    		jbe	short disk_ret
 10556 00000AEF C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10557 00000AF4 8A36[3201]              		mov	dh, [curhd]
 10558 00000AF8 FEC6                    		inc	dh
 10559 00000AFA 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10560 00000AFE 7206                    		jb	short noxor
 10561 00000B00 30F6                    		xor	dh, dh
 10562 00000B02 FF06[3301]              		inc	word [curtrk]
 10563                                  noxor:					
 10564 00000B06 8836[3201]              		mov	[curhd], dh
 10565                                  disk_ret:				
 10566 00000B0A F8                      		clc
 10567 00000B0B C3                      		retn
 10568                                  ; ---------------------------------------------------------------------------
 10569                                  
 10570                                  ; 15/10/2022
 10571                                  
 10572                                  ;--------------------------------------------------------------
 10573                                  ; the request is for write. determine if we are talking about
 10574                                  ; the same track and drive. if so, use the fast speed.
 10575                                  ;--------------------------------------------------------------
 10576                                  
 10577                                  do_write:				
 10578 00000B0C 3A16[7600]              		cmp	dl, [step_drv]
 10579 00000B10 7506                    		jnz	short do_norm	; we have changed drives
 10580 00000B12 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10581 00000B16 749E                    		jz	short do_fast	; we are still on the same track
 10582                                  
 10583                                  do_norm:				
 10584 00000B18 E87500                  		call	normspeed
 10585 00000B1B EB9C                    		jmp	short testerr
 10586                                  ; ---------------------------------------------------------------------------
 10587                                  
 10588                                  ;--------------------------------------------------------------
 10589                                  ; we have a verify request also. get state info and go verify
 10590                                  ;--------------------------------------------------------------
 10591                                  
 10592                                  doverify:				
 10593 00000B1D 58                      		pop	ax
 10594 00000B1E 50                      		push	ax
 10595 00000B1F B404                    		mov	ah, 4
 10596 00000B21 E89100                  		call	fastspeed
 10597 00000B24 73A5                    		jnb	short noverify
 10598                                  
 10599                                  ; check the error returned in ah to see if it is a soft ecc error.
 10600                                  ; if it is not we needn't do anything special. if it is a soft
 10601                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10602                                  ; this retry count becomes 0 then we just ignore the error and go to
 10603                                  ; no_verify but if we can still try then we call the routine to reset
 10604                                  ; the disk and go to dskerr1 to retry the operation.
 10605                                  
 10606 00000B26 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10607 00000B29 750B                    		jnz	short not_softecc_err
 10608 00000B2B FF0E[3405]              		dec	word [soft_ecc_cnt]
 10609 00000B2F 749A                    		jz	short noverify	; no more retry
 10610 00000B31 E83705                  		call	ResetDisk	; reset	disk
 10611 00000B34 EB3E                    		jmp	short dskerr1	; retry
 10612                                  ; ---------------------------------------------------------------------------
 10613                                  
 10614                                  not_softecc_err:			; other error.			
 10615 00000B36 E83205                  		call	ResetDisk
 10616 00000B39 FF0E[3205]              		dec	word [vretry_cnt]
 10617 00000B3D EB1C                    		jmp	short dskerr0
 10618                                  ; ---------------------------------------------------------------------------
 10619                                  
 10620                                  ;--------------------------------------------------------------
 10621                                  ; need to special case the change-line error ah=06h.
 10622                                  ; if we get this, we need to return it.
 10623                                  ;--------------------------------------------------------------
 10624                                  
 10625                                  dskerr:					
 10626 00000B3F 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10627 00000B44 7403                    		jz	short dskerr_nochangeline ; brif not
 10628 00000B46 E8FE0C                  		call	checkio
 10629                                  dskerr_nochangeline:			
 10630 00000B49 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10631 00000B4E 7508                    		jnz	short dochkagain ; no more retry.
 10632 00000B50 BD0100                  		mov	bp, 1
 10633 00000B53 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10634                                  dochkagain:				
 10635 00000B58 E8AA00                  		call	again
 10636                                  dskerr0:				
 10637 00000B5B 7420                    		jz	short harderr
 10638 00000B5D 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10639                                  					; fnon_removable
 10640 00000B62 7505                    		jnz	short skip_timeout_chk
 10641 00000B64 80FC80                  		cmp	ah, 80h		; timeout?
 10642 00000B67 7414                    		jz	short harderr
 10643                                  skip_timeout_chk:			
 10644 00000B69 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10645 00000B6C 740A                    		jz	short write_fault_err ;	then, don't retry.
 10646 00000B6E C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10647                                  					; set soft_ecc_cnt back	to maxerr
 10648                                  dskerr1:				
 10649 00000B74 58                      		pop	ax		; restore sector count
 10650                                  		;jmp	retry
 10651                                  		; 09/12/2022
 10652 00000B75 E9F9FE                  		jmp	_retry
 10653                                  ; ---------------------------------------------------------------------------
 10654                                  
 10655                                  write_fault_err:			
 10656 00000B78 BD0100                  		mov	bp, 1		; just retry only once
 10657                                  					; for write fault error.
 10658 00000B7B EBF7                    		jmp	short dskerr1
 10659                                  
 10660                                  		; fall into harderr
 10661                                  ; ---------------------------------------------------------------------------
 10662                                  
 10663                                  ; entry point for routines that call maperror themselves
 10664                                  
 10665                                  harderr:				
 10666 00000B7D E84D00                  		call	maperror
 10667                                  harderr2:				
 10668 00000B80 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10669                                  					; force a media check through rom
 10670 00000B85 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10671 00000B89 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10672                                  
 10673                                  ; since we are performing a non-local goto, restore the disk parameters
 10674                                  
 10675                                  		;jmp	diddleback
 10676                                  		; 09/12/2022
 10677 00000B8D E958FE                  		jmp	diddle_back
 10678                                  
 10679                                  ; =============== S U B	R O U T	I N E =======================================
 10680                                  
 10681                                  ; change settle value from settlecurrent to whatever is appropriate
 10682                                  ; note that this routine is never called for a fixed disk.
 10683                                  
 10684                                  		; 19/10/2022
 10685                                  normspeed:
 10686 00000B90 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10687 00000B95 751E                    		jnz	short fastspeed
 10688 00000B97 06                      		push	es
 10689 00000B98 50                      		push	ax
 10690 00000B99 A0[2801]                		mov	al, [settleslow]
 10691 00000B9C C436[2D01]              		les	si, [dpt]	; current disk parm table
 10692 00000BA0 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10693 00000BA4 58                      		pop	ax
 10694 00000BA5 07                      		pop	es
 10695 00000BA6 E80C00                  		call	fastspeed
 10696 00000BA9 06                      		push	es
 10697 00000BAA C436[2D01]              		les	si, [dpt]
 10698 00000BAE 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10699                                  					; 1 is fast settle value
 10700 00000BB3 07                      		pop	es
 10701 00000BB4 C3                      		retn
 10702                                  
 10703                                  ; =============== S U B	R O U T	I N E =======================================
 10704                                  
 10705                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10706                                  ; partition is > 16 bits, then always return drive not ready.
 10707                                  
 10708                                  fastspeed:		
 10709 00000BB5 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10710                                  					; ftoobig
 10711 00000BBA 750D                    		jnz	short notready
 10712 00000BBC 06                      		push	es
 10713 00000BBD 8E06[3705]              		mov	es, [xfer_seg]
 10714 00000BC1 CD13                    		int	13h		; DISK -
 10715 00000BC3 8C06[3705]              		mov	[xfer_seg], es
 10716 00000BC7 07                      		pop	es
 10717 00000BC8 C3                      		retn
 10718                                  ; ---------------------------------------------------------------------------
 10719                                  
 10720                                  notready:				
 10721 00000BC9 F9                      		stc
 10722 00000BCA B480                    		mov	ah, 80h
 10723 00000BCC C3                      		retn
 10724                                  
 10725                                  ; =============== S U B	R O U T	I N E =======================================
 10726                                  
 10727                                  ; map error returned by rom in ah into corresponding code to be returned to
 10728                                  ; dos in al. trashes di. guaranteed to set carry.
 10729                                  
 10730                                  maperror:	
 10731 00000BCD 51                      		push	cx
 10732 00000BCE 06                      		push	es
 10733 00000BCF 1E                      		push	ds		; set es=Bios_Data
 10734 00000BD0 07                      		pop	es
 10735 00000BD1 88E0                    		mov	al, ah		; put error code in al
 10736 00000BD3 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10737 00000BD6 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10738                                  					; number of possible error conditions
 10739 00000BD9 BF[3C01]                		mov	di, errin	; point to error conditions
 10740 00000BDC F2AE                    		repne scasb
 10741                                  		; 10/12/2022
 10742 00000BDE 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10743                                  					; get translation
 10744                                  		; 19/10/2022 - Temporary ! 
 10745                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10746 00000BE1 07                      		pop	es
 10747 00000BE2 59                      		pop	cx
 10748 00000BE3 F9                      		stc			; flag error condition
 10749 00000BE4 C3                      		retn
 10750                                  
 10751                                  ; =============== S U B	R O U T	I N E =======================================
 10752                                  
 10753                                  ; set the time of last access for this drive.
 10754                                  ; this is done only for removable media. es:di -> bds
 10755                                  
 10756                                  set_tim:		
 10757 00000BE5 50                      		push	ax
 10758 00000BE6 E891F8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10759                                  
 10760                                  ; we have the new time. if we see that the time has passed,
 10761                                  ; then we reset the threshold counter...
 10762                                  
 10763 00000BE9 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10764 00000BED 7506                    		jnz	short setaccess
 10765 00000BEF 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10766                                  		;jz	short done_set
 10767                                  		; 12/12/2022
 10768 00000BF3 740E                    		je	short done_set2
 10769                                  setaccess:				
 10770 00000BF5 C606[1D01]00            		mov	byte [accesscount], 0
 10771 00000BFA 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10772 00000BFE 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10773                                  done_set:				
 10774 00000C02 F8                      		clc
 10775                                  done_set2:		; 12/12/2022
 10776 00000C03 58                      		pop	ax
 10777 00000C04 C3                      		retn
 10778                                  
 10779                                  ; =============== S U B	R O U T	I N E =======================================
 10780                                  
 10781                                  ; this routine is called if an error occurs while formatting or verifying.
 10782                                  ; it resets the drive,and decrements the retry count.
 10783                                  ; on entry - ds:di - points to bds for the drive
 10784                                  ;	     bp    - contains retry count
 10785                                  ; on exit    flags indicate result of decrementing retry count
 10786                                  
 10787                                  again:	
 10788 00000C05 E86304                  		call	ResetDisk
 10789 00000C08 80FC06                  		cmp	ah, 6
 10790 00000C0B 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10791                                  					; do not decrement retry count.
 10792 00000C0D 4D                      		dec	bp		; decrement retry count
 10793 00000C0E C3                      		retn
 10794                                  ; ---------------------------------------------------------------------------
 10795                                  
 10796                                  dont_dec_retry_count:			
 10797 00000C0F 08E4                    		or	ah, ah
 10798 00000C11 C3                      		retn
 10799                                  
 10800                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10801                                  
 10802                                  ;----------------------------------------------------------------------------
 10803                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10804                                  ;----------------------------------------------------------------------------
 10805                                  ; 11/03/2019 - Retro DOS v4.0
 10806                                  
 10807                                  ; 18/03/2019
 10808                                  
 10809                                  ; ==========================================================================
 10810                                  ;
 10811                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10812                                  ;
 10813                                  ;      This function is intended to give the user to control the
 10814                                  ;      bds table flags of unformatted_media bit.
 10815                                  ;      GetAccessFlag will show the status -
 10816                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10817                                  ;						1 disk i/o allowed
 10818                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10819                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10820                                  ;						1 disallow disk i/o
 10821                                  ; ==========================================================================
 10822                                  
 10823                                  		; generic ioctl dispatch tables
 10824                                  
 10825                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10826                                  
 10827                                  ; ---------------------------------------------------------------------------
 10828 00000C12 00                      		db 0
 10829                                  
 10830                                  ; 09/12/2022 
 10831                                  %if 0
 10832                                  
 10833                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10834                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10835                                  		dw 0EE8h	; 61h	; ReadTrack
 10836                                  		dw 0E86h	; 62h	; VerifyTrack
 10837                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10838                                  		dw 0CA3h		; Cmd_Error_Proc
 10839                                  		dw 0CA3h		; Cmd_Error_Proc
 10840                                  		dw 119Ah	; 66h	; GetMediaId
 10841                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10842                                  		dw 12C1h	; 68h	; SenseMediaType
 10843                                  
 10844                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10845                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10846                                  		dw 0EEFh	; 41h	; WriteTrack
 10847                                  		dw 0DC1h	; 42h	; FormatTrack
 10848                                  		dw 0CA3h		; Cmd_Error_Proc
 10849                                  		dw 0CA3h		; Cmd_Error_Proc
 10850                                  		dw 0CA3h		; Cmd_Error_Proc
 10851                                  		dw 11D2h	; 46h	; SetMediaId
 10852                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10853                                  
 10854                                  %endif
 10855                                  
 10856                                  		; 09/12/2022
 10857 00000C13 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10858 00000C14 [7E0C]                  		dw GetDeviceParameters	; 60h
 10859 00000C16 [C00E]                  		dw ReadTrack		; 61h
 10860 00000C18 [600E]                  		dw VerifyTrack		; 62h
 10861 00000C1A [7A0C]                  		dw Cmd_Error_Proc
 10862 00000C1C [7A0C]                  		dw Cmd_Error_Proc
 10863 00000C1E [7A0C]                  		dw Cmd_Error_Proc
 10864 00000C20 [4A11]                  		dw GetMediaId		; 66h
 10865 00000C22 [1612]                  		dw GetAccessFlag	; 67h ; unpublished function
 10866 00000C24 [6812]                  		dw SenseMediaType	; 68h
 10867                                  
 10868 00000C26 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10869 00000C27 [C90C]                  		dw SetDeviceParameters	; 40h
 10870 00000C29 [C70E]                  		dw WriteTrack		; 41h
 10871 00000C2B [9C0D]                  		dw FormatTrack		; 42h
 10872 00000C2D [7A0C]                  		dw Cmd_Error_Proc
 10873 00000C2F [7A0C]                  		dw Cmd_Error_Proc
 10874 00000C31 [7A0C]                  		dw Cmd_Error_Proc
 10875 00000C33 [8011]                  		dw SetMediaId		; 46h
 10876 00000C35 [2C12]                  		dw SetAccessFlag	; 47h ; unpublished function
 10877                                  
 10878                                  ; ==========================================================================
 10879                                  ; IOC_DC_Table
 10880                                  ;
 10881                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10882                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10883                                  ; Added for 5.00
 10884                                  ; ==========================================================================
 10885                                  
 10886 00000C37 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10887 00000C38 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10888 00000C39 61                      		db 61h			; READ_TRACK
 10889 00000C3A 41                      		db 41h			; WRITE_TRACK
 10890 00000C3B 62                      		db 62h			; VERIFY_TRACK
 10891 00000C3C 42                      		db 42h			; FORMAT_TRACK
 10892 00000C3D 66                      		db 66h			; GET_MEDIA_ID
 10893 00000C3E 46                      		db 46h			; SET_MEDIA_ID
 10894 00000C3F 67                      		db 67h			; GET_ACCESS_FLAG
 10895 00000C40 47                      		db 47h			; SET_ACCESS_FLAG
 10896 00000C41 68                      		db 68h			; SENSE_MEDIA_TYPE
 10897                                  
 10898                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10899                                  
 10900                                  ; ---------------------------------------------------------------------------
 10901                                  
 10902                                  ; 16/10/2022
 10903                                  
 10904                                  ; ==========================================================================
 10905                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10906                                  ;
 10907                                  ;    input: AL contains logical drive
 10908                                  ;
 10909                                  ;	functions are dispatched through a call. On return, carry indicates
 10910                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10911                                  ;	subfunctions.
 10912                                  ;
 10913                                  ; ==========================================================================
 10914                                  
 10915                                  ; 11/03/2019
 10916                                  		; 19/10/2022
 10917                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10918 00000C42 E886F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10919 00000C45 06                      		push	es
 10920 00000C46 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10921 00000C4A 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10922                                  					; RAWIO
 10923 00000C4F 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10924 00000C53 07                      		pop	es
 10925 00000C54 7525                    		jnz	short IoctlFuncErr
 10926                                  
 10927                                  		; cas note: Could do the above two blocks in reverse order.
 10928                                  		; Would have to preserve al for SetDrive
 10929                                  
 10930                                  		; 10/12/2022
 10931 00000C56 BE[130C]                		mov	si, IoReadJumpTable
 10932                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10933                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10934 00000C59 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10935 00000C5B 7503                    		jnz	short NotGenericWrite ; function is a read.
 10936                                  		; 10/12/2022
 10937 00000C5D BE[260C]                		mov	si, IoWriteJumpTable
 10938                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10939                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10940                                  NotGenericWrite:			
 10941 00000C60 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10942 00000C62 2C40                    		sub	al, 40h		; offset for base function
 10943 00000C64 2E3A04                  		cmp	al, [cs:si]
 10944 00000C67 7712                    		ja	short IoctlFuncErr
 10945 00000C69 98                      		cbw
 10946 00000C6A D1E0                    		shl	ax, 1
 10947 00000C6C 46                      		inc	si
 10948 00000C6D 01C6                    		add	si, ax
 10949 00000C6F 2EFF14                  		call	near [cs:si]
 10950                                  		;call	word ptr cs:[si]
 10951 00000C72 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10952                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10953                                  					; 2C7h:30h = 70h:25A0h
 10954 00000C77 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10955 00000C79 C3                      		retn			; Pass carry flag through to exit code
 10956                                  ; ---------------------------------------------------------------------------
 10957                                  
 10958                                  		; Cmd_Error_Proc is called as a procedure and also use
 10959                                  		; as a fall through from above
 10960                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10961 00000C7A 5A                      		pop	dx
 10962                                  
 10963                                  IoctlFuncErr:				
 10964 00000C7B E957F4                  		jmp	bc_cmderr
 10965                                  ; ---------------------------------------------------------------------------
 10966                                  
 10967                                  ; 16/10/2022
 10968                                  
 10969                                  ; ==========================================================================
 10970                                  ;**	GetDeviceParameters:
 10971                                  ;
 10972                                  ;	GetDeviceParameters implements the generic ioctl function:
 10973                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 10974                                  ;
 10975                                  ;	ENTRY	(ES:di) = BDS for drive
 10976                                  ;		PtrSav = long pointer to request header
 10977                                  ;	EXIT	??? BUGBUG
 10978                                  ;	USES	??? BUGBUG
 10979                                  ; ==========================================================================
 10980                                  
 10981                                  		; 19/10/2022
 10982                                  GetDeviceParameters:
 10983                                  		; Copy info from bds to the device parameters packet
 10984                                  
 10985 00000C7E C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10986 00000C82 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10987                                  					; (DS:BX) = return buffer
 10988 00000C85 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 10989 00000C89 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10990 00000C8C 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 10991 00000C90 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 10992                                  					; Mask off other bits
 10993 00000C93 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10994 00000C96 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 10995 00000C9A 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10996 00000C9D 30C0                    		xor	al, al		; Set media type to default
 10997 00000C9F 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10998                                  					
 10999                                  		; copy recommended bpb
 11000 00000CA2 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 11001 00000CA5 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11002                                  					; BUILD_DEVICE_BPB
 11003 00000CA8 7412                    		jz	short UseBpbPresent
 11004 00000CAA 1E                      		push	ds		; Save request packet segment
 11005 00000CAB 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11006                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11007                                  					; 2C7h:30h = 70h:25A0h
 11008                                  					; Point back to Bios_Data
 11009 00000CB0 E887FB                  		call	checksingle
 11010 00000CB3 E842F9                  		call	GetBp		; Build	the bpb	from scratch
 11011 00000CB6 1F                      		pop	ds		; Restore request packet segment
 11012 00000CB7 720F                    		jb	short GetParmRet
 11013 00000CB9 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 11014                                  					; Use this subfield of bds instead
 11015                                  UseBpbPresent:				
 11016 00000CBC 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11017                                  					; This is where	the result goes
 11018 00000CBF B91900                  		mov	cx, 25		; A_BPB.size - 6
 11019                                  					; For now use 'small' bpb
 11020 00000CC2 1E                      		push	ds		; reverse segments for copy
 11021 00000CC3 06                      		push	es
 11022 00000CC4 1F                      		pop	ds
 11023 00000CC5 07                      		pop	es
 11024 00000CC6 F3A4                    		rep movsb
 11025                                  		
 11026                                  		; 12/12/2022
 11027                                  		; cf=0 (test instruction -above- resets cf) 	
 11028                                  		;clc
 11029                                  GetParmRet:				
 11030 00000CC8 C3                      		retn
 11031                                  ; ---------------------------------------------------------------------------
 11032                                  
 11033                                  ; 17/10/2022
 11034                                  ; 16/10/2022
 11035                                  
 11036                                  ; ==========================================================================
 11037                                  ; SetDeviceParameters:
 11038                                  ;
 11039                                  ; input: ES:di points to bds for drive
 11040                                  ; ==========================================================================
 11041                                  
 11042                                  		; 19/10/2022
 11043                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 11044 00000CC9 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11045 00000CCD C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11046 00000CD0 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 11047                                  					; fchanged_by_format|fchanged
 11048 00000CD6 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11049                                  					; ONLY_SET_TRACKLAYOUT
 11050 00000CD9 7579                    		jnz	short setTrackTable
 11051 00000CDB 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11052 00000CDE 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 11053 00000CE2 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11054 00000CE5 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 11055 00000CE9 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11056 00000CEC 1E                      		push	ds
 11057                                  		; 17/10/2022
 11058 00000CED 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11059                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11060                                  					; 2C7h:30h = 70h:25A0h
 11061                                  		;cmp	byte [fhave96], 0
 11062 00000CF2 803E[7700]00            		cmp	byte [fhave96], 0
 11063 00000CF7 1F                      		pop	ds
 11064 00000CF8 7502                    		jnz	short HaveChange ; we have changeline support
 11065                                  		; 10/12/2022
 11066 00000CFA 24FD                    		and	al, 0FDh
 11067                                  		;and	ax, 0FFFDh	; ~fchangeline
 11068                                  
 11069                                  		; Ignore all bits except non_removable and changeline
 11070                                  HaveChange:				
 11071 00000CFC 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11072 00000CFF 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11073 00000D03 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11074 00000D07 09C8                    		or	ax, cx
 11075 00000D09 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11076 00000D0D 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11077                                  					; Set media type
 11078 00000D10 1E                      		push	ds
 11079 00000D11 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11080                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11081 00000D16 A2[3706]                		mov	[mediatype], al
 11082                                  		;mov	ds:mediatype, al
 11083 00000D19 1F                      		pop	ds
 11084                                  
 11085                                  		; The media changed (maybe) so we will have to do a set dasd
 11086                                  		; the next time we format a track
 11087                                  
 11088                                  		; 10/12/2022
 11089 00000D1A 26804D2380              		or	byte [es:di+35], 80h
 11090                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11091                                  					; set_dasd_true
 11092 00000D1F 57                      		push	di		; Save bds pointer
 11093                                  
 11094                                  		; Figure out what we are supposed to do with the bpb
 11095                                  		; were we asked to install a fake bpb?
 11096                                  
 11097 00000D20 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11098                                  					; INSTALL_FAKE_BPB
 11099 00000D23 7514                    		jnz	short InstallFakeBpb
 11100                                  
 11101                                  		; were we returning a fake bpb when asked to build a bpb?
 11102                                  
 11103                                  		; 10/12/2022
 11104 00000D25 26F6452304              		test	byte [es:di+35], 4
 11105                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11106                                  					; return_fake_bpb
 11107 00000D2A 7405                    		jz	short InstallRecommendedBpb
 11108                                  
 11109                                  		; we were returning a fake bpb but we can stop now
 11110                                  
 11111                                  		; 10/12/2022
 11112 00000D2C 26806523FB              		and	byte [es:di+35], 0FBh
 11113                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11114                                  					; ~return_fake_bpb
 11115                                  InstallRecommendedBpb:			
 11116 00000D31 B91F00                  		mov	cx, 31		; A_BPB.size
 11117 00000D34 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11118 00000D37 EB0B                    		jmp	short CopyTheBpb
 11119                                  ; ---------------------------------------------------------------------------
 11120                                  
 11121                                  InstallFakeBpb:
 11122                                  		; 10/12/2022
 11123 00000D39 26804D2304              		or	byte [es:di+35], 4				
 11124                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11125                                  					; return_fake_bpb
 11126 00000D3E B91900                  		mov	cx, 25		; A_BPB.size - 6
 11127                                  					; move 'smaller' bpb
 11128 00000D41 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11129                                  
 11130                                  CopyTheBpb:				
 11131 00000D44 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11132 00000D47 F3A4                    		rep movsb
 11133 00000D49 1E                      		push	ds		; Save packet segment
 11134                                  		; 17/10/2022
 11135 00000D4A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11136                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11137                                  					; Setup	for ds -> Bios_Data
 11138 00000D4F E8CA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11139 00000D52 1F                      		pop	ds		; Restore packet segment
 11140 00000D53 5F                      		pop	di		; Restore bds pointer
 11141                                  setTrackTable:				
 11142 00000D54 8B4F26                  		mov	cx, [bx+38]
 11143 00000D57 1E                      		push	ds
 11144 00000D58 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11145 00000D5D 890E[3905]              		mov	[sectorspertrack], cx
 11146 00000D61 1F                      		pop	ds
 11147                                  		; 10/12/2022
 11148 00000D62 26806523F7              		and	byte [es:di+35], 0F7h
 11149                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11150                                  					; ~good_tracklayout
 11151 00000D67 F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11152                                  					; TRACKLAYOUT_IS_GOOD
 11153 00000D6A 7405                    		jz	short UglyTrackLayOut
 11154                                  		; 10/12/2022
 11155 00000D6C 26804D2308              		or	byte [es:di+35], 8
 11156                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11157                                  					; good_tracklayout
 11158                                  UglyTrackLayOut:			
 11159 00000D71 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11160 00000D74 7722                    		ja	short TooManyPerTrack
 11161                                  		;jcxz	short SectorInfoSaved
 11162 00000D76 E31E                    		jcxz	SectorInfoSaved	; 19/10/2022
 11163 00000D78 BF[3B05]                		mov	di, tracktable
 11164 00000D7B 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11165                                  		; 17/10/2022
 11166 00000D7E 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11167                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11168                                  					; Trash	our bds	pointer
 11169                                  StoreSectorInfo:
 11170 00000D83 47                      		inc	di
 11171 00000D84 47                      		inc	di		; Skip over cylinder and head
 11172 00000D85 AD                      		lodsw			; Get sector id
 11173 00000D86 AA                      		stosb			; Copy it
 11174 00000D87 AD                      		lodsw			; Get sector size
 11175                                  		
 11176                                  		; 02/09/2023 (PCDOS 7.1)
 11177                                  		;call	SectSizeToSectIndex
 11178 00000D88 80FC03                  		cmp	ah, 3 ; 02/09/2023
 11179                                  		;cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11180                                  					; examine upper	byte only
 11181 00000D8B 7704                    		ja	short OneK
 11182 00000D8D 88E0                    		mov	al, ah		; value	in AH is the index!
 11183 00000D8F EB02                    		jmp	short sdp_s
 11184                                  OneK:
 11185 00000D91 B003                    		mov	al, 3
 11186                                  sdp_s:
 11187 00000D93 AA                      		stosb			; Store	sector SIZE index
 11188 00000D94 E2ED                    		loop	StoreSectorInfo
 11189                                  SectorInfoSaved:
 11190 00000D96 F8                      		clc
 11191 00000D97 C3                      		retn
 11192                                  ; ---------------------------------------------------------------------------
 11193                                  
 11194                                  TooManyPerTrack:			
 11195 00000D98 B00C                    		mov	al, 0Ch
 11196 00000D9A F9                      		stc
 11197 00000D9B C3                      		retn
 11198                                  ; ---------------------------------------------------------------------------
 11199                                  
 11200                                  ; 16/10/2022
 11201                                  
 11202                                  ; ==========================================================================
 11203                                  ; FormatTrack:
 11204                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11205                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11206                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11207                                  ;
 11208                                  ; input: ES:di points to bds for drive
 11209                                  ;
 11210                                  ; output:
 11211                                  ;	for status call:
 11212                                  ;	specialfunction byte set to:
 11213                                  ;		0 - rom support + legal combination
 11214                                  ;		1 - no rom support
 11215                                  ;		2 - illegal combination
 11216                                  ;		3 - no media present
 11217                                  ;	carry cleared.
 11218                                  ;
 11219                                  ;	for format track:
 11220                                  ;		carry set if error
 11221                                  ;
 11222                                  ; ==========================================================================
 11223                                  
 11224                                  ; 16/03/2019
 11225                                  
 11226                                  		; 19/10/2022
 11227                                  FormatTrack:
 11228 00000D9C C51E[1200]              		lds	bx, [ptrsav]
 11229 00000DA0 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11230 00000DA3 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11231                                  					; STATUS_FOR_FORMAT
 11232 00000DA6 740E                    		jz	short DoFormatTrack
 11233 00000DA8 1E                      		push	ds
 11234                                  		; 17/10/2022
 11235 00000DA9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11236                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11237 00000DAE E82602                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11238 00000DB1 1F                      		pop	ds
 11239 00000DB2 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11240 00000DB4 F8                      		clc
 11241 00000DB5 C3                      		retn
 11242                                  ; ---------------------------------------------------------------------------
 11243                                  
 11244                                  DoFormatTrack:				
 11245 00000DB6 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11246                                  					; DEV_HARDDISK
 11247 00000DBB 7508                    		jnz	short DoFormatDiskette
 11248                                  		; 17/10/2022
 11249 00000DBD 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11250                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11251                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11252 00000DC2 E99B00                  		jmp	VerifyTrack
 11253                                  ; ---------------------------------------------------------------------------
 11254                                  
 11255                                  DoFormatDiskette:			
 11256 00000DC5 8B4F01                  		mov	cx, [bx+1]
 11257 00000DC8 8B5703                  		mov	dx, [bx+3]
 11258 00000DCB F60702                  		test	byte [bx], 2
 11259                                  		; 17/10/2022
 11260 00000DCE 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11261                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11262                                  					; Setup	ds-> Bios_Data for verify
 11263 00000DD3 7403                    		jz	short DoFormatDiskette_1
 11264 00000DD5 E9E300                  		jmp	VerifyTrack_Err
 11265                                  ; ---------------------------------------------------------------------------
 11266                                  
 11267                                  DoFormatDiskette_1:			
 11268 00000DD8 E8FC01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11269 00000DDB 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11270 00000DDD 7406                    		jz	short NeedToSetDasd ; Old rom
 11271 00000DDF 3C03                    		cmp	al, 3		; Time out error?
 11272 00000DE1 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11273                                  					; about	the illegal combination)
 11274 00000DE3 EB66                    		jmp	short FormatFailed
 11275                                  ; ---------------------------------------------------------------------------
 11276                                  
 11277                                  NeedToSetDasd:				
 11278 00000DE5 52                      		push	dx
 11279 00000DE6 E89001                  		call	SetDasd		; INT 13h, AH=17h
 11280 00000DE9 5A                      		pop	dx
 11281                                  NoSetDasd:				
 11282 00000DEA E84DFA                  		call	checksingle	; Do any needed	diskette swapping
 11283 00000DED 89D0                    		mov	ax, dx		; Get track from packet
 11284 00000DEF A3[3901]                		mov	[trknum], ax
 11285 00000DF2 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11286 00000DF6 88CC                    		mov	ah, cl
 11287 00000DF8 BB[3B05]                		mov	bx, tracktable
 11288 00000DFB 8B0E[3905]              		mov	cx, [sectorspertrack]
 11289                                  
 11290                                  StoreCylinderHead:			
 11291 00000DFF 8907                    		mov	[bx], ax	; Store	into TrackTable
 11292 00000E01 83C304                  		add	bx, 4		; Skip to next sector field
 11293 00000E04 E2F9                    		loop	StoreCylinderHead
 11294                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 11295                                  		; 02/09/2023
 11296 00000E06 B105                    		mov	cl, 5
 11297                                  FormatRetry:				
 11298 00000E08 51                      		push	cx
 11299 00000E09 BB[3B05]                		mov	bx, tracktable
 11300 00000E0C A0[3905]                		mov	al, [sectorspertrack]
 11301 00000E0F B405                    		mov	ah, 5		; romformat
 11302 00000E11 8C1E[3705]              		mov	[xfer_seg], ds
 11303 00000E15 E86902                  		call	ToRom
 11304 00000E18 59                      		pop	cx
 11305 00000E19 7216                    		jb	short FormatError
 11306 00000E1B 51                      		push	cx		; Now verify the sectors just formatted.
 11307                                  					; NOTE:	because	of bug in some BIOSes we have to
 11308                                  					;	set ES:BX to 00:00
 11309 00000E1C 53                      		push	bx
 11310 00000E1D 31DB                    		xor	bx, bx
 11311 00000E1F 891E[3705]              		mov	[xfer_seg], bx
 11312 00000E23 A0[3905]                		mov	al, [sectorspertrack]
 11313 00000E26 B404                    		mov	ah, 4		; romverify
 11314 00000E28 B101                    		mov	cl, 1
 11315 00000E2A E85402                  		call	ToRom
 11316 00000E2D 5B                      		pop	bx
 11317 00000E2E 59                      		pop	cx
 11318 00000E2F 7329                    		jnb	short FormatOk
 11319                                  FormatError:				
 11320 00000E31 E83702                  		call	ResetDisk
 11321 00000E34 C606[3906]01            		mov	byte [had_format_error], 1
 11322 00000E39 50                      		push	ax
 11323 00000E3A 51                      		push	cx
 11324 00000E3B 52                      		push	dx
 11325 00000E3C E89801                  		call	SetMediaForFormat
 11326 00000E3F 3C01                    		cmp	al, 1
 11327 00000E41 7503                    		jnz	short WhileErr
 11328 00000E43 E83301                  		call	SetDasd
 11329                                  WhileErr:				
 11330 00000E46 5A                      		pop	dx
 11331 00000E47 59                      		pop	cx
 11332 00000E48 58                      		pop	ax
 11333 00000E49 E2BD                    		loop	FormatRetry
 11334                                  FormatFailed:				
 11335 00000E4B C606[3906]01            		mov	byte [had_format_error], 1
 11336                                  					; Set the format error flag
 11337 00000E50 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11338 00000E53 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11339 00000E55 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11340                                  DoMapIt:				
 11341 00000E57 E973FD                  		jmp	maperror
 11342                                  ; ---------------------------------------------------------------------------
 11343                                  
 11344                                  FormatOk:				
 11345 00000E5A C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11346 00000E5F C3                      		retn
 11347                                  ; ---------------------------------------------------------------------------
 11348                                  
 11349                                  ; 16/10/2022
 11350                                  
 11351                                  ; ==========================================================================
 11352                                  ;
 11353                                  ; VerifyTrack:
 11354                                  ;
 11355                                  ; input: ES:di points to bds for drive
 11356                                  ; ==========================================================================
 11357                                  
 11358                                  VerifyTrack:				
 11359 00000E60 1E                      		push	ds
 11360 00000E61 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11361 00000E65 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11362                                  
 11363                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11364                                  
 11365 00000E68 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11366 00000E6B 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11367 00000E6E 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11368 00000E71 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11369                                  					; Get option flag word
 11370 00000E73 1F                      		pop	ds
 11371 00000E74 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11372 00000E79 890E[3301]              		mov	[curtrk], cx
 11373 00000E7D A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11374 00000E80 8B0E[3905]              		mov	cx, [sectorspertrack]
 11375                                  
 11376                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11377                                  		; specified if not we should go to the normal track verification
 11378                                  		; routine. If fast format has been specified we should get the
 11379                                  		; number of tracks to be verified and check it to see if it is
 11380                                  		; > 255. If it is then it is an error and we should go to
 11381                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11382                                  		; sectors per track to get the total number of sectors to be
 11383                                  		; verified. This should also be less than equal to 255
 11384                                  		; otherwise we go to same error exit. If everything is okay
 11385                                  		; we initalise cx to the total sectors. use ax as a temporary
 11386                                  		; register.
 11387                                  
 11388                                  					; Special function requested?	
 11389 00000E84 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11390 00000E87 7421                    		jz	short NormVerifyTrack
 11391 00000E89 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11392 00000E8B 08E4                    		or	ah, ah
 11393 00000E8D 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11394 00000E8F F6E1                    		mul	cl
 11395 00000E91 08E4                    		or	ah, ah
 11396 00000E93 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11397 00000E95 89C1                    		mov	cx, ax
 11398                                  		; 10/12/2022
 11399 00000E97 26F6452301              		test	byte [es:di+35], 1
 11400                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11401                                  					; fnon_removable
 11402 00000E9C 740C                    		jz	short NormVerifyTrack
 11403                                  					; Multitrack operation = on?
 11404                                  		; 10/12/2022
 11405                                  		; 19/10/2022
 11406 00000E9E F606[2F05]80            		test	byte [multrk_flag], 80h
 11407                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11408                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11409 00000EA3 7405                    		jz	short NormVerifyTrack
 11410 00000EA5 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11411                                  NormVerifyTrack:			
 11412 00000EAA 31C0                    		xor	ax, ax		; 1st sector
 11413 00000EAC 31DB                    		xor	bx, bx
 11414 00000EAE 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11415 00000EB2 E83F00                  		call	TrackIo
 11416 00000EB5 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11417 00000EBA C3                      		retn
 11418                                  ; ---------------------------------------------------------------------------
 11419                                  
 11420                                  VerifyTrack_Err:			
 11421 00000EBB B401                    		mov	ah, 1
 11422 00000EBD E90DFD                  		jmp	maperror
 11423                                  ; ---------------------------------------------------------------------------
 11424                                  
 11425                                  ; 16/10/2022
 11426                                  
 11427                                  ; ==========================================================================
 11428                                  ;
 11429                                  ; ReadTrack:
 11430                                  ;
 11431                                  ; input: ES:di points to bds for drive
 11432                                  ;
 11433                                  ; ==========================================================================
 11434                                  
 11435                                  ReadTrack:				
 11436 00000EC0 C606[2001]02            		mov	byte [rflag], 2	; romread
 11437 00000EC5 EB05                    		jmp	short ReadWriteTrack
 11438                                  ; ---------------------------------------------------------------------------
 11439                                  
 11440                                  WriteTrack:
 11441                                  
 11442                                  ; ==========================================================================
 11443                                  ;
 11444                                  ; WriteTrack:
 11445                                  ;
 11446                                  ; input: ES:di points to bds for drive
 11447                                  ;
 11448                                  ; ==========================================================================
 11449                                  				
 11450 00000EC7 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11451                                  
 11452                                  		; Fall into ReadWriteTrack
 11453                                  
 11454                                  ; ==========================================================================
 11455                                  ;
 11456                                  ; readWriteTrack:
 11457                                  ;
 11458                                  ; input:
 11459                                  ;    ES:di points to bds for drive
 11460                                  ;    rFlag - 2 for read,3 for write
 11461                                  ;
 11462                                  ; ==========================================================================
 11463                                  
 11464                                  ReadWriteTrack:	
 11465                                  		; save bds pointer segment so we can use it to access
 11466                                  		; our packet. Notice that this is not the standard register
 11467                                  		; assignment for accessing packets
 11468                                  		
 11469                                  		; 19/10/2022	
 11470 00000ECC 06                      		push	es
 11471 00000ECD C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11472 00000ED1 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11473 00000ED5 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11474 00000ED9 A3[3301]                		mov	[curtrk], ax
 11475 00000EDC 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11476 00000EE0 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11477 00000EE3 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11478 00000EE7 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11479 00000EEB 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11480                                  					; Get transfer address
 11481                                  
 11482                                  		; we just trashed our packet address, but we no longer care
 11483                                  
 11484 00000EEF 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11485 00000EF3 07                      		pop	es
 11486                                  
 11487                                  		; Fall into TrackIo
 11488                                  
 11489                                  ; =============== S U B	R O U T	I N E =======================================
 11490                                  
 11491                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11492                                  
 11493                                  ; ==========================================================================
 11494                                  ;
 11495                                  ; TrackIo:
 11496                                  ;    performs track read/write/verify
 11497                                  ;
 11498                                  ;   input:
 11499                                  ;      rFlag	- 2 = read
 11500                                  ;		  3 = write
 11501                                  ;		  4 = verify
 11502                                  ;      AX	- Index into track table of first sector to io
 11503                                  ;      CX	- Number of sectors to io
 11504                                  ;      Xfer_Seg:BX - Transfer address
 11505                                  ;      ES:DI	- Pointer to bds
 11506                                  ;      CurTrk	- Current cylinder
 11507                                  ;      CurHd	- Current head
 11508                                  ;
 11509                                  ; ==========================================================================
 11510                                  
 11511                                  ; 16/03/2019 - Retro DOS v4.0
 11512                                  		
 11513                                  		; 19/10/2022
 11514                                  TrackIo:	
 11515                                  					; Procedure `disk' will pop stack to
 11516 00000EF4 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11517 00000EF8 E83FF9                  		call	checksingle	; Ensure correct disk is in drv
 11518 00000EFB 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11519                                  					; See if we have already set	disk
 11520 00000F00 7407                    		jz	short Dptalreadyset ; base table
 11521 00000F02 50                      		push	ax		; set up tables	and variables for i/o
 11522 00000F03 51                      		push	cx
 11523 00000F04 E88FFA                  		call	iosetup
 11524 00000F07 59                      		pop	cx
 11525 00000F08 58                      		pop	ax
 11526                                  Dptalreadyset:				; Point si at the table entry of the			
 11527 00000F09 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11528 00000F0C D1E0                    		shl	ax, 1
 11529 00000F0E D1E0                    		shl	ax, 1
 11530 00000F10 01C6                    		add	si, ax
 11531                                  
 11532                                  		; WE WANT:
 11533                                  		; CX to	be the number of times we have to loop
 11534                                  		; DX to	be the number of sectors we read on each iteration
 11535                                  		
 11536 00000F12 BA0100                  		mov	dx, 1
 11537                                  		; 12/12/2022
 11538 00000F15 26F6452308              		test	byte [es:di+23h], 8
 11539                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11540                                  					; good_tracklayout
 11541 00000F1A 7402                    		jz	short ionextsector
 11542                                  		
 11543 00000F1C 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11544                                  ionextsector:				
 11545 00000F1E 51                      		push	cx
 11546 00000F1F 52                      		push	dx
 11547 00000F20 46                      		inc	si
 11548 00000F21 46                      		inc	si		; Skip over the	cylinder and head in
 11549                                  					; the track table
 11550 00000F22 AC                      		lodsb			; Get sector ID	from track table
 11551 00000F23 A2[3101]                		mov	[cursec], al
 11552                                  
 11553                                  		; assumptions for a fixed disk multi-track disk	i/o
 11554                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11555                                  		;     only CL is valid.
 11556                                  		; 2). Sector size should be set	to 512 bytes.
 11557                                  		; 3). Good track layout
 11558                                  		
 11559                                  		; 12/12/2022
 11560 00000F26 26F6452301              		test	byte [es:di+23h], 1
 11561                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11562                                  					; fnon_removable ; Fixed disk?
 11563 00000F2B 7414                    		jz	short IoRemovable ; No
 11564                                  		; 12/12/2022
 11565 00000F2D F606[2F05]80            		test	byte [multrk_flag], 80h
 11566                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11567                                  						; Allow multi-track operation?
 11568 00000F32 740D                    		jz	short IoRemovable ; No,don't do that.
 11569 00000F34 8916[2201]              		mov	[seccnt], dx
 11570 00000F38 89D0                    		mov	ax, dx
 11571 00000F3A E816FB                  		call	Disk
 11572 00000F3D 5A                      		pop	dx
 11573 00000F3E 59                      		pop	cx
 11574 00000F3F F8                      		clc
 11575 00000F40 C3                      		retn
 11576                                  ; ---------------------------------------------------------------------------
 11577                                  
 11578                                  IoRemovable:				
 11579 00000F41 AC                      		lodsb			; Get sector size index	from track
 11580                                  					; table	and save it
 11581 00000F42 50                      		push	ax
 11582 00000F43 56                      		push	si
 11583 00000F44 1E                      		push	ds		; Save Bios_Data
 11584 00000F45 50                      		push	ax
 11585 00000F46 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11586                                  					; Fetch	EOT while ds-> Bios_Data
 11587 00000F4A C536[2D01]              		lds	si, [dpt]
 11588 00000F4E 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11589 00000F51 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11590 00000F54 58                      		pop	ax
 11591 00000F55 1F                      		pop	ds
 11592 00000F56 88D0                    		mov	al, dl
 11593 00000F58 A3[2201]                		mov	[seccnt], ax
 11594 00000F5B E8F5FA                  		call	Disk
 11595 00000F5E 5E                      		pop	si		; Advance buffer pointer by adding
 11596                                  					; sector size
 11597 00000F5F 58                      		pop	ax
 11598                                  
 11599                                  		; 02/09/2023 (PCDOS 7.1)
 11600                                  		;call	SectorSizeIndexToSectorSize
 11601 00000F60 88C1                    		mov	cl, al
 11602 00000F62 B88000                  		mov	ax, 128
 11603 00000F65 D3E0                    		shl	ax, cl
 11604                                  
 11605 00000F67 01C3                    		add	bx, ax
 11606 00000F69 5A                      		pop	dx
 11607 00000F6A 59                      		pop	cx
 11608 00000F6B E2B1                    		loop	ionextsector
 11609 00000F6D 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11610                                  		;jz	short NoNeedDone
 11611                                  		; 12/12/2022
 11612 00000F72 7404                    		je	short NoNeedDone2
 11613 00000F74 E867FA                  		call	done		; set time of last access, and reset
 11614                                  					; entries in Dpt.
 11615                                  NoNeedDone:
 11616 00000F77 F8                      		clc
 11617                                  NoNeedDone2:
 11618 00000F78 C3                      		retn
 11619                                  
 11620                                  ; =============== S U B	R O U T	I N E =======================================
 11621                                  
 11622                                  ; ---------------------------------------------------------------------------
 11623                                  ;
 11624                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11625                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11626                                  ; are permissible.
 11627                                  ;
 11628                                  ; On Input   AX contains sector size in bytes
 11629                                  ; On Output  AL Contains index
 11630                                  ; All other registers preserved
 11631                                  ;
 11632                                  ; ---------------------------------------------------------------------------
 11633                                  
 11634                                  ; 02/09/2023
 11635                                  ;SectSizeToSectIndex:
 11636                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11637                                  ;					; examine upper	byte only
 11638                                  ;		ja	short OneK
 11639                                  ;		mov	al, ah		; value	in AH is the index!
 11640                                  ;		retn
 11641                                  
 11642                                  ; ---------------------------------------------------------------------------
 11643                                  ;
 11644                                  ;OneK:
 11645                                  ;		mov	al, 3
 11646                                  ;		retn
 11647                                  
 11648                                  ; =============== S U B	R O U T	I N E =======================================
 11649                                  
 11650                                  ; 02/09/2023
 11651                                  ;SectorSizeIndexToSectorSize:
 11652                                  ;		mov	cl, al
 11653                                  ;		mov	ax, 128
 11654                                  ;		shl	ax, cl
 11655                                  ;		retn
 11656                                  
 11657                                  ; =============== S U B	R O U T	I N E =======================================
 11658                                  
 11659                                  ; 16/10/2022
 11660                                  
 11661                                  ; ---------------------------------------------------------------------------
 11662                                  ;
 11663                                  ; SetDASD
 11664                                  ;
 11665                                  ; Set up the rom for formatting.
 11666                                  ; we have to tell the rom bios what type of disk is in the drive.
 11667                                  ;
 11668                                  ; On Input   - ES:di - Points to bds
 11669                                  ;
 11670                                  ; ---------------------------------------------------------------------------
 11671                                  
 11672                                  		; 19/10/2022
 11673                                  SetDasd:	
 11674 00000F79 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11675                                  					; See if we've previously set dasd type
 11676 00000F7E 740C                    		jz	short DoSetDasd
 11677                                  		; 10/12/2022
 11678 00000F80 26F6452380              		test	byte [es:di+23h], 80h
 11679                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11680                                  					; set_dasd_true
 11681 00000F85 7447                    		jz	short DasdHasBeenSet
 11682                                  		; 10/12/2022
 11683 00000F87 268065237F              		and	byte [es:di+23h], 7Fh
 11684                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11685                                  					; ~set_dasd_true
 11686                                  DoSetDasd:
 11687 00000F8C C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11688 00000F91 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11689 00000F96 B004                    		mov	al, 4
 11690                                  		; 02/09/2023
 11691 00000F98 268A6522                		mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 11692 00000F9C 80FC02                  		cmp	ah, 2
 11693                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11694                                  					; DEV_3INCH720KB
 11695 00000F9F 7415                    		jz	short DoSet
 11696 00000FA1 80FC01                  		cmp	ah, 1
 11697                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11698                                  					; DEV_5INCH96TPI
 11699                                  		;jz	short GotBig
 11700 00000FA4 B001                    		mov	al, 1
 11701                                  		;jmp	short DoSet
 11702                                  		; 02/09/2023
 11703 00000FA6 750E                    		jnz	short DoSet
 11704                                  
 11705                                  ; ---------------------------------------------------------------------------
 11706                                  
 11707                                  GotBig:
 11708                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 11709                                  		; 02/09/2023
 11710 00000FA8 40                      		inc	ax  ; mov al, 2
 11711 00000FA9 803E[3706]00            		cmp	byte [mediatype], 0
 11712 00000FAE 7506                    		jnz	short DoSet
 11713                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11714                                  		; 10/12/2022
 11715                                  		;inc	al  ; al = 3
 11716                                  		; 18/12/2022
 11717 00000FB0 40                      		inc	ax  ; al = 3
 11718 00000FB1 C606[3B01]54            		mov	byte [gap_patch], 54h
 11719                                  DoSet:
 11720 00000FB6 1E                      		push	ds
 11721 00000FB7 56                      		push	si
 11722                                  
 11723                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 11724                                  		; 02/09/2023
 11725 00000FB8 31F6                    		xor	si, si
 11726 00000FBA 8EDE                    		mov	ds, si	; 0
 11727                                  
 11728 00000FBC C5367800                		lds	si, [DSKADR]
 11729                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11730                                  		;;lds	si, ds:78h
 11731                                  
 11732 00000FC0 C644090F                		mov	byte [si+9], 0Fh ;
 11733                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11734 00000FC4 5E                      		pop	si
 11735 00000FC5 1F                      		pop	ds
 11736 00000FC6 B417                    		mov	ah, 17h
 11737 00000FC8 268A5504                		mov	dl, [es:di+4]
 11738 00000FCC CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11739                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11740                                  DasdHasBeenSet:
 11741 00000FCE 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11742 00000FD2 8826[3701]              		mov	[formt_eot], ah
 11743 00000FD6 C3                      		retn
 11744                                  
 11745                                  ; =============== S U B	R O U T	I N E =======================================
 11746                                  
 11747                                  ; 16/10/2022
 11748                                  
 11749                                  ; ---------------------------------------------------------------------------
 11750                                  ;
 11751                                  ; Set Media Type for Format
 11752                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11753                                  ; BPB area in the BDS can be handled by the rom.
 11754                                  ; On Input, ES:DI -> current BDS.
 11755                                  ; The status of the operation is returned in AL
 11756                                  ;
 11757                                  ;	- 0 - if the support is available,and the combination is valid.
 11758                                  ;	- 1 - no rom support
 11759                                  ;	- 2 - illegal combination
 11760                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11761                                  ;
 11762                                  ; Flags also may be altered. All other registers preserved.
 11763                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11764                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11765                                  ; to the one returned. the original pointer to the disk base table is stored
 11766                                  ; in TempDpt, until it is restored.
 11767                                  ;
 11768                                  ; ---------------------------------------------------------------------------
 11769                                  
 11770                                  		; 19/10/2022
 11771                                  SetMediaForFormat:	
 11772 00000FD7 51                      		push	cx
 11773 00000FD8 52                      		push	dx
 11774                                  
 11775                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11776                                  		; but we need to call int 13h, ah=18h again.
 11777                                  
 11778 00000FD9 803E[3906]01            		cmp	byte [had_format_error], 1
 11779 00000FDE 7425                    		jz	short SkipSaveDskAdr
 11780 00000FE0 30C0                    		xor	al, al		; If already done return 0
 11781 00000FE2 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11782 00000FE7 7502                    		jnz	short DoSetMediaForFormat
 11783 00000FE9 EB7D                    		jmp	SetMediaRet	; Media	already	set
 11784                                  ; ---------------------------------------------------------------------------
 11785                                  
 11786                                  DoSetMediaForFormat:
 11787 00000FEB 06                      		push	es
 11788 00000FEC 56                      		push	si
 11789                                  		
 11790                                  		; 02/09/2023
 11791                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 11792 00000FED 31F6                    		xor	si, si ; 0
 11793 00000FEF 8EC6                    		mov	es, si
 11794                                  
 11795 00000FF1 26C4367800              		les	si, [es:DSKADR]
 11796                                  		;les	si, es:78h	; [es:DSKADR]
 11797                                  					; Get pointer to disk base table
 11798 00000FF6 8936[2D01]              		mov	[dpt], si
 11799 00000FFA 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11800                                  
 11801                                  		; Initialize the head settle time to 0Fh. See the offsets
 11802                                  		; given in dskprm.inc.
 11803                                  
 11804 00000FFE 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11805 00001003 5E                      		pop	si
 11806 00001004 07                      		pop	es
 11807                                  SkipSaveDskAdr:				
 11808 00001005 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11809 00001009 49                      		dec	cx
 11810 0000100A 80E503                  		and	ch, 3
 11811 0000100D D0CD                    		ror	ch, 1
 11812 0000100F D0CD                    		ror	ch, 1
 11813 00001011 86E9                    		xchg	ch, cl
 11814 00001013 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11815 00001017 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11816 0000101B 06                      		push	es
 11817 0000101C 1E                      		push	ds
 11818 0000101D 56                      		push	si
 11819 0000101E 57                      		push	di
 11820 0000101F B418                    		mov	ah, 18h
 11821 00001021 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11822                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11823 00001023 7231                    		jb	short FormaStatErr
 11824 00001025 803E[3906]01            		cmp	byte [had_format_error], 1
 11825 0000102A 7423                    		jz	short skip_disk_base_setting
 11826 0000102C 06                      		push	es		; Save segment returned	by the rom
 11827                                  
 11828                                  		; 02/09/2023
 11829                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 11830 0000102D 31F6                    		xor	si, si
 11831 0000102F 8EC6                    		mov	es, si ; 0
 11832 00001031 06                      		push	es ; * ; 02/09/2023
 11833                                  
 11834 00001032 26C4367800              		les	si, [es:DSKADR]
 11835                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11836                                  					; Get current disk base	table
 11837 00001037 8936[3A06]              		mov	[tempdpt], si
 11838 0000103B 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11839                                  
 11840                                  		; 02/09/2023
 11841                                  		;;mov	es, [zeroseg]
 11842                                  		;xor	si, si ; 0
 11843                                  		;mov	es, si
 11844 0000103F 07                      		pop	es ; * ; 02/09/2023
 11845                                  
 11846                                  		;mov	es:78h,	di
 11847 00001040 26893E7800              		mov	[es:DSKADR], di
 11848                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11849 00001045 268F067A00              		pop	word [es:DSKADR+2]
 11850 0000104A C606[3806]01            		mov	byte [media_set_for_format], 1
 11851                                  skip_disk_base_setting:			
 11852 0000104F 30C0                    		xor	al, al		; Legal	combination + rom support code
 11853                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11854 00001051 A2[3906]                		mov	[had_format_error], al
 11855 00001054 EB0E                    		jmp	short PopStatRet
 11856                                  ; ---------------------------------------------------------------------------
 11857                                  
 11858                                  FormaStatErr:
 11859                                  		; 10/12/2022
 11860 00001056 B003                    		mov	al, 3
 11861                                  				
 11862 00001058 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11863                                  					; Illegal combination =	0Ch
 11864 0000105B 7406                    		jz	short FormatStatIllegalComb
 11865 0000105D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11866 00001060 7402                    		jz	short FormatStatTimeOut
 11867                                  		; 10/12/2022
 11868                                  		;dec	al
 11869                                  		; 18/12/2022
 11870 00001062 48                      		dec	ax
 11871                                  		; al = 2
 11872                                  		;mov	al, 1		; Function not supported.
 11873                                  		;jmp	short PopStatRet
 11874                                  ; ---------------------------------------------------------------------------
 11875                                  
 11876                                  FormatStatIllegalComb:
 11877                                  		; 10/12/2022
 11878                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11879                                  		; 18/12/2022
 11880 00001063 48                      		dec	ax
 11881                                  		; al = 2				
 11882                                  		;mov	al, 2		; Function supported, but
 11883                                  					; Illegal sect/trk,trk combination.
 11884                                  		; 10/12/2022
 11885                                  		;jmp	short PopStatRet
 11886                                  ; ---------------------------------------------------------------------------
 11887                                  
 11888                                  FormatStatTimeOut:			
 11889                                  		; 10/12/2022
 11890                                  		; al = 3
 11891                                  		;mov	al, 3		; Function supported, but
 11892                                  					; Media	not present.
 11893                                  PopStatRet:				
 11894 00001064 5F                      		pop	di
 11895 00001065 5E                      		pop	si
 11896 00001066 1F                      		pop	ds
 11897 00001067 07                      		pop	es
 11898                                  SetMediaRet:				
 11899 00001068 5A                      		pop	dx
 11900 00001069 59                      		pop	cx
 11901 0000106A C3                      		retn
 11902                                  
 11903                                  ; =============== S U B	R O U T	I N E =======================================
 11904                                  
 11905                                  ; 16/10/2022
 11906                                  
 11907                                  ; ---------------------------------------------------------------------------
 11908                                  ;
 11909                                  ; RESET THE DRIVE
 11910                                  ;
 11911                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11912                                  ; slow head settle time for the next operation. this is because the reset
 11913                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11914                                  ; time around - there is a problem with 3.5" drives in that the head does
 11915                                  ; not settle down in time,even for read operations!!
 11916                                  ;
 11917                                  ; ---------------------------------------------------------------------------
 11918                                  
 11919                                  ResetDisk:
 11920 0000106B 50                      		push	ax
 11921                                  
 11922                                  		; 02/09/2023
 11923 0000106C B80100                  		mov	ax, 1 ; PCDOS 7.1
 11924 0000106F 3806[3806]              		cmp	[media_set_for_format], al ; 1
 11925                                  		;cmp	byte [media_set_for_format], 1
 11926                                  					; Reset while formatting?
 11927 00001073 7503                    		jnz	short ResetDisk_cont
 11928                                  					; Then verify operation in "fmt & vrfy"
 11929                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 11930 00001075 A2[3906]                		mov	[had_format_error], al ; 1
 11931                                  ResetDisk_cont:
 11932                                  		; 02/09/2023 (ah=0)
 11933                                  		;xor	ah, ah		; So signals that we had a format error
 11934 00001078 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11935                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11936 0000107A C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11937                                  					; Zap up the speed
 11938 0000107F 58                      		pop	ax
 11939 00001080 C3                      		retn
 11940                                  
 11941                                  ; =============== S U B	R O U T	I N E =======================================
 11942                                  
 11943                                  ; 16/10/2022
 11944                                  
 11945                                  ; ---------------------------------------------------------------------------
 11946                                  ;
 11947                                  ; This routine sets up the drive parameter table with the values needed for
 11948                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11949                                  ;
 11950                                  ; on entry  -	ES:DI - points to bds for the drive
 11951                                  ;		Xfer_Seg:BX - points to trkbuf
 11952                                  ;		AL    - number of sectors
 11953                                  ;		AH    - int 13 function code
 11954                                  ;		CL    - sector number for verify
 11955                                  ;		DS    - Bios_Data
 11956                                  ;
 11957                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11958                                  ;		AX and flags are the results of the int 13
 11959                                  ;
 11960                                  ; ---------------------------------------------------------------------------
 11961                                  
 11962                                  		; 19/10/2022
 11963                                  ToRom:	
 11964 00001081 53                      		push	bx
 11965 00001082 56                      		push	si
 11966                                  
 11967                                  		; Compaq bug fix - check whether we are using new ROM
 11968                                  		; functionality to set up format, not merely if it exists.
 11969                                  		; This was formerly a check against [new_rom]
 11970                                  
 11971 00001083 F606[3806]01            		test	byte [media_set_for_format], 1
 11972 00001088 7536                    		jnz	short GotValidDpt
 11973 0000108A 50                      		push	ax
 11974 0000108B 06                      		push	es		; Save bds segment
 11975 0000108C 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11976                                  					; ffSmall ; is it a 3.5" drive?
 11977 00001091 9C                      		pushf			; (Save	the cmp	result)
 11978 00001092 8E06[1A00]              		mov	es, [zeroseg]
 11979                                  		;les	si, es:78h	; Get pointer to disk base table
 11980 00001096 26C4367800              		les	si, [es:DSKADR]
 11981                                  		;mov	word ptr ds:dpt, si
 11982                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11983 0000109B 8936[2D01]              		mov	[dpt], si
 11984 0000109F 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11985                                  		
 11986 000010A3 A0[3701]                		mov	al, [formt_eot]
 11987 000010A6 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11988 000010AA A0[3B01]                		mov	al, [gap_patch]
 11989 000010AD 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11990                                  					; Important for	format
 11991 000010B1 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11992                                  					; Assume we are	doing a	seek operation
 11993                                  					; Setup	motor start correctly for 3.5" drives
 11994 000010B6 9D                      		popf			; Get result of	earlier	cmp
 11995 000010B7 7505                    		jnz	short MotorStrtOK
 11996 000010B9 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11997                                  MotorStrtOK:				
 11998 000010BE 07                      		pop	es		; Restore bds segment
 11999 000010BF 58                      		pop	ax
 12000                                  GotValidDpt:				
 12001 000010C0 8B16[3901]              		mov	dx, [trknum]	; Set track number
 12002 000010C4 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 12003 000010C6 268A5504                		mov	dl, [es:di+4]	; Set drive number
 12004 000010CA 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 12005 000010CE 06                      		push	es		; Save bds segment
 12006 000010CF 8E06[3705]              		mov	es, [xfer_seg]
 12007 000010D3 CD13                    		int	13h		; DISK -
 12008 000010D5 07                      		pop	es		; Restore bds segment
 12009 000010D6 5E                      		pop	si
 12010 000010D7 5B                      		pop	bx
 12011 000010D8 C3                      		retn
 12012                                  
 12013                                  ; ---------------------------------------------------------------------------
 12014                                  
 12015                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12016                                  
 12017                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 12018                                  
 12019                                  ; ==========================================================================
 12020                                  ;
 12021                                  ; get the owner of the physical drive represented by the logical drive in al.
 12022                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 12023                                  ; if this is not the case, the system may hang, just following the linked list.
 12024                                  ;
 12025                                  ; ==========================================================================
 12026                                  
 12027                                  		; 19/10/2022
 12028                                  ioctl_getown:
 12029 000010D9 E8EFF3                  		call	SetDrive
 12030 000010DC 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 12031                                  					; Get physical drive number
 12032 000010E0 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 12033                                  ownloop:				
 12034 000010E4 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 12035 000010E8 7507                    		jnz	short getnextBDS
 12036                                  		; 10/12/2022
 12037 000010EA 26F6452320              		test	byte [es:di+23h], 20h
 12038                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 12039                                  					; fi_own_physical
 12040 000010EF 7514                    		jnz	short exitown
 12041                                  getnextBDS:				
 12042 000010F1 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12043 000010F4 EBEE                    		jmp	short ownloop
 12044                                  ; ---------------------------------------------------------------------------
 12045                                  
 12046                                  ; ==========================================================================
 12047                                  ;
 12048                                  ; set the ownership of the physical drive represented by the logical drive
 12049                                  ; in al to al.
 12050                                  ;
 12051                                  ; ==========================================================================
 12052                                  
 12053                                  		; 19/10/2022
 12054                                  ioctl_setown:
 12055 000010F6 E8D2F3                  		call	SetDrive
 12056 000010F9 C606[7A00]01            		mov	byte [fsetowner], 1
 12057                                  					; set flag for CheckSingle to look at.
 12058 000010FE E839F7                  		call	checksingle
 12059                                  		; 02/09/2023
 12060 00001101 FE0E[7A00]              		dec	byte [fsetowner] ; 0
 12061                                  		;mov	byte [fsetowner], 0
 12062                                  					; set ownership	of drive reset flag
 12063                                  		; Fall into ExitOwn
 12064                                  
 12065                                  ; ==========================================================================
 12066                                  ;
 12067                                  ; if there is only one logical drive assigned to this physical drive, return
 12068                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12069                                  ;
 12070                                  ; ==========================================================================
 12071                                  
 12072                                  exitown:				
 12073 00001105 30C9                    		xor	cl, cl
 12074                                  		; 12/12/2022
 12075 00001107 26F6452310              		test	byte [es:di+23h], 10h
 12076                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12077                                  					; fi_am_mult
 12078 0000110C 7406                    		jz	short exitnomult
 12079 0000110E 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12080                                  					; Get logical drive number
 12081                                  					; Get it 1-based
 12082 00001112 FEC1                    		inc	cl
 12083                                  exitnomult:				
 12084 00001114 C51E[1200]              		lds	bx, [ptrsav]
 12085 00001118 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12086                                  					; Exit normal termination
 12087                                  		; 12/12/2022
 12088                                  		; cf=0
 12089                                  		;clc
 12090 0000111B C3                      		retn
 12091                                  
 12092                                  ; =============== S U B	R O U T	I N E =======================================
 12093                                  
 12094                                  ; 16/10/2022
 12095                                  
 12096                                  ; ---------------------------------------------------------------------------
 12097                                  ;
 12098                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12099                                  ; only if the first byte of TempDpt is not -1.
 12100                                  ; all registers (including flags) are preserved.
 12101                                  ;
 12102                                  ; ---------------------------------------------------------------------------
 12103                                  
 12104                                  		; 19/10/2022
 12105                                  RestoreOldDpt:
 12106                                  		; if we have already restored the disk base table earlier,
 12107                                  		; do not do it again.
 12108                                  	
 12109 0000111C 50                      		push	ax
 12110 0000111D 30C0                    		xor	al, al
 12111 0000111F A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 12112 00001122 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 12113 00001126 08C0                    		or	al, al
 12114 00001128 741E                    		jz	short DontRestore
 12115 0000112A 56                      		push	si
 12116 0000112B 1E                      		push	ds
 12117 0000112C 06                      		push	es
 12118 0000112D C536[3A06]              		lds	si, [tempdpt]
 12119                                  
 12120                                  		; 17/10/2022
 12121 00001131 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 12122                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12123 00001136 268E06[1A00]            		mov	es, [es:zeroseg]
 12124                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 12125                                  
 12126                                  		;mov	es:78h,	si	; [es:DSKADR]
 12127 0000113B 2689367800              		mov	[es:DSKADR], si
 12128                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12129 00001140 268C1E7A00              		mov	[es:DSKADR+2], ds
 12130 00001145 07                      		pop	es
 12131 00001146 1F                      		pop	ds
 12132 00001147 5E                      		pop	si
 12133                                  DontRestore:				
 12134 00001148 58                      		pop	ax
 12135                                  		; 12/12/2022
 12136                                  		; cf=0
 12137                                  		;clc			;  Clear carry
 12138 00001149 C3                      		retn
 12139                                  
 12140                                  ; ---------------------------------------------------------------------------
 12141                                  
 12142                                  ; 16/10/2022
 12143                                  
 12144                                  ; ==========================================================================
 12145                                  ;	get media id
 12146                                  ; ==========================================================================
 12147                                  ;
 12148                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12149                                  ;	    the media that has the extended boot record.
 12150                                  ;	    for the conventional media,this routine will return "unknown
 12151                                  ;	    media type" error to dos.
 12152                                  ;
 12153                                  ; INPUT :   ES:di -> bds table for this drive.
 12154                                  ;
 12155                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12156                                  ;	    if carry set,then al contains the device driver error number
 12157                                  ;	    that will be returned to dos.
 12158                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12159                                  ;
 12160                                  ; SUBROUTINES TO BE CALLED:
 12161                                  ;	BootIo:NEAR
 12162                                  ;
 12163                                  ; LOGIC:
 12164                                  ;	to recognize the extended boot record,this logic will actually
 12165                                  ;	access the boot sector even if it is a hard disk.
 12166                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12167                                  ;	field of bpb and the extended boot signature.
 12168                                  ;
 12169                                  ; {
 12170                                  ;	get logical drive number from bds table;
 12171                                  ;	rFlag = read operation;
 12172                                  ;	BootIo;		 /*get the media boot record into the buffer
 12173                                  ;	if (no error) then
 12174                                  ;	     if (extended boot record) then
 12175                                  ;		{ set volume label,volume serial number and system id
 12176                                  ;		  of the request packet to those of the boot record;
 12177                                  ;		};
 12178                                  ;	     else		  /*not an extended bpb */
 12179                                  ;		{ set register al to "unknown media.." error code;
 12180                                  ;		  set carry bit;
 12181                                  ;		};
 12182                                  ;	else
 12183                                  ;	     ret;	/*already error code is set in the register al
 12184                                  ;
 12185                                  ; ==========================================================================
 12186                                  
 12187                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12188                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12189                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12190                                  
 12191                                  		; 19/10/2022
 12192                                  GetMediaId:
 12193 0000114A E89F00                  		call	ChangeLineChk
 12194 0000114D 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12195 00001151 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12196 00001156 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 12197 00001159 7224                    		jb	short IOCtl_If1
 12198                                  					; Valid? (0F0h-0FFh?)
 12199 0000115B 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12200                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12201 00001160 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12202                                  		; 10/12/2022
 12203 00001162 BE[7401]                		mov	si, disksector+26h
 12204 00001165 803C29                  		cmp	byte [si], 29h
 12205                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12206                                  					; EXT_BOOT_SIGNATURE
 12207 00001168 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12208 0000116A C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12209 0000116E 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12210                                  		; 10/12/2022
 12211 00001172 46                      		inc	si
 12212                                  		; si = disksector+27h 
 12213                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12214 00001173 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12215 00001176 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12216                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12217                                  					; +size_of_EXT_SYSTEM_ID
 12218 00001179 F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12219                                  	
 12220                                  		; 10/12/2022
 12221                                  		; cf = 0
 12222                                  		;clc
 12223                                  
 12224 0000117B C3                      		retn
 12225                                  ; ---------------------------------------------------------------------------
 12226                                  
 12227                                  IOCtl_If2:				
 12228 0000117C B007                    		mov	al, 7		; error_unknown_media
 12229 0000117E F9                      		stc
 12230                                  IOCtl_If1:				
 12231 0000117F C3                      		retn
 12232                                  ; ---------------------------------------------------------------------------
 12233                                  
 12234                                  ; 16/10/2022
 12235                                  
 12236                                  ; ==========================================================================
 12237                                  ;  set media id
 12238                                  ; ==========================================================================
 12239                                  
 12240                                  ; function: set the volume label, the system id and the serial number of
 12241                                  ;	    the media that has the extended boot record.
 12242                                  ;	    for the conventional media, this routine will return "unknown
 12243                                  ;	    media.." error to dos.
 12244                                  ;	    this routine will also set the corresponding informations in
 12245                                  ;	    the bds table.
 12246                                  ;
 12247                                  ; input :   ES:di -> bds table for this drive.
 12248                                  ;
 12249                                  ; output:   the extended boot record in the media will be set according to
 12250                                  ;	    the request packet.
 12251                                  ;	    if carry set, then al contains the device driver error number
 12252                                  ;	    that will be returned to dos.
 12253                                  ;
 12254                                  ; subroutines to be called:
 12255                                  ;	BootIo:NEAR
 12256                                  ;
 12257                                  ; logic:
 12258                                  ;
 12259                                  ; {
 12260                                  ;	get drive_number from bds;
 12261                                  ;	rFlag = "read operation";
 12262                                  ;	BootIo;
 12263                                  ;	if (no error) then
 12264                                  ;	     if (extended boot record) then
 12265                                  ;		{ set volume label,volume serial number and system id
 12266                                  ;		  of the boot record to those of the request packet;
 12267                                  ;		  rFlag = "write operation";
 12268                                  ;		  get drive number from bds;
 12269                                  ;		  BootIo;	  /*write it back*/
 12270                                  ;		};
 12271                                  ;	     else		  /*not an extended bpb */
 12272                                  ;		{ set register al to "unknown media.." error code;
 12273                                  ;		  set carry bit;
 12274                                  ;		  ret;	 /*return back to caller */
 12275                                  ;		};
 12276                                  ;	else
 12277                                  ;	     ret;		 /*already error code is set */
 12278                                  ;
 12279                                  ; ==========================================================================
 12280                                  
 12281                                  		; 19/10/2022
 12282                                  SetMediaId:
 12283 00001180 E86900                  		call	ChangeLineChk
 12284 00001183 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12285                                  					; Logical drive	number
 12286 00001187 88C2                    		mov	dl, al
 12287 00001189 C606[2001]02            		mov	byte [rflag], 2	; romread
 12288 0000118E 52                      		push	dx
 12289 0000118F E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12290 00001192 5A                      		pop	dx
 12291 00001193 723E                    		jb	short IOCtl_If6
 12292                                  					; Valid? (0F0h-0FFh?)
 12293 00001195 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12294                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12295 0000119A 7234                    		jb	short IOCtl_If7	; Brif not
 12296 0000119C 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12297                                  					; EXT_BOOT_SIGNATURE
 12298 000011A1 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12299 000011A3 06                      		push	es		; Save BDS pointer
 12300 000011A4 57                      		push	di
 12301 000011A5 1E                      		push	ds		; Point	ES To boot record
 12302 000011A6 07                      		pop	es
 12303 000011A7 BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12304 000011AA C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12305 000011AE C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12306 000011B1 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12307 000011B4 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12308                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12309                                  					; +size_of_EXT_SYSTEM_ID
 12310 000011B7 F3A4                    		rep movsb
 12311 000011B9 06                      		push	es		; point	ds back	to Bios_Data
 12312 000011BA 1F                      		pop	ds
 12313 000011BB 5F                      		pop	di		; restore bds pointer
 12314 000011BC 07                      		pop	es
 12315 000011BD E876F5                  		call	mov_media_ids	; update the bds media id info.
 12316 000011C0 88D0                    		mov	al, dl
 12317 000011C2 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12318 000011C7 E80A00                  		call	BootIo		; write	it back.
 12319 000011CA C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12320                                  					; make sure chk_media check the driver
 12321                                  					; return with error code from BootIo
 12322 000011CF C3                      		retn
 12323                                  ; ---------------------------------------------------------------------------
 12324                                  
 12325                                  IOCtl_If7:				
 12326 000011D0 B007                    		mov	al, 7		; error_unknown_media
 12327 000011D2 F9                      		stc
 12328                                  IOCtl_If6:				
 12329 000011D3 C3                      		retn
 12330                                  
 12331                                  ; =============== S U B	R O U T	I N E =======================================
 12332                                  
 12333                                  ; 16/10/2022
 12334                                  
 12335                                  ; ---------------------------------------------------------------------------
 12336                                  ;	BootIo
 12337                                  ; ---------------------------------------------------------------------------
 12338                                  ;
 12339                                  ; function: read/write the boot record into boot sector.
 12340                                  ;
 12341                                  ; input :
 12342                                  ;	    al=logical drive number
 12343                                  ;	    rFlag = operation (read/write)
 12344                                  ;
 12345                                  ; output:   for read operation,the boot record of the drive specified in bds
 12346                                  ;	    be read into the DiskSector buffer.
 12347                                  ;	    for write operation,the DiskSector buffer image will be written
 12348                                  ;	    to the drive specified in bds.
 12349                                  ;	    if carry set,then al contains the device driver error number
 12350                                  ;	    that will be returned to dos.
 12351                                  ;	    AX,CX,DX register destroyed.
 12352                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12353                                  ;
 12354                                  ; subroutines to be called:
 12355                                  ;	DiskIO:NEAR
 12356                                  ;
 12357                                  ; logic:
 12358                                  ;
 12359                                  ; {
 12360                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12361                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12362                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12363                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12364                                  ; }
 12365                                  ; ==========================================================================
 12366                                  
 12367                                  		; 19/10/2022
 12368                                  BootIo:	
 12369 000011D4 06                      		push	es
 12370 000011D5 57                      		push	di
 12371 000011D6 53                      		push	bx
 12372 000011D7 1E                      		push	ds
 12373 000011D8 07                      		pop	es		; Point ES: to Bios_Data
 12374                                  
 12375                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12376                                  		; need to be initialized for this subroutine out here are
 12377                                  		; - Transfer address to Bios_Data:DiskSector
 12378                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12379                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12380                                  		; - Number of sectors <-- 1
 12381                                  
 12382 000011D9 BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12383 000011DC 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12384 000011DE 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12385 000011E2 B90100                  		mov	cx, 1
 12386 000011E5 E8E0F6                  		call	diskio
 12387 000011E8 5B                      		pop	bx
 12388 000011E9 5F                      		pop	di
 12389 000011EA 07                      		pop	es
 12390 000011EB C3                      		retn
 12391                                  
 12392                                  ; =============== S U B	R O U T	I N E =======================================
 12393                                  
 12394                                  ; 16/10/2022
 12395                                  
 12396                                  ; ---------------------------------------------------------------------------
 12397                                  ;	ChangeLineChk
 12398                                  ; ---------------------------------------------------------------------------
 12399                                  ;
 12400                                  ; when the user calls get/set media id call before dos establishes the media
 12401                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12402                                  ; lost.	this routine will check the change line activity and will save the
 12403                                  ; history in the flags.
 12404                                  ;
 12405                                  ; FUNCTION: check the change line error activity
 12406                                  ;
 12407                                  ; INPUT :  ES:di -> bds table.
 12408                                  ;
 12409                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12410                                  ;
 12411                                  ; SUBROUTINES TO BE CALLED:
 12412                                  ;	Set_Changed_DL
 12413                                  ;
 12414                                  ; ---------------------------------------------------------------------------
 12415                                  
 12416                                  ChangeLineChk:	
 12417 000011EC 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12418 000011F0 08D2                    		or	dl, dl		; Fixed	disk?
 12419 000011F2 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12420                                  		; 12/12/2022
 12421 000011F4 26F6452304              		test	byte [es:di+23h], 4
 12422                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12423                                  					; return_fake_bpb
 12424 000011F9 751A                    		jnz	short ChangeLnChkRet
 12425 000011FB 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12426 00001200 7513                    		jnz	short ChangeLnChkRet
 12427 00001202 E8DE06                  		call	haschange	; This drive support change line?
 12428 00001205 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12429                                  
 12430                                  		; Execute the rom disk interrupt to check changeline activity.
 12431                                  
 12432 00001207 B416                    		mov	ah, 16h
 12433 00001209 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12434                                  					; DL = drive to	check
 12435                                  					; Return: AH = disk change status
 12436 0000120B 7308                    		jnb	short ChangeLnChkRet
 12437 0000120D 53                      		push	bx
 12438 0000120E BB4000                  		mov	bx, 40h		; fchanged
 12439                                  					; Update flag in BDS for this
 12440                                  					; physical drive
 12441 00001211 E8A806                  		call	set_changed_dl
 12442 00001214 5B                      		pop	bx
 12443                                  ChangeLnChkRet:				
 12444 00001215 C3                      		retn
 12445                                  
 12446                                  ; ---------------------------------------------------------------------------
 12447                                  
 12448                                  ; 16/10/2022
 12449                                  
 12450                                  ; ==========================================================================
 12451                                  ;	GetAccessFlag
 12452                                  ; ==========================================================================
 12453                                  ;
 12454                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12455                                  ;
 12456                                  ; INPUT :
 12457                                  ;	    ES:di -> bds table
 12458                                  ;
 12459                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12460                                  ;						 = 1 if disk i/o allowed.
 12461                                  ; ==========================================================================
 12462                                  
 12463                                  		; 19/10/2022
 12464                                  GetAccessFlag:				
 12465 00001216 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12466 0000121A C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12467                                  		;mov	al, 0		; Assume result	is unformatted
 12468                                  		; 10/12/2022
 12469 0000121D 28C0                    		sub	al, al
 12470                                  		; 10/12/2022
 12471 0000121F 26F6452402              		test	byte [es:di+36], 02h
 12472                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12473                                  					; unformatted_media
 12474 00001224 7502                    		jnz	short GafDone	; Done if unformatted
 12475 00001226 FEC0                    		inc	al		; Return true for formatted
 12476                                  
 12477                                  GafDone:				
 12478 00001228 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12479 0000122B C3                      		retn
 12480                                  ; ---------------------------------------------------------------------------
 12481                                  
 12482                                  ; 16/10/2022
 12483                                  
 12484                                  ; ==========================================================================
 12485                                  ;	SetAccessFlag
 12486                                  ; ==========================================================================
 12487                                  ;
 12488                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12489                                  ;
 12490                                  ; input :
 12491                                  ;	    ES:di -> bds table
 12492                                  ;
 12493                                  ; output:   unformtted_media bit modified according to the user request
 12494                                  ; ==========================================================================
 12495                                  
 12496                                  		; 19/10/2022
 12497                                  SetAccessFlag:				
 12498 0000122C C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12499 00001230 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12500                                  		; 10/12/2022
 12501 00001233 26806524FD              		and	byte [es:di+36], 0FDh
 12502                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12503                                  					; ~unformatted_media
 12504 00001238 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12505 0000123C 7505                    		jnz	short saf_Done
 12506                                  		; 10/12/2022
 12507 0000123E 26804D2402              		or	byte [es:di+36], 02h
 12508                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12509                                  					; unformatted_media
 12510                                  saf_Done:				
 12511 00001243 C3                      		retn
 12512                                  ; ---------------------------------------------------------------------------
 12513                                  
 12514                                  ; 16/10/2022
 12515                                  
 12516                                  ; ==========================================================================
 12517                                  ; Ioctl_Support_Query
 12518                                  ; ==========================================================================
 12519                                  ;
 12520                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12521                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12522                                  ; device attributes specifies if this function is supported.
 12523                                  ;
 12524                                  ; ==========================================================================
 12525                                  
 12526                                  		; 19/10/2022
 12527                                  ioctl_support_query:
 12528 00001244 06                      		push	es
 12529 00001245 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12530 00001249 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12531                                  					; AL ==	Major, AH == Minor
 12532 0000124D 3C08                    		cmp	al, 8		; IOC_DC
 12533                                  					; See if major code is 8
 12534 0000124F 7513                    		jnz	short nosupport
 12535 00001251 0E                      		push	cs
 12536 00001252 07                      		pop	es
 12537 00001253 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12538                                  		; 10/12/2022
 12539 00001256 BF[370C]                		mov	di, IOC_DC_Table
 12540                                  		;mov	di, 0C60h	; IOC_DC_Table
 12541                                  					; at 2C7h:0C60h	= 70h:31D0h
 12542 00001259 86C4                    		xchg	al, ah		; Put minor code in AL
 12543 0000125B F2AE                    		repne scasb		; Scan for minor code in AL
 12544 0000125D 7505                    		jnz	short nosupport	; it was not found
 12545 0000125F B80001                  		mov	ax, 100h
 12546                                  		; 10/12/2022
 12547                                  		; (jump to ioctlsupexit is not required)
 12548                                  		;jmp	short $+2	; ioctlsupexit
 12549                                  					; Signal ioctl is supported
 12550                                  		;;jmp	short ioctlsupexit
 12551                                  ; ---------------------------------------------------------------------------
 12552                                  ioctlsupexit:				
 12553 00001262 07                      		pop	es
 12554                                  		; 10/12/2022
 12555                                  		; cf = 0
 12556                                  		;clc
 12557 00001263 C3                      		retn
 12558                                  ; ---------------------------------------------------------------------------
 12559                                  nosupport:				
 12560 00001264 07                      		pop	es
 12561 00001265 E96DEE                  		jmp	bc_cmderr
 12562                                  ; ---------------------------------------------------------------------------
 12563                                  
 12564                                  ; 16/10/2022
 12565                                  
 12566                                  ; ==========================================================================
 12567                                  ;	GetMediaSenseStatus
 12568                                  ; ==========================================================================
 12569                                  ;
 12570                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12571                                  ;	    diskette drive and whether the media is the default type
 12572                                  ;	    for that drive. (default type means the max size for that
 12573                                  ;	    drive)
 12574                                  ;
 12575                                  ; INPUT :   ES:DI -> BDS table
 12576                                  ; OUTPUT:   If carry clear
 12577                                  ;	    DS:BX -> Updated IOCtlPacket
 12578                                  ;
 12579                                  ;			 Special Function at offset 0:
 12580                                  ;				0	- Media detected is not default type
 12581                                  ;				1	- Media detected is default type
 12582                                  ;
 12583                                  ;			 Device Type at offset 1:
 12584                                  ;				2       - 720K 3.5" 80 tracks
 12585                                  ;				7	- 1.44M 3.5" 80 tracks
 12586                                  ;				9	- 2.88M 3.5" 80 tracks
 12587                                  ;
 12588                                  ; Error Codes returned in AX if carry set:
 12589                                  ;
 12590                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12591                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12592                                  ;				  the media is really unkown, any error
 12593                                  ;				  other than "media not present"
 12594                                  ; 
 12595                                  ; ==========================================================================
 12596                                  
 12597                                  		; 19/10/2022
 12598                                  SenseMediaType:				
 12599 00001268 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12600 0000126C C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12601                                  		; 10/10/2022
 12602                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12603 0000126F 31D2                    		xor	dx, dx
 12604 00001271 8917                    		mov	[bx], dx ; 0
 12605                                  		;
 12606 00001273 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12607                                  					; Get int 13h drive number from	BDS
 12608                                  		; 10/12/2022
 12609                                  		;xor	dh, dh		; DX = physical	drive number
 12610 00001277 B420                    		mov	ah, 20h		; Get Media Type function
 12611                                  					; If no	carry media type in AL
 12612 00001279 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12613 0000127B 7216                    		jb	short MediaSenseEr ; error code	in AH
 12614 0000127D FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12615                                  DetermineMediaType:			
 12616 0000127F FEC8                    		dec	al
 12617 00001281 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12618 00001283 740A                    		jz	short GotMediaType
 12619 00001285 0404                    		add	al, 4
 12620 00001287 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12621 00001289 7404                    		jz	short GotMediaType
 12622 0000128B 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12623 0000128D 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12624                                  GotMediaType:				
 12625 0000128F 884701                  		mov	[bx+1],	al	; Save the return value
 12626                                  		; 10/12/2022
 12627                                  		; cf = 0
 12628                                  		;clc			; Signal success
 12629 00001292 C3                      		retn
 12630                                  ; ---------------------------------------------------------------------------
 12631                                  
 12632                                  MediaSenseEr:				
 12633 00001293 80FC32                  		cmp	ah, 32h		; See if not default media error
 12634 00001296 74E7                    		jz	short DetermineMediaType ; Not really an error
 12635 00001298 B002                    		mov	al, 2		; Now assume drive not ready
 12636 0000129A 80FC31                  		cmp	ah, 31h		; See if media was present
 12637 0000129D 7402                    		jz	short SenseErrExit ; Return drive not ready
 12638                                  UnknownMediaType:			
 12639 0000129F B007                    		mov	al, 7		; Just don't know the media type
 12640                                  SenseErrExit:				
 12641 000012A1 B481                    		mov	ah, 81h		; Signal error return
 12642 000012A3 F9                      		stc
 12643 000012A4 C3                      		retn
 12644                                  
 12645                                  ; ---------------------------------------------------------------------------
 12646                                  		; 10/12/2022
 12647                                  		;db    0
 12648                                  ; ---------------------------------------------------------------------------
 12649                                  
 12650                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12651                                  
 12652                                  ;-----------------------------------------------------------------------------
 12653                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12654                                  ;-----------------------------------------------------------------------------
 12655                                  ; 16/03/2019 - Retro DOS v4.0
 12656                                  
 12657                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12658                                  ;	after booting. this allows testing and implementation of custom int_13
 12659                                  ;	handlers, without giving up ms-dos error recovery
 12660                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12661                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12662                                  ;	exit:	orig13	== address of new int_13 handler
 12663                                  ;		ds:dx	== old orig13 value
 12664                                  ;		es:bx	== old old13  value
 12665                                  ;
 12666                                  ; int 2f handler for external block drivers to communicate with the internal
 12667                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12668                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12669                                  ; dsk_entry, the entry point for all disk requests.
 12670                                  ;
 12671                                  ; on exit from this driver, we will return to the external driver
 12672                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12673                                  ; this scheme allows us to have a small external device driver, and makes
 12674                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12675                                  ; since we only need to make changes in one place (most of the time).
 12676                                  ;
 12677                                  ;   ax=800h - check for installed handler - reserved
 12678                                  ;   ax=801h - install the bds into the linked list
 12679                                  ;   ax=802h - dos request
 12680                                  ;   ax=803h - return bds table starting pointer in ds:di
 12681                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12682                                  ;	    problem. bds table is going to be used to get head/sector
 12683                                  ;	    informations without calling generic ioctl get device parm call.)
 12684                                  
 12685                                  ;BIOSSEGMENT equ 70h
 12686                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12687                                  
 12688                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12689                                  
 12690                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12691 000012A5 80FC13                  		cmp	ah, 13h
 12692 000012A8 7413                    		jz	short int2f_replace_int13
 12693 000012AA 80FC08                  		cmp	ah, 8
 12694 000012AD 7431                    		jz	short mine
 12695                                  
 12696                                  ; Check for WIN386 startup and return the BIOS instance data
 12697                                  
 12698 000012AF 80FC16                  		cmp	ah, 16h		; MultWin386
 12699 000012B2 746C                    		jz	short win386call
 12700 000012B4 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12701 000012B7 7503                    		jnz	short i2f_handler_iret
 12702 000012B9 E99700                  		jmp	handle_multmult
 12703                                  ; ---------------------------------------------------------------------------
 12704                                  
 12705                                  i2f_handler_iret:			
 12706 000012BC CF                      		iret
 12707                                  ; ---------------------------------------------------------------------------
 12708                                  
 12709                                  int2f_replace_int13:			
 12710 000012BD 50                      		push	ax	; free up a register for caller's ds
 12711 000012BE 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12712                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12713                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12714                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12715 000012C0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12716                                  		; 19/10/2022
 12717                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12718                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12719                                  		;push	word ptr ds:Old13	; return them to caller
 12720                                  		;push	word ptr ds:Old13+2
 12721                                  		
 12722                                  		; 02/09/2023 (PCDOS 7.1)
 12723                                  		;push	word [Orig13]
 12724 000012C5 FF36[B600]              		push	word [Orig13+2]
 12725                                  		;push	word [Old13]
 12726 000012C9 FF36[0801]              		push	word [Old13+2]
 12727                                  
 12728                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12729                                  		;mov	word ptr ds:Orig13+2, ax
 12730                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12731                                  		;mov	word ptr ds:Old13+2, es
 12732                                  		
 12733                                  		;mov	[Orig13], dx
 12734                                  		; 02/09/2023
 12735 000012CD 8716[B400]              		xchg	dx, [Orig13]
 12736 000012D1 A3[B600]                		mov	[Orig13+2], ax
 12737                                  		;mov	[Old13], bx
 12738                                  		; 02/09/2023
 12739 000012D4 871E[0601]              		xchg	bx, [Old13]
 12740 000012D8 8C06[0801]              		mov	[Old13+2], es
 12741                                  
 12742 000012DC 07                      		pop	es			; es:bx := old old13 vector
 12743                                  		; 02/09/2023
 12744                                  		;pop	bx
 12745 000012DD 1F                      		pop	ds			; ds:dx := old orig13 vector
 12746                                  		;pop	dx ; 02/09/2023
 12747 000012DE 58                      		pop	ax
 12748                                  i2f_iret:
 12749 000012DF CF                      		iret
 12750                                  ; ---------------------------------------------------------------------------
 12751                                  
 12752                                  mine:					
 12753 000012E0 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12754 000012E2 73FB                    		jnb	short i2f_iret
 12755 000012E4 08C0                    		or	al, al			; a get installed state request?
 12756 000012E6 7503                    		jnz	short disp_func
 12757 000012E8 B0FF                    		mov	al, 0FFh
 12758                                  		;jmp	short i2f_iret
 12759                                  		; 02/09/2023
 12760 000012EA CF                      		iret
 12761                                  ; ---------------------------------------------------------------------------
 12762                                  
 12763                                  disp_func:				
 12764 000012EB 3C01                    		cmp	al, 1			; request for installing bds?
 12765 000012ED 7418                    		jz	short do_subfun_01
 12766 000012EF 3C03                    		cmp	al, 3			; get bds vector?
 12767 000012F1 7423                    		jz	short do_get_bds_vector
 12768                                  
 12769                                  ; set up pointer to request packet
 12770                                  
 12771 000012F3 1E                      		push	ds
 12772 000012F4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12773                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12774                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12775                                  		; 19/10/2022
 12776                                  		;mov	word ptr ds:ptrsav, bx
 12777                                  		;mov	word ptr ds:ptrsav+2, es
 12778 000012F9 891E[1200]              		mov	[ptrsav], bx
 12779 000012FD 8C06[1400]              		mov	[ptrsav+2], es
 12780 00001301 1F                      		pop	ds
 12781                                  		;jmp	far ptr	i2f_dskentry
 12782                                  		; 17/10/2022
 12783                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12784 00001302 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12785                                  					; NOTE: jump to a FAR function, not an
 12786                                  					;  IRET type function. Callers of
 12787                                  					;  this int2f subfunction will have
 12788                                  					;  to be careful to do a popf
 12789                                  
 12790                                  ; ---------------------------------------------------------------------------
 12791                                  
 12792                                  do_subfun_01:
 12793 00001307 06                      		push	es
 12794 00001308 1E                      		push	ds
 12795 00001309 1E                      		push	ds
 12796 0000130A 07                      		pop	es
 12797                                  		; 17/10/2022
 12798 0000130B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12799                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12800                                  					; point	ds: -> Bios_Data
 12801 00001310 E8BC03                  		call	install_bds
 12802 00001313 1F                      		pop	ds
 12803 00001314 07                      		pop	es
 12804                                  		;jmp	short i2f_iret
 12805                                  		; 02/09/2023
 12806 00001315 CF                      		iret
 12807                                  ; ---------------------------------------------------------------------------
 12808                                  
 12809                                  do_get_bds_vector:
 12810                                  		; 17/10/2022
 12811 00001316 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12812                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12813 0000131B C53E[1901]              		lds	di, [start_bds]
 12814                                  		;lds	di, ds:start_bds
 12815                                  ;ii2f_iret:	; 10/12/2022
 12816                                  		;jmp	short i2f_iret
 12817                                  		; 02/09/2023
 12818 0000131F CF                      		iret
 12819                                  ; ---------------------------------------------------------------------------
 12820                                  
 12821                                  ; 17/10/2022
 12822                                  ; 16/10/2022
 12823                                  
 12824                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12825                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12826                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12827                                  
 12828                                  win386call:				
 12829 00001320 1E                      		push	ds
 12830 00001321 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12831                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12832                                  					; at 2C7h:30h =	70h:25A0h
 12833 00001326 3C05                    		cmp	al, 5		; Win386_Init
 12834                                  					; is it	win386 initializing?
 12835 00001328 7410                    		jz	short Win386Init
 12836 0000132A 3C06                    		cmp	al, 6		; Win386_Exit
 12837                                  					; is it	win386 exiting?
 12838 0000132C 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12839                                  		; 12/12/2022
 12840 0000132E F6C201                  		test	dl, 1
 12841                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12842 00001331 751E                    		jnz	short win_iret	; if not win386, then continue
 12843                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12844 00001333 8026[CE08]00            		and	byte [IsWin386], 0 
 12845 00001338 EB17                    		jmp	short win_iret
 12846                                  ; ---------------------------------------------------------------------------
 12847                                  
 12848                                  Win386Init:	
 12849                                  		; 12/12/2022
 12850 0000133A F6C201                  		test	dl, 1			
 12851                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12852 0000133D 7512                    		jnz	short win_iret	; if not win386, then continue
 12853                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12854 0000133F 800E[CE08]01            		or	byte [IsWin386], 1
 12855                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12856                                  		;mov	word ptr ds:SI_Next+2, es
 12857 00001344 891E[9C08]              		mov	[SI_Next], bx
 12858 00001348 8C06[9E08]              		mov	[SI_Next+2], es
 12859                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12860 0000134C BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12861 0000134F 1E                      		push	ds
 12862 00001350 07                      		pop	es
 12863                                  win_iret:				
 12864 00001351 1F                      		pop	ds
 12865                                  ii2f_iret:	; 10/12/2022
 12866                                  		;jmp	short i2f_iret	; return back up the chain
 12867                                  		; 02/09/2023
 12868 00001352 CF                      		iret
 12869                                  ; ---------------------------------------------------------------------------
 12870                                  
 12871                                  handle_multmult:			
 12872 00001353 3C01                    		cmp	al, 1
 12873 00001355 7514                    		jnz	short try_2
 12874 00001357 1E                      		push	ds
 12875 00001358 E84500                  		call	HMAPtr		; get offset of free HMA
 12876                                  		; 10/12/2022
 12877                                  		;xor	bx, bx
 12878                                  		;dec	bx
 12879 0000135B BBFFFF                  		mov	bx, 0FFFFh
 12880 0000135E 8EC3                    		mov	es, bx		; seg of HMA
 12881 00001360 89FB                    		mov	bx, di
 12882 00001362 F7D3                    		not	bx
 12883 00001364 09DB                    		or	bx, bx
 12884 00001366 7401                    		jz	short try_1
 12885 00001368 43                      		inc	bx
 12886                                  try_1:
 12887 00001369 1F                      		pop	ds
 12888                                  		;jmp	short ii2f_iret
 12889                                  		; 02/09/2023
 12890 0000136A CF                      		iret
 12891                                  ; ---------------------------------------------------------------------------
 12892                                  
 12893                                  try_2:					
 12894 0000136B 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12895 0000136D 7530                    		jnz	short try_3
 12896 0000136F 1E                      		push	ds
 12897                                  		; 10/12/2022
 12898                                  		;xor	di, di
 12899                                  		;dec	di
 12900 00001370 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12901 00001373 8EC7                    		mov	es, di
 12902 00001375 E82800                  		call	HMAPtr		; get offset of free HMA
 12903 00001378 83FFFF                  		cmp	di, 0FFFFh
 12904 0000137B 7421                    		jz	short InsuffHMA
 12905 0000137D F7DF                    		neg	di		; free space in HMA
 12906 0000137F 39FB                    		cmp	bx, di
 12907 00001381 7605                    		jbe	short try_4
 12908                                  		; 10/12/2022
 12909                                  		;sub	di, di
 12910                                  		;dec	di
 12911 00001383 BFFFFF                  		mov	di, 0FFFFh
 12912                                  		;jmp	short InsuffHMA
 12913                                  		; 02/09/2023
 12914 00001386 1F                      		pop	ds
 12915 00001387 CF                      		iret
 12916                                  ; ---------------------------------------------------------------------------
 12917                                  
 12918                                  try_4:					
 12919                                  		;mov	di, ds:FreeHMAPtr
 12920 00001388 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12921 0000138C 83C30F                  		add	bx, 15
 12922                                  		;and	bx, 0FFF0h
 12923                                  		; 10/12/2022
 12924 0000138F 80E3F0                  		and	bl, 0F0h
 12925                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12926 00001392 011E[F508]              		add	[FreeHMAPtr], bx
 12927 00001396 7506                    		jnz	short InsuffHMA
 12928 00001398 C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12929                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12930                                  					; no more HMA if we have wrapped
 12931                                  InsuffHMA:
 12932 0000139E 1F                      		pop	ds
 12933                                  		; 10/12/2022
 12934                                  try_3:		
 12935                                  		;jmp	short ii2f_iret
 12936                                  		; 02/09/2023
 12937 0000139F CF                      		iret
 12938                                  ; ---------------------------------------------------------------------------
 12939                                  
 12940                                  		; 10/12/2022
 12941                                  ;try_3:					
 12942                                  		;jmp	ii2f_iret
 12943                                  
 12944                                  ; =============== S U B	R O U T	I N E =======================================
 12945                                  
 12946                                  ; 16/10/2022
 12947                                  
 12948                                  ;--------------------------------------------------------------------------
 12949                                  ;
 12950                                  ; procedure : HMAPtr
 12951                                  ;
 12952                                  ;		Gets the offset of the free HMA area ( with respect to
 12953                                  ;							seg ffff )
 12954                                  ;		If DOS has not moved high, tries to move DOS high.
 12955                                  ;		In the course of doing this, it will allocate all the HMA
 12956                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12957                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12958                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12959                                  ;
 12960                                  ;	RETURNS : offset of free HMA in DI
 12961                                  ;		  BIOS_DATA, seg in DS
 12962                                  ;
 12963                                  ;--------------------------------------------------------------------------
 12964                                  
 12965                                  		; 17/10/2022
 12966                                  HMAPtr:
 12967 000013A0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12968                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12969 000013A5 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12970                                  		;mov	di, ds:FreeHMAPtr
 12971 000013A9 83FFFF                  		cmp	di, 0FFFFh
 12972 000013AC 750F                    		jnz	short HMAPtr_retn
 12973 000013AE 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12974                                  		;cmp	ds:SysinitPresent, 0
 12975 000013B3 7408                    		jz	short HMAPtr_retn
 12976 000013B5 FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12977                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12978 000013B9 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12979                                  		;mov	di, ds:FreeHMAPtr
 12980                                  HMAPtr_retn:				
 12981 000013BD C3                      		retn
 12982                                  
 12983                                  ; =============== S U B	R O U T	I N E =======================================
 12984                                  
 12985                                  ; 16/10/2022
 12986                                  
 12987                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12988                                  ; but go ahead and update direction flag, si, & di
 12989                                  
 12990                                  move_sector:
 12991                                  
 12992                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12993                                  ; any segment to be a fault. Theoretically, this could be handled
 12994                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12995                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12996                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12997                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12998                                  ; mode. Their fault handler was only designed to deal with one
 12999                                  ; special case which occurred in a magazine benchmark, but didn't
 13000                                  ; handle the general case worth beans.
 13001                                  ;
 13002                                  ; Simply changing this code to do a byte loop would work okay but
 13003                                  ; would involve a general case performance hit. Therefore, we'll
 13004                                  ; check for either source or destination offsets being within one
 13005                                  ; sector of the end of their segments and only in that case fall
 13006                                  ; back to a byte move.
 13007                                  
 13008 000013BE FC                      		cld
 13009 000013BF 51                      		push	cx
 13010 000013C0 B90001                  		mov	cx, 256
 13011 000013C3 81FE00FE                		cmp	si, 0FE00h
 13012 000013C7 770A                    		ja	short movsec_bytes
 13013 000013C9 81FF00FE                		cmp	di, 0FE00h
 13014 000013CD 7704                    		ja	short movsec_bytes
 13015 000013CF F3A5                    		rep movsw
 13016 000013D1 59                      		pop	cx
 13017 000013D2 C3                      		retn
 13018                                  ; ---------------------------------------------------------------------------
 13019                                  
 13020                                  movsec_bytes:				
 13021 000013D3 D1E1                    		shl	cx, 1
 13022 000013D5 F3A4                    		rep movsb
 13023 000013D7 59                      		pop	cx
 13024 000013D8 C3                      		retn
 13025                                  
 13026                                  ; =============== S U B	R O U T	I N E =======================================
 13027                                  
 13028                                  ; 16/10/2022
 13029                                  
 13030                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 13031                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 13032                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 13033                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 13034                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 13035                                  ; but we break down a request when we get an ecc or dma error into several
 13036                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 13037                                  ; number of sectors on a track on the medium, and the request would fail.
 13038                                  ;
 13039                                  ; input conditions:
 13040                                  ;	all registers set up for an int 13 request.
 13041                                  ;
 13042                                  ; output:
 13043                                  ;	dh - contains starting head number for request
 13044                                  ;	cx - contains starting sector and cylinder numbers
 13045                                  ;	(the above may or may not have been changed, and are 0-based)
 13046                                  ;	all other registers preserved.
 13047                                  
 13048                                  check_wrap:	
 13049 000013D9 50                      		push	ax
 13050 000013DA 53                      		push	bx
 13051 000013DB 06                      		push	es
 13052 000013DC 57                      		push	di
 13053 000013DD E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 13054 000013E0 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 13055                                  		; 12/12/2022
 13056 000013E2 26F6452301              		test	byte [es:di+23h], 1
 13057                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13058 000013E7 7457                    		jz	short no_wrap	; no wrapping for removable media
 13059 000013E9 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13060 000013ED 89C8                    		mov	ax, cx
 13061 000013EF 83E03F                  		and	ax, 3Fh		; extract sector number
 13062 000013F2 39D8                    		cmp	ax, bx		; are we going to wrap?
 13063 000013F4 764A                    		jbe	short no_wrap
 13064 000013F6 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13065                                  
 13066                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13067                                  ; last sector on that track.
 13068                                  
 13069 000013F8 08E4                    		or	ah, ah
 13070 000013FA 7503                    		jnz	short not_on_bound
 13071                                  		; 18/12/2022
 13072 000013FC 48                      		dec	ax ; *
 13073 000013FD 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13074                                  					; if on	boundary
 13075                                  		;dec	al ; *		; also decrement # of head wraps
 13076                                  not_on_bound:				
 13077 000013FF 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13078 00001402 08E1                    		or	cl, ah		; or in	new sector #
 13079 00001404 30E4                    		xor	ah, ah		; ax = # of head wraps
 13080 00001406 40                      		inc	ax
 13081 00001407 00F0                    		add	al, dh		; add in starting head #
 13082 00001409 80D400                  		adc	ah, 0		; catch	any carry
 13083                                  		; 02/09/2023
 13084 0000140C 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13085 00001410 39D8                    		cmp	ax, bx
 13086                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13087                                  					; are we going to wrap around a	head?
 13088 00001412 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13089 00001414 52                      		push	dx		; preserve drive number and head number
 13090 00001415 31D2                    		xor	dx, dx
 13091                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13092 00001417 F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13093                                  
 13094                                  ; careful here! if new head # is 0, then we are on the last head.
 13095                                  
 13096 00001419 09D2                    		or	dx, dx
 13097 0000141B 7507                    		jnz	short no_head_bound
 13098 0000141D 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13099                                  
 13100                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13101                                  
 13102 0000141F 09C0                    		or	ax, ax
 13103 00001421 7401                    		jz	short no_head_bound
 13104 00001423 48                      		dec	ax		; reduce number	of cylinder wraps
 13105                                  no_head_bound:				
 13106 00001424 88D7                    		mov	bh, dl		; bh has new head number
 13107 00001426 5A                      		pop	dx		; restore drive number and head number
 13108 00001427 FECF                    		dec	bh		; get it 0-based
 13109 00001429 88FE                    		mov	dh, bh		; set up new head number in dh
 13110 0000142B 88CF                    		mov	bh, cl
 13111 0000142D 80E73F                  		and	bh, 3Fh		; preserve sector number
 13112 00001430 B306                    		mov	bl, 6
 13113 00001432 86CB                    		xchg	cl, bl
 13114 00001434 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13115 00001436 00C5                    		add	ch, al		; add in cylinder wrap
 13116 00001438 10E3                    		adc	bl, ah		; add in high byte
 13117 0000143A D2E3                    		shl	bl, cl		; move up to ms	end
 13118 0000143C 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13119 0000143E 08F9                    		or	cl, bh		; or in	sector number
 13120                                  no_wrap:				
 13121 00001440 F8                      		clc
 13122 00001441 5F                      		pop	di
 13123 00001442 07                      		pop	es
 13124 00001443 5B                      		pop	bx
 13125 00001444 58                      		pop	ax
 13126 00001445 C3                      		retn
 13127                                  ; ---------------------------------------------------------------------------
 13128                                  
 13129                                  no_wrap_head:				
 13130 00001446 88C6                    		mov	dh, al		; do not lose new head number
 13131 00001448 FECE                    		dec	dh		; get it 0-based
 13132 0000144A EBF4                    		jmp	short no_wrap
 13133                                  
 13134                                  ; =============== S U B	R O U T	I N E =======================================
 13135                                  
 13136                                  ; 16/10/2022
 13137                                  
 13138                                  ; this is a special version of the bds lookup code which is
 13139                                  ; based on physical drives rather than the usual logical drives
 13140                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13141                                  ; otherwise carry is clear
 13142                                  ;
 13143                                  ; guaranteed to trash no registers except es:di
 13144                                  
 13145                                  		; 19/10/2022
 13146                                  find_bds:	
 13147 0000144C C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13148                                  fbds_1:					
 13149 00001450 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13150 00001454 7409                    		jz	short fdbs_2
 13151 00001456 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13152                                  					; go to next bds
 13153 00001459 83FFFF                  		cmp	di, 0FFFFh
 13154 0000145C 75F2                    		jnz	short fbds_1
 13155 0000145E F9                      		stc
 13156                                  fdbs_2:					
 13157 0000145F C3                      		retn
 13158                                  
 13159                                  ; =============== S U B	R O U T	I N E =======================================
 13160                                  
 13161                                  ; 16/10/2022
 13162                                  		; 17/10/2022
 13163                                  doint:
 13164                                  		; 10/12/2022
 13165 00001460 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13166                                  					; get physical drive number
 13167                                  		; 19/10/2022 - Temporary !
 13168                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13169                                  		
 13170 00001463 30E4                    		xor	ah, ah
 13171 00001465 08C0                    		or	al, al
 13172 00001467 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13173                                  		; 10/12/2022
 13174 00001469 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13175                                  					; get request code
 13176                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13177 0000146C FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13178                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13179 0000146F 9D                      		popf
 13180                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13181                                  		; 17/10/2022
 13182 00001470 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13183                                  		;;call	call_orig13	; call far 70h:797h
 13184                                  					; call far KERNEL_SEGMENT:call_orig13
 13185 00001475 9C                      		pushf
 13186                                  		; 10/12/2022
 13187 00001476 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13188                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13189                                  dointdone:				
 13190 00001479 C3                      		retn
 13191                                  
 13192                                  ;----------------------------------------------------------------------------
 13193                                  
 13194                                  ; 16/10/2022
 13195                                  
 13196                                  ; this is the true int 13 handler. we parse the request to see if there is
 13197                                  ; a dma violation. if so, depending on the function, we:
 13198                                  ;   read/write break the request into three pieces and move the middle one
 13199                                  ;	       into our internal buffer.
 13200                                  ;
 13201                                  ;   format     copy the format table into the buffer
 13202                                  ;   verify     point the transfer address into the buffer
 13203                                  ;
 13204                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13205                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13206                                  ; the offending sector into the buffer below and do the i/o from there.
 13207                                  
 13208                                  ;struc INT13FRAME
 13209                                  ;.oldbp: resw
 13210                                  ;.oldax: resw 
 13211                                  ;.oldbx: resw
 13212                                  ;.oldcx: resw
 13213                                  ;.olddx: resw
 13214                                  ;.oldds: resw	; now we save caller's ds, too
 13215                                  ;.olddd: resd
 13216                                  ;.oldf:	resw
 13217                                  ;end struc
 13218                                  
 13219                                  ;----------------------------------------------------------------------------
 13220                                  
 13221                                  ;   entry conditions:
 13222                                  ;	ah = function
 13223                                  ;	al = number of sectors
 13224                                  ;	es:bx = dma address
 13225                                  ;	cx = packed track and sector
 13226                                  ;	dx = head and drive
 13227                                  ;   output conditions:
 13228                                  ;	no dma violation.
 13229                                  
 13230                                  ;	use extreme caution when working with this code. In general,
 13231                                  ;	  all registers are hot at all times.
 13232                                  ;
 13233                                  ;	question:  does this code handle cases where dma errors
 13234                                  ;	  occur during ecc retries, and where ecc errors occur during
 13235                                  ;	  dma breakdowns???? Hmmmmm.
 13236                                  
 13237                                  ;----------------------------------------------------------------------------
 13238                                  
 13239                                  ; ---------------------------------------------------------------------------
 13240                                  
 13241 0000147A 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13242                                  
 13243                                  ; 17/10/2022
 13244                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13245                                  ; 09/12/2022
 13246                                  DTYPEARRAY equ dtype_array
 13247                                  
 13248                                  ; ---------------------------------------------------------------------------
 13249                                  
 13250                                  ; stick some special stuff out of mainline
 13251                                  
 13252                                  ; we know we're doing a format command. if we have changeline
 13253                                  ; support, then flag some special changed stuff and set changed
 13254                                  ; by format bit for all logical drives using this physical drive
 13255                                  
 13256                                  format_special_stuff:			
 13257 0000147E 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 13258 00001483 7459                    		jz	short format_special_stuff_done ; brif not
 13259 00001485 53                      		push	bx
 13260 00001486 BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13261 00001489 E83004                  		call	set_changed_dl	; indicate that media changed by format
 13262 0000148C 5B                      		pop	bx
 13263 0000148D EB4F                    		jmp	short format_special_stuff_done
 13264                                  ; ---------------------------------------------------------------------------
 13265                                  
 13266                                  ; 16/10/2022
 13267                                  
 13268                                  ; we know we've got ec35's on the system. Now see if we're doing
 13269                                  ; a floppy. If so, create a mask and see if this particular
 13270                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13271                                  
 13272                                  		; 19/10/2022
 13273                                  ec35_special_stuff:			
 13274 0000148F 84D2                    		test	dl, dl		; floppy or hard disk?
 13275 00001491 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13276 00001493 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13277 00001494 51                      		push	cx
 13278 00001495 88D1                    		mov	cl, dl		; turn drive number into bit map
 13279 00001497 B001                    		mov	al, 1		; assume drive 0
 13280 00001499 D2E0                    		shl	al, cl		; shift	over correct number of times
 13281 0000149B 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13282 0000149F 59                      		pop	cx
 13283 000014A0 58                      		pop	ax
 13284 000014A1 7442                    		jz	short ec35_special_stuff_done
 13285                                  					; done if this floppy is not an	ec35
 13286 000014A3 53                      		push	bx		; free up a far	pointer	(es:bx)
 13287 000014A4 06                      		push	es
 13288                                  		; 17/10/2022
 13289 000014A5 2EC41E[7A14]            		les	bx, [cs:DTYPEARRAY]
 13290                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13291                                  					; 0070h:3A65h =	2C7h:14F5h
 13292 000014AA 00D3                    		add	bl, dl
 13293 000014AC 80D700                  		adc	bh, 0		; find entry for this drive
 13294 000014AF 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13295                                  					; (360k	disk in	360k drive,
 13296                                  					; no double-stepping, 250 kbs transfer rate)
 13297 000014B3 07                      		pop	es
 13298 000014B4 5B                      		pop	bx
 13299 000014B5 EB2E                    		jmp	short ec35_special_stuff_done
 13300                                  ; ---------------------------------------------------------------------------
 13301                                  
 13302                                  ; 16/10/2022
 13303                                  
 13304                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13305                                  ; this function does not reset the common buses after the execution.
 13306                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13307                                  ; will issue ah=1 (read status) call to reset the buses.
 13308                                  
 13309                                  ps2_special_stuff:			
 13310 000014B7 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13311                                  					; read driver parm ?
 13312 000014BC 7407                    		jz	short ps2_30_problem
 13313 000014BE 803E[1E00]15            		cmp	byte [prevoper], 15h
 13314                                  					; apparently function 15h fails, too
 13315 000014C3 752D                    		jnz	short ps2_special_stuff_done
 13316                                  ps2_30_problem:				
 13317 000014C5 50                      		push	ax
 13318 000014C6 B401                    		mov	ah, 1
 13319                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13320                                  		; 17/10/2022
 13321 000014C8 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13322                                  		;call	call_orig13	; call far 70:797h
 13323                                  					; call far KERNEL_SEGMENT:call_orig13
 13324 000014CD 58                      		pop	ax
 13325 000014CE EB22                    		jmp	short ps2_special_stuff_done
 13326                                  ; ---------------------------------------------------------------------------
 13327                                  
 13328                                  ; 17/10/2022
 13329                                  ; 16/10/2022
 13330                                  
 13331                                  ; here is the actual int13 handler
 13332                                  
 13333                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13334                                  
 13335                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13336                                  ; vectoring up here from Bios_Data
 13337                                  
 13338                                  		; 19/10/2022
 13339 000014D0 1E                      		push	ds		; save caller's ds register first thing
 13340                                  		;;mov	ds, word [cs:0030h]
 13341                                  					; and set up our own ds -> Bios_Data
 13342 000014D1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13343                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13344                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13345                                  
 13346                                  ; let the operation proceed. if there is a dma violation, then we do things
 13347                                  
 13348 000014D6 A3[1E00]                		mov	[prevoper], ax	; save request
 13349 000014D9 80FC05                  		cmp	ah, 5		; romformat
 13350 000014DC 74A0                    		jz	short format_special_stuff
 13351                                  					; go do special stuff for format
 13352                                   format_special_stuff_done:		
 13353 000014DE 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13354 000014E3 75AA                    		jnz	short ec35_special_stuff
 13355                                  					; go handle it out of line if so
 13356                                  ec35_special_stuff_done:
 13357                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13358 000014E5 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13359                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13360                                  		
 13361 000014EA 9C                      		pushf			; save result flags
 13362                                  		
 13363 000014EB 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13364                                  					; mdl_ps2_30
 13365 000014F0 74C5                    		jz	short ps2_special_stuff
 13366                                  					; exit mainline to address special
 13367                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13368 000014F2 9D                      		popf
 13369 000014F3 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13370                                  ret_from_i13:				
 13371 000014F5 1F                      		pop	ds
 13372 000014F6 CA0200                  		retf	2		; restore ds &	iret w/flags
 13373                                  ; ---------------------------------------------------------------------------
 13374                                  
 13375                                  ; most of our code exits through here. If carry isn't set, then
 13376                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13377                                  ; a changeline error.
 13378                                  
 13379                                  i13ret_ck_chglinerr:			
 13380 000014F9 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13381                                  i13_ret_error:				
 13382 000014FB 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13383 000014FE 7513                    		jnz	short int13b	; skip if wrong	error
 13384 00001500 08D2                    		or	dl, dl		; is this for the hard disk?
 13385 00001502 780F                    		js	short int13b	; yes, ignore
 13386 00001504 803E[7700]00            		cmp	byte [fhave96], 0
 13387 00001509 7408                    		jz	short int13b	; just in case ROM returned this
 13388                                  					; error	even though it told us it
 13389                                  					; never	would
 13390 0000150B 53                      		push	bx
 13391 0000150C BB4000                  		mov	bx, 40h		; fchanged
 13392 0000150F E8AA03                  		call	set_changed_dl
 13393 00001512 5B                      		pop	bx
 13394                                  int13b:					
 13395 00001513 F9                      		stc			; now return the error
 13396 00001514 EBDF                    		jmp	short ret_from_i13
 13397                                  ; ---------------------------------------------------------------------------
 13398                                  
 13399                                  ; some kind of error occurred. see if it is dma violation
 13400                                  
 13401                                  goterr13:				
 13402 00001516 80FC09                  		cmp	ah, 9		; dma error?
 13403 00001519 747C                    		jz	short gotdmaerr
 13404                                  goterr13_xxxx:				
 13405 0000151B 80FC11                  		cmp	ah, 11h		; ecc error?
 13406 0000151E 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13407 00001520 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13408 00001525 74D4                    		jz	short i13_ret_error
 13409                                  
 13410 00001527 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13411                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13412                                  					; (2 = romread)
 13413                                  					; ECC correction only applies to reads
 13414 0000152C 75CD                    		jnz	short i13_ret_error
 13415                                  
 13416 0000152E 30E4                    		xor	ah, ah
 13417                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13418                                  		; 17/10/2022
 13419 00001530 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13420                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13421                                  					; call far 70:797h
 13422 00001535 A1[1E00]                		mov	ax, [prevoper]
 13423 00001538 30E4                    		xor	ah, ah		; return code =	no error
 13424 0000153A 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13425 0000153C 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13426 0000153E 53                      		push	bx
 13427 0000153F 51                      		push	cx
 13428 00001540 52                      		push	dx
 13429 00001541 A2[2000]                		mov	[number_of_sec], al
 13430                                  loop_ecc:				
 13431 00001544 B80102                  		mov	ax, 201h	; read one sector
 13432                                  
 13433                                  ; we do reads one sector at a time. this ensures that we will eventually
 13434                                  ; finish the request since ecc errors on one sector do read in that sector.
 13435                                  ;
 13436                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13437                                  ; that attempt to read more sectors than are available on a particular
 13438                                  ; track.
 13439                                  ;
 13440                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13441                                  ; this request.
 13442                                  ;
 13443                                  ; at this point, all registers are set up for the call to orig13, except
 13444                                  ; that there may be a starting sector number that is bigger than the number
 13445                                  ; of sectors on a track.
 13446                                  ;
 13447 00001547 E88FFE                  		call	check_wrap	; get correct parameters for int 13
 13448                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13449                                  		; 17/10/2022
 13450 0000154A 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13451                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13452 0000154F 730C                    		jnb	short ok11_op
 13453 00001551 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13454 00001554 741B                    		jz	short handle_dma_during_ecc
 13455 00001556 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13456 00001559 7510                    		jnz	short ok11_exit_err
 13457                                  		; 10/12/2022
 13458                                  		; xor ax ax -> ah = 0
 13459                                  		;mov	ah, 0		; ecc error. reset the system again.
 13460 0000155B 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13461                                  					; was the last sector, no error	code
 13462                                  					; will be returned for the corrected
 13463                                  					; read.	(clear carry too.)
 13464                                  ok11_op:				
 13465 0000155D FE0E[2000]              		dec	byte [number_of_sec]
 13466 00001561 7409                    		jz	short ok11_exit	; all done?
 13467 00001563 FEC1                    		inc	cl		; advance sector number
 13468                                  					; add 200h to address
 13469 00001565 FEC7                    		inc	bh
 13470 00001567 FEC7                    		inc	bh
 13471 00001569 EBD9                    		jmp	short loop_ecc
 13472                                  ; ---------------------------------------------------------------------------
 13473                                  
 13474                                  ; locate error returns centrally
 13475                                  
 13476                                  ok11_exit_err:				
 13477 0000156B F9                      		stc			; set carry bit again.
 13478                                  ok11_exit:				
 13479 0000156C 5A                      		pop	dx
 13480 0000156D 59                      		pop	cx
 13481 0000156E 5B                      		pop	bx
 13482 0000156F EB88                    		jmp	short i13ret_ck_chglinerr
 13483                                  ; ---------------------------------------------------------------------------
 13484                                  
 13485                                  ; do the single sector read again, this time into our temporary
 13486                                  ; buffer, which is guaranteed not to have a DMA error, then
 13487                                  ; move the data to its proper location and proceed
 13488                                  
 13489                                  handle_dma_during_ecc:			
 13490 00001571 06                      		push	es
 13491 00001572 53                      		push	bx
 13492 00001573 BB[4E01]                		mov	bx, disksector
 13493 00001576 1E                      		push	ds
 13494 00001577 07                      		pop	es		; point es:bx to buffer
 13495 00001578 B80102                  		mov	ax, 201h	; read one sector
 13496                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13497                                  		; 17/10/2022
 13498 0000157B 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13499                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13500 00001580 5B                      		pop	bx
 13501 00001581 07                      		pop	es
 13502 00001582 7305                    		jnb	short handle_dma_during_ecc_noerr
 13503 00001584 80FC11                  		cmp	ah, 11h
 13504 00001587 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13505                                  
 13506                                  ; now we're kosher. Copy the data to where it belongs and resume
 13507                                  ; the ECC looping code.
 13508                                  
 13509                                  handle_dma_during_ecc_noerr:		
 13510 00001589 56                      		push	si
 13511 0000158A 57                      		push	di
 13512 0000158B 89DF                    		mov	di, bx
 13513 0000158D BE[4E01]                		mov	si, disksector
 13514 00001590 E82BFE                  		call	move_sector
 13515 00001593 5F                      		pop	di
 13516 00001594 5E                      		pop	si
 13517 00001595 EBC6                    		jmp	short ok11_op
 13518                                  ; ---------------------------------------------------------------------------
 13519                                  
 13520                                  ; we truly have a dma violation. restore register ax and retry the
 13521                                  ; operation as best we can.
 13522                                  
 13523                                  gotdmaerr:				
 13524 00001597 A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13525 0000159A FB                      		sti
 13526 0000159B 80FC02                  		cmp	ah, 2		; romread
 13527 0000159E 723B                    		jb	short i13_done_dmaerr
 13528                                  					; just pass dma error thru for
 13529                                  					; functions we don't handle
 13530 000015A0 80FC04                  		cmp	ah, 4		; romverify
 13531 000015A3 743C                    		jz	short intverify
 13532 000015A5 80FC05                  		cmp	ah, 5		; romformat
 13533 000015A8 7448                    		jz	short intformat
 13534 000015AA 772F                    		ja	short i13_done_dmaerr
 13535                                  
 13536                                  ; we are doing a read/write call. check for dma problems
 13537                                  
 13538                                  ;	******** set up stack frame here!!! ********
 13539                                  
 13540 000015AC 52                      		push	dx
 13541 000015AD 51                      		push	cx
 13542 000015AE 53                      		push	bx
 13543 000015AF 50                      		push	ax
 13544 000015B0 55                      		push	bp
 13545 000015B1 89E5                    		mov	bp, sp
 13546 000015B3 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13547 000015B5 D1E2                    		shl	dx, 1
 13548 000015B7 D1E2                    		shl	dx, 1
 13549 000015B9 D1E2                    		shl	dx, 1
 13550 000015BB D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13551 000015BD 01DA                    		add	dx, bx		; combine with offset
 13552 000015BF 81C2FF01                		add	dx, 511		; simulate a transfer
 13553                                  
 13554                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13555                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13556                                  
 13557 000015C3 7303                    		jnb	short no_skip_first
 13558 000015C5 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13559                                  ; ---------------------------------------------------------------------------
 13560                                  
 13561                                  no_skip_first:				
 13562 000015C8 D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13563 000015CA B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13564 000015CC 28F4                    		sub	ah, dh
 13565                                  
 13566                                  ; ah is now the number of sectors that we can successfully write in this
 13567                                  ; segment. if this number is above or equal to the requested number, then we
 13568                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13569                                  ;
 13570                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13571                                  ; first place is because we got a dma error. so it's impossible
 13572                                  ; for the whole block to fit, unless the dma error was returned
 13573                                  ; in error.
 13574                                  
 13575 000015CE 38C4                    		cmp	ah, al		; can we fit it	in?
 13576 000015D0 7236                    		jb	short doblock	; no, perform blocking.
 13577                                  
 13578                                  ; yes, the request fits. let it happen.
 13579                                  
 13580 000015D2 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13581                                  					; set up head number
 13582 000015D5 E888FE                  		call	doint
 13583 000015D8 E9D900                  		jmp	bad13		; and return from this place
 13584                                  ; ---------------------------------------------------------------------------
 13585                                  
 13586                                  i13_done_dmaerr:			
 13587 000015DB B409                    		mov	ah, 9		; pass dma error thru to caller
 13588 000015DD F9                      		stc
 13589 000015DE E914FF                  		jmp	ret_from_i13	; return with error,
 13590                                  					; we know it's not a changeline error
 13591                                  ; ---------------------------------------------------------------------------
 13592                                  
 13593                                  ; verify the given sectors. place the buffer pointer into our space.
 13594                                  
 13595                                  intverify:				
 13596 000015E1 06                      		push	es		; save caller's dma address
 13597 000015E2 53                      		push	bx
 13598 000015E3 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13599 000015E4 07                      		pop	es
 13600                                  dosimple:				
 13601 000015E5 BB[4E01]                		mov	bx, disksector
 13602                                  					; do the i/o from Bios_Data:disksector
 13603                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13604                                  		; 17/10/2022
 13605 000015E8 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13606                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13607 000015ED 5B                      		pop	bx
 13608 000015EE 07                      		pop	es
 13609 000015EF E907FF                  		jmp	i13ret_ck_chglinerr
 13610                                  ; ---------------------------------------------------------------------------
 13611                                  
 13612                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13613                                  
 13614                                  intformat:				
 13615 000015F2 06                      		push	es
 13616 000015F3 53                      		push	bx
 13617 000015F4 56                      		push	si
 13618 000015F5 57                      		push	di
 13619 000015F6 1E                      		push	ds
 13620                                  
 13621                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13622                                  ; in other words, swap (ds, es)
 13623                                  
 13624 000015F7 06                      		push	es
 13625 000015F8 1E                      		push	ds
 13626 000015F9 07                      		pop	es
 13627 000015FA 1F                      		pop	ds
 13628 000015FB 89DE                    		mov	si, bx
 13629 000015FD BF[4E01]                		mov	di, disksector
 13630 00001600 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 13631 00001603 1F                      		pop	ds
 13632 00001604 5F                      		pop	di
 13633 00001605 5E                      		pop	si		; do the i/o from
 13634 00001606 EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13635                                  ; ---------------------------------------------------------------------------
 13636                                  
 13637                                  ; we can't fit the request into the entire block. perform the operation on
 13638                                  ; the first block.
 13639                                  ;
 13640                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13641                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13642                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13643                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13644                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13645                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13646                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13647                                  ; doblock will handle the first block of requested sectors within the
 13648                                  ; boundary of this safe value.
 13649                                  
 13650                                  doblock:
 13651                                  
 13652                                  ; try to get the # of sectors/track from bds via rom drive number.
 13653                                  ; for any mini disks installed, here we have to pray that they have the
 13654                                  ; same # of sector/track as the main dos partition disk drive.
 13655                                  				
 13656 00001608 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13657                                  					; get head #, drive #
 13658 0000160B 51                      		push	cx
 13659 0000160C 06                      		push	es
 13660 0000160D 57                      		push	di		; ah - # of sectors before dma boundary
 13661                                  					; al - requested # of sectors for i/o.
 13662 0000160E E83BFE                  		call	find_bds
 13663 00001611 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13664                                  		; 12/12/2022
 13665 00001615 26F6452301              		test	byte [es:di+23h], 1
 13666                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13667 0000161A 5F                      		pop	di
 13668 0000161B 07                      		pop	es
 13669 0000161C 88E0                    		mov	al, ah		; set al=ah for	floppies
 13670 0000161E 7404                    		jz	short doblockflop ; they are track by track operation
 13671 00001620 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13672 00001622 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13673                                  doblockflop:				
 13674 00001624 59                      		pop	cx
 13675                                  doblockcontinue:			
 13676 00001625 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13677 00001627 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13678 00001629 50                      		push	ax
 13679 0000162A 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13680 0000162C EB03                    		jmp	short doblockdoint
 13681                                  ; ---------------------------------------------------------------------------
 13682                                  
 13683                                  doblocklast:				
 13684 0000162E 88C4                    		mov	ah, al
 13685 00001630 50                      		push	ax
 13686                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13687 00001631 E82CFE                  		call	doint
 13688 00001634 727E                    		jb	short bad13	; something happened, bye!
 13689 00001636 58                      		pop	ax
 13690 00001637 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13691                                  					; decrement by the successful operation
 13692 0000163A 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13693 0000163C 00E7                    		add	bh, ah		; advance dma addres
 13694 0000163E 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13695 00001640 38C4                    		cmp	ah, al		; check	the previous value
 13696 00001642 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13697                                  					; then we are done already.
 13698 00001644 28E0                    		sub	al, ah		; otherwise,
 13699                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13700 00001646 E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 13701 00001649 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13702                                  ; ---------------------------------------------------------------------------
 13703                                  
 13704                                  bufferx:				
 13705 0000164B 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13706                                  					; set up head number
 13707                                  buffer:					
 13708 0000164E 53                      		push	bx
 13709 0000164F 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13710 00001652 80FC03                  		cmp	ah, 3		; romwrite
 13711 00001655 7525                    		jnz	short doread	;
 13712                                  					
 13713                                  ; copy the offending sector into local buffer
 13714                                  
 13715 00001657 06                      		push	es
 13716 00001658 1E                      		push	ds
 13717 00001659 56                      		push	si
 13718 0000165A 57                      		push	di
 13719 0000165B 1E                      		push	ds		; exchange segment registers
 13720 0000165C 06                      		push	es
 13721 0000165D 1F                      		pop	ds
 13722 0000165E 07                      		pop	es
 13723 0000165F BF[4E01]                		mov	di, disksector	; where to move
 13724 00001662 57                      		push	di		; save it
 13725 00001663 89DE                    		mov	si, bx		; source
 13726 00001665 E856FD                  		call	move_sector	; move sector into local buffer
 13727 00001668 5B                      		pop	bx		; new transfer address
 13728                                  					; (es:bx = Bios_Data:diskbuffer)
 13729 00001669 5F                      		pop	di		; restore caller's di & si
 13730 0000166A 5E                      		pop	si
 13731 0000166B 1F                      		pop	ds		; restore Bios_Data
 13732                                  
 13733                                  ; see if we are wrapping around a track or head
 13734                                  
 13735 0000166C B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13736                                  					; get drive number
 13737 0000166E 8A5608                  		mov	dl, [bp+8]
 13738 00001671 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 13739                                  					;
 13740                                  					; ah is	function
 13741                                  					; al is	1 for single sector transfer
 13742                                  					; es:bx	is local transfer addres
 13743                                  					; cx is	track/sector number
 13744                                  					; dx is	head/drive number
 13745                                  					; si,di	unchanged
 13746 00001674 E8E9FD                  		call	doint
 13747 00001677 07                      		pop	es		; restore caller's dma segment
 13748 00001678 723A                    		jb	short bad13	; go clean up
 13749 0000167A EB22                    		jmp	short dotail
 13750                                  ; ---------------------------------------------------------------------------
 13751                                  
 13752                                  ; reading a sector. do int first, then move things around
 13753                                  
 13754                                  doread:					
 13755 0000167C 06                      		push	es
 13756 0000167D 53                      		push	bx
 13757 0000167E 1E                      		push	ds		; es = Bios_Code
 13758 0000167F 07                      		pop	es
 13759 00001680 BB[4E01]                		mov	bx, disksector
 13760 00001683 B001                    		mov	al, 1
 13761 00001685 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13762                                  					; get drive number
 13763 00001688 E84EFD                  		call	check_wrap	;
 13764                                  					; ah = function
 13765                                  					; al = 1 for single sector
 13766                                  					; es:bx	points to local	buffer
 13767                                  					; cx, dx are track/sector, head/drive
 13768 0000168B E8D2FD                  		call	doint
 13769 0000168E 5B                      		pop	bx
 13770 0000168F 07                      		pop	es
 13771 00001690 7222                    		jb	short bad13
 13772 00001692 56                      		push	si
 13773 00001693 57                      		push	di
 13774 00001694 89DF                    		mov	di, bx
 13775 00001696 BE[4E01]                		mov	si, disksector
 13776 00001699 E822FD                  		call	move_sector
 13777 0000169C 5F                      		pop	di
 13778 0000169D 5E                      		pop	si
 13779                                  
 13780                                  ; note the fact that we've done 1 more sector
 13781                                  
 13782                                  dotail:					
 13783 0000169E 5B                      		pop	bx		; retrieve new dma area
 13784 0000169F 80C702                  		add	bh, 2		; advance over sector
 13785 000016A2 41                      		inc	cx
 13786 000016A3 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13787 000016A6 F8                      		clc
 13788 000016A7 FEC8                    		dec	al
 13789 000016A9 7409                    		jz	short bad13	; no more i/o
 13790                                  
 13791                                  ; see if we wrap around a track or head boundary with starting sector
 13792                                  ; we already have the correct head number to pass to check_wrap
 13793                                  
 13794 000016AB 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13795 000016AE E828FD                  		call	check_wrap
 13796 000016B1 E8ACFD                  		call	doint
 13797                                  
 13798                                  ; we are done. ax has the final code; we throw away what we got before
 13799                                  
 13800                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13801                                  ;	   or we've finished. If carry is set now, our only
 13802                                  ;	   hope for salvation is that it was a read operation
 13803                                  ;	   and the error code is ECC error. In that case, we'll
 13804                                  ;	   just pop the registers and go do the old ECC thing.
 13805                                  ;	   When the DMA error that got us here in the first
 13806                                  ;	   place occurs, it'll handle it.
 13807                                  
 13808                                  bad13:					
 13809 000016B4 89EC                    		mov	sp, bp
 13810 000016B6 5D                      		pop	bp
 13811 000016B7 5B                      		pop	bx
 13812 000016B8 5B                      		pop	bx
 13813 000016B9 59                      		pop	cx
 13814 000016BA 5A                      		pop	dx
 13815 000016BB 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13816 000016BD E935FE                  		jmp	ret_from_i13	; non-error exit
 13817                                  ; ---------------------------------------------------------------------------
 13818                                  
 13819                                  xgoterr13_xxxx:				
 13820 000016C0 E958FE                  		jmp	goterr13_xxxx
 13821                                  
 13822                                  ; ---------------------------------------------------------------------------
 13823                                  		; 10/12/2022
 13824                                  		;db 	0
 13825                                  ; ---------------------------------------------------------------------------
 13826                                  
 13827                                  ;Bios_Code ends
 13828                                  
 13829                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13830                                  
 13831                                  ;-----------------------------------------------------------------------------
 13832                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13833                                  ;-----------------------------------------------------------------------------
 13834                                  ; 17/03/2019 - Retro DOS v4.0
 13835                                  
 13836                                  		; 19/10/2022
 13837                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13838 000016C3 8A26[7500]              		mov	ah, [drvmax]
 13839 000016C7 BF[8706]                		mov	di, dskdrvs
 13840 000016CA 1E                      		push	ds		; pass result in es:di
 13841 000016CB 07                      		pop	es
 13842 000016CC E9E9EE                  		jmp	SetPtrSav
 13843                                  
 13844                                  ; =============== S U B	R O U T	I N E =======================================
 13845                                  
 13846                                  ;---------------------------------------------------------------------------
 13847                                  ; install_bds installs a bds at location es:di into the current linked list of
 13848                                  ; bds maintained by this device driver. it places the bds at the end of the
 13849                                  ; list. Trashes (at least) ax, bx, di, si
 13850                                  ;---------------------------------------------------------------------------
 13851                                  
 13852                                  install_bds:		
 13853 000016CF 1E                      		push	ds		; save Bios_Data segment
 13854 000016D0 BE[1901]                		mov	si, start_bds	; beginning of chain
 13855                                  
 13856                                  		; ds:si now points to link to first bds
 13857                                  		; assume bds list is non-empty
 13858                                  loop_next_bds:				
 13859 000016D3 C534                    		lds	si, [si]	; [si+BDS.link]
 13860                                  					; fetch	next bds
 13861 000016D5 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13862 000016D9 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13863                                  					; drive	with new one?
 13864 000016DC 7518                    		jnz	short next_bds
 13865 000016DE B310                    		mov	bl, 10h		; fi_am_mult
 13866 000016E0 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13867                                  					; set both of them to i_am_mult	if so
 13868 000016E4 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13869 000016E7 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13870                                  					; we don't own it
 13871 000016EC 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13872                                  					; determine if changeline available
 13873 000016EF 80E302                  		and	bl, 2		; fchangeline
 13874 000016F2 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13875                                  next_bds:				
 13876                                  		; 02/09/2023 (PCDOS 7.1)
 13877 000016F6 B8FFFF                  		mov	ax, 0FFFFh	; -1
 13878 000016F9 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 13879                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13880                                  					; are we at end	of list?
 13881 000016FB 75D6                    		jnz	short loop_next_bds
 13882 000016FD 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 13883                                  					; install bds
 13884 00001700 893C                    		mov	[si], di
 13885 00001702 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 13886                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13887                                  					; set next pointer to null
 13888 00001705 1F                      		pop	ds
 13889                                  
 13890                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13891                                  ;
 13892                                  ; **** If the new drive has a higher EOT value, we must alter the
 13893                                  ;      'eot' variable appropriately.
 13894                                  ;
 13895                                  ;		; 01/06/2019
 13896                                  ;		;mov	al,[es:di+52]
 13897                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13898                                  ;
 13899                                  ;		cmp	al,[eot]
 13900                                  ;		jbe	short _eot_ok
 13901                                  ;		mov	[eot],al
 13902                                  
 13903 00001706 C3                      		retn
 13904                                  
 13905                                  ; ---------------------------------------------------------------------------
 13906                                  
 13907                                  ; 17/10/2022
 13908                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13909                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13910                                  ; 09/12/2022
 13911                                  DRVLET equ drvlet
 13912                                  SNGMSG equ sngmsg
 13913                                  
 13914                                  ; 16/10/2022
 13915                                  
 13916                                  ;---------------------------------------------------------------------------
 13917                                  ;  ask to swap the disk in drive a:
 13918                                  ;	es:di -> bds
 13919                                  ;	ds -> Bios_Data
 13920                                  ;---------------------------------------------------------------------------
 13921                                  
 13922                                  		; 19/10/2022
 13923 00001707 F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13924                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13925 0000170C 7405                    		jz	short no_win386	; no, skip SetFocus
 13926                                  		
 13927                                  		; set focus to the correct VM
 13928                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13929                                  		; 17/10/2022
 13930 0000170E 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13931                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13932                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13933                                  no_win386:				
 13934 00001713 51                      		push	cx
 13935 00001714 52                      		push	dx
 13936 00001715 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13937                                  					; get the drive	letter
 13938                                  
 13939                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13940                                  ;           then existing dsk is drive A & vice versa
 13941                                  
 13942 00001719 88D6                    		mov	dh, dl
 13943 0000171B 80F601                  		xor	dh, 1
 13944 0000171E 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13945 00001720 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13946                                  					; broad	cast code for swap disk
 13947                                  					; Broadcast it
 13948 00001723 CD2F                    		int	2Fh	
 13949 00001725 41                      		inc	cx		; cx == -1 ?
 13950 00001726 741E                    		jz	short swpdsk9	; somebody has handled it
 13951                                  
 13952                                  ; using a different drive in a one drive system so request the user change disks
 13953                                  
 13954 00001728 80C241                  		add	dl, 'A'
 13955                                  		; 17/10/2022
 13956 0000172B 2E8816[6517]            		mov	[cs:DRVLET], dl
 13957                                  		; 16/10/2022
 13958                                  		;;mov	byte [cs:drvlet], dl
 13959                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13960                                  					; 0070h:3D54h =	2C7h:17E4h
 13961 00001730 BE[4917]                		mov	si, SNGMSG
 13962                                  		;mov	si, 17C8h	; sngmsg
 13963                                  					; 0070h:3D38h =	2C7h:17C8h
 13964 00001733 53                      		push	bx
 13965 00001734 2E                      		cs
 13966 00001735 AC                      		lodsb			; get the next character of the message
 13967                                  		;lods	byte ptr cs:[si]
 13968                                  wrmsg_loop:				
 13969 00001736 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13970                                  					; AL = character to display
 13971 00001738 2E                      		cs
 13972 00001739 AC                      		lodsb
 13973                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13974                                  					; get the next character of the	message
 13975 0000173A 08C0                    		or	al, al
 13976 0000173C 75F8                    		jnz	short wrmsg_loop
 13977 0000173E E8C6EA                  		call	con_flush	; flush out keyboard queue
 13978                                  					; call rom-bios
 13979 00001741 30E4                    		xor	ah, ah
 13980 00001743 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13981                                  					; Return: AH = scan code, AL = character
 13982 00001745 5B                      		pop	bx
 13983                                  swpdsk9:				
 13984 00001746 5A                      		pop	dx
 13985 00001747 59                      		pop	cx
 13986 00001748 C3                      		retn
 13987                                  
 13988                                  ; ---------------------------------------------------------------------------
 13989                                  
 13990                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13991                                  
 13992                                  ;--------------------------------------------------------
 13993                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13994                                  ;--------------------------------------------------------
 13995                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13996                                  ;--------------------------------------------------------
 13997                                  ; 17/03/2019 - Retro DOS v4.0
 13998                                  
 13999                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 14000 00001749 0D0A                    sngmsg:		db 0Dh,0Ah
 14001 0000174B 496E73657274206469-     		db 'Insert diskette for drive '
 14001 00001754 736B6574746520666F-
 14001 0000175D 7220647269766520   
 14002                                  
 14003                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 14004 00001765 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 14004 0000176E 65737320616E79206B-
 14004 00001777 6579207768656E2072-
 14004 00001780 656164790D0A       
 14005 00001786 0A00                    		db 0Ah,0
 14006                                  
 14007                                  ; =============== S U B	R O U T	I N E =======================================
 14008                                  
 14009                                  ;---------------------------------------------------------------------------
 14010                                  ; input : es:di points to current bds for drive.
 14011                                  ; return : zero set if no open files
 14012                                  ;	   zero reset if open files
 14013                                  ;---------------------------------------------------------------------------
 14014                                  
 14015                                  chkopcnt:		
 14016 00001788 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 14017 0000178D C3                      		retn
 14018                                  
 14019                                  ; =============== S U B	R O U T	I N E =======================================
 14020                                  
 14021                                  ;---------------------------------------------------------------------------
 14022                                  ; at media check time, we need to really get down and check what the change is.
 14023                                  ; this is guaranteed to be expensive.
 14024                                  ;
 14025                                  ;	es:di -> bds, ds -> Bios_Data
 14026                                  ;---------------------------------------------------------------------------
 14027                                  
 14028                                  mediacheck:	
 14029 0000178E E8A9F0                  		call	checksingle	; make sure correct disk is in place
 14030 00001791 31F6                    		xor	si, si
 14031 00001793 E84D01                  		call	haschange
 14032 00001796 742F                    		jz	short mediaret
 14033 00001798 E83C01                  		call	checkromchange
 14034 0000179B 752B                    		jnz	short mediadovolid
 14035 0000179D 50                      		push	ax
 14036 0000179E 52                      		push	dx
 14037 0000179F 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14038                                  					; set logical drive number
 14039 000017A3 B416                    		mov	ah, 16h
 14040 000017A5 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 14041                                  					; DL = drive to	check
 14042                                  					; Return: AH = disk change status
 14043 000017A7 5A                      		pop	dx
 14044 000017A8 58                      		pop	ax
 14045 000017A9 721D                    		jb	short mediadovolid
 14046 000017AB BE0100                  		mov	si, 1		; signal no change
 14047                                  
 14048                                  ; there are some drives with changeline that "lose" the changeline indication
 14049                                  ; if a different drive is accessed after the current one. in order to avoid
 14050                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 14051                                  ; is not active and we are accessing a different drive from the last one.
 14052                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 14053                                  ; status.
 14054                                  		; 19/10/2022
 14055 000017AE 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 14056 000017B2 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 14057                                  					; (If the last drive accessed is not current drive
 14058                                  					; media	change status may be incorrect.	So,
 14059                                  					; "I don't now" will be returned even if it is indicated
 14060                                  					; as media is not changed.)
 14061 000017B6 740F                    		jz	short mediaret	; (same	drive,
 14062                                  					; media	changeline indication is reliable)
 14063                                  
 14064                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14065                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14066                                  ; "not changed" here since the 2 second test said no change.)
 14067                                  
 14068 000017B8 50                      		push	ax
 14069 000017B9 51                      		push	cx
 14070 000017BA 52                      		push	dx
 14071 000017BB E895ED                  		call	Check_Time_Of_Access
 14072 000017BE 5A                      		pop	dx
 14073 000017BF 59                      		pop	cx
 14074 000017C0 58                      		pop	ax
 14075 000017C1 09F6                    		or	si, si
 14076 000017C3 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14077                                  					; (volume id will be checked)
 14078 000017C5 31F6                    		xor	si, si		; return "i don't know"
 14079                                  mediaret:				
 14080 000017C7 C3                      		retn
 14081                                  ; ---------------------------------------------------------------------------
 14082                                  
 14083                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14084                                  ; because this may be different since we only set medbyt when doing a read
 14085                                  ; or write.
 14086                                  
 14087                                  mediadovolid:				
 14088 000017C8 E82DEE                  		call	GetBp		; build	a new bpb in current bds
 14089 000017CB 72FA                    		jb	short mediaret
 14090 000017CD E82D00                  		call	check_vid
 14091 000017D0 73F5                    		jnb	short mediaret
 14092 000017D2 E9F8F3                  		jmp	maperror	; fix up al for	return to dos
 14093                                  ; ---------------------------------------------------------------------------
 14094                                  
 14095                                  ; simple, quick check of latched change. if no indication, then return
 14096                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14097                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14098                                  ; dos.
 14099                                  ;
 14100                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14101                                  
 14102                                  ;	call with es:di -> bds, ds -> Bios_Data
 14103                                  ;	***** warning:  this routine will return one level up on the stack
 14104                                  ;			if an error occurs!
 14105                                  
 14106                                  checklatchio:	
 14107                                  
 14108                                  ; if returning fake bpb then assume the disk has not changed
 14109                                  			
 14110 000017D5 E8B0FF                  		call	chkopcnt
 14111 000017D8 741B                    		jz	short checkret	; done if zero
 14112                                  
 14113                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14114                                  
 14115 000017DA E8FA00                  		call	checkromchange
 14116 000017DD 7416                    		jz	short checkret
 14117                                  
 14118                                  ; we now see that a change line has been seen in the past. let's do the
 14119                                  ; expensive verification.
 14120                                  
 14121 000017DF E816EE                  		call	GetBp		; build	bpb in current bds
 14122 000017E2 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14123 000017E4 E81600                  		call	check_vid
 14124 000017E7 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14125 000017E9 09F6                    		or	si, si		; is changed for sure?
 14126 000017EB 7908                    		jns	short checkret
 14127 000017ED E87B00                  		call	returnvid
 14128                                  checklatchret:				
 14129 000017F0 E8DAF3                  		call	maperror	; fix up al for	return to dos
 14130                                  ret_no_error_map:			
 14131 000017F3 F9                      		stc
 14132 000017F4 5E                      		pop	si		; pop off return address
 14133                                  checkret:				
 14134 000017F5 C3                      		retn
 14135                                  ; ---------------------------------------------------------------------------
 14136                                  
 14137                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14138                                  ; only if there was a disk error. return that error code in ax.
 14139                                  ;
 14140                                  ;	called with es:di -> bds, ds -> Bios_Data
 14141                                  
 14142                                  checkfatvid:				
 14143 000017F6 E8BD01                  		call	fat_check	; check	the fat	and the	vid
 14144 000017F9 09F6                    		or	si, si
 14145 000017FB 7827                    		js	short changed_drv ;
 14146                                  
 14147                                  ; the fat was the same. fall into check_vid and check volume id.
 14148                                  
 14149                                  		; fall into check_vid
 14150                                  
 14151                                  ; =============== S U B	R O U T	I N E =======================================
 14152                                  
 14153                                  ; now with the extended boot record, the logic should be enhanced.
 14154                                  ;
 14155                                  ; if it is the extended boot record, then we check the volume serial
 14156                                  ; number instead of volume id. if it is different, then set si to -1.
 14157                                  ;
 14158                                  ; if it is same, then si= 1 (no change).
 14159                                  ;
 14160                                  ; if it is not the extended boot record, then just follows the old
 14161                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14162                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14163                                  ; should have already covered by extended boot structure checking.
 14164                                  ; so, we will return "i don't know" by setting si to 0.
 14165                                  ;
 14166                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14167                                  ; (this will be gauranteed by a successful getbp call right before this
 14168                                  ; routine.)
 14169                                  ;
 14170                                  ;	called with es:di -> bds, ds -> bds
 14171                                  
 14172                                  		; 19/10/2022
 14173                                  check_vid:
 14174                                  
 14175                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14176                                  ; boot signature. if it is set then go to do the extended
 14177                                  ; id check otherwise continue with code below
 14178                                  
 14179 000017FD 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14180                                  					; [disksector+EXT_BOOT.SIG],
 14181                                  					; EXT_BOOT_SIGNATURE
 14182 00001802 7427                    		jz	short do_ext_check_id
 14183 00001804 E8DC00                  		call	haschange
 14184 00001807 74EC                    		jz	short checkret
 14185 00001809 31F6                    		xor	si, si
 14186 0000180B 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14187                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14188 00001810 7411                    		jz	short checkfatret ; don't read vol id
 14189                                  					; if not fat system
 14190 00001812 E8EE00                  		call	read_volume_id
 14191 00001815 720C                    		jb	short checkfatret
 14192 00001817 E89201                  		call	check_volume_id
 14193 0000181A BEFFFF                  		mov	si, 0FFFFh	; -1
 14194                                  					; definitely changed
 14195 0000181D 7505                    		jnz	short changed_drv
 14196                                  
 14197 0000181F 46                      		inc	si		; not changed
 14198                                  vid_no_changed:				
 14199 00001820 E8BA00                  		call	resetchanged
 14200                                  		; 12/12/2022
 14201                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14202                                  		;clc
 14203                                  checkfatret:				
 14204 00001823 C3                      		retn
 14205                                  ; ---------------------------------------------------------------------------
 14206                                  
 14207                                  		; 12/12/2022
 14208                                  changed_drv:
 14209 00001824 F8                      		clc			; cas -- return	no error
 14210 00001825 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14211                                  					; ensure that we ask rom for media
 14212 0000182A C3                      		retn			; check	next time round
 14213                                  ; ---------------------------------------------------------------------------
 14214                                  
 14215                                  ; extended id check
 14216                                  
 14217                                  ; 16/10/2022
 14218                                  
 14219                                  ; the code to check extended id is basically a check to see if the
 14220                                  ; volume serial number is still the same. the volume serial number
 14221                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14222                                  ; ds:di points to the bds of the drive under consideration.
 14223                                  ; the bds has fields containing the high and low words 
 14224                                  ; of the volume serial number of the media in the drive.
 14225                                  ; compare these fields to the fields mentioned above. if these fields
 14226                                  ; do not match the media has changed and so we should jump to the code
 14227                                  ; starting at ext_changed else return "i don't know" status
 14228                                  ; in the register used for the changeline status and continue executing
 14229                                  ; the code given below. for temporary storage use the register which
 14230                                  ; has been saved and restored around this block.
 14231                                  ;
 14232                                  ; bds fields in inc\msbds.inc
 14233                                  
 14234                                  		; 19/10/2022
 14235                                  do_ext_check_id:
 14236 0000182B 50                      		push	ax
 14237                                  		;mov	ax, word ptr ds:disksector+27h
 14238                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14239 0000182C A1[7501]                		mov	ax, [disksector+27h]
 14240                                  		; 02/09/2023
 14241 0000182F 31F6                    		xor	si, si ; 0
 14242 00001831 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14243 00001835 750C                    		jnz	short ext_changed
 14244 00001837 A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14245 0000183A 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14246 0000183E 7503                    		jnz	short ext_changed
 14247                                  		;xor	si, si		; 0
 14248                                  					; don't know
 14249 00001840 58                      		pop	ax
 14250 00001841 EBDD                    		jmp	short vid_no_changed
 14251                                  					; reset the flag
 14252                                  ; ---------------------------------------------------------------------------
 14253                                  
 14254                                  ext_changed:
 14255 00001843 58                      		pop	ax
 14256                                  		; 02/09/2023
 14257 00001844 4E                      		dec	si ; mov si, 0FFFFh ; -1
 14258                                  		;mov	si, 0FFFFh	; -1
 14259                                  					; disk changed!
 14260                                  		; 12/12/2022
 14261                                  		; ('changed_drv' clears cf)
 14262                                  		;clc
 14263 00001845 EBDD                    		jmp	short changed_drv
 14264                                  
 14265                                  ; ---------------------------------------------------------------------------
 14266                                  
 14267                                  ; at i/o time, we detected the error. now we need to determine whether the
 14268                                  ; media was truly changed or not. we return normally if media change unknown.
 14269                                  ; and we pop off the call and jmp to harderr if we see an error.
 14270                                  ;
 14271                                  ; es:di -> bds
 14272                                  
 14273                                  checkio:				
 14274 00001847 80FC06                  		cmp	ah, 6
 14275 0000184A 75D7                    		jnz	short checkfatret
 14276 0000184C E839FF                  		call	chkopcnt
 14277 0000184F 74D2                    		jz	short checkfatret
 14278 00001851 E8A4ED                  		call	GetBp
 14279 00001854 7212                    		jb	short no_error_map
 14280 00001856 E89DFF                  		call	checkfatvid
 14281 00001859 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14282 0000185B 09F6                    		or	si, si		; is changed for sure?
 14283 0000185D 7802                    		js	short checkioerr ; yes changed
 14284 0000185F 45                      		inc	bp		; allow	a retry
 14285 00001860 C3                      		retn
 14286                                  ; ---------------------------------------------------------------------------
 14287                                  
 14288                                  checkioerr:				
 14289 00001861 E80700                  		call	returnvid
 14290                                  
 14291                                  checkioret:				
 14292 00001864 F9                      		stc			; make sure carry gets passed through
 14293 00001865 E915F3                  		jmp	harderr
 14294                                  ; ---------------------------------------------------------------------------
 14295                                  
 14296                                  no_error_map:				
 14297 00001868 E915F3                  		jmp	harderr2
 14298                                  
 14299                                  ; =============== S U B	R O U T	I N E =======================================
 14300                                  
 14301                                  ; return vid sets up the vid for a return to dos.
 14302                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14303                                  ;  **** trashes si! ****
 14304                                  
 14305                                  returnvid:		
 14306 0000186B BE1600                  		mov	si, 22		; extra
 14307                                  					; offset into pointer to return	value
 14308 0000186E E80700                  		call	vid_into_packet
 14309 00001871 B406                    		mov	ah, 6
 14310 00001873 F9                      		stc
 14311 00001874 C3                      		retn
 14312                                  
 14313                                  ; ---------------------------------------------------------------------------
 14314                                  
 14315                                  ; moves the pointer to the volid for the drive into the original request packet
 14316                                  ; no attempt is made to preserve registers.
 14317                                  ;
 14318                                  ; assumes es:di -> bds
 14319                                  ; **trashes si**
 14320                                  
 14321                                  media_set_vid:				
 14322 00001875 BE0F00                  		mov	si, 15		; trans+1
 14323                                  					; return the value here	in packet
 14324                                  
 14325                                  		; fall into vid_into_packet
 14326                                  
 14327                                  ; =============== S U B	R O U T	I N E =======================================
 14328                                  
 14329                                  ; return pointer to vid in bds at es:di in packet[si]
 14330                                  
 14331                                  		; 19/10/2022
 14332                                  vid_into_packet:
 14333 00001878 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14334 00001879 C51E[1200]              		lds	bx, [ptrsav]
 14335 0000187D 83C74B                  		add	di, 75		; BDS.volid
 14336 00001880 8938                    		mov	[bx+si], di
 14337 00001882 83EF4B                  		sub	di, 75		; BDS.volid
 14338 00001885 8C4002                  		mov	[bx+si+2], es
 14339 00001888 1F                      		pop	ds
 14340                                  dofloppy:	; 18/12/2022
 14341 00001889 C3                      		retn
 14342                                  
 14343                                  ; ---------------------------------------------------------------------------
 14344                                  
 14345                                  ;----------------------------------------------------------------------------
 14346                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14347                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14348                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14349                                  ;   of getbp. for 3.5" media, we just return.
 14350                                  ;
 14351                                  ;   inputs:	es:di point to correct bds for this drive
 14352                                  ;		ah has media byte
 14353                                  ;
 14354                                  ;   outputs:	carry clear
 14355                                  ;		    no registers modified
 14356                                  ;		carry set
 14357                                  ;		    al = sectors/fat
 14358                                  ;		    bh = number of root directory entries
 14359                                  ;		    bl = sectors per track
 14360                                  ;		    cx = number of sectors
 14361                                  ;		    dh = sectors per allocation unit
 14362                                  ;		    dl = number of heads
 14363                                  ;
 14364                                  ;----------------------------------------------------------------------------
 14365                                  
 14366                                  hidensity:
 14367                                  
 14368                                  ; check for correct drive
 14369                                  		
 14370                                  		; 12/12/2022
 14371 0000188A 26F6452302              		test	byte [es:di+23h], 2		
 14372                                  		;test	word [es:di+23h], 2 ; is it special?	
 14373                                  					; [es:di+BDS.flags], fchangeline
 14374 0000188F 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14375                                  
 14376                                  ; we have a media byte that is pretty complex. examine drive information
 14377                                  ; table to see what kind it is.
 14378                                  
 14379 00001891 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14380 00001896 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14381                                  					; yes, use fatid...
 14382                                  ; 96 tpi drive?
 14383 00001898 80FCF9                  		cmp	ah, 0F9h
 14384 0000189B 75EC                    		jnz	short dofloppy
 14385                                  
 14386                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14387                                  ;------ a 720K diskette
 14388                                  
 14389                                  		; 02/09/2023 (PCDOS 7.1)
 14390 0000189D 268A4522                		mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 14391 000018A1 3C07                    		cmp	al, 7
 14392                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14393                                  					; ffOther
 14394 000018A3 7413                    		jz	short Is720K
 14395 000018A5 3C09                    		cmp	al, 9
 14396                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14397                                  					; ff288
 14398 000018A7 740F                    		jz	short Is720K
 14399 000018A9 B007                    		mov	al, 7		; seven	sectors	/ fat
 14400 000018AB BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14401                                  					; 224 root dir entries
 14402                                  					; & 0Fh sector max
 14403 000018AE B96009                  		mov	cx, 2400	; 80*15*2
 14404                                  					; 80 tracks, 15 sectors/track,
 14405                                  					; 2 sides
 14406                                  		; 02/09/2023
 14407 000018B1 5A                      		pop	dx		; pop off return address
 14408 000018B2 BA0201                  		mov	dx, 258		; 1*256+2
 14409                                  					; sectors/allocation unit
 14410                                  					; & head max
 14411                                  		;add	sp, 2		; pop off return address
 14412 000018B5 E9B2ED                  		jmp	Has1		; return to tail of getbp
 14413                                  ; ---------------------------------------------------------------------------
 14414                                  
 14415                                  Is720K:
 14416                                  		; 02/09/2023
 14417 000018B8 5B                      		pop	bx		; pop off return address
 14418                                  		;add	sp, 2		; pop off return address
 14419 000018B9 E975ED                  		jmp	Has720K		; return to 720K code
 14420                                  ; ---------------------------------------------------------------------------
 14421                                  
 14422                                  		; 18/12/2022
 14423                                  ;dofloppy:				
 14424                                  		;retn
 14425                                  
 14426                                  ; =============== S U B	R O U T	I N E =======================================
 14427                                  
 14428                                  ; 16/10/2022
 14429                                  
 14430                                  ;---------------------------------------------------------------------------
 14431                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14432                                  ;		   essentially used to indicate changeline, or format.
 14433                                  ;
 14434                                  ;   inputs:	dl contains physical drive number
 14435                                  ;		bx contains bits to set in the flag field in the bdss
 14436                                  ;   outputs:	none
 14437                                  ;   registers modified: flags
 14438                                  ;
 14439                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14440                                  ;
 14441                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14442                                  ;---------------------------------------------------------------------------
 14443                                  
 14444                                  set_changed_dl:	
 14445 000018BC 06                      		push	es
 14446 000018BD 57                      		push	di
 14447                                  		;les	di, ds:start_bds
 14448                                  		; 19/10/2022
 14449 000018BE C43E[1901]              		les	di, [start_bds]
 14450                                  
 14451                                  ; note: we assume that the list is non-empty
 14452                                  
 14453                                  scan_bds:				
 14454 000018C2 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14455 000018C6 7504                    		jnz	short get_next_bds
 14456                                  
 14457                                  ; someone may complain, but this *always* must be done when a disk change is
 14458                                  ; noted. there are *no* other compromising circumstances.
 14459                                  
 14460 000018C8 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14461                                  					; signal change	on other drive
 14462                                  get_next_bds:				
 14463 000018CC 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14464                                  					; go to	next bds
 14465 000018CF 83FFFF                  		cmp	di, 0FFFFh
 14466 000018D2 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14467 000018D4 5F                      		pop	di
 14468 000018D5 07                      		pop	es
 14469 000018D6 C3                      		retn
 14470                                  
 14471                                  ; =============== S U B	R O U T	I N E =======================================
 14472                                  
 14473                                  ;---------------------------------------------------------------------------
 14474                                  ; checkromchange - see if external program has diddled rom change line.
 14475                                  ;
 14476                                  ;   inputs:	es:di points to current bds.
 14477                                  ;   outputs:	zero set - no change
 14478                                  ;		zero reset - change
 14479                                  ;   registers modified: none
 14480                                  ;---------------------------------------------------------------------------
 14481                                  
 14482                                  checkromchange:	
 14483                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14484                                  		; 10/12/2022
 14485 000018D7 26F6452340              		test	byte [es:di+23h], 40h
 14486                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14487                                  					; fchanged
 14488 000018DC C3                      		retn
 14489                                  
 14490                                  ; =============== S U B	R O U T	I N E =======================================
 14491                                  
 14492                                  ;---------------------------------------------------------------------------
 14493                                  ; resetchanged - restore value of change line
 14494                                  ;
 14495                                  ;   inputs:	es:di points to current bds
 14496                                  ;   outputs:	none
 14497                                  ;   registers modified: none
 14498                                  ;---------------------------------------------------------------------------
 14499                                  
 14500                                  resetchanged:	
 14501                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14502                                  		; 10/12/2022
 14503 000018DD 26806523BF              		and	byte [es:di+23h], 0BFh
 14504                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14505                                  					; ~fchanged
 14506 000018E2 C3                      		retn
 14507                                  
 14508                                  ; =============== S U B	R O U T	I N E =======================================
 14509                                  
 14510                                  ;---------------------------------------------------------------------------
 14511                                  ; haschange - see if drive can supply change line
 14512                                  ;
 14513                                  ;   inputs:	es:di points to current bds
 14514                                  ;   outputs:	zero set - no change line available
 14515                                  ;		zero reset - change line available
 14516                                  ;   registers modified: none
 14517                                  ;---------------------------------------------------------------------------
 14518                                  
 14519                                  haschange:
 14520                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14521                                  		; 10/12/2022
 14522 000018E3 26F6452302              		test	byte [es:di+23h], 2		
 14523                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14524                                  					; fchangeline
 14525 000018E8 C3                      		retn
 14526                                  
 14527                                  ; ---------------------------------------------------------------------------
 14528                                  
 14529                                  ; 16/10/2022
 14530                                  
 14531                                  ;-------------------------------------------------------------------------
 14532                                  ; set_volume_id      -	main routine, calls other routines.
 14533                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14534                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14535                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14536                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14537                                  ;-------------------------------------------------------------------------
 14538                                  
 14539                                  ; set_volume_id
 14540                                  ;   if drive has changeline support, read in and set the volume_id
 14541                                  ; and the last fat_id byte. if no change line support then do nothing.
 14542                                  ;
 14543                                  ;   on entry:
 14544                                  ;	es:di points to the bds for this disk.
 14545                                  ;	ah contains media byte
 14546                                  ;
 14547                                  ;   on exit:
 14548                                  ;	carry clear:
 14549                                  ;	   successful call
 14550                                  ;	carry set
 14551                                  ;	   error and ax has error code
 14552                                  
 14553                                  set_volume_id:				
 14554 000018E9 52                      		push	dx		; save registers
 14555 000018EA 50                      		push	ax
 14556 000018EB E8F5FF                  		call	haschange	; does drive have changeline support?
 14557 000018EE 740B                    		jz	short setvret	; no, get out
 14558 000018F0 E81000                  		call	read_volume_id
 14559 000018F3 7209                    		jb	short seterr
 14560 000018F5 E8A800                  		call	transfer_volume_id ; copy the volume id	to special drive
 14561 000018F8 E8E2FF                  		call	resetchanged	; restore value	of change line
 14562                                  setvret:				
 14563                                  		; 10/12/2022
 14564                                  		; cf = 0
 14565                                  		;clc			; no error, clear carry flag
 14566 000018FB 58                      		pop	ax		; restore registers
 14567 000018FC 5A                      		pop	dx
 14568 000018FD C3                      		retn
 14569                                  ; ---------------------------------------------------------------------------
 14570                                  
 14571                                  seterr:					
 14572 000018FE 5A                      		pop	dx		; pop stack but don't overwrite ax
 14573 000018FF 5A                      		pop	dx		; restore dx
 14574 00001900 C3                      		retn
 14575                                  ; ---------------------------------------------------------------------------
 14576 00001901 0000                    root_sec:	dw 0			; root sector #
 14577                                  
 14578                                  ; 16/10/2022
 14579                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14580                                  ; 09/12/2022
 14581                                  ROOTSEC equ root_sec
 14582                                  
 14583                                  ; =============== S U B	R O U T	I N E =======================================
 14584                                  
 14585                                  ; 16/10/2022
 14586                                  
 14587                                  ; read_volume_id read the volume id and tells if it has been changed.
 14588                                  ;
 14589                                  ;   on entry:
 14590                                  ;	es:di points to current bds for drive.
 14591                                  ;
 14592                                  ;   on exit:
 14593                                  ;	carry clear
 14594                                  ;	    si = 1  no change
 14595                                  ;	    si = 0  ?
 14596                                  ;	    si = -1 change
 14597                                  ;
 14598                                  ;	carry set:
 14599                                  ;	    error and ax has error code.
 14600                                  
 14601                                  read_volume_id:
 14602 00001903 52                      		push	dx		; preserve registers
 14603 00001904 51                      		push	cx
 14604 00001905 53                      		push	bx
 14605 00001906 50                      		push	ax
 14606 00001907 06                      		push	es		; stack the bds last
 14607 00001908 57                      		push	di
 14608 00001909 1E                      		push	ds		; point es to Bios_Data
 14609 0000190A 07                      		pop	es
 14610 0000190B BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14611 0000190E BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14612 00001911 B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14613 00001914 F3A4                    		rep movsb
 14614 00001916 5F                      		pop	di
 14615 00001917 07                      		pop	es
 14616 00001918 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14617                                  					; # of fats
 14618 0000191C 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14619                                  					; sectors / fat
 14620 00001920 F6E1                    		mul	cl		; size taken by	fats
 14621 00001922 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14622                                  					; add on reserved sectors
 14623                                  					;
 14624                                  					; ax is	now sector # (0	based)
 14625                                  		; 17/10/2022
 14626 00001926 2EA3[0119]              		mov	[cs:ROOTSEC], ax
 14627                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14628                                  					; 0070h:3EFFh =	2C7h:198Fh
 14629 0000192A 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14630                                  					; # root dir entries
 14631 0000192E B104                    		mov	cl, 4		; 16 entries/sector
 14632 00001930 D3E8                    		shr	ax, cl		; divide by 16
 14633                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 14634                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 14635 00001932 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 14636                                  next_sec:				
 14637 00001933 51                      		push	cx		; save outer loop counter
 14638 00001934 2EA1[0119]              		mov	ax, [cs:ROOTSEC]
 14639                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14640                                  					; get sector #
 14641 00001938 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14642                                  					; sectors / track
 14643 0000193C 31D2                    		xor	dx, dx
 14644 0000193E F7F1                    		div	cx
 14645                                  
 14646                                  ; set up registers for call to read_sector
 14647                                  
 14648 00001940 42                      		inc	dx		; dx= sectors into track
 14649                                  					; ax= track count from 0
 14650 00001941 88D1                    		mov	cl, dl		; sector to read
 14651 00001943 31D2                    		xor	dx, dx
 14652 00001945 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14653                                  					; # heads on this disc
 14654 00001949 88D6                    		mov	dh, dl		; head number
 14655 0000194B 88C5                    		mov	ch, al		; track	#
 14656 0000194D E828EE                  		call	read_sector	; get first sector of the root directory,
 14657                                  					; ds:bx	-> directory sector
 14658 00001950 723F                    		jb	short readviderr
 14659 00001952 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14660 00001955 B008                    		mov	al, 8		; volume label bit
 14661                                  fvid_loop:				
 14662                                  		; 02/09/2023 (PCDOS 7.1)
 14663 00001957 382F                    		cmp	[bx], ch ; 0
 14664                                  		;cmp	byte [bx], 0 ; end of dir?
 14665 00001959 7433                    		jz	short no_vid	; yes, no vol id
 14666 0000195B 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14667 0000195E 7405                    		jz	short ent_loop	; yes, skip
 14668 00001960 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14669 00001963 750F                    		jnz	short found_vid	; jmp yes
 14670                                  ent_loop:				
 14671 00001965 83C320                  		add	bx, 32		; add length of	directory entry
 14672 00001968 E2ED                    		loop	fvid_loop
 14673 0000196A 59                      		pop	cx		; outer loop
 14674 0000196B 2EFF06[0119]            		inc	word [cs:ROOTSEC]
 14675                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14676                                  					; next sector
 14677 00001970 E2C1                    		loop	next_sec	; continue
 14678                                  notfound:
 14679                                  		; 02/09/2023
 14680                                  		;xor	si, si
 14681 00001972 EB13                    		jmp	short fvid_ret
 14682                                  ; ---------------------------------------------------------------------------
 14683                                  
 14684                                  found_vid:
 14685                                  		; 02/09/2023
 14686                                  		; cf = 0  ('test' instruction clears cf)				
 14687 00001974 59                      		pop	cx		; clean stack of outer loop counter
 14688 00001975 89DE                    		mov	si, bx		; point	to volume_id
 14689 00001977 06                      		push	es		; preserve current bds
 14690 00001978 57                      		push	di
 14691 00001979 1E                      		push	ds
 14692 0000197A 07                      		pop	es		; point es to Bios_Data
 14693 0000197B BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14694 0000197E B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14695                                  					; length of string minus nul
 14696 00001981 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14697                                  		;xor	al, al
 14698                                  		; 02/09/2023
 14699 00001983 91                      		xchg	ax, cx		; ax = 0
 14700 00001984 AA                      		stosb			; null terminate
 14701                                  		;;xor	si, si
 14702                                  		; 02/09/2023
 14703                                  		;xchg	ax, si		; si = 0
 14704 00001985 5F                      		pop	di		; restore current bds
 14705 00001986 07                      		pop	es
 14706                                  fvid_ret:
 14707                                  		; 02/09/2023
 14708 00001987 31F6                    		xor	si, si ; 0
 14709                                  				
 14710 00001989 58                      		pop	ax
 14711                                  		; 10/12/2022
 14712                                  		; cf = 0
 14713                                  		;clc
 14714                                  rvidret:				
 14715 0000198A 5B                      		pop	bx		; restore registers
 14716 0000198B 59                      		pop	cx
 14717 0000198C 5A                      		pop	dx
 14718 0000198D C3                      		retn
 14719                                  ; ---------------------------------------------------------------------------
 14720                                  
 14721                                  no_vid:
 14722 0000198E 59                      		pop	cx		; clean stack of outer loop counter
 14723                                  		;jmp	short notfound	; not found
 14724                                  		; 02/09/2023
 14725 0000198F EBF6                    		jmp	short fvid_ret
 14726                                  ; ---------------------------------------------------------------------------
 14727                                  
 14728                                  readviderr:				
 14729 00001991 5E                      		pop	si		; trash the outer loop counter
 14730 00001992 5E                      		pop	si		; caller's ax, return error code instead 
 14731 00001993 EBF5                    		jmp	short rvidret
 14732                                  
 14733                                  ; ---------------------------------------------------------------------------
 14734                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 14735                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 14736                                  preset_volid_addr:
 14737 00001995 BE[0A09]                		mov	si, tmp_vid	; "NO NAME    "
 14738                                  		;
 14739                                  		; PCDOS 7.1
 14740                                  		;add	di, 125		; BDS.volid
 14741                                  		;mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 14742                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 14743 00001998 83C74B                  		add	di, 75		; BDS.volid
 14744 0000199B B90C00                  		mov	cx, 12		; VOLID_SIZ
 14745                                  		;
 14746 0000199E FC                      		cld
 14747 0000199F C3                      		retn
 14748                                  
 14749                                  ; =============== S U B	R O U T	I N E =======================================
 14750                                  
 14751                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14752                                  ;
 14753                                  ; inputs:	es:di has current bds
 14754                                  ; outputs:	bds for drive has volume id from tmp
 14755                                  
 14756                                  transfer_volume_id:
 14757 000019A0 57                      		push	di		; copy the volume id from tmp to special drive
 14758 000019A1 56                      		push	si
 14759 000019A2 51                      		push	cx
 14760                                  		
 14761                                  		;mov	si, tmp_vid	; "NO NAME	 "
 14762                                  		;;add	di, BDS.volid
 14763                                  		;add	di, 75		; BDS.volid
 14764                                  		;;mov	cx, VOLID_SIZ
 14765                                  		;mov	cx, 12		; VOLID_SIZ
 14766                                  		;cld
 14767                                  		; 02/09/2023 (PCDOS 7.1)
 14768 000019A3 E8EFFF                  		call	preset_volid_addr
 14769                                  
 14770 000019A6 F3A4                    		rep movsb
 14771 000019A8 59                      		pop	cx
 14772 000019A9 5E                      		pop	si
 14773 000019AA 5F                      		pop	di
 14774 000019AB C3                      		retn
 14775                                  
 14776                                  ; =============== S U B	R O U T	I N E =======================================
 14777                                  
 14778                                  ;  check_volume_id - compare volume id in tmp area with
 14779                                  ;		     one expected for drive
 14780                                  ;
 14781                                  ;   inputs:	es:di has current bds for drive
 14782                                  ;   outputs:	zero true means it matched
 14783                                  
 14784                                  check_volume_id:
 14785 000019AC 57                      		push	di
 14786 000019AD 51                      		push	cx
 14787                                  		
 14788                                  		;mov	si, tmp_vid	; "NO NAME	 "
 14789                                  		;;add	di, BDS.volid
 14790                                  		;add	di, 75		; BDS.volid
 14791                                  		;;mov	cx, VOLID_SIZ
 14792                                  		;mov	cx, 12		; VOLID_SIZ
 14793                                  		;cld
 14794                                  		; 02/09/2023 (PCDOS 7.1)
 14795 000019AE E8E4FF                  		call	preset_volid_addr
 14796                                  
 14797 000019B1 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14798 000019B3 59                      		pop	cx
 14799 000019B4 5F                      		pop	di
 14800 000019B5 C3                      		retn
 14801                                  
 14802                                  ; =============== S U B	R O U T	I N E =======================================
 14803                                  
 14804                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14805                                  ;	      - uses the fat id obtained from the boot sector.
 14806                                  ;
 14807                                  ;   inputs:	medbyt is expected fat id
 14808                                  ;		es:di points to current bds
 14809                                  ;
 14810                                  ;   output:	si = -1 if fat id different,
 14811                                  ;		si = 0 otherwise
 14812                                  ;
 14813                                  ;   no other registers changed.
 14814                                  
 14815                                  fat_check:		
 14816 000019B6 50                      		push	ax
 14817 000019B7 31F6                    		xor	si, si		; say fat id's are same.
 14818 000019B9 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14819 000019BC 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14820                                  					; compare it with the bds medbyte
 14821 000019C0 7401                    		jz	short okret1	; carry	clear
 14822 000019C2 4E                      		dec	si
 14823                                  okret1:					
 14824 000019C3 58                      		pop	ax
 14825 000019C4 C3                      		retn
 14826                                  
 14827                                  ; ---------------------------------------------------------------------------
 14828                                  
 14829                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14830                                  		;times 7 db 0
 14831                                  
 14832                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14833                                  
 14834                                  		; 09/12/2022
 14835                                  		;times 4 db 0	; 17/10/2022
 14836                                  		;db 4 dup(0)	; times 4 db 0
 14837                                  
 14838                                  ; ---------------------------------------------------------------------------
 14839                                  
 14840                                  		; 09/12/2022
 14841                                  		;db 0
 14842                                  
 14843                                  number2div	equ ($-BCode_start)
 14844                                  number2mod	equ (number2div % 16)
 14845                                  
 14846                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 14847 000019C5 00<rep Bh>              		times (16-number2mod) db 0
 14848                                  %endif
 14849                                  
 14850                                  ;align 16
 14851                                  
 14852                                  ; 09/12/2022
 14853                                  BCODE_END	equ $ - BCode_start
 14854                                  ; 29/09/2023
 14855                                  BCODEEND:
 14856                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14857                                  ; 13/12/2022
 14858                                  SYSINITOFFSET	equ BCODE_END
 14859                                  ; 29/09/2023
 14860                                  ;SYSINITOFFSET	equ $-$$
 14861                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14862                                  
 14863                                  ; 28/09/2023
 14864                                  S2SIZE equ $-$$
 14865                                  
 14866                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14867                                  
 14868                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14869                                  ; 01/05/2019 - Retro DOS v4.0 
 14870                                  ; ============================================================================
 14871                                  ; end of BIOSCODE
 14872                                  
 14873                                  ; ----------------------------------------------------------------------------
 14874                                  ; %include sysinit5.s	; 09/12/2022
 14875                                  ; ----------------------------------------------------------------------------
 14876                                  
 14877                                  ;=============================================================================
 14878                                  ; (IO.SYS) SYSINIT SEGMENT 
 14879                                  ;=============================================================================
 14880                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14881                                  
 14882                                  section .SYSINIT vstart=0
 14883                                  
 14884                                  ; ****************************************************************************
 14885                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14886                                  ; ----------------------------------------------------------------------------
 14887                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14888                                  ; ----------------------------------------------------------------------------
 14889                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14890                                  ; ----------------------------------------------------------------------------
 14891                                  ; Assembler: NASM version 2.15
 14892                                  ; ----------------------------------------------------------------------------
 14893                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14894                                  ; ----------------------------------------------------------------------------
 14895                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14896                                  ; ----------------------------------------------------------------------------
 14897                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14898                                  ; source code by Microsoft, 1991 
 14899                                  ; ----------------------------------------------------------------------------
 14900                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14901                                  ; by Microsoft, 12/10/1983
 14902                                  ; ****************************************************************************
 14903                                  ; main file: 'retrodos4.s'
 14904                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14905                                  
 14906                                  ; 21/10/2022
 14907                                  ; ----------------------------------------------------------------------------
 14908                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14909                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14910                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14911                                  ; ----------------------------------------------------------------------------
 14912                                  ; Binary file splitter & joiner: FFSJ v3.3
 14913                                  
 14914                                  ;--------------------------------------------------------------
 14915                                  ; SYSINIT.TXT (27/01/1983)
 14916                                  ;--------------------------------------------------------------
 14917                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14918                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14919                                  ;performed any  initialization  it  needs  to  do.   Control is
 14920                                  ;transfered with a long jump to the external  variable  SYSINIT
 14921                                  ;
 14922                                  ;
 14923                                  ;   The OEM  has  the  following  variables declared external:
 14924                                  ;
 14925                                  ;   CURRENT_DOS_LOCATION    WORD
 14926                                  ;
 14927                                  ;This word  contains  the  segment  number of the DOS before it
 14928                                  ;is relocated.  The OEM bios must set this value.
 14929                                  ;
 14930                                  ;   FINAL_DOS_LOCATION      WORD
 14931                                  ;
 14932                                  ;This word contains the segment number of the DOS after SYSINIT
 14933                                  ;moves it.  The OEM bios must set this value.
 14934                                  ;
 14935                                  ;   DEVICE_LIST             DWORD
 14936                                  ;
 14937                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14938                                  ;character and block device drivers.  The  OEM  must  set  this
 14939                                  ;value.
 14940                                  ;
 14941                                  ;   MEMORY_SIZE             WORD
 14942                                  ;
 14943                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14944                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14945                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14946                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14947                                  ;and read it back until it gets a mismatch.
 14948                                  ;
 14949                                  ;   DEFAULT_DRIVE           BYTE
 14950                                  ;
 14951                                  ;This is  the initial default drive when the system first comes
 14952                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14953                                  ;it then drive a is assumed.
 14954                                  ;
 14955                                  ;   BUFFERS                 BYTE
 14956                                  ;
 14957                                  ;This is  the  default  number of buffers for the system.  This
 14958                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14959                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14960                                  ;
 14961                                  ;   FILES                   BYTE
 14962                                  ;
 14963                                  ;This is  the  default  number  of  files for the system.  This
 14964                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14965                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14966                                  ;
 14967                                  ;   SYSINIT                 FAR
 14968                                  ;
 14969                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14970                                  ;this label at the end of its INIT code.
 14971                                  ;
 14972                                  ;   The OEM  has  the  following  variables declared public:
 14973                                  ;
 14974                                  ;   RE_INIT                 FAR
 14975                                  ;
 14976                                  ;This is an entry point which allows the BIOS to do some INIT
 14977                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14978                                  ;PRESERVED.  On entry DS points to the first available memory
 14979                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14980                                  ;prefix which represents  the  "program"  currently  running.
 14981                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14982                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14983                                  ;that  no  memory  is  allocated to it, it is running in free
 14984                                  ;memory.
 14985                                  ;NOTES:
 14986                                  ;     At the time this routine is called SYSINIT occupies the
 14987                                  ;highest 10K of memory ("highest" is determined by the  value
 14988                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14989                                  ;     Since this is called AFTER DOS is initialized, you can
 14990                                  ;make system calls.  This also implies that the code for this
 14991                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14992                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14993                                  ;     If you don't want  anything done just set this to point
 14994                                  ;at a FAR RET instruction.
 14995                                  
 14996                                  ; ----------------------------------------------------------------------
 14997                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14998                                  ; ----------------------------------------------------------------------
 14999                                  
 15000                                  ;include version.inc
 15001                                  ; ----------------------------------------------------------------------
 15002                                  
 15003                                  ;FALSE   EQU     0
 15004                                  ;TRUE    EQU     0FFFFh
 15005                                  
 15006                                  ;IBMVER	    EQU     TRUE
 15007                                  ;IBMCOPYRIGHT EQU   FALSE
 15008                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 15009                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 15010                                  ;MSVER      EQU     FALSE
 15011                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 15012                                  ;KANJI      EQU     FALSE
 15013                                  
 15014                                  ;(MSDOS 6.0, versiona.inc, 1991)
 15015                                  ; ----------------------------------------------------------------------
 15016                                  ;MAJOR_VERSION  EQU	6
 15017                                  ;;MINOR_VERSION	EQU	0	;6.00
 15018                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 15019                                  
 15020                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 15021                                  ; ----------------------------------------------------------------------
 15022                                  MAJOR_VERSION   EQU	5
 15023                                  MINOR_VERSION   EQU	0
 15024                                  
 15025                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 15026                                  
 15027                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 15028                                  				; currently 0.
 15029                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 15030                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 15031                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 15032                                  
 15033                                  ;      if1
 15034                                  ;      %OUT  ... for DOS Version 5.00 ...
 15035                                  ;      endif
 15036                                  
 15037                                         ;******************************
 15038                                         ;Each assembler program should:
 15039                                         ;  mov ah,030h                   ;DOS Get Version function
 15040                                         ;  int 021h                      ;Version ret. in AX,minor version first
 15041                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 15042                                         ;  jne error_handler             ; EXACT version match.
 15043                                         ;******************************
 15044                                  
 15045                                  ; ----------------------------------------------------------------------
 15046                                  ; device definitions
 15047                                  
 15048                                  ;Attribute bit masks
 15049                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 15050                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 15051                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 15052                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 15053                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 15054                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 15055                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 15056                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 15057                                  
 15058                                  ; The device table list has the form:
 15059                                  struc	SYSDEV
 15060 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 15061 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 15062 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 15063 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 15064 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 15065                                  .size:
 15066                                  endstruc
 15067                                  
 15068                                  ;Static Reguest Header
 15069                                  struc	SRHEAD
 15070 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 15071 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 15072 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 15073 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 15074 00000005 ????????????????                	resb 8		;Reserved for queue links
 15075                                  .size:
 15076                                  endstruc
 15077                                  
 15078                                  ;Status word masks
 15079                                  STERR   EQU     8000H           ;Bit 15 - Error
 15080                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 15081                                  STDON   EQU     0100H           ;Bit 8 - Done
 15082                                  STECODE EQU     00FFH           ;Error code
 15083                                  WRECODE EQU     0
 15084                                  
 15085                                  ;Function codes
 15086                                  DEVINIT EQU     0               ;Initialization
 15087                                  DINITHL EQU     26              ;Size of init header
 15088                                  DEVMDCH EQU     1               ;Media check
 15089                                  DMEDHL  EQU     15              ;Size of media check header
 15090                                  DEVBPB  EQU     2               ;Get BPB
 15091                                  DEVRDIOCTL EQU  3               ;IOCTL read
 15092                                  DBPBHL  EQU     22              ;Size of Get BPB header
 15093                                  DEVRD   EQU     4               ;Read
 15094                                  DRDWRHL EQU     22              ;Size of RD/WR header
 15095                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 15096                                  DRDNDHL EQU     14              ;Size of non destructive read header
 15097                                  DEVIST  EQU     6               ;Input status
 15098                                  DSTATHL EQU     13              ;Size of status header
 15099                                  DEVIFL  EQU     7               ;Input flush
 15100                                  DFLSHL  EQU     15              ;Size of flush header
 15101                                  DEVWRT  EQU     8               ;Write
 15102                                  DEVWRTV EQU     9               ;Write with verify
 15103                                  DEVOST  EQU     10              ;Output status
 15104                                  DEVOFL  EQU     11              ;Output flush
 15105                                  DEVWRIOCTL EQU  12              ;IOCTL write
 15106                                  
 15107                                  ; ----------------------------------------------------------------------
 15108                                  struc	SYS_FCB
 15109 00000000 ??                      .fcb_drive:	resb 1
 15110 00000001 ????????????????        .fcb_name:	resb 8
 15111 00000009 ??????                  .fcb_ext:	resb 3
 15112 0000000C ????                    .fcb_EXTENT:	resw 1
 15113 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15114 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15115                                                          ; word
 15116 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15117 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15118 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15119 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15120                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15121                                                          ; If file, bit 6=0 if dirty
 15122                                                          ; If I/O device, bit 6=0 if EOF (input)
 15123                                                          ;               Bit 5=1 if Raw mode
 15124                                                          ;               Bit 0=1 if console input device
 15125                                                          ;               Bit 1=1 if console output device
 15126                                                          ;               Bit 2=1 if null device
 15127                                                          ;               Bit 3=1 if clock device
 15128 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15129 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15130 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15131 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15132 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15133 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15134                                  .size:
 15135                                  endstruc
 15136                                  
 15137                                  ; ----------------------------------------------------------------------
 15138                                  ; Field definition for I/O buffer information
 15139                                  
 15140                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15141                                  
 15142                                  struc buffinfo
 15143 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15144 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15145 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15146                                  			; SFT table index (bit 7 = 1)
 15147                                  			; = FFh if buffer free
 15148 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15149                                  			;	= 0 if Local device buffer
 15150                                  			; Bit 6 = 1 if buffer dirty
 15151                                  			; Bit 5 = Reserved
 15152                                  			; Bit 4 = Search bit (bit 7 = 1)
 15153                                  			; Bit 3 = 1 if buffer is DATA
 15154                                  			; Bit 2 = 1 if buffer is DIR
 15155                                  			; Bit 1 = 1 if buffer is FAT
 15156                                  			; Bit 0 = Reserved
 15157 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15158                                  ; The next two items are often refed as a word (bit 7 = 0)
 15159 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15160 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15161 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15162 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15163 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15164                                  .size:
 15165                                  endstruc
 15166                                  
 15167                                  %define buf_offset	dword [buf_sector]
 15168                                  			;For bit 7 = 1, this is the byte
 15169                                  			;offset of the start of the buffer in
 15170                                  			;the file pointed to by buf_ID.  Thus
 15171                                  			;the buffer starts at location
 15172                                  			;buf_offset in the file and contains
 15173                                  			;buf_fill bytes.
 15174                                  
 15175                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15176                                  
 15177                                  
 15178                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15179                                  
 15180                                  ;Flag byte masks
 15181                                  buf_isnet	EQU	10000000B
 15182                                  buf_dirty	EQU	01000000B
 15183                                  ;***
 15184                                  buf_visit	EQU	00100000B
 15185                                  ;***
 15186                                  buf_snbuf	EQU	00010000B
 15187                                  
 15188                                  buf_isDATA	EQU	00001000B
 15189                                  buf_isDIR	EQU	00000100B
 15190                                  buf_isFAT	EQU	00000010B
 15191                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15192                                  
 15193                                  buf_NetID	EQU	bufinsiz
 15194                                  
 15195                                  ; ----------------------------------------------------------------------
 15196                                  
 15197                                  ; ----------------------------------------------------------------------
 15198                                  ;**	DPB - Drive Parameter Block
 15199                                  
 15200                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15201                                  
 15202                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15203                                  ;	possibly inaccurate deductions from code study... - jgl
 15204                                  ;
 15205                                  ;	The DPB is DOS's main structure for describing block devices.
 15206                                  ;	It contains info about the "Drive" intermingled with info about
 15207                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15208                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15209                                  ;
 15210                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15211                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15212                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15213                                  
 15214                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15215                                  
 15216                                  ; 12/05/2019 - Retro DOS v4.0
 15217                                  
 15218                                  struc	DPB
 15219 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15220 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15221 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15222 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15223 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15224 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15225 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15226 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15227 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15228 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15229                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15230 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15231 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15232 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15233 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15234 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15235                                  				; check the first time this DPB is used
 15236 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15237 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15238 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15239                                  .size:
 15240                                  endstruc
 15241                                  
 15242                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15243                                  
 15244                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15245                                  
 15246                                  ; ----------------------------------------------------------------------
 15247                                  ; 26/03/2018
 15248                                  
 15249                                  ; IOCTL SUB-FUNCTIONS
 15250                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15251                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15252                                  IOCTL_READ_HANDLE	EQU	2
 15253                                  IOCTL_WRITE_HANDLE	EQU	3
 15254                                  IOCTL_READ_DRIVE	EQU	4
 15255                                  IOCTL_WRITE_DRIVE	EQU	5
 15256                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15257                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15258                                  IOCTL_CHANGEABLE?	EQU	8
 15259                                  IOCTL_SHARING_RETRY	EQU	11
 15260                                  GENERIC_IOCTL_HANDLE	EQU	12
 15261                                  GENERIC_IOCTL		EQU	13
 15262                                  
 15263                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15264                                  RAWIO			EQU	8
 15265                                  
 15266                                  ; RAWIO SUB-FUNCTIONS
 15267                                  GET_DEVICE_PARAMETERS	EQU	60H
 15268                                  SET_DEVICE_PARAMETERS	EQU	40H
 15269                                  READ_TRACK		EQU	61H
 15270                                  WRITE_TRACK		EQU	41H
 15271                                  VERIFY_TRACK		EQU	62H
 15272                                  FORMAT_TRACK		EQU	42H
 15273                                  
 15274                                  ; DEVICETYPE VALUES
 15275                                  MAX_SECTORS_IN_TRACK	EQU	63
 15276                                  DEV_5INCH		EQU	0
 15277                                  DEV_5INCH96TPI		EQU	1
 15278                                  DEV_3INCH720KB		EQU	2
 15279                                  DEV_8INCHSS		EQU	3
 15280                                  DEV_8INCHDS		EQU	4
 15281                                  DEV_HARDDISK		EQU	5
 15282                                  DEV_OTHER		EQU	7
 15283                                  ;DEV_3INCH1440KB	EQU	7
 15284                                  DEV_3INCH2880KB		EQU	9
 15285                                  ; Retro DOS v2.0 - 26/03/2018
 15286                                  ;;DEV_TAPE		EQU	6
 15287                                  ;;DEV_ERIMO		EQU	8
 15288                                  ;DEV_3INCH2880KB	EQU	9
 15289                                  DEV_3INCH1440KB		EQU	10
 15290                                  
 15291                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15292                                  					; CURRENTLY SUPPORT.
 15293                                  MAX_DEV_TYPE		EQU	10
 15294                                  
 15295                                  struc A_SECTORTABLE
 15296 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15297 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15298                                  .size:
 15299                                  endstruc
 15300                                  
 15301                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15302                                  
 15303                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15304                                  ;
 15305                                  ;	The BPB contains information about the disk structure.  It dates
 15306                                  ;	back to the earliest FAT systems and so FAT information is
 15307                                  ;	intermingled with physical driver information.
 15308                                  ;
 15309                                  ;	A boot sector contains a BPB for its device; for other disks
 15310                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15311                                  ;	information in the DPB.
 15312                                  ;
 15313                                  ;	The BDS structure contains a BPB within it.
 15314                                  
 15315                                  struc A_BPB
 15316 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15317 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15318 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15319 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15320 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15321 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15322 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15323 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15324 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15325 0000000F ????                    .BPB_HEADS:		resw	1
 15326 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15327 00000013 ????                    			resw	1
 15328 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15329 00000017 ????                    			resw	1
 15330 00000019 ????????????            			resb	6	; NOTE:  many times these
 15331                                  ;					; 	 6 bytes are omitted
 15332                                  ;					;	 when BPB manipulations
 15333                                  ;					;	 are performed!
 15334                                  .size:
 15335                                  endstruc
 15336                                  
 15337                                  struc A_DEVICEPARAMETERS
 15338 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15339 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15340 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15341 00000004 ????                    .DP_CYLINDERS:		resw	1
 15342 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15343 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15344 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15345 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15346                                  endstruc
 15347                                  
 15348                                  ; ----------------------------------------------------------------------
 15349                                  ; structure, equates for devmark for mem command.
 15350                                  
 15351                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15352                                  
 15353                                  struc devmark
 15354 00000000 ??                       .id:	    resb 1
 15355 00000001 ????                     .seg:	    resw 1
 15356 00000003 ????                     .size:	    resw 1
 15357 00000005 ??????                   .dum:	    resb 3
 15358 00000008 ????????????????         .filename: resb 8
 15359                                  endstruc
 15360                                  
 15361                                  devmark_stk	equ	'S'
 15362                                  devmark_device	equ	'D'
 15363                                  devmark_ifs	equ	'I'
 15364                                  devmark_buf	equ	'B'
 15365                                  devmark_cds	equ	'L' ; lastdrive
 15366                                  devmark_files	equ	'F'
 15367                                  devmark_fcbs	equ	'X'
 15368                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15369                                  devmark_ems_stub equ	'E'
 15370                                  
 15371                                  setbrkdone	equ	00000001b
 15372                                  for_devmark	equ	00000010b
 15373                                  not_for_devmark equ	11111101b
 15374                                  
 15375                                  ; ----------------------------------------------------------------------
 15376                                  ; Memory arena structure
 15377                                  
 15378                                  ; 24/03/2019 - Retro DOS v4.0 
 15379                                  ; (MSDOS 6.0, ARENA.INC)
 15380                                  
 15381                                  ;** Arena Header
 15382                                  
 15383                                  struc ARENA
 15384 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15385 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15386 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15387 00000005 ??????                  .RESERVED	resb 3		; reserved
 15388 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15389                                  endstruc
 15390                                  
 15391                                  ; 12/04/2019
 15392                                  
 15393                                  arena_owner_system	EQU 0	; free block indication
 15394                                  
 15395                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15396                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15397                                  
 15398                                  ; ----------------------------------------------------------------------
 15399                                  ; Process data block (otherwise known as program header)
 15400                                  
 15401                                  ; 23/03/2019 - Retro DOS v4.0
 15402                                  
 15403                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15404                                  
 15405                                  FILPERPROC	EQU     20
 15406                                  
 15407                                  struc PDB	; Process_data_block
 15408 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15409 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15410 00000004 ??                                      resb 1
 15411 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15412 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15413 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15414 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15415 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15416 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15417 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15418 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15419 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15420 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15421 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15422 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15423 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15424 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15425 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15426 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15427 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15428 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15429 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15430 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15431 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15432 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15433                                  ;.size:
 15434                                  endstruc
 15435                                  
 15436                                  ; ----------------------------------------------------------------------
 15437                                  ; <system call definitions>
 15438                                  
 15439                                  ; 23/03/2019 - Retro DOS v4.0
 15440                                  
 15441                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15442                                  
 15443                                  ABORT                           EQU 0   ;  0      0
 15444                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15445                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15446                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15447                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15448                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15449                                  RAW_CON_IO                      EQU 6   ;  6      6
 15450                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15451                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15452                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15453                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15454                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15455                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15456                                  DISK_RESET                      EQU 13  ; 13      D
 15457                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15458                                  FCB_OPEN                        EQU 15  ; 15      F
 15459                                  FCB_CLOSE                       EQU 16  ; 16     10
 15460                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15461                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15462                                  FCB_DELETE                      EQU 19  ; 19     13
 15463                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15464                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15465                                  FCB_CREATE                      EQU 22  ; 22     16
 15466                                  FCB_RENAME                      EQU 23  ; 23     17
 15467                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15468                                  SET_DMA                         EQU 26  ; 26     1A
 15469                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15470                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15471                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15472                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15473                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15474                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15475                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15476                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15477                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15478                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15479                                  GET_DATE                        EQU 42  ; 42     2A
 15480                                  SET_DATE                        EQU 43  ; 43     2B
 15481                                  GET_TIME                        EQU 44  ; 44     2C
 15482                                  SET_TIME                        EQU 45  ; 45     2D
 15483                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15484                                  ; Extended functionality group
 15485                                  GET_DMA                         EQU 47  ; 47     2F
 15486                                  GET_VERSION                     EQU 48  ; 48     30
 15487                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15488                                  GET_DPB                         EQU 50  ; 50     32
 15489                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15490                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15491                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15492                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15493                                  CHAR_OPER                       EQU 55  ; 55     37
 15494                                  INTERNATIONAL                   EQU 56  ; 56     38
 15495                                  ;   Directory Group
 15496                                  MKDIR                           EQU 57  ; 57     39
 15497                                  RMDIR                           EQU 58  ; 58     3A
 15498                                  CHDIR                           EQU 59  ; 59     3B
 15499                                  ;   File Group
 15500                                  CREAT                           EQU 60  ; 60     3C
 15501                                  OPEN                            EQU 61  ; 61     3D
 15502                                  CLOSE                           EQU 62  ; 62     3E
 15503                                  READ                            EQU 63  ; 63     3F
 15504                                  WRITE                           EQU 64  ; 64     40
 15505                                  UNLINK                          EQU 65  ; 65     41
 15506                                  LSEEK                           EQU 66  ; 66     42
 15507                                  CHMOD                           EQU 67  ; 67     43
 15508                                  IOCTL                           EQU 68  ; 68     44
 15509                                  XDUP                            EQU 69  ; 69     45
 15510                                  XDUP2                           EQU 70  ; 70     46
 15511                                  CURRENT_DIR                     EQU 71  ; 71     47
 15512                                  ;    Memory Group
 15513                                  ALLOC                           EQU 72  ; 72     48
 15514                                  DEALLOC                         EQU 73  ; 73     49
 15515                                  SETBLOCK                        EQU 74  ; 74     4A
 15516                                  ;    Process Group
 15517                                  EXEC                            EQU 75  ; 75     4B
 15518                                  EXIT                            EQU 76  ; 76     4C
 15519                                  WAITPROCESS			EQU 77  ; 77     4D
 15520                                  FIND_FIRST                      EQU 78  ; 78     4E
 15521                                  ;   Special Group
 15522                                  FIND_NEXT                       EQU 79  ; 79     4F
 15523                                  ; SPECIAL SYSTEM GROUP
 15524                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15525                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15526                                  GET_IN_VARS                     EQU 82  ; 82     52
 15527                                  SETDPB                          EQU 83  ; 83     53
 15528                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15529                                  DUP_PDB                         EQU 85  ; 85     55
 15530                                  RENAME                          EQU 86  ; 86     56
 15531                                  FILE_TIMES                      EQU 87  ; 87     57
 15532                                  ;
 15533                                  ALLOCOPER			EQU 88	; 88     58	
 15534                                  ; Network extention system calls
 15535                                  GetExtendedError		EQU 89	; 89	 59
 15536                                  CreateTempFile			EQU 90	; 90	 5A
 15537                                  CreateNewFile			EQU 91	; 91	 5B
 15538                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15539                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15540                                  					;	    CloseByName, CloseUser,
 15541                                  					;	    CloseUserProcess,
 15542                                  					;	    GetOpenFileList
 15543                                  UserOper			EQU 94	; 94	 5E Get and Set
 15544                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15545                                  xNameTrans			EQU 96	; 96	 60
 15546                                  PathParse			EQU 97	; 97	 61
 15547                                  GetCurrentPSP			EQU 98	; 98	 62
 15548                                  Hongeul 			EQU 99	; 99	 63
 15549                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15550                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15551                                  GetExtCntry			EQU 101 ; 101	 65
 15552                                  GetSetCdPg			EQU 102 ; 102	 66
 15553                                  ExtHandle			EQU 103 ; 103	 67
 15554                                  Commit				EQU 104 ; 104	 68
 15555                                  GetSetMediaID			EQU 105 ; 105	 69
 15556                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15557                                  ExtOpen 			EQU 108 ; 108	 6C
 15558                                  ;
 15559                                  ;ifdef ROMEXEC
 15560                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15561                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15562                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15563                                  ;endif
 15564                                  ;
 15565                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15566                                  OEM_C1				EQU 249 ; 249	 F9
 15567                                  OEM_C2				EQU 250 ; 250	 FA
 15568                                  OEM_C3				EQU 251 ; 251	 FB
 15569                                  OEM_C4				EQU 252 ; 252	 FC
 15570                                  OEM_C5				EQU 253 ; 253	 FD
 15571                                  OEM_C6				EQU 254 ; 254	 FE
 15572                                  OEM_C7				EQU 255 ; 255	 FF
 15573                                  
 15574                                  ; ----------------------------------------------------------------------
 15575                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15576                                  ; ----------------------------------------------------------------------
 15577                                  
 15578                                  ;;	IF	STACKSW
 15579                                  
 15580                                  ;;
 15581                                  ;; Internal Stack Parameters
 15582                                  ;EntrySize		equ	8
 15583                                  ;
 15584                                  ;MinCount		equ	8
 15585                                  ;DefaultCount		equ	9
 15586                                  ;MaxCount		equ	64
 15587                                  ;
 15588                                  ;MinSize 		equ	32
 15589                                  ;DefaultSize		equ	128
 15590                                  ;MaxSize 		equ	512
 15591                                  
 15592                                  ;;	ENDIF
 15593                                  
 15594                                  ; ----------------------------------------------------------------------
 15595                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15596                                  ; ----------------------------------------------------------------------
 15597                                  					  ;;Rev 3.30 Modification
 15598                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15599                                  									  
 15600                                  ;*******************************					  
 15601                                  ;System Service call ( Int 15h )					  
 15602                                  ;*******************************					  
 15603                                  ;Function AH = 0C0h, Return system configuration			  
 15604                                  ;For PC and PCJR on return:						  
 15605                                  ;	(AH)	= 80h							  
 15606                                  ;	(CY)	= 1							  
 15607                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15608                                  ;	(AH)	= 86h							  
 15609                                  ;	(CY)	= 1							  
 15610                                  ;For all others:							  
 15611                                  ;	(AH)	= 0							  
 15612                                  ;	(CY)	= 0							  
 15613                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15614                                  ; System descriptor :							  
 15615                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15616                                  ;				minimum length = 8			  
 15617                                  ;	DB	xx		model byte				  
 15618                                  ;				0FFh	= PC				  
 15619                                  ;				0FEh	= PC/XT, Portable		  
 15620                                  ;				0FDh	= PC/JR 			  
 15621                                  ;				0FCh	= PC/AT				  
 15622                                  ;				0F9h	= Convertable			  
 15623                                  ;				0F8h	= Model 80			  
 15624                                  ;				0E0 thru 0EFh = reserved		  
 15625                                  ;									  
 15626                                  ;	DB	xx		secondary model byte			  
 15627                                  ;				000h	= PC1				  
 15628                                  ;				000h	= PC/XT, Portable		  
 15629                                  ;				000h	= PC/JR 			  
 15630                                  ;				000h	= PC/AT 			  
 15631                                  ;				001h	= PC/AT Model 339		  
 15632                                  ;				003h	= PC/RT				  
 15633                                  ;				000h	= Convertable			  
 15634                                  ;									  
 15635                                  ;	DB	xx		bios revision level			  
 15636                                  ;				00 for first release, subsequent release  
 15637                                  ;				of code with same model byte and	  
 15638                                  ;				secondary model byte require revison level
 15639                                  ;				to increase by one.			  
 15640                                  ;									  
 15641                                  ;	DB	xx		feature information byte 1		  
 15642                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15643                                  ;					 = 0, DMA channel 3 not used	  
 15644                                  ;									  
 15645                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15646                                  ;					 = 0, 2nd Interrupt chip not present
 15647                                  ;									  
 15648                                  ;				00X00000 = 1, Real Time Clock present	  
 15649                                  ;					 = 0, Real Time Clock not present 
 15650                                  ;									  
 15651                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15652                                  ;						called in keyboard interrupt
 15653                                  ;						(Int 09h).		  
 15654                                  ;					 = 0, Keyboard escape sequence not
 15655                                  ;						called. 		  
 15656                                  ;				0000XXXX reserved			  
 15657                                  ;									  
 15658                                  ;	DB	xx		feature information byte 2 - reserved	  
 15659                                  ;									  
 15660                                  ;	DB	xx		feature information byte 2 - reserved	  
 15661                                  ;									  
 15662                                  ;	DB	xx		feature information byte 2 - reserved	  
 15663                                  ;									  
 15664                                  ;	DB	xx		feature information byte 2 - reserved	  
 15665                                  ;									  
 15666                                  
 15667                                  ; 22/03/2019									  
 15668                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15669 00000000 ????                    .bios_sd_leng:		resw 1				  
 15670 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15671                                  .bios_sd_scnd_modelbyte: 
 15672 00000003 ??                      			resb 1					  
 15673 00000004 ??                      			resb 1					  
 15674 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15675 00000006 ????????                			resb 4					  
 15676                                  endstruc					  
 15677                                  									  
 15678                                  ;FeatureByte1	bit map equates 					  
 15679                                  DMAchannel3		equ 10000000b					  
 15680                                  ScndIntController	equ 01000000b					  
 15681                                  RealTimeClock		equ 00100000b					  
 15682                                  KeyEscapeSeq		equ 00010000b					  
 15683                                  					;;End of Modification
 15684                                  
 15685                                  ; ----------------------------------------------------------------------
 15686                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15687                                  ; ----------------------------------------------------------------------
 15688                                  ; 22/03/2019 - Retro DOS v4.0
 15689                                  
 15690                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15691                                  
 15692                                  struc SysInitVars
 15693                                  ; MSDOS 3.3
 15694 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15695 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15696 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15697 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15698 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15699 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15700 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15701 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15702 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15703 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15704 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15705 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15706                                  ; MSDOS 6.0
 15707 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15708 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15709 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15710 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15711                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15712 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15713 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15714 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15715 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15716 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15717 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15718 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15719                                  .size:
 15720                                  endstruc
 15721                                  
 15722                                  ;This is added for more information exchage between DOS, BIOS.
 15723                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15724                                  
 15725                                  ; 22/03/2019
 15726                                  struc SysInitVars_Ext
 15727 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15728 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15729                                  endstruc
 15730                                  
 15731                                  ; 09/06/2018
 15732                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15733                                  SYSI_DPB    equ	0
 15734                                  SYSI_SFT    equ 4
 15735                                  SYSI_CLOCK  equ 8
 15736                                  SYSI_CON    equ 12
 15737                                  SYSI_MAXSEC equ 16
 15738                                  SYSI_BUF    equ 18 		
 15739                                  SYSI_CDS    equ 22
 15740                                  SYSI_FCB    equ 26
 15741                                  SYSI_KEEP   equ 30
 15742                                  SYSI_NUMIO  equ	32
 15743                                  SYSI_NCDS   equ	33
 15744                                  SYSI_DEV    equ 34
 15745                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15746                                  SYSI_ATTR	  equ 38
 15747                                  SYSI_STRAT	  equ 40
 15748                                  SYSI_INTER	  equ 42
 15749                                  SYSI_NAME	  equ 44
 15750                                  SYSI_SPLICE	  equ 52
 15751                                  SYSI_IBMDOS_SIZE  equ 53
 15752                                  SYSI_IFS_DOSCALL@ equ 55
 15753                                  SYSI_IFS	  equ 59
 15754                                  SYSI_BUFFERS	  equ 63
 15755                                  SYSI_BOOT_DRIVE   equ 67
 15756                                  SYSI_DWMOVE	  equ 68
 15757                                  SYSI_EXT_MEM	  equ 69
 15758                                  
 15759                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15760                                  
 15761                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15762                                  
 15763                                  struc BUFFINF 	; BUFFINFO
 15764 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15765 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15766 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15767 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15768                                  
 15769 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15770                                  				; are in HMA
 15771 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15772                                  				;  used to read/write on disks
 15773 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15774 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15775 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15776 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15777 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15778 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15779 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15780 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15781 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15782                                  .size:
 15783                                  endstruc
 15784                                  
 15785                                  ; ----------------------------------------------------------------------
 15786                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15787                                  ; ----------------------------------------------------------------------
 15788                                  ; 22/03/2019 - Retro DOS v4.0
 15789                                  
 15790                                  ;**	CDS - Current Directory Structure
 15791                                  ;
 15792                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15793                                  ; network identifiers for each logical name.  The ID field is used dually,
 15794                                  ; both as net ID and for a cluster number for local devices. In the case
 15795                                  ; of local devices, the cluster number will be -1 if there is a potential
 15796                                  ; of the disk being changed or if the path must be recracked.
 15797                                  ;
 15798                                  ;	Some pathnames have special preambles, such as
 15799                                  ;
 15800                                  ;		\\machine\sharename\...
 15801                                  ;	For these pathnames we can't allow ".." processing to back us
 15802                                  ;	up into the special front part of the name.  The CURDIR_END field
 15803                                  ;	holds the address of the seperator character which marks
 15804                                  ;	the split between the special preamble and the regular
 15805                                  ;	path list; ".." processing isn't allowed to back us up past
 15806                                  ;	(i.e., before) CURDIR_END
 15807                                  ;	For the root, it points at the leading /. For net
 15808                                  ;	assignments it points at the end (nul) of the initial assignment:
 15809                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15810                                  ;	  ^		 ^		     ^
 15811                                  
 15812                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15813                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15814                                  
 15815                                  struc 		curdir_list
 15816                                  ; MSDOS 3.3
 15817 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15818 00000043 ????                    .cdir_flags	resw	1		; various flags
 15819 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15820 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15821 0000004D ????                    .cdir_usr_word	resw	1
 15822 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15823                                  ; MSDOS 6.0
 15824 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15825 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15826 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15827                                  .size:
 15828                                  endstruc
 15829                                  
 15830                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15831                                  						; ASM87 which doesn't allow
 15832                                  						; Size directive as a macro
 15833                                  						; argument
 15834                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15835                                  
 15836                                  ;**	Flag values for CURDIR_FLAGS
 15837                                  
 15838                                  ;Flag word masks
 15839                                  curdir_isnet	EQU	1000000000000000B
 15840                                  curdir_isifs	EQU	1000000000000000B
 15841                                  curdir_inuse	EQU	0100000000000000B
 15842                                  curdir_splice	EQU	0010000000000000B
 15843                                  curdir_local	EQU	0001000000000000B
 15844                                  
 15845                                  ; ----------------------------------------------------------------------
 15846                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15847                                  ; ----------------------------------------------------------------------
 15848                                  ; 25/03/2019 - Retro DOS v4.0
 15849                                  
 15850                                  ; system file table
 15851                                  
 15852                                  ;**	System File Table SuperStructure
 15853                                  ;
 15854                                  ;	The system file table entries are allocated in contiguous groups.
 15855                                  ;	There may be more than one such groups; the SF "superstructure"
 15856                                  ;	tracks the groups.
 15857                                  
 15858                                  struc	SF
 15859 00000000 ????????                .SFLink:	resd	1
 15860 00000004 ????                    .SFCount:	resw	1		; number of entries
 15861 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15862                                  .size:
 15863                                  endstruc
 15864                                  
 15865                                  ;**	System file table entry
 15866                                  ;
 15867                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15868                                  
 15869                                  struc	SF_ENTRY
 15870 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15871                                  					;   if FCB then ref count
 15872 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15873 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15874 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15875                                  					; Bit 15 = 1 if remote file
 15876                                  					;	 = 0 if local file or device
 15877                                  					; Bit 14 = 1 if date/time is not to be
 15878                                  					;   set from clock at CLOSE.  Set by
 15879                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15880                                  					;   other reseters of the dirty bit
 15881                                  					;   (WRITE)
 15882                                  					; Bit 13 = Pipe bit (reserved)
 15883                                  					;
 15884                                  					; Bits 0-7 (old FCB_devid bits)
 15885                                  					; If remote file or local file, bit
 15886                                  					; 6=0 if dirty Device ID number, bits
 15887                                  					; 0-5 if local file.
 15888                                  					; bit 7=0 for local file, bit 7
 15889                                  					;      =1 for local I/O device
 15890                                  					; If local I/O device, bit 6=0 if EOF (input)
 15891                                  					;		Bit 5=1 if Raw mode
 15892                                  					;		Bit 0=1 if console input device
 15893                                  					;		Bit 1=1 if console output device
 15894                                  					;		Bit 2=1 if null device
 15895                                  					;		Bit 3=1 if clock device
 15896 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15897                                  					; to device header if local device,
 15898                                  					; points to net device header if
 15899                                  					; remote
 15900 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15901                                  ;.sf_lstclus:	resw	1 ; *	
 15902 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15903 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15904 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15905 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15906                                  ;
 15907                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15908                                  ; ID
 15909                                  ;
 15910 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15911 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15912 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15913                                  ;
 15914                                  ; End of 7 bytes of file-system specific info.
 15915                                  ;
 15916 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15917                                  					; directory entry.  This is used by
 15918                                  					; close to detect file deleted and
 15919                                  					; disk changed errors.
 15920                                  ; SHARING INFO
 15921 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15922 0000002D ????                    .sf_UID:	resw	1
 15923 0000002F ????                    .sf_PID:	resw	1
 15924 00000031 ????                    .sf_MFT:	resw	1
 15925 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15926 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15927                                  .size:
 15928                                  endstruc
 15929                                  
 15930                                  ; ----------------------------------------------------------------------
 15931                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15932                                  ; ----------------------------------------------------------------------
 15933                                  ; 11/06/2018 - Retro DOS v3.0
 15934                                  
 15935                                  ;Equates for COUNTRY INFORMATION.
 15936                                  SetCountryInfo		EQU	1	;country info
 15937                                  SetUcase		EQU	2	;uppercase table
 15938                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15939                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15940                                  SetFileList		EQU	5	;valid file character list
 15941                                  SetCollate		EQU	6	;collating sequence
 15942                                  SetDBCS 		EQU	7	;double byte character set
 15943                                  SetALL			EQU	-1	;all the entries
 15944                                  
 15945                                  ;DOS country and code page information table structure.
 15946                                  ;Internally, IBMDOS gives a pointer to this table.
 15947                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15948                                  ;this structure.
 15949                                  
 15950                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15951 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15952 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15953 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15954 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15955 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15956 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15957                                  
 15958 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15959 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15960                                  
 15961 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15962 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15963                                  
 15964 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15965 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15966                                  
 15967 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15968 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15969 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15970 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15971 00000067 ????                    .ccDFormat:		resw	1	;date format
 15972 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15973                                  					;5 byte of (currency symbol+0)
 15974 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15975 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15976 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15977 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15978 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15979 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15980 00000078 ??                      .ccTFormat:		resb	1	;time format
 15981 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15982 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15983 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15984                                  .size:
 15985                                  endstruc
 15986                                  
 15987                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15988                                  
 15989                                  ; ======================================================================
 15990                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15991                                  ; ======================================================================
 15992                                  ; 21/03/2019 - Retro DOS v4.0
 15993                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15994                                  
 15995                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15996                                  ; 21/10/2022
 15997                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15998                                  ; 22/10/2022
 15999                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 16000                                  ; 09/12/2022
 16001                                  DOSBIOCODESEG equ IOSYSCODESEG
 16002                                  
 16003                                  ; Note: These offset addresses must be chanqed when the code 
 16004                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 16005                                  
 16006                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 16007                                  
 16008                                  ; 09/12/2022
 16009                                  %if 0
 16010                                  
 16011                                  ; 13/05/2019
 16012                                  
 16013                                  ;IsWin386         equ 08CFh
 16014                                  ;V86_Crit_SetFocus equ 08D0h
 16015                                  ; 21/10/2022
 16016                                  IsWin386          equ 08D0h
 16017                                  V86_Crit_SetFocus equ 08D1h 
 16018                                  
 16019                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 16020                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16021                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 16022                                  
 16023                                  ;SysinitPresent	  equ 08FCh
 16024                                  ; 21/10/2022
 16025                                  SysinitPresent	  equ 08FDh
 16026                                  
 16027                                  inHMA		  equ 000Dh
 16028                                  xms		  equ 000Eh
 16029                                  ;FreeHMAPtr	  equ 08F6h
 16030                                  ;multrk_flag	  equ 0533h
 16031                                  ;ec35_flag	  equ 0535h
 16032                                  ;EOT		  equ 012Eh
 16033                                  ; 21/10/2022
 16034                                  FreeHMAPtr	  equ 08F7h
 16035                                  multrk_flag	  equ 052Fh
 16036                                  ec35_flag	  equ 0531h
 16037                                  EOT		  equ 012Ch
 16038                                  
 16039                                  ;NextStack	  equ 08BFh
 16040                                  ;IT_StackLoc	  equ 08C5h
 16041                                  ;IT_StackSize	  equ 08C9h
 16042                                  ; 21/10/2022
 16043                                  NextStack	  equ 08C0h
 16044                                  IT_StackLoc	  equ 08C6h
 16045                                  IT_StackSize	  equ 08CAh
 16046                                  
 16047                                  ;MoveDOSIntoHMA	  equ 08F8h
 16048                                  ; 21/10/2022
 16049                                  MoveDOSIntoHMA	  equ 08F9h
 16050                                  
 16051                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 16052                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 16053                                  ; 21/10/2022
 16054                                  INT19SEM equ 0640h ; (iosys5.txt)
 16055                                  I19_LST  equ 0641h ; (iosys5.txt)
 16056                                  
 16057                                  %endif
 16058                                  
 16059                                  ; 09/12/2022
 16060                                  seg_reinit equ _seg_reinit
 16061                                  ec35_flag  equ ec35flag		
 16062                                  INT19SEM   equ int19sem
 16063                                  I19_LST    equ i19_lst
 16064                                  
 16065                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 16066                                  INT19OLD08 equ I19_LST+6
 16067                                  INT19OLD09 equ I19_LST+11
 16068                                  INT19OLD0A equ I19_LST+16
 16069                                  INT19OLD0B equ I19_LST+21
 16070                                  INT19OLD0C equ I19_LST+26
 16071                                  INT19OLD0D equ I19_LST+31
 16072                                  INT19OLD0E equ I19_LST+36
 16073                                  INT19OLD70 equ I19_LST+41
 16074                                  INT19OLD72 equ I19_LST+46
 16075                                  INT19OLD73 equ I19_LST+51
 16076                                  INT19OLD74 equ I19_LST+56
 16077                                  INT19OLD76 equ I19_LST+61
 16078                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 16079                                  
 16080                                  ; 09/12/2022
 16081                                  %if 0
 16082                                  
 16083                                  ;keyrd_func	equ 04E9h
 16084                                  ;keysts_func	equ 04EAh
 16085                                  ;t_switch	equ 04F6h
 16086                                  ; 21/10/2022
 16087                                  keyrd_func	equ 04E5h
 16088                                  keysts_func	equ 04E6h
 16089                                  t_switch	equ 04F2h
 16090                                  
 16091                                  ; 22/10/2022
 16092                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 16093                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 16094                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 16095                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 16096                                  
 16097                                  %endif
 16098                                  
 16099                                  ; 09/12/2022
 16100                                  BCODESTART	equ BIOSDATAWORD
 16101                                  RE_INIT		equ re_init
 16102                                  
 16103                                  ; ----------------------------------------------------------------------
 16104                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 16105                                  ; ----------------------------------------------------------------------
 16106                                  ; 15/04/2019 - Retro DOS v4.0
 16107                                  
 16108                                  CONFIG_BEGIN        equ  '['
 16109                                  CONFIG_BREAK        equ  'C'
 16110                                  CONFIG_BUFFERS      equ  'B'
 16111                                  CONFIG_COMMENT      equ  'Y'
 16112                                  CONFIG_COUNTRY      equ  'Q'
 16113                                  CONFIG_DEVICE       equ  'D'
 16114                                  CONFIG_DEVICEHIGH   equ  'U'
 16115                                  CONFIG_DOS          equ  'H'
 16116                                  CONFIG_DRIVPARM     equ  'P'
 16117                                  CONFIG_FCBS         equ  'X'
 16118                                  CONFIG_FILES        equ  'F'
 16119                                  CONFIG_INCLUDE      equ  'J'
 16120                                  CONFIG_INSTALL      equ  'I'
 16121                                  CONFIG_INSTALLHIGH  equ  'W'
 16122                                  CONFIG_LASTDRIVE    equ  'L'
 16123                                  CONFIG_MENUCOLOR    equ  'R'
 16124                                  CONFIG_MENUDEFAULT  equ  'A'
 16125                                  CONFIG_MENUITEM     equ  'E'
 16126                                  CONFIG_MULTITRACK   equ  'M'
 16127                                  CONFIG_NUMLOCK      equ  'N'
 16128                                  CONFIG_REM          equ  '0'
 16129                                  CONFIG_SEMICOLON    equ  ';'
 16130                                  CONFIG_SET          equ  'V'
 16131                                  CONFIG_SHELL        equ  'S'
 16132                                  CONFIG_STACKS       equ  'K'
 16133                                  CONFIG_SUBMENU      equ  'O'
 16134                                  CONFIG_SWITCHES     equ  '1'
 16135                                  
 16136                                  CONFIG_UNKNOWN      equ  'Z'
 16137                                  
 16138                                  CONFIG_OPTION_QUERY equ 80h
 16139                                  
 16140                                  ; ----------------------------------------------------------------------
 16141                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16142                                  ; ----------------------------------------------------------------------
 16143                                  ; 21/03/2019 - Retro DOS v4.0
 16144                                  
 16145                                  true	equ	0FFFFh
 16146                                  false	equ	0
 16147                                  cr	equ	13
 16148                                  lf	equ	10
 16149                                  tab	equ	9
 16150                                  
 16151                                  multMULT	   equ	4Ah
 16152                                  multMULTGETHMAPTR  equ	1
 16153                                  multMULTALLOCHMA   equ	2
 16154                                  
 16155                                  ;NOEXEC    equ	FALSE
 16156                                  
 16157                                  stacksw    equ	true	;include switchable hardware stacks
 16158                                  mycds_size equ	88	;size of curdir_list. if it is not
 16159                                  			;the same, then will generate compile error.
 16160                                  
 16161                                  entrysize   equ     8
 16162                                  
 16163                                  mincount    equ     8
 16164                                  defaultcount equ    9
 16165                                  maxcount    equ     64
 16166                                  
 16167                                  minsize     equ     32
 16168                                  defaultsize equ     128
 16169                                  maxsize     equ     512
 16170                                  
 16171                                  ;%define allocbyte  byte [es:bp+0]
 16172                                  ;%define intlevel   byte [es:bp+1]
 16173                                  ;%define savedsp    word [es:bp+2]
 16174                                  ;%define savedss    word [es:bp+4]
 16175                                  ;%define newsp	    word [es:bp+6]
 16176                                  
 16177                                  allocbyte   equ     0
 16178                                  intlevel    equ     1
 16179                                  savedsp     equ     2
 16180                                  savedss     equ     4
 16181                                  newsp       equ     6
 16182                                  
 16183                                  free	    equ     0
 16184                                  allocated   equ     1
 16185                                  overflowed  equ     2
 16186                                  clobbered   equ     3
 16187                                  
 16188                                  ;---------------------------------------
 16189                                  ; external variable defined in ibmbio module for multi-track
 16190                                  
 16191                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16192                                  			  ; it on after handling config.sys file as a
 16193                                  			  ; default value,if multrk_flag = multrk_off1.
 16194                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16195                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16196                                  
 16197                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16198                                  
 16199                                  SYSINIT$:
 16200                                  	;IF	STACKSW 
 16201                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16202                                  	; include STKMES.INC	;Fatal stack error message
 16203                                  	;   public Endstackcode
 16204                                  ;Endstackcode	label byte
 16205                                  	;ENDIF
 16206                                  
 16207                                  ; 05/07/2018
 16208                                  ; ----------------------------------------------------------------------
 16209                                  ; 04/06/2018 - Retro DOS v3.0
 16210                                  
 16211                                  ; ----------------------------------------------------------------------
 16212                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16213                                  ; ----------------------------------------------------------------------
 16214                                  
 16215                                  ;	MSStack.inc
 16216                                  ;
 16217                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16218                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16219                                  ;	a standard header structure.
 16220                                  ;	Fyi, the following shows the relations between
 16221                                  ;	the interrupt vector and interrupt level.
 16222                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16223                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16224                                  ;	MSSTACK module modifies the following interrupt vectors
 16225                                  ;	to meet the standard Interrupt Sharing standard;
 16226                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16227                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16228                                  ;	should be initialized to indicat whether this interrupt handler is
 16229                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16230                                  ;	program header is initialized in STKINIT.INC module.
 16231                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16232                                  ;
 16233                                  
 16234                                  ;  User specifies the number of stack elements - default = 9
 16235                                  ;						 minimum = 8
 16236                                  ;						 maximum = 64
 16237                                  ;
 16238                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16239                                  ;
 16240                                  ;  Picks a stack from pool of stacks and switches to it
 16241                                  ;
 16242                                  ;  Calls the previously saved interrupt vector after pushing flags
 16243                                  ;
 16244                                  ;  On return, returns the stack to the stack pool
 16245                                  ;
 16246                                  
 16247                                  ; This is a modification of STACKS:
 16248                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16249                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16250                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16251                                  ;    . Allows system to work if the only stack that got too big was the most
 16252                                  ;      deeply nested one
 16253                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16254                                  ; 4. Does not intercept any interupts on a PCjr.
 16255                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16256                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16257                                  
 16258                                  		;EVEN
 16259                                  ;align 2
 16260                                  		; 21/10/2022
 16261                                  
 16262 00000000 0000                    		dw	0	; spare field but leave these in order
 16263 00000002 0000                    stackcount:	dw	0
 16264 00000004 0000                    stackat: 	dw	0
 16265 00000006 0000                    stacksize:	dw	0
 16266 00000008 0000                    stacks:		dw	0
 16267 0000000A 0000                    		dw	0
 16268                                  
 16269 0000000C [0800]                  firstentry:	dw	stacks
 16270 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16271 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16272                                  
 16273                                  ;***********************************************************************
 16274                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16275                                  
 16276                                  ; ----------------------------------------------------------------------
 16277                                  
 16278 00000012 00000000                old02:	dd	0
 16279                                  
 16280                                  int02:
 16281                                  
 16282                                  ; *********************************************************************
 16283                                  ;
 16284                                  ; this is special support for the pc convertible / nmi handler
 16285                                  ;
 16286                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16287                                  ;	caused by using the "out" instructions to certain ports. when this
 16288                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16289                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16290                                  ;	includes other type of interrupts (hardware and software), and
 16291                                  ;	also includes other type of nmi's. when any nmi has occured,
 16292                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16293                                  ;	the software takes specific steps to allow further interrupting.
 16294                                  ;
 16295                                  ;	for pc convertible, the situation where the nmi is generated by the
 16296                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16297                                  ;	otherwords, it is actually a "restartable exception". in this
 16298                                  ;	case, the software handler must be able to get to the stack in
 16299                                  ;	order to figure out what instruction caused the problem, where
 16300                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16301                                  ;	we will not switch stacks in this situation. this situation is
 16302                                  ;	detected by interrogating port 62h, and checking for a bit value
 16303                                  ;	of 80h. if set, *****do not switch stacks*****.
 16304                                  ;
 16305                                  ; *********************************************************************
 16306                                  
 16307 00000016 50                      	push	ax
 16308 00000017 06                      	push	es
 16309 00000018 B800F0                  	mov	ax,0F000h
 16310 0000001B 8EC0                    	mov	es,ax
 16311                                  	; 02/11/2022
 16312 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16313 00000023 07                      	pop	es
 16314 00000024 750C                    	jne	short normal02
 16315                                  
 16316 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16317                                  				; 0-3: values of DIP switches
 16318                                  				; 5: 1=Timer 2 channel out
 16319                                  				; 6: 1=I/O channel check
 16320                                  				; 7: 1=RAM parity check error occurred.
 16321 00000028 A880                    	test	al,80h
 16322 0000002A 7406                    	jz	short normal02
 16323                                  special02:
 16324 0000002C 58                      	pop	ax
 16325 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16326                                  normal02:
 16327 00000032 58                      	pop	ax
 16328 00000033 E81101                  	call	do_int_stacks
 16329 00000036 [1200]                  	dw	old02
 16330                                  
 16331                                  ; ----------------------------------------------------------------------
 16332                                  
 16333 00000038 00000000                old08:	dd	0
 16334                                  
 16335                                  int08:
 16336 0000003C E80801                  	call	do_int_stacks
 16337 0000003F [3800]                  	dw	old08
 16338                                  
 16339                                  ; ----------------------------------------------------------------------
 16340                                  
 16341 00000041 00000000                old09:	dd	0
 16342                                  
 16343                                  int09:
 16344                                  
 16345                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16346                                  ; as its first instruction for compatibility reasons
 16347                                  
 16348 00000045 EB02                    	jmp	short keyboard_lbl
 16349 00000047 90                      	nop
 16350 00000048 00                      	db	0
 16351                                  
 16352                                  keyboard_lbl:
 16353 00000049 E8FB00                  	call	do_int_stacks
 16354 0000004C [4100]                  	dw	old09
 16355                                  
 16356                                  ; ----------------------------------------------------------------------
 16357                                  
 16358 0000004E 00000000                old70:	dd	0
 16359                                  
 16360                                  int70:
 16361 00000052 E8F200                  	call	do_int_stacks
 16362 00000055 [4E00]                  	dw	old70
 16363                                  
 16364                                  ; ----------------------------------------------------------------------
 16365                                  
 16366                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16367                                  ;public	int&a
 16368                                  ;public	old&a
 16369                                  ;public	firstflag&a
 16370                                  ;int&a	proc	far
 16371                                  ;	jmp	short entry_int&a&_stk
 16372                                  ;old&a	dd	  0		;forward pointer
 16373                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16374                                  ;firstflag&a db   0		;the firstly hooked.
 16375                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16376                                  ;	db	7 dup (0)	;reserved for future.
 16377                                  ;entry_int&a&_stk:
 16378                                  ;	call	do_int_stacks
 16379                                  ;	dw	old&a
 16380                                  ;intret_&a:
 16381                                  ;	iret
 16382                                  ;int&a	endp
 16383                                  ;	endm
 16384                                  
 16385                                  ; ----------------------------------------------------------------------
 16386                                  
 16387                                  int0A:
 16388 00000057 EB10                    	jmp	short entry_int0A_stk
 16389 00000059 00000000                old0A:	dd	0	
 16390 0000005D 4B42                    	dw	424Bh
 16391                                  firstflag0A:
 16392 0000005F 00                      	db	0
 16393 00000060 EB0C                    	jmp	short intret_0A
 16394 00000062 00<rep 7h>              	times	7 db 0
 16395                                  
 16396                                  entry_int0A_stk:
 16397 00000069 E8DB00                  	call	do_int_stacks
 16398 0000006C [5900]                  	dw	old0A
 16399                                  intret_0A:
 16400 0000006E CF                      	iret
 16401                                  
 16402                                  ; ----------------------------------------------------------------------
 16403                                  
 16404                                  int0B:
 16405 0000006F EB10                    	jmp	short entry_int0B_stk
 16406 00000071 00000000                old0B:	dd	0	
 16407 00000075 4B42                    	dw	424Bh
 16408                                  firstflag0B:
 16409 00000077 00                      	db	0
 16410 00000078 EB0C                    	jmp	short intret_0B
 16411 0000007A 00<rep 7h>              	times	7 db 0
 16412                                  
 16413                                  entry_int0B_stk:
 16414 00000081 E8C300                  	call	do_int_stacks
 16415 00000084 [7100]                  	dw	old0B
 16416                                  intret_0B:
 16417 00000086 CF                      	iret
 16418                                  
 16419                                  ; ----------------------------------------------------------------------
 16420                                  
 16421                                  int0C:
 16422 00000087 EB10                    	jmp	short entry_int0C_stk
 16423 00000089 00000000                old0C:	dd	0	
 16424 0000008D 4B42                    	dw	424Bh
 16425                                  firstflag0C:
 16426 0000008F 00                      	db	0
 16427 00000090 EB0C                    	jmp	short intret_0C
 16428 00000092 00<rep 7h>              	times	7 db 0
 16429                                  
 16430                                  entry_int0C_stk:
 16431 00000099 E8AB00                  	call	do_int_stacks
 16432 0000009C [8900]                  	dw	old0C
 16433                                  intret_0C:
 16434 0000009E CF                      	iret
 16435                                  
 16436                                  ; ----------------------------------------------------------------------
 16437                                  
 16438                                  int0D:
 16439 0000009F EB10                    	jmp	short entry_int0D_stk
 16440 000000A1 00000000                old0D:	dd	0	
 16441 000000A5 4B42                    	dw	424Bh
 16442                                  firstflag0D:
 16443 000000A7 00                      	db	0
 16444 000000A8 EB0C                    	jmp	short intret_0D
 16445 000000AA 00<rep 7h>              	times	7 db 0
 16446                                  
 16447                                  entry_int0D_stk:
 16448 000000B1 E89300                  	call	do_int_stacks
 16449 000000B4 [A100]                  	dw	old0D
 16450                                  intret_0D:
 16451 000000B6 CF                      	iret
 16452                                  
 16453                                  ; ----------------------------------------------------------------------
 16454                                  
 16455                                  int0E:
 16456 000000B7 EB10                    	jmp	short entry_int0E_stk
 16457 000000B9 00000000                old0E:	dd	0	
 16458 000000BD 4B42                    	dw	424Bh
 16459                                  firstflag0E:
 16460 000000BF 00                      	db	0
 16461 000000C0 EB0C                    	jmp	short intret_0E
 16462 000000C2 00<rep 7h>              	times	7 db 0
 16463                                  
 16464                                  entry_int0E_stk:
 16465 000000C9 E87B00                  	call	do_int_stacks
 16466 000000CC [B900]                  	dw	old0E
 16467                                  intret_0E:
 16468 000000CE CF                      	iret
 16469                                  
 16470                                  ; ----------------------------------------------------------------------
 16471                                  
 16472                                  int72:
 16473 000000CF EB10                    	jmp	short entry_int72_stk
 16474 000000D1 00000000                old72:	dd	0	
 16475 000000D5 4B42                    	dw	424Bh
 16476                                  firstflag72:
 16477 000000D7 00                      	db	0
 16478 000000D8 EB0C                    	jmp	short intret_72
 16479 000000DA 00<rep 7h>              	times	7 db 0
 16480                                  
 16481                                  entry_int72_stk:
 16482 000000E1 E86300                  	call	do_int_stacks
 16483 000000E4 [D100]                  	dw	old72
 16484                                  intret_72:
 16485 000000E6 CF                      	iret
 16486                                  
 16487                                  ; ----------------------------------------------------------------------
 16488                                  
 16489                                  int73:
 16490 000000E7 EB10                    	jmp	short entry_int73_stk
 16491 000000E9 00000000                old73:	dd	0	
 16492 000000ED 4B42                    	dw	424Bh
 16493                                  firstflag73:
 16494 000000EF 00                      	db	0
 16495 000000F0 EB0C                    	jmp	short intret_73
 16496 000000F2 00<rep 7h>              	times	7 db 0
 16497                                  
 16498                                  entry_int73_stk:
 16499 000000F9 E84B00                  	call	do_int_stacks
 16500 000000FC [E900]                  	dw	old73
 16501                                  intret_73:
 16502 000000FE CF                      	iret
 16503                                  
 16504                                  ; ----------------------------------------------------------------------
 16505                                  
 16506                                  int74:
 16507 000000FF EB10                    	jmp	short entry_int74_stk
 16508 00000101 00000000                old74:	dd	0	
 16509 00000105 4B42                    	dw	424Bh
 16510                                  firstflag74:
 16511 00000107 00                      	db	0
 16512 00000108 EB0C                    	jmp	short intret_74
 16513 0000010A 00<rep 7h>              	times	7 db 0
 16514                                  
 16515                                  entry_int74_stk:
 16516 00000111 E83300                  	call	do_int_stacks
 16517 00000114 [0101]                  	dw	old74
 16518                                  intret_74:
 16519 00000116 CF                      	iret
 16520                                  
 16521                                  ; ----------------------------------------------------------------------
 16522                                  
 16523                                  int76:
 16524 00000117 EB10                    	jmp	short entry_int76_stk
 16525 00000119 00000000                old76:	dd	0	
 16526 0000011D 4B42                    	dw	424Bh
 16527                                  firstflag76:
 16528 0000011F 00                      	db	0
 16529 00000120 EB0C                    	jmp	short intret_76
 16530 00000122 00<rep 7h>              	times	7 db 0
 16531                                  
 16532                                  entry_int76_stk:
 16533 00000129 E81B00                  	call	do_int_stacks
 16534 0000012C [1901]                  	dw	old76
 16535                                  intret_76:
 16536 0000012E CF                      	iret
 16537                                  
 16538                                  ; ----------------------------------------------------------------------
 16539                                  
 16540                                  int77:
 16541 0000012F EB10                    	jmp	short entry_int77_stk
 16542 00000131 00000000                old77:	dd	0	
 16543 00000135 4B42                    	dw	424Bh
 16544                                  firstflag77:
 16545 00000137 00                      	db	0
 16546 00000138 EB0C                    	jmp	short intret_77
 16547 0000013A 00<rep 7h>              	times	7 db 0
 16548                                  
 16549                                  entry_int77_stk:
 16550 00000141 E80300                  	call	do_int_stacks
 16551 00000144 [3101]                  	dw	old77
 16552                                  intret_77:
 16553 00000146 CF                      	iret
 16554                                  
 16555                                  ; ----------------------------------------------------------------------
 16556                                  
 16557                                  ;********************************************************************
 16558                                  ;common routines
 16559                                  ;********************************************************************
 16560                                  
 16561                                  ; do interrupt stack switching. the fake return address holds
 16562                                  ; a pointer to the far-pointer of the actual interrupt
 16563                                  ; service routine
 16564                                  
 16565                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16566                                  ; 21/03/2019 - Retro DOS v4.0
 16567                                  
 16568                                  ;allocbyte   equ 0
 16569                                  ;intlevel    equ 1
 16570                                  ;savedsp     equ 2
 16571                                  ;savedss     equ 4
 16572                                  ;newsp       equ 6
 16573                                  
 16574                                  do_int_stacks:
 16575 00000147 50                      	push	ax
 16576 00000148 55                      	push	bp
 16577 00000149 06                      	push	es
 16578 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16579 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16580 00000154 B001                    	mov	al,allocated ; 1
 16581                                  	; 21/10/2022
 16582                                  	;xchg	[es:bp+allocbyte],al 
 16583                                  	; 11/12/2022
 16584 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16585 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16586 0000015C 754F                    	jne	short notfree02
 16587                                  
 16588 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16589                                  
 16590                                  found02:
 16591 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16592 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16593                                  
 16594 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16595                                  
 16596 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16597                                  	; 21/10/2022
 16598                                  	;mov	bp,[es:bp+6]
 16599                                  	; 11/12/2022
 16600                                  	;cmp	[es:bp+0],ax	
 16601 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16602 00000176 7542                    	jne	short foundbad02
 16603                                  
 16604                                  	;mov	ax,es			; point ss,sp to the new stack
 16605                                  	;mov	es,bp
 16606                                  	;mov	bp,sp
 16607                                  	;mov	bp,[bp+6]
 16608                                  	;mov	ss,ax
 16609                                  	;mov	sp,es
 16610                                  	;mov	es,ax
 16611                                  	;mov	bp,[cs:bp]
 16612                                  
 16613                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16614 00000178 55                      	push    bp
 16615 00000179 89E5                    	mov     bp,sp
 16616 0000017B 8B4608                  	mov     ax,[bp+8]
 16617 0000017E 5D                      	pop     bp
 16618 0000017F 06                      	push    es
 16619 00000180 17                      	pop     ss
 16620 00000181 89EC                    	mov     sp,bp
 16621 00000183 89C5                    	mov     bp,ax
 16622                                  	; 11/12/2022
 16623                                  	;mov	bp,[cs:bp+0]	
 16624 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16625                                  
 16626 00000189 9C                      	pushf				; go execute the real interrupt handler
 16627                                  	; 11/12/2022
 16628 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16629                                  	; 21/10/2022
 16630                                  	;call	far [cs:bp+0]
 16631                                  
 16632 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16633                                  	; 11/12/2022
 16634 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16635                                  	; 21/10/2022
 16636                                  	;mov	bp,[es:bp+0]
 16637 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16638 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16639                                  
 16640                                  	; 11/12/2022
 16641                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16642                                  	; 21/10/2022
 16643 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16644 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16645                                  
 16646 000001A6 07                      	pop	es
 16647 000001A7 5D                      	pop	bp			; saved on entry
 16648 000001A8 58                      	pop	ax			; saved on entry
 16649 000001A9 83C402                  	add	sp,2
 16650 000001AC CF                      	iret				; done with this interrupt
 16651                                  
 16652                                  notfree02:
 16653 000001AD 3C01                    	cmp	al,allocated		; error flag
 16654 000001AF 7404                    	je	short findnext02	;  no, continue
 16655                                  	; 11/12/2022
 16656                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16657                                  	; 21/10/2022
 16658 000001B1 26864600                	xchg	[es:bp],al
 16659                                  
 16660                                  findnext02:
 16661 000001B5 E81200                  	call	longpath
 16662 000001B8 EBAA                    	jmp	short found02
 16663                                  
 16664                                  foundbad02:
 16665 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16666 000001BF 72F4                    	jc	short findnext02
 16667 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16668                                  	; 11/12/2022
 16669                                  	;mov	byte [es:bp+allocbyte],clobbered
 16670                                  	; 21/10/2022
 16671 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16672 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16673                                  
 16674                                  ; ----------------------------------------------------------------------
 16675                                  
 16676                                  ; Common routines
 16677                                  
 16678                                  longpath:
 16679                                  	; 21/03/2019
 16680 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16681                                  lploopp:
 16682                                  	; 11/12/2022
 16683                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16684                                  	; 21/10/2022
 16685 000001CF 26807E0000              	cmp	byte [es:bp],free
 16686 000001D4 7512                    	jne	short inuse		;  no, try next one
 16687                                  
 16688 000001D6 B001                    	mov	al,allocated
 16689                                  	; 11/12/2022
 16690                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16691                                  	; 21/10/2022
 16692 000001D8 26864600                	xchg	[es:bp],al
 16693 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16694 000001DE 7414                    	je	short found		;  yes, go use it
 16695                                  
 16696 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16697 000001E2 7404                    	je	short inuse		;  no, check the next one
 16698                                  
 16699                                  	; 11/12/2022
 16700                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16701                                  	; 21/10/2022
 16702 000001E4 26884600                	mov	[es:bp],al
 16703                                  inuse:
 16704 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16705 000001ED 7406                    	je	short fatal
 16706 000001EF 83ED08                  	sub	bp,entrysize
 16707 000001F2 EBDB                    	jmp	short lploopp
 16708                                  found:
 16709 000001F4 C3                      	retn
 16710                                  fatal:
 16711 000001F5 1E                      	push	ds
 16712 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16713 000001F9 8ED8                    	mov	ds,ax
 16714 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16715 00000200 1F                      	pop	ds
 16716 00000201 7504                    	jne	short skip_nmis
 16717                                  
 16718 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16719 00000205 E672                    	out	72h,al
 16720                                  
 16721                                  skip_nmis:
 16722 00000207 FA                      	cli				; disable and mask
 16723 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16724 0000020A E621                    	out	021h,al
 16725 0000020C E6A1                    	out	0A1h,al
 16726                                  
 16727 0000020E 8CCE                    	mov	si,cs
 16728 00000210 8EDE                    	mov	ds,si
 16729 00000212 BE[3902]                	mov	si,fatal_msg
 16730                                  ;SR;
 16731                                  ;   We set all foci to this VM to issue the stack failure message
 16732                                  ;
 16733 00000215 50                      	push	ax
 16734 00000216 1E                      	push	ds
 16735                                  	;;mov	ax,Bios_Data ; 0070h
 16736                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16737                                  	; 21/10/2022
 16738 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16739 0000021A 8ED8                    	mov	ds,ax
 16740                                  
 16741                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16742 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16743 00000221 1F                      	pop	ds
 16744 00000222 58                      	pop	ax
 16745 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16746                                  
 16747                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16748                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16749                                  	; 21/10/2022
 16750 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16751                                  ;
 16752                                  ;SR; We do not bother about the returned status of this call. 
 16753                                  ;
 16754                                  fatal_loop:
 16755 0000022A AC                      	lodsb
 16756 0000022B 3C24                    	cmp	al,'$'
 16757 0000022D 7408                    	je	short fatal_done
 16758                                  
 16759 0000022F B307                    	mov	bl,7
 16760 00000231 B40E                    	mov	ah,14
 16761 00000233 CD10                    	int	10h			; whoops, this enables ints
 16762 00000235 EBF3                    	jmp	short fatal_loop
 16763                                  
 16764                                  fatal_done:
 16765 00000237 EBFE                    	jmp	short fatal_done
 16766                                  
 16767                                  
 16768                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16769                                  ; ----------------------------------------------------------------------
 16770                                  ;	include msbio.cl5		; fatal stack error message
 16771                                  
 16772                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16773                                  
 16774                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16775                                  ; ----------------------------------------------------------------------
 16776                                  ; 04/06/2018 - Retro DOS v3.0
 16777                                  
 16778                                  fatal_msg:
 16779 00000239 0D0A                    	db	0Dh,0Ah
 16780 0000023B 070D0A                  	db	7,0Dh,0Ah
 16781 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16781 00000247 737461636B206F7665-
 16781 00000250 72666C6F770D0A     
 16782 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16782 00000260 6C7465640D0A24     
 16783                                  
 16784                                  endstackcode:
 16785                                  
 16786                                  ; ----------------------------------------------------------------------
 16787                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16788                                  ; ----------------------------------------------------------------------
 16789                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16790                                  
 16791                                  ; 22/03/2019 - Retro DOS v4.0
 16792                                  
 16793                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16794                                  
 16795                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16796                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16797                                  
 16798                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16799                                  ; ----------------------------------------------------------------------
 16800                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16801                                  
 16802                                  SYSINIT:	
 16803 00000267 E91C02                          JMP	GOINIT
 16804                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16805                                  
 16806                                  ; ----------------------------------------------------------------------
 16807                                  
 16808                                  struc DDHighInfo
 16809 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16810 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16811 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16812                                  endstruc
 16813                                  
 16814                                  ; 22/03/2019 - Retro DOS v4.0
 16815                                  
 16816 0000026A 00                      runhigh: db	0
 16817                                  
 16818                                  ; 02/11/2022
 16819                                  ;align 4
 16820                                  
 16821                                  DOSINFO: 
 16822 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16823                                  ;MSDOS:
 16824                                  dos_temp_location: ; dword ; MSDOS 6.0
 16825                                  dosinit:		; MSDOS 6.0
 16826 0000026F 0000                    	dw	0
 16827                                  
 16828                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16829                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16830                                  ;	dw	0
 16831                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16832                                  
 16833                                  CURRENT_DOS_LOCATION:
 16834 00000271 0000                    	dw	0
 16835                                  
 16836                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16837                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16838                                  
 16839                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16840                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16841                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16842                                  
 16843                                  DEVICE_LIST:
 16844 00000273 00000000                	dd	0
 16845                                  
 16846                                  ; 04/06/2018 - Retro DOS v3.0
 16847                                  ; 28/03/2018
 16848                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16849                                  ;
 16850                                  sysi_country:	
 16851 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16852                                  
 16853                                  ; MSDOS 6.0
 16854 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16855                                  
 16856 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16857 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16858                                  
 16859 00000283 0000                    def_php:	dw	0
 16860                                  
 16861                                  ; M022--
 16862                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16863                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16864                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16865                                  ;  the new home.
 16866                                  
 16867                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16868                                  ; 21/10/2022
 16869                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16870                                  
 16871                                  ; 22/10/2022
 16872                                  seg_reinit_ptr:	; label dword
 16873 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16874                                  temp_bcode_seg:
 16875                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16876                                  		; 22/10/2022
 16877 00000287 9C02                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16878                                  
 16879                                  fake_floppy_drv:
 16880 00000289 00                      		db	0	; set to 1 if this machine
 16881                                  				; does not have any floppies!!!
 16882                                  
 16883                                  ; Internal Stack Parameters
 16884                                  
 16885 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16886 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16887 0000028E 00000000                stack_addr:	dd	0	
 16888                                  
 16889                                  ; 05/06/2018 - Retro DOS v3.0
 16890                                  
 16891                                  ; various default values
 16892                                  
 16893 00000292 0100                    MEMORY_SIZE:	dw	1
 16894                                  
 16895                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16896                                  
 16897 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16898 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16899 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16900 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16901 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16902                                  
 16903 0000029D 08                      FILES:	db	8	; enough files for pipe
 16904 0000029E 04                      FCBS:	db	4	; performance for recycling
 16905 0000029F 00                      KEEP:	db	0	; keep original set
 16906 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16907                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16908                                  ;CONFBOT: dw	0
 16909                                  ;ALLOCLIM: dw	0
 16910                                  CONFBOT: ; 02/11/2022
 16911 000002A1 0000                    top_of_cdss: dw 0
 16912                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16913 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16914                                  
 16915 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16916                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16917                                  ; (SYSINIT:02A9h)
 16918                                  command_line:
 16919 000002A9 0200                    	db	2,0
 16920 000002AB 50                      	db	'P'
 16921 000002AC 00                      	db	0
 16922 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16923                                  ; (SYSINIT:0329h)
 16924 00000329 00                      ZERO:	db	0
 16925 0000032A 00                      sepchr:	db	0
 16926 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16927 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16928 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16929                                  
 16930 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16931 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16932                                  
 16933 00000339 0000                    buf_prev_off:	dw	0
 16934                                  
 16935                                          ;IF      NOT NOEXEC
 16936                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16937                                          ;ENDIF
 16938                                  
 16939                                  ; 01/05/2018
 16940                                  COMEXE:
 16941 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16942 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16943 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16944 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16945 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16946 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16947 00000347 0000                    		dw	0
 16948                                  
 16949                                  ; variables for install= command.
 16950                                  
 16951 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16952                                  					;  indicating the pass number
 16953                                  					; 0 - do scan for DOS=HIGH/LOW
 16954                                  					; 1 - load device drivers
 16955                                  					; 2 - was to load IFS
 16956                                  					;      now it is unused
 16957                                  					; 3 - do install=
 16958                                  					; >3 - nop
 16959 0000034A 0000                    install_flag:	dw	0
 16960                                  
 16961                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16962                                  has_installed	equ	00000010b	; sysinit_base installed.
 16963                                  
 16964 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16965 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16966 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16967 00000356 0000                    checksum:	dw	0		; used by sum_up
 16968                                  
 16969 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16970 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16971 0000036D 20                      ldexec_start:	db	' '
 16972 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16973                                  
 16974                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16975                                  
 16976                                  instexe:
 16977 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16978 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16979 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16980 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16981 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16982 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16983 000003CA 0000                    		dw	0
 16984                                  
 16985                                  ; variables for comment=
 16986                                  
 16987 000003CC 00                      com_level:	db	0		; level of " " in command line
 16988 000003CD 00                      cmmt:		db	0		; length of comment string token
 16989 000003CE 00                      cmmt1:		db	0		; token
 16990 000003CF 00                      cmmt2:		db	0		; token
 16991 000003D0 00                      cmd_indicator:	db	0
 16992 000003D1 00                      donotshownum:	db	0
 16993                                  
 16994 000003D2 0000                    count:		dw	0
 16995 000003D4 0000                    org_count:	dw	0
 16996 000003D6 0000                    chrptr:		dw	0
 16997 000003D8 0000                    cntryfilehandle: dw	0
 16998 000003DA 0000                    old_area:	dw	0
 16999 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 17000                                  
 17001                                  bucketptr: ; label dword
 17002                                  bufptr:	   ; label dword		; leave this stuff in order!
 17003 000003DE 0000                    memlo:	dw	0
 17004                                  prmblk:	   ; label word
 17005 000003E0 0000                    memhi:	dw	0
 17006 000003E2 0000                    ldoff:	dw	0
 17007 000003E4 0000                    area:	dw	0
 17008                                  
 17009                                  ; Following is the request packet used to call INIT routines for 
 17010                                  ; all device drivers. Some fields may be accessed individually in
 17011                                  ; the code, and hence have individual labels, but they should not
 17012                                  ; be separated.
 17013                                  
 17014 000003E6 18                      packet:	db	24			; was 22
 17015 000003E7 00                      	db	0
 17016 000003E8 00                      	db	0			; initialize code
 17017 000003E9 0000                    	dw	0
 17018 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 17019                                  
 17020 000003F3 00                      unitcount:	db	0
 17021 000003F4 00000000                break_addr:	dd	0
 17022 000003F8 00000000                bpb_addr:	dd	0
 17023                                  drivenumber:	; 22/10/2022
 17024 000003FC 00                      devdrivenum:	db	0 
 17025 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 17026                                  
 17027                                  ; end of request packet
 17028                                  
 17029                                  ;drivenumber:	db	0  ; 22/03/2019
 17030                                  
 17031                                  toomanydrivesflag:
 17032 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 17033                                  align 2
 17034                                  
 17035                                  BCodeSeg:	; 21/10/2022
 17036 00000400 9C02                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 17037                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 17038                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 17039                                  
 17040                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17041                                  ;; 19/04/2019
 17042                                  ;_timer_lw_:
 17043                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 17044                                  	
 17045                                  ;SR;
 17046                                  ; This is the communication block between the DOS and the BIOS. It starts at
 17047                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 17048                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 17049                                  ;is passed to DOS as part of the DOSINIT call.
 17050                                  ;
 17051                                  
 17052                                  BiosComBlock:
 17053                                  	;dd	Bios_Data:SysinitPresent 
 17054                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 17055 00000402 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 17056                                  	;dw	KERNEL_SEGMENT ; 0070h
 17057                                  	; 21/10/2022
 17058 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 17059                                  
 17060                                  ;align 2
 17061                                  
 17062                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 17063                                  tempstack:	
 17064 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 17065                                  
 17066                                  ; ----------------------------------------------------------------------------
 17067                                  
 17068                                  	; 22/10/2022 - Retro DOS v4.0
 17069                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 17070                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 17071                                  	; 12/12/2022
 17072                                  	; 22/03/2019 - Retro DOS v4.0
 17073                                  	; 06/07/2018
 17074                                  	; 04/06/2018 - Retro DOS v3.0
 17075                                  ; before doing anything else, let's set the model byte
 17076 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 17077 00000488 CD15                    	int	15h			; *
 17078 0000048A 7216                    	jc	short no_rom_config
 17079                                  
 17080                                  	;cmp	ah,0			; double check
 17081                                  	;jne	short no_rom_config
 17082                                  	; 04/09/2023
 17083 0000048C 08E4                    	or	ah,ah
 17084 0000048E 7512                    	jnz	short no_rom_config
 17085 00000490 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 17086 00000494 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 17087 00000498 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 17088 0000049C 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 17089                                  	;jmp	short SYSIN
 17090                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17091 000004A0 EB2C                    	jmp	short move_myself
 17092                                  
 17093                                  no_rom_config:				; Old ROM
 17094 000004A2 B800F0                  	mov	ax,0F000h
 17095 000004A5 8ED8                    	mov	ds,ax
 17096 000004A7 A0FEFF                  	mov	al,[0FFFEh]
 17097 000004AA 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 17098                                  
 17099                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 17100                                  ; execute the equipment determination interrupt and then
 17101                                  ; check the returned value to see if we have any floppy drives
 17102                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 17103                                  ; see the at tech ref bios listings for help on the equipment
 17104                                  ; flag interrupt (11h)	
 17105                                  
 17106                                  	; 22/10/2022
 17107                                  check_for_fake_floppy:			; entry point for rom_config above
 17108 000004AE CD11                    	int	11h			; check equipment flag
 17109                                  
 17110                                  	; 12/12/2022
 17111 000004B0 A801                    	test	al,1		
 17112                                  	;test	ax,1			; have any floppies?
 17113 000004B2 751A                    	jnz	short move_myself	; yes,normal system
 17114                                  
 17115                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17116                                  ; whether it is an old ROM BIOS or a new one
 17117                                  ;
 17118                                  ; WARNING !!!
 17119                                  ;
 17120                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17121                                  ; here will require an equivalent modification in MSINIT.ASM also
 17122                                  
 17123 000004B4 06                      	push	es
 17124                                  
 17125 000004B5 30C9                    	xor	cl,cl	
 17126 000004B7 B408                    	mov	ah,8			; get disk parameters
 17127 000004B9 B200                    	mov	dl,0			; of drive 0
 17128 000004BB CD13                    	int	13h
 17129                                  
 17130 000004BD 07                      	pop	es
 17131                                  
 17132 000004BE 720E                    	jc	short move_myself	; if error lets assume that the
 17133                                  					;  ROM BIOS lied
 17134                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 17135                                  	;je	short move_myself
 17136                                  	; 04/09/2023
 17137 000004C0 08C9                    	or	cl,cl
 17138 000004C2 740A                    	jz	short move_myself
 17139                                  
 17140 000004C4 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17141 000004C6 7506                    	jnz	short move_myself
 17142                                  
 17143 000004C8 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17144                                  
 17145                                  move_myself:
 17146 000004CE FC                      	cld				; set up move
 17147 000004CF 31F6                    	xor	si,si
 17148 000004D1 89F7                    	mov	di,si
 17149                                  
 17150                                  	; 12/12/2022
 17151 000004D3 0E                      	push	cs
 17152 000004D4 1F                      	pop	ds
 17153                                  
 17154                                  	;mov	cx,[cs:MEMORY_SIZE]
 17155 000004D5 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17156                                  
 17157                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17158                                  ;;;	if	msver
 17159                                  ;	cmp	cx,1		; 1 means do scan
 17160                                  ;	jnz	short noscan
 17161                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17162                                  ;	xor	bx,bx
 17163                                  ;
 17164                                  ;memscan:inc	cx
 17165                                  ;	jz	setend
 17166                                  ;	mov	ds,cx
 17167                                  ;	mov	al,[bx]
 17168                                  ;	not	al
 17169                                  ;	mov	[bx],al
 17170                                  ;	cmp	al,[bx]
 17171                                  ;	not	al
 17172                                  ;	mov	[bx],al
 17173                                  ;	jz	short memscan
 17174                                  ;setend:
 17175                                  ;	mov	cs:[memory_size],cx
 17176                                  ;;;	endif
 17177                                  
 17178                                  ;noscan: 				; cx is mem size in para
 17179                                  ;;
 17180                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17181                                  ;;		  before we try to run.
 17182                                  ;;	       b) in any case, we should check for sufficient memory and give
 17183                                  ;;		  an appropriate error diagnostic if there isn't enough
 17184                                  ;
 17185                                  ;	push	cs
 17186                                  ;	pop	ds
 17187                                  ;
 17188                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17189                                  ;;	  that way it would be easier to slide them down home in a minimal
 17190                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17191                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17192                                  ;;	  temporary home and the final one.  the problem with doing that
 17193                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17194                                  ;
 17195                                  ;	dec	cx			; one para for an arena at end of mem
 17196                                  ;					; in case of UMBs
 17197                                  
 17198                                  	; 22/10/2022
 17199                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17200                                  
 17201                                  	; 12/12/2022
 17202                                  	;push	cs
 17203                                  	;pop	ds
 17204                                  
 17205 000004D9 49                      	dec	cx
 17206                                  
 17207                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17208                                  
 17209 000004DA 31DB                    	xor	bx,bx
 17210 000004DC 8EC3                    	mov	es,bx	; 0
 17211                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17212                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17213                                  	; 29/09/2023
 17214 000004DE 26C41EBC00              	les	bx,[es:(2Fh*4)]
 17215 000004E3 26817F035250            	cmp	word [es:bx+3],'RP'
 17216 000004E9 751B                    	jne	short NoRPL
 17217 000004EB 26807F054C              	cmp	byte [es:bx+5],'L'
 17218 000004F0 7514                    	jne	short NoRPL
 17219                                  
 17220 000004F2 89CA                    	mov	dx,cx			; get TOM into DX
 17221 000004F4 52                      	push	dx
 17222 000004F5 B8064A                  	mov	ax,4A06h
 17223                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17224 000004F8 CD2F                    	int	2Fh			; Get new TOM from any RPL
 17225 000004FA 58                      	pop	ax
 17226 000004FB 89D1                    	mov	cx,dx
 17227 000004FD 39C2                    	cmp	dx,ax
 17228 000004FF 7405                    	je	short NoRPL
 17229                                  	
 17230                                  	; 11/12/2022
 17231                                  	; ds = cs
 17232 00000501 8916[9402]              	mov	[RPLMemTop],dx
 17233                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17234                                  	;mov	[cs:RPLMemTop],dx
 17235                                  	
 17236 00000505 49                      	dec	cx
 17237                                  NoRPL:
 17238 00000506 B8[F037]                	mov	ax,SI_end		; need this much room for sysinit
 17239                                  					; (SI_end == sysinit code size)
 17240 00000509 E8B006                  	call	off_to_para
 17241 0000050C 29C1                    	sub	cx,ax
 17242                                  
 17243                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17244                                  ; code above sysinit in memory
 17245                                  ;
 17246 0000050E 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 17247                                  
 17248 00000512 B8D019                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17249 00000515 E8A406                  	call	off_to_para		; leave this much room for BIOS code
 17250 00000518 29C1                    	sub	cx,ax
 17251 0000051A 8EC1                    	mov	es,cx			; offset where sysinit will be located
 17252                                  
 17253 0000051C B9[F037]                	mov	cx,SI_end		; (sysinit code size)
 17254 0000051F D1E9                    	shr	cx,1			; divide by 2 to get words
 17255 00000521 F3A5                    	rep	movsw			; relocate sysinit
 17256                                  
 17257 00000523 06                      	push	es			; push relocated segment
 17258 00000524 B8[2905]                	mov	ax,SYSIN
 17259 00000527 50                      	push	ax			; push relocated entry point
 17260                                  
 17261 00000528 CB                      	retf				; far jump to relocated sysinit
 17262                                  
 17263                                  ; ----------------------------------------------------------------------------
 17264                                  
 17265                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17266                                  
 17267                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17268                                  	; (SYSINIT:0533h)
 17269                                  SYSIN:
 17270                                  	; Retro DOS 4.0 - 22/03/2019
 17271                                  	; Retro DOS 2.0 - 25/02/2018
 17272                                  
 17273                                  	; 23/04/2019
 17274                                  	;;mov	ax,Bios_Data
 17275                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17276                                  	; 21/10/2022
 17277 00000529 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17278 0000052C 8ED8                    	mov	ds,ax
 17279 0000052E 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17280 00000532 C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17281                                  
 17282                                  ; first move the MSDOS.SYS image up to a harmless place 
 17283                                  ; on top of our new sysinitseg
 17284                                  
 17285                                  	; 22/10/2022
 17286 00000537 B8[F037]                	mov	ax,SI_end		; how big is sysinitseg?
 17287 0000053A E87F06                  	call	off_to_para
 17288 0000053D 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17289 0000053F 01C8                    	add	ax,cx
 17290 00000541 8EC0                    	mov	es,ax
 17291                                  	
 17292 00000543 31F6                    	xor	si,si
 17293 00000545 89F7                    	mov	di,si
 17294                                  
 17295 00000547 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17296                                  
 17297                                  	;mov	ax,cs	
 17298                                  	;mov	ds,ax
 17299                                  
 17300                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17301                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17302                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17303                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17304                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17305                                  
 17306                                  	; 22/10/2022
 17307 0000054C B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17308 0000054F F3A5                    	rep     movsw
 17309 00000551 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17310                                  
 17311                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17312                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17313                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17314                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17315                                  
 17316                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17317                                  	;mov	ax,cs
 17318                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17319                                  	;mov	ds,ax
 17320                                  
 17321                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17322                                  
 17323                                  ;	; 24/04/2019 
 17324                                  ;;ifndef ROMDOS
 17325                                  ;	mov	ax,[es:3] 		; get offset of dos
 17326                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17327                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17328                                  ;	call	off_to_para		; subtract this much from segment
 17329                                  ;	; 23/04/2019
 17330                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17331                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17332                                  ;;else
 17333                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17334                                  ;;
 17335                                  ;;endif ; ROMDOS
 17336                                  
 17337                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17338                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17339                                  
 17340                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17341                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17342                                  
 17343                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17344                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17345 00000556 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17346                                  
 17347 00000559 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17348                                  	; 02/11/2022
 17349 0000055D E85C06                  	call	off_to_para		; subtract this much from segment
 17350 00000560 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17351                                  
 17352                                  	; Current DOSCODE start address = dword [dosinit]
 17353                                  
 17354                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17355                                  ;; until it is determined whether it will be running in HIMEM or not.
 17356                                  
 17357                                  ;ifndef ROMDOS
 17358                                  
 17359                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17360                                  
 17361                                  	; 22/10/2022
 17362 00000565 8CC0                    	mov	ax,es
 17363 00000567 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17364 0000056A 8EC0                    	mov	es,ax
 17365 0000056C 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17366 00000571 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17367                                  
 17368                                  	;mov	si,BCODE_START ; mov si,30h
 17369                                  	; 09/12/2022
 17370 00000573 BE[3000]                	mov	si,BCODESTART
 17371                                  	; 02/11/2022
 17372 00000576 89F7                    	mov	di,si
 17373                                  	;mov	cx,BCODE_END   ; mov cx,1A60h
 17374                                  	;sub	cx,si
 17375                                  	; 29/09/2023
 17376                                  	BCODESIZE equ BCODEEND-BCODESTART
 17377 00000578 B9A019                  	mov	cx,BCODESIZE
 17378 0000057B D1E9                    	shr	cx,1
 17379 0000057D F3A5                    	rep	movsw			; move Bios_Code into place
 17380                                  
 17381 0000057F 8CC0                    	mov	ax,es			; tell it what segment it's in
 17382 00000581 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17383                                  
 17384                                  ;endif	; not ROMDOS
 17385                                  
 17386                                  ; now call dosinit while it's in its temporary home
 17387                                  
 17388                                  	;mov	ax,cs
 17389                                  	;mov	ds,ax	 
 17390                                  
 17391                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17392                                  
 17393                                  	; 22/10/2022
 17394                                  
 17395 00000586 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17396                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17397 0000058B 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17398                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17399                                  
 17400 00000590 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17401                                  
 17402 00000595 FA                      	cli
 17403 00000596 8CC8                    	mov	ax,cs
 17404 00000598 8ED0                    	mov	ss,ax
 17405                                  
 17406                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17407                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17408                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17409                                  ;SYSINIT:0532h:
 17410                                  
 17411                                  ; 22/10/2022
 17412                                  ; ----------------------------------------------------------------------------
 17413                                  ;SYSINIT:05A6h:
 17414                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17415                                  
 17416                                  	;mov	sp, 05A6h
 17417 0000059A BC9A05                  	mov     sp,locstack		; set stack
 17418                                  
 17419 0000059D FB                      	sti
 17420                                  
 17421                                  ;align 2
 17422                                  	; 30/03/2018
 17423                                  ;LOCSTACK:
 17424                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17425                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17426                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17427                                  
 17428                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17429                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17430                                  
 17431                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17432                                  ; at the top of memory, to its final location in low memory just above the
 17433                                  ; BIOS data. It will then build important DOS data structures in low 
 17434                                  ; memory following the DOS data. It returns (among many other things) the
 17435                                  ; new starting address of free memory.
 17436                                  
 17437 0000059E 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17438                                  			 ; es:di -> sysinitvars_ext
 17439                                  
 17440 000005A3 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17441                                  	
 17442                                  	; 11/12/2022
 17443                                  	; 22/03/2019
 17444 000005A8 0E                      	push	cs
 17445 000005A9 1F                      	pop	ds
 17446                                  	; 22/10/2022
 17447 000005AA A3[8102]                	mov	[hi_doscod_size],ax
 17448 000005AD 890E[7F02]              	mov	[lo_doscod_size],cx
 17449 000005B1 8916[7B02]              	mov	[dos_segreinit],dx
 17450                                  	
 17451                                  	; 11/12/2022
 17452                                  	; ds = cs
 17453                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17454                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17455                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17456                                  
 17457                                  	; 05/06/2018 - Retro DOS v3.0
 17458                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17459                                  
 17460                                  	; 11/12/2022
 17461                                  	; ds = cs
 17462                                  	; 22/10/2022
 17463                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17464 000005B5 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17465                                  	;mov	[cs:DOSINFO],ax
 17466 000005B8 A3[6B02]                	mov	[DOSINFO],ax
 17467                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17468 000005BB 268B4502                	mov	ax,[es:di+2]
 17469                                  	;mov	[cs:DOSINFO+2],ax
 17470 000005BF A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17471                                  
 17472                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17473 000005C2 268B4504                	mov	ax,[es:di+4]
 17474                                  	;mov	[cs:sysi_country],ax
 17475 000005C6 A3[7702]                	mov	[sysi_country],ax
 17476                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17477 000005C9 268B4506                	mov	ax,[es:di+6]
 17478                                  	;mov	[cs:sysi_country+2],ax
 17479 000005CD A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17480                                  
 17481                                  	; 20/04/2019
 17482                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17483                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17484                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17485                                  	; 22/10/2022
 17486                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17487                                  	;;;mov	[dos_segreinit+2],es
 17488                                  	;;mov	[dos_segreinit+2],ax
 17489                                  	;mov	[cs:dos_segreinit+2],ax
 17490                                  	; 11/12/2022
 17491                                  	; ds = cs
 17492 000005D0 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17493 000005D4 8C06[7D02]              	mov	[dos_segreinit+2],es
 17494                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17495                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17496                                  	;mov	[cs:dos_segreinit+2],es
 17497                                  
 17498                                  ; ----------------------------------------------------------------------------
 17499                                  
 17500                                  ;SYSINIT:0577h:
 17501                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17502                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17503                                  
 17504                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17505                                  ;------ Cover up RPL code with an arena
 17506                                  ;SYSINIT:05EBh:
 17507                                  	; 11/12/2022
 17508                                  	; ds = cs
 17509 000005D8 31DB                    	xor	bx,bx
 17510 000005DA 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17511                                  	;cmp	word [RPLMemTop],0
 17512                                  	;;cmp	word [cs:RPLMemTop],0
 17513 000005DE 7450                    	je	short NoRPLArena
 17514                                  
 17515                                  ;------ alloc all memory
 17516                                  
 17517                                  	; 11/12/2022
 17518                                  	;mov	bx,0FFFFh
 17519 000005E0 4B                      	dec	bx
 17520                                  	; bx = 0FFFFh
 17521 000005E1 B448                    	mov	ah,48h
 17522 000005E3 CD21                    	int	21h
 17523                                  			; DOS - 2+ - ALLOCATE MEMORY
 17524                                  			; BX = number of 16-byte paragraphs desired
 17525 000005E5 B448                    	mov	ah,48h
 17526 000005E7 CD21                    	int	21h
 17527                                  
 17528 000005E9 8EC0                    	mov	es,ax			; get it into ES and save it
 17529 000005EB 06                      	push	es
 17530                                  
 17531                                  ;------ resize upto RPL mem
 17532                                  
 17533                                  	; 11/12/2022
 17534                                  	; ds = cs
 17535                                  	;sub	ax,[cs:RPLMemTop]
 17536 000005EC 2B06[9402]              	sub	ax,[RPLMemTop]
 17537 000005F0 F7D8                    	neg	ax
 17538 000005F2 48                      	dec	ax
 17539 000005F3 89C3                    	mov	bx,ax
 17540 000005F5 B44A                    	mov	ah,4Ah
 17541 000005F7 CD21                    	int	21h
 17542                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17543                                  			; ES = segment address of block to change
 17544                                  			; BX = new size in paragraphs
 17545                                  
 17546                                  ;------ allocate the free (RPL MEM)
 17547                                  
 17548 000005F9 BBFFFF                  	mov	bx,0FFFFh
 17549 000005FC B448                    	mov	ah,48h
 17550 000005FE CD21                    	int	21h
 17551 00000600 B448                    	mov	ah,48h
 17552 00000602 CD21                    	int	21h
 17553                                  
 17554                                  ;----- mark that it belongs to RPL
 17555                                  
 17556 00000604 48                      	dec	ax
 17557 00000605 8EC0                    	mov	es,ax
 17558                                  	;mov	word [es:arena_owner],8
 17559 00000607 26C70601000800          	mov	word [es:1],8
 17560                                  	;mov	word [es:arena_name],'RP'
 17561 0000060E 26C70608005250          	mov	word [es:8],'RP'
 17562                                  	;mov	word [es:arena_name+2],'L'
 17563 00000615 26C7060A004C00          	mov	word [es:10],'L'
 17564                                  	;mov	word [es:arena_name+4],0
 17565 0000061C 26C7060C000000          	mov	word [es:12],0
 17566                                  	;mov	word [es:arena_name+6],0
 17567 00000623 26C7060E000000          	mov	word [es:14],0	
 17568                                  
 17569 0000062A 07                              pop     es                      ; get back ptr to first block
 17570 0000062B B449                            mov     ah,49h	; Dealloc	; and free it
 17571 0000062D CD21                    	int	21h		
 17572                                  					; DOS - 2+ - FREE MEMORY
 17573                                  					; ES = segment address of area to be freed
 17574                                  	; 11/12/2022
 17575 0000062F F8                      	clc
 17576                                  
 17577                                  ; ----------------------------------------------------------------------------
 17578                                  
 17579                                  NoRPLArena:
 17580                                  	; 11/12/2022
 17581                                  	; ds = cs
 17582                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17583 00000630 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17584                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17585                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17586                                  
 17587                                  	; 11/12/2022
 17588                                  	;clc				; get the extended memory size
 17589                                  
 17590                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17591                                  ;	if the function reports an error do nothing else store the extended
 17592                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17593                                  ;	currently pointed to by es:di. use the offsets specified in the
 17594                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17595                                  
 17596 00000634 B488                    	mov	ah,88h
 17597 00000636 CD15                    	int	15h			; check extended memory size
 17598 00000638 720B                    	jc	short no_ext_memory
 17599                                  			; Get Extended Memory Size
 17600                                  			; Return: CF clear on success
 17601                                  			; AX = size of memory above 1M in K	
 17602                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17603                                  	; 22/10/2022
 17604 0000063A 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17605 0000063E 09C0                    	or	ax,ax
 17606 00000640 7403                    	jz	short no_ext_memory
 17607 00000642 E8F004                  	call	ClrVDISKHeader
 17608                                  no_ext_memory:
 17609                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17610 00000645 268B4510                	mov	ax,[es:di+10h]
 17611                                  	;add	ax,bufinsiz
 17612 00000649 83C014                  	add	ax,20			; size of buffer header
 17613                                  	; 11/12/2022
 17614                                  	; ds = cs
 17615 0000064C A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17616                                  	;mov	[cs:singlebuffersize],ax	
 17617                                  	; 11/12/2022
 17618 0000064F A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17619                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17620                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17621 00000652 26884543                	mov	[es:di+43h],al
 17622                                  
 17623                                  ; determine if 386 system...
 17624                                  
 17625                                  	;get_cpu_type			; macro to determine cpu type
 17626                                  
 17627                                  get_cpu_type:
 17628                                  	; 11/12/2022
 17629 00000656 9C                      	pushf
 17630                                  	;push	bx
 17631                                  	;xor	bx,bx
 17632                                  	; 11/12/2022
 17633                                  	;xor	cx,cx
 17634                                  	;
 17635 00000657 31C0                    	xor	ax,ax
 17636                                  	; ax = 0
 17637 00000659 50                      	push    ax
 17638 0000065A 9D                      	popf
 17639 0000065B 9C                      	pushf
 17640 0000065C 58                      	pop	ax
 17641 0000065D 2500F0                  	and	ax,0F000h
 17642                                  	;cmp	ax,0F000h
 17643 00000660 80FCF0                  	cmp	ah,0F0h 
 17644 00000663 7410                    	je	short cpu_8086
 17645                                  	;mov	ax,0F000h
 17646 00000665 B4F0                    	mov	ah,0F0h
 17647                                  	; ax = 0F000h
 17648 00000667 50                      	push	ax
 17649 00000668 9D                      	popf
 17650 00000669 9C                      	pushf
 17651 0000066A 58                      	pop	ax
 17652                                  	;and	ax,0F000h
 17653 0000066B 80E4F0                  	and	ah,0F0h
 17654 0000066E 7405                    	jz	short cpu_286
 17655                                  cpu_386:
 17656                                  	; 11/12/2022
 17657                                  	;;inc	bx
 17658                                  	;inc	cx
 17659                                  	; 11/12/2022
 17660                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17661 00000670 26C6454401              	mov	byte [es:di+44h],1
 17662                                  cpu_286:
 17663                                  	;;;inc	bx
 17664                                  	;;inc	cx
 17665                                  cpu_8086:
 17666                                  	; 11/12/2022
 17667                                  	;;mov	ax,bx	
 17668                                  	;pop	bx
 17669 00000675 9D                      	popf
 17670                                  
 17671                                  	;...
 17672                                  
 17673                                  	; 11/12/2022
 17674                                  	;or	cl,cl
 17675                                  	;jz	short not_386_system
 17676                                  	; 11/12/202
 17677                                  	;cmp	cl,2
 17678                                  	;;cmp	ax,2			; is it a 386?
 17679                                  	;jne	short not_386_system	; no: don't mess with flag
 17680                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17681                                  	; 11/12/2022
 17682                                  	; 22/10/2022
 17683                                  	;mov	byte [es:di+44h],1
 17684                                  not_386_system:
 17685                                  	;mov	al,[es:di+SYSI_NUMIO]
 17686 00000676 268A4520                	mov	al,[es:di+20h]
 17687                                  	; 11/12/2022
 17688                                  	; ds = cs
 17689 0000067A A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17690                                  	;mov	[cs:drivenumber],al
 17691                                  
 17692 0000067D 8CC8                    	mov	ax,cs
 17693 0000067F 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17694                                  	; 11/12/2022
 17695                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17696                                  	;;mov	cx,[cs:singlebuffersize]
 17697                                  	;shr	cx,1			
 17698                                  	;shr	cx,1			; divide size by 16...
 17699                                  	;shr	cx,1
 17700                                  	;shr	cx,1			; ...to get paragraphs...
 17701                                  	;inc	cx			; ... and round up
 17702                                  	; 11/12/2022
 17703 00000682 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17704 00000686 B104                    	mov	cl,4
 17705 00000688 D3EB                    	shr	bx,cl
 17706 0000068A 43                      	inc	bx
 17707                                  
 17708                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17709                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17710                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17711                                  ;	  it is probably safe to assume that the sector size always will be.
 17712                                  ;
 17713                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17714                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17715                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17716                                  ;	  other code from ever causing a problem???
 17717                                  
 17718                                  	; 11/12/2022
 17719 0000068B 29D8                    	sub	ax,bx
 17720                                  	;sub	ax,cx
 17721 0000068D A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17722                                  	; 22/10/2022
 17723                                  	;mov	[cs:top_of_cdss],ax
 17724                                  
 17725                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17726                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17727                                  ;	for allocating memory for MagicDrv.
 17728                                  
 17729 00000690 06                      	push	es			; preserve pointer to dosinfo
 17730 00000691 57                      	push	di
 17731                                  
 17732                                  	; 22/10/2022
 17733                                  ;	mov	cx,ax			; save pointer for buffer
 17734                                  ;
 17735                                  ;;	now allocate space for 26 CDSs
 17736                                  ;
 17737                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17738                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17739                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17740                                  
 17741                                  ; setup and initialize the temporary buffer at cx
 17742                                  
 17743                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17744 00000692 26C47D12                	les	di,[es:di+12h]
 17745                                  	; 11/12/2022
 17746 00000696 31DB                    	xor	bx,bx
 17747                                  	;xor	ax,ax
 17748                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17749                                  	;mov	word [es:di+4],0
 17750 00000698 26895D04                	mov	[es:di+4],bx ; 0
 17751                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17752                                  	;mov	word [es:di],0
 17753 0000069C 26891D                  	mov	[es:di],bx ; 0
 17754                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17755                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17756 0000069F 26894502                	mov	[es:di+2],ax
 17757                                  
 17758                                  	;mov	es,cx
 17759 000006A3 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17760                                  
 17761                                  	; 11/12/2022
 17762                                  	;xor	ax,ax
 17763                                  	;mov	di,ax			; es:di -> single buffer
 17764 000006A5 89DF                    	mov	di,bx
 17765                                  	; di = 0
 17766                                  
 17767                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17768                                  	; 11/12/2022
 17769                                  	;mov	[es:di],ax ; 0
 17770 000006A7 26891D                  	mov	[es:di],bx ; 0
 17771                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17772                                  	; 11/12/2022
 17773                                  	;mov	[es:di+2],ax ; 0
 17774 000006AA 26895D02                	mov	[es:di+2],bx ; 0 
 17775                                  
 17776                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17777                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17778                                  
 17779                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17780 000006AE 26C74504FF00            	mov	word [es:di+4],00FFh
 17781                                  ;SYSINIT:06E6h
 17782                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17783                                  	;mov	word [es:di+6],0
 17784                                  	; 11/12/2022
 17785                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17786 000006B4 26895D06                	mov	[es:di+6],bx ; 0
 17787                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17788                                  	;mov	word [es:di+8],0
 17789                                  	; 11/12/2022
 17790                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17791 000006B8 26895D08                	mov	[es:di+8],bx ; 0
 17792                                  
 17793 000006BC 5F                      	pop	di			; restore pointer to DOSINFO data
 17794 000006BD 07                      	pop	es
 17795                                  
 17796                                  	; 11/12/2022
 17797                                  	; ds = cs
 17798                                  	; 22/10/2022
 17799                                  	;push	cs
 17800                                  	;pop	ds
 17801                                  
 17802 000006BE E80405                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17803                                  					;  can make disk system calls
 17804                                  					; tempcds trashes ds
 17805                                  	; 10/05/2019
 17806 000006C1 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17807                                  
 17808                                  	;if not ibmjapver
 17809                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17810                                  	;endif
 17811                                  
 17812                                  	; 22/10/2022
 17813                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17814                                  	;call	far ptr 70h:89Bh
 17815 000006C6 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17816                                  
 17817 000006CB FB                      	sti				; ints ok
 17818 000006CC FC                      	cld				; make sure
 17819                                  
 17820                                  ; 23/03/2019
 17821                                  
 17822                                  ;SYSINIT:069Ch
 17823                                  
 17824                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17825                                  ; of the way by putting it just below sysinit at end of memory.
 17826                                  
 17827 000006CD 8CCB                    	mov	bx,cs
 17828 000006CF 83EB10                  	sub	bx,10h
 17829 000006D2 8EC3                    	mov	es,bx
 17830 000006D4 31F6                    	xor	si,si
 17831 000006D6 89F7                    	mov	di,si
 17832 000006D8 B98000                  	mov	cx,128
 17833 000006DB F3A5                    	rep	movsw
 17834                                  
 17835                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17836                                  	; 22/10/2022
 17837 000006DD 268C063600              	mov	[es:36h],es
 17838                                  
 17839                                   	; Set Process Data Block - Program Segment Prefix address
 17840                                  	; BX = PDB/PSP segment
 17841 000006E2 B450                            mov	ah,50h ; SET_CURRENT_PDB
 17842 000006E4 CD21                    	int	21h			; tell DOS we moved it
 17843                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17844                                  			; BX = segment address of new PSP
 17845                                  	; 22/10/2022
 17846                                  	; 27/03/2019
 17847 000006E6 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17848                                  
 17849 000006E7 0E                      	push	cs	
 17850 000006E8 1F                      	pop	ds
 17851                                  
 17852                                  	; set up temp. critical error handler
 17853 000006E9 BA[B232]                	mov	dx,int24		; set up int 24 handler
 17854                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17855                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17856 000006EC B82425                  	mov	ax,2524h
 17857 000006EF CD21                    	int	21h
 17858                                  
 17859 000006F1 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17860 000006F6 7405                            je      short no_err		   ;  N: continue            M029
 17861 000006F8 BA[B037]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17862                                          ; 22/10/2022
 17863                                  	;call	print 			   ;		             M029
 17864                                  	; 12/12/2022
 17865 000006FB EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17866                                  no_err:
 17867                                  	; 12/05/2019
 17868                                  	;----------------------------------------------
 17869                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17870                                  	; 22/10/2022 - Retro DOS v4.0
 17871                                  	; 12/12/2022
 17872 000006FD BA[B632]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17873                                  p_dosinit_msg:
 17874 00000700 E88A2B                  	call	print			; Print message
 17875                                  	;----------------------------------------------
 17876                                  	
 17877                                  	; 11/12/2022
 17878                                  	; 22/10/2022
 17879                                  	; 23/03/2019 - Retro DOS v4.0
 17880                                  	;pop	ds			; start of free memory
 17881                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17882                                  	
 17883                                  	; 11/12/2022
 17884                                  	; 27/03/2019
 17885 00000703 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17886 00000707 1F                      	pop	ds ; */
 17887                                  
 17888 00000708 08D2                    	or	dl,dl
 17889                                  	;jz	short nodrvset		; bios didn't say
 17890 0000070A 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17891                                  	;dec	dl			; A = 0
 17892                                  	; 18/12/2022
 17893 0000070C 4A                      	dec	dx
 17894 0000070D B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17895 0000070F CD21                    	int	21h			; select the disk
 17896                                  			; DOS - SELECT DISK
 17897                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17898                                  			; Return: AL = number of logical drives
 17899                                  nodrvset:
 17900                                  	;ifdef	dblspace_hooks
 17901                                  	;	....
 17902                                  	;	....
 17903                                  	;endif	
 17904                                  
 17905                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17906                                  
 17907                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17908                                  ; ----------------------------------------------------------------------------
 17909                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17910                                  
 17911                                  ProcessConfig:
 17912                                  	;; ds = cs ; 27/03/2019
 17913                                  	; 11/12/2022
 17914                                  	; ds <> cs	
 17915                                  
 17916                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17917                                  
 17918 00000711 E87F17                  	call	doconf			; do pre-scan for dos=high/low
 17919                                  
 17920                                  	; 11/12/2022
 17921                                  	; 27/03/2019
 17922                                  	; ds = cs (at return from doconf)
 17923                                  
 17924                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17925                                  ; It will either be relocated to low memory, above the DOS data structures,
 17926                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17927                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17928                                  ; to tell the DOS data where the code has been placed, and to install the
 17929                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17930                                  ; must first initialize it in its present location and load the installable
 17931                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17932                                  ; relocate the DOS code into HiMem.
 17933                                  ;
 17934                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17935                                  ; to install the low memory stub (this must be done before allowing any
 17936                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17937                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17938                                  ; been patched.
 17939                                  
 17940                                  	; 22/10/2022 - Retro DOS v4.0
 17941                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17942                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17943                                  	; 11/12/2022
 17944 00000714 803E[6A02]00            	cmp	byte [runhigh],0
 17945 00000719 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17946                                  
 17947                                  ;------ user chose to load high
 17948                                  
 17949                                  	; 22/10/2022
 17950                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17951                                  	; 11/12/2022
 17952                                  	; ds = cs
 17953 0000071B 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17954                                  
 17955                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17956                                  	; 27/03/2019
 17957                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17958                                  
 17959 0000071F 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17960                                  	; 11/12/2022
 17961                                  	; ds = cs
 17962                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17963 00000721 FF1E[7B02]              	call	far [dos_segreinit]
 17964                                  
 17965 00000725 EB10                    	jmp	short do_multi_pass
 17966                                  
 17967                                  ;------ User chose to load dos low
 17968                                  
 17969                                  dont_install_stub:
 17970                                  	; 22/10/2022
 17971 00000727 31DB                    	xor	bx,bx			; M012
 17972                                  					; don't use int 21 call to alloc mem
 17973 00000729 E8D601                  	call	MovDOSLo		; move it !
 17974                                  
 17975 0000072C B80100                  	mov	ax,1			; dont install stub
 17976                                  	; 11/12/2022
 17977                                  	; ds = cs
 17978 0000072F 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17979                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17980                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17981                                  	; 27/03/2019
 17982                                  ;do_multi_pass:
 17983                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17984                                  
 17985                                  	; 11/12/2022
 17986                                  	; ds =cs
 17987                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17988 00000733 FF1E[7B02]              	call	far [dos_segreinit]
 17989                                  do_multi_pass:
 17990 00000737 E81201                  	call	AllocFreeMem		; allocate all the free mem
 17991                                  					; & update [memhi] & [area]
 17992                                  					; start of free memory.
 17993                                  	;ifdef	dblspace_hooks
 17994                                  	;mov	bx,0			; magic backdoor to place int hooks
 17995                                  	;call	cs:MagicBackdoor
 17996                                  	;endif
 17997                                  
 17998                                  ; Now, process config.sys some more.  
 17999                                  ; Load the device drivers and install programs
 18000                                  
 18001                                  	; 22/10/2022
 18002                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 18003                                  	; 11/12/2022
 18004                                  	; ds = cs
 18005 0000073A FE06[4903]              	inc	byte [multi_pass_id]
 18006 0000073E E8E517                  	call	multi_pass		; load device drivers
 18007 00000741 E87924                  	call	ShrinkUMB
 18008 00000744 E89F24                  	call	UnlinkUMB		; unlink all UMBs	;M002
 18009                                  	; 02/11/2022
 18010                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 18011                                  	; 11/12/2022
 18012                                  	; ds = cs
 18013 00000747 FE06[4903]              	inc	byte [multi_pass_id]
 18014 0000074B E8D817                  	call	multi_pass		; was load ifs (now does nothing)
 18015                                  
 18016                                  	;ifdef	dblspace_hooks
 18017                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 18018                                  	;endif
 18019                                  
 18020                                  	; ds = cs
 18021                                  	
 18022 0000074E E80A05                  	call	endfile			; setup fcbs, files, buffers etc
 18023                                  
 18024                                  	;ifdef	dblspace_hooks
 18025                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 18026                                  	;endif
 18027                                  
 18028                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 18029                                  ;to device drivers. This has been moved up to this point to avoid problems 
 18030                                  ;with overlays called from installed programs
 18031                                  
 18032                                  	; 11/12/2022
 18033                                  	; ds = cs
 18034                                  
 18035                                  	;;mov	ax,Bios_Data ; 0070h
 18036                                  	;mov	ax,KERNEL_SEGMENT
 18037                                  	; 21/10/2022
 18038 00000751 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 18039 00000754 8EC0                    	mov	es,ax			; point ES to bios data
 18040                                  
 18041 00000756 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 18042                                  
 18043                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18044                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 18045                                  	;test	byte [cs:install_flag],1
 18046                                  	; 11/12/2022
 18047                                  	; ds = cs
 18048 0000075C F606[4A03]01            	test	byte [install_flag],1
 18049                                  	;test	byte [cs:install_flag],have_install_cmd
 18050                                  					; are there install commands?
 18051 00000761 7407                    	jz	short dolast		; no, no need for further processing
 18052                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 18053                                  	; 11/12/2022
 18054                                  	; ds =cs
 18055 00000763 FE06[4903]              	inc	byte [multi_pass_id]
 18056 00000767 E8BC17                  	call	multi_pass		; execute install= commands
 18057                                  
 18058                                  dolast:
 18059                                  	
 18060                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 18061                                  ;  free the confbot area used for config.sys and sysinit itself.
 18062                                  
 18063                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 18064                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 18065                                  ; anything, but just set up the ROM area for suballocation (or print
 18066                                  ; a message if HiMem is not available).
 18067                                  ;
 18068                                  ; There is also this little hack for CPM style DOS calls that needs to
 18069                                  ; be done when A20 is set...
 18070                                  
 18071                                  	; 11/12/2022
 18072                                  	; ds = cs
 18073                                  
 18074                                  	; 22/10/2022
 18075                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 18076                                  	; 11/12/2022
 18077 0000076A 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18078 0000076F 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 18079 00000771 E83D01                  	call	LoadDOSHiOrLo
 18080                                  _@@_:
 18081                                  	;cmp	byte [cs:runhigh],0	; are we running low
 18082                                  	; 11/12/2022
 18083                                  	; ds = cs
 18084 00000774 803E[6A02]00            	cmp	byte [runhigh],0
 18085                                  	;je	short _@@@
 18086 00000779 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 18087 0000077B E82804                  	call	CPMHack			; make ffff:d0 same as 0:c0
 18088                                  _@@@:
 18089                                  
 18090                                  ; We are now done with CONFIG.SYS processing
 18091                                  
 18092                                  ConfigDone:
 18093                                  	; 12/12/2022
 18094                                  	; 22/10/2022
 18095                                  	;mov	byte [cs:donotshownum],1 
 18096                                  					; done with config.sys.
 18097                                  					; do not show line number message.
 18098                                  	;mov	es,[cs:area]
 18099                                  	; 12/12/2022
 18100                                  	; ds = cs
 18101                                  	; 27/03/2019
 18102 0000077E C606[D103]01            	mov	byte [donotshownum],1
 18103 00000783 8E06[E403]              	mov	es,[area]
 18104                                  
 18105 00000787 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 18106 00000789 CD21                    	int	21h
 18107                                  			; DOS - 2+ - FREE MEMORY
 18108                                  			; ES = segment address of area to be freed
 18109                                  
 18110                                  	; 22/10/2022
 18111                                  	;test	word [cs:install_flag],2
 18112                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 18113                                  	;test	byte [cs:install_flag],has_installed
 18114                                  	; 11/12/2022
 18115                                  	; ds = cs
 18116 0000078B F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 18117                                  	;test	byte [install_flag],has_installed
 18118 00000790 741F                    	jz	short skip_free_sysinitbase ; no.
 18119                                  
 18120                                  ; set block from the old_area with impossible_owner_size.
 18121                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18122                                  ; handle install= command.
 18123                                  
 18124                                  	; 12/12/2022
 18125                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18126                                  	;push	bx
 18127                                  	
 18128                                  	; 22/10/2022
 18129                                  	;mov	es,[cs:old_area]
 18130                                  	;mov	bx,[cs:impossible_owner_size]
 18131                                  	; 12/12/2022
 18132                                  	; ds = cs
 18133 00000792 8E06[DA03]              	mov	es,[old_area]
 18134 00000796 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 18135                                  	
 18136 0000079A B44A                    	mov	ah,4Ah ; SETBLOCK
 18137 0000079C CD21                    	int	21h
 18138                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18139                                  			; ES = segment address of block to change
 18140                                  			; BX = new size in paragraphs
 18141 0000079E 8CC0                    	mov	ax,es
 18142 000007A0 48                      	dec	ax
 18143 000007A1 8EC0                    	mov	es,ax			; point to arena
 18144                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18145 000007A3 26C70601000800          	mov	word [es:1],8
 18146                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18147 000007AA 26C70608005344          	mov	word [es:8],'SD'
 18148                                  	
 18149                                  	; 12/12/2022
 18150                                  	;pop	bx
 18151                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18152                                  
 18153                                  skip_free_sysinitbase:
 18154                                  	; 22/10/2022
 18155                                  	;cmp	byte [cs:runhigh],0
 18156                                  	; 12/12/2022
 18157                                  	; ds = cs
 18158 000007B1 803E[6A02]00            	cmp	byte [runhigh],0	
 18159 000007B6 7403                    	je	short _@@@@
 18160                                  
 18161 000007B8 E8D202                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18162                                  
 18163                                  ; ----------------------------------------------------------------------------
 18164                                  
 18165                                  _@@@@:
 18166                                  	; 12/12/2022
 18167                                  	; ds = cs
 18168                                  	; 22/10/2022
 18169                                  	; 27/03/2019
 18170                                  	;push	cs
 18171                                  	;pop	ds			; point DS to sysinitseg
 18172                                  
 18173                                  ; set up the parameters for command
 18174                                  
 18175                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18176                                  ;;ifdef  MULTI_CONFIG
 18177                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18178                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18179                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18180                                  ;	; !!!
 18181                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18182                                  ;       ; !!!
 18183                                  ;	call    disable_autoexec        ; no, we should disable it
 18184                                  ;process_autoexec:
 18185                                  ;;endif	; !!!
 18186                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18187                                  ;	; !!!
 18188                                  
 18189                                  	; 22/10/2022 
 18190                                  	;mov     cl,[command_line]
 18191                                          ;mov     ch,0
 18192                                          ;inc     cx
 18193                                          ;mov     si,command_line	
 18194                                  	;add     si,cx
 18195                                          ;mov     byte [si],cr	; cr-terminate command line
 18196                                  
 18197                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18198                                  	; (SYSINIT:0809h)
 18199                                  	
 18200                                  	;mov	si,(offset command_line+1)
 18201 000007BB BE[AA02]                	mov	si,command_line+1
 18202 000007BE 1E                      	push    ds
 18203 000007BF 07                      	pop     es
 18204 000007C0 89F7                    	mov     di,si
 18205 000007C2 B1FF                    	mov     cl,0FFh ; -1
 18206                                  _@_loop:
 18207 000007C4 FEC1                    	inc     cl ; +1
 18208 000007C6 AC                      	lodsb
 18209 000007C7 AA                      	stosb
 18210 000007C8 08C0                    	or      al,al
 18211 000007CA 75F8                    	jnz     short _@_loop
 18212 000007CC 4F                      	dec     di
 18213 000007CD B00D                    	mov     al,0Dh
 18214 000007CF AA                      	stosb			; cr-terminate command line
 18215 000007D0 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 18216                                  
 18217                                  ; ----------------------------------------------------------------------------
 18218                                  
 18219                                  ;   Once we get to this point, the above code, which is below "retry"
 18220                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18221                                  ;   which follow....)
 18222                                  
 18223                                  retry:
 18224 000007D4 BA[6333]                	mov	dx,commnd	; now pointing to file description
 18225                                  
 18226                                  ; we are going to open the command interpreter and size it as is done in
 18227                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18228                                  ; there is not enough room for the command interpreter,exec will probably
 18229                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18230                                  ; here to catch it. this code is not perfect (for instance .exe command
 18231                                  ; interpreters are possible) because it does its sizing based on the
 18232                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18233                                  ; correctness to be usable.
 18234                                  
 18235                                  ; first, find out where the command interpreter is going to go.
 18236                                  
 18237 000007D7 52                      	push	dx		; save pointer to name
 18238 000007D8 BBFFFF                  	mov	bx,0FFFFh
 18239 000007DB B448                    	mov	ah,48h	; ALLOC
 18240 000007DD CD21                            int     21h             ; get biggest piece
 18241 000007DF B448                    	mov	ah,48h	; ALLOC
 18242 000007E1 CD21                    	int	21h		; second time gets it
 18243 000007E3 7243                    	jc	short memerrjx	; oooops
 18244                                  
 18245 000007E5 8EC0                    	mov	es,ax
 18246 000007E7 B449                    	mov	ah,49h	; DEALLOC
 18247 000007E9 CD21                    	int	21h		; give it right back
 18248 000007EB 89DD                    	mov	bp,bx
 18249                                  
 18250                                  ; es:0 points to block,and bp is the size of the block in para.
 18251                                  
 18252                                  ; we will now adjust the size in bp down by the size of sysinit.
 18253                                  ; we need to do this because exec might get upset if some of the exec
 18254                                  ; data in sysinit is overlayed during the exec.
 18255                                  
 18256                                  	; 22/10/2022
 18257                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18258 000007ED 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18259 000007F1 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18260                                  
 18261                                  ; Note that the "config_wrkseg" environment data is a segment in
 18262                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18263                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18264                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18265                                  ; we need to make sure that there's no way Exec will stomp on that data
 18266                                  ; before it can copy it, and one way to do that is to make the available
 18267                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18268                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18269                                  ; of the current sysinit CS....
 18270                                  ;
 18271                                  ; The reason I use the term "paranoid" is because this code should have
 18272                                  ; slid the data required by Exec up to the very top of memory, because as
 18273                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18274                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18275                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18276                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18277                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18278                                  
 18279                                  	; 22/10/2022
 18280                                  	;mov	cx,[config_envlen]
 18281                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18282                                          ;mov	ax,[config_wrkseg]
 18283                                  ;no_env:
 18284                                  	; 22/10/2022
 18285                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18286 000007F3 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18287 000007F5 83C311                  	add	bx,11h		; add the sysinit php
 18288 000007F8 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18289 000007FA 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18290                                  
 18291                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18292 000007FC B8003D                          mov	ax,3D00h
 18293 000007FF F9                      	stc                     ; in case of int 24
 18294 00000800 CD21                    	int	21h
 18295 00000802 7240                    	jc	short comerr	; ooops
 18296                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18297                                  			; DS:DX -> ASCIZ filename
 18298                                  			; AL = access mode
 18299                                  			; 0 - read
 18300                                  	; 22/10/2022
 18301                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18302 00000804 89C3                            mov     bx,ax           ; handle in bx
 18303                                  
 18304                                  ;   If the standard command interpreter is being used, verify it is correct
 18305                                  
 18306                                  	; 22/10/2022
 18307                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18308                                  	;jne	short skip_validation ; yes
 18309                                  	;mov	dx,retry-4
 18310                                  	;mov	cx,4		;
 18311                                  	;mov	ah,READ		;
 18312                                  	;int	21h		;
 18313                                  	;cmp	byte [retry-4],0E9h
 18314                                  	;jne	short comerr
 18315                                  	;; 20/04/2019 - Retro DOS v4.0
 18316                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18317                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18318                                  	;jne	short comerr	;
 18319                                  
 18320                                  ;skip_validation:
 18321                                  	; 22/10/2022
 18322                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18323 00000806 31C9                    	xor	cx,cx
 18324 00000808 31D2                    	xor	dx,dx
 18325                                  	;mov	ax,(LSEEK<<8)|2
 18326 0000080A B80242                  	mov	ax,4202h
 18327 0000080D F9                      	stc			;in case of int 24
 18328 0000080E CD21                    	int	21h		; get file size in dx:ax
 18329 00000810 7232                    	jc	short comerr
 18330                                  				; convert size in dx:ax to para in ax
 18331 00000812 83C00F                  	add	ax,15		; round up size for conversion to para
 18332 00000815 83D200                  	adc	dx,0
 18333 00000818 E8A103                  	call	off_to_para
 18334 0000081B B10C                    	mov	cl,12
 18335 0000081D D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18336 0000081F 09D0                    	or	ax,dx		; ax is now # of para for file
 18337 00000821 83C010                  	add	ax,10h		; 100h byte php
 18338 00000824 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18339 00000826 7203                    	jb	short okld	; jump if yes.
 18340                                  
 18341                                  	; 22/10/2022
 18342                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18343                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18344                                  	; 02/11/2022
 18345                                  	;jmp	mem_err
 18346                                  	; 11/12/2022
 18347                                  	; ds = cs
 18348 00000828 E92B28                  	jmp	mem_err2
 18349                                  
 18350                                  ;memerrjx:
 18351                                  ;	mov	dx,badmem
 18352                                  ;	call	print
 18353                                  ;       jmp     short continue
 18354                                  
 18355                                  okld:
 18356 0000082B B43E                    	mov	ah,3Eh ; CLOSE
 18357 0000082D CD21                    	int	21h		; close file
 18358                                  
 18359                                  	; 22/10/2022
 18360 0000082F 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18361                                  
 18362                                  	; 24/03/2019
 18363                                  
 18364 00000830 0E                      	push	cs		; point es to sysinitseg
 18365 00000831 07                      	pop	es
 18366 00000832 BB[3B03]                        mov     bx,COMEXE	; point to exec block
 18367                                  	; 22/10/2022
 18368                                  	;pop	dx              ; recover pointer to name
 18369                                  
 18370                                  ;;ifdef	MULTI_CONFIG
 18371                                  
 18372                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18373                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18374                                  ;   selection was made (in which case the CONFIG environment variable will be
 18375                                  ;   set to that selection).
 18376                                  
 18377                                  	; 23/10/2022
 18378                                  	;mov	cx,[config_envlen]
 18379                                  	;jcxz	no_envdata
 18380                                          ;mov	cx,[config_wrkseg]
 18381                                  ;no_envdata:
 18382                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18383                                  	;mov	[bx],cx
 18384                                  
 18385                                  ;;endif	;MULTI_CONFIG
 18386                                  
 18387                                  	; 23/10/2022
 18388                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18389                                  
 18390                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18391 00000835 8C4F04                  	mov	[bx+4],cs
 18392                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18393 00000838 8C4F08                  	mov	[bx+8],cs
 18394                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18395 0000083B 8C4F0C                  	mov	[bx+12],cs
 18396                                  
 18397                                  ;mov	ax,(EXEC<<8) + 0
 18398                                  	; 23/10/2022
 18399                                  	;xor	ax,ax
 18400                                  	;mov	ah,4Bh
 18401                                  	; 14/08/2023
 18402                                  	;mov	ax,4B00h
 18403 0000083E B8004B                  	mov	ax,(EXEC<<8)       
 18404                                  
 18405 00000841 F9                      	stc                     ; in case of int 24
 18406 00000842 CD21                            int     21h             ; go start up command
 18407                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18408                                  			; DS:DX -> ASCIZ filename
 18409                                  			; ES:BX -> parameter block
 18410                                  			; AL = subfunc: load & execute program
 18411                                  	;push	cs
 18412                                  	;pop	ds
 18413                                  
 18414                                  	; 23/10/2022
 18415                                  	;push	dx		; push to balance fall-through pop
 18416                                  
 18417                                  ; note fall through if exec returns (an error)
 18418                                  comerr:
 18419                                  	; 23/10/2022
 18420                                  ;;ifdef	MULTI_CONFIG
 18421                                  	;cmp	byte [commnd4],0
 18422                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18423                                  	;cmp	byte [newcmd],0
 18424                                  	;je	short continue	; don't print err msg for defaults just yet
 18425                                  ;comerr2:
 18426                                  ;;endif
 18427 00000844 BA[B336]                        mov     dx,badcom	; want to print command error
 18428 00000847 E8172A                  	call	badfil
 18429                                  continue:
 18430                                  	; 23/10/2022
 18431                                  	;pop	dx
 18432                                  
 18433                                  ;;ifndef MULTI_CONFIG
 18434                                  	;jmp	stall
 18435                                  	; 24/10/2022
 18436                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18437 0000084A EBFE                    	jmp	short stall
 18438                                  ;;else
 18439                                  	; 23/10/2022
 18440                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18441                                  	;int	21h             ;
 18442                                  	;add	al,'A'          ;
 18443                                  	;mov	dl,al           ; DL == default drive letter
 18444                                  	;mov	si,commnd2
 18445                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18446                                  	;jne	short do_def2	; then try the 2nd alternate;
 18447                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18448                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18449                                  ;do_def2:			
 18450                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18451                                          ;jne	short do_alt    ; no
 18452                                  ;do_def3:
 18453                                  	;mov	si,commnd3
 18454                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18455                                  	;jne	short do_alt	; no
 18456                                  	;mov	si,commnd4
 18457                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18458                                  	;jne	short do_alt	; no
 18459                                  	;push	dx              ;
 18460                                  	;mov	dx,badcomprmpt
 18461                                  	;call	print		;
 18462                                  	;pop	dx              ; recover default drive letter in DL
 18463                                  ;request_input:			;
 18464                                  	;mov	ah,STD_CON_OUTPUT
 18465                                  	;int	21h             ;
 18466                                  	;push	dx              ;
 18467                                  	;mov	dl,'>'          ;
 18468                                  	;int	21h             ;
 18469                                  	;mov	bl,[tmplate+1]	;
 18470                                  	;mov	bh,0            ;
 18471                                  	;mov	byte [commnd+bx],0Dh
 18472                                  	;mov	dx,tmplate
 18473                                  	;mov	ah,STD_CON_STRING_INPUT
 18474                                  	;int	21h             ; read a line of input
 18475                                  	;mov	dx,crlfm	;
 18476                                  	;call	print           ;
 18477                                  	;pop	dx              ;
 18478                                  	;mov	bl,[tmplate+1]	;
 18479                                  	;or	bl,bl           ; was anything typed?
 18480                                  	;jz	short request_input ;
 18481                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18482                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18483                                  	;mov	word [command_line],0D00h
 18484                                  	;jmp	short do_exec   ;
 18485                                  ;do_alt:
 18486                                  	;push	ds
 18487                                  	;pop	es
 18488                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18489                                  	;mov	di,commnd	;
 18490                                  ;do_alt1:
 18491                                  	;lodsb			; copy the alternate, zapping it as we go,
 18492                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18493                                  	;stosb 			;
 18494                                  	;or	al,al		;
 18495                                  	;jnz	short do_alt1	;
 18496                                  	;mov	di,command_line
 18497                                  	;cmp	byte [si+2],':'
 18498                                  	;jne	short do_alt2	;
 18499                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18500                                  ;do_alt2:			;
 18501                                  	;lodsb			;
 18502                                  	;stosb			;
 18503                                  	;or	al,al           ;
 18504                                  	;jnz	short do_alt2   ;
 18505                                  	;mov	byte [di-1],cr
 18506                                  
 18507                                  ;;   Last but not least, see if we need to call disable_autoexec
 18508                                  
 18509                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18510                                  	;;cmp	[command_line-1],0
 18511                                          ;;jne	short do_exec   ;
 18512                                          ;;mov	[command_line-1],'/'
 18513                                  	;;call	disable_autoexec ;
 18514                                  
 18515                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18516                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18517                                  	;call	disable_autoexec
 18518                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18519                                  ;do_exec:
 18520                                  	;jmp     retry		;
 18521                                  
 18522                                  ;;endif	;MULTI_CONFIG
 18523                                  
 18524                                  ; 24/03/2019 - Retro DOS v4.0
 18525                                  
 18526                                  ; ----------------------------------------------------------------------
 18527                                  ; procedure : AllocFreeMem
 18528                                  ;
 18529                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18530                                  ; DOS is at temporary location when this call is being made
 18531                                  ;
 18532                                  ; Inputs : None
 18533                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18534                                  ;	   [area] & [memhi] set to the para value of the start of the
 18535                                  ;	   free memory.
 18536                                  ;
 18537                                  ; Uses   : AX, BX
 18538                                  ;
 18539                                  ; ----------------------------------------------------------------------
 18540                                  
 18541                                  	; 23/10/2022
 18542                                  AllocFreeMem:
 18543 0000084C BBFFFF                  	mov	bx,0FFFFh
 18544 0000084F B448                    	mov	ah,48h ; ALLOC
 18545 00000851 CD21                    	int	21h			; first time fails
 18546 00000853 B448                    	mov	ah,48h ; ALLOC
 18547 00000855 CD21                    	int	21h			; second time gets it
 18548                                  	; 11/12/2022
 18549                                  	; ds = cs
 18550                                  	;mov	[cs:area],ax
 18551                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18552 00000857 A3[E403]                	mov	[area],ax
 18553 0000085A A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18554 0000085D C3                      	retn				; start of free memory
 18555                                  				
 18556                                  	; include msbio.cl6
 18557                                  ; ----------------------------------------------------------------------
 18558                                  DOSLOMSG:
 18559 0000085E 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18559 00000867 7661696C61626C653A-
 18559 00000870 204C6F6164696E6720-
 18559 00000879 444F53206C6F770D0A-
 18559 00000882 24                 
 18560                                  FEmsg:
 18561 00000883 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18561 0000088C 6F723A2043616E6E6F-
 18561 00000895 7420616C6C6F636174-
 18561 0000089E 65204D656D6F727920-
 18561 000008A7 666F7220444F530D0A-
 18561 000008B0 24                 
 18562                                  
 18563                                  ; ----------------------------------------------------------------------
 18564                                  ;
 18565                                  ; procedure : LoadDOSHiOrLo
 18566                                  ;
 18567                                  ;		Tries to move DOS into HMA. If it fails then loads
 18568                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18569                                  ;		moved; this just tries to allocate the HMA, and prints
 18570                                  ;		a message if this is not possible.
 18571                                  ;
 18572                                  ; ----------------------------------------------------------------------
 18573                                  
 18574                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18575                                  LoadDOSHiOrLo:
 18576                                  	; 27/03/2019 - Retro DOS v4.0
 18577                                  	; ds = cs
 18578 000008B1 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18579                                  	;jc	short LdngLo		; If that don't work...
 18580                                  	;retn
 18581                                  	; 18/12/2022
 18582 000008B4 731C                    	jnc	short LoadDosHi_ok
 18583                                  LdngLo:
 18584                                  	; 23/10/2022
 18585                                  	;push	cs
 18586                                  	;pop	ds
 18587                                  	; 11/12/2022
 18588                                  	; ds = cs
 18589 000008B6 B409                    	mov	ah,9
 18590 000008B8 BA[5E08]                	mov	dx,DOSLOMSG		; inform user that we are
 18591 000008BB CD21                    	int	21h			; loading low
 18592                                  
 18593                                  ;ifndef ROMDOS
 18594                                  	; actually move the dos, and reinitialize it.
 18595                                  
 18596 000008BD BB0100                  	mov	bx,1				; M012
 18597                                  						;  use int 21 alloc for mem
 18598 000008C0 E83F00                  	call	MovDOSLo
 18599                                  	; 11/12/2022
 18600                                  	; ds = cs
 18601                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18602                                  	; 23/10/2022
 18603 000008C3 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18604                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18605                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18606 000008C7 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18607                                  	; 11/12/2022
 18608                                  	; ds = cs
 18609                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18610 000008C9 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18611                                  	
 18612                                  ;endif ; ROMDOS
 18613                                  	; 23/10/2022
 18614                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18615                                  	; 11/12/2022
 18616                                  	; ds = cs
 18617 000008CD C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18618                                  LoadDosHi_ok:	; 18/12/2022
 18619 000008D2 C3                      	retn
 18620                                  
 18621                                  ; ----------------------------------------------------------------------
 18622                                  ;
 18623                                  ; procedure : TryToMovDOSHi
 18624                                  ;
 18625                                  ;		This tries to move DOS into HMA.
 18626                                  ;		Returns CY if it failed.
 18627                                  ;		If it succeeds returns with carry cleared.
 18628                                  ;
 18629                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18630                                  ;		the A20 switching code in the low mem stub to be installed.
 18631                                  ; 
 18632                                  ; ----------------------------------------------------------------------
 18633                                  
 18634                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18635                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18636                                  TryToMovDOSHi:
 18637                                  	; 11/12/2022
 18638                                  	; 27/03/2019 - Retro DOS v4.0
 18639                                  	; ds = cs
 18640 000008D3 E81300                  	call	MovDOSHi
 18641 000008D6 7210                    	jc	short ttldhx
 18642                                  
 18643                                  ;ifndef ROMDOS
 18644                                  	; 23/10/2022
 18645                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18646                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18647                                  	; 11/12/2022
 18648                                  	; ds = cs
 18649 000008D8 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18650                                  ;else
 18651                                  ;	..
 18652                                  ;endif ; ROMDOS
 18653                                  
 18654                                  	; 11/12/2022
 18655                                  	; ds = cs
 18656 000008DC 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18657                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18658 000008DE FF1E[7B02]              	call	far [dos_segreinit]
 18659                                  	;mov	byte [cs:runhigh],1
 18660 000008E2 C606[6A02]01            	mov	byte [runhigh],1
 18661 000008E7 F8                      	clc
 18662                                  ttldhx:
 18663 000008E8 C3                      	retn
 18664                                  
 18665                                  ; ----------------------------------------------------------------------
 18666                                  ;
 18667                                  ; procedure : MovDOSHi
 18668                                  ;
 18669                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18670                                  ;		For ROMDOS, the code is not actually moved, but the
 18671                                  ;		HMA is allocated and prepared for sub-allocation.
 18672                                  ;
 18673                                  ;		Returns : CY if it failed
 18674                                  ;
 18675                                  ; ----------------------------------------------------------------------
 18676                                  
 18677                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18678                                  MovDOSHi:
 18679                                  	; 14/05/2019
 18680                                  	; 27/03/2019 - Retro DOS v4.0
 18681                                  	; ds = cs
 18682 000008E9 E8D500                  	call	AllocHMA
 18683 000008EC 7213                    	jc	short mdhx			; did we get HMA?
 18684 000008EE B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18685 000008F1 8EC0                    	mov	es,ax
 18686                                  
 18687                                  ;ifndef ROMDOS
 18688                                  	; actually move the BIOS and DOS
 18689                                  
 18690                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18691                                  	; 24/03/2019
 18692                                  	
 18693                                  	; 23/10/2022
 18694 000008F3 E83200                  	call	MovBIOS				; First move BIOS into HMA
 18695                                  
 18696                                  	; ES:DI points to free HMA after BIOS
 18697                                  	
 18698                                  	; 14/05/2019
 18699                                  	; 24/03/2019 - Retro DOS v4.0
 18700                                  	;xor	di,di
 18701                                  	
 18702                                  	; 23/10/2022
 18703                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18704                                  	; 11/12/2022
 18705                                  	; ds = cs
 18706 000008F6 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18707 000008FA E81100                  	call	MovDOS				; and move it
 18708                                  
 18709                                  	; ES:DI points to free HMA after DOS
 18710                                  ;else
 18711                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18712                                  ;
 18713                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18714                                  ;
 18715                                  ;endif ; ROMDOS
 18716                                  
 18717 000008FD E85D02                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18718 00000900 F8                      	clc
 18719                                  mdhx:
 18720 00000901 C3                      	retn
 18721                                  
 18722                                  ; ----------------------------------------------------------------------
 18723                                  ;
 18724                                  ; procedure : MovDOSLo
 18725                                  ;
 18726                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18727                                  ;
 18728                                  ; ----------------------------------------------------------------------
 18729                                  
 18730                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18731                                  
 18732                                  ;ifndef ROMDOS
 18733                                  
 18734                                  MovDOSLo:
 18735                                  	; 14/05/2019
 18736                                  	; 27/03/2019 - Retro DOS v4.0
 18737                                  	; ds = cs
 18738 00000902 E84500                  	call	AllocMemForDOS			; incestuosly!!!
 18739                                  	
 18740                                  	; 23/10/2022
 18741                                  	; 14/05/2019
 18742                                  	;inc	ax  ; skip MCB
 18743                                  	
 18744 00000905 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18745                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18746                                  	; 24/03/2019
 18747                                  	
 18748                                  	; 23/10/2022
 18749 00000907 E81E00                  	call	MovBIOS
 18750                                  
 18751                                  ;------ ES:DI points memory immediately after BIOS
 18752                                  
 18753                                  	; 14/05/2019
 18754                                  	; NOTE: 
 18755                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18756                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18757                                  
 18758                                  	; 24/03/2019 - Retro DOS v4.0
 18759                                  	;xor	di,di	
 18760                                  
 18761                                  	; 23/10/2022
 18762                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18763                                  	; 11/12/2022
 18764                                  	; ds = cs
 18765 0000090A 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18766                                  	;call	MovDOS
 18767                                  	;retn
 18768                                  	; 11/12/2022
 18769                                  	;jmp	short MovDOS
 18770                                  
 18771                                  ;endif ; ROMDOS
 18772                                  
 18773                                  ; 11/12/2022
 18774                                  
 18775                                  ; ----------------------------------------------------------------------
 18776                                  ;
 18777                                  ; procedure : MovDOS
 18778                                  ;
 18779                                  ;		Moves DOS code into requested area
 18780                                  ;
 18781                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18782                                  ;	     CX    - size of DOS code to be moved
 18783                                  ;
 18784                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18785                                  ;
 18786                                  ; ----------------------------------------------------------------------
 18787                                  
 18788                                  	; 11/12/2022
 18789                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18790                                  
 18791                                  ;ifndef ROMDOS
 18792                                  
 18793                                  MovDOS:
 18794                                  	; 14/05/2019
 18795                                  	; 27/03/2019 - Retro DOS v4.0
 18796                                  
 18797                                  	; 11/12/2022
 18798                                  	; ds = cs
 18799                                  
 18800                                  	; 23/10/2022
 18801                                  	;push	ds ; *//
 18802                                  	
 18803 0000090E 06                      	push	es
 18804 0000090F 57                      	push	di
 18805                                  
 18806                                  	; 11/12/2022
 18807 00000910 1E                      	push	ds ; *// ; 11/12/202
 18808                                  
 18809                                  	; 29/04/2019
 18810 00000911 C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18811                                  	; 23/10/2022
 18812                                  	;lds	si,[cs:dosinit]
 18813                                  	; 04/09/2023
 18814 00000915 89F0                    	mov	ax,si
 18815                                  
 18816 00000917 F3A4                    	rep	movsb
 18817                                  
 18818 00000919 1F                      	pop	ds ; *// ; 11/12/2022
 18819                                  
 18820 0000091A 5B                      	pop	bx				; get back offset into which
 18821                                  						;  DOS was moved
 18822                                  	; 04/09/2023
 18823                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 18824                                  						;  wants to run
 18825                                  	; 04/09/2023
 18826                                  	;mov	ax,[dosinit]
 18827                                  	; ax = [dosinit]
 18828                                  
 18829 0000091B 29D8                    	sub	ax,bx
 18830 0000091D E89C02                  	call	off_to_para
 18831 00000920 5B                      	pop	bx				; get the segment at which
 18832                                  						;  we moved DOS into
 18833 00000921 29C3                    	sub	bx,ax				; Adjust segment
 18834                                  	
 18835                                  	; 11/12/2022
 18836                                  	; 23/10/2022
 18837                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18838                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18839                                  	; 11/12/2022
 18840 00000923 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18841                                  		
 18842                                  	; 27/03/2019
 18843                                  	;pop	ds ; *//
 18844                                  	; ds = cs
 18845                                  	;mov	[FINAL_DOS_LOCATION],bx
 18846                                  
 18847 00000927 C3                      	retn
 18848                                  
 18849                                  ;endif ;ROMDOS
 18850                                  
 18851                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18852                                  ; 24/03/2019
 18853                                  ; ----------------------------------------------------------------------
 18854                                  ;
 18855                                  ; procedure : MovBIOS
 18856                                  ;
 18857                                  ;		Moves BIOS code into requested segment
 18858                                  ;
 18859                                  ;	In : ES - segment to which BIOS is to be moved
 18860                                  ;		  ( it moves always into offset BCode_Start)
 18861                                  ;
 18862                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18863                                  ;
 18864                                  ; ----------------------------------------------------------------------
 18865                                  
 18866                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18867                                  
 18868                                  ;ifndef ROMDOS
 18869                                  
 18870                                  MovBIOS: ; proc	near
 18871                                  	; 11/12/2022
 18872 00000928 1E                      	push	ds ; ds = cs	
 18873                                  	;
 18874                                  	; 23/10/2022
 18875                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18876                                  	; 17/09/2023
 18877 00000929 8E1E[8702]              	mov	ds,[temp_bcode_seg]
 18878                                  	;mov	si,BCODE_START ; mov si,30h
 18879                                  	; 09/12/2022
 18880 0000092D BE[3000]                	mov	si,BCODESTART
 18881 00000930 89F7                    	mov	di,si
 18882 00000932 B9D019                  	mov	cx,BCODE_END ; mov cx,1A60h
 18883 00000935 29F1                    	sub	cx,si				; size of BIOS
 18884 00000937 D1E9                    	shr	cx,1				; Both the labels are para
 18885                                  						;  aligned
 18886 00000939 F3A5                    	rep	movsw
 18887                                  	
 18888                                  	; 11/12/2022
 18889 0000093B 1F                      	pop	ds ; ds = cs
 18890                                  	;
 18891 0000093C 06                      	push	es
 18892 0000093D 57                      	push	di				; save end of BIOS
 18893 0000093E 8CC0                    	mov	ax,es
 18894                                  	;
 18895                                  	; 11/12/2022
 18896                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18897                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18898                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18899                                  	; ds = cs
 18900 00000940 A3[0004]                	mov	[BCodeSeg],ax
 18901 00000943 FF1E[8502]              	call	far [seg_reinit_ptr]
 18902                                  	;
 18903 00000947 5F                      	pop	di
 18904 00000948 07                      	pop	es				; get back end of BIOS
 18905 00000949 C3                      	retn
 18906                                  
 18907                                  ;MovBIOS endp
 18908                                  
 18909                                  ;endif ; ROMDOS
 18910                                  
 18911                                  ; 11/12/2022
 18912                                  %if 0
 18913                                  
 18914                                  ; 24/03/2019
 18915                                  
 18916                                  ; ----------------------------------------------------------------------
 18917                                  ;
 18918                                  ; procedure : MovDOS
 18919                                  ;
 18920                                  ;		Moves DOS code into requested area
 18921                                  ;
 18922                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18923                                  ;	     CX    - size of DOS code to be moved
 18924                                  ;
 18925                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18926                                  ;
 18927                                  ; ----------------------------------------------------------------------
 18928                                  
 18929                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18930                                  
 18931                                  ;ifndef ROMDOS
 18932                                  
 18933                                  MovDOS:
 18934                                  	; 14/05/2019
 18935                                  	; 27/03/2019 - Retro DOS v4.0
 18936                                  
 18937                                  	; 11/12/2022
 18938                                  	; ds = cs
 18939                                  
 18940                                  	; 23/10/2022
 18941                                  	;push	ds ; *//
 18942                                  	
 18943                                  	push	es
 18944                                  	push	di
 18945                                  
 18946                                  	; 11/12/2022
 18947                                  	push	ds ; *// ; 11/12/202
 18948                                  
 18949                                  	; 29/04/2019
 18950                                  	lds	si,[dosinit] ; 11/12/2022
 18951                                  	; 23/10/2022
 18952                                  	;lds	si,[cs:dosinit]
 18953                                  	; 04/09/2023
 18954                                  	mov	ax,si
 18955                                  
 18956                                  	rep	movsb
 18957                                  
 18958                                  	pop	ds ; *// ; 11/12/2022
 18959                                  
 18960                                  	pop	bx				; get back offset into which
 18961                                  						;  DOS was moved
 18962                                  	;mov	ax,[dosinit] ; 04/09/2023
 18963                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 18964                                  						;  wants to run
 18965                                  	sub	ax,bx
 18966                                  	call	off_to_para
 18967                                  	pop	bx				; get the segment at which
 18968                                  						;  we moved DOS into
 18969                                  	sub	bx,ax				; Adjust segment
 18970                                  	
 18971                                  	; 11/12/2022
 18972                                  	; 23/10/2022
 18973                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18974                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18975                                  	; 11/12/2022
 18976                                  	mov	[CURRENT_DOS_LOCATION],bx
 18977                                  		
 18978                                  	; 27/03/2019
 18979                                  	;pop	ds ; *//
 18980                                  	; ds = cs
 18981                                  	;mov	[FINAL_DOS_LOCATION],bx
 18982                                  
 18983                                  	retn
 18984                                  
 18985                                  ;endif ;ROMDOS
 18986                                  
 18987                                  %endif
 18988                                  
 18989                                  ; ----------------------------------------------------------------------
 18990                                  ;
 18991                                  ; procedure : AllocMemForDOS
 18992                                  ;
 18993                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18994                                  ;
 18995                                  ;	Out : AX - seg of allocated memoryblock
 18996                                  ;
 18997                                  ; ----------------------------------------------------------------------
 18998                                  
 18999                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19000                                  
 19001                                  ;ifndef ROMDOS
 19002                                  
 19003                                  AllocMemForDOS:
 19004                                  	; 11/12/2022
 19005                                  	; 14/05/2019
 19006                                  	; 27/03/2019 - Retro DOS v4.0
 19007                                  	; ds = cs
 19008                                  	;mov	ax,BCode_end
 19009                                  	;sub	ax,BCode_start		; BIOS code size
 19010                                  	; 23/10/2022
 19011 0000094A B8D019                  	mov	ax,BCODE_END ; 1A60h
 19012                                  	;sub	ax,BCODE_START ; 30h
 19013                                  	; 09/12/2022
 19014 0000094D 2D[3000]                	sub	ax,BCODESTART 
 19015                                  	; 24/03/2019 - Retro DOS v4.0 
 19016                                  	; 02/11/2022
 19017                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 19018                                  	; 11/12/2022
 19019                                  	; ds = cs
 19020 00000950 0306[7F02]              	add	ax,[lo_doscod_size]
 19021 00000954 83C00F                  	add	ax,15
 19022 00000957 E86202                  	call	off_to_para			; convert to para
 19023                                  	; 23/10/2022
 19024                                  	; 14/05/2019
 19025                                  	;inc	ax ; + 1 paragraph for MCB
 19026 0000095A 09DB                    	or	bx,bx				; M012
 19027 0000095C 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 19028 0000095E 741A                    	jz	short update_arena		; M012
 19029 00000960 B448                    	mov	ah,48h				; request DOS
 19030 00000962 CD21                    	int	21h
 19031 00000964 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 19032                                   	; 23/10/2022
 19033                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 19034 00000966 83E803                  	sub	ax,3				; Take care ORG 30h of
 19035                                  						;  BIOS code
 19036 00000969 8EC0                    	mov	es,ax
 19037                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 19038                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 19039                                  	; 14/05/2019
 19040                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 19041                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 19042                                  	; 23/10/2022
 19043 0000096B 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 19044 00000972 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 19045                                  
 19046 00000979 C3                      	retn
 19047                                  
 19048                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 19049                                  ;	  using DOS itself causes an arena to be generated.
 19050                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 19051                                  ;	  assume that the device drivers are loaded into
 19052                                  ;	  the first arena. For this reason, MagicDrv's
 19053                                  ;	  main device driver header arena is manually
 19054                                  ;	  truncated from the arena chain, and the space
 19055                                  ;	  for DOS is allocated using the following
 19056                                  ;	  simple code, which also assumes that the
 19057                                  ;	  first arena is the free one where DOS's low
 19058                                  ;	  stub will go.
 19059                                  ;
 19060                                  ; M012 : BEGIN
 19061                                  
 19062                                  	; 23/10/2022
 19063                                  update_arena:
 19064 0000097A 1E                      	push	ds ; ds = cs
 19065 0000097B 57                      	push	di
 19066 0000097C 51                      	push	cx
 19067 0000097D 52                      	push	dx
 19068                                  	; 23/10/2022
 19069                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 19070                                  	; 11/12/2022
 19071                                  	; ds = cs 
 19072 0000097E C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 19073 00000982 4F                      	dec	di
 19074 00000983 4F                      	dec	di				; Arena head is immediately
 19075                                  						;  before sysvar
 19076 00000984 8E05                    	mov	es,[di]				; es = arena head
 19077                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 19078 00000986 268B0E0300              	mov	cx,[es:3]
 19079 0000098B 39D9                    	cmp	cx,bx				; is it sufficient ?
 19080 0000098D 7227                    	jb	short FatalErr			; no, fatal error
 19081                                  
 19082                                  	;mov	dl,[es:ARENA.SIGNATURE]
 19083 0000098F 268A160000              	mov	dl,[es:0]
 19084 00000994 8CC0                    	mov	ax,es
 19085 00000996 01D8                    	add	ax,bx				; ax = new arena head
 19086 00000998 8905                    	mov	[di],ax				; store it in DOS data area
 19087 0000099A 8ED8                    	mov	ds,ax
 19088                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 19089 0000099C 88160000                	mov	[0],dl
 19090                                  	;mov	word [ARENA.OWNER],0		; free
 19091 000009A0 C70601000000            	mov	word [1],0
 19092 000009A6 29D9                    	sub	cx,bx				; size of the new block
 19093                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 19094 000009A8 890E0300                	mov	[3],cx
 19095 000009AC 8CC0                    	mov	ax,es				; return seg to the caller
 19096                                  	; 23/10/2022
 19097                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 19098 000009AE 83E803                  	sub	ax,3				;  BIOS code
 19099 000009B1 5A                      	pop	dx
 19100 000009B2 59                      	pop	cx
 19101 000009B3 5F                      	pop	di
 19102 000009B4 1F                      	pop	ds ; ds = cs
 19103 000009B5 C3                      	retn
 19104                                  ;
 19105                                  ; M012 : END
 19106                                  ;
 19107                                  FatalErr:
 19108 000009B6 0E                      	push	cs
 19109 000009B7 1F                      	pop	ds
 19110 000009B8 BA[8308]                	mov	dx,FEmsg
 19111 000009BB B409                    	mov	ah,9
 19112 000009BD CD21                    	int	21h 		; DOS - PRINT STRING
 19113                                  				; DS:DX -> string terminated by "$"
 19114                                          ;jmp	stall
 19115                                  	; 23/10/2022
 19116 000009BF FA                      	cli
 19117 000009C0 F4                      	hlt
 19118                                  
 19119                                  ;endif ;ROMDOS
 19120                                  
 19121                                  ; 25/03/2019 - Retro DOS v4.0
 19122                                  
 19123                                  ; ----------------------------------------------------------------------
 19124                                  ;
 19125                                  ; procedure : AllocHMA
 19126                                  ;
 19127                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19128                                  ;	  up there. If it gets any sort of error, it will return with
 19129                                  ;	  carry set so that we can resort to running low.
 19130                                  ;
 19131                                  ;	It also returns ES: -> 0ffffh if it returns success
 19132                                  ;
 19133                                  ; ----------------------------------------------------------------------
 19134                                  
 19135                                  AllocHMA:
 19136                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19137                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19138                                  ;		   been deleted because it can be recycled for skipping the
 19139                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19140                                  ;		   in the case of a pre-286.
 19141                                  
 19142                                  ;;	see if we're running on a pre-286. If not, force low.
 19143                                  ;
 19144                                  ;	xor	ax,ax
 19145                                  ;	pushf			; save flags (like int)
 19146                                  ;	push	ax
 19147                                  ;	popf
 19148                                  ;	pushf
 19149                                  ;	pop	ax
 19150                                  ;	popf			; restore original flags (like int)
 19151                                  ;	and	ax,0F000h
 19152                                  ;	cmp	ax,0F000h	; 8088/8086?
 19153                                  ;	jz	short grab_hma_error
 19154                                  
 19155                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19156                                  	; (SYSINIT:0A26h)
 19157                                  
 19158 000009C1 1E                      	push	ds
 19159                                  	;;mov	ax,Bios_Data
 19160                                  	;mov	ax,KERNEL_SEGMENT
 19161                                  	; 21/10/2022
 19162 000009C2 B87000                  	mov	ax,DOSBIODATASEG
 19163 000009C5 8ED8                    	mov	ds,ax
 19164                                  
 19165 000009C7 E84A00                  	call	IsXMSLoaded
 19166 000009CA 7545                    	jnz	short grabhma_error
 19167                                  
 19168 000009CC B81043                  	mov	ax,4310h
 19169 000009CF CD2F                    	int	2Fh		; get the vector into es:bx
 19170                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19171                                  		; Return: ES:BX -> driver entry point
 19172                                  
 19173 000009D1 891E[0E00]              	mov	[xms],bx
 19174                                  	;mov	[0Eh], bx
 19175 000009D5 8C06[1000]              	mov	[xms+2],es
 19176                                  	;mov	[10h],es
 19177                                  
 19178 000009D9 B401                    	mov	ah,1		; request HMA
 19179 000009DB BAFFFF                  	mov	dx,0FFFFh
 19180                                  	;call	dword ptr ds:0Eh
 19181 000009DE FF1E[0E00]              	call	far [xms]
 19182 000009E2 48                      	dec	ax
 19183 000009E3 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19184                                  
 19185                                  ;------ Himem may be lying because it has allocated mem for int 15
 19186                                  
 19187 000009E5 B488                    	mov	ah,88h
 19188 000009E7 CD15                    	int	15h
 19189                                  		; Get Extended Memory Size
 19190                                  		; Return: CF clear on success
 19191                                  		; AX = size of memory above 1M in K
 19192 000009E9 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19193                                  	;jb	short grabhma_error
 19194                                  	; 11/12/2022
 19195 000009EC 7224                    	jb	short grabhma_err ; cf=1
 19196                                  allocHMA_1:
 19197 000009EE B405                    	mov	ah,5		; localenableA20
 19198                                  	;call	dword ptr ds:0Eh
 19199 000009F0 FF1E[0E00]              	call	far [xms]
 19200 000009F4 48                      	dec	ax
 19201 000009F5 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19202                                  
 19203 000009F7 E88501                  	call	IsVDiskInstalled
 19204 000009FA 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19205                                  
 19206 000009FC B8FFFF                  	mov	ax,0FFFFh
 19207 000009FF 8EC0                    	mov	es,ax
 19208 00000A01 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19209 00000A08 26813E10003412          	cmp	word [es:10h],1234h
 19210                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19211                                  	; 11/12/2022
 19212 00000A0F 7401                    	je	short allocHMA_ok	
 19213                                  
 19214                                  ; 11/12/2022
 19215                                  ;	; 11/12/2022
 19216                                  ;	; cf=0
 19217                                  ;	;clc
 19218                                  ;	pop	ds
 19219                                  ;	retn
 19220                                  
 19221                                  grabhma_error:
 19222 00000A11 F9                      	stc
 19223                                  	; 11/12/022
 19224                                  grabhma_err:	; cf=1
 19225                                  allocHMA_ok:	; cf=0
 19226 00000A12 1F                      	pop	ds
 19227 00000A13 C3                      	retn
 19228                                  
 19229                                  ; ----------------------------------------------------------------------
 19230                                  ;
 19231                                  ; procedure : IsXMSLoaded
 19232                                  ;
 19233                                  ;             Checks whether a XMS driver is loaded
 19234                                  ;
 19235                                  ; Returns : Z flag set if XMS driver loaded
 19236                                  ;           Z flag reset if no XMS drivers are present
 19237                                  ;
 19238                                  ; ----------------------------------------------------------------------
 19239                                  
 19240                                  IsXMSLoaded:
 19241 00000A14 B80043                  	mov	ax,4300h
 19242 00000A17 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19243                                  				; Return: AL = 80h XMS driver installed
 19244                                  				; AL <> 80h no driver
 19245 00000A19 3C80                    	cmp	al,80h		; XMS installed?
 19246 00000A1B C3                      	retn
 19247                                  
 19248                                  ; ----------------------------------------------------------------------
 19249                                  ; procedure : FTryToMovDOSHi
 19250                                  ;
 19251                                  ;		Called from HMA suballoc calls
 19252                                  ;	
 19253                                  ; ----------------------------------------------------------------------
 19254                                  
 19255                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19256                                  	; (SYSINIT:0A84h)
 19257                                  
 19258                                  FTryToMovDOSHi:	; proc	far
 19259                                  
 19260 00000A1C 50                      	push	ax
 19261 00000A1D 53                      	push	bx
 19262 00000A1E 51                      	push	cx
 19263 00000A1F 52                      	push	dx
 19264 00000A20 56                      	push	si
 19265 00000A21 57                      	push	di
 19266 00000A22 1E                      	push	ds
 19267 00000A23 06                      	push	es
 19268                                  
 19269                                  	; 23/10/2022
 19270                                  	; 27/03/2019 - Retro DOS v4.0
 19271                                  	; 11/12/2022
 19272 00000A24 0E                      	push	cs
 19273 00000A25 1F                      	pop	ds
 19274                                  
 19275                                  	;cmp	byte [cs:runhigh],0FFh
 19276                                  	; 11/12/2022
 19277 00000A26 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19278 00000A2B 7503                    	jne	short _ftymdh_1
 19279                                  
 19280                                  	; ds = cs
 19281 00000A2D E8A3FE                  	call	TryToMovDOSHi
 19282                                  _ftymdh_1:
 19283 00000A30 07                      	pop	es
 19284 00000A31 1F                      	pop	ds
 19285 00000A32 5F                      	pop	di
 19286 00000A33 5E                      	pop	si
 19287 00000A34 5A                      	pop	dx
 19288 00000A35 59                      	pop	cx
 19289 00000A36 5B                      	pop	bx
 19290 00000A37 58                      	pop	ax
 19291                                  
 19292 00000A38 CB                      	retf
 19293                                  
 19294                                  ; ----------------------------------------------------------------------
 19295                                  ;
 19296                                  ; following piece of code will be moved into a para boundary. And the para
 19297                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19298                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19299                                  ; to determine free extended memory.
 19300                                  ;
 19301                                  ; For more details read "power programming" column by Ray Duncan in the
 19302                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19303                                  ;
 19304                                  ; ----------------------------------------------------------------------
 19305                                  
 19306                                  StartVDHead:
 19307                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19308                                  
 19309 00000A39 00000000                	dd	0		; link to next device driver
 19310 00000A3D 0080                    	dw	8000h		; device attribute
 19311 00000A3F 0000                    	dw	0		; strategy routine offset
 19312 00000A41 0000                    	dw	0		; interrupt routine offset
 19313 00000A43 01                      	db	1		; number of units
 19314                                  	;db	7 dup(0) 
 19315 00000A44 00<rep 7h>              	times	7 db 0 		; reserved area
 19316                                  VDiskSig1:
 19317 00000A4B 564449534B              	db	'VDISK'
 19318                                  
 19319                                  VLEN1	equ	($-VDiskSig1)
 19320                                  
 19321 00000A50 202056332E33            	db	'  V3.3'	; vdisk label
 19322                                  	;db	15 dup (0)	; pad
 19323 00000A56 00<rep Fh>              	times	15 db 0
 19324 00000A65 0000                    	dw	0		; bits 0-15 of free HMA
 19325 00000A67 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19326                                  VDInt19:
 19327 00000A68 EA                      	db	0EAh		; jmp to old vector
 19328                                  OldVDInt19:
 19329 00000A69 00000000                	dd	0		; Saved int 19 vector
 19330                                  
 19331                                  EndVDHead: ; label byte
 19332                                  
 19333                                  VDiskHMAHead:	
 19334 00000A6D 000000                  	db	0,0,0		; non-bootable disk
 19335                                  VDiskSig2:
 19336 00000A70 564449534B              	db	'VDISK'
 19337                                  
 19338                                  VLEN2	equ	($-VDiskSig2)
 19339                                  
 19340 00000A75 332E33                  	db	'3.3'		; OEM - signature
 19341 00000A78 8000                    	dw	128		; number of bytes/sector
 19342 00000A7A 01                      	db	1		; sectors/cluster
 19343 00000A7B 0100                    	dw	1		; reserved sectors
 19344 00000A7D 01                      	db	1		; number of FAT copies
 19345 00000A7E 4000                    	dw	64		; number of root dir entries
 19346 00000A80 0002                    	dw	512		; number of sectors
 19347 00000A82 FE                      	db	0FEh		; media descriptor
 19348 00000A83 0600                    	dw	6		; number of sectors/FAT
 19349 00000A85 0800                    	dw	8		; sectors per track
 19350 00000A87 0100                    	dw	1		; number of heads
 19351 00000A89 0000                    	dw	0		; number of hidden sectors
 19352 00000A8B 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19353                                  
 19354                                  EndVDiskHMAHead: ; label byte
 19355                                  
 19356                                  ; ----------------------------------------------------------------------
 19357                                  ;
 19358                                  ; procedure : InstVDiskHeader
 19359                                  ;
 19360                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19361                                  ;	      It puts a 32 byte header at 10000:0 and
 19362                                  ;	      another header at (seg of int19):0
 19363                                  ;
 19364                                  ; Inputs : None
 19365                                  ;
 19366                                  ; Outputs : None
 19367                                  ;
 19368                                  ; USES : DS,SI,AX,CX,DX
 19369                                  ;
 19370                                  ; ----------------------------------------------------------------------
 19371                                  
 19372                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19373                                  
 19374                                  InstVDiskHeader:
 19375 00000A8D 31C0                    	xor	ax,ax
 19376 00000A8F 8ED8                    	mov	ds,ax			; seg of int vect table
 19377                                  
 19378                                  ;-------------- save old int 19 vector
 19379                                  
 19380                                  	; 23/10/2022
 19381 00000A91 A16400                  	mov	ax,[19h*4]
 19382                                  	;mov	[OldVDInt19],ax
 19383 00000A94 2EA3[690A]              	mov	[cs:OldVDInt19],ax
 19384 00000A98 A16600                  	mov	ax,[19h*4+2]
 19385                                  	;mov	[OldVDInt19+2],ax
 19386 00000A9B 2EA3[6B0A]              	mov	[cs:OldVDInt19+2],ax
 19387                                  
 19388                                  ;-------------- calculate seg of new int 19 handler
 19389                                  
 19390 00000A9F B448                    	mov	ah,48h			; allocate memory
 19391                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19392                                  	; 23/10/2022
 19393 00000AA1 BB0400                  	mov	bx,4
 19394 00000AA4 CD21                    	int	21h
 19395                                  
 19396                                  ;	if carry, fatal hanging error!!!!!
 19397                                  
 19398 00000AA6 48                      	dec	ax			; point to arena
 19399 00000AA7 8EC0                    	mov	es,ax
 19400                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19401 00000AA9 26C70601000800          	mov	word [es:1],8
 19402                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19403 00000AB0 26C70608005343          	mov	word [es:8],'SC'
 19404 00000AB7 40                      	inc	ax
 19405 00000AB8 8EC0                    	mov	es,ax			; get back to allocated memory
 19406                                  
 19407                                  ;-------------- install new int 19 vector
 19408                                  
 19409 00000ABA FA                      	cli				; no reboots at this time
 19410                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19411 00000ABB C70664002F00            	mov	word [19h*4],47
 19412 00000AC1 A36600                  	mov	[19h*4+2],ax
 19413                                  
 19414                                  ;-------------- move the code into proper place
 19415                                  
 19416                                  	;mov	cx,(EndVDHead-StartVDHead)
 19417 00000AC4 B93400                  	mov	cx,52
 19418 00000AC7 BE[390A]                	mov	si,StartVDHead
 19419 00000ACA 31FF                    	xor	di,di
 19420 00000ACC 0E                      	push	cs
 19421 00000ACD 1F                      	pop	ds
 19422 00000ACE FC                      	cld
 19423 00000ACF F3A4                    	rep	movsb
 19424 00000AD1 FB                      	sti				; BUGBUG is sti OK now?
 19425                                  
 19426                                  ;-------------- mov the HMA VDisk head into HMA
 19427                                  
 19428                                  	; 23/10/2022
 19429 00000AD2 57                      	push	di
 19430 00000AD3 06                      	push	es
 19431                                  
 19432                                  	;mov	ax,0FFFFh
 19433                                  	;mov	es,ax
 19434                                  	; 04/09/2023
 19435 00000AD4 49                      	dec	cx
 19436                                  	; cx = 0FFFFh
 19437 00000AD5 8EC1                    	mov	es,cx
 19438                                  
 19439 00000AD7 BF1000                  	mov	di,10h
 19440                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19441 00000ADA B92000                  	mov	cx,32
 19442 00000ADD BE[6D0A]                	mov	si,VDiskHMAHead
 19443 00000AE0 F3A4                    	rep	movsb			; ds already set to cs
 19444                                  
 19445 00000AE2 5F                      	pop	di
 19446 00000AE3 07                      	pop	es
 19447                                  
 19448 00000AE4 C3                      	retn
 19449                                  
 19450                                  ; ----------------------------------------------------------------------
 19451                                  ; procedure : ClrVDISKHeader
 19452                                  ;
 19453                                  ;		Clears the first 32 bytes at 1MB boundary
 19454                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19455                                  ;		left by previous DOS=HIGH session
 19456                                  ;
 19457                                  ; ----------------------------------------------------------------------
 19458                                  
 19459                                  struc desc
 19460 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19461 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19462 00000004 ??                       .hi_byte:	resb 	1		; address
 19463 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19464 00000006 ????                     .reserved:	resw	1		;
 19465                                   .size:
 19466                                  endstruc
 19467                                  
 19468                                  		; 23/10/2022
 19469                                  bmove:		;label byte
 19470                                  
 19471                                  dummy:		;times desc.size db 0	; desc	<>
 19472 00000AE5 00<rep 8h>              		times 8 db 0		 
 19473                                  gdt:		;times desc.size db 0	; desc	<>
 19474 00000AED 00<rep 8h>              		times 8 db 0
 19475 00000AF5 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19476 00000AF7 0000                    		dw	0
 19477 00000AF9 00                      		db	0
 19478 00000AFA 93                      		db	93h
 19479 00000AFB 0000                    		dw	0
 19480 00000AFD FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19481 00000AFF 0000                    		dw	0
 19482 00000B01 10                      		db	10h
 19483 00000B02 93                      		db	93h
 19484 00000B03 0000                    		dw	0
 19485                                  
 19486                                  rombios_code:	;times desc.size db 0	; desc	<>
 19487 00000B05 00<rep 8h>              		times 8 db 0
 19488                                  temp_stack:	;times desc.size db 0	; desc	<>
 19489 00000B0D 00<rep 8h>              		times 8 db 0
 19490                                  
 19491 00000B15 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19492                                  
 19493                                  
 19494                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19495                                  
 19496                                  ClrVDISKHeader:	; proc	near
 19497                                  
 19498                                  ;;-----------------------------------------------------------	      ;I070
 19499                                  ;; The following workaround get around a problem with the	      ;I070
 19500                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19501                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19502                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19503                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19504                                  ;; move crashes the system. We can do this because these	      ;I070
 19505                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19506                                  ;								      ;I070
 19507                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19508                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19509                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19510                                  ;                                      ; Check for Tortugas...	      ;I070
 19511                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19512                                  ;               je      short ClrVDISKno                              ;I070
 19513                                  ;                                      ; Check for mod 30-286	      ;I070
 19514                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19515                                  ;               jne     short ClrVDISKok			      ;I070
 19516                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19517                                  ;								      ;I070
 19518                                  ;ClrVDISKok:							      ;I070
 19519                                  ;-----------------------------------------------------------	      ;I070
 19520                                  
 19521                                  	; 12/12/2022
 19522                                  	; ds = cs
 19523                                  
 19524 00000B35 06                      	push	es
 19525 00000B36 8CC8                    	mov	ax,cs
 19526 00000B38 89C2                    	mov	dx,ax
 19527 00000B3A B10C                    	mov	cl,12
 19528 00000B3C D3EA                    	shr	dx,cl
 19529 00000B3E B104                    	mov	cl,4
 19530 00000B40 D3E0                    	shl	ax,cl
 19531 00000B42 05[150B]                	add	ax,ClrdVDISKHead
 19532 00000B45 80D200                  	adc	dl,0
 19533                                  
 19534                                  	;; 23/10/2022
 19535                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19536                                  	;mov	[cs:src_desc+2],ax
 19537                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19538                                  	;mov	[cs:src_desc+4],dl
 19539                                  	; 12/12/2022
 19540                                  	;mov	[src_desc+desc.lo_word],ax
 19541 00000B48 A3[F70A]                	mov	[src_desc+2],ax
 19542                                  	;mov	[src_desc+desc.hi_byte],dl
 19543 00000B4B 8816[F90A]              	mov	[src_desc+4],dl
 19544                                  
 19545 00000B4F B91000                  	mov	cx,16	; 16 words
 19546 00000B52 0E                      	push	cs
 19547 00000B53 07                      	pop	es
 19548 00000B54 BE[E50A]                	mov	si,bmove
 19549 00000B57 B487                    	mov	ah,87h
 19550 00000B59 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19551                                  			; CX = number of words to move 
 19552                                  			; ES:SI -> global descriptor table
 19553                                  			; Return: CF set on error, AH = status
 19554 00000B5B 07                      	pop	es
 19555 00000B5C C3                      	retn
 19556                                  
 19557                                  ; ----------------------------------------------------------------------
 19558                                  ;
 19559                                  ; procedure : SaveFreeHMAPtr
 19560                                  ;
 19561                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19562                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19563                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19564                                  ;		the offset.
 19565                                  ;
 19566                                  ; Inputs : ES:DI - pointer to free HMA
 19567                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19568                                  ;
 19569                                  ; ----------------------------------------------------------------------
 19570                                  
 19571                                  SaveFreeHMAPtr:
 19572                                  	; 04/09/2023
 19573 00000B5D 1E                      	push	ds
 19574 00000B5E B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19575 00000B61 8ED8                    	mov	ds,ax
 19576                                  	;
 19577 00000B63 8CC3                    	mov	bx,es
 19578 00000B65 B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 19579                                  	; 04/09/2023
 19580 00000B68 A2[0D00]                	mov	[inHMA],al ; 0FFh
 19581                                  	;
 19582 00000B6B 29D8                    	sub	ax,bx
 19583 00000B6D 83C70F                  	add	di,15		   ; para round
 19584 00000B70 83E7F0                  	and	di,0FFF0h
 19585 00000B73 B104                    	mov	cl,4
 19586 00000B75 D3E0                    	shl	ax,cl
 19587 00000B77 29C7                    	sub	di,ax
 19588                                  	;
 19589                                  	; 04/09/2023
 19590                                  	;push	ds
 19591                                  	;;mov	ax,Bios_Data ; 0070h
 19592                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19593                                  	; 21/10/2022
 19594                                  	; 04/09/2023
 19595                                  	;mov	ax,DOSBIODATASEG ; 0070h
 19596                                  	;mov	ds,ax
 19597 00000B79 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19598                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19599 00000B7D 1F                      	pop	ds
 19600 00000B7E C3                      	retn
 19601                                  
 19602                                  ; ----------------------------------------------------------------------
 19603                                  ;
 19604                                  ; procedure : IsVDiskInstalled
 19605                                  ;
 19606                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19607                                  ;		& INT 19 vector
 19608                                  ;
 19609                                  ; Inputs  : A20 flag should be ON
 19610                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19611                                  ;
 19612                                  ; ----------------------------------------------------------------------
 19613                                  
 19614                                  IsVDiskInstalled:
 19615 00000B7F 31C0                    	xor	ax,ax
 19616 00000B81 8ED8                    	mov	ds,ax
 19617 00000B83 8E1E4E00                	mov	ds,[19*4+2]
 19618                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19619                                  	; 23/10/2022
 19620 00000B87 BE1200                  	mov	si,18
 19621                                  	;mov	cx,VLEN1 ; 5
 19622 00000B8A B90500                  	mov	cx,5
 19623 00000B8D 0E                      	push	cs
 19624 00000B8E 07                      	pop	es
 19625 00000B8F BF[4B0A]                	mov	di,VDiskSig1
 19626 00000B92 F3A6                    	rep	cmpsb
 19627 00000B94 740F                    	je	short ivdins_retn
 19628 00000B96 B8FFFF                  	mov	ax,0FFFFh
 19629 00000B99 8ED8                    	mov	ds,ax
 19630                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19631 00000B9B BE1300                  	mov	si,13h
 19632 00000B9E BF[700A]                	mov	di,VDiskSig2
 19633                                  	;;mov	cx,VLEN2  ; 5
 19634                                  	;mov	cx,5
 19635                                  	; 04/09/2023
 19636 00000BA1 B105                    	mov	cl,5
 19637 00000BA3 F3A6                    	rep	cmpsb
 19638                                  ivdins_retn: 
 19639 00000BA5 C3                      	retn			; returns the Zero flag
 19640                                  
 19641                                  ; ----------------------------------------------------------------------
 19642                                  ;
 19643                                  ; procedure : CPMHack
 19644                                  ;
 19645                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19646                                  ;		for CPM compatibility
 19647                                  ;
 19648                                  ; ----------------------------------------------------------------------
 19649                                  
 19650                                  	; 11/12/2022
 19651                                  CPMHack:
 19652 00000BA6 1E                      	push	ds
 19653 00000BA7 B9FFFF                  	mov	cx,0FFFFh
 19654 00000BAA 8EC1                    	mov	es,cx		; ES = FFFF
 19655                                  	;xor	cx,cx
 19656                                  	; 11/12/2022
 19657 00000BAC 41                      	inc	cx  ; cx = 0
 19658 00000BAD 8ED9                    	mov	ds,cx		; DS = 0
 19659 00000BAF BEC000                  	mov	si,0C0h
 19660 00000BB2 BFD000                  	mov	di,0D0h
 19661                                  	;mov	cx,5
 19662 00000BB5 B105                    	mov	cl,5
 19663 00000BB7 FC                      	cld
 19664 00000BB8 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19665 00000BBA 1F                      	pop	ds
 19666 00000BBB C3                      	retn
 19667                                  
 19668                                  ; ----------------------------------------------------------------------
 19669                                  ;
 19670                                  ; procedure : off_to_para
 19671                                  ;
 19672                                  ; ----------------------------------------------------------------------
 19673                                  off_to_para:
 19674 00000BBC D1E8                    	shr	ax,1
 19675 00000BBE D1E8                    	shr	ax,1
 19676 00000BC0 D1E8                    	shr	ax,1
 19677 00000BC2 D1E8                    	shr	ax,1
 19678 00000BC4 C3                      	retn
 19679                                  
 19680                                  ; ----------------------------------------------------------------------
 19681                                  ;**	TempCDS - Create (Temporary?) CDS
 19682                                  ;
 19683                                  ;	ENTRY	?? BUGBUG
 19684                                  ;		(DS) = SysInitSeg
 19685                                  ;	EXIT	?? BUGBUG
 19686                                  ;	USES	?? BUGBUG
 19687                                  ; ----------------------------------------------------------------------
 19688                                  
 19689                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19690                                  TempCDS:
 19691 00000BC5 C43E[6B02]              	les	di,[DOSINFO]
 19692 00000BC9 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19693                                  	;mov	cl,[es:di+20h]
 19694 00000BCD 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19695                                  
 19696 00000BCF 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19697                                  	;mov	[es:di+21h],cl	
 19698                                  
 19699 00000BD3 88C8                    	mov	al,cl
 19700 00000BD5 B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19701                                  	;mov	ah,88
 19702 00000BD7 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19703 00000BD9 E8C804                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19704 00000BDC 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19705                                  
 19706                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19707                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19708                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19709                                  ;		   variable which has the top of free memory for
 19710                                  ;		   device driver loads, etc.
 19711                                  
 19712 00000BE0 29C6                    	sub	si,ax
 19713                                  
 19714                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19715                                  ;		that automatically updates alloclim every time we
 19716                                  ;		set up some new CDSs. Instead, I've added code
 19717                                  ;		which pre-allocates space for 26 CDSs. This
 19718                                  ;	        way we've got room for worst case CDSs before
 19719                                  ;		we place MagicDrv.sys
 19720                                  ;
 19721                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19722                                  
 19723                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19724                                  	; (SYSINIT:0C52h)
 19725 00000BE2 8936[A302]              	mov	[ALLOCLIM],si
 19726                                  
 19727 00000BE6 26897518                	mov	[es:di+SYSI_CDS+2],si
 19728                                  	;mov	[es:di+18h],si
 19729 00000BEA 89F0                    	mov	ax,si
 19730 00000BEC 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19731                                  	;mov	[word es:di+16h],0
 19732                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19733 00000BF2 26C535                  	lds	si,[es:di]
 19734 00000BF5 8EC0                    	mov	es,ax
 19735 00000BF7 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19736                                  
 19737                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19738                                  ;	info from the corresponding DPB.
 19739                                  ;
 19740                                  ;	(cx) = count of CDSs left to process
 19741                                  ;	(es:di) = address of next CDS
 19742                                  
 19743                                  fooset:
 19744                                  	; 23/10/2022
 19745 00000BF9 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19746 00000BFD AB                      	stosw				; setup the root as the curdir
 19747                                  
 19748                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19749                                  
 19750                                  ;	(ds:si) = address of DPB
 19751                                  ;		 (si) = -1 if no drive
 19752                                  
 19753 00000BFE 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19754 00000C02 AB                      	stosw
 19755 00000C03 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19756 00000C08 31C0                    	xor	ax,ax
 19757 00000C0A 51                      	push	cx
 19758                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19759 00000C0B B93F00                  	mov	cx,63	; 23/10/2022
 19760 00000C0E F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19761                                  
 19762                                  ;	should handle the system that does not have any floppies.
 19763                                  ;	in this case,we are going to pretended there are two dummy floppies
 19764                                  ;	in the system. still they have dpb and cds,but we are going to
 19765                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19766                                  ;	"invalid drive specification" message when the user try to
 19767                                  ;	access them.
 19768                                  ;
 19769                                  ;	(ax) = 0
 19770                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19771                                  ;	(ds:si) = Next DPB (-1 if none)
 19772                                  
 19773 00000C10 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19774 00000C13 7413                    	je	short fooset_zero	; don't have any physical drive.
 19775                                  
 19776                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19777                                  ;	if we are faking floppy drives then see if this cds being initialised
 19778                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19779                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19780                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19781                                  ;	for dpb offsets look at inc\dpb.inc.
 19782                                  
 19783                                  	; 04/09/2023
 19784 00000C15 41                      	inc	cx  ; cx = 1
 19785                                  
 19786 00000C16 2E380E[8902]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 04/09/2023
 19787                                  	;cmp	byte [cs:fake_floppy_drv],1
 19788 00000C1B 7512                    	jne	short normcds 		; machine has floppy drives
 19789                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19790                                  	;cmp	byte [si],1
 19791 00000C1D 380C                    	cmp	[si],cl ; 1 ; 04/09/2023
 19792 00000C1F 770E                    	ja	short normcds
 19793 00000C21 B103                    	mov	cl,3			; the next dbp pointer
 19794                                  					; AX should be zero here
 19795 00000C23 F3AB                    	rep	stosw
 19796 00000C25 59                      	pop	cx
 19797 00000C26 EB17                    	jmp	short get_next_dpb
 19798                                  
 19799                                  ;	(ax) = 0
 19800                                  
 19801                                  fooset_zero:
 19802 00000C28 B103                    	mov	cl,3
 19803 00000C2A F3AB                    	rep	stosw
 19804 00000C2C 59                      	pop	cx
 19805 00000C2D EB13                    	jmp	short fincds
 19806                                  
 19807                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19808                                  ;
 19809                                  ;	(ax) = 0
 19810                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19811                                  ;	(ds:si) = Next DPB (-1 if none)
 19812                                  
 19813                                  normcds:
 19814 00000C2F 59                      	pop	cx
 19815                                  
 19816                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19817                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19818                                  ;	this media is a non-fat based one.
 19819                                  
 19820                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19821                                  	; 23/10/2022
 19822                                  	;cmp	byte [si+8],0
 19823                                  	; 04/09/2023 (ax=0)
 19824 00000C30 384408                  	cmp	[si+8],al ; 0
 19825 00000C33 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19826 00000C35 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19827                                  	;mov	ax,4000h
 19828                                  setnormcds:
 19829 00000C38 AB                      	stosw				; curdir_flags
 19830 00000C39 89F0                    	mov	ax,si
 19831 00000C3B AB                      	stosw				; curdir_devptr
 19832 00000C3C 8CD8                    	mov	ax,ds
 19833 00000C3E AB                      	stosw
 19834                                  
 19835                                  get_next_dpb:				; entry point for fake_fooset_zero
 19836                                  	; 23/10/2022
 19837 00000C3F C57419                  	lds	si,[si+19h]
 19838                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19839                                  fincds:
 19840 00000C42 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19841 00000C45 AB                      	stosw				; curdir_id
 19842 00000C46 AB                      	stosw				; curdir_id
 19843 00000C47 AB                      	stosw				; curdir_user_word
 19844 00000C48 B80200                  	mov	ax,2
 19845 00000C4B AB                      	stosw				; curdir_end
 19846 00000C4C B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19847 00000C4E AA                      	stosb
 19848 00000C4F AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19849 00000C50 AB                      	stosw
 19850 00000C51 AB                      	stosw
 19851                                  
 19852 00000C52 E2A5                    	loop	fooset
 19853                                  	
 19854 00000C54 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19855                                  	
 19856 00000C5A C3                      	retn
 19857                                  
 19858                                  ; ----------------------------------------------------------------------
 19859                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19860                                  ;
 19861                                  ;	entry:
 19862                                  ;	   al == ASCII CAPS drive letter
 19863                                  ;
 19864                                  ;	exit:
 19865                                  ;	   ds:si -> DPB, or si = -1 if not found
 19866                                  ; ----------------------------------------------------------------------
 19867                                  
 19868                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19869                                  ;
 19870                                  ;get_dpb_for_drive_al:
 19871                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19872                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19873                                  ;	lds	si,[si]
 19874                                  ;	sub	al,'A'
 19875                                  ;
 19876                                  ;get_dpb_for_drive_1:
 19877                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19878                                  ;	cmp	al,[si]
 19879                                  ;	je	short got_dpb_for_drive	;  done if so
 19880                                  ;
 19881                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19882                                  ;	cmp	si,-1
 19883                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19884                                  ;
 19885                                  ;got_dpb_for_drive:
 19886                                  ;	retn
 19887                                  
 19888                                  ;=======================================================================
 19889                                  
 19890                                  ;**	EndFile - Build DOS structures
 19891                                  ;
 19892                                  ; This procedure is called after the config.sys has been processed and
 19893                                  ; installable device drivers have been loaded (but before "install="
 19894                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19895                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19896                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19897                                  ; above these structures is deallocated back to DOS.
 19898                                  ;
 19899                                  ;	ENTRY	?? BUGBUG
 19900                                  ;	EXIT	?? BUGBUG
 19901                                  ;	USES	?? BUGBUG
 19902                                  
 19903                                  ;=======================================================================
 19904                                  ; allocate files
 19905                                  ; ----------------------------------------------------------------------
 19906                                  
 19907                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19908                                  	; (SYSINIT:0CCDh)
 19909                                  
 19910                                  endfile:
 19911                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19912                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19913                                  ; to confbot.
 19914                                  
 19915                                  ;	if this procedure has been called to take care of install= command,
 19916                                  ;	   then we have to save es,si registers.
 19917                                  
 19918                                  	; 11/12/2022
 19919                                  	; ds = cs
 19920                                  
 19921                                  	; 23/10/2022
 19922                                  	; 31/03/2019
 19923 00000C5B 1E                      	push	ds
 19924                                  
 19925                                  	;;mov	ax,Bios_Data ; 0070h
 19926                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19927                                  	; 21/10/2022
 19928 00000C5C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19929 00000C5F 8ED8                    	mov	ds,ax
 19930                                  
 19931                                  	;cmp	word [052Fh],0
 19932 00000C61 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19933 00000C66 7505                    	jne	short multrk_flag_done
 19934                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19935                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19936                                  	; 12/12/2022
 19937 00000C68 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19938                                  multrk_flag_done:
 19939                                  	; 23/10/2022
 19940                                  	; 31/03/2019
 19941 00000C6D 1F                      	pop	ds
 19942                                  
 19943                                  	; 11/12/2022
 19944                                  	; ds = cs
 19945 00000C6E A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19946 00000C71 A3[A302]                	mov	[ALLOCLIM],ax
 19947                                  	; 23/10/2022
 19948                                  	;mov	ax, [cs:top_of_cdss]
 19949                                  	;mov	[cs:ALLOCLIM], ax 
 19950                                  
 19951                                  	; 11/12/2022
 19952                                  	; ds = cs
 19953                                  	;push	cs
 19954                                  	;pop	ds
 19955                                  	
 19956                                  	;mov	ax,[CONFBOT]
 19957                                  	;mov	[ALLOCLIM],ax
 19958                                  
 19959 00000C74 E8A023                  	call	round
 19960                                  	; 11/12/2022
 19961                                  	; ds = cs
 19962 00000C77 A0[9D02]                	mov	al,[FILES]
 19963                                  	; 23/10/2022
 19964                                  	;mov	al,[cs:FILES]
 19965 00000C7A 2C05                    	sub	al,5
 19966 00000C7C 764B                    	jbe	short dofcbs
 19967                                  
 19968 00000C7E 50                      	push	ax
 19969                                  	;mov	al,devmark_files ; 'F'
 19970 00000C7F B046                    	mov	al,'F'
 19971 00000C81 E86D07                  	call	setdevmark		; set devmark for sfts (files)
 19972 00000C84 58                      	pop	ax
 19973 00000C85 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19974                                  					;  it does sign extend.
 19975                                  	; 11/12/2022
 19976                                  	; ds = cs
 19977 00000C87 8B1E[DE03]              	mov	bx,[memlo]
 19978 00000C8B 8B16[E003]              	mov	dx,[memhi]
 19979 00000C8F C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19980                                  	; 23/10/2022
 19981                                  	;mov	bx,[cs:memlo]
 19982                                  	;mov	dx,[cs:memhi]
 19983                                  	;lds	di,[cs:DOSINFO]		
 19984                                  
 19985                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19986 00000C93 C57D04                  	lds	di,[di+4]
 19987                                  
 19988                                  	;mov	[di+SF.SFLink],bx
 19989 00000C96 891D                    	mov	[di],bx
 19990 00000C98 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19991                                  
 19992 00000C9B 0E                      	push	cs
 19993 00000C9C 1F                      	pop	ds
 19994                                  
 19995                                  	; 11/12/2022
 19996                                  	; ds = cs
 19997 00000C9D C43E[DE03]              	les	di,[memlo]		;point to new sft
 19998                                  	; 23/10/2022
 19999                                  	;les	di,[cs:memlo]
 20000                                  
 20001                                  	;mov	word [es:di+SF.SFLink],-1
 20002 00000CA1 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 20003                                  	;mov	[es:di+SF.SFCount],ax
 20004 00000CA6 26894504                	mov	[es:di+4],ax
 20005                                  	;mov	bl,SF_ENTRY.size ; 59
 20006 00000CAA B33B                    	mov	bl,59
 20007 00000CAC F6E3                    	mul	bl			;ax = number of bytes to clear
 20008 00000CAE 89C1                    	mov	cx,ax
 20009                                  	; 11/12/2022
 20010                                  	; ds = cs
 20011 00000CB0 0106[DE03]              	add	[memlo],ax		;allocate memory
 20012                                  	; 23/10/2022
 20013                                  	;add	[cs:memlo],ax
 20014 00000CB4 B80600                  	mov	ax,6
 20015                                  	; 11/12/2022
 20016 00000CB7 0106[DE03]              	add	[memlo],ax		;remember the header too
 20017                                  	;add	[cs:memlo],ax
 20018                                  	; 11/12/2022
 20019 00000CBB 800E[1014]02            	or	byte [setdevmarkflag],for_devmark ; 2
 20020                                  	; 23/10/2022
 20021                                  	;or	byte [cs:setdevmarkflag],2
 20022 00000CC0 E85423                  	call	round			; check for mem error before the stosb
 20023 00000CC3 01C7                    	add	di,ax
 20024 00000CC5 31C0                    	xor	ax,ax
 20025 00000CC7 F3AA                    	rep	stosb			;clean out the stuff
 20026                                  
 20027                                  ; allocate fcbs
 20028                                  ; ----------------------------------------------------------------------
 20029                                  
 20030                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20031                                  	; (SYSINIT:0D48h)
 20032                                  dofcbs:
 20033                                  	; 11/12/2022
 20034                                  	; ds = cs
 20035                                  	;push	cs
 20036                                  	;pop	ds
 20037 00000CC9 E84B23                  	call	round
 20038                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 20039 00000CCC B058                    	mov	al,'X'
 20040 00000CCE E82007                  	call	setdevmark
 20041                                  	; 11/12/2022
 20042                                  	; ds = cs
 20043 00000CD1 A0[9E02]                	mov	al,[FCBS]
 20044                                  	;mov	al,[cs:FCBS]
 20045 00000CD4 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20046                                  					;  it does sign extend.
 20047                                  	; 11/12/2022
 20048 00000CD6 8B1E[DE03]              	mov	bx,[memlo]
 20049 00000CDA 8B16[E003]              	mov	dx,[memhi]
 20050 00000CDE C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20051                                  	; 23/10/2022
 20052                                  	;mov	bx,[cs:memlo]
 20053                                  	;mov	dx,[cs:memhi]
 20054                                  	;lds	di,[cs:DOSINFO]
 20055                                  
 20056                                  	;mov	[di+SYSI_FCB],bx
 20057                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 20058                                  	; 23/10/2022
 20059 00000CE2 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 20060 00000CE5 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 20061                                  
 20062 00000CE8 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 20063 00000CED 30FF                    	xor	bh,bh
 20064                                  	;mov	[di+SYSI_KEEP],bx
 20065 00000CEF 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 20066                                  
 20067 00000CF2 0E                      	push	cs
 20068 00000CF3 1F                      	pop	ds
 20069                                  	
 20070 00000CF4 C43E[DE03]              	les	di,[memlo]		;point to new table
 20071                                  	;mov	word [es:di+SF.SFLink],-1
 20072 00000CF8 26C705FFFF              	mov	word [es:di],-1
 20073                                  	;mov	[es:di+SF.SFCount],ax
 20074                                  	; 02/11/2022
 20075 00000CFD 26894504                	mov	[es:di+4],ax
 20076 00000D01 B339                    	mov	bl,SF_ENTRY.size ; 59
 20077 00000D03 89C1                    	mov	cx,ax
 20078 00000D05 F6E3                    	mul	bl			;ax = number of bytes to clear
 20079 00000D07 0106[DE03]              	add	[memlo],ax		;allocate memory
 20080                                  	;mov	ax,6
 20081 00000D0B B80600                  	mov	ax,SF.size-2 ; 6
 20082 00000D0E 0106[DE03]              	add	[memlo],ax		;remember the header too
 20083                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20084 00000D12 800E[1014]02            	or	byte [setdevmarkflag],2
 20085 00000D17 E8FD22                  	call	round			; check for mem error before the stosb
 20086 00000D1A 01C7                    	add	di,ax			;skip over header
 20087 00000D1C B041                    	mov	al,'A'
 20088                                  fillloop:
 20089 00000D1E 51                      	push	cx			; save count
 20090 00000D1F B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 20091 00000D22 FC                      	cld
 20092 00000D23 F3AA                    	rep	stosb			; filled
 20093                                  
 20094                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 20095                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 20096                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 20097                                  
 20098                                  	; 18/12/2022
 20099                                  	;cx = 0
 20100 00000D25 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 20101 00000D29 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 20102 00000D2D 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 20103                                  	
 20104                                  	; 23/10/2022	
 20105                                  	;mov     word [es:di-3Bh],0
 20106                                  	;mov     word [es:di-26h],0
 20107                                  	;mov     word [es:di-24h],0
 20108                                  
 20109 00000D31 59                      	pop	cx
 20110 00000D32 E2EA                    	loop	fillloop
 20111                                  
 20112                                  ; allocate buffers
 20113                                  ; ----------------------------------------------------------------------
 20114                                  
 20115                                  ; search through the list of media supported and allocate 3 buffers if the
 20116                                  ; capacity of the drive is > 360kb
 20117                                  
 20118                                  	; 18/12/2022
 20119                                  	; cx = 0
 20120 00000D34 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 20121 00000D39 7403                    	je	short dodefaultbuff
 20122 00000D3B E98000                  	jmp	dobuff			; the user entered the buffers=.
 20123                                  
 20124                                  dodefaultbuff:
 20125                                  	; 18/12/2022
 20126 00000D3E 890E[9902]              	mov	[h_buffers],cx ; 0
 20127 00000D42 41                      	inc	cx
 20128 00000D43 41                      	inc	cx
 20129 00000D44 890E[9702]              	mov	[buffers],cx ; 2
 20130                                  	
 20131                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 20132                                  	;mov	word [buffers],2	; default to 2 buffers
 20133                                  
 20134                                  	; 23/10/2022
 20135                                  	; 04/09/2023
 20136                                  	;push	ax
 20137                                  	;push	ds ; 26/03/2019
 20138                                  
 20139                                  	; 04/09/2023
 20140                                  	; ds = cs
 20141 00000D48 C42E[6B02]              	les	bp,[DOSINFO]		; search through the dpb's
 20142                                  	;les	bp,[cs:DOSINFO]
 20143                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 20144                                  	; 11/12/2022
 20145 00000D4C 26C46E00                	les	bp,[es:bp]
 20146                                  	; 23/10/2022
 20147                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 20148                                  
 20149                                  	; 04/09/2023
 20150                                  	; ds = cs
 20151                                  	;push	cs
 20152                                  	;pop	ds
 20153                                  ;SYSINIT:0DE2h:
 20154                                  nextdpb:				; test if the drive supports removeable media
 20155                                  	;mov	bl,[es:bp+DPB.drive]
 20156                                  	; 11/12/2022
 20157 00000D50 268A5E00                	mov	bl,[es:bp]
 20158                                  	; 23/10/2022
 20159                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20160                                  
 20161                                  	;inc	bl
 20162                                  	; 18/12/2022
 20163 00000D54 43                      	inc	bx
 20164                                  
 20165                                  	;mov	ax,(IOCTL<<8)|8
 20166 00000D55 B80844                  	mov	ax,4408h
 20167 00000D58 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20168                                  
 20169                                  ; ignore fixed disks
 20170                                  
 20171 00000D5A 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20172 00000D5C 7534                    	jnz	short nosetbuf
 20173                                  
 20174                                  ; get parameters of drive
 20175                                  
 20176 00000D5E 31DB                    	xor	bx,bx
 20177                                  	;;mov	bl,[es:bp+DPB.drive]
 20178                                  	; 11/12/2022
 20179 00000D60 268A5E00                	mov	bl,[es:bp]
 20180                                  	; 23/10/2022
 20181                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20182                                  	
 20183                                  	;inc	bl
 20184                                  	; 18/12/2022
 20185 00000D64 43                      	inc	bx
 20186                                  
 20187 00000D65 BA[7434]                	mov	dx,deviceparameters
 20188                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20189 00000D68 B80D44                  	mov	ax,440Dh
 20190                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20191 00000D6B B96008                  	mov	cx,860h
 20192 00000D6E CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20193 00000D70 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20194                                  					; generic ioctl
 20195                                  ; determine capacity of drive
 20196                                  ; media capacity = #sectors * bytes/sector
 20197                                  
 20198                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20199                                  	; 23/10/2022
 20200 00000D72 8B1E[8334]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20201                                  	
 20202                                  ; to keep the magnitude of the media capacity within a word,
 20203                                  ; scale the sector size
 20204                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20205                                  
 20206                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20207                                  	; 23/10/2022
 20208 00000D76 A1[7B34]                	mov	ax, [deviceparameters+7] ; bytes per sector
 20209 00000D79 31D2                    	xor	dx,dx
 20210 00000D7B B90002                  	mov	cx,512
 20211 00000D7E F7F1                    	div	cx			; scale sector size in factor of
 20212                                  					; 512 bytes
 20213 00000D80 F7E3                    	mul	bx			; ax = #sectors * size factor
 20214 00000D82 09D2                    	or	dx,dx			; just in case of large floppies
 20215 00000D84 7505                    	jnz	short setbuf
 20216 00000D86 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20217 00000D89 7607                    	jbe	short nosetbuf
 20218                                  setbuf:
 20219                                  	; 18/12/2022
 20220                                  	; word [buffers] = 2
 20221 00000D8B C606[9702]03            	mov	byte [buffers],3
 20222                                  	;mov	word [buffers],3
 20223 00000D90 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20224                                  					; for default buffer count
 20225                                  nosetbuf:
 20226                                  	; 23/10/2022
 20227                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20228 00000D92 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20229 00000D97 7406                    	je	short chk_memsize_for_buffers
 20230                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20231 00000D99 26C46E19                	les	bp,[es:bp+19h]
 20232 00000D9D EBB1                    	jmp	short nextdpb
 20233                                  
 20234                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20235                                  ;memory size too.
 20236                                  ; default buffers = 2
 20237                                  ; if diskette media > 360 kb,then default buffers = 3
 20238                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20239                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20240                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20241                                  
 20242                                  chk_memsize_for_buffers:
 20243                                  	; 18/12/2022
 20244                                  	;cmp	word [MEMORY_SIZE],2000h
 20245                                  	;jbe	short bufset
 20246                                  	;mov	word [buffers],5
 20247                                  	;cmp	word [MEMORY_SIZE],4000h
 20248                                  	;jbe	short bufset
 20249                                  	;mov	word [buffers],10
 20250                                  	;cmp	word [MEMORY_SIZE],8000h
 20251                                  	;jbe	short bufset
 20252                                  	;mov	word [buffers],15
 20253                                  
 20254                                  	; 18/12/2022
 20255                                  	; word [buffers] = 3 or 2
 20256 00000D9F BB[9702]                	mov	bx,buffers
 20257 00000DA2 A1[9202]                	mov	ax,[MEMORY_SIZE]
 20258 00000DA5 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20259                                  
 20260 00000DA6 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20261 00000DA9 7213                    	jb	short bufset
 20262 00000DAB C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20263 00000DAE 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20264 00000DB1 730B                    	jnb	short bufset
 20265 00000DB3 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20266 00000DB6 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20267 00000DB9 7303                    	jnb	short bufset
 20268 00000DBB C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20269                                  bufset:
 20270                                  	; 23/10/2022
 20271                                  	; 26/03/2019
 20272                                  	; 04/09/2023
 20273                                  	;pop	ds
 20274                                  	;pop	ax
 20275                                  
 20276                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20277                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20278                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20279                                  
 20280                                  ; 26/03/2019
 20281                                  
 20282                                  ;*******************************************************************************
 20283                                  ;									       *
 20284                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20285                                  ; input :								       *
 20286                                  ;    memhi:memlo - start of the next available memory			       *
 20287                                  ;    buffers = number of buffers					       *
 20288                                  ;    h_buffers = number of secondary buffers				       *
 20289                                  ;									       *
 20290                                  ; output:								       *
 20291                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20292                                  ;	buffinfo set.							       *
 20293                                  ;	bufferqueue set.						       *
 20294                                  ;									       *
 20295                                  ; subroutines to be called:						       *
 20296                                  ;									       *
 20297                                  ;*******************************************************************************
 20298                                  
 20299                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20300                                  	; (SYSINIT:0E60h)
 20301                                  dobuff:
 20302                                  	; ds = cs ; 31/03/2019
 20303                                  	; 23/10/2022
 20304                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20305                                  	; 04/09/2023
 20306 00000DBE A1[9702]                	mov	ax,[buffers] ; 31/03/2019
 20307 00000DC1 8B0E[9902]              	mov	cx,[h_buffers] ; *
 20308 00000DC5 C51E[6B02]              	lds	bx,[DOSINFO]
 20309                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 20310                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20311 00000DC9 89473F                  	mov	[bx+3Fh],ax
 20312                                  	; 04/09/2023
 20313                                  	;mov	ax,[cs:h_buffers]
 20314                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20315                                  	;mov	[bx+41h],ax
 20316                                  	; 04/09/2023
 20317 00000DCC 894F41                  	mov	[bx+41h],cx ; *
 20318 00000DCF C55F12                  	lds	bx,[bx+12h]
 20319                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20320 00000DD2 E84222                  	call	round		; get [memhi]:[memlo]
 20321                                  	;mov	al,devmark_buf	; ='B'
 20322 00000DD5 B042                    	mov	al,'B'	
 20323 00000DD7 E81706                  	call	setdevmark
 20324                                  
 20325                                  ;allocate buffers
 20326                                  
 20327 00000DDA 1E                      	push	ds			; save buffer info. ptr.
 20328 00000DDB 53                      	push	bx
 20329                                  
 20330 00000DDC E85203                  	call	set_buffer
 20331                                  
 20332 00000DDF 5B                      	pop	bx
 20333 00000DE0 1F                      	pop	ds
 20334                                  
 20335                                  ;now set the secondary buffer if specified.
 20336                                  
 20337 00000DE1 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20338 00000DE7 742D                    	je	short xif16
 20339 00000DE9 E82B22                  	call	round
 20340                                  	; 23/10/2022
 20341 00000DEC 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 20342                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20343 00000DF1 894F06                  	mov	[bx+6],cx
 20344 00000DF4 2E8B0E[E003]            	mov	cx,[cs:memhi]
 20345                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20346 00000DF9 894F08                  	mov	[bx+8],cx
 20347 00000DFC 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20348                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20349 00000E01 894F0A                  	mov	[bx+10],cx
 20350 00000E04 B80002                  	mov	ax,512			; 512 byte
 20351 00000E07 F7E1                    	mul	cx
 20352 00000E09 2EA3[DE03]              	mov	[cs:memlo],ax
 20353                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20354 00000E0D 2E800E[1014]02          	or	byte [cs:setdevmarkflag],2
 20355 00000E13 E80122                  	call	round
 20356                                  xif16:
 20357                                  
 20358                                  ; ----------------------------------------------------------------------
 20359                                  ; allocate cdss
 20360                                  ; ----------------------------------------------------------------------
 20361                                  
 20362                                  buf1:
 20363 00000E16 E8FE21                  	call	round
 20364                                  
 20365 00000E19 50                      	push	ax
 20366                                  	; 23/10/2022
 20367                                  	;mov	ax,devmark_cds		;='L'
 20368 00000E1A B84C00                  	mov	ax, 'L'
 20369 00000E1D E8D105                  	call	setdevmark
 20370 00000E20 58                      	pop	ax
 20371                                  
 20372 00000E21 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20373                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20374 00000E26 268A4D20                	mov	cl,[es:di+20h]
 20375 00000E2A 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20376 00000E2F 7305                    	jae	short gotncds 		; user setting must be at least numio
 20377 00000E31 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20378                                  gotncds:
 20379 00000E36 30ED                    	xor	ch,ch
 20380                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20381 00000E38 26884D21                	mov	[es:di+21h],cl
 20382 00000E3C 2EA1[E003]              	mov	ax,[cs:memhi]
 20383                                  	;mov	[es:di+SYSI_CDS+2],ax
 20384 00000E40 26894518                	mov	[es:di+18h],ax
 20385 00000E44 2EA1[DE03]              	mov	ax,[cs:memlo]
 20386                                  	;mov	[es:di+SYSI_CDS],ax
 20387 00000E48 26894516                	mov	[es:di+16h],ax
 20388 00000E4C 88C8                    	mov	al,cl
 20389                                  	;mov	ah,curdirlen ; curdir_list.size
 20390 00000E4E B458                    	mov	ah,88
 20391 00000E50 F6E4                    	mul	ah
 20392 00000E52 E84F02                  	call	ParaRound
 20393 00000E55 2E0106[E003]            	add	[cs:memhi],ax
 20394                                  
 20395                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20396 00000E5A 2E800E[1014]02          	or	byte [cs:setdevmarkflag],2
 20397 00000E60 E8B421                  	call	round			; check for mem error before initializing
 20398                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20399 00000E63 26C535                  	lds	si,[es:di]
 20400                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20401 00000E66 26C47D16                	les	di,[es:di+16h]
 20402 00000E6A E88CFD                  	call	fooset
 20403                                  
 20404                                  ; ----------------------------------------------------------------------
 20405                                  ; allocate space for internal stack
 20406                                  ; ----------------------------------------------------------------------
 20407                                  
 20408 00000E6D 0E                      	push	cs
 20409 00000E6E 1F                      	pop	ds
 20410                                  
 20411                                  ;	if the user did not entered stacks= command, as a default, do not install
 20412                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20413                                  ;	otherwise,install it to the user specified value or to the default
 20414                                  ;	value of 9,128 for other systems.
 20415                                  
 20416 00000E6F 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20417 00000E74 740E                    	je	short doinstallstack	; then install as specified by the user
 20418 00000E76 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20419 00000E7B 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20420 00000E7D 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20421 00000E82 736D                    	jae	short skipstack
 20422                                  doinstallstack:
 20423 00000E84 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20424 00000E87 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20425 00000E89 7466                    	jz	short skipstack		; don't install stack.
 20426                                  
 20427                                  ;	dynamic relocation of stack code.
 20428                                  
 20429 00000E8B E88921                  	call	round			;[memhi] = seg. for stack code
 20430                                  					;[memlo] = 0
 20431                                  
 20432                                  ; set devmark block into memory for mem command
 20433                                  ; devmark_id = 's' for stack
 20434                                  
 20435                                  	;mov	al,devmark_stk	;='S'
 20436                                  	; 23/10/2022
 20437 00000E8E B053                    	mov	al,'S'
 20438 00000E90 E85E05                  	call	setdevmark
 20439                                  
 20440 00000E93 A1[E003]                	mov	ax,[memhi]
 20441 00000E96 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 20442                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20443                                  	; 11/12/2022
 20444                                  	; ds = cs
 20445                                  	;push	cs
 20446                                  	;pop	ds
 20447 00000E98 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 20448 00000E9A 31FF                    	xor	di,di
 20449 00000E9C B9[6702]                	mov	cx,endstackcode
 20450 00000E9F 890E[DE03]              	mov	[memlo],cx
 20451 00000EA3 E87121                  	call	round		;have enough space for relocation?
 20452 00000EA6 F3A4                    	rep	movsb
 20453                                  
 20454 00000EA8 1E                      	push	ds		; stick the location of the NextStack entry
 20455                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20456                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20457                                  	; 21/10/2022
 20458 00000EA9 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20459 00000EAC 8ED8                    	mov	ds,ax
 20460 00000EAE C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20461 00000EB4 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20462                                  
 20463 00000EB8 2EA1[DE03]              	mov	ax,[cs:memlo]
 20464 00000EBC 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20465 00000EC0 A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20466 00000EC3 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20467 00000EC7 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20468 00000ECB A3[C608]                	mov	[IT_StackLoc+2],ax
 20469                                  
 20470                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20471                                  
 20472                                  	;mov	ax,entrysize ; mov ax,8
 20473                                  	; 23/10/2022
 20474 00000ECE B80800                  	mov	ax,8
 20475 00000ED1 2E0306[8C02]            	add	ax,[cs:stack_size]
 20476 00000ED6 2EF726[8A02]            	mul	word [cs:stack_count]
 20477                                  
 20478 00000EDB A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20479                                  
 20480 00000EDE 1F                      	pop	ds		; no more need to access Instance Table
 20481                                  
 20482 00000EDF E8C201                  	call	ParaRound	; convert size to paragraphs
 20483                                  	
 20484                                  	; 11/12/2022
 20485                                  	; ds = cs
 20486                                  	;add	[cs:memhi],ax
 20487 00000EE2 0106[E003]              	add	[memhi],ax
 20488                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20489                                  	;or	byte [cs:setdevmarkflag],2
 20490 00000EE6 800E[1014]02            	or	byte [setdevmarkflag],2
 20491                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20492                                  				;to set the devmark_size for stack by round routine.
 20493 00000EEB E82921                  	call	round		; check for memory error before
 20494                                  				; continuing
 20495 00000EEE E8E702                  	call	stackinit	; initialize hardware stack. 
 20496                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20497                                  skipstack:
 20498                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20499                                  	; (SYSINIT:0F99h)
 20500                                  
 20501                                  	; 11/12/2022
 20502                                  	; ds = cs
 20503                                  	;push	cs
 20504                                  	;pop	ds
 20505                                  
 20506 00000EF1 A0[9D02]                	mov	al,[FILES]
 20507 00000EF4 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20508                                  				;  it does sign extend.
 20509 00000EF6 89C1                    	mov	cx,ax
 20510 00000EF8 31DB                    	xor	bx,bx		;close standard input
 20511 00000EFA B43E                    	mov	ah,3Eh ; CLOSE
 20512 00000EFC CD21                    	int	21h
 20513 00000EFE BB0200                  	mov	bx,2
 20514                                  rcclloop:			;close everybody but standard output
 20515 00000F01 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20516 00000F03 CD21                    	int	21h		; in case we can't get new one open.
 20517 00000F05 43                      	inc	bx
 20518 00000F06 E2F9                    	loop	rcclloop
 20519                                  
 20520 00000F08 BA[FE32]                	mov	dx,condev
 20521 00000F0B B002                    	mov	al,2
 20522 00000F0D B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20523 00000F0F F9                      	stc			; set for possible int 24
 20524 00000F10 CD21                    	int	21h
 20525 00000F12 7305                    	jnc	short goaux
 20526 00000F14 E84A23                  	call	badfil
 20527 00000F17 EB13                    	jmp	short goaux2
 20528                                  goaux:	
 20529 00000F19 50                      	push	ax
 20530 00000F1A BB0100                  	mov	bx,1		;close standard output
 20531 00000F1D B43E                    	mov	ah,3Eh ; CLOSE
 20532 00000F1F CD21                    	int	21h
 20533 00000F21 58                      	pop	ax
 20534                                  
 20535 00000F22 89C3                    	mov	bx,ax		;new device handle
 20536 00000F24 B445                    	mov	ah,45h ; XDUP
 20537 00000F26 CD21                    	int	21h		;dup to 1,stdout
 20538 00000F28 B445                    	mov	ah,45h ; XDUP
 20539 00000F2A CD21                    	int	21h		;dup to 2,stderr
 20540                                  goaux2: 
 20541 00000F2C BA[0233]                	mov	dx,auxdev
 20542 00000F2F B002                    	mov	al,2		;read/write access
 20543 00000F31 E85E23                  	call	open_dev
 20544                                  
 20545 00000F34 BA[0633]                	mov	dx,prndev
 20546 00000F37 B001                    	mov	al,1		;write only
 20547 00000F39 E85623                  	call	open_dev
 20548                                  
 20549                                  ;global rearm command for shared interrupt devices attached in the system;
 20550                                  ;shared interrupt attachment has some problem when it issues interrupt
 20551                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20552                                  ;no further interrupts on that level will be presented until a global rearm
 20553                                  ;is issued. by the request of the system architecture group, msbio will
 20554                                  ;issue a global rearm after every device driver is loaded.
 20555                                  ;to issue a global rearm:	;for pc1,xt,palace
 20556                                  ;
 20557                                  ;			  out 02f2h,xx  ; interrupt level 2
 20558                                  ;			  out 02f3h,xx  ; interrupt level 3
 20559                                  ;			  out 02f4h,xx  ; interrupt level 4
 20560                                  ;			  out 02f5h,xx  ; interrupt level 5
 20561                                  ;			  out 02f6h,xx  ; interrupt level 6
 20562                                  ;			  out 02f7h,xx  ; interrupt level 7
 20563                                  ;
 20564                                  ;	for pc at,in addition to the above commands,
 20565                                  ;	need to handle the secondary interrupt handler
 20566                                  ;
 20567                                  ;			  out 06f2h,xx  ; interrupt level 10
 20568                                  ;			  out 06f3h,xx  ; interrupt level 11
 20569                                  ;			  out 06f4h,xx  ; interrupt level 12
 20570                                  ;			  out 06f6h,xx  ; interrupt level 14
 20571                                  ;			  out 06f7h,xx  ; interrupt level 15
 20572                                  ;
 20573                                  ;	for round-up machine
 20574                                  ;
 20575                                  ;			  none.
 20576                                  
 20577                                  ; where xx stands for any value.
 20578                                  ;
 20579                                  ; for your information,after naples level machine,the system service bios
 20580                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20581                                  
 20582                                  	; 24/10/2022
 20583                                  
 20584 00000F3C 50                      	push	ax
 20585 00000F3D 53                      	push	bx
 20586 00000F3E 52                      	push	dx
 20587 00000F3F 06                      	push	es
 20588                                  
 20589 00000F40 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20590 00000F42 BAF202                  	mov	dx,2F2h 		;get starting address
 20591 00000F45 EE                      	out	dx,al			; out 02f2h,0ffh
 20592 00000F46 42                      	inc	dx
 20593 00000F47 EE                      	out	dx,al			; out 02f3h,0ffh
 20594 00000F48 42                      	inc	dx
 20595 00000F49 EE                      	out	dx,al			; out 02f4h,0ffh
 20596 00000F4A 42                      	inc	dx
 20597 00000F4B EE                      	out	dx,al			; out 02f5h,0ffh
 20598 00000F4C 42                      	inc	dx
 20599 00000F4D EE                      	out	dx,al			; out 02f6h,0ffh
 20600 00000F4E 42                      	inc	dx
 20601 00000F4F EE                      	out	dx,al			; out 02f7h,0ffh
 20602                                  
 20603                                  ;sb secondary global rearm
 20604                                  
 20605 00000F50 B800F0                  	mov	ax,0F000h		;get machine type
 20606 00000F53 8EC0                    	mov	es,ax
 20607 00000F55 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20608 00000F5B 740D                    	je	short startrearm	; *if at no need to check
 20609                                  
 20610 00000F5D B4C0                    	mov	ah,0C0h 		;get system configuration
 20611 00000F5F CD15                    	int	15h			; *
 20612 00000F61 7216                    	jc	short finishrearm	; *jmp if old rom
 20613                                  
 20614                                  ; test feature byte for secondary interrupt controller
 20615                                  
 20616 00000F63 26F6470540              	test	byte [es:bx+5],40h
 20617                                  	; 24/10/2022
 20618                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20619 00000F68 740F                    	je	short finishrearm	;jmp if it is there
 20620                                  
 20621                                  startrearm:
 20622 00000F6A B0FF                    	mov	al,0FFh 		;write any pattern to port
 20623 00000F6C BAF206                  	mov	dx,6F2h 		;get starting address
 20624 00000F6F EE                      	out	dx,al			;out 06f2h,0ffh
 20625 00000F70 42                      	inc	dx			;bump address
 20626 00000F71 EE                      	out	dx,al			;out 06f3h,0ffh
 20627 00000F72 42                      	inc	dx			;bump address
 20628 00000F73 EE                      	out	dx,al			;out 06f4h,0ffh
 20629 00000F74 42                      	inc	dx			;bump address
 20630 00000F75 42                      	inc	dx			;bump address
 20631 00000F76 EE                      	out	dx,al			;out 06f6h,0ffh
 20632 00000F77 42                      	inc	dx			;bump address
 20633 00000F78 EE                      	out	dx,al			;out 06f7h,0ffh
 20634                                  
 20635                                  finishrearm:
 20636 00000F79 07                      	pop	es
 20637 00000F7A 5A                      	pop	dx
 20638 00000F7B 5B                      	pop	bx
 20639 00000F7C 58                      	pop	ax
 20640                                  
 20641                                  ;    global rearm end *******************
 20642                                  
 20643                                  ; ----------------------------------------------------------------------
 20644                                  ; allocate sysinit_base for install= command
 20645                                  ; ----------------------------------------------------------------------
 20646                                  ; sysinit_base allocation.
 20647                                  ;   check if endfile has been called to handle install= command.
 20648                                  
 20649                                  set_sysinit_base:
 20650                                  
 20651                                  ; ----------------------------------------------------------------------
 20652                                  ;sysinit_base will be established in the secure area of
 20653                                  ;lower memory when it handles the first install= command.
 20654                                  ;sysinit_base is the place where the actual exec function will be called and
 20655                                  ;will check sysinit module in high memory if it is damaged by the application
 20656                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20657                                  ;is displayed by sysinit_base.
 20658                                  ; ----------------------------------------------------------------------
 20659                                  
 20660                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20661                                  	; (SYSINIT:1028h)
 20662                                  
 20663                                  	; 11/12/2022
 20664                                  	; ds = cs
 20665 00000F7D 50                      	push	ax			; set devmark for mem command
 20666 00000F7E A1[E003]                	mov	ax,[memhi]
 20667 00000F81 2B06[E403]              	sub	ax,[area]
 20668 00000F85 A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20669                                  	;mov	al,devmark_inst ; 'T'
 20670 00000F88 B054                    	mov	al,'T'
 20671 00000F8A E86404                  	call	setdevmark
 20672 00000F8D 58                      	pop	ax
 20673                                  
 20674 00000F8E 8B3E[E003]              	mov	di,[memhi]
 20675 00000F92 8EC7                    	mov	es,di
 20676 00000F94 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20677 00000F98 31FF                    	xor	di,di
 20678 00000F9A 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20679 00000F9E BE[B010]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20680 00000FA1 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20681                                  	; 24/10/2022 
 20682                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20683 00000FA4 010E[DE03]              	add	[memlo],cx
 20684                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20685                                  	; 11/12/2022
 20686                                  	; ds = cs
 20687                                  	;or	byte [cs:setdevmarkflag],2
 20688 00000FA8 800E[1014]02            	or	byte [setdevmarkflag],2
 20689                                  	;or	byte [setdevmarkflag],for_devmark
 20690 00000FAD E86720                  	call	round			; check mem error. also,readjust memhi for the next use.
 20691 00000FB0 F3A4                    	rep	movsb			; reallocate it.
 20692                                  
 20693 00000FB2 C706[5203][8910]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20694 00000FB8 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20695                                  	;or	word [install_flag],has_installed ; set the flag.
 20696                                  	;or	byte [install_flag],has_installed ; 2
 20697                                  	; 11/12/2022
 20698 00000FBC 800E[4A03]02            	or	byte [install_flag],2
 20699                                  	; 24/10/2022
 20700                                  	;or	word [install_flag],2	
 20701                                  
 20702                                  ; ----------------------------------------------------------------------
 20703                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20704                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20705                                  ; have_install_cmd.
 20706                                  ; ----------------------------------------------------------------------
 20707                                  
 20708 00000FC1 E85320                  	call	round
 20709 00000FC4 8B1E[E003]              	mov	bx,[memhi]
 20710 00000FC8 A1[E403]                	mov	ax,[area]
 20711 00000FCB A3[DA03]                	mov	[old_area],ax		; save [area]
 20712 00000FCE 8EC0                    	mov	es,ax			;calc what we needed
 20713 00000FD0 29C3                    	sub	bx,ax
 20714                                  	; 24/10/2022
 20715 00000FD2 B44A                    	mov	ah,4Ah ; SETBLOCK
 20716 00000FD4 CD21                    	int	21h			;give the rest back
 20717                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20718                                  		; ES = segment address of block to change
 20719                                  		; BX = new size in paragraphs
 20720 00000FD6 06                      	push	es
 20721 00000FD7 8CC0                    	mov	ax,es
 20722 00000FD9 48                      	dec	ax
 20723 00000FDA 8EC0                    	mov	es,ax			;point to arena
 20724                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20725                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20726                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20727                                  	; 24/10/2022
 20728 00000FDC 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20729 00000FE3 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20730 00000FEA 07                      	pop	es
 20731                                  
 20732 00000FEB BBFFFF                  	mov	bx,0FFFFh
 20733 00000FEE B448                    	mov	ah,48h ; ALLOC
 20734 00000FF0 CD21                    	int	21h
 20735 00000FF2 B448                    	mov	ah,48h ; ALLOC
 20736 00000FF4 CD21                    	int	21h			; allocate the rest of the memory
 20737                                  		; DOS - 2+ - ALLOCATE MEMORY
 20738                                  		; BX = number of 16-byte paragraphs desired
 20739 00000FF6 A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20740 00000FF9 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20741                                  
 20742                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20743                                  ;;;; allocated.
 20744                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20745                                  ;;;; this time) to the top-of-the memory),here we are going to
 20746                                  ;;;; 1). "setblock" from memhi to confbot.
 20747                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20748                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20749                                  
 20750                                  ;memory allocation for sysinit,confbot module.
 20751                                  
 20752 00000FFF 8EC0                    	mov	es,ax
 20753                                  	;mov	bx,[CONFBOT]
 20754                                  	; 24/10/2022
 20755 00001001 8B1E[A102]              	mov	bx,[top_of_cdss]
 20756 00001005 29C3                    	sub	bx,ax			; confbot - memhi
 20757 00001007 4B                      	dec	bx			; make a room for the memory block id.
 20758 00001008 4B                      	dec	bx			; make sure!!!.
 20759 00001009 B44A                    	mov	ah,4Ah ; SETBLOCK
 20760 0000100B CD21                    	int	21h			; this will free (confbot to top of memory)
 20761                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20762                                  		; ES = segment address of block to change
 20763                                  		; BX = new size in paragraphs
 20764 0000100D BBFFFF                  	mov	bx,0FFFFh
 20765 00001010 B448                    	mov	ah,48h ; ALLOC
 20766 00001012 CD21                    	int	21h
 20767 00001014 B448                    	mov	ah,48h ; ALLOC
 20768 00001016 CD21                    	int	21h			; allocate (confbot to top of memory)
 20769                                  		; DOS - 2+ - ALLOCATE MEMORY
 20770                                  		; BX = number of 16-byte paragraphs desired
 20771 00001018 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20772                                  					; need this to free this area for command.com.
 20773 0000101B 8E06[E003]              	mov	es,[memhi]
 20774 0000101F B449                    	mov	ah,49h			; free allocated memory.
 20775 00001021 CD21                    	int	21h			; free (memhi to confbot(=area))
 20776                                  		; DOS - 2+ - FREE MEMORY
 20777                                  		; ES = segment address of area to be freed
 20778                                  endfile_ret:
 20779 00001023 C3                      	retn
 20780                                  
 20781                                  ; End of "EndFile" DOS structure configuration.
 20782                                  
 20783                                  ; ----------------------------------------------------------------------
 20784                                  ; 26/03/2019 - Retro DOS v4.0
 20785                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20786                                  ; ----------------------------------------------------------------------
 20787                                  ; Do_Install_Exec
 20788                                  ;
 20789                                  ; This procedure is used to EXEC a program being loaded via the 
 20790                                  ; "install=" mechanism in config.sys. It does this by setting up
 20791                                  ; the parameters, and then jumping to sysinit_base, which has been
 20792                                  ; setup in low memory. When complete, sysinit_base will jump back
 20793                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20794                                  ; program).
 20795                                  
 20796                                  ;SYSINIT:10CFh:
 20797                                  
 20798                                  do_install_exec:			; now,handles install= command.
 20799                                  
 20800 00001024 56                      	push	si			; save si for config.sys again.
 20801                                  
 20802                                  ; we are going to call load/exec function.
 20803                                  ; set es:bx to the parameter block here;;;;;;;
 20804                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20805                                  ; after the filename. so parameter starts after that. if next
 20806                                  ; character is a line feed (i.e. 10),then assume that the 0
 20807                                  ; we already encountered used to be a carrage return. in this
 20808                                  ; case,let's set the length to 0 which will be followed by
 20809                                  ; carridge return.
 20810                                  
 20811                                  ; es:si -> command line in config.sys. points to the first non blank
 20812                                  ;character after =.
 20813                                  
 20814 00001025 06                      	push	es
 20815 00001026 1E                      	push	ds
 20816 00001027 07                      	pop	es
 20817 00001028 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20818 00001029 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20819                                  
 20820 0000102B 31C9                    	xor	cx,cx
 20821 0000102D FC                      	cld
 20822 0000102E 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20823 00001034 BF[6E03]                	mov	di,ldexec_parm
 20824                                  installfilename:			; skip the file name
 20825 00001037 AC                      	lodsb				; al = ds:si; si++
 20826 00001038 3C00                    	cmp	al,0
 20827 0000103A 7402                    	je	short got_installparm
 20828 0000103C EBF9                    	jmp	short installfilename
 20829                                  got_installparm:			; copy the parameters to ldexec_parm
 20830 0000103E AC                      	lodsb
 20831 0000103F 268805                  	mov	[es:di],al
 20832 00001042 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20833 00001044 7405                    	je	short done_installparm
 20834 00001046 FEC1                    	inc	cl			; # of char. in the parm.
 20835 00001048 47                      	inc	di
 20836 00001049 EBF3                    	jmp	short got_installparm
 20837                                  done_installparm:
 20838 0000104B 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20839 00001050 80F900                  	cmp	cl,0			; if no parm,then
 20840 00001053 7506                    	jne	short install_seg_set 	; let the parm area
 20841 00001055 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20842                                  					; starts with cr.
 20843                                  install_seg_set:
 20844 0000105B 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20845 00001062 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20846                                  
 20847                                  ;---------------------------------------------------M067----------------
 20848                                  ;
 20849                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20850                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20851                                  ;
 20852                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20853                                  ;
 20854                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20855                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20856                                  ; 	was fixed. 
 20857                                  ;
 20858                                  ; ----------------------------------------------------------------------
 20859                                  
 20860                                  ;;ifdef   MULTI_CONFIG
 20861                                  
 20862                                  ; If there's any environment data in "config_wrkseg", pass to app
 20863                                  
 20864                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20865                                          ;mov     cx,ax
 20866                                          ;cmp     word [cs:config_envlen],0
 20867                                          ;je      short no_envdata2
 20868                                          ;mov     cx,[cs:config_wrkseg]
 20869                                  ;no_envdata2:
 20870                                  ;;endif  ;MULTI_CONFIG
 20871                                  
 20872                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20873                                  	; 24/10/2022
 20874                                  	;mov	[cs:iexec.environ],cx
 20875                                  	; 02/11/2022
 20876 00001064 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20877                                  
 20878                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20879 00001068 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20880                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20881 0000106C 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20882                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20883 00001070 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20884 00001074 E86E00                  	call	sum_up
 20885 00001077 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20886 0000107B 31C0                    	xor	ax,ax
 20887 0000107D B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20888 0000107F BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20889 00001082 06                      	push	es			; save es,ds for load/exec
 20890 00001083 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20891 00001084 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20892                                  					; load/exec function and check sum.
 20893                                  
 20894                                  ;----------------------------------------
 20895                                  
 20896                                  ;j.k. this is the returning address from sysinit_base.
 20897                                  
 20898                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20899                                  
 20900                                  sysinitptr:				; returning far address from sysinit_base
 20901 00001089 5E                      	pop	si			; restore si for config.sys file.
 20902 0000108A 06                      	push	es
 20903 0000108B 1E                      	push	ds
 20904 0000108C 07                      	pop	es
 20905 0000108D 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20906 0000108E 7306                            jnc     short install_exit_ret
 20907                                  
 20908 00001090 56                      	push	si			; error in loading the file for install=.
 20909 00001091 E8D121                  	call	badload 		; es:si-> path,filename,0.
 20910 00001094 5E                      	pop	si
 20911                                  
 20912                                  	; 24/10/2022
 20913                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20914                                  	; 11/12/2022
 20915                                  	; ds = cs
 20916 00001095 C3                      	retn
 20917                                  
 20918                                  install_exit_ret:
 20919                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20920                                  
 20921                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20922                                  ;SYSINIT:1142h:
 20923 00001096 B44D                    	mov     ah,4Dh
 20924 00001098 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20925 0000109A 80FC03                  	cmp     ah,3
 20926 0000109D 7404                    	jz      short sysinitptr_retn
 20927 0000109F E80916                  	call    error_line
 20928 000010A2 F9                      	stc
 20929                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20930 000010A3 C3                      	retn		
 20931                                  
 20932                                  ; ----------------------------------------------------------------------
 20933                                  
 20934                                  ;**	ParaRound - Round Up length to paragraph multiple
 20935                                  ;
 20936                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20937                                  ;	by 16 yielding a "length in paragraphs" value.
 20938                                  ;
 20939                                  ;	ENTRY	(ax) = byte length
 20940                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20941                                  ;	USES	ax, flags
 20942                                  
 20943                                  ParaRound:
 20944 000010A4 83C00F                  	add	ax,15
 20945 000010A7 D1D8                    	rcr	ax,1
 20946 000010A9 D1E8                    	shr	ax,1
 20947 000010AB D1E8                    	shr	ax,1
 20948 000010AD D1E8                    	shr	ax,1
 20949 000010AF C3                      	retn
 20950                                  
 20951                                  ; ----------------------------------------------------------------------
 20952                                  ; sysinit_base module.
 20953                                  ;
 20954                                  ; This module is relocated by the routine EndFile to a location in low
 20955                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20956                                  ; that are being loaded by the "install=" command. After the EXEC call
 20957                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20958                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20959                                  ; If it did, then this module will print an error message and stop the
 20960                                  ; system. Otherwise, it returns control to SYSINIT.
 20961                                  ;
 20962                                  ;in: after relocation,
 20963                                  ;    ax = 4b00h - load and execute the program dos function.
 20964                                  ;    ds = confbot. segment of config.sys file image
 20965                                  ;    es = sysinitseg. segment of sysinit module itself.
 20966                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20967                                  ;    es:bx = pointer to a parameter block for load.
 20968                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20969                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20970                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20971                                  ;			word boundary moduler form.
 20972                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20973                                  ;
 20974                                  ;note: sysinit should save necessary registers and when the control is back
 20975                                  
 20976                                  	; 24/10/2022
 20977                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20978                                  sysinit_base:				
 20979 000010B0 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20980 000010B5 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20981 000010BA CD21                    	int	21h			; load/exec dos call.
 20982 000010BC 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20983 000010C1 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20984 000010C6 1F                      	pop	ds			; restore confbot seg
 20985 000010C7 07                      	pop	es			; restore sysinitseg
 20986 000010C8 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20987                                  					; at this time,i don't have to worry about
 20988                                  					; that sysinit module has been broken or not.
 20989 000010CA E81800                  	call	sum_up			; otherwise,check if it is good.
 20990 000010CD 263906[5603]            	cmp	[es:checksum],ax
 20991 000010D2 740C                    	je	short sysinit_base_end
 20992                                  
 20993                                  ;	memory broken. show "memory allocation error" message and stall.
 20994                                  
 20995 000010D4 B409                    	mov	ah,9
 20996 000010D6 0E                      	push	cs
 20997 000010D7 1F                      	pop	ds
 20998 000010D8 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20999 000010DB CD21                    	int	21h
 21000                                  		; DOS - PRINT STRING
 21001                                  		; DS:DX -> string terminated by "$"
 21002                                  	; 24/10/2022
 21003                                  _stall: 
 21004                                  	; 11/12/2022
 21005 000010DD F4                      	hlt 
 21006                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21007                                  	;hlt				;use HLT to minimize energy consumption
 21008 000010DE EBFD                            jmp	short _stall
 21009                                  
 21010                                  sysinit_base_end: 
 21011 000010E0 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 21012                                  
 21013                                  ;-------------------------------------
 21014                                  
 21015                                  sum_up:
 21016                                  
 21017                                  ;in:   es - sysinitseg.
 21018                                  ;out:  ax - result
 21019                                  ;
 21020                                  ;remark: since this routine will only check starting from "locstack" to the end of
 21021                                  ;	 sysinit segment,the data area, and the current stack area are not
 21022                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 21023                                  ;	 gaurantee to be safe.
 21024                                  ;
 21025                                  ;first sum up confbot seg.
 21026                                  
 21027 000010E5 1E                      	push	ds
 21028                                  	;mov	ax,[es:CONFBOT]
 21029                                  	; 24/10/2022
 21030 000010E6 26A1[A102]              	mov	ax,[es:top_of_cdss]
 21031 000010EA 8ED8                    	mov	ds,ax
 21032 000010EC 31F6                    	xor	si,si
 21033 000010EE 31C0                    	xor	ax,ax
 21034 000010F0 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 21035                                  					;whole test better fail.
 21036 000010F5 D1E9                    	shr	cx,1			; make it a word count
 21037 000010F7 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 21038                                  sum1:
 21039 000010F9 0304                    	add	ax,[si]
 21040 000010FB 46                      	inc	si
 21041 000010FC 46                      	inc	si
 21042 000010FD E2FA                    	loop	sum1
 21043                                  ;now,sum up sysinit module.
 21044                                  sum_sys_code:
 21045                                  	; 24/10/2022
 21046 000010FF BEFE10                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 21047                                  				        ; starting after the stack.  M069
 21048                                  					;  this does not cover the possible stack code!!!
 21049                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 21050                                  	; 02/11/2022
 21051                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 21052                                  	; 30/12/2022 (BugFix)
 21053                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 21054 00001102 B9[F037]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 21055 00001105 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 21056 00001107 D1E9                    	shr	cx,1
 21057                                  sum2:
 21058 00001109 260304                  	add	ax,[es:si]
 21059 0000110C 46                      	inc	si
 21060 0000110D 46                      	inc	si
 21061 0000110E E2F9                    	loop	sum2
 21062 00001110 1F                      	pop	ds
 21063 00001111 C3                      	retn
 21064                                  
 21065                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21066                                  
 21067                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 21068                                  ;SYSINIT:11BDh:
 21069 00001112 0000                    	dw	0
 21070                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 21071                                  ;SYSINIT:11BFh:
 21072 00001114 0000                    	dw	0
 21073                                  
 21074                                  mem_alloc_err_msgx:
 21075                                  
 21076                                         ;include msbio.cl4		; memory allocation error message
 21077                                  
 21078                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 21079 00001116 0D0A                    	db	0Dh,0Ah
 21080 00001118 4D656D6F727920616C-     	db 	'Memory allocation error $'
 21080 00001121 6C6F636174696F6E20-
 21080 0000112A 6572726F722024     
 21081                                  
 21082                                  end_sysinit_base: ; label byte
 21083                                  	; 24/10/2022
 21084                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 21085                                  
 21086                                  ; ----------------------------------------------------------------------
 21087                                  ; Set_Buffer
 21088                                  ;
 21089                                  ;function: set buffers in the real memory.				  
 21090                                  ;	   lastly set the memhi,memlo for the next available free address.
 21091                                  ;
 21092                                  ;input:    ds:bx -> buffinfo.
 21093                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 21094                                  ;	   singlebuffersize = buffer header size + sector size		  
 21095                                  ;
 21096                                  ;output:   buffers Queue established.	       				   
 21097                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 21098                                  ; ----------------------------------------------------------------------
 21099                                  
 21100                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21101                                  	; (SYSINIT:11DCh)
 21102                                  
 21103                                  set_buffer:
 21104 00001131 30D2                    	xor	dl,dl				; assume buffers not in HMA
 21105 00001133 E85500                  	call	GetBufferAddr
 21106 00001136 7402                    	jz	short set_buff_1
 21107                                  	;mov	dl,1				; buffers in HMA
 21108                                  	; 17/09/2023
 21109 00001138 FEC2                    	inc	dl ; mov dl,1
 21110                                  set_buff_1:
 21111                                  	; 25/10/2022
 21112                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 21113 0000113A 893F                    	mov	[bx],di
 21114                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 21115 0000113C 8C4702                  	mov	[bx+2],es
 21116                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 21117 0000113F C747040000              	mov	word [bx+4],0
 21118                                  
 21119 00001144 89F8                    	mov	ax,di
 21120 00001146 2E8B0E[9702]            	mov	cx,[cs:buffers]
 21121 0000114B 57                      	push	di				; remember first buffer
 21122                                  
 21123                                  ;	for each buffer
 21124                                  
 21125                                  nxt_buff:
 21126 0000114C E86100                  	call	set_buffer_info 		; set buf_link,buf_id...
 21127 0000114F 89C7                    	mov	di,ax
 21128 00001151 E2F9                    	loop	nxt_buff
 21129                                  
 21130 00001153 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 21131                                  
 21132 00001158 59                      	pop	cx				; get first buffer
 21133                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 21134 00001159 26890D                  	mov	[es:di],cx
 21135 0000115C 87CF                    	xchg	cx,di
 21136                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 21137                                  	; 25/10/2022
 21138 0000115E 26894D02                	mov	[es:di+2],cx
 21139                                  
 21140 00001162 08D2                    	or	dl,dl				; In HMA ?
 21141 00001164 7417                    	jz	short set_buff_2		; no
 21142                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 21143 00001166 C6470C01                	mov	byte [bx+12],1
 21144 0000116A 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 21145                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 21146 0000116E C7470D0000              	mov	word [bx+13],0
 21147                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 21148 00001173 89470F                  	mov	word [bx+15],ax
 21149 00001176 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 21150                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 21151 0000117A 83E814                  	sub	ax,20
 21152                                  set_buff_2:
 21153 0000117D 2E0106[DE03]            	add	[cs:memlo],ax
 21154                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21155 00001182 2E800E[1014]02          	or	byte [cs:setdevmarkflag],2
 21156                                  	;call	round
 21157                                  	;retn
 21158                                  	; 12/12/2022
 21159 00001188 E98C1E                  	jmp	round
 21160                                  
 21161                                  ; ----------------------------------------------------------------------
 21162                                  ; procedure : GetBufferAddr
 21163                                  ;
 21164                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21165                                  ;
 21166                                  ; returns in es:di the buffer adress
 21167                                  ; returns NZ if allocated in HMA
 21168                                  ; ----------------------------------------------------------------------
 21169                                  
 21170                                  	; 25/10/2022 
 21171                                  GetBufferAddr:
 21172 0000118B 53                      	push	bx
 21173 0000118C 52                      	push	dx
 21174 0000118D 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21175 00001191 2EF726[9702]            	mul	word [cs:buffers]
 21176                                  	;add	ax,0Fh
 21177 00001196 83C00F                  	add	ax,15 
 21178                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21179                                  	;and	ax,~15	; 0FFF0h	; para round
 21180                                  	; 12/12/2022
 21181 00001199 24F0                    	and	al,~15	; 0F0h
 21182 0000119B 89C3                    	mov	bx,ax
 21183 0000119D B8024A                  	mov	ax,4A02h
 21184                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21185 000011A0 CD2F                    	int	2Fh
 21186 000011A2 83FFFF                  	cmp	di,0FFFFh
 21187 000011A5 7506                    	jne	short got_hma
 21188                                  
 21189                                  	;mov	di,0			; dont xor di,di Z flag needed
 21190                                  	; 05/09/2023
 21191                                  	; zf=1
 21192 000011A7 47                      	inc	di ; 0FFFFh -> 0
 21193                                  	; zf=1
 21194                                  
 21195                                  	;zf=1
 21196                                  	;xor	di,di	; 25/10/2022
 21197                                  	;zf=1
 21198 000011A8 2E8E06[E003]            	mov	es,[cs:memhi]
 21199                                  got_hma:
 21200 000011AD 5A                      	pop	dx
 21201 000011AE 5B                      	pop	bx
 21202 000011AF C3                      	retn
 21203                                  
 21204                                  ; ----------------------------------------------------------------------
 21205                                  
 21206                                  set_buffer_info:
 21207                                  
 21208                                  ;function: set buf_link,buf_id,buf_sector
 21209                                  ;
 21210                                  ;in: es:di -> buffer header to be set.
 21211                                  ;    ax = di
 21212                                  ;
 21213                                  ;out:
 21214                                  ;    above entries set.
 21215                                  
 21216                                  	; 25/10/2022 
 21217 000011B0 2EFF36[3903]            	push	word [cs:buf_prev_off]
 21218                                  	;pop	word [es:di+buffinfo.buf_prev]
 21219 000011B5 268F4502                	pop	word [es:di+2]
 21220 000011B9 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 21221 000011BD 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 21222                                  	;mov	[es:di+buffinfo.buf_next],ax
 21223 000011C2 268905                  	mov	[es:di],ax
 21224                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21225 000011C5 26C74504FF00            	mov	word [es:di+4],00FFh
 21226                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21227 000011CB 26C745060000            	mov	word [es:di+6],0
 21228                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21229 000011D1 26C745080000            	mov	word [es:di+8],0
 21230 000011D7 C3                      	retn
 21231                                  
 21232                                  ; ======================================================================
 21233                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21234                                  ; ----------------------------------------------------------------------
 21235                                  ; 27/03/2019 - Retro DOS v4.0
 21236                                  
 21237                                  ; ----------------------------------------------------------------------
 21238                                  ; ibmstack initialization routine.
 21239                                  ;
 21240                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21241                                  ;	has been modified. this initialization routine also has to
 21242                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21243                                  ;	should be set to signal that this interrupt handler is the
 21244                                  ;	first handler hooked to this interrupt vector.
 21245                                  ;	we determine this by looking at the instruction pointed by
 21246                                  ;	this vector. if it is iret, then this handler should be the
 21247                                  ;	first one. in our case, only the interrupt vector 77h is the
 21248                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21249                                  ;
 21250                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21251                                  ;	some design changes are needed to the above interrupt sharing
 21252                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21253                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21254                                  ;	interrupts would only be generated on levels 7 and 15.
 21255                                  ;	these assumptions are not true any more. we have to use the firstflag
 21256                                  ;	for every level of interrupt. we will set the firstflag on the following
 21257                                  ;	conditions:
 21258                                  ;
 21259                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21260                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21261                                  ;	 c. else if cs:ip points to an iret, then "first"
 21262                                  ;	 d. else if cs:ip points to dummy, then "first"
 21263                                  ;
 21264                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21265                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21266                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21267                                  ;	the bioses for all of the machines.
 21268                                  ;
 21269                                  ;	system design group requests bios to handle the phantom interrupts.
 21270                                  ;
 21271                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21272                                  ;	produced by the bogus adapter card even without interrupt request is
 21273                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21274                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21275                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21276                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21277                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21278                                  ;	interrupt line.
 21279                                  ;
 21280                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21281                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21282                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21283                                  ;	control. if it is the first, then the following action should be
 21284                                  ;	taken. we don't have to implement skack logic in this case.
 21285                                  ;
 21286                                  ;	to implement this logic, we rather choose a simple method.
 21287                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21288                                  ;	going to hook this interrupt vector. the reason is if the original
 21289                                  ;	vector points to "iret" and do nothing, we don't need
 21290                                  ;	to implement the stack logic for it. this will simplify implementation
 21291                                  ;	while maintaining compatibility with the old version of dos.
 21292                                  ;	this implies that in the main stack code, there might be a stack code
 21293                                  ;	that will never be used, a dead code.
 21294                                  ;
 21295                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21296                                  
 21297                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21298                                  	; (SYSINIT:1287h)
 21299                                  
 21300                                  	; 14/12/2022
 21301                                  stackinit:
 21302 000011D8 50                      	push	ax
 21303 000011D9 1E                      	push	ds
 21304 000011DA 06                      	push	es
 21305 000011DB 53                      	push	bx
 21306 000011DC 51                      	push	cx
 21307 000011DD 52                      	push	dx
 21308 000011DE 57                      	push	di
 21309 000011DF 56                      	push	si
 21310 000011E0 55                      	push	bp
 21311                                  
 21312                                  ;currently es -> stack code area
 21313                                  
 21314                                  	; 12/12/2022
 21315                                  	; ds = cs
 21316 000011E1 A1[8A02]                	mov	ax,[stack_count]
 21317 000011E4 89C1                    	mov	cx,ax  ; *!*!*  
 21318                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21319                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21320                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21321 000011E6 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21322                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21323 000011EA A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21324 000011ED 26A3[0600]              	mov	[es:stacksize],ax
 21325                                  	; 12/12/2022
 21326 000011F1 A1[8E02]                	mov	ax,[stack_addr]			; offset
 21327                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21328                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21329                                  	;mov	ax,[cs:stack_addr]  ; !!
 21330 000011F4 26A3[0800]              	mov	[es:stacks],ax
 21331                                  	; 12/12/2022
 21332 000011F8 89C5                    	mov	bp,ax ; *!*
 21333 000011FA A1[9002]                	mov	ax,[stack_addr+2]
 21334                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21335                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21336                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21337 000011FD 26A3[0A00]              	mov	[es:stacks+2],ax
 21338                                  
 21339                                  ; initialize the data fields with the parameters
 21340                                  
 21341                                  ; "firstentry" will always be at stacks
 21342                                  
 21343                                  	;mov	bp,[es:stacks]			; get offset of stack
 21344                                  	; 12/12/2022
 21345                                  	; bp = [es:stacks] ; *!*
 21346 00001201 26892E[0C00]            	mov	[es:firstentry],bp
 21347                                  
 21348                                  ; the stacks will always immediately follow the table entries
 21349                                  
 21350 00001206 B80800                  	mov	ax,entrysize ; 8
 21351                                  	;mov	cx,[es:stackcount]
 21352                                  	; 12/12/2022
 21353                                  	; cx = [es:stackcount] ; *!*!*
 21354 00001209 F7E1                    	mul	cx
 21355 0000120B 01E8                    	add	ax,bp
 21356 0000120D 26A3[0400]              	mov	[es:stackat],ax
 21357 00001211 89C3                    	mov	bx,ax
 21358 00001213 83EB02                  	sub	bx,2
 21359                                  
 21360                                  ; zero the entire stack area to start with
 21361                                  
 21362 00001216 268B3E[0400]            	mov	di,[es:stackat]
 21363 0000121B 26A1[0600]              	mov	ax,[es:stacksize]
 21364 0000121F F7E1                    	mul	cx
 21365 00001221 89C1                    	mov	cx,ax
 21366 00001223 31C0                    	xor	ax,ax
 21367 00001225 06                      	push	es
 21368 00001226 1F                      	pop	ds				;ds = relocated stack code seg.
 21369                                  
 21370                                  ;now, ds -> stack code area
 21371                                  
 21372 00001227 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21373 0000122B FC                      	cld
 21374 0000122C F3AA                    	rep	stosb
 21375                                  
 21376 0000122E 8B0E[0200]              	mov	cx,[stackcount]
 21377                                  
 21378                                  ; loop for "count" times, building a table entry
 21379                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21380                                  ;  cx = number of entries
 21381                                  ;  es:bp => base of stacks - 2
 21382                                  ;  es:bx => first table entry
 21383                                  
 21384                                  buildloop:
 21385                                  	; 11/12/2022
 21386                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21387                                  	; 25/10/2022
 21388                                  	;mov	byte [es:bp],free
 21389                                  	; 14/08/2023
 21390 00001232 26884600                	mov	[es:bp],al ; 0 ; free
 21391 00001236 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21392                                  	;mov	[es:bp+1],al
 21393 0000123A 26894602                	mov	[es:bp+savedsp],ax
 21394                                  	;mov	[es:bp2],ax
 21395 0000123E 26894604                	mov	[es:bp+savedss],ax
 21396                                  	;mov	[es:bp+4],ax
 21397 00001242 031E[0600]              	add	bx,[stacksize]
 21398 00001246 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21399                                  	;mov	[es:bp+6],bx
 21400 0000124A 26892F                  	mov	[es:bx],bp
 21401 0000124D 83C508                  	add	bp,entrysize ; 8
 21402                                  
 21403 00001250 E2E0                    	loop	buildloop
 21404                                  
 21405 00001252 83ED08                  	sub	bp,entrysize ; 8
 21406 00001255 892E[0E00]              	mov	[lastentry],bp
 21407 00001259 892E[1000]              	mov	[nextentry],bp
 21408                                  
 21409 0000125D 1E                      	push	ds
 21410                                  	;mov	ax,0F000h		;look at the model byte
 21411                                  	; 05/09/2023
 21412 0000125E B4F0                    	mov	ah,0F0h ; ax = 0F000h
 21413 00001260 8ED8                    	mov	ds,ax	
 21414 00001262 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 21415 00001267 1F                      	pop	ds
 21416 00001268 7504                    	jne	short skip_disablenmis
 21417                                  
 21418 0000126A B007                    	mov	al,07h			; disable convertible nmis
 21419 0000126C E672                    	out	72h,al
 21420                                  
 21421                                  skip_disablenmis:
 21422 0000126E 31C0                    	xor	ax,ax
 21423 00001270 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21424                                  					;ds - relocated stack code segment
 21425 00001272 FA                      	cli
 21426                                  
 21427                                  	;irp	aa,<02,08,09,70>
 21428                                  	;
 21429                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21430                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21431                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21432                                  	;mov	dx,offset int&aa	;pass where new handler is
 21433                                  	;call	new_init_loop		;adjust the vector to new handler,
 21434                                  	;				;saving pointer to original owner
 21435                                  	;endm
 21436                                  
 21437                                  stkinit_02:
 21438 00001273 BE0800                  	mov	si,02h*4 ; 8
 21439 00001276 BF[4206]                	mov	di,INT19OLD02
 21440 00001279 BB[1200]                	mov	bx,old02
 21441 0000127C BA[1600]                	mov	dx,int02
 21442 0000127F E84801                  	call	new_init_loop
 21443                                  stkinit_08:
 21444 00001282 BE2000                  	mov	si,08h*4 ; 32
 21445 00001285 BF[4706]                	mov	di,INT19OLD08
 21446 00001288 BB[3800]                	mov	bx,old08
 21447 0000128B BA[3C00]                	mov	dx,int08
 21448 0000128E E83901                  	call	new_init_loop
 21449                                  stkinit_09:
 21450 00001291 BE2400                  	mov	si,09h*4 ; 36
 21451 00001294 BF[4C06]                	mov	di,INT19OLD09
 21452 00001297 BB[4100]                	mov	bx,old09
 21453 0000129A BA[4500]                	mov	dx,int09
 21454 0000129D E82A01                  	call	new_init_loop
 21455                                  stkinit_70:
 21456 000012A0 BEC001                  	mov	si,70h*4 ; 448
 21457 000012A3 BF[6A06]                	mov	di,INT19OLD70
 21458 000012A6 BB[4E00]                	mov	bx,old70
 21459 000012A9 BA[5200]                	mov	dx,int70
 21460 000012AC E81B01                  	call	new_init_loop
 21461                                  
 21462                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21463                                  	;
 21464                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21465                                  	;push	ds			;save relocated stack code segment
 21466                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21467                                  	;push	ds
 21468                                  	;pop	dx			;dx = segment value
 21469                                  	;	
 21470                                  	;cmp	dx,0
 21471                                  	;jz	int&aa&_first
 21472                                  	;
 21473                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21474                                  	;jz	int&aa&_first
 21475                                  	;
 21476                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21477                                  	;jz	int&aa&_not_first
 21478                                  	;
 21479                                  	;cmp	dx,0f000h		;rom bios segment
 21480                                  	;jnz	int&aa&_not_first
 21481                                  	;
 21482                                  	;push	es
 21483                                  	;push	dx
 21484                                  	;mov	dx,0f000h
 21485                                  	;mov	es,dx
 21486                                  	;cmp	bx,word ptr es:0ff01h
 21487                                         	;pop	dx
 21488                                  	;pop	es
 21489                                  	;jz	int&aa&_first
 21490                                  	;
 21491                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21492                                  	;pop	ds
 21493                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21494                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21495                                  	;mov	dx, offset int&aa	;pass where new handler is
 21496                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21497                                  	;				;pointer to original owner.
 21498                                  	;jmp	short int&aa&_end
 21499                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21500                                  	;pop	ds
 21501                                  ;int&aa&_end:
 21502                                  	;
 21503                                  	;endm
 21504                                  
 21505                                  stkinit_0A:
 21506 000012AF BE2800                  	mov	si,0Ah*4 ; 40
 21507                                  	
 21508                                  ; 14/12/2022
 21509                                  %if 0	
 21510                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21511                                  	push	ds
 21512                                  	
 21513                                  	lds	bx,[es:si]
 21514                                  	push	ds
 21515                                  	pop	dx
 21516                                  		
 21517                                  	cmp	dx,0
 21518                                  	je	short int_0A_first
 21519                                  	
 21520                                  	cmp	byte [bx],0CFh
 21521                                  	je	short int_0A_first
 21522                                  	
 21523                                  	cmp	word [bx+6],424Bh
 21524                                  	je	short int_0A_not_first
 21525                                  	
 21526                                  	cmp	dx,0F000h
 21527                                  	jne	short int_0A_not_first
 21528                                  	
 21529                                  	push	es
 21530                                  	push	dx
 21531                                  	mov	dx,0F000h
 21532                                  	mov	es,dx
 21533                                  	cmp	bx,[es:0FF01h]
 21534                                         	pop	dx
 21535                                  	pop	es
 21536                                  	je	short int_0A_first
 21537                                  %Endif
 21538                                  
 21539                                  	; 14/12/2022
 21540                                  	; 25/10/2022
 21541 000012B2 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21542 000012B5 730C                    	jnc	short int_0A_first
 21543                                  	
 21544                                  int_0A_not_first:
 21545                                  	; 14/12/2022
 21546                                  	; 25/10/2022
 21547                                  	;pop	ds
 21548 000012B7 BF[5106]                	mov	di,INT19OLD0A
 21549 000012BA BB[5900]                	mov	bx,old0A
 21550 000012BD BA[5700]                	mov	dx,int0A
 21551 000012C0 E80701                  	call	new_init_loop
 21552                                  	
 21553                                  	; 14/12/2022	
 21554                                  	;jmp	short int_0A_end
 21555                                  ;int_0A_first:
 21556                                  	; 25/10/2022
 21557                                  	;pop	ds
 21558                                  
 21559                                  	; 14/12/2022
 21560                                  int_0A_first:
 21561                                  int_0A_end:
 21562                                  
 21563                                  stkinit_0B:
 21564 000012C3 BE2C00                  	mov	si,0Bh*4 ; 44
 21565                                  	
 21566                                  	; 14/12/2022
 21567                                  	; 25/10/2022
 21568 000012C6 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21569 000012C9 730C                    	jnc	short int_0B_end ; int_0B_first
 21570                                  
 21571                                  ; 14/12/2022
 21572                                  %if 0	
 21573                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21574                                  	push	ds
 21575                                  	lds	bx,[es:si]
 21576                                  	push	ds
 21577                                  	pop	dx
 21578                                  		
 21579                                  	cmp	dx,0
 21580                                  	je	short int_0B_first
 21581                                  
 21582                                  	cmp	byte [bx],0CFh
 21583                                  	je	short int_0B_first
 21584                                  	
 21585                                  	cmp	word [bx+6],424Bh
 21586                                  	je	short int_0B_not_first
 21587                                  	
 21588                                  	cmp	dx,0F000h
 21589                                  	jne	short int_0B_not_first
 21590                                  
 21591                                  	push	es
 21592                                  	push	dx
 21593                                  	mov	dx,0F000h
 21594                                  	mov	es,dx
 21595                                  	cmp	bx,[es:0FF01h]
 21596                                  	pop	dx
 21597                                  	pop	es
 21598                                  	je	short int_0B_first
 21599                                  %endif
 21600                                  
 21601                                  int_0B_not_first:
 21602                                  	; 14/12/2022
 21603                                  	; 25/10/2022
 21604                                  	;pop	ds
 21605 000012CB BF[5606]                	mov	di,INT19OLD0B
 21606 000012CE BB[7100]                	mov	bx,old0B
 21607 000012D1 BA[6F00]                	mov	dx,int0B
 21608 000012D4 E8F300                  	call	new_init_loop
 21609                                  
 21610                                  	; 14/12/2022
 21611                                  	;jmp	short int_0B_end
 21612                                  ;int_0B_first:
 21613                                  	; 25/10/2022
 21614                                  	;pop	ds
 21615                                  
 21616                                  int_0B_end:
 21617                                  	
 21618                                  stkinit_0C:
 21619 000012D7 BE3000                  	mov	si,0Ch*4 ; 48
 21620                                  	
 21621                                  	; 14/12/2022
 21622                                  	; 25/10/2022
 21623 000012DA E8C300                  	call	int_xx_first_check
 21624 000012DD 730C                    	jnc	short int_0C_end ; int_0C_first
 21625                                  
 21626                                  ; 14/12/2022
 21627                                  %if 0	
 21628                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21629                                  	push	ds
 21630                                  	lds	bx,[es:si]
 21631                                  	push	ds
 21632                                  	pop	dx
 21633                                  		
 21634                                  	cmp	dx,0
 21635                                  	je	short int_0C_first
 21636                                  
 21637                                  	cmp	byte [bx],0CFh
 21638                                  	je	short int_0C_first
 21639                                  	
 21640                                  	cmp	word [bx+6],424Bh
 21641                                  	je	short int_0C_not_first
 21642                                  	
 21643                                  	cmp	dx,0F000h
 21644                                  	jne	short int_0C_not_first
 21645                                  
 21646                                  	push	es
 21647                                  	push	dx
 21648                                  	mov	dx,0F000h
 21649                                  	mov	es,dx
 21650                                  	cmp	bx,[es:0FF01h]
 21651                                  	pop	dx
 21652                                  	pop	es
 21653                                  	je	short int_0C_first
 21654                                  %endif
 21655                                  	
 21656                                  int_0C_not_first:
 21657                                  	; 14/12/2022
 21658                                  	; 25/10/2022
 21659                                  	;pop	ds
 21660 000012DF BF[5B06]                	mov	di,INT19OLD0C
 21661 000012E2 BB[8900]                	mov	bx,old0C
 21662 000012E5 BA[8700]                	mov	dx,int0C
 21663 000012E8 E8DF00                  	call	new_init_loop
 21664                                  
 21665                                  	; 14/12/2022
 21666                                  	;jmp	short int_0C_end
 21667                                  ;int_0C_first:
 21668                                  	; 25/10/2022
 21669                                  	;pop	ds
 21670                                  
 21671                                  int_0C_end:
 21672                                  
 21673                                  stkinit_0D:
 21674 000012EB BE3400                  	mov	si,0Dh*4 ; 52
 21675                                  
 21676                                  	; 14/12/2022	
 21677                                  	; 25/10/2022
 21678 000012EE E8AF00                  	call	int_xx_first_check
 21679 000012F1 730C                    	jnc	short int_0D_end ; int_0D_first
 21680                                  
 21681                                  ; 14/12/2022
 21682                                  %if 0	
 21683                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21684                                  	push	ds
 21685                                  	lds	bx,[es:si]
 21686                                  	push	ds
 21687                                  	pop	dx
 21688                                  		
 21689                                  	cmp	dx,0
 21690                                  	je	short int_0D_first
 21691                                  
 21692                                  	cmp	byte [bx],0CFh
 21693                                  	je	short int_0D_first
 21694                                  	
 21695                                  	cmp	word [bx+6],424Bh
 21696                                  	je	short int_0D_not_first
 21697                                  	
 21698                                  	cmp	dx,0F000h
 21699                                  	jne	short int_0D_not_first
 21700                                  
 21701                                  	push	es
 21702                                  	push	dx
 21703                                  	mov	dx,0F000h
 21704                                  	mov	es,dx
 21705                                  	cmp	bx,[es:0FF01h]
 21706                                  	pop	dx
 21707                                  	pop	es
 21708                                  	je	short int_0D_first
 21709                                  %endif
 21710                                  	
 21711                                  int_0D_not_first:
 21712                                  	; 14/12/2022
 21713                                  	; 25/10/2022
 21714                                  	;pop	ds
 21715 000012F3 BF[6006]                	mov	di,INT19OLD0D
 21716 000012F6 BB[A100]                	mov	bx,old0D
 21717 000012F9 BA[9F00]                	mov	dx,int0D
 21718 000012FC E8CB00                  	call	new_init_loop
 21719                                  
 21720                                  	; 14/12/2022
 21721                                  	;jmp	short int_0D_end
 21722                                  	; 02/11/2022
 21723                                  ;int_0D_first:
 21724                                  	;pop	ds
 21725                                  
 21726                                  int_0D_end:
 21727                                  
 21728                                  stkinit_0E:
 21729 000012FF BE3800                  	mov	si,0Eh*4 ; 56
 21730                                  
 21731                                  	; 14/12/2022	
 21732                                  	; 25/10/2022
 21733 00001302 E89B00                  	call	int_xx_first_check
 21734 00001305 730C                    	jnc	short int_0E_end ; int_0E_first
 21735                                  
 21736                                  ; 14/12/2022
 21737                                  %if 0	
 21738                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21739                                  	push	ds
 21740                                  	lds	bx,[es:si]
 21741                                  	push	ds
 21742                                  	pop	dx
 21743                                  		
 21744                                  	cmp	dx,0
 21745                                  	je	short int_0E_first
 21746                                  
 21747                                  	cmp	byte [bx],0CFh
 21748                                  	je	short int_0E_first
 21749                                  	
 21750                                  	cmp	word [bx+6],424Bh
 21751                                  	je	short int_0E_not_first
 21752                                  	
 21753                                  	cmp	dx,0F000h
 21754                                  	jne	short int_0E_not_first
 21755                                  
 21756                                  	push	es
 21757                                  	push	dx
 21758                                  	mov	dx,0F000h
 21759                                  	mov	es,dx
 21760                                  	cmp	bx,[es:0FF01h]
 21761                                  	pop	dx
 21762                                  	pop	es
 21763                                  	je	short int_0E_first
 21764                                  %endif
 21765                                  	
 21766                                  int_0E_not_first:
 21767                                  	; 14/12/2022
 21768                                  	; 25/10/2022
 21769                                  	;pop	ds
 21770 00001307 BF[6506]                	mov	di,INT19OLD0E
 21771 0000130A BB[B900]                	mov	bx,old0E
 21772 0000130D BA[B700]                	mov	dx,int0E
 21773 00001310 E8B700                  	call	new_init_loop
 21774                                  
 21775                                  	; 14/12/2022
 21776                                  	;jmp	short int_0E_end
 21777                                  ;int_0E_first:
 21778                                  	; 25/10/2022
 21779                                  	;pop	ds	
 21780                                  
 21781                                  int_0E_end:
 21782                                  
 21783                                  stkinit_72:
 21784 00001313 BEC801                  	mov	si,72h*4 ; 456
 21785                                  	
 21786                                  	; 14/12/2022
 21787                                  	; 25/10/2022
 21788 00001316 E88700                  	call	int_xx_first_check
 21789 00001319 730C                    	jnc	short int_72_end ; int_72_first
 21790                                  
 21791                                  ; 14/12/2022
 21792                                  %if 0	
 21793                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21794                                  	push	ds
 21795                                  	lds	bx,[es:si]
 21796                                  	push	ds
 21797                                  	pop	dx
 21798                                  		
 21799                                  	cmp	dx,0
 21800                                  	je	short int_72_first
 21801                                  
 21802                                  	cmp	byte [bx],0CFh
 21803                                  	je	short int_72_first
 21804                                  	
 21805                                  	cmp	word [bx+6],424Bh
 21806                                  	je	short int_72_not_first
 21807                                  	
 21808                                  	cmp	dx,0F000h
 21809                                  	jne	short int_72_not_first
 21810                                  
 21811                                  	push	es
 21812                                  	push	dx
 21813                                  	mov	dx,0F000h
 21814                                  	mov	es,dx
 21815                                  	cmp	bx,[es:0FF01h]
 21816                                  	pop	dx
 21817                                  	pop	es
 21818                                  	je	short int_72_first
 21819                                  %endif
 21820                                  	
 21821                                  int_72_not_first:
 21822                                  	; 14/12/2022
 21823                                  	; 25/10/2022
 21824                                  	;pop	ds
 21825 0000131B BF[6F06]                	mov	di,INT19OLD72
 21826 0000131E BB[D100]                	mov	bx,old72
 21827 00001321 BA[CF00]                	mov	dx,int72
 21828 00001324 E8A300                  	call	new_init_loop
 21829                                  
 21830                                  	; 14/12/2022
 21831                                  	;jmp	short int_72_end
 21832                                  ;int_72_first:
 21833                                  	; 25/10/2022
 21834                                  	;pop	ds
 21835                                  
 21836                                  int_72_end:
 21837                                  
 21838                                  stkinit_73:
 21839 00001327 BECC01                  	mov	si,73h*4 ; 460
 21840                                  	
 21841                                  	; 14/12/2022
 21842                                  	; 25/10/2022
 21843 0000132A E87300                  	call	int_xx_first_check
 21844 0000132D 730C                    	jnc	short int_73_end ; int_73_first
 21845                                  
 21846                                  ; 14/12/2022
 21847                                  %if 0	
 21848                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21849                                  	push	ds
 21850                                  	lds	bx,[es:si]
 21851                                  	push	ds
 21852                                  	pop	dx
 21853                                  		
 21854                                  	cmp	dx,0
 21855                                  	je	short int_73_first
 21856                                  
 21857                                  	cmp	byte [bx],0CFh
 21858                                  	je	short int_73_first
 21859                                  	
 21860                                  	cmp	word [bx+6],424Bh
 21861                                  	je	short int_73_not_first
 21862                                  	
 21863                                  	cmp	dx,0F000h
 21864                                  	jne	short int_73_not_first
 21865                                  
 21866                                  	push	es
 21867                                  	push	dx
 21868                                  	mov	dx,0F000h
 21869                                  	mov	es,dx
 21870                                  	cmp	bx,[es:0FF01h]
 21871                                  	pop	dx
 21872                                  	pop	es
 21873                                  	je	short int_73_first
 21874                                  %endif	
 21875                                  	
 21876                                  int_73_not_first:
 21877                                  	; 14/12/2022
 21878                                  	; 25/10/2022
 21879                                  	;pop	ds
 21880 0000132F BF[7406]                	mov	di,INT19OLD73
 21881 00001332 BB[E900]                	mov	bx,old73
 21882 00001335 BA[E700]                	mov	dx,int73
 21883 00001338 E88F00                  	call	new_init_loop
 21884                                  
 21885                                  	; 14/12/2022
 21886                                  	;jmp	short int_73_end
 21887                                  ;int_73_first:
 21888                                  	; 25/10/2022
 21889                                  	;pop	ds
 21890                                  
 21891                                  int_73_end:
 21892                                  
 21893                                  stkinit_74:
 21894 0000133B BED001                  	mov	si,74h*4 ; 464
 21895                                  	
 21896                                  	; 14/12/2022
 21897                                  	; 25/10/2022
 21898 0000133E E85F00                  	call	int_xx_first_check
 21899 00001341 730C                    	jnc	short int_74_end ; int_74_first
 21900                                  
 21901                                  ; 14/12/2022
 21902                                  %if 0		
 21903                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21904                                  	push	ds
 21905                                  	lds	bx,[es:si]
 21906                                  	push	ds
 21907                                  	pop	dx
 21908                                  		
 21909                                  	cmp	dx,0
 21910                                  	je	short int_74_first
 21911                                  
 21912                                  	cmp	byte [bx],0CFh
 21913                                  	je	short int_74_first
 21914                                  	
 21915                                  	cmp	word [bx+6],424Bh
 21916                                  	je	short int_74_not_first
 21917                                  	
 21918                                  	cmp	dx,0F000h
 21919                                  	jne	short int_74_not_first
 21920                                  
 21921                                  	push	es
 21922                                  	push	dx
 21923                                  	mov	dx,0F000h
 21924                                  	mov	es,dx
 21925                                  	cmp	bx,[es:0FF01h]
 21926                                  	pop	dx
 21927                                  	pop	es
 21928                                  	je	short int_74_first
 21929                                  %endif
 21930                                  
 21931                                  int_74_not_first:
 21932                                  	; 14/12/2022
 21933                                  	; 25/10/2022
 21934                                  	;pop	ds
 21935 00001343 BF[7906]                	mov	di,INT19OLD74
 21936 00001346 BB[0101]                	mov	bx,old74
 21937 00001349 BA[FF00]                	mov	dx,int74
 21938 0000134C E87B00                  	call	new_init_loop
 21939                                  	
 21940                                  	; 14/12/2022
 21941                                  	;jmp	short int_74_end
 21942                                  ;int_74_first:
 21943                                  	; 25/10/2022
 21944                                  	;pop	ds
 21945                                  
 21946                                  int_74_end:
 21947                                  
 21948                                  stkinit_76:
 21949 0000134F BED801                  	mov	si,76h*4 ; 472
 21950                                  	
 21951                                  	; 14/12/2022
 21952                                  	; 25/10/2022
 21953 00001352 E84B00                  	call	int_xx_first_check
 21954 00001355 730E                    	jnc	short int_76_end ; int_76_first
 21955                                  
 21956                                  ; 14/12/2022
 21957                                  %if 0	
 21958                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21959                                  	push	ds
 21960                                  	lds	bx,[es:si]
 21961                                  	push	ds
 21962                                  	pop	dx
 21963                                  		
 21964                                  	cmp	dx,0
 21965                                  	je	short int_76_first
 21966                                  
 21967                                  	cmp	byte [bx],0CFh
 21968                                  	je	short int_76_first
 21969                                  	
 21970                                  	cmp	word [bx+6],424Bh
 21971                                  	je	short int_76_not_first
 21972                                  	
 21973                                  	cmp	dx,0F000h
 21974                                  	jne	short int_76_not_first
 21975                                  
 21976                                  	push	es
 21977                                  	push	dx
 21978                                  	mov	dx,0F000h
 21979                                  	mov	es,dx
 21980                                  	cmp	bx,[es:0FF01h]
 21981                                  	pop	dx
 21982                                  	pop	es
 21983                                  	je	short int_76_first
 21984                                  %endif
 21985                                  	
 21986                                  int_76_not_first:
 21987                                  	; 14/12/2022
 21988                                  	; 25/10/2022
 21989                                  	;pop	ds
 21990 00001357 BF[7E06]                	mov	di,INT19OLD76
 21991 0000135A BB[1901]                	mov	bx,old76
 21992 0000135D BA[1701]                	mov	dx,int76
 21993 00001360 E86700                  	call	new_init_loop
 21994                                  
 21995                                  	; 14/12/2022
 21996 00001363 EB00                    	jmp	short int_76_end
 21997                                  ;int_76_first:
 21998                                  	; 25/10/2022
 21999                                  	;pop	ds
 22000                                  
 22001                                  int_76_end:
 22002                                  
 22003                                  stkinit_77:
 22004 00001365 BEDC01                  	mov	si,77h*4 ; 476
 22005                                  	
 22006                                  	; 14/12/2022
 22007                                  	; 25/10/2022
 22008 00001368 E83500                  	call	int_xx_first_check
 22009 0000136B 730C                    	jnc	short int_77_end ; int_77_first
 22010                                  
 22011                                  ; 14/12/2022
 22012                                  %if 0	
 22013                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22014                                  	push	ds
 22015                                  	lds	bx,[es:si]
 22016                                  	push	ds
 22017                                  	pop	dx
 22018                                  		
 22019                                  	cmp	dx,0
 22020                                  	je	short int_77_first
 22021                                  
 22022                                  	cmp	byte [bx],0CFh
 22023                                  	je	short int_77_first
 22024                                  	
 22025                                  	cmp	word [bx+6],424Bh
 22026                                  	je	short int_77_not_first
 22027                                  	
 22028                                  	cmp	dx,0F000h
 22029                                  	jne	short int_77_not_first
 22030                                  
 22031                                  	push	es
 22032                                  	push	dx
 22033                                  	mov	dx,0F000h
 22034                                  	mov	es,dx
 22035                                  	cmp	bx,[es:0FF01h]
 22036                                  	pop	dx
 22037                                  	pop	es
 22038                                  	je	short int_77_first
 22039                                  %endif
 22040                                  	
 22041                                  int_77_not_first:
 22042                                  	; 14/12/2022
 22043                                  	; 25/10/2022
 22044                                  	;pop	ds
 22045 0000136D BF[8306]                	mov	di,INT19OLD77
 22046 00001370 BB[3101]                	mov	bx,old77
 22047 00001373 BA[2F01]                	mov	dx,int77
 22048 00001376 E85100                  	call	new_init_loop
 22049                                  
 22050                                  	; 14/12/2022
 22051                                  	;jmp	short int_77_end
 22052                                  ;int_77_first:
 22053                                  	; 25/10/2022
 22054                                  	;pop	ds
 22055                                  
 22056                                  int_77_end:
 22057 00001379 1E                      	push	ds
 22058 0000137A B800F0                  	mov	ax,0F000h		; look at the model byte
 22059 0000137D 8ED8                    	mov	ds,ax
 22060 0000137F 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 22061 00001384 1F                      	pop	ds
 22062 00001385 7504                    	jne	short skip_enablenmis
 22063                                  
 22064 00001387 B027                    	mov	al,27h			; enable convertible nmis
 22065 00001389 E672                    	out	72h,al
 22066                                  
 22067                                  ; 25/10/2022
 22068                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 22069                                  
 22070                                  skip_enablenmis:
 22071 0000138B FB                      	sti
 22072                                  	;;mov	ax,Bios_Data ; 70h
 22073                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22074                                  	; 21/10/2022
 22075 0000138C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22076 0000138F 8ED8                    	mov	ds,ax
 22077                                  
 22078                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 22079                                  
 22080 00001391 C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 22081                                  					; initialization is complete
 22082                                  
 22083 00001396 5D                      	pop	bp			; restore all
 22084 00001397 5E                      	pop	si
 22085 00001398 5F                      	pop	di
 22086 00001399 5A                      	pop	dx
 22087 0000139A 59                      	pop	cx
 22088 0000139B 5B                      	pop	bx
 22089 0000139C 07                      	pop	es
 22090 0000139D 1F                      	pop	ds
 22091 0000139E 58                      	pop	ax
 22092 0000139F C3                      	retn
 22093                                  
 22094                                  ; 14/12/2022
 22095                                  ; ----------------------------------------------------------------------
 22096                                  
 22097                                  	; 14/12/2022
 22098                                  	; 25/10/2022
 22099                                  ;%if 0
 22100                                  	; 27/03/2019 - Retro DOS v4.0
 22101                                  int_xx_first_check:
 22102 000013A0 1E                      	push	ds
 22103 000013A1 26C51C                  	lds	bx,[es:si]
 22104 000013A4 1E                      	push	ds
 22105 000013A5 5A                      	pop	dx
 22106                                  		
 22107                                  	;cmp	dx,0
 22108                                  	;je	short int_xx_first
 22109                                  	; 05/09/2023
 22110 000013A6 21D2                    	and	dx,dx
 22111 000013A8 741E                    	jz	short int_xx_first
 22112                                  
 22113 000013AA 803FCF                  	cmp	byte [bx],0CFh
 22114 000013AD 7419                    	je	short int_xx_first
 22115                                  	
 22116 000013AF 817F064B42              	cmp	word [bx+6],424Bh
 22117 000013B4 7411                    	je	short int_xx_not_first
 22118                                  	
 22119 000013B6 81FA00F0                	cmp	dx,0F000h
 22120 000013BA 750B                    	jne	short int_xx_not_first
 22121                                  
 22122 000013BC 06                      	push	es
 22123                                  	;push	dx
 22124                                  	;mov	dx,0F000h
 22125 000013BD 8EC2                    	mov	es,dx
 22126 000013BF 263B1E01FF              	cmp	bx,[es:0FF01h]
 22127                                        	;pop	dx
 22128 000013C4 07                      	pop	es
 22129 000013C5 7401                    	je	short int_xx_first
 22130                                  
 22131                                  int_xx_not_first:
 22132 000013C7 F9                      	stc
 22133                                  int_xx_first:
 22134 000013C8 1F                      	pop	ds
 22135 000013C9 C3                      	retn
 22136                                  
 22137                                  ;%endif
 22138                                  
 22139                                  ; ----------------------------------------------------------------------
 22140                                  ; 27/03/2019 - Retro DOS v4.0
 22141                                  
 22142                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22143                                  ; (SYSINIT:1610h)
 22144                                  
 22145                                  new_init_loop:
 22146                                  
 22147                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 22148                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 22149                                  ;	dx=ds:offset of intxx, the new interrupt handler
 22150                                  ;	di=offset value of int19old&aa variable in bios.
 22151                                  ;	es=zero, segid of vector table
 22152                                  ;	ds=relocated stack code segment
 22153                                  
 22154 000013CA 268B04                  	mov	ax,[es:si]		;remember offset in vector
 22155 000013CD 8907                    	mov	[bx],ax			; to original owner in ds
 22156 000013CF 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 22157 000013D3 894702                  	mov	[bx+2],ax		; to original owner in ds
 22158                                  
 22159 000013D6 1E                      	push	ds
 22160                                  	;;mov	ax,Bios_Data ; 70h
 22161                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22162                                  	; 21/10/2022
 22163 000013D7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22164 000013DA 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 22165 000013DC 268B04                  	mov	ax,[es:si]		;int 19 handler
 22166 000013DF 8905                    	mov	[di],ax
 22167 000013E1 268B4402                	mov	ax,[es:si+2]
 22168 000013E5 894502                  	mov	[di+2],ax
 22169 000013E8 1F                      	pop	ds
 22170                                  
 22171 000013E9 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 22172 000013EC 268C5C02                	mov	[es:si+2],ds
 22173 000013F0 C3                      	retn
 22174                                  
 22175                                  ; End of STACK initialization routine
 22176                                  ; ----------------------------------------------------------------------
 22177                                  
 22178                                  ; ----------------------------------------------------------------------
 22179                                  ;set the devmark for mem command.
 22180                                  ;in: [memhi] - the address to place devmark
 22181                                  ;    [memlo] = 0
 22182                                  ;    al = id for devmark_id
 22183                                  ;out: devmark established.
 22184                                  ;     the address saved in cs:[devmark_addr]
 22185                                  ;     [memhi] increase by 1.
 22186                                  ; ----------------------------------------------------------------------
 22187                                  
 22188                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22189                                  ; (SYSINIT:1637h)
 22190                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 22191                                  ; (SYSINIT:176Ch)
 22192                                  
 22193                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 22194                                  
 22195                                  setdevmark:
 22196                                  
 22197                                  	; 04/09/2023
 22198                                  	;push	es
 22199                                  	;push	cx
 22200                                  
 22201 000013F1 2E8B0E[E003]            	mov	cx,[cs:memhi]
 22202 000013F6 2E890E[0E14]            	mov	[cs:devmark_addr],cx
 22203 000013FB 8EC1                    	mov	es,cx
 22204                                  	; 25/10/2022
 22205                                  	;mov	[es:devmark.id],al
 22206 000013FD 26A20000                	mov	[es:0],al
 22207 00001401 41                      	inc	cx
 22208                                  	;mov	[es:devmark.seg],cx
 22209 00001402 26890E0100              	mov	[es:1],cx
 22210                                  
 22211                                  	; 04/09/2023
 22212                                  	;pop	cx
 22213                                  	;pop	es
 22214                                  	
 22215 00001407 2EFF06[E003]            	inc	word [cs:memhi]
 22216 0000140C C3                      	retn
 22217                                  
 22218                                  ; ----------------------------------------------------------------------
 22219                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22220                                  ; ----------------------------------------------------------------------
 22221                                  ; 27/03/2019 - Retro DOS v4.0
 22222                                  
 22223                                  ;MULTI_CONFIG	equ 1
 22224                                  
 22225                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22226                                                                          ; allocation strategy call
 22227                                  
 22228                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22229                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22230                                  
 22231                                  default_filenum equ 8
 22232                                  
 22233                                  ;stacksw	equ true		; include switchable hardware stacks
 22234                                  
 22235                                  ; external variable defined in ibmbio module for multi-track
 22236                                  
 22237                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22238                                  					; it on after handling config.sys file as a
 22239                                  					; default value,if multrk_flag = multrk_off1.
 22240                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22241                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22242                                  
 22243                                  ; if stacksw
 22244                                  
 22245                                  ; internal stack parameters
 22246                                  
 22247                                  ;entrysize	equ 8
 22248                                  
 22249                                  ;mincount	equ 8
 22250                                  ;defaultcount	equ 9
 22251                                  ;maxcount	equ 64
 22252                                  
 22253                                  ;minsize 	equ 32
 22254                                  ;defaultsize	equ 128
 22255                                  ;maxsize 	equ 512
 22256                                  
 22257                                  DOS_FLAG_OFFSET	equ 86h
 22258                                  
 22259                                  ;ifdef MULTI_CONFIG
 22260                                  ;
 22261                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22262                                  ;   may be loaded as a dword ptr
 22263                                  
 22264                                  ; 25/10/2022
 22265                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 22266                                  ;               			;  a scratch env, this is its length
 22267                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 22268                                  ;                   			;  segment of work area
 22269                                  ;
 22270                                  ;config_cmd:	db  0  			; current config cmd
 22271                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 22272                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 22273                                  
 22274                                  ;endif ; MULTI_CONFIG
 22275                                  
 22276 0000140D 00                      multdeviceflag:	db  0
 22277                                  
 22278 0000140E 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22279                                  
 22280 00001410 00                      setdevmarkflag: db  0			;flag used for devmark
 22281                                  
 22282                                  ; 12/12/2022
 22283                                  ;driver_units:	db  0			;total unitcount for driver
 22284                                  
 22285                                  ; 12/12/2022
 22286                                  ;ems_stub_installed:
 22287                                  ;		db  0
 22288                                  
 22289                                  ; 12/12/2022	
 22290                                  ;align 2
 22291                                  
 22292                                  badparm_ptr:	; label	dword
 22293 00001411 0000                    badparm_off:	dw  0
 22294 00001413 0000                    badparm_seg:	dw  0
 22295                                  
 22296                                  ;******************************************************************************
 22297                                  ;take care of config.sys file.
 22298                                  ;system parser data and code.
 22299                                  ;******************************************************************************
 22300                                  
 22301                                  ;*******************************************************************
 22302                                  ; parser options set for msbio sysconf module
 22303                                  ;*******************************************************************
 22304                                  ;
 22305                                  ;**** default assemble swiches definition **************************
 22306                                  
 22307                                  ;farsw	equ 0		; near call expected
 22308                                  ;datesw	equ 0		; check date format
 22309                                  ;timesw	equ 0		; check time format
 22310                                  ;filesw	equ 1		; check file specification
 22311                                  ;capsw	equ 0		; perform caps if specified
 22312                                  ;cmpxsw	equ 0		; check complex list
 22313                                  ;numsw	equ 1		; check numeric value
 22314                                  ;keysw	equ 0		; support keywords
 22315                                  ;swsw	equ 1		; support switches
 22316                                  ;val1sw	equ 1		; support value definition 1
 22317                                  ;val2sw	equ 0		; support value definition 2
 22318                                  ;val3sw	equ 1		; support value definition 3
 22319                                  ;drvsw	equ 1		; support drive only format
 22320                                  ;qussw	equ 0		; support quoted string format
 22321                                  
 22322                                  ; psdata_seg equ cs
 22323                                  
 22324                                  	;.xlist
 22325                                  	;include parse.asm		;together with psdata.inc
 22326                                  	;.list
 22327                                  
 22328                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22329                                  ; ======================================================================
 22330                                  ; 27/03/2019 - Retro DOS v4.0
 22331                                  
 22332                                  ; 30/03/2019
 22333                                  ; VERSION.INC (MSDOS 6.0) 
 22334                                  ; Set DBCS Blank constant
 22335                                  
 22336                                  ; ifndef DBCS
 22337                                  DB_SPACE EQU 2020h
 22338                                  DB_SP_HI EQU 20h
 22339                                  DB_SP_LO EQU 20h
 22340                                  ; else
 22341                                  
 22342                                  ;*******************************************************************
 22343                                  ; Parser include file
 22344                                  ;*******************************************************************
 22345                                  
 22346                                  ;**** Equation field
 22347                                  ;-------- Character code definition
 22348                                  
 22349                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22350                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22351                                  _$P_Period	   equ	"."             ;AN020;
 22352                                  _$P_Slash	   equ	"/"             ;AN020;
 22353                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22354                                  _$P_Comma	   equ	","             ;AN000;
 22355                                  _$P_Switch	   equ	"/"             ;AN000;
 22356                                  _$P_Keyword	   equ	"="             ;AN000;
 22357                                  _$P_Colon	   equ	":"             ;AN000;
 22358                                  _$P_Plus 	   equ	"+"             ;AN000;
 22359                                  _$P_Minus	   equ	"-"             ;AN000;
 22360                                  _$P_Rparen	   equ	")"             ;AN000;
 22361                                  _$P_Lparen	   equ	"("             ;AN000;
 22362                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22363                                  _$P_DQuote	   equ	'"'             ;AN000;
 22364                                  _$P_NULL 	   equ	0		;AN000;
 22365                                  _$P_TAB		   equ	9		;AN000;
 22366                                  _$P_CR		   equ	0Dh		;AN000;
 22367                                  _$P_LF		   equ	0Ah		;AN000;
 22368                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22369                                  
 22370                                  ;-------- Masks
 22371                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22372                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22373                                  
 22374                                  ;-------- DOS function call related equs
 22375                                  
 22376                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22377                                  					; by this call, following information
 22378                                  struc _$P_CDI	
 22379 00000000 ????                     .DateF: resw 1
 22380 00000002 ??????????               .Money: resb 5
 22381 00000007 ????                     .1000:	 resb 2
 22382 00000009 ????                     .Dec:	 resb 2
 22383 0000000B ????                     .DateS: resb 2
 22384 0000000D ????                     .TimeS: resb 2
 22385 0000000F ??                          	 resb 1
 22386 00000010 ??                      	 resb 1
 22387 00000011 ??                       .TimeF: resb 1	 
 22388 00000012 ????????                	 resw 2
 22389 00000016 ????                    	 resb 2
 22390 00000018 <res Ah>                	 resw 5
 22391                                   .size:
 22392                                  endstruc
 22393                                  
 22394                                  _$P_Date_MDY	   equ	0		;AN000;
 22395                                  _$P_Date_DMY	   equ	1		;AN000;
 22396                                  _$P_Date_YMD	   equ	2		;AN000;
 22397                                  ;-------------
 22398                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22399                                  					;AN000; DS:SI will points to DBCS EV
 22400                                  ;-------------
 22401                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22402                                  					;AN000; following parameters are set
 22403                                  					;AN000; to get casemap table.
 22404                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22405                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22406                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22407                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22408                                  					; By this call following information
 22409                                  					; is returned.
 22410                                  struc _$P_DOS_TBL
 22411 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22412 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22413 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22414                                  endstruc
 22415                                  
 22416                                  ; ----------------------------------------------------------------------------
 22417                                  ; PARMS 	LABEL	BYTE
 22418                                  ;		DW	PARMSX
 22419                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22420                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22421                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22422                                  ;					; TYPICAL ARE ";", "="
 22423                                  ;					; "," & WHITESPACE ALWAYS
 22424                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22425                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22426                                  ; ----------------------------------------------------------------------------
 22427                                  
 22428                                  ;-------------------------------- PARMS block structure
 22429                                  struc _$P_PARMS_Blk
 22430 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22431 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22432 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22433                                  endstruc
 22434                                  
 22435                                  _$P_Len_PARMS	   equ	4		;AN000;
 22436                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22437                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22438                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22439                                  
 22440                                  ; ----------------------------------------------------------------------------
 22441                                  ; PARMSX	LABEL	BYTE
 22442                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22443                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22444                                  ;		:			; REPEATS maxp-1 TIMES
 22445                                  ;		DB	maxs		; # OF SWITCHES
 22446                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22447                                  ;		:			; REPEATS maxs-1 TIMES
 22448                                  ;		DB	maxk		; # OF KEYWORD
 22449                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22450                                  ;		:			; REPEATS maxk-1 TIMES
 22451                                  ; ----------------------------------------------------------------------------
 22452                                  
 22453                                  ;-------------------------------- PARMSX block structure
 22454                                  struc _$P_PARMSX_Blk		;AN000;
 22455 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22456 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22457 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22458                                  endstruc
 22459                                  
 22460                                  ; ----------------------------------------------------------------------------
 22461                                  ; << Control field definition  >>
 22462                                  ;
 22463                                  ;
 22464                                  ;CONTROL   LABEL   BYTE
 22465                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22466                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22467                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22468                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22469                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22470                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22471                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22472                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22473                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22474                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22475                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22476                                  ;				   ; 0002H=REPEATS ALLOWED
 22477                                  ;				   ; 0001H=OPTIONAL
 22478                                  ;	   DW	   FUNCTION_FLAGS
 22479                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22480                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22481                                  ;				   ; 0010H=REMOVE ":" AT END
 22482                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22483                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22484                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22485                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22486                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22487                                  ;	   :
 22488                                  ;
 22489                                  ;Note:
 22490                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22491                                  ;      DATE bit simalteniously.
 22492                                  ;
 22493                                  ;      The parser examins each bit along with the following priority.
 22494                                  ;
 22495                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22496                                  ;      FILE SPEC -> SIMPLE STRING.
 22497                                  ;
 22498                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22499                                  ;      in the result buffer is capitalized.
 22500                                  ;
 22501                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22502                                  ;
 22503                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22504                                  ;      switch, for example, '/A', then STRING points to;
 22505                                  ;
 22506                                  ;			DB    1 	; number of following synonyms
 22507                                  ;			DB   '/A',0
 22508                                  ;
 22509                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22510                                  ;
 22511                                  ;			DB    1 	; number of following synonyms
 22512                                  ;			DB   'CODEPAGE=',0
 22513                                  ;
 22514                                  ;    - "..." must consist of upper case characters only because the parser
 22515                                  ;      performs pattern matching after converting input to upper case (by
 22516                                  ;      using the current country upper case table)
 22517                                  ;
 22518                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22519                                  ;      example /A and /B, the format will be;
 22520                                  ;
 22521                                  ;			DB    2 	; number of following synonyms
 22522                                  ;			DB    '/A',0
 22523                                  ;			DB    '/B',0
 22524                                  ; ----------------------------------------------------------------------------
 22525                                  
 22526                                  ;**** Match_Flags
 22527                                  
 22528                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22529                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22530                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22531                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22532                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22533                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22534                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22535                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22536                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22537                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22538                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22539                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22540                                  
 22541                                  ;**** Function flags
 22542                                  
 22543                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22544                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22545                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22546                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22547                                  
 22548                                  ;-------------------------------- Control block structure
 22549                                  struc _$P_Control_Blk
 22550 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22551 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22552 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22553 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22554 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22555 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22556                                  endstruc
 22557                                  
 22558                                  ; ----------------------------------------------------------------------------
 22559                                  ; << Value List Definition >>
 22560                                  ;
 22561                                  ;VALUES 	LABEL	BYTE
 22562                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22563                                  ;	     +-
 22564                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22565                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22566                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22567                                  ;	     |	:
 22568                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22569                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22570                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22571                                  ;	     |	:
 22572                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22573                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22574                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22575                                  ;	     +-	:
 22576                                  ;
 22577                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22578                                  ;
 22579                                  ;Note:
 22580                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22581                                  ;      when no choice lists are provided.
 22582                                  ;
 22583                                  ;    - STRING must consist of upper case characters only because the parser
 22584                                  ;      performs pattern matching after converting input to upper case (by
 22585                                  ;      using the current country upper case table)
 22586                                  ; ----------------------------------------------------------------------------
 22587                                  
 22588                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22589                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22590                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22591                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22592                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22593                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22594                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22595                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22596                                  
 22597                                  struc _$P_Val_List
 22598 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22599 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22600 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22601 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22602 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22603                                  endstruc
 22604                                  
 22605                                  ; ----------------------------------------------------------------------------
 22606                                  ; << Result Buffer Definition  >>
 22607                                  ;
 22608                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22609                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22610                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22611                                  ;						;	3=STRING, 4=COMPLEX,
 22612                                  ;						;	5=FILESPEC, 6=DRIVE
 22613                                  ;						;	7=DATE, 8=TIME
 22614                                  ;						;	9=QUOTED STRING
 22615                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22616                                  ;
 22617                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22618                                  ;
 22619                                  ;            +-
 22620                                  ;	    | DD	n			; VALUE IF NUMBER
 22621                                  ;	    | or
 22622                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22623                                  ;	    |					; (ES presents Segment address)
 22624                                  ;	    | or
 22625                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22626                                  ;	    | or
 22627                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22628                                  ;	    | or
 22629                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22630                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22631                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22632                                  ;	    | or
 22633                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22634                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22635                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22636                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22637                                  ;	    +-
 22638                                  ;
 22639                                  ;
 22640                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22641                                  ;      list.
 22642                                  ;
 22643                                  ;      YEAR: If the input value for the year is less than 100, parser
 22644                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22645                                  ;	     the year value, he returns 1987.
 22646                                  ; ----------------------------------------------------------------------------
 22647                                  
 22648                                  ;-------------------------------- Result block structure
 22649                                  struc _$P_Result_Blk
 22650 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22651 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22652 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22653 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22654                                  endstruc
 22655                                  
 22656                                  ;--------------------------------
 22657                                  ;**** values for the type field in the result block
 22658                                  
 22659                                  _$P_EOL		   equ	0		;AN000; End of line
 22660                                  _$P_Number	   equ	1		;AN000; Number
 22661                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22662                                  _$P_String	   equ	3		;AN000; String
 22663                                  _$P_Complex	   equ	4		;AN000; Complex
 22664                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22665                                  _$P_Drive	   equ	6		;AN000; Drive
 22666                                  _$P_Date_F	   equ	7		;AN000; Date
 22667                                  _$P_Time_F	   equ	8		;AN000; Time
 22668                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22669                                  
 22670                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22671                                  
 22672                                  ;**** Return code
 22673                                  ;
 22674                                  ; following return code will be returned in the AX register.
 22675                                  
 22676                                  _$P_No_Error	   equ	0		;AN000; No error
 22677                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22678                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22679                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22680                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22681                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22682                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22683                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22684                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22685                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22686                                  
 22687                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22688                                  
 22689                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22690                                  
 22691                                  ;********************** Local Data *************************************
 22692 00001415 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22693 00001417 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22694 00001419 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22695 0000141B 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22696 0000141D 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22697 0000141E 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22698 00001420 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22699 00001422 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22700                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22701                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22702                                  
 22703                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22704                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22705                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22706                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22707                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22708                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22709                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22710                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22711                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22712                                  
 22713                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22714                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22715                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22716                                  
 22717 00001424 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22718 00001426 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22719 00001428 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22720 0000142A 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22721                                  
 22722 0000142C 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22723                                  _$P_STRING_BUF_END equ	$		;AN000;
 22724                                  
 22725                                  ; 25/10/2022
 22726                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22727                                  
 22728 000014AC FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22729 000014AD 0000                    		   dw	0		;AN000; offset	of char case map table
 22730 000014AF 0000                    		   dw	0		;AN000; segment of char case map table
 22731                                  ; 25/10/2022
 22732                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22733                                  ;		   dw	0		;AN000; offset	of file case map table
 22734                                  ;		   dw	0		;AN000; segment of file case map table
 22735                                  
 22736                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22737                                  ;
 22738                                  
 22739                                  ;M029
 22740                                  ;!!!WARNING!!!
 22741                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22742                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22743                                  ;changes need to be made in SYSPARSE
 22744                                  
 22745                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22746                                  
 22747                                  ; 25/10/2022
 22748                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22749                                  
 22750 000014B1 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22751                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22752                                  
 22753                                  ;ENDIF					;AN000;(of FileSW)
 22754                                  
 22755                                  ; delimiter parsing
 22756                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22757                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22758                                  
 22759                                  ;filespec error flag
 22760 000014BA 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22761                                  					;AN033;  was detected.
 22762                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22763                                  
 22764                                  
 22765                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22766                                  ; ======================================================================
 22767                                  ; 27/03/2019 - Retro DOS v4.0
 22768                                  
 22769                                  ;***********************************************************************
 22770                                  ; SysParse;
 22771                                  ;
 22772                                  ;  Function : Parser Entry
 22773                                  ;
 22774                                  ;  Input: DS:SI -> command line
 22775                                  ;	  ES:DI -> parameter block
 22776                                  ;	  cs -> psdata.inc
 22777                                  ;	  CX = operand ordinal
 22778                                  ;
 22779                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22780                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22781                                  ;		 is in DS.
 22782                                  ;
 22783                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22784                                  ;		    invalid value list. But this parser does NOT implement
 22785                                  ;		    this feature. Therefore CY always zero.
 22786                                  ;
 22787                                  ;	   CY = 0   AX = return code
 22788                                  ;		    BL = terminated delimiter code
 22789                                  ;		    CX = new operand ordinal
 22790                                  ;		    SI = set past scaned operand
 22791                                  ;		    DX = selected result buffer
 22792                                  ;
 22793                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22794                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22795                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22796                                  ;
 22797                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22798                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22799                                  ;
 22800                                  ;-------- Modification History -----------------------------------------
 22801                                  ;
 22802                                  ;  4/04/87 : Created by K. K,
 22803                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22804                                  ;	   : JMP SHORT assemble error (tm02)
 22805                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22806                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22807                                  ;	     DateSW equ 1)	      (tm04)
 22808                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22809                                  ;				      (tm05) in PSDATA.INC
 22810                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22811                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22812                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22813                                  ;	     value-list block	      (tm07)
 22814                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22815                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22816                                  ;	     (tm08)
 22817                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22818                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22819                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22820                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22821                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22822                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22823                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22824                                  ;					  (tm12)
 22825                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22826                                  ;					  (tm13)
 22827                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22828                                  ;					  (tm14)
 22829                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22830                                  ;					  (tm15)
 22831                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22832                                  
 22833                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22834                                  
 22835                                  ;  7/28/87 : Kerry S (;AN018;)
 22836                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22837                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22838                                  ;	     affected: _$P_Chk_SW_Control.
 22839                                  
 22840                                  ;  7/29/87 : Kerry S (;AN019;)
 22841                                  ;	     Now allow the optional bit in match flags for switches.  This
 22842                                  ;	     allows the switch to be encountered with a value or without a
 22843                                  ;	     value and no error is returned.
 22844                                  ;
 22845                                  
 22846                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22847                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22848                                  ;	     within a date response, instead of checking just for the one
 22849                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22850                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22851                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22852                                  
 22853                                  ;  9/1/87  : Kerry S (;AN021)
 22854                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22855                                  ;	     the command line with the string in the control block the
 22856                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22857                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22858                                  ;	     string on the command line than in the synonym list in the control
 22859                                  ;	     block.  I put in a test for a null in the control block so the
 22860                                  ;	     string in the control block must be the same length as the string
 22861                                  ;	     preceeding the colon or equal on the command line.
 22862                                  
 22863                                  ;  8/28/87 : Kerry S (;AN022;)
 22864                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22865                                  ;	     problems for people who included it themselves in a segment other
 22866                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22867                                  ;	     segment.
 22868                                  
 22869                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22870                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22871                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22872                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22873                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22874                                  ;	     BL be used if TIME is being parsed.
 22875                                  
 22876                                  ;  9/24/87 : Ed K
 22877                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22878                                  ;	     invocations with their normally expanded code; made comments
 22879                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22880                                  
 22881                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22882                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22883                                  ;	     pointed to by non-existant CONTROL.
 22884                                  
 22885                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22886                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22887                                  ;	     support to frame quoted text string with single quote.
 22888                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22889                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22890                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22891                                  
 22892                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22893                                  ;	     quote chars within a quoted string is supposed to be reported as
 22894                                  ;	     one quote character, but is reported as two quotes.  This changed
 22895                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22896                                  
 22897                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22898                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22899                                  
 22900                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22901                                  
 22902                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22903                                  ;	     psdata buffer should have cs.
 22904                                  
 22905                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22906                                  ;	     positional missing.
 22907                                  
 22908                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22909                                  ;	     as a line delimiter, should use carriage return.
 22910                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22911                                  
 22912                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22913                                  
 22914                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22915                                  ;	     endless loop since SI is returned still pointing to start
 22916                                  ;	     of that parm.
 22917                                  
 22918                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22919                                  ;	     Vector to returned string has CS instead of cs, but
 22920                                  ;	     when tried to fix it on previous version, changed similar
 22921                                  ;	     but wrong place.
 22922                                  
 22923                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22924                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22925                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22926                                  
 22927                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22928                                  ;	     in a filespec, then flag an error.
 22929                                  
 22930                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22931                                  ;	     indexed off of the cs equate instead of the DS register.
 22932                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22933                                  ;  -->	     local parser data. Why were some references to local data changed
 22934                                  ;	     to do this before, but not all ?????
 22935                                  
 22936                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22937                                  
 22938                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22939                                  ;
 22940                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22941                                  
 22942                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22943                                  
 22944                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22945                                  ;	     separator in TIME before hundredths field.
 22946                                  ;
 22947                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22948                                  ;			strings as keywords.
 22949                                  ;
 22950                                  ;***********************************************************************
 22951                                  
 22952                                  ;IF FarSW				;AN000;(Check if need far return)
 22953                                  ;SysParse proc far			;AN000;
 22954                                  ;ELSE					;AN000;
 22955                                  ;SysParse proc near			;AN000;
 22956                                  ;ENDIF					;AN000;(of FarSW)
 22957                                  
 22958                                  ; 27/03/2019 - Retro DOS v4.0
 22959                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22960                                  
 22961                                  ; 25/10/2022 - Retro DOS v4.0
 22962                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22963                                  
 22964                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 22965                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 22966                                  
 22967                                  SysParse:
 22968                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 22969                                  	; dx = 0
 22970 000014BB 1E                      	push	ds ; *!*
 22971 000014BC 0E                      	push	cs
 22972 000014BD 1F                      	pop	ds 
 22973                                  
 22974                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22975                                  	;cld				;AN000; confirm forward direction
 22976                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22977                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22978                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22979                                  	;
 22980                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22981                                  
 22982                                  	; 06/09/2023
 22983 000014BE 8916[2214]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 22984 000014C2 FC                      	cld				;AN000; confirm forward direction
 22985 000014C3 890E[1514]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 22986 000014C7 8916[1714]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 22987 000014CB 8916[2A14]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 22988 000014CF 8916[1B14]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 22989                                  
 22990                                  ;M029 -- Begin changes
 22991                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22992                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22993                                  ;corrupts this table but does not corrupt the checksum region will leave
 22994                                  ;command.com parsing in an inconsistent state.
 22995                                  ; NB: The special characters string has been hardcoded here. If any change
 22996                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22997                                  
 22998                                  ;IF FileSW + DrvSW
 22999                                  	;mov	word [cs:_$P_FileSp_Char], ']['
 23000                                  	;mov	word [cs:_$P_FileSp_Char+2], '<|'
 23001                                  	;mov	word [cs:_$P_FileSp_Char+4], '+>'
 23002                                  	;mov 	word [cs:_$P_FileSp_Char+6], ';='
 23003                                  
 23004                                  	; 06/09/2023
 23005 000014D3 C706[B114]5D5B          	mov	word [_$P_FileSp_Char], ']['
 23006 000014D9 C706[B314]3C7C          	mov	word [_$P_FileSp_Char+2], '<|'
 23007 000014DF C706[B514]2B3E          	mov	word [_$P_FileSp_Char+4], '+>'
 23008 000014E5 C706[B714]3B3D          	mov 	word [_$P_FileSp_Char+6], ';='
 23009                                  ;ENDIF
 23010                                  	; 06/09/2023
 23011 000014EB 1F                      	pop	ds ; *!*
 23012                                  
 23013                                  ;M029 -- End of changes
 23014                                  
 23015 000014EC E88106                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 23016 000014EF 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 23017                                  ;--------------------------- End of Line
 23018 000014F1 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 23019 000014F4 53                      	push	bx			;AN000;
 23020                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 23021                                  					;AN000; Get the PARMSX address to
 23022 000014F5 268B1D                  	mov	bx,[es:di]
 23023                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 23024                                  					;AN000; check ORDINAL to see if the minimum
 23025 000014F8 263A0F                  	cmp	cl,[es:bx]	
 23026 000014FB 7303                    	jae	short _$P_Fin		;AN000; positional found.
 23027                                  
 23028 000014FD B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 23029                                  _$P_Fin: 				;AN000;
 23030 00001500 5B                      	pop	bx			;AN000;
 23031 00001501 E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 23032                                  ;---------------------------
 23033                                  _$P_Start:				;AN000;
 23034 00001504 2E8936[2414]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 23035 00001509 53                      	push	bx			;AN000; quoted string or file spec.
 23036 0000150A 57                      	push	di			;AN000;
 23037 0000150B 55                      	push	bp			;AN000;
 23038                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 23039                                  	; 02/11/2022
 23040                                  	;lea	bx,[_$P_STRING_BUF]
 23041                                  	; 07/09/2023
 23042 0000150C BB[2C14]                	mov	bx,_$P_STRING_BUF
 23043 0000150F 2EF606[2314]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 23044 00001515 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 23045                                  
 23046                                  _$P_Pack_Loop:				;AN000;
 23047 00001517 AC                      	lodsb				;AN000; Pick a operand from buffer
 23048 00001518 E8FA06                  	call	_$P_Chk_Switch		;AN000; Check switch character
 23049 0000151B 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 23050                                  
 23051 0000151D E87206                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 23052 00001520 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 23053                                  
 23054 00001522 E8A206                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 23055 00001525 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 23056                                  
 23057 00001527 2EF606[2314]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 23058                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 23059 0000152D 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 23060                                  
 23061 0000152F E83E06                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 23062 00001532 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 23063                                  
 23064                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 23065 00001534 2EF606[2314]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 23066 0000153A 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 23067                                  
 23068 0000153C 4E                      	dec	si			;AN000; (tm08)
 23069 0000153D EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 23070                                  
 23071                                  _$P_PL01:				;AN000;
 23072 0000153F 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 23073 00001542 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 23074 00001544 7506                    	jne	short _$P_PL00 		;AN000; then
 23075                                  
 23076 00001546 2E800E[2314]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 23077                                  _$P_PL00:				;AN000;
 23078 0000154C 43                      	inc	bx			;AN000; ready to see next byte
 23079 0000154D E8DE06                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 23080 00001550 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 23081                                  
 23082 00001552 AC                      	lodsb				;AN000; if yes, store
 23083 00001553 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 23084 00001556 43                      	inc	bx			;AN000; update pointer
 23085 00001557 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 23086                                  
 23087                                  _$P_Pack_End_BY_EOL:			;AN000;
 23088 00001559 4E                      	dec	si			;AN000; backup si pointer
 23089                                  _$P_Pack_End:				;AN000;
 23090 0000155A 2E8936[1914]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 23091                                  	; 07/09/2023
 23092                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 23093 0000155F 30E4                    	xor	ah,ah ; 0 ; *
 23094 00001561 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 23095                                  	;
 23096 00001564 2E891E[2814]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 23097                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 23098 00001569 268B1D                  	mov	bx,[es:di]
 23099                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 23100                                  	; 02/11/2022
 23101                                  	;lea	si,[_$P_STRING_BUF]
 23102                                  	; 07/09/2023
 23103 0000156C BE[2C14]                	mov	si,_$P_STRING_BUF
 23104 0000156F 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 23105 00001573 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 23106                                  
 23107 00001575 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 23108 00001579 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 23109                                  
 23110 0000157B 2EF606[2314]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 23111 00001581 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 23112                                  
 23113                                  _$P_Positional_Manager:			;AN000; else process as positional
 23114 00001583 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23115                                  	; 07/09/2023
 23116                                  	;xor	ah,ah			;AN000; ax = maxp
 23117 00001587 2E3906[1514]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 23118 0000158C 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 23119                                  
 23120 0000158E 2EA1[1514]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 23121 00001592 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 23122 00001594 43                      	inc	bx			;AC035; add '2' to
 23123 00001595 43                      	inc	bx			;AC035;  BX reg
 23124                                  					;AN000; now bx points to 1st CONTROL
 23125 00001596 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 23126 00001598 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 23127 0000159B E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 23128 0000159E EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23129                                  
 23130                                  _$P_Too_Many_Error:			;AN000;
 23131 000015A0 2EC706[1714]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 23132 000015A7 EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23133                                  
 23134                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 23135                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 23136                                  get_maxp:
 23137                                  	;mov	al,[es:bx+1]
 23138 000015A9 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23139                                  	; 07/09/2023
 23140                                  	; ah=0 ; *
 23141                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 23142 000015AD 30ED                    	xor	ch,ch ; **
 23143 000015AF 40                      	inc	ax			;AN000;
 23144 000015B0 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23145 000015B2 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23146 000015B4 C3                      	retn
 23147                                  
 23148                                  _$P_SW_Manager:				;AN000;
 23149                                  	; 07/09/2023
 23150                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23151                                  	;xor	ah,ah			;AN000; ax = maxp
 23152                                  	;inc	ax			;AN000;
 23153                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23154                                  	;add	bx,ax			;AN000; now bx points to maxs
 23155 000015B5 E8F1FF                  	call	get_maxp ; 07/09/2023
 23156                                  
 23157 000015B8 268A0F                  	mov	cl,[es:bx]		;AN000;
 23158                                  	; 07/09/2023
 23159                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 23160                                  	;or	cx,cx			;AN000; at least one switch ?
 23161                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 23162                                  	; 07/07/2023
 23163 000015BB E30F                    	jcxz	_$P_SW_Not_Found	; no
 23164                                  
 23165 000015BD 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 23166                                  
 23167                                  _$P_SW_Mgr_Loop: 			;AN000;
 23168 000015BE 53                      	push	bx			;AN000;
 23169 000015BF 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 23170 000015C2 E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 23171 000015C5 5B                      	pop	bx			;AN000;
 23172 000015C6 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 23173                                  
 23174 000015C8 43                      	inc	bx			;AC035; add '2' to
 23175 000015C9 43                      	inc	bx			;AC035;  BX reg
 23176                                  					;AN000; else bx points to the next CONTROL
 23177 000015CA E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 23178                                  
 23179                                  _$P_SW_Not_Found:			;AN000;
 23180 000015CC 2EC706[1714]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 23181 000015D3 EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 23182                                  
 23183                                  _$P_Key_Manager: 			;AN000;
 23184                                  	; 07/09/2023
 23185                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23186                                  	;xor	ah,ah			;AN000; ax = maxp
 23187                                  	;inc	ax			;AN000;
 23188                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23189                                  	;add	bx,ax			;AN000; now bx points to maxs
 23190 000015D5 E8D1FF                  	call	get_maxp ; 07/09/2023
 23191                                  	
 23192 000015D8 268A07                  	mov	al,[es:bx]		;AN000;
 23193 000015DB 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 23194 000015DD D1E0                    	shl	ax,1			;AN000;
 23195 000015DF 40                      	inc	ax			;AN000; ax = ax*2+1
 23196 000015E0 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 23197 000015E2 268A0F                  	mov	cl,[es:bx]		;AN000;
 23198                                  	; 07/09/2023
 23199                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 23200                                  	;or	cx,cx			;AN000; at least one keyword ?
 23201                                  	;jz	short _$P_Key_Not_Found	;AN000;
 23202                                  	; 07/07/2023
 23203 000015E5 E305                    	jcxz	_$P_Key_Not_Found	; no
 23204                                  
 23205 000015E7 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 23206                                  
 23207                                  _$P_Key_Mgr_Loop:			;AN000;
 23208                                  	; 07/09/2023
 23209                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 23210                                  	; (always returns with cf=1)
 23211                                  	;push	bx			;AN000;
 23212                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 23213                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 23214                                  	;pop	bx			;AN000;
 23215                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 23216                                  	; 07/09/2023
 23217                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 23218                                  
 23219 000015E8 43                      	inc	bx			;AC035; add '2' to
 23220 000015E9 43                      	inc	bx			;AC035;  BX reg
 23221                                  					;AN000; else bx points to the next CONTROL
 23222 000015EA E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 23223                                  
 23224                                  _$P_Key_Not_Found:			;AN000;
 23225 000015EC 2EC706[1714]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 23226                                  _$P_Return_to_Caller:			;AN000;
 23227 000015F3 5D                      	pop	bp			;AN000;
 23228 000015F4 5F                      	pop	di			;AN000;
 23229 000015F5 5B                      	pop	bx			;AN000;
 23230 000015F6 2E8B0E[1514]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 23231 000015FB 2EA1[1714]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 23232 000015FF 2E8B36[1914]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 23233 00001604 2E8B16[1B14]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 23234 00001609 2E8A1E[1D14]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 23235                                  _$P_Single_Exit: 			;AN000;
 23236 0000160E F8                      	clc				;AN000;
 23237 0000160F C3                      	retn				;AN000;
 23238                                  
 23239                                  ;***********************************************************************
 23240                                  ; _$P_Chk_Pos_Control
 23241                                  ;
 23242                                  ; Function: Parse CONTROL block for a positional
 23243                                  ;
 23244                                  ; Input:     ES:BX -> CONTROL block
 23245                                  ;	     cs:SI -> _$P_STRING_BUF
 23246                                  ;
 23247                                  ; Output:    None
 23248                                  ;
 23249                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23250                                  ;
 23251                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23252                                  ;***********************************************************************
 23253                                  
 23254                                  _$P_Chk_Pos_Control:
 23255 00001610 50                      	push	ax			;AN000;
 23256                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23257 00001611 268B07                  	mov	ax,[es:bx]
 23258                                  	; 12/12/2022
 23259 00001614 A802                    	test	al,_$P_Repeat
 23260                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23261 00001616 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23262                                  
 23263 00001618 2EFF06[1514]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23264                                  _$P_CPC00:				;AN000;
 23265 0000161D 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23266 00001621 7517                    	jne	short _$P_CPC01		;AN000;
 23267                                  
 23268                                  	; 12/12/2022
 23269 00001623 A801                    	test	al,_$P_Optional
 23270                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 23271 00001625 7509                    	jnz	short _$P_CPC02		;AN000;
 23272                                  
 23273 00001627 2EC706[1714]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 23274 0000162E EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 23275                                  
 23276                                  _$P_CPC02:				;AN000;
 23277 00001630 50                      	push	ax			;AN000;
 23278                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 23279                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 23280                                  	; 14/08/2023
 23281 00001631 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23282 00001634 E89600                  	call	_$P_Fill_Result		;AN000;
 23283 00001637 58                      	pop	ax			;AN000;
 23284 00001638 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 23285                                  
 23286                                  _$P_CPC01:				;AN000;
 23287 0000163A E81101                  	call	_$P_Check_Match_Flags	;AN000;
 23288                                  _$P_CPC_Exit:				;AN000;
 23289 0000163D 58                      	pop	ax			;AN000;
 23290 0000163E C3                      	retn				;AN000;
 23291                                  
 23292                                  ;***********************************************************************
 23293                                  ; _$P_Chk_Key_Control
 23294                                  ;
 23295                                  ; Function: Parse CONTROL block for a keyword
 23296                                  ;
 23297                                  ; Input:     ES:BX -> CONTROL block
 23298                                  ;	     cs:SI -> _$P_STRING_BUF
 23299                                  ;
 23300                                  ; Output:    CY = 1 : not match
 23301                                  ;
 23302                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23303                                  ;
 23304                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23305                                  ;***********************************************************************
 23306                                  
 23307                                  ; 07/09/2023
 23308                                  ;_$P_Chk_Key_Control:
 23309                                  ;	stc				;AN000; this logic works when the KeySW
 23310                                  ;	retn				;AN000; is reset.
 23311                                  
 23312                                  ;***********************************************************************
 23313                                  ; _$P_Search_KEYorSW:
 23314                                  ;
 23315                                  ; Function: Seach specified keyword or switch from CONTROL
 23316                                  ;
 23317                                  ; Input:     ES:BX -> CONTROL block
 23318                                  ;	     cs:SI -> _$P_STRING_BUF
 23319                                  ;
 23320                                  ; Output:    CY = 1 : not match
 23321                                  ;
 23322                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 23323                                  ;***********************************************************************
 23324                                  
 23325                                  	; 25/10/2022 - Retro DOS v4.0
 23326                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 23327                                  
 23328                                  _$P_Search_KEYorSW:			;AN000;
 23329 0000163F 55                      	push	bp			;AN000;
 23330 00001640 51                      	push	cx			;AN000;
 23331 00001641 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 23332 00001645 30ED                    	xor	ch,ch			;AN000; and set it to cx
 23333                                  	;or	cx,cx			;AN000; No synonyms specified ?
 23334                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 23335                                  	; 14/08/2023
 23336 00001647 E30D                    	jcxz	_$P_KEYorSW_Not_Found
 23337                                  
 23338                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 23339                                  	; 25/10/2022
 23340 00001649 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 23341                                  	;lea	bp,[bx+9]
 23342                                  _$P_KEYorSW_Loop:			;AN000;
 23343 0000164C E8BE03                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 23344 0000164F 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 23345                                  
 23346 00001651 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 23347 00001654 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 23348                                  _$P_KEYorSW_Not_Found:			;AN000;
 23349 00001656 F9                      	stc				;AN000; indicate not found in synonym list
 23350 00001657 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 23351                                  
 23352                                  _$P_KEYorSW_Found:			;AN000;
 23353 00001659 2E892E[2A14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 23354 0000165E F8                      	clc				;AN000; indicate found
 23355                                  _$P_KEYorSW_Exit:			;AN000;
 23356 0000165F 59                      	pop	cx			;AN000;
 23357 00001660 5D                      	pop	bp			;AN000;
 23358 00001661 C3                      	retn				;AN000;
 23359                                   
 23360                                  ;***********************************************************************
 23361                                  ; _$P_MoveBP_NUL
 23362                                  ;***********************************************************************
 23363                                  
 23364                                  _$P_MoveBP_NUL:
 23365                                  _$P_MBP_Loop:				;AN000;
 23366                                  	; 11/12/2022
 23367 00001662 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 23368                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 23369                                  	; (SYSINIT:18DBh)
 23370                                   	;cmp     byte [es:bp+0],0
 23371 00001667 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 23372                                  
 23373 00001669 45                      	inc	bp			;AN000; until
 23374 0000166A EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 23375                                  
 23376                                  _$P_MBP_Exit:				;AN000;
 23377 0000166C 45                      	inc	bp			;AN000; bp points to next to NULL
 23378 0000166D C3                      	retn				;AN000;
 23379                                  
 23380                                  ;***********************************************************************
 23381                                  ; _$P_Chk_SW_Control
 23382                                  ;
 23383                                  ; Function: Parse CONTROL block for a switch
 23384                                  ;
 23385                                  ; Input:     ES:BX -> CONTROL block
 23386                                  ;	     cs:SI -> _$P_STRING_BUF
 23387                                  ;
 23388                                  ; Output:    CY = 1 : not match
 23389                                  ;
 23390                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23391                                  ;
 23392                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23393                                  ;***********************************************************************
 23394                                  
 23395                                  _$P_Chk_SW_Control:
 23396                                  
 23397                                  ;IF SwSW				;AN000;(Check if switch is supported)
 23398                                  	;or	byte [cs:_$P_Flags+1],10h
 23399 0000166E 2E800E[2314]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23400 00001674 E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23401 00001677 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23402                                  
 23403                                  	;and	[cs:_$P_Flags+],0EFh
 23404 00001679 2E8026[2314]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23405                                  					;AC034; reset the indicator previously set
 23406 0000167F 50                      	push	ax			;AN000; 	      /switch:
 23407 00001680 2EA1[2614]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23408 00001684 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23409 00001686 2E0106[2414]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23410 0000168B 58                      	pop	ax			;AN000;
 23411                                  
 23412 0000168C 2E8B36[2614]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23413 00001691 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23414 00001695 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23415                                  
 23416 00001697 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23417 0000169C 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23418                                  
 23419 0000169E 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23420 000016A5 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23421                                  
 23422                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23423                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23424 000016A7 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23425 000016AB 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23426                                  
 23427                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23428                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23429                                  	;test	word [es:bx],1
 23430                                  	; 12/12/2022
 23431                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23432 000016AD 26F60701                	test	byte [es:bx],_$P_Optional
 23433 000016B1 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23434                                  
 23435 000016B3 2EC706[1714]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23436 000016BA EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23437                                  
 23438                                  _$P_CSW00:				;AN000;
 23439 000016BC E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23440 000016BF F8                      	clc				;AN000; indicate match
 23441                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23442                                  	; 12/12/2022
 23443 000016C0 C3                      	retn
 23444                                  
 23445                                  _$P_Chk_SW_Err0: 			;AN000;
 23446 000016C1 F9                      	stc				;AN000; not found in switch synonym list
 23447                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23448                                  	; 12/12/2022
 23449 000016C2 C3                      	retn	
 23450                                  
 23451                                  _$P_Chk_SW_Exit: 			;AN000;
 23452 000016C3 50                      	push	ax			;AN000;
 23453                                  	;mov	al,_$P_String		;AN000;
 23454                                  	;mov	ah,_$P_No_Tag		;AN000;
 23455                                  	; 14/08/2023
 23456 000016C4 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23457 000016C7 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 23458 000016CA 58                      	pop	ax			;AN000;
 23459 000016CB F8                      	clc				;AN000;
 23460                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23461 000016CC C3                      	retn				;AN000;
 23462                                  ;ELSE					;AN000;(of IF SwSW)
 23463                                  ;	stc				;AN000; this logic works when the SwSW
 23464                                  ;	retn				;AN000; is reset.
 23465                                  
 23466                                  ;***********************************************************************
 23467                                  ; _$P_Fill_Result
 23468                                  ;
 23469                                  ; Function: Fill the result buffer
 23470                                  ;
 23471                                  ; Input:    AH = Item tag
 23472                                  ;	    AL = type
 23473                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23474                                  ;		  AL = 2: DX has index(offset) into value list
 23475                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23476                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23477                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23478                                  ;			  amd CH has hundredths
 23479                                  ;		  AL = else: cs:SI points to returned string buffer
 23480                                  ;	    ES:BX -> CONTROL block
 23481                                  ;
 23482                                  ; Output:   None
 23483                                  ;
 23484                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23485                                  ;
 23486                                  ; Vars: _$P_DX(W)
 23487                                  ;***********************************************************************
 23488                                  
 23489                                  _$P_Fill_Result:
 23490 000016CD 57                      	push	di			;AN000;
 23491 000016CE 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23492                                  					;AN000; di points to result buffer
 23493 000016D2 2E893E[1B14]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23494                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23495                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23496                                  	; 07/09/2023
 23497                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 23498 000016D7 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 23499                                  
 23500 000016DA 50                      	push	ax			;AN000;
 23501 000016DB 2EA1[2A14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23502 000016DF 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23503                                  					;AN000;   then set it to the result
 23504 000016E3 58                      	pop	ax			;AN000;
 23505                                  _$P_RLT04:				;AN000;
 23506 000016E4 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23507 000016E6 750A                    	jne	short _$P_RLT00		;AN000;
 23508                                  
 23509                                  _$P_RLT02:				;AN000;
 23510 000016E8 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23511 000016EC 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23512 000016F0 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23513                                  
 23514                                  _$P_RLT00:				;AN000;
 23515 000016F2 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23516 000016F4 7506                    	jne	short _$P_RLT01		;AN000;
 23517                                  
 23518 000016F6 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 23519                                  					;AN000; then store list index
 23520 000016FA EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23521                                  
 23522                                  _$P_RLT01:				;AN000;
 23523 000016FC 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23524 000016FE 74E8                    	je	short _$P_RLT02		;AN000;
 23525                                  
 23526 00001700 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23527 00001702 74E4                    	je	short _$P_RLT02		;AN000;
 23528                                  
 23529 00001704 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23530 00001706 7506                    	jne	short _$P_RLT03		;AN000;
 23531                                  
 23532 00001708 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23533 0000170C EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23534                                  
 23535                                  _$P_RLT03:				;AN000;
 23536 0000170E 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23537 00001710 750F                    	jne	short _$P_RLT05		;AN000;
 23538                                  
 23539 00001712 2EA1[2414]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23540 00001716 40                      	inc	ax			;AN000; skip left Parentheses
 23541 00001717 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23542 0000171B 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23543 0000171F EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23544                                  
 23545                                  _$P_RLT05:				;AN000;
 23546                                  ;------------------------  AL = 3, 5, or 9
 23547 00001721 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23548                                  					;AN000; store offset of STRING_BUF
 23549 00001725 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23550                                  					;AN031; store segment of STRING_BUF
 23551 00001729 50                      	push	ax			;AN000;
 23552 0000172A 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23553                                  					;AN000; need CAPS by file table?
 23554 0000172F 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23555                                  
 23556 00001731 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23557 00001733 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23558                                  
 23559                                  _$P_RLT_CAP00:				;AN000;
 23560 00001735 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23561                                  					;AN000; need CAPS by char table ?
 23562 0000173A 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23563                                  
 23564 0000173C B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23565                                  _$P_RLT_CAP02:				;AN000;
 23566 0000173E E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23567                                  _$P_RLT_CAP01:				;AN000;
 23568 00001741 58                      	pop	ax			;AN000;
 23569 00001742 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23570                                  					;AN000; removing colon at end ?
 23571 00001747 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23572                                  
 23573 00001749 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23574                                  _$P_RLT_Exit:				;AN000;
 23575 0000174C 5F                      	pop	di			;AN000;
 23576 0000174D C3                      	retn				;AN000;
 23577                                  
 23578                                  ;***********************************************************************
 23579                                  ; _$P_Check_Match_Flags
 23580                                  ;
 23581                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23582                                  ;	     result buffer
 23583                                  ;
 23584                                  ;	    Check for types in this order:
 23585                                  ;		Complex
 23586                                  ;		Date
 23587                                  ;		Time
 23588                                  ;		Drive
 23589                                  ;		Filespec
 23590                                  ;		Quoted String
 23591                                  ;		Simple String
 23592                                  ;
 23593                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23594                                  ;	     ES:BX -> CONTROL block
 23595                                  ;
 23596                                  ; Output:    None
 23597                                  ;
 23598                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23599                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23600                                  ;	     _$P_Drive_Format
 23601                                  ;***********************************************************************
 23602                                  
 23603                                  	; 25/10/2022 - Retro DOS v4.0
 23604                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23605                                  
 23606                                  	; 12/12/2022
 23607                                  _$P_Check_Match_Flags:
 23608 0000174E 2EC606[BA14]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23609                                  					;AN033;AC034;; clear filespec error flag.
 23610 00001754 50                      	push	ax			;AN000;
 23611                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23612 00001755 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23613 00001758 09C0                    	or	ax,ax			;AC035; test ax for zero
 23614 0000175A 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 23615 0000175C 50                      	push	ax			;AN000; (tm12)
 23616 0000175D 53                      	push	bx			;AN000; (tm12)
 23617 0000175E 52                      	push	dx			;AN000; (tm12)
 23618 0000175F 57                      	push	di			;AN000; (tm12)
 23619 00001760 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23620                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 23621                                  	;mov	al,_$P_String		;AN000; (tm12)
 23622                                  	; 14/08/2023
 23623 00001767 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23624 0000176A E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23625 0000176D 5F                      	pop	di			;AN000; (tm12)
 23626 0000176E 5A                      	pop	dx			;AN000; (tm12)
 23627 0000176F 5B                      	pop	bx			;AN000; (tm12)
 23628 00001770 58                      	pop	ax			;AN000; (tm12)
 23629                                  	; 12/12/2022
 23630                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23631                                  	; 12/12/2022
 23632                                  ;_$P_Mat: 				;AN000; (tm12)
 23633                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23634                                  _$P_Bridge:
 23635 00001771 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23636                                  	
 23637                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23638                                  	; (SYSINIT:19F9h)
 23639                                  	; 12/12/2022
 23640                                  	;nop	; db 90h
 23641                                  
 23642                                  ; 12/12/2022
 23643                                  _$P_Mat:
 23644                                  _$P_Match03:				;AN000;
 23645                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 23646                                  	; 14/08/2023
 23647 00001773 F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 23648 00001776 7412                    	jz	short _$P_Match04	;AN000;
 23649                                  
 23650 00001778 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23651 0000177F E81E01                  	call	_$P_Value		;AN000; do process
 23652 00001782 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23653 00001788 7557                    	jne	short _$P_Match_Exit	;AN000;
 23654                                  _$P_Match04:				;AN000;
 23655                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 23656                                  	; 14/08/2023
 23657 0000178A F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 23658 0000178D 7412                    	jz	short _$P_Match05	;AN000;
 23659                                  
 23660 0000178F 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23661 00001796 E8E300                  	call	_$P_SValue		;AN000; do process
 23662 00001799 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23663 0000179F 7540                    	jne	short _$P_Match_Exit	;AN000;
 23664                                  _$P_Match05:				;AN000;
 23665                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 23666                                  	; 14/08/2023
 23667 000017A1 F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 23668 000017A4 7415                    	jz	short _$P_Match06	;AN000;
 23669                                  
 23670 000017A6 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23671 000017AD E8FB02                  	call	_$P_File_Format		;AN000; 1st, call file format
 23672 000017B0 E87B03                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23673 000017B3 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23674 000017B9 7526                    	jne	short _$P_Match_Exit	;AN000;
 23675                                  _$P_Match06:				;AN000;
 23676                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 23677                                  	; 14/08/2023
 23678 000017BB F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 23679 000017BE 7412                    	jz	short _$P_Match07	;AN000;
 23680                                  
 23681 000017C0 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23682 000017C7 E8E102                  	call	_$P_File_Format		;AN000; do process
 23683 000017CA 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23684 000017D0 750F                    	jne	short _$P_Match_Exit	;AN000;
 23685                                  _$P_Match07:				;AN000;
 23686                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 23687                                  	; 14/08/2023
 23688 000017D2 F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 23689 000017D5 740A                    	jz	short _$P_Match09	;AN000;
 23690                                  
 23691 000017D7 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23692 000017DE E8C301                  	call	_$P_Simple_String	;AN000; do process
 23693                                  _$P_Match09:				;AN000;
 23694                                  _$P_Match_Exit:				;AN000;
 23695 000017E1 2E833E[BA14]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23696 000017E7 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23697 000017E9 2E833E[1714]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23698 000017EF 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23699 000017F1 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23700                                  _$P_Match2_Exit: 			;AN033;
 23701 000017F8 58                      	pop	ax			;AN000;
 23702 000017F9 C3                      	retn				;AN000;
 23703                                  
 23704                                  ;***********************************************************************
 23705                                  ; _$P_Remove_Colon;
 23706                                  ;
 23707                                  ; Function: Remove colon at end
 23708                                  ;
 23709                                  ; Input:    cs:SI points to string buffer to be examineed
 23710                                  ;
 23711                                  ; Output:   None
 23712                                  ;
 23713                                  ; Use:	_$P_Chk_DBCS
 23714                                  ;***********************************************************************
 23715                                  
 23716                                  _$P_Remove_Colon:
 23717 000017FA 50                      	push	ax			;AN000;
 23718 000017FB 56                      	push	si			;AN000;
 23719                                  _$P_RCOL_Loop:				;AN000;
 23720 000017FC 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23721 000017FF 08C0                    	or	al,al			;AN000; end of string ?
 23722 00001801 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23723                                  
 23724 00001803 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23725 00001805 750D                    	jne	short _$P_RCOL00	;AN000;
 23726                                  
 23727 00001807 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23728 0000180C 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23729                                  
 23730 0000180E 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23731 00001812 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23732                                  
 23733                                  _$P_RCOL00:				;AN000;
 23734 00001814 E81704                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23735 00001817 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23736                                  
 23737 00001819 46                      	inc	si			;AN000; if yes, skip trailing byte
 23738                                  _$P_RCOL01:				;AN000;
 23739 0000181A 46                      	inc	si			;AN000; si points to next byte
 23740 0000181B EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23741                                  
 23742                                  _$P_RCOL_Exit:				;AN000;
 23743 0000181D 5E                      	pop	si			;AN000;
 23744 0000181E 58                      	pop	ax			;AN000;
 23745 0000181F C3                      	retn				;AN000;
 23746                                  
 23747                                  ;***********************************************************************
 23748                                  ; _$P_Do_CAPS_String;
 23749                                  ;
 23750                                  ; Function: Perform capitalization along with the file case map table
 23751                                  ;	    or character case map table.
 23752                                  ;
 23753                                  ; Input:    AL = 2 : Use character table
 23754                                  ;	    AL = 4 : Use file table
 23755                                  ;	    cs:SI points to string buffer to be capitalized
 23756                                  ;
 23757                                  ; Output:   None
 23758                                  ;
 23759                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23760                                  ;***********************************************************************
 23761                                  
 23762                                  _$P_Do_CAPS_String:
 23763 00001820 56                      	push	si			;AN000;
 23764 00001821 52                      	push	dx			;AN000;
 23765 00001822 88C2                    	mov	dl,al			;AN000; save info id
 23766                                  
 23767                                  _$P_DCS_Loop:				;AN000;
 23768 00001824 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23769 00001827 E80404                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23770 0000182A 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23771                                  
 23772 0000182C 08C0                    	or	al,al			;AN000; end of string ?
 23773 0000182E 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23774                                  
 23775 00001830 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23776 00001833 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23777 00001836 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23778                                  _$P_DCS00:				;AN000;
 23779 00001838 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23780                                  _$P_DCS01:				;AN000;
 23781 00001839 46                      	inc	si			;AN000; si point to next byte
 23782 0000183A EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23783                                  _$P_DCS_Exit:				;AN000;
 23784 0000183C 5A                      	pop	dx			;AN000;
 23785 0000183D 5E                      	pop	si			;AN000;
 23786 0000183E C3                      	retn
 23787                                  
 23788                                  ;***********************************************************************
 23789                                  ; _$P_Do_CAPS_Char;
 23790                                  ;
 23791                                  ; Function: Perform capitalization along with the file case map table
 23792                                  ;	    or character case map table.
 23793                                  ;
 23794                                  ; Input:    DL = 2 : Use character table
 23795                                  ;	    DL = 4 : Use file table
 23796                                  ;	    AL = character to be capitalized
 23797                                  ;
 23798                                  ; Output:   None
 23799                                  ;
 23800                                  ; Use:	INT 21h /w AH=65h
 23801                                  ;***********************************************************************
 23802                                  
 23803                                  _$P_Do_CAPS_Char:
 23804 0000183F 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23805 00001841 730B                    	jae	short _$P_DCC_Go	;AN000;
 23806                                  
 23807 00001843 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23808 00001845 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23809                                  
 23810 00001847 3C7A                    	cmp	al,"z"                  ;AN000;
 23811 00001849 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23812                                  
 23813 0000184B 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23814                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 23815                                  	; 14/08/2023
 23816 0000184D C3                      	retn
 23817                                  
 23818                                  _$P_DCC_Go:				;AN000;
 23819 0000184E 53                      	push	bx			;AN000;
 23820 0000184F 06                      	push	es			;AN000;
 23821 00001850 57                      	push	di			;AN000;
 23822                                  
 23823                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23824                                  	;lea	di,[_$P_Char_CAP_Ptr]
 23825                                  	; 07/09/2023
 23826 00001851 BF[AC14]                	mov	di,_$P_Char_CAP_Ptr
 23827                                  _$P_DCC00:				;AN000;
 23828 00001854 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23829 00001857 7415                    	je	short _$P_DCC01		;AN000; if no,
 23830                                  
 23831                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23832                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23833                                  ; call, regardless of what base register is currently be defined as cs.
 23834                                  
 23835 00001859 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23836 0000185A 51                      	push	cx			;AN000;
 23837 0000185B 52                      	push	dx			;AN000;
 23838                                  
 23839 0000185C 0E                      	push	cs			;AC036; pass current base seg into
 23840                                  					;(Note: this used to push CS.  BUG...
 23841 0000185D 07                      	pop	es			;AN000;   ES reg, required for
 23842                                  					;get extended country information
 23843                                  	;mov	al,dl ; function	;AN000; upper case table
 23844                                  	; 14/08/2023
 23845 0000185E 92                      	xchg	ax,dx
 23846 0000185F B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 23847 00001861 BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 23848 00001864 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 23849                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23850                                  	; 14/08/2023
 23851 00001867 89DA                    	mov	dx,bx ; 0FFFFh
 23852                                  					;DI already set to point to buffer
 23853 00001869 CD21                    	int	21h			;AN000; es:di point to buffer that
 23854                                  					;now has been filled in with info
 23855 0000186B 5A                      	pop	dx			;AN000;
 23856 0000186C 59                      	pop	cx			;AN000;
 23857 0000186D 58                      	pop	ax			;AN000;
 23858                                  
 23859                                  _$P_DCC01:				;AN000;
 23860                                  
 23861                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23862                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23863                                  ; regardless of which base reg is currently the cs reg.
 23864                                  
 23865                                  	; 14/08/2023
 23866                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23867                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23868 0000186E 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 23869 00001872 43                      	inc	bx			;AC035; add '2' to
 23870 00001873 43                      	inc	bx			;AC035;  BX reg
 23871                                  					;AN000; skip length field
 23872 00001874 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23873                                  	;xlat	es:[bx] 		;AN000; perform case map
 23874 00001876 26                      	es
 23875 00001877 D7                      	xlat
 23876 00001878 5F                      	pop	di			;AN000;
 23877 00001879 07                      	pop	es			;AN000;
 23878 0000187A 5B                      	pop	bx			;AN000;
 23879                                  _$P_CAPS_Ret:				;AN000;
 23880 0000187B C3                      	retn				;AN000;
 23881                                  
 23882                                  ;***********************************************************************
 23883                                  ; _$P_Value / _$P_SValue
 23884                                  ;
 23885                                  ; Function:  Make 32bit value from cs:SI and see value list
 23886                                  ;	     and make result buffer.
 23887                                  ;	     _$P_SValue is an entry point for the signed value
 23888                                  ;	     and this will simply call _$P_Value after the handling
 23889                                  ;	     of the sign character, "+" or "-"
 23890                                  ;
 23891                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23892                                  ;	     ES:BX -> CONTROL block
 23893                                  ;
 23894                                  ; Output:    None
 23895                                  ;
 23896                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23897                                  ;
 23898                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23899                                  ;***********************************************************************
 23900                                  
 23901                                  	; 26/10/2022 - Retro DOS v4.0
 23902                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23903                                  
 23904                                  _$P_SValue:				;AN000; when signed value here
 23905 0000187C 50                      	push	ax			;AN000;
 23906 0000187D 2E800E[2314]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23907 00001883 2E8026[2314]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23908 00001889 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23909 0000188C 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23910 0000188E 740A                    	je	short _$P_SVal00	;AN000;
 23911                                  
 23912 00001890 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23913 00001892 7507                    	jne	short _$P_Sval01	;AN000; else
 23914                                  
 23915 00001894 2E800E[2314]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23916                                  _$P_SVal00:				;AN000;
 23917 0000189A 46                      	inc	si			;AN000; skip sign char
 23918                                  _$P_Sval01:				;AN000;
 23919 0000189B E80200                  	call	_$P_Value		;AN000; and process value
 23920 0000189E 58                      	pop	ax			;AN000;
 23921 0000189F C3                      	retn
 23922                                  
 23923                                  ;***********************************************************************
 23924                                  
 23925                                  	; 26/10/2022
 23926                                  _$P_Value:				;AN000;
 23927 000018A0 50                      	push	ax			;AN000;
 23928 000018A1 51                      	push	cx			;AN000;
 23929 000018A2 52                      	push	dx			;AN000;
 23930 000018A3 56                      	push	si			;AN000;
 23931 000018A4 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23932 000018A6 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23933 000018A8 53                      	push	bx			;AN000; save control pointer
 23934                                  _$P_Value_Loop:				;AN000;
 23935 000018A9 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23936 000018AC 08C0                    	or	al,al			;AN000; end of line ?
 23937 000018AE 7442                    	jz	short _$P_Value00	;AN000;
 23938                                  
 23939 000018B0 E8E600                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23940 000018B3 7239                    	jc	short _$P_Value_Err0	;AN000;
 23941                                  
 23942 000018B5 30E4                    	xor	ah,ah			;AN000;
 23943 000018B7 89C5                    	mov	bp,ax			;AN000; save binary number
 23944 000018B9 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23945 000018BB D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23946 000018BD E8C700                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23947 000018C0 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23948                                  
 23949 000018C2 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23950 000018C4 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23951 000018C6 D1E2                    	shl	dx,1			;AN000; to have 4*x
 23952 000018C8 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23953 000018CA E8BA00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23954 000018CD 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23955                                  
 23956 000018CF D1E2                    	shl	dx,1			;AN000; to have 8*x
 23957 000018D1 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23958 000018D3 E8B100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23959 000018D6 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23960                                  
 23961 000018D8 01DA                    	add	dx,bx			;AN000; now have 10*x
 23962 000018DA 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23963 000018DC E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23964 000018DF 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23965                                  
 23966 000018E1 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23967 000018E3 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23968 000018E6 E89E00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23969 000018E9 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23970                                  
 23971 000018EB 46                      	inc	si			;AN000; update pointer
 23972 000018EC EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23973                                  ;
 23974                                  _$P_Value_Err0:				;AN000;
 23975 000018EE 5B                      	pop	bx			;AN000;
 23976 000018EF E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 23977                                  ;
 23978                                  _$P_Value00:				;AN000;
 23979 000018F2 5B                      	pop	bx			;AN000; restore control pointer
 23980 000018F3 2EF606[2314]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23981 000018F9 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23982                                  
 23983 000018FB F7D1                    	not	cx			;AN000; +
 23984 000018FD F7D2                    	not	dx			;AN000; |- Make 2's complement
 23985 000018FF 83C201                  	add	dx,1			;AN000; |
 23986 00001902 83D100                  	adc	cx,0			;AN000; +
 23987                                  
 23988                                  _$P_Value01:				;AN000; / nval = 0
 23989 00001905 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23990 00001909 268A04                  	mov	al,[es:si]		;AN000; get nval
 23991                                  	; 07/09/2023
 23992                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 23993                                  	;;*jne	short _$P_Value02	;AN000;
 23994                                  	;;* 07/07/2023
 23995                                  	;je	short _$P_Value05
 23996                                  	; 07/09/2023
 23997 0000190C 08C0                    	or	al,al
 23998 0000190E 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 23999                                  
 24000                                  	;mov	al,_$P_Number		;AN000; Set type
 24001                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24002                                  	; 07/07/2023
 24003                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24004                                  	;*jmp	short _$P_Value_Exit	;AN000;
 24005                                  
 24006                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 24007                                  	; (SYSINIT:1BA5h)
 24008                                  	; 12/12/2022
 24009                                  	;nop	; db  90h
 24010                                  
 24011                                  _$P_Value02:				;AN000; / nval = 1
 24012                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 24013                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 24014                                  ;(tm07) jne	short _$P_Value03	;AN000;
 24015                                  
 24016 00001910 46                      	inc	si			;AN000;
 24017 00001911 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 24018                                  	
 24019                                  	; 07/09/2023
 24020                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 24021                                  	;je	short _$P_Value03	;AN000; (tm07)
 24022 00001914 08C0                    	or	al,al
 24023 00001916 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 24024                                  
 24025 00001918 46                      	inc	si			;AN000; si points to 1st item_tag
 24026                                  _$P_Val02_Loop:				;AN000;
 24027 00001919 2EF606[2314]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 24028 0000191F 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 24029                                  
 24030 00001921 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 24031 00001925 7234                    	jb	short _$P_Val02_Next	;AN000;
 24032 00001927 7706                    	ja	short _$P_Val_In	;AN000;
 24033                                  
 24034 00001929 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 24035 0000192D 722C                    	jb	short _$P_Val02_Next	;AN000;
 24036                                  
 24037                                  _$P_Val_In:				;AN000;
 24038 0000192F 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 24039 00001933 7726                    	ja	short _$P_Val02_Next	;AN000;
 24040 00001935 7237                    	jb	short _$P_Val_Found	;AN000;
 24041                                  
 24042 00001937 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 24043 0000193B 771E                    	ja	short _$P_Val02_Next	;AN000;
 24044                                  
 24045 0000193D EB2F                    	jmp	short _$P_Val_Found	;AN000;
 24046                                  
 24047                                  _$P_Val02_Sign:				;AN000;
 24048 0000193F 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 24049 00001943 7C16                    	jl	short _$P_Val02_Next	;AN000;
 24050 00001945 7F06                    	jg	short _$P_SVal_In	;AN000;
 24051                                  
 24052 00001947 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 24053 0000194B 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 24054                                  
 24055                                  _$P_SVal_In:				;AN000;
 24056 0000194D 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 24057 00001951 7F08                    	jg	short _$P_Val02_Next	;AN000;
 24058                                  
 24059 00001953 7C19                    	jl	short _$P_Val_Found	;AN000;
 24060                                  
 24061 00001955 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 24062                                  	;jg	short _$P_Val02_Next	;AN000;
 24063                                  	;jmp	short _$P_Val_Found	;AN000;
 24064                                  	; 14/08/2023
 24065 00001959 7E13                    	jng	short _$P_Val_Found
 24066                                  
 24067                                  _$P_Val02_Next:				;AN000;
 24068 0000195B 83C609                  	add	si,_$P_Len_Range 	;AN000;
 24069 0000195E FEC8                    	dec	al			;AN000; loop nrng times in AL
 24070 00001960 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 24071                                  					; / Not found
 24072 00001962 2EC706[1714]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 24073                                  	;mov	al,_$P_Number		;AN000;
 24074                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24075                                  _$P_Value05:		;* 14/08/2023
 24076                                  	; 14/08/2023
 24077 00001969 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24078 0000196C EB11                    	jmp	short _$P_Value_Exit	;AN000;
 24079                                  
 24080                                  _$P_Val_Found:				;AN000;
 24081 0000196E B001                    	mov	al,_$P_Number		;AN000;
 24082 00001970 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 24083 00001973 EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 24084                                  
 24085                                  _$P_Value03:				;AN000; / nval = 2
 24086                                  
 24087                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 24088                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 24089                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 24090                                  ;(tm07) inc	si			;AN000;
 24091                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 24092                                  ;	mov	ah,$P_Len_Range 	;AN000;
 24093                                  ;	mul	ah			;AN000;  Skip nrng field
 24094                                  ;	inc	ax			;AN000;
 24095                                  ;	add	si,ax			;AN000; si points to nnval
 24096                                  ;	mov	al,es:[si]		;AN000; get nnval
 24097                                  ;	inc	si			;AN000; si points to 1st item_tag
 24098                                  ;$P_Val03_Loop:				;AN000;
 24099                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 24100                                  ;	jne	$P_Val03_Next		;AN000;
 24101                                  ;
 24102                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 24103                                  ;	je	$P_Val_Found		;AN000;
 24104                                  ;
 24105                                  ;$P_Val03_Next:				;AN000;
 24106                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 24107                                  ;	dec	al			;AN000; loop nval times in AL
 24108                                  ;	jne	$P_Val03_Loop		;AN000;
 24109                                  ;					;AN000; / Not found
 24110                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 24111                                  ;	mov	al,$P_Number		;AN000;
 24112                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 24113                                  ;	jmp	short $P_Value_Exit	;AN000;
 24114                                  ;
 24115                                  ;ENDIF					;AN000;(of Val2SW)
 24116                                  ;$P_Value04:
 24117                                  
 24118                                  _$P_Value_Err:				;AN000;
 24119 00001975 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24120                                  	;mov	al,_$P_String		;AN000; Set type
 24121                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24122                                  	; 14/08/2023
 24123 0000197C B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24124                                  _$P_Value_Exit:				;AN000;
 24125 0000197F E84BFD                  	call	_$P_Fill_Result		;AN000;
 24126 00001982 5E                      	pop	si			;AN000;
 24127 00001983 5A                      	pop	dx			;AN000;
 24128 00001984 59                      	pop	cx			;AN000;
 24129 00001985 58                      	pop	ax			;AN000;
 24130 00001986 C3                      	retn				;AN000;
 24131                                  
 24132                                  ; 28/03/2019 - Retro DOS v4.0
 24133                                  
 24134                                  ;***********************************************************************
 24135                                  ; _$P_Check_OVF
 24136                                  ;
 24137                                  ; Function:  Check if overflow is occurred with consideration of
 24138                                  ;	     signed or un-signed numeric value
 24139                                  ;
 24140                                  ; Input:     Flag register
 24141                                  ;
 24142                                  ; Output:    CY = 1  :	Overflow
 24143                                  ;
 24144                                  ; Vars:     _$P_Flags(R)
 24145                                  ;***********************************************************************
 24146                                  
 24147                                  	; 26/10/2022
 24148                                  _$P_Check_OVF:
 24149 00001987 9C                      	pushf				;AN000;
 24150 00001988 2EF606[2314]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 24151 0000198E 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 24152                                  
 24153 00001990 9D                      	popf				;AN000; by the CY bit
 24154 00001991 C3                      	retn				;AN000;
 24155                                  
 24156                                  _$P_COVF:				;AN000;
 24157 00001992 9D                      	popf				;AN000; else,
 24158 00001993 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 24159                                  
 24160 00001995 F8                      	clc				;AN000; indicate it with CY bit
 24161 00001996 C3                      	retn				;AN000; CY=0 means no overflow
 24162                                  
 24163                                  _$P_COVF00:				;AN000;
 24164                                  _$P_0099Err: ; 14/08/2023
 24165 00001997 F9                      	stc				;AN000; and CY=1 means overflow
 24166                                  _$P_0099Err2: ; 14/08/2023
 24167 00001998 C3                      	retn				;AN000;
 24168                                  
 24169                                  ;***********************************************************************
 24170                                  ; _$P_0099;
 24171                                  ;
 24172                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 24173                                  ;
 24174                                  ; Input:     AL = character code
 24175                                  ;
 24176                                  ; Output:    CY = 1 : AL is not number
 24177                                  ;	     CY = 0 : AL contains binary value
 24178                                  ;***********************************************************************
 24179                                  
 24180                                  _$P_0099:
 24181 00001999 3C30                    	cmp	al,"0"                  ;AN000;
 24182                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24183                                  	; 12/12/2022
 24184 0000199B 72FB                    	jb	short _$P_0099Err2  ; cf=1
 24185                                  
 24186 0000199D 3C39                    	cmp	al,"9"                  ;AN000;
 24187 0000199F 77F6                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24188                                  
 24189 000019A1 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 24190                                  	; 12/12/2022
 24191                                  	; cf=0	
 24192                                  	;clc				;AN000; indicate no error
 24193 000019A3 C3                      	retn				;AN000;
 24194                                  
 24195                                  	; 14/08/2023
 24196                                  ;_$P_0099Err:				;AN000;
 24197                                  ;	stc				;AN000; indicate error
 24198                                  ;_$P_0099Err2: ; 12/12/2022	
 24199                                  ;	retn				;AN000;
 24200                                  
 24201                                  ;***********************************************************************
 24202                                  ; _$P_Simple_String
 24203                                  ;
 24204                                  ; Function:  See value list for the simple string
 24205                                  ;	     and make result buffer.
 24206                                  ;
 24207                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24208                                  ;	     ES:BX -> CONTROL block
 24209                                  ;
 24210                                  ; Output:    None
 24211                                  ;
 24212                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 24213                                  ;
 24214                                  ; Vars: _$P_RC(W)
 24215                                  ;***********************************************************************
 24216                                  
 24217                                  _$P_Simple_String:
 24218 000019A4 50                      	push	ax			;AN000;
 24219 000019A5 53                      	push	bx			;AN000;
 24220 000019A6 52                      	push	dx			;AN000;
 24221 000019A7 57                      	push	di			;AN000;
 24222 000019A8 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 24223 000019AC 268A05                  	mov	al,[es:di]		;AN000; get nval
 24224 000019AF 08C0                    	or	al,al			;AN000; no value list ?
 24225 000019B1 7504                    	jnz	short _$P_Sim00		;AN000; then
 24226                                  
 24227 000019B3 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24228 000019B5 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 24229                                  
 24230                                  _$P_Sim00:				;AN000;
 24231                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 24232 000019B7 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 24233 000019B9 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 24234                                  
 24235 000019BB 47                      	inc	di			;AN000;
 24236 000019BC 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 24237 000019BF B409                    	mov	ah,_$P_Len_Range 	;AN000;
 24238 000019C1 F6E4                    	mul	ah			;AN000; Skip nrng field
 24239 000019C3 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 24240 000019C4 01C7                    	add	di,ax			;AN000; di points to nnval
 24241 000019C6 268A05                  	mov	al,[es:di]		;AN000; get nnval
 24242 000019C9 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 24243 000019CB F6E4                    	mul	ah			;AN000; Skip nnval field
 24244 000019CD 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 24245 000019CE 01C7                    	add	di,ax			;AN000; di points to nstrval
 24246 000019D0 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 24247 000019D3 47                      	inc	di			;AC035; add '2' to
 24248 000019D4 47                      	inc	di			;AC035;  DI reg
 24249                                  					;AN000; di points to 1st string in list
 24250                                  _$P_Sim_Loop:				;AN000;
 24251 000019D5 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 24252 000019D8 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 24253 000019DB 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 24254                                  
 24255 000019DD 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 24256 000019E0 FEC8                    	dec	al			;AN000; loop nstval times in AL
 24257 000019E2 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 24258                                  					;AN000; / Not found
 24259 000019E4 2EC706[1714]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 24260 000019EB B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24261 000019ED EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 24262                                  
 24263                                  _$P_Sim_Found:				;AN000;
 24264 000019EF 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 24265 000019F3 B002                    	mov	al,_$P_List_Idx		;AN000;
 24266 000019F5 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 24267 000019F8 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 24268                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 24269                                  _$P_Sim01:				;AN000;
 24270 000019FA 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24271 00001A01 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24272                                  _$P_Sim_Exit:				;AN000;
 24273 00001A03 B003                    	mov	al,_$P_String		;AN000; Set type
 24274                                  _$P_Sim_Exit0:				;AN000;
 24275 00001A05 E8C5FC                  	call	_$P_Fill_Result		;AN000;
 24276 00001A08 5F                      	pop	di			;AN000;
 24277 00001A09 5A                      	pop	dx			;AN000;
 24278 00001A0A 5B                      	pop	bx			;AN000;
 24279 00001A0B 58                      	pop	ax			;AN000;
 24280 00001A0C C3                      	retn				;AN000;
 24281                                  
 24282                                  ;***********************************************************************
 24283                                  ; _$P_String_Comp:
 24284                                  ;
 24285                                  ; Function:  Compare two string
 24286                                  ;
 24287                                  ; Input:     cs:SI -> 1st string
 24288                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 24289                                  ;	     ES:BX -> CONTROL block
 24290                                  ;
 24291                                  ; Output:    CY = 1 if not match
 24292                                  ;
 24293                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 24294                                  ;
 24295                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 24296                                  ;***********************************************************************
 24297                                  
 24298                                  _$P_String_Comp:
 24299 00001A0D 50                      	push	ax			;AN000;
 24300 00001A0E 55                      	push	bp			;AN000;
 24301 00001A0F 52                      	push	dx			;AN000;
 24302 00001A10 56                      	push	si			;AN000;
 24303 00001A11 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 24304                                  _$P_SCOM_Loop:				;AN000;
 24305 00001A13 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 24306 00001A16 E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 24307 00001A19 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 24308                                  
 24309 00001A1B E821FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 24310                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 24311 00001A1E 2EF606[2314]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 24312 00001A24 740D                    	jz	short _$P_SCOM04	;AN000;
 24313                                  
 24314 00001A26 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 24315 00001A28 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 24316                                  
 24317 00001A2A 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 24318 00001A2F 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 24319                                  
 24320 00001A31 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 24321                                  
 24322                                  _$P_SCOM04:				;AN000;
 24323 00001A33 2EF606[2314]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 24324 00001A39 740E                    	jz	short _$P_SCOM03	;AN000;
 24325                                  
 24326 00001A3B 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 24327 00001A3D 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 24328                                  
 24329                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24330                                  	;cmp	byte [es:bp+0],_$P_NULL
 24331                                  	; 11/12/2022
 24332 00001A3F 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 24333 00001A44 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 24334                                  
 24335                                  _$P_SCOM05:				;AN000;   found a match
 24336 00001A46 46                      	inc	si			;AN000; si points to just after "=" or ":"
 24337 00001A47 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 24338                                  
 24339                                  _$P_SCOM03:				;AN000;
 24340                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 24341                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24342                                  	;cmp	al,[es:bp+0]
 24343                                  	; 11/12/2022
 24344 00001A49 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 24345 00001A4D 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 24346                                  
 24347 00001A4F 08C0                    	or	al,al			;AN000; end of line
 24348 00001A51 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 24349                                  
 24350                                  	; 12/12/2022
 24351                                  	;inc	si			;AN000; update operand pointer
 24352                                  	;inc	bp			;AN000;    and synonym pointer
 24353                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24354 00001A53 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 24355                                  
 24356                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 24357                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24358                                  	;cmp	al,[es:bp+0]
 24359                                  	; 11/12/2022
 24360 00001A55 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 24361 00001A59 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 24362                                  
 24363 00001A5B 46                      	inc	si			;AN000; else, load next byte
 24364 00001A5C 2E8A04                  	mov	al,[cs:si]		;AN000; and
 24365 00001A5F 45                      	inc	bp			;AN000;
 24366                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24367                                  	;cmp	al,[es:bp+0]
 24368                                  	; 11/12/2022
 24369 00001A60 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 24370 00001A64 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 24371                                  
 24372                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24373                                  	; 12/12/2022
 24374                                  _$P_SCOM01:
 24375 00001A66 46                      	inc	si			;AN000; else update operand pointer
 24376 00001A67 45                      	inc	bp			;AN000; 		and synonym pointer
 24377                                  ;_$P_SCOM01:				;AN000;
 24378 00001A68 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 24379                                  
 24380                                  _$P_SCOM_Differ0:			;AN000;
 24381                                  ;IF SwSW				;AN000;(tm10)
 24382 00001A6A 2EF606[2314]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 24383 00001A70 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 24384                                  
 24385                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24386                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 24387                                  	; 12/12/2022
 24388 00001A72 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 24389 00001A77 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 24390                                  
 24391                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24392                                  	;cmp	byte [es:bp+0],_$P_NULL
 24393                                  	; 11/12/2022
 24394 00001A79 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 24395                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 24396 00001A7E 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 24397                                  
 24398                                  _$P_not_applicable:			;AN000;(tm10)
 24399                                  ;ENDIF					;AN000;(tm10)
 24400                                  
 24401                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24402                                  					;AN000; ignore colon option specified ?
 24403                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 24404                                  	; 12/12/2022
 24405 00001A80 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24406                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24407                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 24408 00001A84 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 24409                                  
 24410 00001A86 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 24411 00001A88 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 24412                                  
 24413                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24414                                  	;cmp	byte [es:bp+0],_$P_NULL
 24415                                  	; 11/12/2022
 24416 00001A8A 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 24417 00001A8F 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 24418                                  
 24419 00001A91 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 24420                                  
 24421                                  _$P_SCOM02:				;AN000;
 24422 00001A93 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 24423 00001A95 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 24424                                  
 24425                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24426                                  	;cmp	byte [es:bp+0],_$P_Colon
 24427                                  	; 11/12/2022
 24428 00001A97 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 24429 00001A9C 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 24430                                  
 24431                                  _$P_SCOM_Differ: 			;AN000;
 24432 00001A9E F9                      	stc				;AN000; indicate not found
 24433 00001A9F EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 24434                                  
 24435                                  _$P_SCOM_Same:				;AN000;
 24436                                  	; 12/12/2022
 24437                                  	; cf=0
 24438 00001AA1 2E8936[2614]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 24439                                  	; 12/12/2022
 24440                                  	;clc				;AN000; indicate found
 24441                                  _$P_SCOM_Exit:				;AN000;
 24442 00001AA6 5E                      	pop	si			;AN000;
 24443 00001AA7 5A                      	pop	dx			;AN000;
 24444 00001AA8 5D                      	pop	bp			;AN000;
 24445 00001AA9 58                      	pop	ax			;AN000;
 24446 00001AAA C3                      	retn
 24447                                  
 24448                                  ; 30/03/2019
 24449                                  
 24450                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24451                                  
 24452                                  ;***********************************************************************
 24453                                  ; _$P_File_Format;
 24454                                  ;
 24455                                  ; Function:  Check if the input string is valid file spec format.
 24456                                  ;	     And set the result buffer.
 24457                                  ;
 24458                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24459                                  ;	     ES:BX -> CONTROL block
 24460                                  ;
 24461                                  ; Output:    None
 24462                                  ;
 24463                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24464                                  ;
 24465                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24466                                  ;	_$P_SaveSI_Cmpx(R)
 24467                                  ;***********************************************************************
 24468                                  
 24469                                  _$P_File_Format:
 24470 00001AAB 50                      	push	ax			;AN000;
 24471 00001AAC 57                      	push	di			;AN000;
 24472 00001AAD 56                      	push	si			;AN000;
 24473 00001AAE 2E8B3E[2414]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24474                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24475 00001AB3 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24476 00001AB6 08C0                    	or	al,al			;AN000; end of line ?
 24477 00001AB8 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24478                                  
 24479 00001ABA E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24480 00001ABD 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24481                                  
 24482 00001ABF 2EC606[BA14]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24483                                  					;AN033;AC034;; set error flag- bad char.
 24484 00001AC5 5E                      	pop	si			;AN033;
 24485 00001AC6 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24486 00001ACA 5F                      	pop	di			;AN033;
 24487 00001ACB EB3E                    	jmp	short _$P_FileF02	;AN033;
 24488                                  
 24489                                  _$P_FileF_Err:				;AN000;
 24490 00001ACD 5E                      	pop	si			;AN000;
 24491 00001ACE 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24492 00001AD2 5F                      	pop	di			;AN000;
 24493                                  
 24494                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24495                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24496                                  	; 12/12/2022
 24497 00001AD3 26F60701                	test	byte [es:bx],_$P_Optional
 24498                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24499                                  	;test	word [es:bx],_$P_Optional
 24500 00001AD7 7532                    	jnz	short _$P_FileF02	;AN000;
 24501                                  
 24502 00001AD9 2EC706[1714]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24503 00001AE0 EB29                    	jmp	short _$P_FileF02	;AN000;
 24504                                  
 24505                                  _$P_FileF03:				;AN000;
 24506 00001AE2 58                      	pop	ax			;AN000; discard save si
 24507 00001AE3 56                      	push	si			;AN000; save new si
 24508                                  _$P_FileF_Loop1: 			;AN000;
 24509 00001AE4 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24510 00001AE7 08C0                    	or	al,al			;AN000; end of line ?
 24511 00001AE9 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24512                                  
 24513 00001AEB E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24514 00001AEE 740B                    	je	short _$P_FileF00	;AN000;
 24515                                  
 24516 00001AF0 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 24517 00001AF3 7302                    	jnc	short _$P_FileF01	;AN000;
 24518 00001AF5 47                      	inc	di			;AN000; if yes, skip next byte
 24519 00001AF6 46                      	inc	si			;AN000;
 24520                                  _$P_FileF01:				;AN000;
 24521 00001AF7 47                      	inc	di			;AN000;
 24522 00001AF8 46                      	inc	si			;AN000;
 24523 00001AF9 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24524                                  ;
 24525                                  _$P_FileF00:				;AN000;
 24526 00001AFB 2EA2[1D14]              	mov	[cs:_$P_Terminator],al	;AC034;
 24527 00001AFF 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24528 00001B03 47                      	inc	di			;AN000;
 24529 00001B04 2E893E[1914]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24530                                  _$P_FileF_RLT:				;AN000;
 24531 00001B09 5E                      	pop	si			;AN000;
 24532 00001B0A 5F                      	pop	di			;AN000;
 24533                                  _$P_FileF02:				;AN000;
 24534 00001B0B 58                      	pop	ax			;AN000; (tm14)
 24535                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 24536                                  	; 14/08/2023
 24537 00001B0C F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24538 00001B0F 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24539                                  
 24540 00001B11 50                      	push	ax			;AN000;  (tm14)
 24541                                  	;mov	ah,_$P_No_Tag		;AN000; set
 24542                                  	;mov	al,_$P_File_Spec 	;AN000; result
 24543                                  	; 14/08/2023
 24544 00001B12 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 24545                                  					      ; set result
 24546 00001B15 E8B5FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 24547 00001B18 58                      	pop	ax			;AN000;
 24548                                  
 24549                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24550 00001B19 C3                      	retn				;AN000;
 24551                                  
 24552                                  ;***********************************************************************
 24553                                  ; _$P_FileSp_Chk
 24554                                  ;
 24555                                  ; Function:  Check if the input byte is one of file special characters
 24556                                  ;
 24557                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24558                                  ;	     AL = character code to be examineed
 24559                                  ;
 24560                                  ; Output:    ZF = 1 , AL is one of special characters
 24561                                  ;***********************************************************************
 24562                                  
 24563                                  _$P_FileSp_Chk:
 24564 00001B1A 53                      	push	bx			;AN000;
 24565 00001B1B 51                      	push	cx			;AN000;
 24566                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24567                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 24568                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 24569                                  	; 07/09/2023
 24570 00001B1C BB[B114]                	mov	bx,_$P_FileSp_Char
 24571 00001B1F B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 24572                                  _$P_FileSp_Loop: 			;AN000;
 24573 00001B22 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24574 00001B25 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24575                                  
 24576 00001B27 43                      	inc	bx			;AN000;
 24577 00001B28 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24578                                  
 24579 00001B2A 41                      	inc	cx			;AN000; reset ZF
 24580                                  _$P_FileSp_Exit: 			;AN000;
 24581 00001B2B 59                      	pop	cx			;AN000;
 24582 00001B2C 5B                      	pop	bx			;AN000;
 24583 00001B2D C3                      	retn
 24584                                  
 24585                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24586                                  
 24587                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24588                                  
 24589                                  ;***********************************************************************
 24590                                  ; _$P_Drive_Format;
 24591                                  ;
 24592                                  ; Function:  Check if the input string is valid drive only format.
 24593                                  ;	     And set the result buffer.
 24594                                  ;
 24595                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24596                                  ;	     ES:BX -> CONTROL block
 24597                                  ;
 24598                                  ; Output:    None
 24599                                  ;
 24600                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24601                                  ;
 24602                                  ; Vars: _$P_RC(W)
 24603                                  ;***********************************************************************
 24604                                  
 24605                                  _$P_Drive_Format:
 24606 00001B2E 50                      	push	ax			;AN000;
 24607 00001B2F 52                      	push	dx			;AN000;
 24608 00001B30 2E8A04                  	mov	al,[cs:si]		;AN000;
 24609 00001B33 08C0                    	or	al,al			;AN000; if null string
 24610 00001B35 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24611                                  
 24612 00001B37 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24613 00001B3A 722A                    	jc	short _$P_Drv_Err	;AN000;
 24614                                  
 24615 00001B3C 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24616 00001B41 740D                    	je	short _$P_DrvF00	;AN000;
 24617                                  
 24618                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24619                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24620                                  	; 12/12/2022
 24621 00001B43 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24622                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24623                                  	;test	word [es:bx],_$P_Ig_Colon
 24624 00001B47 741D                    	jz	short _$P_Drv_Err	;AN000;
 24625                                  
 24626 00001B49 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24627 00001B4E 7516                    	jne	short _$P_Drv_Err	;AN000;
 24628                                  
 24629                                  _$P_DrvF00:				;AN000;
 24630 00001B50 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24631 00001B52 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24632 00001B54 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 24633                                  
 24634 00001B56 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24635 00001B58 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24636                                  
 24637 00001B5A 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24638 00001B5C 88C2                    	mov	dl,al			;AN000; set
 24639                                  	;mov	ah,_$P_No_Tag		;AN000; result
 24640                                  	;mov	al,_$P_Drive		;AN000; buffer
 24641                                  	; 08/07/2023
 24642 00001B5E B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 24643                                  					      ; set result buffer
 24644 00001B61 E869FB                  	call	_$P_Fill_Result		;AN000; to drive
 24645 00001B64 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24646                                  
 24647                                  _$P_Drv_Err:				;AN000;
 24648 00001B66 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24649                                  _$P_Drv_Exit:				;AN000;
 24650 00001B6D 5A                      	pop	dx			;AN000;
 24651 00001B6E 58                      	pop	ax			;AN000;
 24652 00001B6F C3                      	retn				;AN000;
 24653                                  
 24654                                  ;ENDIF					;AN000;(of DrvSW)
 24655                                  
 24656                                  ;***********************************************************************
 24657                                  ; _$P_Skip_Delim;
 24658                                  ;
 24659                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24660                                  ;	    and comma.
 24661                                  ;
 24662                                  ; Input:    DS:SI -> Command String
 24663                                  ;	    ES:DI -> Parameter List
 24664                                  ;
 24665                                  ; Output:   CY = 1 if the end of line encounterd
 24666                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24667                                  ;	    AL = Last examineed character
 24668                                  ;
 24669                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24670                                  ;
 24671                                  ; Vars:     _$P_Flags(R)
 24672                                  ;***********************************************************************
 24673                                  
 24674                                  _$P_Skip_Delim:
 24675                                  _$P_Skip_Delim_Loop:			;AN000;
 24676 00001B70 AC                      	lodsb				;AN000;
 24677 00001B71 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24678 00001B74 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24679                                  
 24680 00001B76 E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24681 00001B79 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24682                                  
 24683 00001B7B 2EF606[2314]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24684 00001B81 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24685                                  
 24686 00001B83 2EF606[2314]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24687                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24688                                  	; 14/08/2023
 24689                                  	; cf=0
 24690 00001B89 7505                    	jnz	short _$P_Skip_Delim_Exit
 24691 00001B8B C3                      	retn
 24692                                  
 24693                                  	;dec	si			;AN000; backup si for next call (tm08)
 24694                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24695                                  	; 12/12/2022
 24696                                  	; cf=0
 24697                                  	; 14/08/2023
 24698                                  	;jmp	short _$P_Skip_Delim_Exit
 24699                                  
 24700                                  _$P_Skip_Delim_CY:			;AN000;
 24701 00001B8C F9                      	stc				;AN000; indicate EOL
 24702 00001B8D EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24703                                  
 24704                                  _$P_Skip_Delim_NCY:			;AN000;
 24705 00001B8F F8                      	clc				;AN000; indicate non delim
 24706                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24707 00001B90 4E                      	dec	si			;AN000;  backup index pointer
 24708                                  	; 14/08/2023
 24709                                  	; 12/12/2022
 24710                                  ;_$P_Exit_At_Extra:	 ; cf=0
 24711 00001B91 C3                      	retn				;AN000;
 24712                                  
 24713                                  	; 12/12/2022
 24714                                  ;_$P_Exit_At_Extra:			;AN000;
 24715                                  	;clc				;AN000; indicate extra delim
 24716                                  	;retn				;AN000;
 24717                                  
 24718                                  ;***********************************************************************
 24719                                  ; _$P_Chk_EOL;
 24720                                  ;
 24721                                  ; Function: Check if AL is one of End of Line characters.
 24722                                  ;
 24723                                  ; Input:    AL = character code
 24724                                  ;	    ES:DI -> Parameter List
 24725                                  ;
 24726                                  ; Output:   ZF = 1 if one of End of Line characters
 24727                                  ;**********************************************************************
 24728                                  
 24729                                  _$P_Chk_EOL:
 24730 00001B92 53                      	push	bx			;AN000;
 24731 00001B93 51                      	push	cx			;AN000;
 24732 00001B94 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24733 00001B96 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24734                                  
 24735 00001B98 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24736 00001B9A 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24737                                  
 24738                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24739 00001B9C 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24740 00001B9E 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24741                                  ;ENDIF					;AN028;
 24742                                  
 24743 00001BA0 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24744                                  					;AN000; EOL character specified ?
 24745 00001BA5 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24746                                  
 24747 00001BA7 31DB                    	xor	bx,bx			;AN000;
 24748 00001BA9 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24749                                  					;AN000; get length of delimiter list
 24750 00001BAD 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24751                                  	; 14/08/2023
 24752 00001BB0 31C9                    	xor	cx,cx ; *
 24753 00001BB2 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24754 00001BB6 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24755                                  	; 14/08/2023
 24756                                  	;;xor	cx,cx			;AN000; Get number of extra character
 24757                                  	;xor	ch,ch ; *
 24758 00001BB8 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 24759                                  _$P_Chk_EOL_Loop:			;AN000;
 24760 00001BBB 43                      	inc	bx			;AN000;
 24761 00001BBC 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24762 00001BBF 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24763 00001BC1 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24764                                  	; 14/08/2023
 24765                                  	; cx=0
 24766                                  _$P_Chk_EOL_NZ:				;AN000;
 24767                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 24768                                  	; 14/08/2023
 24769 00001BC3 41                      	inc	cx  ; zf=0 (cx=1) ; *
 24770                                  _$P_Chk_EOL_Exit:			;AN000;
 24771 00001BC4 59                      	pop	cx			;AN000;
 24772 00001BC5 5B                      	pop	bx			;AN000;
 24773 00001BC6 C3                      	retn
 24774                                  
 24775                                  ;***********************************************************************
 24776                                  ; _$P_Chk_Delim;
 24777                                  ;
 24778                                  ; Function: Check if AL is one of delimiter characters.
 24779                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24780                                  ;	    blanks.
 24781                                  ;
 24782                                  ; Input:    AL = character code
 24783                                  ;	    DS:SI -> Next Character
 24784                                  ;	    ES:DI -> Parameter List
 24785                                  ;
 24786                                  ; Output:   ZF = 1 if one of delimiter characters
 24787                                  ;	    SI points to the next character
 24788                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24789                                  ;***********************************************************************
 24790                                  
 24791                                  _$P_Chk_Delim:
 24792 00001BC7 53                      	push	bx			;AN000;
 24793 00001BC8 51                      	push	cx			;AN000;
 24794 00001BC9 2EC606[1D14]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24795                                  					;AC034; Assume terminated by space
 24796                                  	;and	byte [cs:_$P_Flags20,0DFh
 24797 00001BCF 2E8026[2314]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24798 00001BD5 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24799 00001BD7 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24800                                  
 24801 00001BD9 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24802 00001BDB 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24803                                  
 24804 00001BDD 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24805 00001BDF 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24806                                  
 24807                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 24808                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 24809                                  ;        Erdogan Tan - 14/08/2023
 24810                                  ;_$P_Chk_Delim00:
 24811                                  %if 0
 24812                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24813                                  _$P_Chk_Delim00: 			;AN000;
 24814                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24815                                  	jne	short _$P_Chk_Delim01	;AN000;
 24816                                  
 24817                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24818                                  	jne	short _$P_Chk_Delim01	;AN000;
 24819                                  
 24820                                  	mov	al,_$P_Space		;AN000;
 24821                                  	inc	si			;AN000; make si point to next character
 24822                                  	cmp	al,al			;AN000; Set ZF
 24823                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24824                                  %endif
 24825                                  
 24826                                  _$P_Chk_Delim01: 			;AN000;
 24827 00001BE1 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24828                                  					;AN000; delimiter character specified ?
 24829 00001BE6 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24830                                  
 24831                                  	;xor	cx,cx			;AN000;
 24832 00001BE8 30ED                    	xor	ch,ch
 24833                                  	;mov	cl,[es:di+3]
 24834 00001BEA 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24835                                  					;AN000; get length of delimiter list
 24836                                  	;or	cx,cx			;AN000; No extra Delim character ?
 24837                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 24838                                  	; 14/08/2023
 24839 00001BEE E30B                    	jcxz	_$P_Chk_Delim_NZ
 24840                                  
 24841 00001BF0 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24842                                  _$P_Chk_Delim_Loop:			;AN000;
 24843 00001BF3 43                      	inc	bx			;AN000;
 24844 00001BF4 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24845 00001BF7 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24846                                  
 24847 00001BF9 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24848                                  
 24849                                  _$P_Chk_Delim_NZ:			;AN000;
 24850                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 24851                                  	; 14/08/2023
 24852                                  	; cx=0 here
 24853 00001BFB 41                      	inc	cx ; cx=1, zf=0
 24854                                  _$P_Chk_Delim_Exit:			;AN000;
 24855                                  _$P_ChkDfin:				;AN000;
 24856 00001BFC 59                      	pop	cx			;AN000;
 24857 00001BFD 5B                      	pop	bx			;AN000;
 24858 00001BFE C3                      	retn				;AN000;
 24859                                  
 24860                                  _$P_Chk_Delim_Exit0:			;AN000;
 24861 00001BFF 2EA2[1D14]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24862 00001C03 2EF606[2314]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24863 00001C09 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24864                                  
 24865 00001C0B 2E800E[2314]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24866                                  					;AC034; flag terminated extra delimiter or comma
 24867                                  _$P_No_Set_Extra:			;AN027;
 24868 00001C11 38C0                    	cmp	al,al			;AN000; set ZF
 24869 00001C13 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24870                                  
 24871                                  
 24872                                  ;***********************************************************************
 24873                                  ; _$P_Chk_Switch;
 24874                                  ;
 24875                                  ; Function: Check if AL is the switch character not in first position of
 24876                                  ;	    _$P_STRING_BUF
 24877                                  ;
 24878                                  ; Input:    AL = character code
 24879                                  ;	    BX = current pointer within _$P_String_Buf
 24880                                  ;	    SI =>next char on command line (following the one in AL)
 24881                                  ;
 24882                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24883                                  ;		 position, and has no chance of being part of a date string,
 24884                                  ;		 i.e. should be treated as a delimiter.
 24885                                  
 24886                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24887                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24888                                  ;		 should not be treated as a delimiter.
 24889                                  ;
 24890                                  ; Vars:  _$P_Terminator(W)
 24891                                  
 24892                                  ; Use:	 _$P_0099
 24893                                  ;***********************************************************************
 24894                                  
 24895                                  _$P_Chk_Switch:
 24896                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24897                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 24898                                  	; 14/08/2023
 24899 00001C15 BD[2C14]                	mov	bp,_$P_STRING_BUF
 24900                                  
 24901                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24902 00001C18 39EB                    	cmp	bx,bp			;AN000;
 24903 00001C1A 7406                    	je	short _$P_STRUC_L2	;AN000;
 24904                                  
 24905                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24906 00001C1C 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24907 00001C1E 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24908                                  
 24909 00001C20 F9                      	stc				;AN020;not in first position and is slash
 24910                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24911                                  	; 12/12/2022
 24912 00001C21 C3                      	retn
 24913                                  
 24914                                  ; 12/12/2022
 24915                                  ;_$P_STRUC_L5:				;AN000;
 24916                                  ;	CLC				;AN020;not a slash
 24917                                  ;;	    .ENDIF			;AN020;
 24918                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24919                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24920                                  
 24921                                  _$P_STRUC_L2:				;AN000;
 24922                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24923 00001C22 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24924 00001C24 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24925                                  
 24926 00001C26 2E800E[2314]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24927                                  ;	    .ENDIF			;AN020;
 24928                                  
 24929                                  	; 12/12/2022
 24930                                  	; cf=0
 24931                                  	;retn
 24932                                  
 24933                                  _$P_STRUC_L5:
 24934                                  	; 12/12/2022
 24935                                  _$P_STRUC_L12:				;AN000;
 24936 00001C2C F8                      	clc				;AN020;CF=0 indicating first char
 24937                                  ;	.ENDIF				;AN020;
 24938                                  _$P_STRUC_L1:				;AN000;
 24939 00001C2D C3                      	retn				;AN000;
 24940                                  
 24941                                  ;**************************************************************************
 24942                                  ; _$P_Chk_DBCS:
 24943                                  ;
 24944                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24945                                  ;
 24946                                  ;  Input:
 24947                                  ;	  AL	= Code to be examineed
 24948                                  ;
 24949                                  ;  Output:
 24950                                  ;	  If CF is on then a lead byte of DBCS
 24951                                  ;
 24952                                  ; Use: INT 21h w/AH=63
 24953                                  ;
 24954                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24955                                  ;***************************************************************************
 24956                                  
 24957                                  _$P_Chk_DBCS:
 24958 00001C2E 1E                      	push	ds			;AN000;
 24959 00001C2F 56                      	push	si			;AN000;
 24960 00001C30 53                      	push	bx			;AN000; (tm11)
 24961                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24962                                  	;jne	short _$P_DBCS00	;AN000;
 24963                                  	; 14/08/2023
 24964 00001C31 2E8B36[2014]            	mov	si,[cs:_$P_DBCSEV_SEG]
 24965 00001C36 21F6                    	and	si,si ; 0 ?
 24966 00001C38 7525                    	jnz	short _$P_DBCS00 ; already set
 24967 00001C3A 50                      	push	ax			;AN000;
 24968 00001C3B 1E                      	push	ds			;AN000; (tm11)
 24969 00001C3C 51                      	push	cx			;AN000;
 24970 00001C3D 52                      	push	dx			;AN000;
 24971 00001C3E 57                      	push	di			;AN000;
 24972 00001C3F 55                      	push	bp			;AN000;
 24973 00001C40 06                      	push	es			;AN000;
 24974                                  	; si = 0 ; 14/08/2023
 24975                                  	;xor	si,si			;AN000;
 24976 00001C41 8EDE                    	mov	ds,si ; 0		;AN000;
 24977 00001C43 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24978 00001C46 CD21                    	int	21h			;AN000;
 24979                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24980 00001C48 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24981 00001C4A 09DB                    	or	bx,bx			;AN000; (tm11)
 24982 00001C4C 07                      	pop	es			;AN000;
 24983 00001C4D 5D                      	pop	bp			;AN000;
 24984 00001C4E 5F                      	pop	di			;AN000;
 24985 00001C4F 5A                      	pop	dx			;AN000;
 24986 00001C50 59                      	pop	cx			;AN000;
 24987 00001C51 1F                      	pop	ds			;AN000; (tm11)
 24988 00001C52 58                      	pop	ax			;AN000;
 24989 00001C53 7424                    	jz	short _$P_NON_DBCS	;AN000;
 24990                                  _$P_DBCS02:				;AN000;
 24991 00001C55 2E8936[1E14]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24992 00001C5A 2E891E[2014]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24993                                  _$P_DBCS00:				;AN000;
 24994                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24995                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24996                                  	; 14/08/2023
 24997 00001C5F 2EC536[1E14]            	lds	si,[cs:_$P_DBCSEV_OFF]
 24998                                  _$P_DBCS_LOOP:				;AN000;
 24999 00001C64 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 25000 00001C67 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 25001 00001C69 3A04                    	cmp	al,[si] 		;AN000;
 25002 00001C6B 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 25003 00001C6D 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 25004 00001C70 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 25005 00001C72 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 25006 00001C73 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 25007                                  _$P_DBCS01:				;AN000;
 25008 00001C75 46                      	inc	si			;AC035; add '2' to
 25009 00001C76 46                      	inc	si			;AC035;  SI reg
 25010                                  					;AN000; get next vector
 25011 00001C77 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 25012                                  _$P_NON_DBCS:				;AN000;
 25013                                  	; 12/12/2022
 25014                                  	; cf=0
 25015                                  	;clc				;AN000; indicate SBCS
 25016                                  _$P_DBCS_EXIT:				;AN000;
 25017 00001C79 5B                      	pop	bx			;AN000; (tm11)
 25018 00001C7A 5E                      	pop	si			;AN000;
 25019 00001C7B 1F                      	pop	ds			;AN000;
 25020 00001C7C C3                      	retn				;AN000;
 25021                                  
 25022                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 25023                                  ; ======================================================================
 25024                                  ; 27/03/2019 - Retro DOS v4.0
 25025                                  
 25026                                  ;control block definitions for parser.
 25027                                  ;-----------------------------------------------------------------------
 25028                                  ; buffer = [n | n,m] {/e}
 25029                                  
 25030                                  ; 30/03/2019
 25031                                  
 25032                                  struc p_parms
 25033 00000000 ????                    	resw	1	; dw ?
 25034 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 25035 00000003 ??                      	resb	1	; db 1	; length is 1
 25036 00000004 ??                      	resb 	1	; db ';' ; delimiter
 25037                                  .size:
 25038                                  endstruc
 25039                                  
 25040                                  struc p_pos
 25041 00000000 ????                    	resw	1	; dw ?	; numeric value??
 25042 00000002 ????                    	resw	1	; dw ?	; function
 25043 00000004 ????                    	resw	1	; dw ?	; result value buffer
 25044                                  
 25045                                  ; note: by defining result_val before this structure, we could remove
 25046                                  ;  the "result_val" from every structure invocation
 25047                                  
 25048 00000006 ????                    	resw	1	; dw ?	; value list
 25049 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 25050                                  .size:
 25051                                  endstruc
 25052                                  
 25053                                  struc	p_range
 25054 00000000 ??                      	resb	1	; db 1	; range definition
 25055 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 25056 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 25057 00000003 ????????                	resd	1	; dd ?	; numeric min
 25058 00000007 ????????                	resd	1	; dd ?	; numeric max
 25059                                  .size:
 25060                                  endstruc
 25061                                  
 25062                                  ;-----------------------------------------------------------------------
 25063                                  
 25064                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25065                                  	; (SYSINIT:1F48h)
 25066                                  
 25067                                  ; buffer = [n | n,m] {/e}
 25068                                  
 25069                                  ;buf_parms p_parms <buf_parmsx>
 25070                                  buf_parms: 
 25071 00001C7D [821C]                  	dw	buf_parmsx
 25072 00001C7F 01                      	db	1	; an extra delimiter list
 25073 00001C80 01                      	db	1	; length is 1
 25074 00001C81 3B                      	db	';'	; delimiter
 25075                                  
 25076                                  buf_parmsx:
 25077 00001C82 0102[8C1C][A01C]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 25078 00001C88 01                      	db	1			; one switch
 25079 00001C89 [B41C]                  	dw	sw_x_ctrl
 25080 00001C8B 00                      	db	0			; no keywords
 25081                                  
 25082                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 25083                                  buf_pos1:
 25084 00001C8C 0080                    	dw	8000h	; numeric value??
 25085 00001C8E 0000                    	dw	0	; function
 25086 00001C90 [C61C]                  	dw	result_val ; result value buffer	
 25087 00001C92 [951C]                  	dw	buf_range_1 ; value list
 25088 00001C94 00                      	db	0  	; no switches/keywords
 25089                                  
 25090                                  ;buf_range_1 p_range <,,,1,99>		; M050
 25091                                  buf_range_1:
 25092 00001C95 01                      	db	1	; range definition
 25093 00001C96 01                      	db	1	; 1 definition of range
 25094 00001C97 01                      	db	1	; item tag for this range
 25095 00001C98 01000000                	dd	1	; numeric min
 25096 00001C9C 63000000                	dd	99	; numeric max
 25097                                  
 25098                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 25099                                  buf_pos2:
 25100 00001CA0 0180                    	dw	8001h
 25101 00001CA2 0000                    	dw	0
 25102 00001CA4 [C61C]                  	dw	result_val	
 25103 00001CA6 [A91C]                  	dw	buf_range_2
 25104 00001CA8 00                      	db	0
 25105                                  
 25106                                  ;buf_range_2 p_range <,,,0,8>
 25107                                  buf_range_2:
 25108 00001CA9 01                      	db	1
 25109 00001CAA 01                      	db	1
 25110 00001CAB 01                      	db	1
 25111 00001CAC 00000000                	dd	0
 25112 00001CB0 08000000                	dd	8
 25113                                  
 25114                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 25115                                  sw_x_ctrl:
 25116 00001CB4 0000                    	dw	0
 25117 00001CB6 0000                    	dw	0
 25118 00001CB8 [C61C]                  	dw	result_val	
 25119 00001CBA [C51C]                  	dw	noval
 25120 00001CBC 01                      	db	1	; 1 switch
 25121                                  	
 25122                                  switch_x:
 25123 00001CBD 2F5800                  	db	'/X',0		; M016
 25124                                  
 25125                                  p_buffers:
 25126 00001CC0 0000                    	dw	0	; local variables
 25127                                  p_h_buffers:
 25128 00001CC2 0000                    	dw	0
 25129                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25130                                  p_buffer_slash_x:
 25131 00001CC4 00                      	db	0 ; 31/03/2019
 25132                                  
 25133                                  ;-- common definitions -------------------------------------------------
 25134                                  
 25135 00001CC5 00                      noval:	db	0
 25136                                  
 25137                                  result_val: 	;label	byte
 25138 00001CC6 00                      	db	0		; type returned
 25139                                  result_val_itag:
 25140 00001CC7 00                      	db	0		; item tag returned
 25141                                  result_val_swoff:
 25142 00001CC8 0000                    	dw	0		; es:offset of the switch defined
 25143                                  rv_byte:	;label	byte
 25144 00001CCA 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 25145                                  
 25146                                  ;-----------------------------------------------------------------------
 25147                                  
 25148                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25149                                  	; (SYSINIT:1F99h)
 25150                                  
 25151                                  ; break = [ on | off ]
 25152                                  
 25153                                  ;brk_parms p_parms  <brk_parmsx>
 25154                                  brk_parms:
 25155 00001CCE [D31C]                  	dw	brk_parmsx
 25156 00001CD0 01                      	db	1	; an extra delimiter list
 25157 00001CD1 01                      	db	1	; length is 1
 25158 00001CD2 3B                      	db	';'	; delimiter
 25159                                  
 25160                                  brk_parmsx:
 25161 00001CD3 0101[D91C]              	dw	101h,brk_pos	; min,max = 1 positional
 25162 00001CD7 00                      	db	0		; no switches
 25163 00001CD8 00                      	db	0		; no keywords
 25164                                  
 25165                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25166                                  brk_pos:
 25167 00001CD9 0020                    	dw	2000h
 25168 00001CDB 0000                    	dw	0
 25169 00001CDD [C61C]                  	dw	result_val	
 25170 00001CDF [E21C]                  	dw	on_off_string
 25171 00001CE1 00                      	db	0
 25172                                  
 25173                                  on_off_string:	;label	byte
 25174 00001CE2 03                      	db	3		; signals that there is a string choice
 25175 00001CE3 00                      	db	0		; no range definition
 25176 00001CE4 00                      	db	0		; no numeric values choice
 25177 00001CE5 02                      	db	2		; 2 strings for choice
 25178 00001CE6 01                      	db	1		; the 1st string tag
 25179 00001CE7 [EC1C]                  	dw	on_string
 25180 00001CE9 02                      	db	2		; the 2nd string tag
 25181 00001CEA [EF1C]                  	dw	off_string
 25182                                  
 25183                                  on_string:
 25184 00001CEC 4F4E00                  	db	"ON",0
 25185                                  off_string:
 25186 00001CEF 4F464600                	db	"OFF",0
 25187                                  
 25188                                  p_ctrl_break:
 25189 00001CF3 00                      	db	0	; local variable
 25190                                  
 25191                                  ;-----------------------------------------------------------------------
 25192                                  
 25193                                  	; 27/10/2022
 25194                                  
 25195                                  ; country = n {m {path}}
 25196                                  ; or
 25197                                  ; country = n,,path
 25198                                  
 25199                                  ;cntry_parms p_parms <cntry_parmsx>
 25200                                  cntry_parms:
 25201 00001CF4 [F91C]                  	dw	cntry_parmsx
 25202 00001CF6 01                      	db	1
 25203 00001CF7 01                      	db	1
 25204 00001CF8 3B                      	db	';'
 25205                                  	
 25206                                  cntry_parmsx:
 25207 00001CF9 0103[031D][171D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 25207 00001CFF [201D]             
 25208 00001D01 00                      	db	0		; no switches
 25209 00001D02 00                      	db	0		; no keywords
 25210                                  
 25211                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 25212                                  cntry_pos1:
 25213 00001D03 0080                    	dw	8000h
 25214 00001D05 0000                    	dw	0
 25215 00001D07 [C61C]                  	dw	result_val	
 25216 00001D09 [0C1D]                  	dw	cc_range
 25217 00001D0B 00                      	db	0
 25218                                  
 25219                                  ;cc_range p_range <,,,1,999>
 25220                                  cc_range:
 25221 00001D0C 01                      	db	1
 25222 00001D0D 01                      	db	1
 25223 00001D0E 01                      	db	1
 25224 00001D0F 01000000                	dd	1
 25225 00001D13 E7030000                	dd	999
 25226                                  
 25227                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 25228                                  cntry_pos2:
 25229 00001D17 0180                    	dw	8001h
 25230 00001D19 0000                    	dw	0
 25231 00001D1B [C61C]                  	dw	result_val	
 25232 00001D1D [0C1D]                  	dw	cc_range
 25233 00001D1F 00                      	db	0
 25234                                  
 25235                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 25236                                  cntry_pos3:
 25237 00001D20 0102                    	dw	201h
 25238 00001D22 0000                    	dw	0
 25239 00001D24 [C61C]                  	dw	result_val	
 25240 00001D26 [C51C]                  	dw	noval
 25241 00001D28 00                      	db	0	
 25242                                  
 25243                                  p_cntry_code:
 25244 00001D29 0000                    	dw	0	; local variable
 25245                                  p_code_page:
 25246 00001D2B 0000                    	dw	0	; local variable
 25247                                  
 25248                                  ;-----------------------------------------------------------------------
 25249                                  
 25250                                  	; 27/10/2022
 25251                                  
 25252                                  ; files = n
 25253                                  
 25254                                  ;files_parms p_parms <files_parmsx>
 25255                                  files_parms:
 25256 00001D2D [321D]                  	dw	files_parmsx
 25257 00001D2F 01                      	db	1
 25258 00001D30 01                      	db	1
 25259 00001D31 3B                      	db	';'
 25260                                  
 25261                                  files_parmsx:
 25262 00001D32 0101[381D]              	dw	101h,files_pos	; min,max 1 positional
 25263 00001D36 00                      	db	0		; no switches
 25264 00001D37 00                      	db	0		; no keywords
 25265                                  
 25266                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 25267                                  files_pos:
 25268 00001D38 0080                    	dw	8000h
 25269 00001D3A 0000                    	dw	0
 25270 00001D3C [C61C]                  	dw	result_val	
 25271 00001D3E [411D]                  	dw	files_range
 25272 00001D40 00                      	db	0
 25273                                  
 25274                                  ;files_range p_range <,,,8,255>
 25275                                  files_range:
 25276 00001D41 01                      	db	1
 25277 00001D42 01                      	db	1
 25278 00001D43 01                      	db	1
 25279 00001D44 08000000                	dd	8
 25280 00001D48 FF000000                	dd	255
 25281                                  
 25282                                  p_files:
 25283 00001D4C 00                      	db	0		; local variable
 25284                                  
 25285                                  ;-----------------------------------------------------------------------
 25286                                  
 25287                                  	; 27/10/2022
 25288                                  
 25289                                  ; fcbs = n,m
 25290                                  
 25291                                  ;fcbs_parms p_parms <fcbs_parmsx>
 25292                                  fcbs_parms:
 25293 00001D4D [521D]                  	dw	fcbs_parmsx
 25294 00001D4F 01                      	db	1
 25295 00001D50 01                      	db	1
 25296 00001D51 3B                      	db	';'
 25297                                  
 25298                                  fcbs_parmsx:
 25299 00001D52 0102[5A1D][6E1D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 25300 00001D58 00                      	db	0		; no switches
 25301 00001D59 00                      	db	0		; no keywords
 25302                                  
 25303                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 25304                                  fcbs_pos_1:
 25305 00001D5A 0080                    	dw	8000h
 25306 00001D5C 0000                    	dw	0
 25307 00001D5E [C61C]                  	dw	result_val	
 25308 00001D60 [631D]                  	dw	fcbs_range
 25309 00001D62 00                      	db	0
 25310                                  
 25311                                  ;fcbs_range p_range <,,,1,255>
 25312                                  fcbs_range:
 25313 00001D63 01                      	db	1
 25314 00001D64 01                      	db	1
 25315 00001D65 01                      	db	1
 25316 00001D66 01000000                	dd	1
 25317 00001D6A FF000000                	dd	255
 25318                                  
 25319                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 25320                                  fcbs_pos_2:
 25321 00001D6E 0080                    	dw	8000h
 25322 00001D70 0000                    	dw	0
 25323 00001D72 [C61C]                  	dw	result_val	
 25324 00001D74 [771D]                  	dw	fcbs_keep_range
 25325 00001D76 00                      	db	0
 25326                                  
 25327                                  ;fcbs_keep_range p_range <,,,0,255>
 25328                                  fcbs_keep_range:
 25329 00001D77 01                      	db	1
 25330 00001D78 01                      	db	1
 25331 00001D79 01                      	db	1
 25332 00001D7A 00000000                	dd	0
 25333 00001D7E FF000000                	dd	255
 25334                                  
 25335 00001D82 00                      p_fcbs:	db	0		; local variable
 25336 00001D83 00                      p_keep:	db	0		; local variable
 25337                                  
 25338                                  ;-----------------------------------------------------------------------
 25339                                  
 25340                                  	; 27/10/2022
 25341                                  
 25342                                  ; lastdrive = x
 25343                                  
 25344                                  ;ldrv_parms p_parms <ldrv_parmsx>
 25345                                  ldrv_parms:
 25346 00001D84 [891D]                  	dw	ldrv_parmsx
 25347 00001D86 01                      	db	1
 25348 00001D87 01                      	db	1
 25349 00001D88 3B                      	db	';'
 25350                                  
 25351                                  ldrv_parmsx:
 25352 00001D89 0101[8F1D]              	dw	101h,ldrv_pos	; min,max = 1 positional
 25353 00001D8D 00                      	db	0		; no switches
 25354 00001D8E 00                      	db	0		; no keywords
 25355                                  
 25356                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 25357                                  ldrv_pos:				    ; remove colon at end
 25358 00001D8F 1001                    	dw	110h
 25359 00001D91 1000                    	dw	10h
 25360 00001D93 [C61C]                  	dw	result_val	
 25361 00001D95 [C51C]                  	dw	noval
 25362 00001D97 00                      	db	0
 25363                                  	
 25364 00001D98 00                      p_ldrv:	db	0		; local variable
 25365                                  
 25366                                  ;-----------------------------------------------------------------------
 25367                                  
 25368                                  	; 27/10/2022
 25369                                  
 25370                                  ; stacks = n,m
 25371                                  
 25372                                  ;stks_parms p_parms <stks_parmsx>
 25373                                  stks_parms:
 25374 00001D99 [9E1D]                  	dw	stks_parmsx
 25375 00001D9B 01                      	db	1
 25376 00001D9C 01                      	db	1
 25377 00001D9D 3B                      	db	';'
 25378                                  
 25379                                  stks_parmsx:
 25380 00001D9E 0202[A61D][BA1D]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 25381 00001DA4 00                      	db	0		; no switches
 25382 00001DA5 00                      	db	0		; no keywords
 25383                                  
 25384                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 25385                                  stks_pos_1:
 25386 00001DA6 0080                    	dw	8000h
 25387 00001DA8 0000                    	dw	0
 25388 00001DAA [C61C]                  	dw	result_val	
 25389 00001DAC [AF1D]                  	dw	stks_range
 25390 00001DAE 00                      	db	0
 25391                                  
 25392                                  ;stks_range p_range <,,,0,64>
 25393                                  stks_range:
 25394 00001DAF 01                      	db	1
 25395 00001DB0 01                      	db	1
 25396 00001DB1 01                      	db	1
 25397 00001DB2 00000000                	dd	0
 25398 00001DB6 40000000                	dd	64
 25399                                  
 25400                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 25401                                  stks_pos_2:
 25402 00001DBA 0080                    	dw	8000h
 25403 00001DBC 0000                    	dw	0
 25404 00001DBE [C61C]                  	dw	result_val	
 25405 00001DC0 [C31D]                  	dw	stk_size_range
 25406 00001DC2 00                      	db	0
 25407                                  
 25408                                  ;stk_size_range p_range <,,,0,512>
 25409                                  stk_size_range:
 25410 00001DC3 01                      	db	1
 25411 00001DC4 01                      	db	1
 25412 00001DC5 01                      	db	1
 25413 00001DC6 00000000                	dd	0
 25414 00001DCA 00020000                	dd	512	
 25415                                  
 25416                                  p_stack_count:
 25417 00001DCE 0000                    	dw	0	; local variable
 25418                                  p_stack_size:
 25419 00001DD0 0000                    	dw	0	; local variable
 25420                                  
 25421                                  ;-----------------------------------------------------------------------
 25422                                  
 25423                                  	; 27/10/2022
 25424                                  
 25425                                  ; multitrack = [ on | off ]
 25426                                  
 25427                                  ;mtrk_parms p_parms <mtrk_parmsx>
 25428                                  mtrk_parms:
 25429 00001DD2 [D71D]                  	dw	mtrk_parmsx
 25430 00001DD4 01                      	db	1
 25431 00001DD5 01                      	db	1
 25432 00001DD6 3B                      	db	';'
 25433                                  
 25434                                  mtrk_parmsx:
 25435 00001DD7 0101[DD1D]              	dw	101h,mtrk_pos	; min,max = 1 positional
 25436 00001DDB 00                      	db	0		; no switches
 25437 00001DDC 00                      	db	0		; no keywords
 25438                                  
 25439                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25440                                  mtrk_pos:
 25441 00001DDD 0020                    	dw	2000h
 25442 00001DDF 0000                    	dw	0
 25443 00001DE1 [C61C]                  	dw	result_val	
 25444 00001DE3 [E21C]                  	dw	on_off_string
 25445 00001DE5 00                      	db	0
 25446                                  
 25447 00001DE6 00                      p_mtrk:	db	0		; local variable
 25448                                  
 25449                                  ;-----------------------------------------------------------------------
 25450                                  
 25451                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25452                                  	; (SYSINIT:20B2h)
 25453                                  
 25454                                  ; switches=/k
 25455                                  
 25456                                  ;swit_parms p_parms <swit_parmsx>
 25457                                  swit_parms:
 25458 00001DE7 [EC1D]                  	dw	swit_parmsx
 25459 00001DE9 01                      	db	1
 25460 00001DEA 01                      	db	1
 25461 00001DEB 3B                      	db	';'
 25462                                  
 25463                                  swit_parmsx:
 25464 00001DEC 0000                    	dw	0		; no positionals
 25465                                  	;db	5               ; # of switches
 25466                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25467 00001DEE 03                      	db	3
 25468 00001DEF [F61D]                  	dw	swit_k_ctrl	; /k control
 25469                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 25470                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 25471 00001DF1 [021E]                  	dw	swit_t_ctrl     ; /t control
 25472 00001DF3 [0E1E]                  	dw	swit_w_ctrl     ; /w control
 25473 00001DF5 00                      	db	0		; no keywords
 25474                                  
 25475                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25476                                  swit_k_ctrl:
 25477 00001DF6 00000000[C61C]-         	dw	0,0,result_val,noval
 25477 00001DFC [C51C]             
 25478 00001DFE 01                      	db	1
 25479 00001DFF 2F4B00                  swit_k:	db	'/K',0
 25480                                  
 25481                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25482                                  ;
 25483                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25484                                  ;swit_n_ctrl:
 25485                                  ;	dw	0,0,result_val,noval
 25486                                  ;	db	1
 25487                                  ;swit_n: db	'/N',0
 25488                                  ;
 25489                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25490                                  ;swit_f_ctrl:
 25491                                  ;	dw	0,0,result_val,noval
 25492                                  ;	db	1
 25493                                  ;swit_f: db 	'/F',0
 25494                                  
 25495                                  	; 27/10/2022
 25496                                  
 25497                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25498                                  swit_t_ctrl:
 25499 00001E02 00000000[C61C]-         	dw	0,0,result_val,noval
 25499 00001E08 [C51C]             
 25500 00001E0A 01                      	db	1
 25501 00001E0B 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25502                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25503                                  swit_w_ctrl:
 25504 00001E0E 00000000[C61C]-         	dw	0,0,result_val,noval
 25504 00001E14 [C51C]             
 25505 00001E16 01                      	db	1
 25506 00001E17 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25507                                  
 25508                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 25509                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 25510                                  ;   in the above table to prevent the parsing code from complaining about them
 25511                                  
 25512 00001E1A 00                      p_swit_k:	db     0	; local variable
 25513 00001E1B 00                      p_swit_t:	db     0	; local variable			M059
 25514 00001E1C 00                      p_swit_w:	db     0	; local variable			M063
 25515                                  
 25516                                  ;-----------------------------------------------------------------------
 25517                                  
 25518                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25519                                  	; (SYSINIT:20E8h)
 25520                                  
 25521                                  ; DOS = [ high | low ]
 25522                                  
 25523                                  ;dos_parms p_parms  <dos_parmsx>
 25524                                  dos_parms:
 25525 00001E1D [221E]                  	dw	dos_parmsx
 25526 00001E1F 01                      	db	1
 25527 00001E20 01                      	db	1
 25528 00001E21 3B                      	db	';'
 25529                                  dos_parmsx:
 25530 00001E22 01                      	db	1		; min parameters
 25531 00001E23 02                      	db	2		; max parameters
 25532 00001E24 [2A1E]                  	dw	dos_pos		; 
 25533 00001E26 [2A1E]                  	dw	dos_pos		; 
 25534 00001E28 00                      	db	0		; no switches
 25535 00001E29 00                      	db	0		; no keywords
 25536                                  
 25537                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25538                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25539                                  dos_pos:
 25540 00001E2A 00200000[C61C]-         	dw	2000h,0,result_val,dos_strings
 25540 00001E30 [3C1E]             
 25541 00001E32 00                      	db	0
 25542 00001E33 00200000[C61C]-         	dw	2000h,0,result_val,dos_strings
 25542 00001E39 [3C1E]             
 25543 00001E3B 00                      	db	0	
 25544                                  
 25545                                  dos_strings:	;label	byte
 25546 00001E3C 03                      	db	3		; signals that there is a string choice
 25547 00001E3D 00                      	db	0		; no range definition
 25548 00001E3E 00                      	db	0		; no numeric values choice
 25549 00001E3F 04                      	db	4		; 4 strings for choice
 25550 00001E40 01                      	db	1		; the 1st string tag
 25551 00001E41 [4C1E]                  	dw	hi_string
 25552 00001E43 02                      	db	2		; the 2nd string tag
 25553 00001E44 [511E]                  	dw	lo_string
 25554 00001E46 03                      	db	3
 25555 00001E47 [551E]                  	dw	umb_string
 25556 00001E49 04                      	db	4
 25557 00001E4A [591E]                  	dw	noumb_string
 25558                                  
 25559 00001E4C 4849474800              hi_string:	db	"HIGH",0
 25560 00001E51 4C4F5700                lo_string:	db	"LOW",0
 25561 00001E55 554D4200                umb_string:	db	"UMB",0
 25562 00001E59 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25563                                  
 25564 00001E5F 00                      p_dos_hi:	db	0	; local variable
 25565                                  				; BUGBUG : I dont know whether PARSER uses
 25566                                  				;          this variable or not
 25567                                  
 25568                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25569                                  
 25570                                  %if 0
 25571                                  
 25572                                  ;****************************************************************** RICHID ****
 25573                                  
 25574                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25575                                  
 25576                                  ; 30/03/2019 - Retro DOS v4.0
 25577                                  ;------------------------------------------------------------------------------
 25578                                  
 25579                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25580                                  ;
 25581                                  ;   Date:     May 14, 1992
 25582                                  ;
 25583                                  ;******************************************************************************
 25584                                  ;
 25585                                  ;   Modification log:
 25586                                  ;
 25587                                  ;     DATE    WHO      DESCRIPTION
 25588                                  ;   --------  -------  --------------------------------------------------------
 25589                                  ;   05/14/92  t-richj  Original
 25590                                  ;   06/21/92  t-richj  Final revisions before check-in
 25591                                  ;
 25592                                  ;******************************************************************************
 25593                                  ;
 25594                                  ; There are two primary definitions which need to be made, selectively, before
 25595                                  ; this include file should be used.  These are:
 25596                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25597                                  ;                declared as external.  Otherwise, variables will be declared
 25598                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25599                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25600                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25601                                  ;                (as only one module, sysconf.asm, includes this file).
 25602                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25603                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25604                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25605                                  ;
 25606                                  ;******************************************************************************
 25607                                  
 25608                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25609                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25610                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25611                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25612                                  ; space problem (it's just such a nice round number, eh?).
 25613                                  
 25614                                  MAXUMB	equ	16
 25615                                  
 25616                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25617                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25618                                  
 25619                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25620                                  SystemPSPOwner	equ	8
 25621                                  ;JapanPSPOwner	equ	9
 25622                                  
 25623                                  ; for LoadHigh and DeviceHigh:
 25624                                  ;
 25625                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25626                                  ;	          UnHideUMBs().
 25627                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25628                                  ;	           line.
 25629                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25630                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25631                                  ;	          given a command-line like "/L:3,500;4"
 25632                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25633                                  ;	          matching its index number was specified on the command-line;
 25634                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25635                                  ;	          will be set to 1.  All others will be set to 0.
 25636                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25637                                  ;	          specified by the user for a UMB (in the above example, all
 25638                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25639                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25640                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25641                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25642                                  ;	           for details).
 25643                                  
 25644                                  fInHigh:  db	0
 25645                                  fUmbTiny: db	0
 25646                                  SegLoad:  dw	0
 25647                                  UmbLoad:  db	0
 25648                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25649                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25650                                  fm_umb:   db	0
 25651                                  fm_strat: db	0
 25652                                  fm_argc:  db	0	
 25653                                  
 25654                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25655                                  ; UmbLoad is set to the UMB number given.
 25656                                  
 25657                                  UNSPECIFIED	equ	-1
 25658                                  
 25659                                  %endif
 25660                                  
 25661                                  ;****************************************************************** RICHID ****
 25662                                  
 25663                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25664                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25665                                  
 25666                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25667                                  ; (SYSINIT:212Bh)	
 25668                                  
 25669                                  		;public	DevEntry
 25670                                  
 25671 00001E60 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25672 00001E62 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25673 00001E64 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25674 00001E66 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25675 00001E6A 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25676                                  ; 27/10/2022 
 25677                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25678                                  ;
 25679 00001E6E 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25680 00001E6F 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25681 00001E71 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25682 00001E73 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25683                                  ;
 25684 00001E75 00000000                DevXMSAddr:	dd	0
 25685                                  ;
 25686 00001E79 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25687 00001E7B 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25688                                  ;
 25689 00001E7D 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25690                                  				;  is being loaded into UMB
 25691 00001E7E 0000                    DevSizeOption:	dw	0	; SIZE= option
 25692                                  ;
 25693 00001E80 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25694 00001E81 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25695 00001E83 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25696                                  ;
 25697 00001E8B 00                      FirstUMBLinked:	db	0
 25698 00001E8C 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25699 00001E8E 00000000                DevCmdLine:	dd	0	; Current Command line
 25700 00001E92 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25701                                  				; to use the file name in the command line
 25702                                  ;
 25703                                  ;	ifdef	dblspace_hooks
 25704                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25705                                  ;	endif
 25706                                  
 25707                                  ; ===========================================================================
 25708                                  
 25709                                  ; 31/03/2019 - Retro DOS v4.0
 25710                                  
 25711                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25712                                  ; (SYSINIT:215Eh)
 25713                                  
 25714                                  ;----------------------------------------------------------------------------
 25715                                  ;
 25716                                  ; procedure : doconf
 25717                                  ;
 25718                                  ;             Config file is parsed initially with this routine. For the
 25719                                  ;             Subsequent passes 'multi_pass' entry is used .
 25720                                  ;
 25721                                  ;----------------------------------------------------------------------------
 25722                                  
 25723                                  	; 27/10/2022
 25724                                  doconf:
 25725 00001E93 0E                      	push	cs
 25726 00001E94 1F                      	pop	ds
 25727                                  
 25728 00001E95 B80037                  	mov	ax,3700h
 25729                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25730 00001E98 CD21                    	int	21h
 25731 00001E9A 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25732                                  
 25733                                  ; 27/10/2022
 25734                                  ;;ifdef	MULTI_CONFIG
 25735                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25736                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25737                                  ;;endif	;MULTI_CONFIG
 25738                                  
 25739 00001E9E BA[0A33]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25740 00001EA1 B8003D                  	mov	ax,3D00h
 25741                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25742 00001EA4 F9                      	stc				;in case of int 24
 25743 00001EA5 CD21                    	int	21h			;function request
 25744 00001EA7 7306                    	jnc	short noprob		; brif opened okay
 25745                                  
 25746                                  ; 27/10/2022
 25747                                  ;;ifdef	MULTI_CONFIG
 25748                                  ;      	call	kbd_read		; we still want to give the guy
 25749                                  ;					; a chance to select clean boot!
 25750                                  ;;endif					; (ie, no autoexec.bat processing)
 25751 00001EA9 C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25752 00001EAE C3                      	retn
 25753                                  noprob: 				;get file size (note < 64k!!)
 25754 00001EAF 89C3                    	mov	bx,ax  ; File handle
 25755 00001EB1 31C9                    	xor	cx,cx
 25756 00001EB3 31D2                    	xor	dx,dx
 25757                                  	;mov	ax,4202h
 25758 00001EB5 B80242                  	mov	ax,(LSEEK<<8)|2
 25759 00001EB8 CD21                    	int	21h
 25760 00001EBA A3[D203]                	mov	[count],ax
 25761                                  
 25762 00001EBD 31D2                    	xor	dx,dx
 25763                                  	;mov	ax,4200h
 25764 00001EBF B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25765 00001EC2 CD21                    	int	21h
 25766                                  
 25767                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25768                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25769 00001EC4 8B16[A102]              	mov	dx,[top_of_cdss] 
 25770                                  
 25771 00001EC8 A1[D203]                	mov	ax,[count]
 25772 00001ECB A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25773 00001ECE E8D3F1                  	call	ParaRound
 25774 00001ED1 29C2                    	sub	dx,ax
 25775                                  
 25776                                  ; 27/10/2022
 25777                                  ;;ifdef	MULTI_CONFIG
 25778                                  ;;
 25779                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25780                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25781                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25782                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25783                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25784                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25785                                  ;;  of extra space, so here we account for it (the worst case of course is
 25786                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25787                                  ;;
 25788                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25789                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25790                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25791                                  ;;endif	;MULTI_CONFIG
 25792                                  
 25793 00001ED3 83EA11                  	sub	dx,11h			;room for header
 25794                                  	
 25795                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25796                                  	;mov	[CONFBOT],dx
 25797                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25798 00001ED6 8916[A102]              	mov	[top_of_cdss],dx
 25799 00001EDA E8E8EC                  	call    TempCDS 
 25800                                  	; 11/12/2022
 25801                                  	; ds <> cs 
 25802 00001EDD 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25803                                   
 25804 00001EE2 8EDA                    	mov	ds,dx
 25805 00001EE4 8EC2                    	mov	es,dx
 25806                                  
 25807 00001EE6 31D2                    	xor	dx,dx
 25808 00001EE8 2E8B0E[D203]            	mov	cx,[cs:count]
 25809 00001EED B43F                    	mov	ah,3Fh
 25810                                  	;mov	ah,READ  ; 3Fh
 25811 00001EEF F9                      	stc				;in case of int 24
 25812 00001EF0 CD21                    	int	21h			;function request
 25813 00001EF2 9C                      	pushf
 25814                                  
 25815                                  ; find the eof mark in the file. if present,then trim length.
 25816                                  
 25817 00001EF3 50                      	push	ax
 25818 00001EF4 57                      	push	di
 25819 00001EF5 51                      	push	cx
 25820 00001EF6 B01A                    	mov	al,1Ah			; eof mark
 25821 00001EF8 89D7                    	mov	di,dx			; point to buffer
 25822 00001EFA E305                    	jcxz	puteol			; no chars
 25823 00001EFC F2AE                    	repnz	scasb			; find end
 25824 00001EFE 7501                    	jnz	short puteol		; none found and count exhausted
 25825                                  
 25826                                  ; we found a 1a. back up
 25827                                  
 25828 00001F00 4F                      	dec	di			; backup past 1Ah
 25829                                  
 25830                                  ;  just for the halibut, stick in an extra eol
 25831                                  
 25832                                  puteol:
 25833 00001F01 B00D                    	mov	al,cr ; 0Dh
 25834 00001F03 AA                      	stosb
 25835 00001F04 B00A                    	mov	al,lf  ;0Ah
 25836 00001F06 AA                      	stosb
 25837 00001F07 29D7                    	sub	di,dx			; difference moved
 25838                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25839                                  	;mov	[cs:count],di		; new count
 25840                                  
 25841                                  	; 11/12/2022	
 25842                                  	; 31/03/2019 - Retro DOS v4.0
 25843 00001F09 0E                      	push	cs
 25844 00001F0A 1F                      	pop	ds
 25845                                  
 25846 00001F0B 893E[D203]              	mov	[count],di		; new count
 25847                                  
 25848 00001F0F 59                      	pop	cx
 25849 00001F10 5F                      	pop	di
 25850 00001F11 58                      	pop	ax
 25851                                  
 25852                                  	; 11/12/2022
 25853                                  	; 27/10/2022
 25854                                  	;push	cs
 25855                                  	;pop	ds
 25856                                  
 25857 00001F12 50                      	push	ax
 25858                                  	;mov	ah,CLOSE
 25859 00001F13 B43E                    	mov	ah,3Eh
 25860 00001F15 CD21                    	int	21h
 25861 00001F17 58                      	pop	ax
 25862 00001F18 9D                      	popf
 25863 00001F19 7204                    	jc	short conferr 		;if not we've got a problem
 25864 00001F1B 39C1                    	cmp	cx,ax
 25865 00001F1D 742C                    	jz	short getcom		;couldn't read the file
 25866                                  conferr:
 25867 00001F1F BA[0A33]                	mov	dx,config		;want to print config error
 25868 00001F22 E83C13                  	call	badfil
 25869                                  endconv:
 25870 00001F25 C3                      	retn
 25871                                  
 25872                                  ;----------------------------------------------------------------------------
 25873                                  ;
 25874                                  ; entry : multi_pass
 25875                                  ;
 25876                                  ;             called to execute device=,install= commands
 25877                                  ;
 25878                                  ;----------------------------------------------------------------------------
 25879                                  
 25880                                  	; 27/10/2022
 25881                                  multi_pass:
 25882 00001F26 0E                      	push	cs
 25883 00001F27 1F                      	pop	ds
 25884                                  
 25885 00001F28 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25886                                  ;jae_endconv:
 25887 00001F2D 73F6                    	jae	short endconv 		; do nothing. just return.
 25888                                  
 25889                                  	;push	word [CONFBOT]
 25890                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25891 00001F2F FF36[A102]              	push	word [top_of_cdss]
 25892 00001F33 07                      	pop	es			; es -> confbot
 25893                                  
 25894 00001F34 8B36[D403]              	mov	si,[org_count]
 25895 00001F38 8936[D203]              	mov	[count],si		; set count
 25896 00001F3C 31F6                    	xor	si,si ; 0
 25897 00001F3E 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25898 00001F42 8936[2B03]                      mov     [linecount],si		; reset linecount
 25899                                  
 25900 00001F46 E89C10                  	call	getchr
 25901 00001F49 EB06                    	jmp	short conflp
 25902                                  
 25903                                  getcom:
 25904 00001F4B E8800E                          call    organize                ; organize the file
 25905 00001F4E E89410                  	call	getchr
 25906                                  conflp: 
 25907 00001F51 72D2                    	jc	short endconv
 25908                                  
 25909 00001F53 FF06[2B03]                      inc     word [linecount]	; increase linecount
 25910                                  
 25911 00001F57 C606[0D14]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25912 00001F5C C606[1014]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25913 00001F61 3C0A                    	cmp	al,lf			; linefeed?
 25914 00001F63 7416                    	je	short blank_line	;  then ignore this line.
 25915                                  
 25916                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25917                                  %if 0
 25918                                  
 25919                                  ;ifdef	MULTI_CONFIG
 25920                                  
 25921                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25922                                  ;   number immediately following it....
 25923                                  
 25924                                          mov     [config_cmd],al         ; save original command code
 25925                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25926                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25927                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25928                                          je      short not_final		; no, line number is not embedded
 25929                                  
 25930                                          push    ax                      ;
 25931                                          call    getchr                  ; ignore end-of-image errors,
 25932                                          mov     ah,al                   ; because if there's an error
 25933                                          call    getchr                  ; fetching the line number that's
 25934                                          xchg    al,ah                   ; supposed to be there, the next
 25935                                          mov     [linecount],ax          ; getchr call will get the same error
 25936                                          pop     ax
 25937                                  ;
 25938                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25939                                  ;   which to obtain its original program name, it grovels through all of
 25940                                  ;   memory to find the filename that was used to exec it; it wants to find
 25941                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25942                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25943                                  ;   immediately before the filename, but since we are now storing line # info
 25944                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25945                                  ;   spot.
 25946                                  ;
 25947                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25948                                  ;   over the line number info, since we no longer need that info anyway. This
 25949                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25950                                  ;   retrieved.
 25951                                  ;
 25952                                          cmp	byte [multi_pass_id],2	; final pass?
 25953                                          jb	short not_final		; no
 25954                                          ;test	word [install_flag],have_install_cmd
 25955                                  	test	byte [install_flag],have_install_cmd ; 1
 25956                                          jz	short final		; no install cmds, so yes it is
 25957                                          cmp	byte [multi_pass_id],3	; final pass?
 25958                                          jb	short not_final		; no
 25959                                  final:                                  ;
 25960                                  	mov	[es:si],al		; save backward-compatible command code
 25961                                  not_final:                              ;
 25962                                  ;endif
 25963                                  
 25964                                  %endif
 25965 00001F65 88C4                    	mov	ah,al
 25966 00001F67 E87B10                  	call	getchr
 25967 00001F6A 7314                    	jnc	short tryi
 25968                                  
 25969 00001F6C 803E[4903]02            	cmp	byte [multi_pass_id],2
 25970                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25971                                  	; 27/10/2022
 25972 00001F71 73B2                    	jnb	short endconv	
 25973 00001F73 E90107                  	jmp	badop
 25974                                  	
 25975                                  coff:	
 25976                                  	; 11/12/2022
 25977                                  	; ds = cs
 25978                                  	;push	cs
 25979                                  	;pop	ds
 25980 00001F76 E86310                  	call	newline
 25981 00001F79 EBD6                    	jmp	short conflp	; 13/05/2019
 25982                                  
 25983                                  blank_line:
 25984 00001F7B E86710                  	call	getchr
 25985 00001F7E EBD1                    	jmp	short conflp
 25986                                  
 25987                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25988                                  ; 11/12/2022
 25989                                  ; (there is not a jump or call to here from anywhere!)
 25990                                  ;coff_p:
 25991                                  	;push	cs
 25992                                  	;pop	ds
 25993                                  
 25994                                  ;to handle install= commands,we are going to use multi-pass.
 25995                                  ;the first pass handles the other commands and only set install_flag when
 25996                                  ;it finds any install command. the second pass will only handle the
 25997                                  ;install= command.
 25998                                  
 25999                                  ;------------------------------------------------------------------------------
 26000                                  ;install command
 26001                                  ;------------------------------------------------------------------------------
 26002                                  
 26003                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26004                                  	; (SYSINIT:2250h)
 26005                                  tryi:
 26006 00001F80 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 26007 00001F85 7503                    	jne	short not_init_pass
 26008 00001F87 E92301                  	jmp	multi_try_doshi
 26009                                  not_init_pass:
 26010 00001F8A 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 26011                                          ; 11/12/2022
 26012                                  	;je	short multi_pass_coff2	; now it is NOPs
 26013 00001F8F 74E5                    	je	short coff
 26014                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26015                                  	;je	short multi_pass_coff	
 26016                                  					; This pass can be made use of if
 26017                                  					; we want do some config.sys process
 26018                                  					; after device drivers are loaded
 26019                                  					; and before install= commands
 26020                                  					; are processed
 26021                                  
 26022 00001F91 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 26023 00001F96 7411                    	je	short multi_try_i
 26024 00001F98 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 26025                                  	; 11/12/2022
 26026                                  	;je	short multi_pass_coff2
 26027 00001F9B 74D9                    	je	short coff
 26028                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26029                                  	;je	short multi_pass_coff	
 26030                                  
 26031                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 26032                                  ;       but don't process them now.        
 26033                                          
 26034 00001F9D 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 26035                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 26036                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26037 00001FA0 752A                    	jne	short tryb	
 26038                                  	
 26039                                  	;or	word [install_flag],have_install_cmd ; set the flag
 26040 00001FA2 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 26041                                  multi_pass_coff2:
 26042 00001FA7 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 26043                                  
 26044                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26045                                  ;precheck_installhigh:
 26046                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 26047                                  ;       jne     short tryb		; carry on with normal processing
 26048                                  ;	;or	word [install_flag],have_install_cmd
 26049                                  ;	or	byte [install_flag],have_install_cmd ; 1
 26050                                  ;       jmp	short coff
 26051                                  
 26052                                  multi_try_i:
 26053 00001FA9 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 26054                                  	;jne	short multi_try_n	; no, check for installhigh
 26055                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26056 00001FAC 7505                    	jne	short multi_pass_filter
 26057                                  
 26058                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26059                                  ;;ifdef	MULTI_CONFIG
 26060                                  ;       call    query_user              ; query the user if config_cmd
 26061                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26062                                  ;;endif
 26063                                  
 26064 00001FAE E873F0                  	call	do_install_exec 	;install it.
 26065 00001FB1 EBC3                    	jmp	short coff		;to handle next install= command.
 26066                                  
 26067                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26068                                  %if 0
 26069                                  
 26070                                  multi_try_n:
 26071                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 26072                                          jne	short multi_pass_filter	; no. ignore this.
 26073                                  ;ifdef	MULTI_CONFIG
 26074                                          call    query_user              ; query the user if config_cmd
 26075                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26076                                  ;endif
 26077                                  
 26078                                  ;       The memory environment is in its normal DOS state, so do
 26079                                  ;       the standard calls to set the alloc strategy for loading high
 26080                                  
 26081                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 26082                                  	int	21h			;get alloc strategy
 26083                                  	mov	bx,ax
 26084                                          push    bx                      ; save for the return
 26085                                  
 26086                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 26087                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 26088                                  	int	21h			;set alloc strategy
 26089                                  
 26090                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 26091                                          int     21h                     ; get link state
 26092                                          xor     ah,ah                   ; clear top byte
 26093                                          push    ax                      ; save for return
 26094                                  
 26095                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 26096                                  	mov	bx,1
 26097                                  	int	21h			;link in UMBs
 26098                                  
 26099                                  	call	do_install_exec 	;install it.
 26100                                  
 26101                                          mov     ax,(ALLOCOPER<<8)|3
 26102                                          pop     bx                      ; recover original link state
 26103                                          int     21h
 26104                                          pop     bx                      ; recover original alloc strategy
 26105                                          mov     ax,(ALLOCOPER<<8)|1
 26106                                          int     21h
 26107                                  
 26108                                  	jmp	coff			;to handle next install= command.
 26109                                  
 26110                                  %endif
 26111                                  
 26112                                  multi_pass_filter:
 26113 00001FB3 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 26114 00001FB6 740A                    	je	short multi_pass_adjust
 26115 00001FB8 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 26116 00001FBB 7405                    	je	short multi_pass_adjust
 26117 00001FBD 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 26118 00001FC0 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 26119                                  
 26120                                  multi_pass_adjust:			; these commands need to
 26121 00001FC2 FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 26122 00001FC6 FF06[D203]              	inc	word [count]		;  for newline proc.
 26123                                  
 26124                                  multi_pass_coff:
 26125                                  	; 11/12/2022
 26126 00001FCA EBAA                    	jmp	short coff		; to handle next install= commands.
 26127                                  
 26128                                  ;------------------------------------------------------------------------------
 26129                                  ; buffer command
 26130                                  ;------------------------------------------------------------------------------
 26131                                  
 26132                                  ;******************************************************************************
 26133                                  ;									      *
 26134                                  ; function: parse the parameters of buffers= command.			      *
 26135                                  ;									      *
 26136                                  ; input :								      *
 26137                                  ;	es:si -> parameters in command line.				      *
 26138                                  ; output:								      *
 26139                                  ;	buffers set							      *
 26140                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 26141                                  ;	h_buffers set if secondary buffer cache specified.		      *
 26142                                  ;									      *
 26143                                  ; subroutines to be called:						      *
 26144                                  ;	sysinit_parse							      *
 26145                                  ; logic:								      *
 26146                                  ; {									      *
 26147                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 26148                                  ;	set dx,cx to 0; 						      *
 26149                                  ;	reset buffer_slash_x;						      *
 26150                                  ;	while (end of command line)					      *
 26151                                  ;	{ sysinit_parse;						      *
 26152                                  ;	  if (no error) then						      *
 26153                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 26154                                  ;		    buffer_slash_x = 1					      *
 26155                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 26156                                  ;			  buffers = result_val._$P_picked_val;		      *
 26157                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 26158                                  ;	  else	{show error message;error exit} 			      *
 26159                                  ;	};								      *
 26160                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 26161                                  ; };									      *
 26162                                  ;									      *
 26163                                  ;******************************************************************************
 26164                                  
 26165                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26166                                  	; (SYSINIT:229Ch)
 26167                                  tryb:
 26168 00001FCC 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 26169 00001FCF 7557                    	jne	short tryc
 26170                                  
 26171                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26172                                  ;;ifdef	MULTI_CONFIG
 26173                                  ;       call    query_user              ; query the user if config_cmd
 26174                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 26175                                  ;;endif
 26176                                  
 26177                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26178                                  	; 18/12/2022
 26179 00001FD1 31C9                    	xor	cx,cx
 26180                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 26181 00001FD3 880E[C41C]              	mov	[p_buffer_slash_x],cl ; 0
 26182                                  
 26183 00001FD7 BF[7D1C]                	mov	di,buf_parms
 26184                                  	;xor	cx,cx	; 18/12/2022
 26185                                  	; 04/01/2023
 26186                                  	;mov	dx,cx
 26187                                  do7:
 26188 00001FDA E87B06                  	call	sysinit_parse
 26189 00001FDD 7303                    	jnc	short if7		; parse error,
 26190                                  	; 04/01/2023
 26191                                  	;call	badparm_p		;  and show messages and end the search loop.
 26192                                  	;;jmp	short sr7
 26193                                  	; 31/12/2022
 26194                                  ;sr7:
 26195                                  	;jmp	coff
 26196                                  	; 04/01/2023
 26197 00001FDF E9F405                  	jmp	badparm_p_coff
 26198                                  if7:
 26199 00001FE2 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26200 00001FE5 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 26201                                  	;cmp	word [result_val_swoff],switch_x
 26202 00001FE7 813E[C81C][BD1C]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 26203                                  	;jne	short if11
 26204                                  	; 31/12/2022
 26205 00001FED 74EB                    	je	short do7 ;je short en11
 26206                                  
 26207                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 26208                                  	;jmp	short en11 ; 31/12/2022
 26209                                  if11:
 26210                                  	;mov	ax,[rv_dword]
 26211 00001FEF A1[CA1C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26212 00001FF2 83F901                  	cmp	cx,1
 26213 00001FF5 7505                    	jne	short if13
 26214                                  
 26215 00001FF7 A3[C01C]                	mov	[p_buffers],ax
 26216                                  	;jmp	short en11
 26217                                  	; 31/12/2022
 26218 00001FFA EBDE                    	jmp	short do7
 26219                                  if13:
 26220 00001FFC A3[C21C]                	mov	[p_h_buffers],ax
 26221                                  en11:
 26222 00001FFF EBD9                    	jmp	short do7
 26223                                  en7:
 26224 00002001 833E[C01C]63            	cmp	word [p_buffers],99
 26225 00002006 760B                    	jbe	short if18
 26226                                  
 26227                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 26228                                  ;	jne	short if18
 26229                                  
 26230 00002008 E87806                  	call	badparm_p
 26231 0000200B C706[C21C]0000          	mov	word [p_h_buffers],0
 26232 00002011 EB12                    	jmp	short sr7
 26233                                  if18:
 26234 00002013 A1[C01C]                	mov	ax,[p_buffers]	; we don't have any problem.
 26235 00002016 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 26236                                  
 26237 00002019 A1[C21C]                	mov	ax,[p_h_buffers]
 26238 0000201C A3[9902]                	mov	[h_buffers],ax
 26239                                  
 26240                                  ;	mov	al,[p_buffer_slash_x]	; M016
 26241                                  ;	mov	[buffer_slash_x],al
 26242                                  
 26243 0000201F A1[2B03]                	mov	ax,[linecount]
 26244 00002022 A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 26245                                  	; 31/12/2022
 26246                                  	;jmp	short sr7
 26247                                  	; 04/01/2023
 26248                                  sr7:
 26249 00002025 E94EFF                  	jmp	coff
 26250                                  
 26251                                  ;------------------------------------------------------------------------------
 26252                                  ; break command
 26253                                  ;------------------------------------------------------------------------------
 26254                                  
 26255                                  ;****************************************************************************
 26256                                  ;									    *
 26257                                  ; function: parse the parameters of break = command.			    *
 26258                                  ;									    *
 26259                                  ; input :								    *
 26260                                  ;	es:si -> parameters in command line.				    *
 26261                                  ; output:								    *
 26262                                  ;	turn the control-c check on or off.				    *
 26263                                  ;									    *
 26264                                  ; subroutines to be called:						    *
 26265                                  ;	sysinit_parse							    *
 26266                                  ; logic:								    *
 26267                                  ; {									    *
 26268                                  ;	set di to brk_parms;						    *
 26269                                  ;	set dx,cx to 0; 						    *
 26270                                  ;	while (end of command line)					    *
 26271                                  ;	{ sysinit_parse;						    *
 26272                                  ;	  if (no error) then						    *
 26273                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 26274                                  ;		   set p_ctrl_break,on;					    *
 26275                                  ;	       else					  /*off 	 */ *
 26276                                  ;		   set p_ctrl_break,off;				    *
 26277                                  ;	  else {show message;error_exit};				    *
 26278                                  ;	};								    *
 26279                                  ;	if (no error) then						    *
 26280                                  ;	   dos function call to set ctrl_break check according to	    *
 26281                                  ; };									    *
 26282                                  ;									    *
 26283                                  ;****************************************************************************
 26284                                  
 26285                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26286                                  	; (SYSINIT:22FFh)
 26287                                  tryc:
 26288 00002028 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 26289 0000202B 7534                    	jne	short trym
 26290                                  
 26291                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26292                                  ;;ifdef MULTI_CONFIG
 26293                                  ;       call    query_user              ; query the user if config_cmd
 26294                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 26295                                  ;;endif
 26296 0000202D BF[CE1C]                	mov	di,brk_parms
 26297 00002030 31C9                    	xor	cx,cx
 26298                                  	; 04/01/2023
 26299                                  	;mov	dx,cx
 26300                                  do22:
 26301 00002032 E82306                  	call	sysinit_parse
 26302 00002035 7303                    	jnc	short if22		; parse error
 26303                                  	;call	badparm_p		;  show message and end the search loop.
 26304                                  	;;jmp	short sr22
 26305                                  	; 31/12/2022
 26306                                  ;sr22:
 26307                                  	;jmp	coff
 26308                                  	; 04/01/2023
 26309 00002037 E99C05                  	jmp	badparm_p_coff
 26310                                  if22:
 26311 0000203A 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26312 0000203D 7415                    	je	short en22		; then end the $endloop
 26313                                  
 26314                                  	;cmp	byte [result_val_itag],1
 26315 0000203F 803E[C71C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26316 00002044 7507                    	jne	short if26
 26317                                  
 26318 00002046 C606[F31C]01            	mov	byte [p_ctrl_break],1	; turn it on
 26319                                  	;jmp	short en26
 26320                                  	; 31/12/2022
 26321 0000204B EBE5                    	jmp	short do22
 26322                                  if26:
 26323 0000204D C606[F31C]00            	mov	byte [p_ctrl_break],0	; turn it off
 26324                                  en26:
 26325 00002052 EBDE                    	jmp	short do22		; we actually set the ctrl break
 26326                                  en22:
 26327 00002054 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 26328 00002056 B001                    	mov	al,1
 26329 00002058 8A16[F31C]              	mov	dl,[p_ctrl_break]
 26330 0000205C CD21                    	int	21h
 26331                                  	; 31/12/2022
 26332                                  	;jmp	short sr22
 26333                                  	; 04/01/2023
 26334                                  sr22:
 26335 0000205E E915FF                  	jmp	coff
 26336                                  
 26337                                  ;------------------------------------------------------------------------------
 26338                                  ; multitrack command
 26339                                  ;------------------------------------------------------------------------------
 26340                                  
 26341                                  ;******************************************************************************
 26342                                  ;									      *
 26343                                  ; function: parse the parameters of multitrack= command.		      *
 26344                                  ;									      *
 26345                                  ; input :								      *
 26346                                  ;	es:si -> parameters in command line.				      *
 26347                                  ; output:								      *
 26348                                  ;	turn multrk_flag on or off.					      *
 26349                                  ;									      *
 26350                                  ; subroutines to be called:						      *
 26351                                  ;	sysinit_parse							      *
 26352                                  ; logic:								      *
 26353                                  ; {									      *
 26354                                  ;	set di to brk_parms;						      *
 26355                                  ;	set dx,cx to 0; 						      *
 26356                                  ;	while (end of command line)					      *
 26357                                  ;	{ sysinit_parse;						      *
 26358                                  ;	  if (no error) then						      *
 26359                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 26360                                  ;		   set p_mtrk,on;					      *
 26361                                  ;	       else					  /*off 	 */   *
 26362                                  ;		   set p_mtrk,off;					      *
 26363                                  ;	  else {show message;error_exit};				      *
 26364                                  ;	};								      *
 26365                                  ;	if (no error) then						      *
 26366                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 26367                                  ;									      *
 26368                                  ; };									      *
 26369                                  ;									      *
 26370                                  ;******************************************************************************
 26371                                  
 26372                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26373                                  trym:
 26374 00002061 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 26375 00002064 7569                    	jne	short tryu
 26376                                  
 26377                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26378                                  ;;ifdef	MULTI_CONFIG
 26379                                  ;       call    query_user      ; query the user if config_cmd
 26380                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 26381                                  ;;endif
 26382 00002066 BF[D21D]                	mov	di,mtrk_parms
 26383 00002069 31C9                    	xor	cx,cx
 26384                                  	; 04/01/2023
 26385                                  	;mov	dx,cx
 26386                                  do31:
 26387 0000206B E8EA05                  	call	sysinit_parse
 26388 0000206E 7303                    	jnc	short if31	; parse error
 26389                                  	;call	badparm_p	;  show message and end the search loop.
 26390                                  	;;jmp	short sr31
 26391                                  	; 31/12/2022
 26392                                  ;sr31:
 26393                                  	;jmp	coff
 26394                                  	; 04/01/2023
 26395 00002070 E96305                  	jmp	badparm_p_coff
 26396                                  if31:
 26397 00002073 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26398 00002076 7415                    	je	short en31	; then end the $endloop
 26399                                  
 26400                                  	;cmp	byte [result_val_itag],1
 26401 00002078 803E[C71C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26402 0000207D 7507                    	jne	short if35
 26403                                  
 26404 0000207F C606[E61D]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 26405                                  	;jmp	short en35
 26406                                  	; 31/12/2022
 26407 00002084 EBE5                    	jmp	short do31
 26408                                  if35:
 26409 00002086 C606[E61D]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 26410                                  en35:
 26411 0000208B EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 26412                                  en31:
 26413 0000208D 1E                      	push	ds
 26414                                  	;;mov	ax,Bios_Data ; 70h
 26415                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26416                                  	; 21/10/2022
 26417 0000208E B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26418 00002091 8ED8                    	mov	ds,ax
 26419                                  
 26420 00002093 2E803E[E61D]00          	cmp	byte [cs:p_mtrk],0
 26421 00002099 7508                    	jne	short if39
 26422                                  
 26423 0000209B C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 26424 000020A1 EB06                    	jmp	short en39
 26425                                  if39:
 26426 000020A3 C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 26427                                  en39:
 26428 000020A9 1F                      	pop	ds
 26429                                  	; 31/12/2022
 26430                                  	;jmp	short sr31
 26431                                  	; 04/01/2023
 26432                                  sr31:
 26433 000020AA E9C9FE                  	jmp	coff
 26434                                  
 26435                                  ;----------------------------------------------------------------------------
 26436                                  ; DOS=HIGH/LOW command
 26437                                  ;----------------------------------------------------------------------------
 26438                                  
 26439                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26440                                  multi_try_doshi:
 26441 000020AD 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 26442 000020B0 7403                    	je	short it_is_h
 26443                                  skip_it:
 26444 000020B2 E9FEFE                  	jmp	multi_pass_filter
 26445                                  it_is_h:				; M003 - removed initing DevUMB
 26446                                  					;	 & runhigh
 26447                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26448                                  ;;ifdef	MULTI_CONFIG
 26449                                  ;       call    query_user              ; query the user if config_cmd
 26450                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 26451                                  ;;endif
 26452 000020B5 BF[1D1E]                	mov	di,dos_parms
 26453 000020B8 31C9                    	xor	cx,cx
 26454                                  	; 04/01/2023
 26455                                  	;mov	dx,cx
 26456                                  h_do_parse:
 26457 000020BA E89B05                  	call	sysinit_parse
 26458 000020BD 7303                    	jnc	short h_parse_ok	; parse error
 26459                                  h_badparm:
 26460                                  	; 04/01/2023
 26461                                  	;call	badparm_p		; show message and end the search loop.
 26462                                  	;;jmp	short h_end
 26463                                  	; 11/12/2022
 26464                                  ;h_end:
 26465                                  	;jmp	coff
 26466                                  	; 04/01/2023
 26467 000020BF E91405                  	jmp	badparm_p_coff	
 26468                                  h_parse_ok:
 26469 000020C2 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26470 000020C5 7405                    	je	short h_end		; then end the $endloop
 26471 000020C7 E81006                  	call	ProcDOS
 26472 000020CA EBEE                    	jmp	short h_do_parse
 26473                                  	; 11/12/2022
 26474                                  	; 04/01/2023
 26475                                  h_end:
 26476 000020CC E9A7FE                  	jmp	coff
 26477                                  
 26478                                  ;-----------------------------------------------------------------------------
 26479                                  ; devicehigh command
 26480                                  ;-----------------------------------------------------------------------------
 26481                                  
 26482                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26483                                  tryu:
 26484 000020CF 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 26485 000020D2 7539                    	jne	short tryd
 26486                                  
 26487                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26488                                  ;;ifdef	MULTI_CONFIG
 26489                                  ;       call    query_user              ; query the user if config_cmd
 26490                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 26491                                  ;;endif
 26492                                  
 26493                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26494                                  ;	call	InitVar
 26495                                  ;	call	ParseSize		; process the size= option
 26496                                  ;	;jnc	short tryu_0
 26497                                  	
 26498                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 26499                                  
 26500                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26501                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 26502                                  	;mov	[cs:badparm_seg], es
 26503                                  	; 11/12/2022
 26504                                  	; ds = cs
 26505 000020D4 8936[1114]              	mov	[badparm_off], si
 26506 000020D8 8C06[1314]              	mov	[badparm_seg], es
 26507                                  	;
 26508 000020DC E86608                  	call	ParseSize
 26509 000020DF 7303                    	jnc	short tryu_2	; 28/10/2022
 26510                                  
 26511                                  	;call	badparm_p
 26512                                  	;jmp	coff
 26513                                  	; 04/01/2023
 26514 000020E1 E9F204                  	jmp	badparm_p_coff
 26515                                  
 26516                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26517                                  ;tryu_0:
 26518                                  ;	mov	ax,[cs:DevSizeOption]
 26519                                  ;	or	ax,ax
 26520                                  ;	jnz	short tryu_2
 26521                                  ;
 26522                                  ;	call	ParseVar
 26523                                  ;	jnc	short tryu_2
 26524                                  ;tryu_1:
 26525                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 26526                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 26527                                  ;	call	badparm_p		; so all we have to do is choke and
 26528                                  ;	jmp	coff			; die, rather verbosely.
 26529                                  
 26530                                  tryu_2:	
 26531 000020E4 56                      	push	si
 26532 000020E5 06                      	push	es
 26533                                  tryu_3:
 26534 000020E6 268A04                  	mov	al,[es:si]
 26535 000020E9 3C0D                    	cmp	al,cr
 26536 000020EB 740C                    	je	short tryu_4
 26537 000020ED 3C0A                    	cmp	al,lf
 26538 000020EF 7408                    	je	short tryu_4
 26539 000020F1 E8CC0E                  	call	delim
 26540 000020F4 7403                    	jz	short tryu_4
 26541 000020F6 46                      	inc	si
 26542 000020F7 EBED                    	jmp	short tryu_3
 26543                                  tryu_4:	
 26544                                  	; 11/12/2022
 26545                                  	; ds = cs
 26546 000020F9 A2[921E]                	mov	[DevSavedDelim],al
 26547                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 26548                                  					;  it with null
 26549                                  	; 18/12/2022
 26550 000020FC 29DB                    	sub	bx,bx
 26551 000020FE 26881C                  	mov	[es:si],bl ; 0
 26552                                   	;mov	byte [es:si],0
 26553                                  
 26554 00002101 07                      	pop	es
 26555 00002102 5E                      	pop	si
 26556                                  
 26557                                  ;------------------------------------------------------------------------------
 26558                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26559                                  ;------------------------------------------------------------------------------
 26560                                  
 26561                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26562                                  ;
 26563                                  ;	call	UmbTest			; See if UMBs are around...
 26564                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 26565                                  ;
 26566                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26567                                  ;	jmp	short LoadDevice
 26568                                  
 26569                                  ;------------------------------------------------------------------------------
 26570                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26571                                  ;------------------------------------------------------------------------------
 26572                                  
 26573                                  NrmTst:
 26574                                  	; 11/12/2022
 26575                                  	; ds = cs
 26576                                  	;;mov	byte [cs:DeviceHi],0
 26577                                  	;mov	byte [DeviceHi],0
 26578                                  	; 18/12/2022
 26579                                  	; bx = 0
 26580 00002103 381E[6E1E]              	cmp	[DevUMB],bl ; 0
 26581                                  	;cmp	byte [DevUMB],0
 26582                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26583 00002107 7417                    	je	short LoadDevice	; no, we don't
 26584                                  	;mov	byte [cs:DeviceHi],1
 26585                                  	; 11/12/2022
 26586                                  	;mov	byte [DeviceHi],1
 26587                                  	; 18/12/2022
 26588 00002109 FEC3                    	inc	bl ; mov bl,1 ; (*)
 26589                                  	; 11/12/2022
 26590                                  	;jmp	short LoadDevice2	; 11/12/2022
 26591 0000210B EB13                    	jmp	short LoadDevice
 26592                                  
 26593                                  ;------------------------------------------------------------------------------
 26594                                  ; device command
 26595                                  ;------------------------------------------------------------------------------
 26596                                  
 26597                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26598                                  	; (SYSINIT:2401h)
 26599                                  tryd:
 26600                                  	; 11/12/2022
 26601 0000210D 31DB                    	xor 	bx, bx
 26602                                  	;
 26603 0000210F 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 26604 00002112 7403                    	je	short gotd
 26605                                  skip_it2:
 26606 00002114 E93302                  	jmp	tryq
 26607                                  gotd:
 26608                                  
 26609                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26610                                  ;;ifdef	MULTI_CONFIG
 26611                                  ;       call    query_user              ; query the user if config_cmd
 26612                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26613                                  ;;endif
 26614                                  	; 11/12/2022
 26615                                  	; ds = cs
 26616                                  	;mov	byte [DeviceHi],0
 26617                                  	;mov	word [DevSizeOption],0
 26618 00002117 891E[7E1E]              	mov	[DevSizeOption],bx ; 0
 26619 0000211B C606[921E]20            	mov	byte [DevSavedDelim],' '
 26620                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 26621                                  	;mov	word [cs:DevSizeOption],0
 26622                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 26623                                  					;  be replaced with a ' '
 26624                                  LoadDevice:                             ; device= or devicehigh= command.
 26625                                  	; 11/12/2022
 26626                                  	;mov	byte [DeviceHi],0
 26627 00002120 881E[7D1E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26628                                  LoadDevice2:
 26629                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26630                                  	;
 26631                                  	;push    cs
 26632                                          ;pop     ds
 26633                                  	;
 26634                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26635                                  	;mov	[bpb_addr+2],es
 26636                                  	;
 26637                                  	;mov	[DevCmdLine],si		; save it for ourself
 26638                                  	;mov	[DevCmdLine+2],es
 26639                                  	;
 26640                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26641                                  
 26642                                  	; 11/12/2022
 26643                                  	; ds = cs
 26644                                  	;mov	bx,cs
 26645                                  	;mov	ds,bx
 26646                                  
 26647                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26648 00002124 8936[F803]              	mov	[bpb_addr],si
 26649                                  	;mov	[cs:bpb_addr+2],es
 26650 00002128 8C06[FA03]              	mov	[bpb_addr+2],es
 26651                                  
 26652                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26653 0000212C 8936[8E1E]              	mov	[DevCmdLine],si
 26654                                  	;mov	[cs:DevCmdLine+2],es	
 26655 00002130 8C06[901E]              	mov	[DevCmdLine+2],es	
 26656                                  
 26657 00002134 E8E00E                  	call	round
 26658                                  	
 26659 00002137 E81B07                  	call	SizeDevice
 26660 0000213A 7215                    	jc	short BadFile
 26661                                  
 26662                                  	; 11/12/2022
 26663                                  	; ds = cs
 26664                                  
 26665                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26666                                  
 26667                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26668                                  ;
 26669                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26670                                  ;
 26671                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26672                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26673                                  ;	jz	short DevConvLoad	; the actual load.
 26674                                  ;
 26675                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26676                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26677                                  ;
 26678                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26679                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26680                                  ;
 26681                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26682                                  ;
 26683                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26684                                  ;	or	ax,ax
 26685                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26686                                  ;
 26687                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26688                                  ;	jge	short DevConvLoad
 26689                                  ;
 26690                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26691                                  ;	call	StoLoadSize		; minsize for load UMB.
 26692                                  
 26693                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26694                                  
 26695                                  DevConvLoad:
 26696                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26697 0000213C E83206                  	call	InitDevLoad
 26698                                  
 26699                                  	; 11/12/2022
 26700                                  	; ds = cs
 26701 0000213F A1[621E]                	mov	ax,[DevLoadAddr]
 26702 00002142 0306[601E]              	add	ax,[DevSize]
 26703 00002146 7206                    	jc	short NoMem
 26704 00002148 3906[641E]              	cmp	[DevLoadEnd],ax
 26705 0000214C 7312                    	jae	short LoadDev
 26706                                  	
 26707                                  	; 11/12/2022
 26708                                  	;mov	ax,[cs:DevLoadAddr]
 26709                                  	;add	ax,[cs:DevSize]
 26710                                  	;jc	short NoMem
 26711                                  	;cmp	[cs:DevLoadEnd],ax
 26712                                  	;jae	short LoadDev
 26713                                  NoMem:
 26714                                  	; 11/12/2022
 26715                                  	; ds = cs
 26716                                  	;jmp	mem_err
 26717 0000214E E9050F                  	jmp	mem_err2
 26718                                  
 26719                                  BadFile:
 26720                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26721                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26722                                  	;cmp    byte [es:si],' '
 26723                                          ;jae	short tryd_2
 26724 00002151 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26725 00002155 7503                            jne	short tryd_2
 26726 00002157 E91D05                  	jmp	badop
 26727                                  tryd_2:
 26728 0000215A E80811                  	call	badload
 26729 0000215D E916FE                  	jmp	coff
 26730                                  
 26731                                  LoadDev:
 26732 00002160 06                      	push	es
 26733 00002161 1F                      	pop	ds
 26734                                  
 26735 00002162 89F2                    	mov	dx,si			;ds:dx points to file name
 26736 00002164 E83F07                  	call	ExecDev			; load device driver using exec call
 26737                                  badldreset:
 26738 00002167 1E                      	push	ds
 26739 00002168 07                      	pop	es			;es:si back to config.sys
 26740 00002169 0E                      	push	cs
 26741 0000216A 1F                      	pop	ds			;ds back to sysinit
 26742 0000216B 72E4                    	jc	short BadFile
 26743                                  goodld:
 26744                                  	; 11/12/2022
 26745                                  	; ds = cs
 26746                                  
 26747 0000216D 06                      	push	es
 26748 0000216E 56                      	push	si
 26749 0000216F E85107                  	call	RemoveNull
 26750 00002172 06                      	push	es
 26751 00002173 56                      	push	si
 26752                                  
 26753 00002174 0E                      	push	cs
 26754 00002175 07                      	pop	es
 26755                                  
 26756 00002176 1E                      	push	ds
 26757 00002177 56                      	push	si
 26758                                  
 26759                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26760                                  	; 31/12/2022
 26761                                  	; ds = cs
 26762 00002178 C536[661E]              	lds	si,[DevEntry]
 26763                                  	
 26764                                  	;test	word [si+4],8000h
 26765                                  	; 11/12/2022
 26766 0000217C F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26767                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26768 00002180 7511                    	jnz	short got_device_com_cont   ; no.
 26769                                  
 26770 00002182 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26771                                  	;cmp	byte [si+32],26
 26772 00002187 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26773 0000218B 7206                    	jb	short got_device_com_cont
 26774                                  
 26775 0000218D 5E                      	pop	si
 26776 0000218E 1F                      	pop	ds
 26777                                  
 26778 0000218F 5E                      	pop	si			; clear the stack
 26779 00002190 07                      	pop	es
 26780                                  
 26781                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26782                                  	;call	RetFromUM		; Do this before we leave
 26783                                  
 26784 00002191 EB55                    	jmp	short badnumblock
 26785                                  
 26786                                  got_device_com_cont:
 26787 00002193 5E                      	pop	si
 26788 00002194 1F                      	pop	ds
 26789                                  
 26790                                  	; 11/12/2022
 26791                                  	; ds = cs
 26792                                  
 26793 00002195 E86505                  	call	LieInt12Mem
 26794 00002198 E8C405                  	call	UpdatePDB		; update the PSP:2 value M020
 26795                                  
 26796                                  	; 11/12/2022
 26797                                  	; ds = cs
 26798                                  	; 08/09/2023
 26799 0000219B 31C0                    	xor	ax, ax ; 0
 26800 0000219D 3806[0D14]              	cmp	byte [multdeviceflag],al ; 0
 26801                                  	;cmp	byte [multdeviceflag],0
 26802                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26803                                  					;  driver in the file ; M027
 26804 000021A1 750B                    	jne	short skip_pass_limit	;		      ; M027
 26805                                  
 26806                                  	; 11/12/2022
 26807                                  	; ds = cs
 26808                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26809                                  	;mov	bx,[cs:DevLoadEnd]
 26810                                  	;mov	[cs:break_addr+2],bx
 26811                                  
 26812                                  	;mov	word [break_addr],0
 26813                                  	; 08/09/2023
 26814 000021A3 A3[F403]                	mov	[break_addr],ax ; 0
 26815 000021A6 8B1E[641E]              	mov	bx,[DevLoadEnd]
 26816 000021AA 891E[F603]              	mov	[break_addr+2],bx
 26817                                  
 26818                                  skip_pass_limit:
 26819                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26820                                  ;	number of installed devices (including DblSpace drives) where
 26821                                  ;	"drivenumber" is the number that the next block device will
 26822                                  ;	be assigned to. Because some naughty device drivers (like
 26823                                  ;	interlnk) look at the internal DOS variable instead of the
 26824                                  ;	value we pass it, we'll temporarily stick our value into
 26825                                  ;	DOS DATA while we're initializing the device drivers.
 26826                                  ;
 26827                                  ;	Note that this will make it impossible for this device
 26828                                  ;	driver to access the DblSpace drive letters, whether
 26829                                  ;	they are swapped-hosts or unswapped compressed drives,
 26830                                  ;	during its initialization phase.
 26831                                  
 26832                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26833                                  	;push	ds
 26834                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26835                                  	;
 26836                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26837                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26838                                  	;mov	ah,al
 26839                                  	;
 26840                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26841                                  	;pop	ds
 26842                                  	;
 26843                                  	;push	ax			; save real sysi_numio/ncds in ax
 26844                                  
 26845                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26846                                  	; (SYSINIT:24B9h)
 26847                                  
 26848 000021AE BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26849 000021B1 E8AB0E                  	call	calldev 		; calldev (sdevstrat);
 26850 000021B4 BB0800                  	mov	bx,SYSDEV.INT ; 8
 26851 000021B7 E8A50E                  	call	calldev 		; calldev (sdevint);
 26852                                  
 26853                                  	; 11/12/2022
 26854                                  	; ds <> cs
 26855                                  
 26856                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26857                                  	;pop	ax			; get real sysi_numio value
 26858                                  	;push	ds
 26859                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26860                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26861                                  	;pop	ds
 26862                                  
 26863                                  	; 11/12/2022
 26864 000021BA 0E                      	push	cs
 26865 000021BB 1F                      	pop	ds
 26866                                  
 26867 000021BC E86E05                  	call	TrueInt12Mem
 26868                                  
 26869                                  	; 11/12/2022
 26870                                  	; ds = cs
 26871                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26872                                  	;mov	[cs:DevBrkAddr],ax
 26873                                  	;mov	ax,[cs:break_addr+2]
 26874                                  	;mov	[cs:DevBrkAddr+2],ax
 26875 000021BF A1[F403]                	mov	ax,[break_addr]	
 26876 000021C2 A3[6A1E]                	mov	[DevBrkAddr],ax
 26877 000021C5 A1[F603]                	mov	ax,[break_addr+2]
 26878 000021C8 A3[6C1E]                	mov	[DevBrkAddr+2],ax
 26879                                  
 26880                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26881                                  	;call	RetFromUM		; There we go... all done.
 26882                                  
 26883                                  	; 11/12/2022
 26884 000021CB 803E[6E1E]00            	cmp	byte [DevUMB],0	
 26885                                  	;cmp	byte [cs:DevUMB],0
 26886 000021D0 7403                    	je	short tryd_3
 26887 000021D2 E8D208                  	call	AllocUMB
 26888                                  	; 31/12/2022
 26889                                  	; ds= cs
 26890                                  tryd_3:
 26891                                  
 26892                                  ;ifndef ROMDOS
 26893                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26894                                  
 26895                                  	; 11/12/2022
 26896                                  	; ds = cs
 26897                                  	
 26898                                  	;cmp	byte [cs:runhigh],0FFh
 26899 000021D5 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26900 000021DA 7503                    	jne	short tryd_4
 26901                                  	
 26902                                  	; 11/12/2022
 26903                                  	; ds = cs
 26904 000021DC E8F4E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26905                                  tryd_4:
 26906                                  ;endif ; ROMDOS
 26907                                  
 26908 000021DF 5E                      	pop	si
 26909 000021E0 1F                      	pop	ds
 26910 000021E1 C60400                  	mov	byte [si],0		; *p = 0;
 26911                                  
 26912 000021E4 0E                      	push	cs
 26913 000021E5 1F                      	pop	ds
 26914                                  
 26915 000021E6 EB1F                    	jmp	short was_device_com
 26916                                  
 26917                                  ;----------------------------------------------------------------------------
 26918                                  
 26919                                  ;02/04/2019 - Retro DOS v4.0
 26920                                  
 26921                                  badnumblock:
 26922 000021E8 0E                      	push	cs
 26923 000021E9 1F                      	pop	ds
 26924 000021EA BA[5E37]                	mov	dx,badblock
 26925 000021ED E89D10                  	call	print
 26926                                  
 26927                                  ;------ fall thru -----------------------------------------------------------
 26928                                  
 26929                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26930                                  	
 26931                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26932                                  	
 26933 000021F0 5E                      	pop	si
 26934 000021F1 07                      	pop	es
 26935                                  
 26936 000021F2 0E                      	push	cs
 26937 000021F3 1F                      	pop	ds
 26938                                  
 26939                                  skip1_resetmemhi:
 26940                                  	; 11/12/2022
 26941                                  	; ds = cs
 26942 000021F4 833E[FD03]00            	cmp	word [configmsgflag],0
 26943                                  	;cmp	word [cs:configmsgflag],0
 26944 000021F9 7409                    	je	short no_error_line_msg
 26945                                  
 26946 000021FB E8AD04                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26947                                  	; 11/12/2022
 26948                                  	; ds = cs
 26949                                  	;mov	word [cs:configmsgflag],0
 26950 000021FE C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26951                                  
 26952                                  no_error_line_msg:
 26953 00002204 E96FFD                  	jmp	coff
 26954                                  
 26955                                  ;----------------------------------------------------------------------------
 26956                                  
 26957                                  was_device_com:
 26958                                  	; 14/12/2022
 26959                                  	; ds = cs
 26960 00002207 A1[6C1E]                	mov	ax,[DevBrkAddr+2]
 26961                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26962 0000220A 3B06[641E]              	cmp	ax,[DevLoadEnd]
 26963                                  	;cmp	ax,[cs:DevLoadEnd]
 26964 0000220E 7605                    	jbe	short breakok
 26965                                  
 26966 00002210 5E                      	pop	si
 26967 00002211 07                      	pop	es
 26968 00002212 E93CFF                  	jmp	BadFile
 26969                                  
 26970                                  breakok:
 26971                                  	; 14/12/2022
 26972                                  	; ds = cs
 26973 00002215 C43E[6B02]              	les	di,[DOSINFO] 
 26974 00002219 C516[661E]              	lds	dx,[DevEntry]
 26975                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26976 0000221D 89D6                    	mov	si,dx
 26977                                  
 26978                                  	; 14/11/2022
 26979                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26980                                  
 26981                                  	; 14/12/2022
 26982                                  	; ds <> cs
 26983                                  	
 26984                                  	;mov	ax,[si+4]
 26985 0000221F 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26986                                  	; 12/12/2022
 26987 00002222 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26988                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26989 00002225 7426                    	jz	short isblock
 26990                                  
 26991                                  ;------ lets deal with character devices
 26992                                  
 26993 00002227 2E800E[1014]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26994 0000222D E8C606                  	call	DevSetBreak		;go ahead and alloc mem for device
 26995                                  jc_edd:
 26996 00002230 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26997                                  
 26998                                  	; 12/12/2022
 26999 00002232 A801                    	test	al,ISCIN
 27000                                  	;test	ax,ISCIN ; 1		;is it a console in?
 27001 00002234 7408                    	jz	short tryclk
 27002                                  
 27003 00002236 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 27004 0000223A 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 27005                                  tryclk: 
 27006                                  	; 12/12/2022
 27007 0000223E A808                    	test	al,ISCLOCK
 27008                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 27009 00002240 7408                    	jz	short golink
 27010                                  
 27011 00002242 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 27012 00002246 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 27013                                  golink: 
 27014 0000224A E9B000                  	jmp	linkit
 27015                                  
 27016                                  ;------ deal with block device drivers
 27017                                  
 27018                                  isblock:
 27019 0000224D 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 27020 00002251 08C0                    	or	al,al
 27021 00002253 749B                    	jz	short erase_dev_do
 27022                                  	;mov	[si+10],al
 27023 00002255 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 27024                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27025                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 27026                                  perdrv:
 27027 00002258 98                      	cbw				; warning no device > 127 units
 27028 00002259 89C1                    	mov	cx,ax
 27029 0000225B 88E6                    	mov	dh,ah
 27030                                  	;mov	dl,[es:di+32]
 27031 0000225D 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 27032 00002261 88D4                    	mov	ah,dl
 27033 00002263 00C4                    	add	ah,al			; check for too many devices
 27034 00002265 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 27035 00002268 7603                    	jbe	short ok_block
 27036 0000226A E97BFF                  	jmp	badnumblock
 27037                                  
 27038                                  ok_block:
 27039 0000226D 2E800E[1014]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27040 00002273 E88006                  	call	DevSetBreak		; alloc the device
 27041 00002276 72B8                    	jc	short jc_edd
 27042 00002278 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 27043                                  
 27044 0000227C 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 27045 00002281 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 27046                                  perunit:
 27047 00002286 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 27048                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 27049                                  	; 11/12/2022
 27050 0000228B 26C46E00                	les	bp,[es:bp]
 27051                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27052                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 27053                                  scandpb:
 27054                                  	;cmp	word [es:bp+25],-1
 27055 0000228F 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 27056 00002294 7406                    	je	short foundpb
 27057                                  	;les	bp,[es:bp+25]
 27058 00002296 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 27059 0000229A EBF3                    	jmp	short scandpb
 27060                                  foundpb:
 27061 0000229C 2EA1[6A1E]              	mov	ax,[cs:DevBrkAddr]
 27062 000022A0 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 27063 000022A4 2EA1[6C1E]              	mov	ax,[cs:DevBrkAddr+2]
 27064 000022A8 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 27065                                  
 27066 000022AC 2EC42E[6A1E]            	les	bp,[cs:DevBrkAddr]
 27067 000022B1 2E8306[6A1E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 27068                                  
 27069 000022B7 E81B06                  	call	RoundBreakAddr
 27070                                  
 27071 000022BA 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 27072 000022C0 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 27073                                  
 27074 000022C5 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 27075 000022C7 43                      	inc	bx
 27076 000022C8 43                      	inc	bx			;point to next guy
 27077                                  	;mov	[es:bp+DPB.DRIVE],dx
 27078                                  	; 11/12/2022
 27079 000022C9 26895600                	mov	[es:bp],dx ; 13/05/2019
 27080                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27081                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 27082                                  	
 27083 000022CD B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 27084 000022CF CD21                    	int	21h
 27085                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 27086                                  			; DS:SI -> BPB (BIOS Parameter Block)
 27087                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 27088                                  
 27089                                  	;mov	ax,[es:bp+2]
 27090 000022D1 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 27091 000022D5 06                      	push	es
 27092 000022D6 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 27093                                  	;cmp	ax,[es:di+10h]
 27094 000022DB 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 27095 000022DF 07                      	pop	es
 27096                                  	;jna	short iblk_1
 27097                                  	;jmp	short bad_bpb_size_sector
 27098                                  	; 29/10/2022
 27099 000022E0 775A                    	ja	short bad_bpb_size_sector
 27100                                  iblk_1:
 27101 000022E2 1E                      	push	ds
 27102 000022E3 52                      	push	dx
 27103                                  
 27104 000022E4 2EC516[661E]            	lds	dx,[cs:DevEntry]
 27105                                  	;mov	[es:bp+13h],dx
 27106 000022E9 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 27107                                  	;mov	[es:bp+15h],ds
 27108 000022ED 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 27109                                  
 27110 000022F1 5A                      	pop	dx
 27111 000022F2 1F                      	pop	ds
 27112                                  
 27113 000022F3 42                      	inc	dx
 27114 000022F4 FEC6                    	inc	dh
 27115 000022F6 E28E                    	loop	perunit
 27116                                  
 27117 000022F8 0E                      	push	cs
 27118 000022F9 1F                      	pop	ds
 27119                                  
 27120 000022FA E8C8E8                  	call	TempCDS 		; set cds for new drives
 27121                                  linkit:
 27122 000022FD 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 27123 00002302 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 27124 00002306 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 27125                                  
 27126 0000230A 2EC536[661E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 27127 0000230F 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 27128 00002313 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 27129 00002317 8B04                    	mov	ax,[si]			;get pointer to next device
 27130 00002319 2EA3[661E]              	mov	[cs:DevEntry],ax	;and save it
 27131                                  
 27132 0000231D 890C                    	mov	[si],cx			;link in the driver
 27133 0000231F 895402                  	mov	[si+2],dx
 27134                                  enddev:
 27135 00002322 5E                      	pop	si
 27136 00002323 07                      	pop	es
 27137 00002324 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 27138 00002325 740B                    	jz	short coffj3
 27139                                  
 27140 00002327 2EFE06[0D14]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 27141 0000232C E8E905                  	call	DevBreak		; M009
 27142                                  	; 11/12/2022
 27143                                  	; ds = cs (DevBreak)
 27144                                  
 27145                                  	; 03/04/2019 - Retro DOS v4.0
 27146                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 27147 0000232F E93BFE                  	jmp	goodld			; otherwise pretend we loaded it in
 27148                                  coffj3: 
 27149                                  	; 18/12/2022
 27150                                  	; ax = 0
 27151 00002332 2EA2[0D14]              	mov	[cs:multdeviceflag],al ; 0
 27152                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 27153 00002336 E8DF05                  	call	DevBreak
 27154                                  	; 11/12/2022
 27155                                  	; ds = cs (DevBreak)
 27156                                  	
 27157                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 27158                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 27159                                  ;					;  created a bogus arena to try
 27160                                  ;					;  to protect some of its resident-
 27161                                  ;					;  init code.
 27162                                  	;call	CheckDoubleSpace
 27163 00002339 E93AFC                  	jmp	coff
 27164                                  
 27165                                  ;----------------------------------------------------------------------------
 27166                                  
 27167                                  ;CheckDoubleSpace:
 27168                                  ;;;;	ifdef	dblspace_hooks
 27169                                  ;
 27170                                  ;;	Now check for two special MagicDrv cases:
 27171                                  ;;
 27172                                  ;;       a) the last driver load was MagicDrv final placement:
 27173                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 27174                                  ;;
 27175                                  ;;       b) MagicDrv is currently in temporary home:
 27176                                  ;;          -> call it to give it a chance to mount and shuffle drives
 27177                                  ;
 27178                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 27179                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 27180                                  ;
 27181                                  ;;	Now inquire of driver whether it is present, and final located
 27182                                  ;
 27183                                  ;	mov	ax,multMagicdrv ; 4A11h
 27184                                  ;	mov	bx,MD_VERSION ; 0
 27185                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 27186                                  ;	or	ax,ax			; is it there?
 27187                                  ;	jnz	short no_more_magic_calls ; done if not
 27188                                  ;
 27189                                  ;	test	dx,8000h		; is it final placed?
 27190                                  ;	jnz	short magic_not_yet_home ;  skip if not
 27191                                  ;
 27192                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 27193                                  ;;	don't keep checking it, and add its number of drive letters
 27194                                  ;;	to drivenumber.
 27195                                  ;
 27196                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 27197                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 27198                                  ;;					;  the drive number we'll pass to the
 27199                                  ;;					;  next loadable block device.
 27200                                  ;
 27201                                  ;	jmp	short no_more_magic_calls ; and finished.
 27202                                  ;
 27203                                  ;magic_not_yet_home:
 27204                                  ;	push	es
 27205                                  ;	push	si
 27206                                  ;
 27207                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 27208                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 27209                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 27210                                  ;
 27211                                  ;	mov	bx,2
 27212                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 27213                                  ;;					;   by this many units
 27214                                  ;
 27215                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 27216                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 27217                                  ;;					;  sees this, to prevent bad things
 27218                                  ;;					;  from happening if people run the
 27219                                  ;;					;  new driver with an old BIOS
 27220                                  ;	call	far [cs:MagicBackdoor]
 27221                                  ;
 27222                                  ;	pop	si
 27223                                  ;	pop	es
 27224                                  ;
 27225                                  ;no_more_magic_calls:
 27226                                  ;
 27227                                  ;;;;	endif
 27228                                  ;	retn
 27229                                  
 27230                                  ; 03/04/2019 - Retro DOS v4.0
 27231                                  
 27232                                  bad_bpb_size_sector:
 27233 0000233C 5E                      	pop	si
 27234 0000233D 07                      	pop	es
 27235 0000233E BA[8036]                	mov	dx,badsiz_pre
 27236 00002341 BB[5E36]                	mov	bx,crlfm
 27237 00002344 E8240F                  	call	prnerr
 27238                                  
 27239 00002347 E92CFC                  	jmp	coff
 27240                                  
 27241                                  ;------------------------------------------------------------------------------
 27242                                  ; country command
 27243                                  ;      the syntax is:
 27244                                  ;	country=country id {,codepage {,path}}
 27245                                  ;	country=country id {,,path}	:default codepage id in dos
 27246                                  ;------------------------------------------------------------------------------
 27247                                  
 27248                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27249                                  	; (SYSINIT:2663h)
 27250                                  tryq:
 27251 0000234A 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 27252 0000234D 7403                    	je	short tryq_cont
 27253                                  skip_it3:
 27254 0000234F E90801                  	jmp	tryf
 27255                                  tryq_cont:
 27256                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27257                                  ;;ifdef	MULTI_CONFIG
 27258                                  ;       call    query_user		; query the user if config_cmd
 27259                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 27260                                  ;;endif
 27261                                  	; 14/12/2022
 27262                                  	; ds = cs
 27263                                  	; bx = 0
 27264                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 27265                                  	;mov	word [cs:p_code_page],0
 27266 00002352 881E[1633]              	mov	[cntry_drv],bl ; 0
 27267 00002356 891E[2B1D]              	mov	[p_code_page],bx ; 0
 27268                                  	
 27269 0000235A BF[F41C]                	mov	di,cntry_parms
 27270 0000235D 31C9                    	xor	cx,cx
 27271                                  	; 04/01/2023
 27272                                  	;mov	dx,cx
 27273                                  do52:
 27274 0000235F E8F602                  	call	sysinit_parse
 27275 00002362 730B                    	jnc	short if52		; parse error,check error code and
 27276                                  
 27277 00002364 E8E000                  	call	cntry_error		; show message and end the search loop.
 27278                                  	; 14/12/2022
 27279                                  	; ds = cs
 27280 00002367 C706[291D]FFFF          	mov	word [p_cntry_code],-1
 27281                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 27282 0000236D EB34                    	jmp	short sr52
 27283                                  if52:
 27284 0000236F 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 27285 00002372 742F                    	jz	short sr52		; then end the search loop
 27286                                  
 27287                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 27288                                  	; 14/12/2022
 27289                                  	; ds = cs
 27290 00002374 803E[C61C]01            	cmp	byte [result_val],_$P_Number	
 27291                                  	;cmp	byte [cs:result_val],_$P_Number
 27292 00002379 7512                    	jnz	short if56
 27293                                  
 27294                                  	;;mov	ax,[cs:rw_dword]
 27295                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27296                                  	; 14/12/2022
 27297 0000237B A1[CA1C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27298 0000237E 83F901                  	cmp	cx,1
 27299 00002381 7505                    	jne	short if57
 27300                                  
 27301                                  	;mov	[cs:p_cntry_code],ax
 27302                                  	; 14/12/2022
 27303 00002383 A3[291D]                	mov	[p_cntry_code],ax
 27304                                  
 27305                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27306                                  	;jmp	short en57
 27307                                  	; 12/12/2022
 27308                                  	;jmp	short en56
 27309 00002386 EBD7                    	jmp	short do52
 27310                                  
 27311                                  if57:
 27312                                  	;mov	[cs:p_code_page],ax
 27313                                  	; 14/12/2022
 27314                                  	; ds = cs
 27315 00002388 A3[2B1D]                	mov	[p_code_page],ax
 27316                                  en57:
 27317                                  	;jmp	short en56		; path entered
 27318                                  	; 12/12/2022
 27319 0000238B EBD2                    	jmp	short do52
 27320                                  
 27321                                  if56:
 27322 0000238D 1E                      	push	ds
 27323 0000238E 06                      	push	es
 27324 0000238F 56                      	push	si
 27325 00002390 57                      	push	di
 27326                                  
 27327 00002391 0E                      	push	cs
 27328 00002392 07                      	pop	es
 27329                                  
 27330                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 27331                                  	; 14/12/2022
 27332 00002393 C536[CA1C]              	lds	si,[rv_dword]
 27333 00002397 BF[1633]                	mov	di,cntry_drv
 27334 0000239A E8BD0E                  	call	move_asciiz
 27335                                  
 27336 0000239D 5F                      	pop	di
 27337 0000239E 5E                      	pop	si
 27338 0000239F 07                      	pop	es
 27339 000023A0 1F                      	pop	ds
 27340                                  
 27341                                  en56:
 27342 000023A1 EBBC                    	jmp	short do52
 27343                                  
 27344                                  sr52:
 27345                                  	; 14/12/2022
 27346                                  	; ds = cs
 27347 000023A3 833E[291D]FF            	cmp	word [p_cntry_code],-1
 27348                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 27349 000023A8 7509                    	jne	short tryq_open
 27350 000023AA E9C9FB                  	jmp	coff
 27351                                  
 27352                                  tryqbad:				;"invalid country code or code page"
 27353 000023AD F9                      	stc
 27354 000023AE BA[C736]                	mov     dx,badcountry
 27355 000023B1 EB79                    	jmp     tryqchkerr
 27356                                  
 27357                                  tryq_open:
 27358                                  	; 14/12/2022
 27359                                  	; ds = cs
 27360 000023B3 803E[1633]00            	cmp	byte [cntry_drv],0
 27361                                  	;cmp	byte [cs:cntry_drv],0
 27362 000023B8 7405                    	je	short tryq_def
 27363 000023BA BA[1633]                	mov	dx,cntry_drv
 27364 000023BD EB03                    	jmp	short tryq_openit
 27365                                  
 27366                                  tryq_def:
 27367 000023BF BA[1833]                	mov	dx,cntry_root
 27368                                  tryq_openit:
 27369 000023C2 B8003D                  	mov	ax,3D00h		;open a file
 27370 000023C5 F9                      	stc
 27371 000023C6 CD21                    	int	21h
 27372 000023C8 7242                    	jc	short tryqfilebad	;open failure
 27373                                  
 27374                                  	; 14/12/2022
 27375                                  	; ds = cs
 27376 000023CA A3[D803]                	mov	[cntryfilehandle],ax
 27377                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 27378 000023CD 89C3                    	mov	bx,ax
 27379 000023CF A1[291D]                	mov	ax,[p_cntry_code]
 27380 000023D2 8B16[2B1D]              	mov	dx,[p_code_page]
 27381                                  	;mov	ax,[cs:p_cntry_code]
 27382                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 27383                                  	;mov	cx,[cs:memhi]
 27384 000023D6 8B0E[E003]              	mov	cx,[memhi]
 27385 000023DA 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 27386                                  					; M023
 27387                                  	; 14/12/2022
 27388                                  	; ds = cs
 27389 000023DE 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 27390                                  	;cmp	cx,[cs:ALLOCLIM]
 27391 000023E2 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 27392                                  
 27393 000023E4 BE[1633]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 27394 000023E7 803C00                  	cmp	byte [si],0 		;default path?
 27395 000023EA 7502                    	jne	short tryq_set_for_dos
 27396                                  
 27397 000023EC 46                      	inc	si
 27398 000023ED 46                      	inc	si			;ds:si -> cntry_root
 27399                                  
 27400                                  tryq_set_for_dos:
 27401                                  	; 14/12/2022
 27402                                  	; ds = cs
 27403 000023EE C43E[7702]              	les	di,[sysi_country]
 27404                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 27405 000023F2 57                      	push	di			;save di
 27406                                  	;add	di,8
 27407 000023F3 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 27408 000023F6 E8610E                  	call	move_asciiz		;set the path to country.sys in dos.
 27409 000023F9 5F                      	pop	di			;es:di -> country info tab again.
 27410                                  
 27411                                  	; 14/12/2022	
 27412 000023FA 8B0E[E003]              	mov	cx,[memhi]
 27413                                  	;mov	cx,[cs:memhi]
 27414 000023FE 8ED9                    	mov	ds,cx
 27415 00002400 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 27416 00002402 E8DD0C                  	call	setdoscountryinfo	;now do the job!!!
 27417                                  	; ds <> cs ; 14/12/2022
 27418 00002405 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 27419                                  
 27420 00002407 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 27421 0000240A 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 27422                                  
 27423                                  tryqfilebad:
 27424 0000240C 0E                      	push	cs
 27425 0000240D 07                      	pop	es
 27426 0000240E 2E803E[1633]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 27427 00002414 7405                    	je	short tryqdefbad
 27428                                  
 27429 00002416 BE[1633]                	mov	si,cntry_drv
 27430 00002419 EB03                    	jmp	short tryqbadload
 27431                                  
 27432                                  tryqdefbad:				;default file has been used.
 27433 0000241B BE[1833]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 27434                                  tryqbadload:
 27435 0000241E E8440E                  	call	badload 		;ds will be restored to sysinit_seg
 27436                                  	;mov	cx,[cs:CONFBOT]
 27437                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27438                                  	;mov	cx,[cs:top_of_cdss]
 27439                                  	; 11/12/2022
 27440                                  	; ds = cs
 27441 00002421 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 27442 00002425 8EC1                    	mov	es,cx			;restore es -> confbot.
 27443 00002427 EB13                    	jmp	short coffj4
 27444                                  
 27445                                  tryqmemory:
 27446 00002429 BA[0A37]                	mov	dx,insufmemory
 27447                                  tryqchkerr:
 27448                                  	;mov	cx,[cs:CONFBOT]
 27449                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27450                                  	;mov	cx,[cs:top_of_cdss]
 27451                                  	; 12/12/2022
 27452 0000242C 0E                      	push	cs
 27453 0000242D 1F                      	pop	ds
 27454 0000242E 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 27455 00002432 8EC1                    	mov	es,cx			;restore es -> confbot seg
 27456                                  	;push	cs
 27457                                  	;pop	ds			;restore ds to sysinit_seg
 27458 00002434 7306                    	jnc	short coffj4		;if no error,then exit
 27459                                  
 27460 00002436 E8540E                  	call	print			;else show error message
 27461 00002439 E86F02                  	call	error_line
 27462                                  coffj4:
 27463                                  	;mov	bx,[cs:cntryfilehandle]
 27464                                  	; 11/12/2022
 27465                                  	; ds = cs
 27466 0000243C 8B1E[D803]              	mov	bx,[cntryfilehandle]
 27467 00002440 B43E                    	mov	ah,3Eh
 27468 00002442 CD21                    	int	21h			;close a file. don't care even if it fails.
 27469 00002444 E92FFB                  	jmp	coff
 27470                                  
 27471                                  ;--------------------------------------------
 27472                                  
 27473                                  cntry_error:
 27474                                  
 27475                                  ;function: show "invalid country code or code page" messages,or
 27476                                  ;		"error in country command" depending on the error code
 27477                                  ;		in ax returned by sysparse;
 27478                                  ;in:	ax - error code
 27479                                  ;	ds - sysinitseg
 27480                                  ;	es - confbot
 27481                                  ;out:	show message.  dx destroyed.
 27482                                  
 27483 00002447 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 27484 0000244A 7505                    	jne	short if64
 27485 0000244C BA[C736]                	mov	dx,badcountry		;"invalid country code or code page"
 27486 0000244F EB03                    	jmp	short en64
 27487                                  if64:
 27488 00002451 BA[ED36]                	mov	dx,badcountrycom	;"error in contry command"
 27489                                  en64:
 27490 00002454 E8360E                  	call	print
 27491                                  	;call	error_line
 27492                                  	;retn
 27493                                  	; 11/12/2022
 27494 00002457 E95102                  	jmp	error_line
 27495                                  
 27496                                  ;------------------------------------------------------------------------------
 27497                                  ; files command
 27498                                  ;------------------------------------------------------------------------------
 27499                                  
 27500                                  ;******************************************************************************
 27501                                  ; function: parse the parameters of files= command.			      *
 27502                                  ;									      *
 27503                                  ; input :								      *
 27504                                  ;	es:si -> parameters in command line.				      *
 27505                                  ; output:								      *
 27506                                  ;	variable files set.						      *
 27507                                  ;									      *
 27508                                  ; subroutines to be called:						      *
 27509                                  ;	sysinit_parse							      *
 27510                                  ; logic:								      *
 27511                                  ; {									      *
 27512                                  ;	set di points to files_parms;					      *
 27513                                  ;	set dx,cx to 0; 						      *
 27514                                  ;	while (end of command line)					      *
 27515                                  ;	{ sysinit_parse;						      *
 27516                                  ;	  if (no error) then						      *
 27517                                  ;	     files = result_val._$P_picked_val				      *
 27518                                  ;	  else								      *
 27519                                  ;	     error exit;						      *
 27520                                  ;	};								      *
 27521                                  ; };									      *
 27522                                  ;									      *
 27523                                  ;******************************************************************************
 27524                                  
 27525                                  tryf:
 27526 0000245A 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 27527 0000245D 7523                    	jne	short tryl
 27528                                  
 27529                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27530                                  ;;ifdef	MULTI_CONFIG
 27531                                  ;       call    query_user              ; query the user if config_cmd
 27532                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 27533                                  ;;endif
 27534                                  
 27535                                  	; 14/12/2022
 27536                                  	; ds = cs
 27537                                  
 27538 0000245F BF[2D1D]                	mov	di,files_parms
 27539 00002462 31C9                    	xor	cx,cx
 27540                                  	; 04/01/2023
 27541                                  	;mov	dx,cx
 27542                                  do67:
 27543 00002464 E8F101                  	call	sysinit_parse
 27544 00002467 7303                    	jnc	short if67		; parse error
 27545                                  	;call	badparm_p		;  and show messages and end the search loop.
 27546                                  	;jmp	short sr67
 27547                                  	; 04/01/2023
 27548 00002469 E96A01                  	jmp	badparm_p_coff
 27549                                  if67:
 27550 0000246C 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27551 0000246F 7408                    	je	short en67		; then end the $endloop
 27552                                  
 27553                                  	; 14/12/2022
 27554                                  	; ds = cs
 27555                                  	;;mov	al,[cs:rv_dword]
 27556                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27557                                  	;mov	[cs:p_files],al		; save it temporarily
 27558                                  	;mov	al,[rv_dword]
 27559 00002471 A0[CA1C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27560 00002474 A2[4C1D]                	mov	[p_files],al
 27561                                  
 27562 00002477 EBEB                    	jmp	short do67
 27563                                  en67:
 27564                                  	; 14/12/2022
 27565                                  	; ds = cs
 27566 00002479 A0[4C1D]                	mov	al,[p_files]
 27567 0000247C A2[9D02]                	mov	[FILES],al	
 27568                                  	;mov	al,[cs:p_files]
 27569                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 27570                                  sr67:
 27571 0000247F E9F4FA                  	jmp	coff
 27572                                  
 27573                                  ; 04/04/2019 - Retro DOS v4.0
 27574                                  
 27575                                  ;------------------------------------------------------------------------------
 27576                                  ; lastdrive command
 27577                                  ;------------------------------------------------------------------------------
 27578                                  
 27579                                  ;******************************************************************************
 27580                                  ; function: parse the parameters of lastdrive= command. 		      *
 27581                                  ;									      *
 27582                                  ; input :								      *
 27583                                  ;	es:si -> parameters in command line.				      *
 27584                                  ; output:								      *
 27585                                  ;	set the variable num_cds.					      *
 27586                                  ;									      *
 27587                                  ; subroutines to be called:						      *
 27588                                  ;	sysinit_parse							      *
 27589                                  ; logic:								      *
 27590                                  ; {									      *
 27591                                  ;	set di points to ldrv_parms;					      *
 27592                                  ;	set dx,cx to 0; 						      *
 27593                                  ;	while (end of command line)					      *
 27594                                  ;	{ sysinit_parse;						      *
 27595                                  ;	  if (no error) then						      *
 27596                                  ;	     set num_cds to the returned value; 			      *
 27597                                  ;	  else	/*error exit*/						      *
 27598                                  ;	     error exit;						      *
 27599                                  ;	};								      *
 27600                                  ; };									      *
 27601                                  ;									      *
 27602                                  ;******************************************************************************
 27603                                  
 27604                                  tryl:
 27605 00002482 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 27606 00002485 7523                    	jne	short tryp
 27607                                  
 27608                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27609                                  ;;ifdef	MULTI_CONFIG
 27610                                  ;       call    query_user      ; query the user if config_cmd
 27611                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 27612                                  ;;endif
 27613                                  	; 14/12/2022
 27614                                  	; ds = cs
 27615                                  
 27616 00002487 BF[841D]                	mov	di,ldrv_parms
 27617 0000248A 31C9                    	xor	cx,cx
 27618                                  	; 04/01/2023
 27619                                  	;mov	dx,cx
 27620                                  do73:
 27621 0000248C E8C901                  	call	sysinit_parse
 27622 0000248F 7303                    	jnc	short if73	; parse error
 27623                                  	;call	badparm_p	;  and show messages and end the search loop.
 27624                                  	;jmp	short sr73
 27625                                  	; 04/01/2023
 27626 00002491 E94201                  	jmp	badparm_p_coff
 27627                                  if73:
 27628 00002494 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27629 00002497 7408                    	je	short en73	; then end the $endloop
 27630                                  
 27631                                  	; 14/12/2022
 27632                                  	; ds = cs
 27633                                  	;;mov	al,[cs:rv_dword]
 27634                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27635                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27636                                  
 27637                                  	;mov	al,[rv_dword]
 27638 00002499 A0[CA1C]                	mov	al,[rv_byte]
 27639 0000249C A2[981D]                	mov	[p_ldrv],al
 27640                                  
 27641 0000249F EBEB                    	jmp	short do73
 27642                                  en73:
 27643                                  	; 14/12/2022
 27644                                  	; ds = cs
 27645 000024A1 A0[981D]                	mov	al,[p_ldrv]
 27646 000024A4 A2[A002]                	mov	[NUM_CDS],al
 27647                                  	;mov	al,[cs:p_ldrv]
 27648                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27649                                  sr73:
 27650 000024A7 E9CCFA                  	jmp	coff
 27651                                  
 27652                                  ;--------------------------------------------------------------------------
 27653                                  ; setting drive parameters
 27654                                  ;--------------------------------------------------------------------------
 27655                                  
 27656                                  tryp:
 27657 000024AA 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27658 000024AD 7511                    	jne	short tryk
 27659                                  
 27660                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27661                                  ;;ifdef	MULTI_CONFIG
 27662                                  ;       call    query_user      ; query the user if config_cmd
 27663                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27664                                  ;;endif
 27665                                  
 27666 000024AF E83508                  	call	parseline
 27667 000024B2 7209                    	jc	short trypbad
 27668 000024B4 E85C07                  	call	setparms
 27669 000024B7 E89007                  	call	diddleback
 27670                                  
 27671                                  ; No error check here, because setparms and diddleback have no error 
 27672                                  ; returns, and setparms as coded now can return with carry set. 
 27673                                  ;       jc	short trypbad
 27674                                  
 27675                                  	; 12/12/2022
 27676                                  	; cf = 0
 27677                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27678                                  	;jc	short trypbad
 27679                                  	
 27680 000024BA E9B9FA                  	jmp	coff
 27681                                  trypbad:
 27682 000024BD E9B701                  	jmp	badop
 27683                                  
 27684                                  ;--------------------------------------------------------------------------
 27685                                  ; setting internal stack parameters
 27686                                  ; stacks=m,n where
 27687                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27688                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27689                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27690                                  ;	any combinations that are not within the specified limits will
 27691                                  ;	result in "unrecognized command" error.
 27692                                  ;--------------------------------------------------------------------------
 27693                                  
 27694                                  ;**************************************************************************
 27695                                  ;									  *
 27696                                  ; function: parse the parameters of stacks= command.			  *
 27697                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27698                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27699                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27700                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27701                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27702                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27703                                  ;	    (or if "0,0" pair has been entered.)			  *
 27704                                  ; input :								  *
 27705                                  ;	es:si -> parameters in command line.				  *
 27706                                  ; output:								  *
 27707                                  ;	set the variables stack_count,stack_size.			  *
 27708                                  ;									  *
 27709                                  ; subroutines to be called:						  *
 27710                                  ;	sysinit_parse							  *
 27711                                  ; logic:								  *
 27712                                  ; {									  *
 27713                                  ;	set di points to stks_parms;					  *
 27714                                  ;	set dx,cx to 0; 						  *
 27715                                  ;	while (end of command line)					  *
 27716                                  ;	{ sysinit_parse;						  *
 27717                                  ;	  if (no error) then						  *
 27718                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27719                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27720                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27721                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27722                                  ;	     }								  *
 27723                                  ;	  else	/*error exit*/						  *
 27724                                  ;	     error exit;						  *
 27725                                  ;	};								  *
 27726                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27727                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27728                                  ;	 else error_exit;						  *
 27729                                  ; };									  *
 27730                                  ;**************************************************************************
 27731                                  
 27732                                  tryk:
 27733                                          ;if      stacksw
 27734                                  
 27735 000024C0 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27736 000024C3 7402                    	je	short do_tryk
 27737                                  skip_it4:
 27738 000024C5 EB74                    	jmp	short trys	; 15/12/2022
 27739                                  do_tryk:
 27740                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27741                                  ;;ifdef	MULTI_CONFIG
 27742                                  ;       call    query_user              ; query the user if config_cmd
 27743                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27744                                  ;;endif
 27745                                  	; 14/12/2022
 27746                                  	; ds = cs
 27747                                  
 27748 000024C7 BF[991D]                	mov	di,stks_parms
 27749 000024CA 31C9                    	xor	cx,cx
 27750                                  	; 04/01/2023
 27751                                  	;mov	dx,cx
 27752                                  do79:
 27753 000024CC E88901                  	call	sysinit_parse
 27754 000024CF 730B                    	jnc	short if79		; parse error
 27755                                  
 27756 000024D1 BA[7937]                	mov	dx,badstack		; "invalid stack parameter"
 27757 000024D4 E8B60D                  	call	print			;  and show messages and end the search loop.
 27758 000024D7 E8D101                  	call	error_line
 27759                                  	;jmp	sr79
 27760                                  	; 11/12/2022
 27761 000024DA EB39                    	jmp	short sr79
 27762                                  if79:
 27763 000024DC 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27764 000024DF 7412                    	je	short en79		; then end the $endloop
 27765                                  
 27766                                  	; 14/12/2022
 27767                                  	; ds = cs
 27768                                  
 27769                                  	;;mov	ax,[cs:rv_dword]
 27770                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27771                                  	;mov	ax,[rv_dword]
 27772 000024E1 A1[CA1C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27773                                  
 27774 000024E4 83F901                  	cmp	cx,1
 27775 000024E7 7505                    	jne	short if83
 27776                                  
 27777                                  	; 14/12/2022
 27778                                  	;mov	[cs:p_stack_count],ax
 27779                                  	;jmp	short en83
 27780 000024E9 A3[CE1D]                	mov	[p_stack_count],ax
 27781 000024EC EBDE                    	jmp	short do79
 27782                                  if83:
 27783                                  	; 14/12/2022
 27784                                  	;mov	[cs:p_stack_size],ax
 27785 000024EE A3[D01D]                	mov	[p_stack_size],ax
 27786                                  en83:
 27787 000024F1 EBD9                    	jmp	short do79
 27788                                  en79:
 27789                                  	; 14/12/2022
 27790                                  	; ds = cs
 27791 000024F3 A1[CE1D]                	mov	ax,[p_stack_count]
 27792 000024F6 09C0                    	or	ax,ax
 27793 000024F8 741E                    	jz	short if87		
 27794                                  
 27795                                  	; 14/12/2022
 27796                                  	;cmp	word [p_stack_count],0
 27797                                  	;;cmp	word [cs:p_stack_count],0
 27798                                  	;je	short if87
 27799                                  
 27800                                  	; 14/12/2022
 27801 000024FA 83F808                  	cmp	ax, mincount ; 8
 27802                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27803                                  	; 15/12/2022
 27804 000024FD 721F                    	jb	short en87
 27805 000024FF 833E[D01D]20            	cmp	word [p_stack_size],minsize ; 32
 27806                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27807                                  	; 15/12/2022
 27808 00002504 7218                    	jb	short en87
 27809                                  if94:
 27810                                  	; 14/12/2022
 27811                                  	; ds = cs
 27812                                  	; ax = [p_stack_count]
 27813                                  	;mov	ax,[p_stack_count]
 27814                                  	;;mov	ax,[cs:p_stack_count]
 27815 00002506 A3[8A02]                	mov	[stack_count],ax
 27816                                  	;mov	[cs:stack_count],ax
 27817                                  	;mov	ax,[cs:p_stack_size]
 27818 00002509 A1[D01D]                	mov	ax,[p_stack_size]
 27819                                  	;mov	[cs:stack_size],ax
 27820 0000250C A3[8C02]                	mov	[stack_size],ax
 27821                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27822 0000250F C706[8E02]FFFF          	mov	word [stack_addr],-1
 27823                                  sr79:
 27824 00002515 E95EFA                  	jmp	coff
 27825                                  
 27826                                  if87:
 27827                                  	; 14/12/2022
 27828 00002518 3906[D01D]              	cmp	[p_stack_size],ax ; 0
 27829 0000251C 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27830                                  	;cmp	word [cs:p_stack_size],0
 27831                                  	;je	short if94
 27832                                  en87:
 27833                                  	; 15/12/2022
 27834                                  	; ([p_stack_count] is invalid, use default values)
 27835                                  	; 14/12/2022
 27836                                  	; ds = cs
 27837 0000251E C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27838 00002524 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27839 0000252A C706[8E02]0000          	mov	word [stack_addr],0
 27840                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27841                                  	;				; reset to default value.
 27842                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27843                                  	;mov	word [cs:stack_addr],0
 27844                                  
 27845 00002530 BA[7937]                	mov	dx,badstack
 27846 00002533 E8570D                  	call	print
 27847 00002536 E87201                  	call	error_line
 27848 00002539 EBDA                    	jmp	short sr79
 27849                                  
 27850                                  ; 15/12/2022
 27851                                  %if 0
 27852                                  	mov	di,stks_parms
 27853                                  	xor	cx,cx
 27854                                  	; 04/01/2023
 27855                                  	;mov	dx,cx
 27856                                  do79:
 27857                                  	call	sysinit_parse
 27858                                  	jnc	short if79		; parse error
 27859                                  
 27860                                  	mov	dx,badstack		; "invalid stack parameter"
 27861                                  	call	print			;  and show messages and end the search loop.
 27862                                  	call	error_line
 27863                                  	;jmp	sr79
 27864                                  	; 11/12/2022
 27865                                  	jmp	short sr79
 27866                                  if79:
 27867                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27868                                  	je	short en79		; then end the $endloop
 27869                                  
 27870                                  	;mov	ax,[cs:rv_dword]
 27871                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27872                                  	cmp	cx,1
 27873                                  	jne	short if83
 27874                                  
 27875                                  	mov	[cs:p_stack_count],ax
 27876                                  	jmp	short en83
 27877                                  if83:
 27878                                  	mov	[cs:p_stack_size],ax
 27879                                  en83:
 27880                                  	jmp	short do79
 27881                                  en79:
 27882                                  	cmp	word [cs:p_stack_count],0
 27883                                  	je	short if87
 27884                                  
 27885                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27886                                  	jb	short ll88
 27887                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27888                                  	jnb	short if88
 27889                                  ll88:
 27890                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27891                                  if88:
 27892                                  	jmp	short en87
 27893                                  
 27894                                  	; 11/12/2022
 27895                                  if94:
 27896                                  	mov	ax,[cs:p_stack_count]
 27897                                  	mov	[cs:stack_count],ax
 27898                                  	mov	ax,[cs:p_stack_size]
 27899                                  	mov	[cs:stack_size],ax
 27900                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27901                                  sr79:
 27902                                  	jmp	coff
 27903                                  
 27904                                  if87:
 27905                                  	cmp	word [cs:p_stack_size],0
 27906                                  	je	short en87
 27907                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27908                                  en87:
 27909                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27910                                  	jne	short if94
 27911                                  
 27912                                  	mov	word [cs:stack_count],defaultcount ; 9
 27913                                  					; reset to default value.
 27914                                  	mov	word [cs:stack_size],defaultsize ; 128
 27915                                  	mov	word [cs:stack_addr],0
 27916                                  
 27917                                  	mov	dx,badstack
 27918                                  	call	print
 27919                                  	call	error_line
 27920                                  	jmp	short sr79
 27921                                  
 27922                                  %endif
 27923                                  
 27924                                  ; 11/12/2022
 27925                                  %if 0 
 27926                                  
 27927                                  if94:
 27928                                  	mov	ax,[cs:p_stack_count]
 27929                                  	mov	[cs:stack_count],ax
 27930                                  	mov	ax,[cs:p_stack_size]
 27931                                  	mov	[cs:stack_size],ax
 27932                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27933                                  sr79:
 27934                                  	jmp	coff
 27935                                  
 27936                                  %endif
 27937                                  
 27938                                  	;endif
 27939                                  
 27940                                  ;------------------------------------------------------------------------
 27941                                  ; shell command
 27942                                  ;------------------------------------------------------------------------
 27943                                  
 27944                                  trys:
 27945 0000253B 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27946 0000253E 753C                    	jne	short tryx
 27947                                  
 27948                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27949                                  ;;ifdef	MULTI_CONFIG
 27950                                  ;       call    query_user              ; query the user if config_cmd
 27951                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27952                                  ;       mov	byte [cs:newcmd],1
 27953                                  ;;endif
 27954                                  
 27955                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27956                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27957                                  	;mov	byte [cs:command_line+1],0
 27958                                  	; 15/12/2022
 27959                                  	; ds = cs
 27960 00002540 C606[AA02]00            	mov	byte [command_line+1],0
 27961                                  
 27962 00002545 BF[6433]                        mov     di,commnd+1		; we already have the first char
 27963 00002548 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27964                                  storeshell:
 27965 0000254B E8970A                  	call	getchr
 27966 0000254E 08C0                            or      al,al                   ; this is the normal case: "organize"
 27967 00002550 7419                            jz	short getshparms	; put a ZERO right after the filename
 27968                                  
 27969 00002552 3C20                            cmp     al," "                  ; this may happen if there are no args
 27970 00002554 7205                            jb	short endofshell	; I suppose...
 27971 00002556 8805                    	mov	[di],al
 27972 00002558 47                      	inc	di
 27973                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27974                                          ;jb	short storeshell	; commnd (the filename)
 27975                                          ;jmp	short endofshell
 27976                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27977 00002559 EBF0                    	jmp	short storeshell
 27978                                  
 27979                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27980                                  ;getshparms:
 27981                                  ;	mov     byte [di],0		; zero-terminate the filename
 27982                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27983                                  ;
 27984                                  ;parmloop:
 27985                                  ;	call	getchr
 27986                                  ;	cmp	al," "
 27987                                  ;	jb	short endofparms
 27988                                  ;	mov	[di],al
 27989                                  ;	inc	di
 27990                                  ;	cmp     di,command_line+126
 27991                                  ;	jb	short parmloop
 27992                                  ;endofparms:
 27993                                  ;	mov     cx,di
 27994                                  ;	sub     cx,command_line+1
 27995                                  ;	mov     [cs:command_line],cl
 27996                                  ;
 27997                                  ;endofshell:
 27998                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27999                                  ;					; the command-line as the case may be)
 28000                                  ;skipline:
 28001                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28002                                  ;       je	short endofline		; the line: watch for ever-present LF
 28003                                  ;call	getchr
 28004                                  ;       jnc	short skipline		; keep it up as long as there are chars
 28005                                  ;
 28006                                  ;endofline:
 28007                                  ;       jmp     conflp
 28008                                  
 28009                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28010                                  endofshell:
 28011 0000255B C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 28012                                  					; the command-line as the case may be)
 28013 0000255E E8840A                  	call	getchr
 28014                                  skipline:
 28015 00002561 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28016 00002563 7403                    	je	short endofline		; the line: watch for ever-present LF
 28017 00002565 E87D0A                  	call	getchr
 28018                                  endofline:
 28019 00002568 E9E6F9                  	jmp     conflp
 28020                                  
 28021                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28022                                  getshparms:
 28023                                  	; 18/12/2022
 28024                                  	; al = 0
 28025 0000256B 8805                    	mov	[di],al ; 0
 28026                                  	;mov	byte [di],0		; zero-terminate the filename
 28027 0000256D BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 28028                                  parmloop:
 28029 00002570 E8720A                  	call	getchr
 28030 00002573 3C20                    	cmp	al," " ; 20h
 28031 00002575 72E4                    	jb	short endofshell
 28032 00002577 8805                    	mov	[di],al
 28033 00002579 47                      	inc	di
 28034 0000257A EBF4                    	jmp	short parmloop
 28035                                  
 28036                                  ;------------------------------------------------------------------------
 28037                                  ; fcbs command
 28038                                  ;------------------------------------------------------------------------
 28039                                  
 28040                                  ;************************************************************************
 28041                                  ; function: parse the parameters of fcbs= command.			*
 28042                                  ;									*
 28043                                  ; input :								*
 28044                                  ;	es:si -> parameters in command line.				*
 28045                                  ; output:								*
 28046                                  ;	set the variables fcbs,keep.					*
 28047                                  ;									*
 28048                                  ; subroutines to be called:						*
 28049                                  ;	sysinit_parse							*
 28050                                  ; logic:								*
 28051                                  ; {									*
 28052                                  ;	set di points to fcbs_parms;					*
 28053                                  ;	set dx,cx to 0; 						*
 28054                                  ;	while (end of command line)					*
 28055                                  ;	{ sysparse;							*
 28056                                  ;	  if (no error) then						*
 28057                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 28058                                  ;		   fcbs = result_val._$P_picked_val;			*
 28059                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 28060                                  ;		   keep = result_val._$P_picked_val;			*
 28061                                  ;	     }								*
 28062                                  ;	  else	/*error exit*/						*
 28063                                  ;	     error exit;						*
 28064                                  ;	};								*
 28065                                  ; };									*
 28066                                  ;************************************************************************
 28067                                  
 28068                                  tryx:
 28069 0000257C 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 28070                                          ;jne	short try1
 28071                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28072 0000257F 752F                    	jne	short tryy	; comment command
 28073                                  
 28074                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28075                                  ;;ifdef	MULTI_CONFIG
 28076                                  ;       call    query_user      ; query the user if config_cmd
 28077                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 28078                                  ;;endif
 28079                                  
 28080 00002581 BF[4D1D]                	mov	di,fcbs_parms
 28081 00002584 31C9                    	xor	cx,cx
 28082                                  	; 04/01/2023
 28083                                  	;mov	dx,cx
 28084                                  do98:
 28085 00002586 E8CF00                  	call	sysinit_parse
 28086                                          ; 04/01/2023
 28087                                  	;jnc	short if98	; parse error
 28088                                          ;call	badparm_p	;  and show messages and end the search loop.
 28089                                  	;jmp	short sr98
 28090                                  	;------------------------
 28091                                  	; 04/01/2023
 28092 00002589 724B                    	jc	short badparm_p_coff
 28093                                  if98:
 28094 0000258B 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28095 0000258E 7412                    	je	short en98	; then end the $endloop
 28096                                  
 28097                                  	;;mov	al,[cs:rv_dword]
 28098                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28099                                  	; 15/12/2022
 28100                                  	; ds = cs
 28101 00002590 A0[CA1C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28102 00002593 83F901                  	cmp	cx,1		; the first positional?
 28103 00002596 7505                    	jne	short if102
 28104                                  	;mov	[cs:p_fcbs],al
 28105                                  	; 15/12/2022
 28106 00002598 A2[821D]                	mov	[p_fcbs],al
 28107                                  	;jmp	short en102
 28108 0000259B EBE9                    	jmp	short do98
 28109                                  if102:
 28110                                  	;mov	[cs:p_keep],al
 28111                                  	; 15/12/2022
 28112 0000259D A2[831D]                	mov	[p_keep],al
 28113                                  en102:
 28114 000025A0 EBE4                    	jmp	short do98
 28115                                  en98:
 28116                                  	; 15/12/2022
 28117                                  	; ds = cs
 28118 000025A2 A0[821D]                	mov	al,[p_fcbs]
 28119 000025A5 A2[9E02]                	mov	[FCBS],al
 28120 000025A8 C606[9F02]00            	mov	byte [KEEP],0
 28121                                  	;mov	al,[cs:p_fcbs]	 ; M017
 28122                                  	;mov	[cs:FCBS],al	 ; M017
 28123                                  	;mov	byte [cs:KEEP],0 ; M017
 28124                                  sr98:
 28125 000025AD E9C6F9                  	jmp	coff
 28126                                  
 28127                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28128                                  ;-------------------------------------------------------------------------
 28129                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 28130                                  ;		line number
 28131                                  ;-------------------------------------------------------------------------
 28132                                  
 28133                                  tryy:
 28134 000025B0 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28135 000025B3 750B                    	jne	short try0
 28136                                  
 28137                                  donothing:
 28138                                  	; 15/12/2022
 28139                                  	; ds = cs
 28140 000025B5 FF0E[D603]              	dec	word [chrptr]
 28141 000025B9 FF06[D203]              	inc	word [count]
 28142                                  	; 02/11/2022
 28143                                  	;dec	word [cs:chrptr]
 28144                                  	;inc	word [cs:count]
 28145                                  
 28146 000025BD E9B6F9                  	jmp	coff
 28147                                  
 28148                                  ;------------------------------------------------------------------------
 28149                                  ; rem command
 28150                                  ;------------------------------------------------------------------------
 28151                                  
 28152                                  try0:				; do nothing with this line.
 28153 000025C0 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 28154 000025C3 74F0                    	je	short donothing
 28155                                  
 28156                                  ; 07/04/2019 - Retro DOS v4.0
 28157                                  
 28158                                  ;-----------------------------------------------------------------------
 28159                                  ; switches command
 28160                                  ;-----------------------------------------------------------------------
 28161                                  
 28162                                  ;***********************************************************************
 28163                                  ;								       *
 28164                                  ; function: parse the option switches specified.		       *
 28165                                  ; note - this command is intended for the future use also.	       *
 28166                                  ; when we need to set system data flag,use this command.	       *
 28167                                  ;								       *
 28168                                  ; input :							       *
 28169                                  ;	es:si -> parameters in command line.			       *
 28170                                  ; output:							       *
 28171                                  ;	p_swit_k set if /k option chosen.			       *
 28172                                  ;								       *
 28173                                  ; subroutines to be called:					       *
 28174                                  ;	sysinit_parse						       *
 28175                                  ; logic:							       *
 28176                                  ; {								       *
 28177                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 28178                                  ;	set dx,cx to 0; 					       *
 28179                                  ;	while (end of command line)				       *
 28180                                  ;	{ sysinit_parse;					       *
 28181                                  ;	  if (no error) then					       *
 28182                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 28183                                  ;		    p_swit_k = 1				       *
 28184                                  ;	       endif						       *
 28185                                  ;	  else {show error message;error exit}			       *
 28186                                  ;	};							       *
 28187                                  ; };								       *
 28188                                  ;								       *
 28189                                  ;***********************************************************************
 28190                                  
 28191                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 28192                                  
 28193                                  try1:
 28194 000025C5 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 28195 000025C8 7402                    	je	short do_try1	; switches= command entered?
 28196                                  skip_it5:
 28197                                  	;jmp	tryv
 28198                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28199 000025CA EB7A                    	jmp	tryz
 28200                                  
 28201                                  do_try1:
 28202                                  
 28203                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28204                                  ;;ifdef	MULTI_CONFIG
 28205                                  ;       call    query_user      ; query the user if config_cmd
 28206                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 28207                                  ;;endif
 28208                                  
 28209 000025CC BF[E71D]                	mov	di,swit_parms
 28210 000025CF 31C9                    	xor	cx,cx
 28211                                  	; 04/01/2023
 28212                                  	;mov	dx,cx
 28213                                  do110:
 28214 000025D1 E88400                  	call	sysinit_parse
 28215 000025D4 7306                    	jnc	short if110	; parse error
 28216                                  	;call	badparm_p	;  and show messages and end the search loop.
 28217                                  	;jmp	short sr110
 28218                                  	; -----------------------
 28219                                  	; 04/01/2023
 28220                                  badparm_p_coff:
 28221 000025D6 E8AA00                  	call	badparm_p
 28222 000025D9 E99AF9                  	jmp	coff
 28223                                  	;------------------------
 28224                                  if110:
 28225 000025DC 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28226 000025DF 742D                    	je	short en110	; then jmp to $endloop for semantic check
 28227                                  
 28228                                  	; 15/12/2022
 28229                                  	; ds = cs
 28230                                  	;;cmp	word [cs:result_val_swoff],swit_k
 28231                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28232 000025E1 813E[C81C][FF1D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28233 000025E7 7507                    	jne	short if115	;				;M059
 28234                                  	; 15/12/2022
 28235 000025E9 C606[1A1E]01            	mov	byte [p_swit_k],1
 28236                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 28237 000025EE EBE1                    	jmp	short do110
 28238                                  if115:	
 28239                                  	; 15/12/2022							;M059
 28240                                  	;;cmp	word [cs:result_val_swoff],swit_t
 28241                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 28242 000025F0 813E[C81C][0B1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 28243 000025F6 7507                    	jne	short if116					;M059 M063
 28244                                  	; 15/12/2022
 28245 000025F8 C606[1B1E]01            	mov	byte [p_swit_t],1
 28246                                  	;mov	byte [cs:p_swit_t],1				;M059
 28247 000025FD EBD2                    	jmp	short do110					;M059
 28248                                  if116:
 28249                                  	; 15/12/2022
 28250                                  	;;cmp	word [cs:result_val_swoff],swit_w
 28251                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 28252 000025FF 813E[C81C][171E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 28253 00002605 75CA                    	jne	short do110					;M063
 28254                                  	; 15/12/2022
 28255 00002607 C606[1C1E]01            	mov	byte [p_swit_w],1
 28256                                  	;mov	byte [cs:p_swit_w],1				;M063
 28257 0000260C EBC3                    	jmp	short do110					;M063
 28258                                  en110:
 28259                                  	; 15/12/2022
 28260                                  	; ds = cs
 28261 0000260E 803E[1A1E]01            	cmp	byte [p_swit_k],1
 28262                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 28263 00002613 1E                      	push	ds
 28264                                  	;;mov	ax,Bios_Data
 28265                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 28266                                  	; 21/10/2022
 28267 00002614 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 28268 00002617 8ED8                    	mov	ds,ax
 28269 00002619 750A                    	jne	short if117
 28270 0000261B C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 28271 00002620 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 28272                                  if117:
 28273                                  	; 15/12/2022
 28274                                  	; ds <> cs
 28275 00002625 2EA0[1B1E]              	mov	al,[cs:p_swit_t]				;M059
 28276 00002629 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 28277                                  
 28278 0000262C 2E803E[1C1E]00          	cmp	byte [cs:p_swit_w],0				;M063
 28279 00002632 740E                    	je	short skip_dos_flag				;M063
 28280 00002634 06                      	push	es
 28281 00002635 53                      	push	bx
 28282 00002636 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 28283 00002638 CD21                    	int	21h						;M063
 28284                                  			; DOS - 2+ internal - GET LIST OF LISTS
 28285                                  			; Return: ES:BX -> DOS list of lists
 28286                                  	;or	bytes [es:86h],2
 28287 0000263A 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 28288 00002640 5B                      	pop	bx
 28289 00002641 07                      	pop	es
 28290                                  skip_dos_flag:							;M063
 28291 00002642 1F                      	pop	ds
 28292                                  sr110:
 28293 00002643 E930F9                  	jmp	coff
 28294                                  
 28295                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28296                                  ;
 28297                                  ;tryv:
 28298                                  ;
 28299                                  ;;ifdef	MULTI_CONFIG
 28300                                  ;;------------------------------------------------------------------------
 28301                                  ;; set command (as in "set var=value<cr/lf>")
 28302                                  ;;------------------------------------------------------------------------
 28303                                  ;
 28304                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 28305                                  ;       jne	short tryn
 28306                                  ;       call    query_user      ; query the user if config_cmd
 28307                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 28308                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 28309                                  ;       jnc	short sr110	; no error
 28310                                  ;err:    
 28311                                  ;	call    error_line      ; whoops, display error in line XXX
 28312                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 28313                                  ;
 28314                                  ;;------------------------------------------------------------------------
 28315                                  ;; numlock command (as in "numlock=on|off")
 28316                                  ;;------------------------------------------------------------------------
 28317                                  ;tryn:
 28318                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 28319                                  ;       jne	short tryy            ;
 28320                                  ;       call    query_user      ; query thye user if config_cmd
 28321                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 28322                                  ;       call    set_numlock
 28323                                  ;       jc	short err
 28324                                  ;       jmp	short sr110	; all done
 28325                                  ;
 28326                                  ;;endif	;MULTI_CONFIG
 28327                                  
 28328                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28329                                  ;;-------------------------------------------------------------------------
 28330                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 28331                                  ;;		line number
 28332                                  ;;-------------------------------------------------------------------------
 28333                                  ;
 28334                                  ;tryy:
 28335                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 28336                                  ;	jne	short try0
 28337                                  ;donothing:
 28338                                  ;	dec	word [chrptr]
 28339                                  ;	inc	word [count]
 28340                                  ;	jmp	coff
 28341                                  ;
 28342                                  ;;------------------------------------------------------------------------
 28343                                  ;; rem command
 28344                                  ;;------------------------------------------------------------------------
 28345                                  ;
 28346                                  ;try0:				;do nothing with this line.
 28347                                  ;	cmp     ah,CONFIG_REM ; '0'
 28348                                  ;	je	short donothing
 28349                                  
 28350                                  ; 30/10/2022
 28351                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 28352                                  
 28353                                  ;------------------------------------------------------------------------
 28354                                  ; bogus command
 28355                                  ;------------------------------------------------------------------------
 28356                                  
 28357                                  tryz:
 28358 00002646 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 28359                                  	;je	short donothing
 28360                                  	; 02/11/2022
 28361 00002649 740A                    	je	short tryz_donothing
 28362                                  
 28363 0000264B FF0E[D603]              	dec	word [chrptr]
 28364 0000264F FF06[D203]              	inc	word [count]
 28365 00002653 EB22                    	jmp	short badop
 28366                                  
 28367                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 28368                                  tryz_donothing:
 28369 00002655 E95DFF                  	jmp	donothing
 28370                                  
 28371                                  ; 07/04/2019 - Retro DOS v4.0
 28372                                  
 28373                                  ;------------------------------------------------------------------------------
 28374                                  
 28375                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28376                                  ;
 28377                                  ;
 28378                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 28379                                  ;;
 28380                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 28381                                  ;
 28382                                  ;CheckProtmanArena:
 28383                                  ;	push	es
 28384                                  ;	mov	ax,[cs:area]	; get our arena header
 28385                                  ;	dec	ax
 28386                                  ;	mov	es,ax
 28387                                  ;	add	ax,[es:3]	; find end of arena
 28388                                  ;	inc	ax
 28389                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 28390                                  ;	ja	short CheckProtmanDone
 28391                                  ;
 28392                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 28393                                  ;CheckProtmanDone:
 28394                                  ;	pop	es
 28395                                  ;	retn
 28396                                  
 28397                                  ;------------------------------------------------------------------------------
 28398                                  
 28399                                  sysinit_parse:
 28400                                  
 28401                                  ;------------------------------------------------------------------------------
 28402                                  ;set up registers for sysparse
 28403                                  ;in)	es:si -> command line in confbot
 28404                                  ;	di -> offset of the parse control definition.
 28405                                  ;
 28406                                  ;out)	calls sysparse.
 28407                                  ;	carry will set if parse error.
 28408                                  ;	*** the caller should check the eol condition by looking at ax
 28409                                  ;	*** after each call.
 28410                                  ;	*** if no parameters are found,then ax will contain a error code.
 28411                                  ;	*** if the caller needs to look at the synomym@ of the result,
 28412                                  ;	***  the caller should use cs:@ instead of es:@.
 28413                                  ;	cx register should be set to 0 at the first time the caller calls this
 28414                                  ;	 procedure.
 28415                                  ;	ax - exit code
 28416                                  ;	bl - terminated delimeter code
 28417                                  ;	cx - new positional ordinal
 28418                                  ;	si - set to pase scanned operand
 28419                                  ;	dx - selected result buffer
 28420                                  ;------------------------------------------------------------------------------
 28421                                  
 28422                                  	; 24/10/2022
 28423 00002658 06                      	push	es			;save es,ds
 28424 00002659 1E                      	push	ds
 28425                                  
 28426                                  	; 09/09/2023
 28427                                  	; ds = cs
 28428 0000265A 8C06[1314]              	mov	[badparm_seg],es	;save the pointer to the parm
 28429 0000265E 8936[1114]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 28430                                  
 28431 00002662 06                      	push	es
 28432 00002663 1F                      	pop	ds			;now ds:si -> command line
 28433                                  
 28434 00002664 0E                      	push	cs
 28435 00002665 07                      	pop	es			;now es:di -> control definition
 28436                                  
 28437                                  	; 09/09/2023
 28438                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 28439                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 28440                                  
 28441                                  	;mov	dx,0
 28442                                  	; 04/01/2023
 28443 00002666 29D2                    	sub	dx,dx ; 0
 28444 00002668 E850EE                  	call	SysParse
 28445                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 28446                                  	; 06/09/2023
 28447 0000266B 21C0                    	and	ax,ax
 28448                                  
 28449                                  ;**cas note: when zero true after cmp, carry clear
 28450                                  
 28451                                  	;je	short ll4
 28452                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 28453                                  	; 12/12/2022
 28454 0000266D 7405                    	je	short en4 ; cf=0
 28455 0000266F 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 28456                                  	;jne	short if4
 28457                                  	; 12/12/2022
 28458 00002672 7400                    	je	short en4 ; cf=0
 28459                                  	; 06/09/2023
 28460                                  	; cf=1
 28461                                  
 28462                                  ; 12/12/2022
 28463                                  ;ll4:
 28464                                  ;	; 12/12/2022
 28465                                  ;	; cf=0
 28466                                  ;	;clc
 28467                                  ;	jmp	short en4
 28468                                  
 28469                                  if4:
 28470                                  	; 24/10/2022
 28471                                  	; 06/09/2023 (cf=1)
 28472                                  	;stc
 28473                                  en4:
 28474 00002674 1F                      	pop	ds
 28475 00002675 07                      	pop	es
 28476 00002676 C3                      	retn
 28477                                  
 28478                                  ; 11/12/2022
 28479                                  %if 0
 28480                                  
 28481                                  ;----------------------------------------------------------------------------
 28482                                  ;
 28483                                  ; procedure : badop_p
 28484                                  ;
 28485                                  ;             same thing as badop,but will make sure to set ds register back
 28486                                  ;             to sysinitseg and return back to the caller.
 28487                                  ;
 28488                                  ;----------------------------------------------------------------------------
 28489                                  
 28490                                  badop_p:
 28491                                  	push	cs
 28492                                  	pop	ds		;set ds to configsys seg.
 28493                                  	mov	dx,badopm
 28494                                  	call	print
 28495                                          ;call	error_line
 28496                                  	;retn
 28497                                  	; 11/12/2022
 28498                                  	jmp	error_line
 28499                                  
 28500                                  %endif
 28501                                  
 28502                                  ;----------------------------------------------------------------------------
 28503                                  ;
 28504                                  ; label : badop
 28505                                  ;
 28506                                  ;----------------------------------------------------------------------------
 28507                                  
 28508                                  badop:	
 28509 00002677 BA[3A36]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 28510 0000267A E8100C                  	call	print
 28511 0000267D E82B00                  	call	error_line	;show "error in config.sys ..." .
 28512 00002680 E9F3F8                  	jmp	coff
 28513                                  
 28514                                  ;----------------------------------------------------------------------------
 28515                                  ;
 28516                                  ; procedure : badparm_p
 28517                                  ;
 28518                                  ;             show "bad command or parameters - xxxxxx"
 28519                                  ;             in badparm_seg,badparm_off -> xxxxx
 28520                                  ;
 28521                                  ;----------------------------------------------------------------------------
 28522                                  
 28523                                  	; 24/10/2022
 28524                                  badparm_p:
 28525                                  	; 11/12/2022
 28526                                  	; ds = cs
 28527                                  	; 11/12/2022
 28528                                  	;push	ds ; *
 28529 00002683 52                      	push	dx
 28530 00002684 56                      	push	si
 28531                                  
 28532                                  	; 11/12/2022
 28533                                  	; ds = cs
 28534                                  	;push	cs
 28535                                  	;pop	ds
 28536                                  
 28537 00002685 BA[6136]                	mov	dx,badparm
 28538 00002688 E8020C                  	call	print			; "bad command or parameters - "
 28539 0000268B C536[1114]              	lds	si,[badparm_ptr]
 28540                                  
 28541                                  ;	print "xxxx" until cr.
 28542                                  
 28543                                  do1:
 28544 0000268F 8A14                    	mov	dl,[si]			; get next character
 28545 00002691 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 28546 00002694 7407                    	je	short en1		; exit loop if so
 28547                                  
 28548 00002696 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 28549 00002698 CD21                    	int	21h			; display character
 28550 0000269A 46                      	inc	si			; next character
 28551 0000269B EBF2                    	jmp	short do1
 28552                                  en1:
 28553 0000269D 0E                      	push	cs
 28554 0000269E 1F                      	pop	ds
 28555                                  
 28556 0000269F BA[5E36]                	mov	dx,crlfm
 28557 000026A2 E8E80B                  	call	print
 28558 000026A5 E80300                  	call	error_line
 28559                                  
 28560 000026A8 5E                      	pop	si
 28561 000026A9 5A                      	pop	dx
 28562                                  	; 11/12/2022
 28563                                  	;pop	ds ; *
 28564                                  badparmp_ret:
 28565 000026AA C3                      	retn
 28566                                  
 28567                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 28568                                  %if 0
 28569                                  
 28570                                  ;----------------------------------------------------------------------------
 28571                                  ;
 28572                                  ; procedure : getchr
 28573                                  ;
 28574                                  ;----------------------------------------------------------------------------
 28575                                  
 28576                                  	; 24/10/2022
 28577                                  getchr:
 28578                                  	; 12/12/2022
 28579                                  	;push	cx
 28580                                  	;mov	cx,[count]
 28581                                  	;jcxz	nochar
 28582                                  	; 12/12/2022
 28583                                  	cmp	word [count],1 
 28584                                  	jb	short nochar ; cf=1 ([count] = 0)
 28585                                  	
 28586                                  	mov	si,[chrptr]
 28587                                  	mov	al,[es:si]
 28588                                  	dec	word [count]
 28589                                  	inc	word [chrptr]
 28590                                  	; 12/12/202
 28591                                  	; cf=0
 28592                                  	;clc
 28593                                  ;get_ret:
 28594                                  	;pop	cx
 28595                                  	;retn
 28596                                  nochar: 
 28597                                  	; 12/12/2022
 28598                                  	; cf=1
 28599                                  	;stc
 28600                                  	;jmp	short get_ret
 28601                                  	
 28602                                  	retn
 28603                                  %endif
 28604                                  
 28605                                  ; 11/12/2022
 28606                                  %if 0
 28607                                  
 28608                                  ;----------------------------------------------------------------------------
 28609                                  ;
 28610                                  ; procedure : incorrect_order
 28611                                  ;
 28612                                  ;             show "incorrect order in config.sys ..." message.
 28613                                  ;
 28614                                  ;----------------------------------------------------------------------------
 28615                                  
 28616                                  incorrect_order:
 28617                                  	mov	dx,badorder
 28618                                  	call	print
 28619                                  	call	showlinenum
 28620                                  	retn
 28621                                  
 28622                                  %endif
 28623                                  
 28624                                  ;----------------------------------------------------------------------------
 28625                                  ;
 28626                                  ; procedure : error_line
 28627                                  ;
 28628                                  ;             show "error in config.sys ..." message.
 28629                                  ;
 28630                                  ;----------------------------------------------------------------------------
 28631                                  
 28632                                  	; 11/12/2022
 28633                                  	; 24/10/2022
 28634                                  error_line:
 28635                                  	; 11/12/2022
 28636                                  	; ds = cs
 28637                                  	;push	cs
 28638                                  	;pop	ds
 28639                                  
 28640 000026AB BA[9637]                	mov	dx,errorcmd
 28641 000026AE E8DC0B                  	call	print
 28642                                  	;call	showlinenum
 28643                                  	;retn
 28644                                  	; 11/12/2022
 28645                                  	;jmp	short shortlinemum
 28646                                  
 28647                                  ;----------------------------------------------------------------------------
 28648                                  ;
 28649                                  ; procedure : showlinenum
 28650                                  ;
 28651                                  ; convert the binary linecount to decimal ascii string in showcount
 28652                                  ; and display showcount at the current curser position.
 28653                                  ; in.) linecount
 28654                                  ;
 28655                                  ; out) the number is printed.
 28656                                  ;
 28657                                  ;----------------------------------------------------------------------------
 28658                                  
 28659                                  	; 11/12/2022
 28660                                  	; ds = cs
 28661                                  	; 24/10/2022
 28662                                  showlinenum:
 28663 000026B1 06                      	push	es
 28664                                  	; 11/12/2022
 28665                                  	;push	ds
 28666 000026B2 57                      	push	di
 28667                                  
 28668 000026B3 0E                      	push	cs
 28669 000026B4 07                      	pop	es		; es=cs
 28670                                  
 28671                                  	; 11/12/2022
 28672                                  	;push	cs
 28673                                  	;pop	ds
 28674                                  
 28675 000026B5 BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28676 000026B8 B90A00                  	mov	cx,10		; decimal divide factor
 28677                                  	;mov	ax,[cs:linecount]
 28678                                  	; 11/12/2022
 28679 000026BB A1[2B03]                	mov	ax,[linecount]
 28680                                  sln_loop:
 28681                                  	; 11/12/2022
 28682 000026BE 39C8                    	cmp	ax,cx ; < 10 ?
 28683                                  	;cmp	ax,10		; < 10?
 28684 000026C0 720C                    	jb	short sln_last
 28685                                  
 28686 000026C2 31D2                    	xor	dx,dx
 28687 000026C4 F7F1                    	div	cx	; cx = 10
 28688 000026C6 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28689 000026C9 8815                    	mov	[di],dl
 28690 000026CB 4F                      	dec	di
 28691 000026CC EBF0                    	jmp	short sln_loop
 28692                                  
 28693                                  sln_last:
 28694 000026CE 0C30                    	or	al,30h	; "0"
 28695 000026D0 8805                    	mov	[di],al
 28696 000026D2 89FA                    	mov	dx,di
 28697 000026D4 E8B60B                  	call	print		; show it.
 28698 000026D7 5F                      	pop	di
 28699                                  	; 11/12/2022
 28700                                  	;pop	ds
 28701 000026D8 07                      	pop	es
 28702 000026D9 C3                      	retn
 28703                                  
 28704                                  ; 07/04/2019 - Retro DOS v4.0
 28705                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28706                                  
 28707                                  ;----------------------------------------------------------------------------
 28708                                  ;
 28709                                  ; procedure : ProcDOS
 28710                                  ;
 28711                                  ;	Process the result of DOS= parsing
 28712                                  ;
 28713                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28714                                  ;				= 2 for DOS=LOW
 28715                                  ;				= 3 for DOS=UMB
 28716                                  ;				= 4 for DOS=NOUMB
 28717                                  ;----------------------------------------------------------------------------
 28718                                  
 28719                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28720                                  	; (SYTSINIT:2AB5h)
 28721                                  ProcDOS:
 28722                                  	; 01/01/2023
 28723                                  	; ds = cs
 28724 000026DA 30E4                    	xor	ah,ah
 28725                                  	;;mov	al,[cs:result_val_itag]
 28726                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28727                                  	; 04/01/2023
 28728 000026DC A0[C71C]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28729 000026DF 48                      	dec	ax
 28730 000026E0 7415                    	jz	short pd_hi
 28731 000026E2 48                      	dec	ax
 28732 000026E3 740E                    	jz	short pd_lo
 28733 000026E5 48                      	dec	ax
 28734 000026E6 7405                    	jz	short pd_umb
 28735                                  	;;mov	byte [cs:DevUMB],0
 28736                                  	; 18/12/2022
 28737                                  	;mov	byte [cs:DevUMB],ah ; 0
 28738                                  	; 01/01/2023
 28739 000026E8 8826[6E1E]              	mov	byte [DevUMB],ah ; 0
 28740 000026EC C3                      	retn
 28741                                  pd_umb:
 28742                                  	; 04/01/2023
 28743 000026ED C606[6E1E]FF            	mov	byte [DevUMB],0FFh
 28744                                  	;mov	byte [cs:DevUMB],0FFh
 28745 000026F2 C3                      	retn
 28746                                  pd_lo:
 28747                                  	; 04/01/2023
 28748 000026F3 A2[6A02]                	mov	[runhigh],al ; 0
 28749                                  	; 18/12/2022
 28750                                  	;mov	[cs:runhigh],al ; 0
 28751                                  	;;mov	byte [cs:runhigh],0
 28752 000026F6 C3                      	retn
 28753                                  pd_hi:
 28754                                  	; 04/01/2023
 28755 000026F7 C606[6A02]FF            	mov	byte [runhigh],0FFh
 28756                                  	;mov	byte [cs:runhigh],0FFh
 28757                                  limx:	; 11/12/2022
 28758 000026FC C3                      	retn
 28759                                  
 28760                                  ;----------------------------------------------------------------------------
 28761                                  ;
 28762                                  ; procedure : LieInt12Mem
 28763                                  ;
 28764                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28765                                  ;		alloclim set to the limit of low memory.
 28766                                  ;
 28767                                  ;	Output : none
 28768                                  ;
 28769                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28770                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28771                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28772                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28773                                  ;	converted into Ks and stored in 40:13h
 28774                                  ;
 28775                                  ;----------------------------------------------------------------------------
 28776                                  
 28777                                  LieInt12Mem:
 28778                                  	; 11/12/2022
 28779                                  	; ds = cs
 28780 000026FD A1[A302]                	mov	ax,[ALLOCLIM]
 28781                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28782                                  					; assuming that it is 3Com
 28783 00002700 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28784 00002703 740A                    	jz	short lim_set		; yes, lie to him differently
 28785                                  	; 13/05/2019
 28786                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28787                                  	;je	short limx		; no, don't lie
 28788                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28789                                  	; 11/12/2022
 28790                                  	; ds = cs
 28791 00002705 803E[7D1E]00            	cmp	byte [DeviceHi],0
 28792 0000270A 74F0                    	je	short limx
 28793 0000270C A1[641E]                	mov	ax,[DevLoadEnd]
 28794                                  lim_set:
 28795                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28796                                  	; 11/12/2022
 28797                                  	;call	SetInt12Mem
 28798                                  ;limx:
 28799                                  	;retn
 28800                                  	
 28801                                  	;jmp	short SetInt12Mem 
 28802                                  
 28803                                  ;----------------------------------------------------------------------------
 28804                                  ;
 28805                                  ; procedure : SetInt12Mem
 28806                                  ;
 28807                                  ;	Input : AX = Memory size to be set (in paras)
 28808                                  ;	Output : none
 28809                                  ;
 28810                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28811                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28812                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28813                                  ;	restoring the value of 40:13
 28814                                  ;
 28815                                  ;----------------------------------------------------------------------------
 28816                                  
 28817                                  	; 01/11/2022
 28818                                  SetInt12Mem:
 28819 0000270F 1E                      	push	ds
 28820 00002710 BB4000                  	mov	bx,40h
 28821 00002713 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28822 00002715 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28823 00002719 2E891E[811E]            	mov	[cs:OldInt12Mem],bx	; save it
 28824 0000271E B106                    	mov	cl,6
 28825 00002720 D3E8                    	shr	ax,cl			; convert paras into Ks
 28826 00002722 A31300                  	mov	[13h],ax		; Lie
 28827 00002725 2EC606[801E]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28828 0000272B 1F                      	pop	ds
 28829                                  ;limx:
 28830 0000272C C3                      	retn
 28831                                  
 28832                                  ;----------------------------------------------------------------------------
 28833                                  ;
 28834                                  ; procedure : TrueInt12Mem
 28835                                  ;
 28836                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28837                                  ;			  = 0ffh if we are lying
 28838                                  ;		OldInt12Mem = Saved value of 40:13h
 28839                                  ;
 28840                                  ;	Output : none
 28841                                  ;
 28842                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28843                                  ;	and resets the flag which indicates that we were lying
 28844                                  ;
 28845                                  ;----------------------------------------------------------------------------
 28846                                  
 28847                                  TrueInt12Mem:
 28848                                  	; 11/12/2022
 28849                                  	; ds = cs
 28850 0000272D 803E[801E]00            	cmp	byte [Int12Lied],0
 28851                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28852                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28853                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28854 00002732 7412                    	je	short timx		; no, we weren't
 28855                                  	; 18/12/2022
 28856 00002734 B84000                  	mov	ax,40h
 28857 00002737 8826[801E]              	mov	[Int12Lied],ah ; 0
 28858                                  	;mov	byte [Int12Lied],0
 28859                                  	;mov	byte [cs:Int12Lied],0
 28860 0000273B 1E                      	push	ds
 28861                                  	;mov	ax,40h
 28862 0000273C 8ED8                    	mov	ds,ax
 28863 0000273E 2EA1[811E]              	mov	ax,[cs:OldInt12Mem]
 28864 00002742 A31300                  	mov	[13h],ax		; restore INT 12 memory
 28865 00002745 1F                      	pop	ds
 28866                                  timx:
 28867 00002746 C3                      	retn
 28868                                  
 28869                                  ;----------------------------------------------------------------------------
 28870                                  ;
 28871                                  ; procedure : IsIt3Com?
 28872                                  ;
 28873                                  ;	Input : DevEntry = Seg:0 of device driver
 28874                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28875                                  ;		 else Zero flag is reset
 28876                                  ;
 28877                                  ;----------------------------------------------------------------------------
 28878                                  
 28879                                  IsIt3Com:
 28880                                  	; 11/12/2022
 28881                                  	; ds = cs
 28882 00002747 1E                      	push	ds
 28883 00002748 06                      	push	es
 28884 00002749 56                      	push	si
 28885                                  	; 11/12/2022
 28886 0000274A C536[661E]              	lds	si,[DevEntry]
 28887                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28888 0000274E 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28889 00002751 0E                      	push	cs
 28890 00002752 07                      	pop	es
 28891 00002753 BF[831E]                	mov	di,ThreeComName
 28892 00002756 B90800                  	mov	cx,8			; name length
 28893 00002759 F3A6                    	rep	cmpsb
 28894 0000275B 5E                      	pop	si
 28895 0000275C 07                      	pop	es
 28896 0000275D 1F                      	pop	ds
 28897 0000275E C3                      	retn
 28898                                  
 28899                                  ;M020 : BEGIN
 28900                                  ;----------------------------------------------------------------------------
 28901                                  
 28902                                  UpdatePDB:
 28903 0000275F 1E                      	push	ds
 28904 00002760 B462                    	mov	ah,62h
 28905 00002762 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28906 00002764 8EDB                    	mov	ds,bx
 28907 00002766 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28908                                  	;mov	[2],bx
 28909 0000276B 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28910 0000276F 1F                      	pop	ds
 28911 00002770 C3                      	retn
 28912                                  
 28913                                  ; M020 : END
 28914                                  
 28915                                  ;----------------------------------------------------------------------------
 28916                                  
 28917                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28918                                  
 28919                                  %if 0
 28920                                  
 28921                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28922                                  ;include highexit.inc	; umb's, etc
 28923                                  
 28924                                  ; ----------------------------------------------------------------------
 28925                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28926                                  ; ----------------------------------------------------------------------
 28927                                  ; 07/04/2019 - Retro DOS v4.0
 28928                                  
 28929                                  ;******************************************************************************
 28930                                  ;
 28931                                  ; This file contains routines needed to parse and implement user-given
 28932                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28933                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28934                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28935                                  ;
 28936                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28937                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28938                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28939                                  ;    DH/LH module opts
 28940                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28941                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28942                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28943                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28944                                  ; available during the load.
 28945                                  ;
 28946                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28947                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28948                                  ; upper-memory block which was not specified by the user... in addition, if
 28949                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28950                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28951                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28952                                  ; free any UMBs so allocated.
 28953                                  ;
 28954                                  ; When a device driver loads, there is the additional problem of allocating its
 28955                                  ; initial load site; this should be restricted to the first UMB specified on
 28956                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28957                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28958                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28959                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28960                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28961                                  ;
 28962                                  ;******************************************************************************
 28963                                  
 28964                                  SWTCH	equ	'/'		; Switch character
 28965                                  
 28966                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28967                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28968                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28969                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28970                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28971                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28972                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28973                                  
 28974                                  CR	equ	0Dh		; Carriage Return
 28975                                  LF	equ	0Ah		; Line Feed
 28976                                  TAB	equ	09h		; Tab character (^I)
 28977                                  
 28978                                  ; -----------------------------------------------------------------------------
 28979                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28980                                  ; -----------------------------------------------------------------------------
 28981                                  ; ENTRY:       None
 28982                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28983                                  ; ERROR EXIT:  None
 28984                                  ; USES:        Flags, variables in highvar.inc
 28985                                  ; -----------------------------------------------------------------------------
 28986                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28987                                  ; are largely ignored, but it is initialized nonetheless.
 28988                                  ; -----------------------------------------------------------------------------
 28989                                  
 28990                                  InitVar:
 28991                                  	;pushreg <ax, cx, di, es>
 28992                                  	push	ax
 28993                                  	push	cx
 28994                                  	push	di
 28995                                  	push	es
 28996                                  
 28997                                  	;dataseg es			;Point ES into appropriate data segment
 28998                                  	push	cs
 28999                                  	pop	es
 29000                                  
 29001                                  	xor	ax,ax
 29002                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 29003                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 29004                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 29005                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 29006                                  					;Later is the # of the 1st spec'd UMB
 29007                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 29008                                  
 29009                                  	cld
 29010                                  
 29011                                  	mov	cx,MAXUMB ; 16		;For each entry
 29012                                  	mov	di,UmbUsed		;on the UmbUsed array,
 29013                                  	rep	stosb			;	Store 0
 29014                                  
 29015                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 29016                                  	mov	di,UmbSize		;on the UmbSize array,
 29017                                  	rep	stosw			;	Store 0
 29018                                  
 29019                                  	;normseg es			; Return ES
 29020                                  
 29021                                  	;popreg	<es, di, cx, ax>
 29022                                  	pop	es
 29023                                  	pop	di
 29024                                  	pop	cx
 29025                                  	pop	ax	 	
 29026                                  
 29027                                  	retn
 29028                                  
 29029                                  ; -----------------------------------------------------------------------------
 29030                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 29031                                  ; -----------------------------------------------------------------------------
 29032                                  ; ENTRY   : None
 29033                                  ; EXIT    : None
 29034                                  ; ERROR   : None
 29035                                  ; USES    : Flags, fm_umb, fm_strat
 29036                                  ; -----------------------------------------------------------------------------
 29037                                  
 29038                                  FixMem:
 29039                                  	push	ax
 29040                                  	push	bx
 29041                                  	push	cx
 29042                                  	push	dx
 29043                                  	push	es
 29044                                  
 29045                                  	call	fm_link		; Link in UMBs
 29046                                  
 29047                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 29048                                  	jc	short fmX	; (if couldn't get it, leave now).
 29049                                  
 29050                                  	mov	es,ax		; It returns in AX, so move it to ES.
 29051                                  
 29052                                  ; - Walk MCB Chain ------------------------------------------------------------
 29053                                  
 29054                                  	xor	dx,dx		; We're keeping the address of the last MCB
 29055                                  	mov 	cx,dx		; in CX... and the last owner
 29056                                  	inc	dx		; in dx as we go through the loop:
 29057                                  
 29058                                  ; ------------------------------------------
 29059                                  ; FM10--DX  = last MCB's owner's PSP address
 29060                                  ;       CX  = last MCB's address (segment)
 29061                                  ; ------------------------------------------
 29062                                  
 29063                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 29064                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 29065                                  	or	bx,dx			; dx was owner of previous MCB
 29066                                  	jnz	short fm30		; If not both zero, don't cat.
 29067                                  
 29068                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 29069                                  
 29070                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 29071                                  	mov	es,cx			; Go back to prev MCB's address
 29072                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 29073                                  
 29074                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 29075                                  	;add	bx,1			; And add one for the header
 29076                                  	; 14/08/2023
 29077                                  	inc	bx
 29078                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 29079                                  
 29080                                  	; ---------------------------------------------------------------------
 29081                                  
 29082                                  fm30:	mov	cx,es			; Put this address on the stack
 29083                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 29084                                  
 29085                                  	mov	bx,es			; Move to the next MCB
 29086                                  	add	bx,[es:ARENA.SIZE]
 29087                                  	inc	bx
 29088                                  	mov	es,bx
 29089                                  
 29090                                  	;cmp	al,'Z'
 29091                                  	cmp	al,arena_signature_end
 29092                                  	jne	short fm10		; If signature != 'Z', there are more.
 29093                                  fmX:	
 29094                                  	call	fm_unlink		; Unlink UMBs
 29095                                  
 29096                                  	pop	es
 29097                                  	pop	dx
 29098                                  	pop	cx
 29099                                  	pop	bx
 29100                                  	pop	ax
 29101                                  
 29102                                  	retn
 29103                                  
 29104                                  ; -----------------------------------------------------------------------------
 29105                                  ;*** fm_link - links UMBs not already linked in
 29106                                  ; -----------------------------------------------------------------------------
 29107                                  ; ENTRY:    None
 29108                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 29109                                  ; ERROR:    None
 29110                                  ; USES:     AX, BX, fm_umb
 29111                                  ; -----------------------------------------------------------------------------
 29112                                  
 29113                                  fm_link:
 29114                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 29115                                  	int	21h			; Current link-state is now in al
 29116                                  
 29117                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 29118                                  	;
 29119                                  	;push	es
 29120                                  	;push	cs
 29121                                  	;pop	es
 29122                                  	;mov	[es:fm_umb],al
 29123                                  	;pop	es
 29124                                  	
 29125                                  	mov	[cs:fm_umb],al
 29126                                  
 29127                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29128                                  	mov	bx,1
 29129                                  	int	21h
 29130                                  	retn
 29131                                  
 29132                                  ; -----------------------------------------------------------------------------
 29133                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 29134                                  ; -----------------------------------------------------------------------------
 29135                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 29136                                  ; EXIT:     None
 29137                                  ; ERROR:    None
 29138                                  ; USES:     AX, BX
 29139                                  ; -----------------------------------------------------------------------------
 29140                                  
 29141                                  fm_unlink:
 29142                                  	xor	bx,bx
 29143                                  	
 29144                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 29145                                  	;
 29146                                  	;push	ds
 29147                                  	;push	cs
 29148                                  	;pop	ds
 29149                                  	;mov	bl,[fm_umb]	
 29150                                  	;pop	ds
 29151                                  	
 29152                                  	mov	bl,[cs:fm_umb]
 29153                                  
 29154                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29155                                  	int	21h			; so just use that, and call int 21h
 29156                                  	retn
 29157                                  
 29158                                  ; 08/04/2019 - Retro DOS v4.0
 29159                                  
 29160                                  ; -----------------------------------------------------------------------------
 29161                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 29162                                  ; laid out in highvar.inc
 29163                                  ; -----------------------------------------------------------------------------
 29164                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 29165                                  ; EXIT:     ES:SI points to first character in child program name
 29166                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 29167                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 29168                                  ; -----------------------------------------------------------------------------
 29169                                  ; Error codes (in AX if carry set on return):
 29170                                  ;
 29171                                  PV_InvArg	equ	1	; Invalid argument passed
 29172                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 29173                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 29174                                  ;
 29175                                  ; This routine exects ES:SI to point to a string much like the following:
 29176                                  ;    "/S/L:1,200;2 module options"
 29177                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 29178                                  ; required, though that's what this routine is supposed to parse.
 29179                                  ;
 29180                                  optS		equ	'S'	; /S
 29181                                  optL		equ	'L'	; /L:...
 29182                                  ;
 29183                                  ; -----------------------------------------------------------------------------
 29184                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 29185                                  ; a command-line for spawning a child process. For a typical LH command, say,
 29186                                  ;     lh /l:1,1000;2 print/d:lpt2
 29187                                  ; the arguments would look like (one per line):
 29188                                  ;     lh
 29189                                  ;     /l
 29190                                  ;     1
 29191                                  ;     1000
 29192                                  ;     2
 29193                                  ;     print
 29194                                  ;     /d
 29195                                  ;     :lpt2
 29196                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 29197                                  ; arg was the filename. So, inside this routine, we keep a running counter
 29198                                  ; of the number of arguments LH will need to skip in order to get to the
 29199                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 29200                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 29201                                  ; for:
 29202                                  ;    Each /L
 29203                                  ;    Each /S (there should be only one)
 29204                                  ;    Each UMB number (they follow ":" or ";")
 29205                                  ;    Each UMB size   (they follow ",")
 29206                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 29207                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 29208                                  ; -----------------------------------------------------------------------------
 29209                                  
 29210                                  ParseVar:
 29211                                  	;pushreg <di, ds, es>
 29212                                  	push	di
 29213                                  	push	ds
 29214                                  	push	es
 29215                                  
 29216                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 29217                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 29218                                  	cld
 29219                                  
 29220                                  ; ------------------------------------------------
 29221                                  ; PV10--ES:SI = any whitespace on the command-line
 29222                                  ; ------------------------------------------------
 29223                                  
 29224                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 29225                                  	call	isWhite
 29226                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 29227                                  	;cmp	al,'/'
 29228                                  	cmp	al,SWTCH
 29229                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 29230                                  
 29231                                  	dec	si		; Backup--it's now "odule options", and we need
 29232                                  	clc			; that "m" we just read (or whatever it is).
 29233                                  	jmp	short pvX	; Then return with carry clear == we're done.
 29234                                  
 29235                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 29236                                  	;toUpper al		; So we make it upper-case, and...
 29237                                  	and	al,0DFh
 29238                                  	;cmp	al,'S'
 29239                                  	cmp	al,optS		; just read 'S'?
 29240                                  	jne	short pv30
 29241                                  
 29242                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 29243                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29244                                  
 29245                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 29246                                  	;
 29247                                  	;push	es
 29248                                  	;push	cs
 29249                                  	;pop	es
 29250                                  	;mov	[es:fUmbTiny],1	
 29251                                  	;pop	es
 29252                                  
 29253                                  	mov	byte [cs:fUmbTiny],1
 29254                                  
 29255                                  	jmp	short pv10	; possibly even "/L...".
 29256                                  
 29257                                  pv30:	;cmp	al,'L'
 29258                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 29259                                  	jne	short pvE1		; switch!
 29260                                  
 29261                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 29262                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29263                                  
 29264                                  	call	parseL
 29265                                  	jnc	short pv10	; If no carry, go back and look for more
 29266                                  
 29267                                  	dec	si		; Else, back up and exit.
 29268                                  	jmp	short pvErr	; AX has already been set by parseL
 29269                                  
 29270                                  pvE1:	;mov	ax,3
 29271                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 29272                                  pvErr:	dec	si
 29273                                  	dec	si
 29274                                  	stc
 29275                                  pvX:	;popreg	<es, ds, di>
 29276                                  	pop	es
 29277                                  	pop	ds
 29278                                  	pop	di
 29279                                  	retn
 29280                                  
 29281                                  ; -----------------------------------------------------------------------------
 29282                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 29283                                  ; -----------------------------------------------------------------------------
 29284                                  ; ENTRY:    ES:SI points to colon
 29285                                  ; EXIT:     ES:SI points to first character not parsed
 29286                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 29287                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 29288                                  ; -----------------------------------------------------------------------------
 29289                                  ; If the string here is terminated with anything other than whitespace or a
 29290                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 29291                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 29292                                  ; makes sure the app /L: is reported as being the culprit.
 29293                                  ; -----------------------------------------------------------------------------
 29294                                  
 29295                                  parseL:
 29296                                  	lodsb
 29297                                  	cmp	al,':'		; Make sure they did /L:
 29298                                  	jne	short plE1	; If they didn't, return with carry set.
 29299                                  
 29300                                  ; ------------------------------------------
 29301                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 29302                                  ; ------------------------------------------
 29303                                  
 29304                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 29305                                  	jc	short plE2	; And error if it's a bad number.
 29306                                  	call	convUMB		; Convert any address to a UMB number
 29307                                  
 29308                                  	mov	cl,al		; Remember the UMB number
 29309                                  	call	stowUMB		; Mark this UMB # as used;
 29310                                  	jc	short plE2	; If it was already marked, it'll error
 29311                                  
 29312                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 29313                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29314                                  
 29315                                  	lodsb
 29316                                  	cmp	al,';'		; Did "umb;" ?
 29317                                  	je	short pl10	; Yep: go back and get another UMB.
 29318                                  
 29319                                  	call	isWhite		; Did "umb " ?
 29320                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 29321                                  
 29322                                  	call	isEOL		; Did "umb" ?
 29323                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 29324                                  
 29325                                  	;cmp	al,'/'
 29326                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 29327                                  	je	short plSwX	; If so, back up ES:SI one character and return
 29328                                  
 29329                                  	cmp	al,','		; Did "umb," ?
 29330                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 29331                                  
 29332                                  ; --- Read a size -------------------------------------------------------------
 29333                                  
 29334                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 29335                                  	jc	short plE1	; And error if it's a bad size.
 29336                                  
 29337                                  	call	toPara		; Convert from bytes to paragraphs
 29338                                  
 29339                                  	call	stowSiz		; CL still has the UMB number for this routine
 29340                                  
 29341                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 29342                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29343                                  
 29344                                  	lodsb
 29345                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 29346                                  	je	short pl10	;
 29347                                  
 29348                                  	call	isWhite		; Did it end with whitespace?
 29349                                  	jz	short plX	; If so, we're done here--go back.
 29350                                  
 29351                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 29352                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 29353                                  
 29354                                  	;cmp	al,'/'
 29355                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 29356                                  	je	short plSwX	; If so, again, we're done here.
 29357                                  plE1:	
 29358                                  	;mov	ax,1
 29359                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 29360                                  	dec	si
 29361                                  	stc
 29362                                  	retn
 29363                                  
 29364                                  plE2:	;mov	ax,2
 29365                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 29366                                  	; 12/12/2022
 29367                                  	; cf=1
 29368                                  	;stc
 29369                                  	retn
 29370                                  plSwX:	
 29371                                  	dec	si		; If we hit a '/' character, back up one char
 29372                                  				; so the whitespace checker will see it too.
 29373                                  plX:	; 12/12/2022
 29374                                  	; cf=0
 29375                                  	;clc			; Then just return with carry clear, so
 29376                                  	retn			; ParseVar will go about its business.
 29377                                  
 29378                                  ; -----------------------------------------------------------------------------
 29379                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 29380                                  ; -----------------------------------------------------------------------------
 29381                                  ; ENTRY:    None
 29382                                  ; EXIT:     None
 29383                                  ; ERROR:    None
 29384                                  ; USES:     fm_argc, flags
 29385                                  ; -----------------------------------------------------------------------------
 29386                                  
 29387                                  ;incArgc:
 29388                                  	;push	ax
 29389                                  
 29390                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 29391                                  
 29392                                  	;mov	al,[cs:fm_argc]
 29393                                  
 29394                                  	;inc	al		; Increment it,
 29395                                  
 29396                                  	;;putdata fm_argc, al	; And store it right back.
 29397                                  
 29398                                  	;mov	[cs:fm_argc],al
 29399                                  
 29400                                  	;pop	ax
 29401                                  	;retn
 29402                                  
 29403                                  ; -----------------------------------------------------------------------------
 29404                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 29405                                  ; -----------------------------------------------------------------------------
 29406                                  ; ENTRY:    AL contains character to test
 29407                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 29408                                  ; ERROR:    None
 29409                                  ; USES:     ZF
 29410                                  ; -----------------------------------------------------------------------------
 29411                                  
 29412                                  isEOL:
 29413                                  	cmp	al,0		; Null-terminator
 29414                                  	je	short ieX
 29415                                  	cmp	al,CR ; 0Dh	; Carriage Return
 29416                                  	je	short ieX
 29417                                  	cmp	al,LF ; 0Ah	; LineFeed
 29418                                  ieX:	
 29419                                  	retn
 29420                                  
 29421                                  ; -----------------------------------------------------------------------------
 29422                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 29423                                  ; -----------------------------------------------------------------------------
 29424                                  ; ENTRY:    AL contains character to test
 29425                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 29426                                  ; ERROR:    None
 29427                                  ; USES:     ZF
 29428                                  ; -----------------------------------------------------------------------------
 29429                                  
 29430                                  isWhite:
 29431                                  	cmp	al,' '		; Space
 29432                                  	je	short iwX
 29433                                  	cmp	al,'='		; Equals (treat as whitespace)
 29434                                  	je	short iwX
 29435                                  	cmp	al,tab ; 9	; Tab
 29436                                  iwX:	
 29437                                  	retn
 29438                                  
 29439                                  ; -----------------------------------------------------------------------------
 29440                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 29441                                  ; -----------------------------------------------------------------------------
 29442                                  ; ENTRY:    AL contains UMB number
 29443                                  ; EXIT:     None
 29444                                  ; ERROR:    None
 29445                                  ; USES:     Flags, variables in highvar.inc
 29446                                  ; -----------------------------------------------------------------------------
 29447                                  
 29448                                  unMarkUMB:
 29449                                  	push	ax
 29450                                  	push	bx
 29451                                  	push	di
 29452                                  	push	es
 29453                                  
 29454                                  	push	cs
 29455                                  	pop	es
 29456                                  
 29457                                  	xor	ah,ah
 29458                                  	mov	bx,ax
 29459                                  
 29460                                  	; 19/04/2019
 29461                                  	
 29462                                  	;mov	byte [es:bx+UmbUsed],0
 29463                                  	mov	[es:bx+UmbUsed],ah ; 0
 29464                                  
 29465                                  	cmp	[es:UmbLoad],al
 29466                                  	jne	short umu10
 29467                                  
 29468                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 29469                                  	mov	[es:UmbLoad],ah ; 0
 29470                                  umu10:	
 29471                                  	pop	es
 29472                                  	pop	di
 29473                                  	pop	bx
 29474                                  	pop	ax
 29475                                  	retn
 29476                                  
 29477                                  ; -----------------------------------------------------------------------------
 29478                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 29479                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 29480                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 29481                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 29482                                  ; -----------------------------------------------------------------------------
 29483                                  ; ENTRY:    AL contains UMB number, as specified by the user
 29484                                  ; EXIT:     None
 29485                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 29486                                  ; USES:     AX, Flags, variables in highvar.inc
 29487                                  ; -----------------------------------------------------------------------------
 29488                                  
 29489                                  stowUMB:
 29490                                  	cmp	al,MAXUMB ; 16
 29491                                  	jb	short su10
 29492                                  	stc
 29493                                  	retn			; Ooops-- UMB>=MAXUMB
 29494                                  su10:	
 29495                                  	push	bx
 29496                                  	push	di
 29497                                  	push	si
 29498                                  	push	ds
 29499                                  	push	es
 29500                                  	push	cs
 29501                                  	pop	es
 29502                                  	push	cs
 29503                                  	pop	ds
 29504                                  	
 29505                                  	;cmp	byte [UmbLoad],0FFh
 29506                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 29507                                  	jne	short su20
 29508                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 29509                                  su20:	
 29510                                  	or	al,al		; If they gave UMB 0, there's really nothing
 29511                                  	jz	short su30	; that we should do here.
 29512                                  
 29513                                  	mov	bl,al
 29514                                  	xor	bh,bh
 29515                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 29516                                  
 29517                                  	xchg	[es:bx+UmbUsed],al
 29518                                  
 29519                                  	or	al,al		; If it was already 1, then al==1... and that
 29520                                  	jz	short su30	; means an error.
 29521                                  
 29522                                  	stc			; OOOPS!  This one's been used before.  :(
 29523                                  su30:	
 29524                                  	pop	es
 29525                                  	pop	ds
 29526                                  	pop	si
 29527                                  	pop	di
 29528                                  	pop	bx
 29529                                  	retn
 29530                                  
 29531                                  ; -----------------------------------------------------------------------------
 29532                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 29533                                  ; -----------------------------------------------------------------------------
 29534                                  ; ENTRY:    CL contains UMB number, AX contains size
 29535                                  ; EXIT:     None
 29536                                  ; ERROR:    None
 29537                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 29538                                  ; -----------------------------------------------------------------------------
 29539                                  
 29540                                  ; 13/05/2019
 29541                                  
 29542                                  stowSiz:
 29543                                  	push	bx
 29544                                  	;push	di ; ?
 29545                                  	push	es
 29546                                  
 29547                                  	push	cs
 29548                                  	pop	es	
 29549                                  
 29550                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 29551                                  	mov	bh,0			;     bx==UMB number, AX==size
 29552                                  	shl	bl,1			;     bx==offset into array, AX=size
 29553                                  	mov	[es:bx+UmbSize],ax	; Store the size
 29554                                  	
 29555                                  	pop	es
 29556                                  	;pop	di ; ?
 29557                                  	pop	bx
 29558                                  
 29559                                  	retn
 29560                                  
 29561                                  ; -----------------------------------------------------------------------------
 29562                                  ;*** toDigit - converts a character-digit to its binary counterpart
 29563                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 29564                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 29565                                  ; A-F are considered valid iff gnradix is 16.
 29566                                  ; -----------------------------------------------------------------------------
 29567                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 29568                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 29569                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 29570                                  ; USES:     CL, Flags
 29571                                  ; -----------------------------------------------------------------------------
 29572                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29573                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29574                                  ; will be 10 or 16.
 29575                                  ; -----------------------------------------------------------------------------
 29576                                  
 29577                                  gnradix:
 29578                                  	dw	0		; Must be a word--16x16 multiplication
 29579                                  
 29580                                  toDigit:
 29581                                  	cmp	word [cs:gnradix],16
 29582                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 29583                                  
 29584                                  toDigit_hex:
 29585                                  	cmp	cl,'a'	; 61h
 29586                                  	jb	short td10
 29587                                  	cmp	cl,'f'	; 66h
 29588                                  	ja	short tdE	; Nothing valid above 'z' at all...
 29589                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 29590                                  	;clc			; <- CLC is implicit from last SUB
 29591                                  	retn
 29592                                  td10:	
 29593                                  	cmp	cl,'A'  ; 41h
 29594                                  	jb	short td20	; Below 'A'?  Not a letter...
 29595                                  	cmp	cl,'F'	; 46h
 29596                                  	ja	short tdE	; Above 'F'?  Not a digit.
 29597                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 29598                                  	;clc			; <- CLC is implicit from last SUB
 29599                                  	retn
 29600                                  toDigit_dec:
 29601                                  td20:	
 29602                                  	cmp	cl,'0'		; If less than zero,
 29603                                  	;jb	short tdE	; Done.
 29604                                  	jb	short tdEr ; 08/04/2019
 29605                                  	cmp	cl,'9'		; Or, if greater than nine,
 29606                                  	ja	short tdE	; Done.
 29607                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 29608                                  	;clc			; <- CLC is implicit from last SUB
 29609                                  	retn
 29610                                  tdE:	
 29611                                  	stc
 29612                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 29613                                  	retn
 29614                                  
 29615                                  ; -----------------------------------------------------------------------------
 29616                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 29617                                  ; -----------------------------------------------------------------------------
 29618                                  ; ENTRY:    ES:SI points to an ascii string to scan
 29619                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 29620                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 29621                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 29622                                  ; -----------------------------------------------------------------------------
 29623                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29624                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29625                                  ; will be 10 or 16.
 29626                                  ; -----------------------------------------------------------------------------
 29627                                  
 29628                                  ; 08/04/2019 - Retro DOS v4.0
 29629                                  
 29630                                  GetXNum:
 29631                                  	;pushreg <bx, cx, ds>
 29632                                  	push	bx
 29633                                  	push	cx
 29634                                  	push	ds
 29635                                  
 29636                                  	cld
 29637                                  	xor	ax,ax
 29638                                  	xor	bx,bx
 29639                                  	xor	cx,cx
 29640                                  	xor	dx,dx			; Start with 0 (makes sense)
 29641                                  
 29642                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 29643                                  
 29644                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 29645                                  	;call	toDigit
 29646                                  	call	toDigit_dec
 29647                                  	jc	short gxnE		; If it's not a digit, leave now.
 29648                                  
 29649                                  	or	cl,cl
 29650                                  	jnz	short gxn20		; Doesn't have '0x'
 29651                                  	mov	cl,[es:si+1]
 29652                                  	cmp	cl,'x'			; Either 'x'...
 29653                                  	je	short gxn10
 29654                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29655                                  	jne	short gxn20
 29656                                  
 29657                                  gxn10:	
 29658                                  	mov	word [cs:gnradix], 16
 29659                                  	inc	si			; Since we read "0x", march over it.
 29660                                  	inc	si
 29661                                  
 29662                                  ; ------------------------------------------------------
 29663                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29664                                  ;        DX:AX = current total
 29665                                  ;        BX    = 0
 29666                                  ;        CH    = 0
 29667                                  ; ------------------------------------------------------
 29668                                  
 29669                                  gxn20:	
 29670                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29671                                  	inc	si
 29672                                  
 29673                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29674                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29675                                  
 29676                                  	call	mul32		; Multiply DX:AX by gnradix
 29677                                  	jc	short gxnX	; (if it's too big, error out)
 29678                                  
 29679                                  	add	ax,cx		; Add the digit
 29680                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29681                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29682                                  	;jmp	short gxn20
 29683                                  	jnc	short gxn20
 29684                                  gxnE:	
 29685                                  	;stc			; In this case, we need to set the carry
 29686                                  	jmp	short gxnX	; and leave--there were no digits given.
 29687                                  gxnQ:	
 29688                                  	dec	si		; Don't read in the offensive character.
 29689                                  	clc			; And clear carry, so they know it's okay.
 29690                                  gxnX:	
 29691                                  	pop	ds
 29692                                  	pop	cx
 29693                                  	pop	bx
 29694                                  	retn
 29695                                  
 29696                                  ; -----------------------------------------------------------------------------
 29697                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29698                                  ; -----------------------------------------------------------------------------
 29699                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29700                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29701                                  ; ERROR:   Carry set if number was too large
 29702                                  ; USES:    Flags, AX, DX
 29703                                  ; -----------------------------------------------------------------------------
 29704                                  
 29705                                  mul32:
 29706                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29707                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29708                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29709                                  	jc	short m32E	; Too big?
 29710                                  
 29711                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29712                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29713                                  
 29714                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29715                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29716                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29717                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29718                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29719                                  	retn
 29720                                  m32E:	
 29721                                  	pop	ax
 29722                                  	retn
 29723                                  
 29724                                  ; -----------------------------------------------------------------------------
 29725                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29726                                  ; -----------------------------------------------------------------------------
 29727                                  ; ENTRY:   DX:AX = the number to be divided
 29728                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29729                                  ; ERROR:   None
 29730                                  ; USES:    Flags, AX, DX
 29731                                  ; -----------------------------------------------------------------------------
 29732                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29733                                  ;       can't ensure a 386 host machine. Sorry.
 29734                                  ; -----------------------------------------------------------------------------
 29735                                  
 29736                                  toPara:
 29737                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29738                                  
 29739                                  	mov	cl,4		;
 29740                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29741                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29742                                  	mov	cl,12
 29743                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29744                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29745                                  
 29746                                  	pop	cx
 29747                                  	retn
 29748                                  
 29749                                  ; -----------------------------------------------------------------------------
 29750                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29751                                  ; -----------------------------------------------------------------------------
 29752                                  ; ENTRY:  Nothing
 29753                                  ; EXIT:   AX contains 0x9FFF for most systems
 29754                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29755                                  ; USES:   Flags, AX
 29756                                  ; -----------------------------------------------------------------------------
 29757                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29758                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29759                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29760                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29761                                  ; -----------------------------------------------------------------------------
 29762                                  
 29763                                  UmbHead:
 29764                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29765                                  
 29766                                  	;push	si ; ?
 29767                                  	;push	ds ; ? 
 29768                                  	;push	es
 29769                                  	;push	bx ; *	
 29770                                  
 29771                                  	; 09/04/2019
 29772                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29773                                  
 29774                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29775                                  	int	21h
 29776                                  
 29777                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29778                                  	cmp	ax,0FFFFh
 29779                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29780                                  
 29781                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29782                                  	;jmp	short uhX
 29783                                  	; 12/12/2022
 29784                                  	retn
 29785                                  uhE:	
 29786                                  	stc
 29787                                  uhX:	
 29788                                  	;pop	bx ; *
 29789                                  	;pop	es
 29790                                  	;pop	ds ; ?
 29791                                  	;pop	si ; ?
 29792                                  	retn
 29793                                  
 29794                                  ; -----------------------------------------------------------------------------
 29795                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29796                                  ; -----------------------------------------------------------------------------
 29797                                  ; ENTRY:  ES:0 should point to a valid MCB
 29798                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29799                                  ; USES:   Flags
 29800                                  ; -----------------------------------------------------------------------------
 29801                                  
 29802                                  isSysMCB:
 29803                                  	;push	ax
 29804                                  
 29805                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29806                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29807                                  	;je	short ism10
 29808                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29809                                  	;;je	short ism10
 29810                                  	;;jmp	short ismX		; Anything else isn't.
 29811                                  	;jne	short ismX
 29812                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29813                                  	jne	short ismX 
 29814                                  ism10:	
 29815                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29816                                  	;cmp	ax,'SC' ; 4353h
 29817                                  	cmp	word [es:ARENA.NAME],'SC'
 29818                                  ismX:	
 29819                                  	;pop	ax
 29820                                  	retn
 29821                                  
 29822                                  ; 09/04/2019 - Retro DOS v4.0
 29823                                  
 29824                                  ; -----------------------------------------------------------------------------
 29825                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29826                                  ; -----------------------------------------------------------------------------
 29827                                  ; ENTRY:  AX contains a segment address
 29828                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29829                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29830                                  ; USES:   Flags, AX
 29831                                  ; -----------------------------------------------------------------------------
 29832                                  ; An address in the following areas is treated as:
 29833                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29834                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29835                                  ;      ...
 29836                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29837                                  ; -----------------------------------------------------------------------------
 29838                                  
 29839                                  AddrToUmb:
 29840                                  	push	cx
 29841                                  	push	dx
 29842                                  	push	es
 29843                                  
 29844                                  	mov	dx,ax		; DX = address to search for
 29845                                  
 29846                                  	call	UmbHead		; AX = first segment
 29847                                  	jc	short atuE	; If it couldn't get it, error out.
 29848                                  
 29849                                  	; 14/08/2023
 29850                                  	;mov	es,ax ; *	; ES = first UMB segment
 29851                                  	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 29852                                  
 29853                                  	; 22/07/2023
 29854                                  atu10:
 29855                                  	mov	es,ax ; * ; ** ; 14/08/2023
 29856                                  ; ----------------------------------------
 29857                                  ; ATU10--ES - Current MCB address
 29858                                  ;        DX - Address given for conversion
 29859                                  ;        CX - Current UMB #
 29860                                  ; ----------------------------------------
 29861                                  
 29862                                  ;atu10:	
 29863                                  	;mov	ax,es ; * ; 14/08/2023
 29864                                          cmp	ax,dx		; Present segment >= given segment?
 29865                                  	jae	short atuX	; Yep--done.
 29866                                  
 29867                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29868                                  	jnz	short atu20
 29869                                  
 29870                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29871                                  atu20:	
 29872                                  	;mov	al,[es:ARENA.SIGNATURE]
 29873                                  	;cmp	al,arena_signature_end  ; 'Z'
 29874                                  	; 14/08/2023
 29875                                  	; ax = es
 29876                                  	;mov	ax,es ; **
 29877                                  	add	ax,[es:ARENA.SIZE]
 29878                                  	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 29879                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29880                                  
 29881                                  	;NextMCB es,ax
 29882                                  
 29883                                  	;mov	ax,es ; **
 29884                                  	;;add	ax,[es:3]
 29885                                  	;add	ax,[es:ARENA.SIZE]
 29886                                  	inc	ax
 29887                                  	; 14/08/2023
 29888                                  	;mov	es,ax ; *
 29889                                  	jmp	short atu10
 29890                                  
 29891                                  ; -----------------------------------------------------------------------------
 29892                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29893                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29894                                  ; -----------------------------------------------------------------------------
 29895                                  
 29896                                  atu30:	
 29897                                  	; 14/08/2023
 29898                                  	; ax = es + [es:ARENA.SIZE] 
 29899                                  	;mov	ax,es ; **
 29900                                  	;add	ax,[es:ARENA.SIZE] ; **
 29901                                  	cmp	ax,dx		; Present >= given?
 29902                                  	jae	short atuX	; Yep! It _was_ inside.
 29903                                  atuE:	
 29904                                  	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 29905                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29906                                  atuX:	
 29907                                  	mov	ax,cx		; Return the UMB number in AX
 29908                                  	
 29909                                  	pop	es	
 29910                                  	pop	dx
 29911                                  	pop	cx
 29912                                  	retn
 29913                                  
 29914                                  ; -----------------------------------------------------------------------------
 29915                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29916                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29917                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29918                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29919                                  ; -----------------------------------------------------------------------------
 29920                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29921                                  ; EXIT:   AX will contain a UMB number
 29922                                  ; ERROR:  None
 29923                                  ; USES:   Flags, AX
 29924                                  ; -----------------------------------------------------------------------------
 29925                                  
 29926                                  convUMB:
 29927                                  	cmp	word [cs:gnradix],16
 29928                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29929                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29930                                  ;cmp	ax,0FFFFh
 29931                                  	;jne	short cu10
 29932                                  	;inc	ax		; If too high, ignore it (make it conventional)
 29933                                  	; 14/08/2023
 29934                                  	inc	ax
 29935                                  	jz	short cu10	; If too high, ignore it (make it conventional)
 29936                                  	dec	ax
 29937                                  cu10:	
 29938                                  	retn
 29939                                  
 29940                                  ; -----------------------------------------------------------------------------
 29941                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29942                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29943                                  ; of the usual HIGH_FIRST.  See the code.
 29944                                  ; -----------------------------------------------------------------------------
 29945                                  ; ENTRY:  None
 29946                                  ; EXIT:   None
 29947                                  ; ERROR:  None
 29948                                  ; USES:   Flags, fm_umb, fm_strat
 29949                                  ; -----------------------------------------------------------------------------
 29950                                  
 29951                                  setUMBs:
 29952                                  	push	ax
 29953                                  	push	bx
 29954                                  	call	fm_link
 29955                                  	pop	bx
 29956                                  	pop	ax
 29957                                  	retn
 29958                                  
 29959                                  ; -----------------------------------------------------------------------------
 29960                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29961                                  ; -----------------------------------------------------------------------------
 29962                                  ; ENTRY:  None
 29963                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29964                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29965                                  ; ERROR:  None
 29966                                  ; USES:   Flags, fm_strat, fm_umb
 29967                                  ; -----------------------------------------------------------------------------
 29968                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29969                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29970                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29971                                  ; such that the load UMB is too small, and shouldn't be used.
 29972                                  ; -----------------------------------------------------------------------------
 29973                                  
 29974                                  loadLow:
 29975                                  	;push	ds
 29976                                  	;push	cs		; Point DS into appropriate data segment
 29977                                  	;pop	ds	
 29978                                  
 29979                                  	;mov	al,[UmbLoad]
 29980                                  	mov	al,[cs:UmbLoad]
 29981                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29982                                  	jne	short ll10
 29983                                  
 29984                                  	stc
 29985                                  ll15:
 29986                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29987                                  	;stc
 29988                                  	;jmp	short llX
 29989                                  	retn
 29990                                  ll10:	
 29991                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29992                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29993                                  
 29994                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29995                                  	retn
 29996                                  
 29997                                  	;mov	al,1
 29998                                  	;clc
 29999                                  ;llX:
 30000                                  	;pop	ds		; Return DS to where it was
 30001                                  	;retn
 30002                                  
 30003                                  ; -----------------------------------------------------------------------------
 30004                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 30005                                  ; -----------------------------------------------------------------------------
 30006                                  ; ENTRY:  None
 30007                                  ; EXIT:   None
 30008                                  ; ERROR:  None
 30009                                  ; USES:   Flags, fm_strat, fm_umb
 30010                                  ; -----------------------------------------------------------------------------
 30011                                  
 30012                                  HideUMBs:
 30013                                  	push	ax
 30014                                  	push	cx
 30015                                  	push	ds
 30016                                  	push	es
 30017                                  
 30018                                  	call	UmbTest		; See if we REALLY linked in anything...
 30019                                  	jc	short husX	; ...if not, there's nothing for us to do.
 30020                                  
 30021                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 30022                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 30023                                  
 30024                                  	;putdata fInHigh,1	; Remember that we're now running high
 30025                                  	mov	byte [cs:fInHigh],1
 30026                                  
 30027                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 30028                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 30029                                  
 30030                                  	cmp	al,UNSPECIFIED	; If they didn't,
 30031                                  	je	short husX	; then we shouldn't do this loop:
 30032                                  
 30033                                  	xor	cx,cx
 30034                                  
 30035                                  ; -----------------------------------------------
 30036                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 30037                                  ; -----------------------------------------------
 30038                                  
 30039                                  hus10:	inc	cx		; For each UMB:
 30040                                  	cmp	cx,MAXUMB ; 16
 30041                                  	jae	short hus20
 30042                                  
 30043                                  	mov	al,cl		; (stopping as soon as we're outside of the
 30044                                  	push	es
 30045                                  	call	findUMB		; valid range of UMBs)
 30046                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 30047                                  	jc	short hus20
 30048                                  
 30049                                  	call	_hideUMB_	; hide what we need to hide.
 30050                                  
 30051                                  	jmp	short hus10
 30052                                  hus20:	
 30053                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 30054                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 30055                                  
 30056                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 30057                                  	jnz	short husX	; If not, we're done.
 30058                                  
 30059                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 30060                                  husX:	
 30061                                  	pop	es
 30062                                  	pop	ds
 30063                                  	pop	cx
 30064                                  	pop	ax
 30065                                  	retn
 30066                                  
 30067                                  ; -----------------------------------------------------------------------------
 30068                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 30069                                  ; -----------------------------------------------------------------------------
 30070                                  ; ENTRY:  None
 30071                                  ; EXIT:   AL == load UMB
 30072                                  ; ERROR:  None
 30073                                  ; USES:   Flags, AX
 30074                                  ; -----------------------------------------------------------------------------
 30075                                  
 30076                                  ;GetLoadUMB:
 30077                                  ;	;getdata al, UmbLoad
 30078                                  ;	push	ds
 30079                                  ;	push	cs
 30080                                  ;	pop	ds
 30081                                  ;	mov	al,[UmLoad]
 30082                                  ;	pop	ds
 30083                                  ;	retn
 30084                                  
 30085                                  ; -----------------------------------------------------------------------------
 30086                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 30087                                  ; -----------------------------------------------------------------------------
 30088                                  ; ENTRY:  None
 30089                                  ; EXIT:   AX == load UMB minimum size
 30090                                  ; ERROR:  None
 30091                                  ; USES:   Flags, AX
 30092                                  ; -----------------------------------------------------------------------------
 30093                                  
 30094                                  GetLoadSize:
 30095                                  	; 09/04/2019 - Retro DOS v4.0
 30096                                  	mov	al,[cs:UmbLoad]
 30097                                  	jmp	short GetSize
 30098                                  
 30099                                  	;push	bx
 30100                                  	;;push	si
 30101                                  	;push	ds
 30102                                  	;push	cs
 30103                                  	;pop	ds
 30104                                  
 30105                                  	;mov	al,[UmbLoad]
 30106                                  
 30107                                  	;xor	ah,ah			;    ax==UMB
 30108                                  	;mov	bx,UmbSize		;    bx==array
 30109                                  	;shl	al,1	                ;    ax==offset
 30110                                  	;;add	ax,bx			;    ax==element index
 30111                                  	;;mov	si,ax			; ds:si==element index
 30112                                  
 30113                                  	;;lodsw				;    ax==size
 30114                                  
 30115                                  	;add	bx,ax
 30116                                  	;mov	ax,[bx]
 30117                                  
 30118                                  	;pop	ds
 30119                                  	;;pop	si
 30120                                  	;pop	bx
 30121                                  	;retn
 30122                                  
 30123                                  ; -----------------------------------------------------------------------------
 30124                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 30125                                  ; -----------------------------------------------------------------------------
 30126                                  ; ENTRY:  AL == a UMB number
 30127                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 30128                                  ; ERROR:  None
 30129                                  ; USES:   Flags, AX
 30130                                  ; -----------------------------------------------------------------------------
 30131                                  
 30132                                  GetSize:
 30133                                  	; 09/04/2019 - Retro DOS v4.0
 30134                                  
 30135                                  	push	bx
 30136                                  	;push	si
 30137                                  	;push	ds
 30138                                  	;push	cs
 30139                                  	;pop	ds
 30140                                  
 30141                                  	xor	ah,ah			;    ax==UMB
 30142                                  	mov	bx,UmbSize		;    bx==array
 30143                                  	shl	al,1	                ;    ax==offset
 30144                                  	;add	ax,bx			;    ax==element index
 30145                                  	;mov	si,ax			; ds:si==element index
 30146                                  
 30147                                  	;lodsw				;    ax==size
 30148                                  
 30149                                  	add	bx,ax
 30150                                  	;mov	ax,[bx]
 30151                                  	mov	ax,[cs:bx]
 30152                                  
 30153                                  	;pop	ds
 30154                                  	;pop	si
 30155                                  	pop	bx
 30156                                  	retn
 30157                                  
 30158                                  ; -----------------------------------------------------------------------------
 30159                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 30160                                  ; -----------------------------------------------------------------------------
 30161                                  ; ENTRY:   AL == new load UMB
 30162                                  ; EXIT:    None
 30163                                  ; ERROR:   None
 30164                                  ; USES:    Flags, AX
 30165                                  ; -----------------------------------------------------------------------------
 30166                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 30167                                  ;          time you would ever need this, so that's okay.
 30168                                  ; -----------------------------------------------------------------------------
 30169                                  
 30170                                  ;StoLoadUMB:
 30171                                  ;	;putdata UmbLoad, al
 30172                                  ;	push	es
 30173                                  ;	push	cs
 30174                                  ;	pop	es
 30175                                  ;	mov	[es:UmbLoad],al
 30176                                  ;	pop	es
 30177                                  ;	retn
 30178                                  
 30179                                  ; -----------------------------------------------------------------------------
 30180                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 30181                                  ; -----------------------------------------------------------------------------
 30182                                  ; ENTRY:  AL == new load size
 30183                                  ; EXIT:   None
 30184                                  ; ERROR:  None
 30185                                  ; USES:   Flags, AX
 30186                                  ; -----------------------------------------------------------------------------
 30187                                  
 30188                                  StoLoadSize:
 30189                                  	push	dx
 30190                                  
 30191                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 30192                                  	;
 30193                                  	;push	ds
 30194                                  	;push	cs
 30195                                  	;pop	ds
 30196                                  	;mov	dl,[UmbLoad]
 30197                                  	;pop	ds	
 30198                                  
 30199                                  	mov	dl,[cs:UmbLoad]
 30200                                  
 30201                                  	cmp	dl,UNSPECIFIED ; 0FFh
 30202                                  	je	short sls10
 30203                                  
 30204                                  	call	stowSiz			; We've got a function to do just this
 30205                                  sls10:	
 30206                                  	pop	dx
 30207                                  	retn
 30208                                  
 30209                                  ; -----------------------------------------------------------------------------
 30210                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 30211                                  ; -----------------------------------------------------------------------------
 30212                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 30213                                  ; EXIT:     None; free elements in UMB marked as hidden
 30214                                  ; ERROR:    None
 30215                                  ; USES:     Flags
 30216                                  ; -----------------------------------------------------------------------------
 30217                                  
 30218                                  hideUMB:
 30219                                  	push	ax
 30220                                  	push	es
 30221                                  
 30222                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 30223                                  	jc	short huX
 30224                                  
 30225                                  ; ------------------------------------------------
 30226                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 30227                                  ;            we're not in the same UMB, so exit.
 30228                                  ; ------------------------------------------------
 30229                                  
 30230                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30231                                  	jz	short huX	; If it is, we've finished the UMB.
 30232                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 30233                                  	or	word [es:ARENA.OWNER],0
 30234                                  	jnz	short hu20
 30235                                  
 30236                                  	call	hideMCB
 30237                                  hu20:	
 30238                                  	mov	al,[es:ARENA.SIGNATURE]
 30239                                  	cmp	al,arena_signature_end  ;'Z'
 30240                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 30241                                  
 30242                                  	;NextMCB es, ax		; Go on forward.
 30243                                  	mov     ax,es
 30244                                  	;add	ax,[es:3]
 30245                                  	add     ax,[es:ARENA.SIZE]
 30246                                  	inc     ax
 30247                                  	mov     es,ax
 30248                                  
 30249                                  	jmp	short hu10
 30250                                  huX:	
 30251                                  	pop	es
 30252                                  	pop	ax
 30253                                  	retn
 30254                                  
 30255                                  ; -----------------------------------------------------------------------------
 30256                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 30257                                  ; -----------------------------------------------------------------------------
 30258                                  ; ENTRY:    None
 30259                                  ; EXIT:     ZF set if user DIDN'T specify /S
 30260                                  ; ERROR:    None
 30261                                  ; USES:     Flags
 30262                                  ; -----------------------------------------------------------------------------
 30263                                  
 30264                                  isTiny:
 30265                                  	push	ax
 30266                                  
 30267                                  	;getdata al, fUmbTiny
 30268                                  	;
 30269                                  	;push	ds
 30270                                  	;push	cs
 30271                                  	;pop	ds
 30272                                  	;mov	al,[fUmbTiny]
 30273                                  	;pop	ds
 30274                                  
 30275                                  	mov	al,[cs:fUmbTiny]		
 30276                                  
 30277                                  	or	al,al
 30278                                  	pop	ax
 30279                                  	retn
 30280                                  
 30281                                  ; -----------------------------------------------------------------------------
 30282                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 30283                                  ; -----------------------------------------------------------------------------
 30284                                  ; ENTRY:    ES:0 should point to an MCB
 30285                                  ; EXIT:     ZF set if MCB is free, else !ZF
 30286                                  ; ERROR:    None
 30287                                  ; USES:     Flags
 30288                                  ; -----------------------------------------------------------------------------
 30289                                  
 30290                                  ;isFreeMCB:
 30291                                  ;	or	word [es:ARENA.OWNER],0
 30292                                  ;	retn
 30293                                  
 30294                                  ; -----------------------------------------------------------------------------
 30295                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 30296                                  ; -----------------------------------------------------------------------------
 30297                                  ; ENTRY:    ES:0 should point to an MCB
 30298                                  ; EXIT:     None; MCB marked as HIDDEN
 30299                                  ; ERROR:    None
 30300                                  ; USES:     None
 30301                                  ; -----------------------------------------------------------------------------
 30302                                  
 30303                                  hideMCB:
 30304                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30305                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 30306                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 30307                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 30308                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 30309                                  	retn
 30310                                  
 30311                                  ; -----------------------------------------------------------------------------
 30312                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 30313                                  ; -----------------------------------------------------------------------------
 30314                                  ; ENTRY:    ES:0 should point to an MCB
 30315                                  ; EXIT:     None; MCB marked as FREE
 30316                                  ; ERROR:    None
 30317                                  ; USES:     None
 30318                                  ; -----------------------------------------------------------------------------
 30319                                  
 30320                                  unHideMCB:
 30321                                  	push	ax
 30322                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 30323                                  	mov	ax,'  ' ; 2020h
 30324                                  	mov	[es:ARENA.NAME+0],ax
 30325                                  	mov	[es:ARENA.NAME+2],ax
 30326                                  	mov	[es:ARENA.NAME+4],ax
 30327                                  	mov	[es:ARENA.NAME+6],ax
 30328                                  	pop	ax
 30329                                  	retn
 30330                                  
 30331                                  ; -----------------------------------------------------------------------------
 30332                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 30333                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 30334                                  ; -----------------------------------------------------------------------------
 30335                                  ; ENTRY:    AL should be to a valid UMB number
 30336                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 30337                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 30338                                  ; USES:     Flags, ES
 30339                                  ; -----------------------------------------------------------------------------
 30340                                  
 30341                                  findUMB:
 30342                                  	push	ax
 30343                                  	push	cx
 30344                                  	push	dx
 30345                                  
 30346                                  	xor	ah,ah		; Zap ah, so al==ax
 30347                                  
 30348                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 30349                                  
 30350                                  	call	UmbHead		; Returns first UMB segment in AX
 30351                                  	mov	es,ax
 30352                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30353                                  
 30354                                  ; ---------------------------------------------
 30355                                  ; FU10--CX - This UMB number; 0 == conventional
 30356                                  ;       DX - The UMB number they're looking for
 30357                                  ;       ES - The current MCB address
 30358                                  ; ---------------------------------------------
 30359                                  
 30360                                  fu10:	
 30361                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 30362                                  	je	short fuX	; searching for--so exit.
 30363                                  
 30364                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30365                                  	jnz	short fu20
 30366                                  
 30367                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30368                                  fu20:	
 30369                                  	mov	al,[es:ARENA.SIGNATURE]
 30370                                  	cmp	al,arena_signature_end ; 'Z'
 30371                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 30372                                  
 30373                                  	;NextMCB es, ax		; Go on forward.
 30374                                  	mov     ax,es
 30375                                  	;add	ax,[es:3]
 30376                                  	add     ax,[es:ARENA.SIZE]
 30377                                  	inc     ax
 30378                                  	mov     es,ax
 30379                                  
 30380                                  	jmp	short fu10
 30381                                  fuE:	
 30382                                  	stc
 30383                                  fuX:
 30384                                  	pop	dx
 30385                                  	pop	cx
 30386                                  	pop	ax		; The address is already in ES.
 30387                                  	retn
 30388                                  
 30389                                  ; -----------------------------------------------------------------------------
 30390                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 30391                                  ; -----------------------------------------------------------------------------
 30392                                  ; ENTRY:    AL should be to a valid UMB number
 30393                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 30394                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 30395                                  ; USES:     Flags, ES
 30396                                  ; -----------------------------------------------------------------------------
 30397                                  
 30398                                  BigFree:
 30399                                  	push	bx
 30400                                  	push	cx
 30401                                  
 30402                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 30403                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 30404                                  
 30405                                  	xor	bx,bx			; Segment address of largest free MCB
 30406                                  	xor	cx,cx			; Size of largest free MCB
 30407                                  
 30408                                  ; ---------------------------------------------
 30409                                  ; BF10--ES - Current MCB address
 30410                                  ;       BX - Address of largest free MCB so far
 30411                                  ;       CX - Size of largest free MCB so far
 30412                                  ; ---------------------------------------------
 30413                                  
 30414                                  bf10:	
 30415                                  	call	isSysMCB		; If we've left the MCB, we're done.
 30416                                  	jz	short bf30
 30417                                  
 30418                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 30419                                  	or	word [es:ARENA.OWNER],0
 30420                                  	jnz	short bf20
 30421                                  
 30422                                  	mov	ax,[es:ARENA.SIZE]
 30423                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 30424                                  	cmp	cx,ax
 30425                                  	jg	short bf20		; Unless we're bigger,
 30426                                  
 30427                                  	mov	bx,es			; Store this new element's address,
 30428                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 30429                                  	mov	cx,ax
 30430                                  
 30431                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 30432                                  	cmp	al,arena_signature_end	; 'Z'
 30433                                  	jz	short bf30		; 'Z' means this was the last MCB.
 30434                                  
 30435                                  	;NextMCB es,ax		; Go on forward.
 30436                                  	mov     ax,es
 30437                                  	;add	ax,[es:3]
 30438                                  	add     ax,[es:ARENA.SIZE]
 30439                                  	inc     ax
 30440                                  	mov     es,ax
 30441                                  
 30442                                  	jmp	short bf10
 30443                                  
 30444                                  bf30:	mov	es,bx			; Return the address
 30445                                  	mov	ax,cx			; Return the size
 30446                                  	or	bx,bx
 30447                                  	jnz	short bfX		; (if size==0, there's nothing free)
 30448                                  bfE:	
 30449                                  	stc
 30450                                  bfX:
 30451                                  	pop	cx
 30452                                  	pop	bx
 30453                                  	retn
 30454                                  
 30455                                  ; -----------------------------------------------------------------------------
 30456                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 30457                                  ; -----------------------------------------------------------------------------
 30458                                  ; ENTRY:    AL should be to a valid UMB number
 30459                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 30460                                  ; ERROR:    None
 30461                                  ; USES:     Flags
 30462                                  ; -----------------------------------------------------------------------------
 30463                                  
 30464                                  isSpecified:
 30465                                  	push	ax
 30466                                  
 30467                                  	xor	bh,bh
 30468                                  	mov	bl,al
 30469                                  
 30470                                  	;getdata al, DS:UmbUsed[bx]
 30471                                  	;
 30472                                  	;push	ds
 30473                                  	;push	cs
 30474                                  	;pop	ds
 30475                                  	;mov	al,[bx+UmbUsed]
 30476                                  	;pop	ds
 30477                                  	
 30478                                  	mov	al,[cs:bx+UmbUsed]
 30479                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 30480                                  
 30481                                  	pop	ax
 30482                                  	retn
 30483                                  
 30484                                  ; -----------------------------------------------------------------------------
 30485                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 30486                                  ; -----------------------------------------------------------------------------
 30487                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 30488                                  ; EXIT:     None; MCB broken if carry clear
 30489                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 30490                                  ; USES:     Flags
 30491                                  ; -----------------------------------------------------------------------------
 30492                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 30493                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 30494                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 30495                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 30496                                  ; minimum for performing a split.
 30497                                  ; -----------------------------------------------------------------------------
 30498                                  
 30499                                  MIN_SPLIT_SIZE	equ	20h
 30500                                  
 30501                                  shrinkMCB:
 30502                                  	;pushreg <bx, cx, es>
 30503                                  	push	bx
 30504                                  	push	cx
 30505                                  	push	es
 30506                                  
 30507                                  	mov	bx,ax			; Move things around... and
 30508                                  	mov	ax,es			; save this one for later.
 30509                                  
 30510                                  	mov	cx,[es:ARENA.SIZE]
 30511                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 30512                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 30513                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 30514                                  	; 18/12/2022
 30515                                  	cmp	cx,bx
 30516                                  	jb	short smE ; (*)
 30517                                  
 30518                                  	mov	dl,[es:ARENA.SIGNATURE]
 30519                                  	mov	cx,[es:ARENA.SIZE]
 30520                                  
 30521                                  	mov	[es:ARENA.SIZE],bx
 30522                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 30523                                  
 30524                                  	add	ax,bx
 30525                                  	inc	ax
 30526                                  	mov	es,ax			; Move to new arena area
 30527                                  
 30528                                  	mov	ax,cx
 30529                                  	sub	ax,bx
 30530                                  	; 12/12/2022
 30531                                  	; ax > 0
 30532                                  	dec	ax			; And prepare the new size
 30533                                  
 30534                                  	; 18/12/2022
 30535                                  	mov	[es:ARENA.SIGNATURE],dl
 30536                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 30537                                  	mov	[es:ARENA.SIZE],ax
 30538                                  	;mov	ax,'  ' ; 2020h
 30539                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 30540                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 30541                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 30542                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 30543                                  
 30544                                  	; 18/12/2022
 30545                                  	call	freeMCB	; (**)
 30546                                  
 30547                                  	; 12/12/2022
 30548                                  	; cf=0
 30549                                  	;clc
 30550                                  	; 18/12/2022
 30551                                  	;jmp	short smX
 30552                                  smE:	
 30553                                  	; 18/12/2022
 30554                                  	; cf=1 (*)
 30555                                  	;stc
 30556                                  smX:	
 30557                                  	;popreg	<es, cx, bx>
 30558                                  	pop	es
 30559                                  	pop	cx
 30560                                  	pop	bx
 30561                                  	retn
 30562                                  
 30563                                  ; -----------------------------------------------------------------------------
 30564                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 30565                                  ; -----------------------------------------------------------------------------
 30566                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 30567                                  ; EXIT:     None; UMB is hidden as necessary
 30568                                  ; ERROR:    None
 30569                                  ; USES:     Flags, AX, CX
 30570                                  ; -----------------------------------------------------------------------------
 30571                                  ; PRIMARY LOGIC:
 30572                                  ;
 30573                                  ; If the UMB is specified in the DH/LH statement, then:
 30574                                  ;    If the largest free segment is too small (check specified size), then:
 30575                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 30576                                  ;    Else, if largest free segment is LARGER than specified size, then:
 30577                                  ;       If /S was given on the command-line, then:
 30578                                  ;          Break that element into two pieces
 30579                                  ;          Set a flag that we're shrinking
 30580                                  ;       Endif
 30581                                  ;    Endif
 30582                                  ; Endif
 30583                                  ; If the UMB is NOT specified (or was removed by the above):
 30584                                  ;    Hide all free elements in the UMB
 30585                                  ;    If the flag that we're shrinking was set, then:
 30586                                  ;       UN-hide the lower portion of the shrunken UMB
 30587                                  ;    ENDIF
 30588                                  ; ENDIF
 30589                                  ; -----------------------------------------------------------------------------
 30590                                  
 30591                                  _hideUMB_:
 30592                                  	push	bx
 30593                                  	push	dx
 30594                                  	push	es
 30595                                  
 30596                                  	mov	al,cl
 30597                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 30598                                  	jz	short hu_20
 30599                                  
 30600                                  	mov	al,cl		; Retrieve the size of the largest
 30601                                  	call	BigFree		; free element in AX; put its address in ES
 30602                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 30603                                  
 30604                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 30605                                  	mov	al,cl		; Retrieve the user's specified
 30606                                  	call	GetSize		; minimum size for this umb (into AX)
 30607                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 30608                                  
 30609                                  	or	ax,ax		; If they didn't specify one,
 30610                                  	jz	short hu_20	; Skip over all this.
 30611                                  
 30612                                  	cmp	ax,bx		; Ah... if (specified > max free)
 30613                                  	jbe	short hu_10
 30614                                  
 30615                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 30616                                  	call	unMarkUMB
 30617                                  	jmp	short hu_20
 30618                                  hu_10:	
 30619                                  	call	isTiny		; Returns ZF clear if user specified /S
 30620                                  	jz	short hu_20
 30621                                  
 30622                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 30623                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 30624                                  
 30625                                  	mov	dx,es
 30626                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 30627                                  
 30628                                  hu_20:	mov	ax,cx
 30629                                  	call	isSpecified	; If they specified this UMB, we're done...
 30630                                  	jnz	short hu_X	; so leave.
 30631                                  
 30632                                  	xor	dx,dx
 30633                                  hu_30:	
 30634                                  	mov	al,cl
 30635                                  
 30636                                  	call	hideUMB		; Hides everything in UMB #al
 30637                                  
 30638                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 30639                                  	jz	short hu_X	; So we should leave.
 30640                                  
 30641                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 30642                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 30643                                  hu_X:	
 30644                                  	pop	es
 30645                                  	pop	dx
 30646                                  	pop	bx
 30647                                  	retn
 30648                                  
 30649                                  ; -----------------------------------------------------------------------------
 30650                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 30651                                  ; -----------------------------------------------------------------------------
 30652                                  ; Entry:  None
 30653                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 30654                                  ; Error:  None
 30655                                  ; Uses:   Flags
 30656                                  ; -----------------------------------------------------------------------------
 30657                                  
 30658                                  UnFreeze:
 30659                                  	push	ax
 30660                                  	push	es
 30661                                  
 30662                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 30663                                  	jc	short ufX
 30664                                  
 30665                                  	mov	es,ax
 30666                                  
 30667                                  ; ------------------------------
 30668                                  ; UF10--ES - Current MCB address
 30669                                  ; ------------------------------
 30670                                  
 30671                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 30672                                  	jnz	short uf20
 30673                                  	call	unHideMCB
 30674                                  uf20:	
 30675                                  	mov	al,[es:ARENA.SIGNATURE]
 30676                                  
 30677                                  	cmp	al,arena_signature_end ; 'Z'
 30678                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30679                                  
 30680                                  	;NextMCB es, ax		; Go on forward.
 30681                                  	mov     ax,es
 30682                                  	;add	ax,[es:3]
 30683                                  	add     ax,[es:ARENA.SIZE]
 30684                                  	inc     ax
 30685                                  	mov     es,ax
 30686                                  
 30687                                  	jmp	short uf10
 30688                                  ufX:	
 30689                                  	pop	es
 30690                                  	pop	ax
 30691                                  	retn
 30692                                  
 30693                                  ; -----------------------------------------------------------------------------
 30694                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30695                                  ; -----------------------------------------------------------------------------
 30696                                  ; ENTRY:    ES:0 should point to an MCB
 30697                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30698                                  ; ERROR:    None
 30699                                  ; USES:     Flags
 30700                                  ; -----------------------------------------------------------------------------
 30701                                  
 30702                                  isFrozMCB:
 30703                                  	;push	ax
 30704                                  
 30705                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30706                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30707                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30708                                  	jne	short ifmX
 30709                                  
 30710                                  	;mov	ax,[es:ARENA.NAME+0]
 30711                                  	;cmp	ax,'FR' ; 5246h
 30712                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30713                                  	jne	short ifmX
 30714                                  	;mov	ax,[es:ARENA.NAME+2]
 30715                                  	;cmp	ax,'OZ' ; 5A4Fh
 30716                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30717                                  	jne	short ifmX
 30718                                  	;mov	ax,[es:ARENA.NAME+4]
 30719                                  	;cmp	ax,'EN' ; 4E45h
 30720                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30721                                  	jne	short ifmX
 30722                                  	;mov	ax,[es:ARENA.NAME+6]
 30723                                  	;cmp	ax,'  ' ; 2020h
 30724                                  	cmp	word [es:ARENA.NAME+6],'  '
 30725                                  ifmX:	
 30726                                  	;pop	ax
 30727                                  	retn
 30728                                  
 30729                                  ; -----------------------------------------------------------------------------
 30730                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30731                                  ; -----------------------------------------------------------------------------
 30732                                  ; ENTRY:    ES:0 should point to an MCB
 30733                                  ; EXIT:     None; MCB frozen
 30734                                  ; ERROR:    None
 30735                                  ; USES:     None
 30736                                  ; -----------------------------------------------------------------------------
 30737                                  
 30738                                  frezMCB:
 30739                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30740                                  	mov	word [es:ARENA.NAME+0],'FR'
 30741                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30742                                  	mov	word [es:ARENA.NAME+4],'EN'
 30743                                  	mov	word [es:ARENA.NAME+6],'  '
 30744                                  	retn
 30745                                  
 30746                                  ; -----------------------------------------------------------------------------
 30747                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30748                                  ; -----------------------------------------------------------------------------
 30749                                  ; Entry:  None
 30750                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30751                                  ; Error:  None
 30752                                  ; Uses:   Flags
 30753                                  ; -----------------------------------------------------------------------------
 30754                                  
 30755                                  FreezeUM:
 30756                                  	push	ax
 30757                                  	push	cx
 30758                                  	push	dx
 30759                                  	push	es
 30760                                  
 30761                                  	;call	GetLoadUMB
 30762                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30763                                  
 30764                                  	xor	ah,ah		; Zap ah, so al==ax
 30765                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30766                                  
 30767                                  	call	UmbHead		; Returns first UMB segment in AX
 30768                                  	mov	es,ax
 30769                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30770                                  
 30771                                  ; -----------------------------------------
 30772                                  ; FUM10--ES - Current MCB address
 30773                                  ;        CX - Current UMB number
 30774                                  ;        DX - UMB number to skip (load UMB)
 30775                                  ; -----------------------------------------
 30776                                  
 30777                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30778                                  	jnz	short fum20
 30779                                  
 30780                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30781                                  fum20:	
 30782                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30783                                  	je	short fum30	; freeze anything... so skip that section.
 30784                                  
 30785                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30786                                  	or	word [es:ARENA.OWNER],0
 30787                                  	jnz	short fum30	; either.
 30788                                  
 30789                                  	call	frezMCB
 30790                                  fum30:	
 30791                                  	mov	al,[es:ARENA.SIGNATURE]
 30792                                  	cmp	al,arena_signature_end ; 'Z'
 30793                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30794                                  
 30795                                  	;NextMCB es, ax		; Go on forward.
 30796                                  	mov     ax,es
 30797                                  	;add	ax,[es:3]
 30798                                  	add     ax,[es:ARENA.SIZE]
 30799                                  	inc     ax
 30800                                  	mov     es,ax
 30801                                  	
 30802                                  	jmp	short fum10
 30803                                  
 30804                                  fumX:	pop	es
 30805                                  	pop	dx
 30806                                  	pop	cx
 30807                                  	pop	ax
 30808                                  	retn
 30809                                  
 30810                                  ; -----------------------------------------------------------------------------
 30811                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30812                                  ; -----------------------------------------------------------------------------
 30813                                  ; ENTRY:    None
 30814                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30815                                  ; ERROR:    None
 30816                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30817                                  ; -----------------------------------------------------------------------------
 30818                                  
 30819                                  UmbTest:
 30820                                  	push	ax
 30821                                  	push	bx
 30822                                  	push	ds
 30823                                  	push	es
 30824                                  
 30825                                  	call	fm_link			; Link in UMBs (if not already linked)
 30826                                  	call	WalkMem			; Check to see if they're really linked
 30827                                  	pushf				; And remember what we found out
 30828                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30829                                  	popf				; And restore what we found out.
 30830                                  
 30831                                  	pop	es
 30832                                  	pop	ds
 30833                                  	pop	bx
 30834                                  	pop	ax
 30835                                  	retn
 30836                                  
 30837                                  ; -----------------------------------------------------------------------------
 30838                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30839                                  ; -----------------------------------------------------------------------------
 30840                                  ; ENTRY:    None
 30841                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30842                                  ; ERROR:    None
 30843                                  ; USES:     Flags
 30844                                  ; -----------------------------------------------------------------------------
 30845                                  
 30846                                  WalkMem:
 30847                                  	push	ax ; ?
 30848                                  	push	bx ; ?
 30849                                  	push	es ; ? no need to save contents of these registers ?
 30850                                  		   	
 30851                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30852                                  	int	21h
 30853                                  
 30854                                  	mov	ax,[es:bx-2]
 30855                                  	mov	es,ax
 30856                                  
 30857                                  ; ------------------------------
 30858                                  ; UM10: ES = Current MCB pointer
 30859                                  ; ------------------------------
 30860                                  
 30861                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30862                                  	cmp	al,arena_signature_end ;  'Z'
 30863                                  	je	short um20		; If signature == 'Z', hay no more.
 30864                                  
 30865                                  	;NextMCB es, bx			; Move to the next MCB
 30866                                  
 30867                                  	mov     bx,es
 30868                                  	;add	bx,[es:3]
 30869                                  	add     bx,[es:ARENA.SIZE]
 30870                                  	inc     bx
 30871                                  	mov     es,bx
 30872                                  		
 30873                                  	jmp	short um10		; And restart the loop.
 30874                                  um20:	
 30875                                  	mov	ax,es
 30876                                  
 30877                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30878                                  
 30879                                  	pop	es ; ?
 30880                                  	pop	bx ; ?
 30881                                  	pop	ax ; ?
 30882                                  	retn
 30883                                  
 30884                                  ; -----------------------------------------------------------------------------
 30885                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30886                                  ; -----------------------------------------------------------------------------
 30887                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30888                                  ; EXIT:     None
 30889                                  ; ERROR:    None
 30890                                  ; USES:     AX, BX
 30891                                  ; -----------------------------------------------------------------------------
 30892                                  
 30893                                  hl_unlink:
 30894                                  	xor	bh,bh
 30895                                  
 30896                                  	;getdata bl,fm_umb		; Restore original link-state
 30897                                  	;
 30898                                  	;push	ds
 30899                                  	;push	cs
 30900                                  	;pop	ds
 30901                                  	;mov	bl,[fm_umb]
 30902                                  	;pop	ds
 30903                                  
 30904                                  	mov	bl,[cs:fm_umb]
 30905                                  
 30906                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30907                                  	int	21h
 30908                                  	retn
 30909                                  
 30910                                  ; ----------------------------------------------------------------------
 30911                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30912                                  ; ----------------------------------------------------------------------
 30913                                  ; 09/04/2019 - Retro DOS v4.0
 30914                                  
 30915                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30916                                  ;   Date:     May 14, 1992
 30917                                  
 30918                                  ;   Modification log:
 30919                                  ;
 30920                                  ;     DATE    WHO      DESCRIPTION
 30921                                  ;   --------  -------  --------------------------------------------------------
 30922                                  ;   05/14/92  t-richj  Original
 30923                                  ;   06/21/92  t-richj  Final revisions before check-in
 30924                                  
 30925                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30926                                  
 30927                                  ; -----------------------------------------------------------------------------
 30928                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30929                                  ; -----------------------------------------------------------------------------
 30930                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30931                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30932                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30933                                  ; ERROR:  None
 30934                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30935                                  ; -----------------------------------------------------------------------------
 30936                                  
 30937                                  UnHideUMBs:
 30938                                  	push	ax		; Save ax for what we're about to do
 30939                                  
 30940                                  ; -----------------------------------------------------------------------------
 30941                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30942                                  ;    length of time. Those six constitute a check of whether or not we should
 30943                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30944                                  ;    will destroy the current link-state and memory-allocation strategy after
 30945                                  ;    every command execution.
 30946                                  ; -----------------------------------------------------------------------------
 30947                                  
 30948                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30949                                  	;
 30950                                  	;push	ds
 30951                                  	;push	cs
 30952                                  	;pop	ds
 30953                                  	;mov	al,[fInHigh]
 30954                                  	;pop	ds	
 30955                                  
 30956                                  	mov	al,[cs:fInHigh]
 30957                                  
 30958                                  	or	al,al
 30959                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30960                                  
 30961                                  	pop	ax		; then there's nothing to do here... so
 30962                                  	stc			; restore everything and return. Just like
 30963                                  	retn			; that.
 30964                                  uhu10:	
 30965                                  	call	linkumb		; Make sure UMBs are linked in.
 30966                                  	call	FreeUMBs
 30967                                  
 30968                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30969                                  	;
 30970                                  	;push	es
 30971                                  	;push	cs
 30972                                  	;pop	es
 30973                                  	;mov	byte [es:fInHigh],0
 30974                                  	;pop	ds	
 30975                                  
 30976                                  	mov	byte [cs:fInHigh],0	
 30977                                  
 30978                                  	call	he_unlink	; Unlink UMBs
 30979                                  
 30980                                  	pop	ax
 30981                                  	; 12/12/2022
 30982                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30983                                  	retn
 30984                                  
 30985                                  ; -----------------------------------------------------------------------------
 30986                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30987                                  ; -----------------------------------------------------------------------------
 30988                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30989                                  ; EXIT:     None
 30990                                  ; ERROR:    None
 30991                                  ; USES:     AX, BX
 30992                                  ; -----------------------------------------------------------------------------
 30993                                  
 30994                                  he_unlink:
 30995                                  	xor	bh, bh
 30996                                  
 30997                                  	;getdata bl, fm_umb	; Restore original link-state
 30998                                  	mov	bl,[cs:fm_umb]	
 30999                                  
 31000                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31001                                  	int	21h
 31002                                  	retn
 31003                                  
 31004                                  ; -----------------------------------------------------------------------------
 31005                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 31006                                  ; -----------------------------------------------------------------------------
 31007                                  ; ENTRY:    None
 31008                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 31009                                  ; ERROR:    None (ignore CF)
 31010                                  ; USES:     Flags
 31011                                  ; -----------------------------------------------------------------------------
 31012                                  
 31013                                  FreeUMBs:
 31014                                  	push	ax
 31015                                  	push	es
 31016                                  
 31017                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 31018                                  	jc	short fusX
 31019                                  
 31020                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 31021                                  fus10:	
 31022                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 31023                                  	jnz	short fus20
 31024                                  	call	freeMCB
 31025                                  fus20:	   
 31026                                  	mov	al,[es:ARENA.SIGNATURE]
 31027                                  	cmp	al,arena_signature_end ; 'Z'
 31028                                  	jz	short fusX	; That means this was the last MCB--that's it.
 31029                                  
 31030                                  	mov	ax,es
 31031                                  	add	ax,[es:ARENA.SIZE]
 31032                                  	inc	ax
 31033                                  	mov	es,ax		; Go on forward.
 31034                                  
 31035                                  	jmp	short fus10
 31036                                  fusX:	
 31037                                  	pop	es
 31038                                  	pop	ax
 31039                                  	retn
 31040                                  
 31041                                  ; -----------------------------------------------------------------------------
 31042                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 31043                                  ; -----------------------------------------------------------------------------
 31044                                  ; ENTRY:    ES:0 should point to an MCB
 31045                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 31046                                  ; ERROR:    None
 31047                                  ; USES:     Flags
 31048                                  ; -----------------------------------------------------------------------------
 31049                                  
 31050                                  isHideMCB:
 31051                                  	;push	ax
 31052                                  
 31053                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 31054                                  	jne	short ihm_x				; then check for HIDDEN
 31055                                  
 31056                                  	;mov	ax,[es:ARENA.NAME]
 31057                                  	;cmp	ax,'HI' ; 4948h
 31058                                  	cmp	word [es:ARENA.NAME+0],'HI'
 31059                                  	jne	short ihm_x
 31060                                  	;mov	ax,[es:ARENA.NAME+2]
 31061                                  	;cmp	ax,'DD' ; 4444h
 31062                                  	cmp	word [es:ARENA.NAME+2],'DD'
 31063                                  	jne	short ihm_x
 31064                                  	;mov	ax,[es:ARENA.NAME+4]
 31065                                  	;cmp	ax,'EN' ; 4E45h
 31066                                  	cmp	word [es:ARENA.NAME+4],'EN'
 31067                                  	jne	short ihm_x
 31068                                  	;mov	ax,[es:ARENA.NAME+6]
 31069                                  	;cmp	ax,'  ' ; 2020h
 31070                                  	cmp	word [es:ARENA.NAME+6],'  '
 31071                                  ihm_x:	
 31072                                  	;pop	ax
 31073                                  	retn
 31074                                  
 31075                                  ; -----------------------------------------------------------------------------
 31076                                  ;*** freeMCB - marks as free the MCB at ES:0
 31077                                  ; -----------------------------------------------------------------------------
 31078                                  ; ENTRY:    ES:0 should point to an MCB
 31079                                  ; EXIT:     None; MCB free'd
 31080                                  ; ERROR:    None
 31081                                  ; USES:     AX
 31082                                  ; -----------------------------------------------------------------------------
 31083                                  
 31084                                  freeMCB:
 31085                                  	mov	word [es:ARENA.OWNER],0
 31086                                  	mov	ax,'  '
 31087                                  	mov	[es:ARENA.NAME+0],ax
 31088                                  	mov	[es:ARENA.NAME+2],ax
 31089                                  	mov	[es:ARENA.NAME+4],ax
 31090                                  	mov	[es:ARENA.NAME+6],ax
 31091                                  	retn
 31092                                  
 31093                                  ; -----------------------------------------------------------------------------
 31094                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 31095                                  ; -----------------------------------------------------------------------------
 31096                                  ; ENTRY:  Nothing
 31097                                  ; EXIT:   AX contains 0x9FFF for most systems
 31098                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 31099                                  ; USES:   Flags, AX
 31100                                  ; -----------------------------------------------------------------------------
 31101                                  
 31102                                  HeadUmb:
 31103                                  	; 13/05/2019
 31104                                  
 31105                                  	;push	si ; ?
 31106                                  	;push	ds ; ?
 31107                                  	;push	es
 31108                                  	;push	bx ; *
 31109                                  
 31110                                  	; 09/04/2019
 31111                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 31112                                  
 31113                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31114                                  	int	21h
 31115                                  			; DOS - 2+ internal - GET LIST OF LISTS
 31116                                  			; Return: ES:BX -> DOS list of lists
 31117                                  	;mov	ax,[es:8Ch]
 31118                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 31119                                  	cmp	ax,0FFFFh
 31120                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 31121                                  
 31122                                  	;clc				; Else, it isn't.
 31123                                  	;jmp	short xhu_x
 31124                                  xhu_e:	
 31125                                  	;stc
 31126                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 31127                                  xhu_x:	
 31128                                  	;pop	bx ; *
 31129                                  	;pop	es	
 31130                                  	;pop	ds ; ?
 31131                                  	;pop	si ; ?
 31132                                  	retn
 31133                                  
 31134                                  ; -----------------------------------------------------------------------------
 31135                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 31136                                  ; -----------------------------------------------------------------------------
 31137                                  ; ENTRY:    None
 31138                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 31139                                  ; ERROR:    None
 31140                                  ; USES:     AX, BX, fm_umb
 31141                                  ; -----------------------------------------------------------------------------
 31142                                  
 31143                                  linkumb:
 31144                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 31145                                  	int	21h			; Current link-state is now in al
 31146                                  
 31147                                  	or	al,al			; BUGBUG: proper check?
 31148                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 31149                                  
 31150                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31151                                  	mov	bx,1
 31152                                  	int	21h
 31153                                  lumbX:
 31154                                  	retn
 31155                                  
 31156                                  %endif
 31157                                  
 31158                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31159                                  ; (SYSINIT:2B5Fh)
 31160                                  
 31161                                  ; ----------------------------------------------------------------------
 31162                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 31163                                  ; ----------------------------------------------------------------------
 31164                                  ; 09/04/2019 - Retro DOS v4.0
 31165                                  
 31166                                  ;----------------------------------------------------------------------------
 31167                                  ;
 31168                                  ; procedure : InitDevLoad
 31169                                  ;
 31170                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 31171                                  ;			 = 1 indicates load in UMB:
 31172                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 31173                                  ;		                    = 1 indicates a DOS 5-style load
 31174                                  ;		DevSize  = Size of the device driver file in paras
 31175                                  ;
 31176                                  ;	Output : none
 31177                                  ;
 31178                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 31179                                  ;	Also sets up a header for the Device driver entry for mem utility
 31180                                  ;
 31181                                  ;----------------------------------------------------------------------------
 31182                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 31183                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 31184                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 31185                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 31186                                  ;----------------------------------------------------------------------------
 31187                                  
 31188                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31189                                  InitDevLoad:
 31190                                  	; 11/12/2022
 31191                                  	; ds = cs
 31192 00002771 803E[7D1E]00            	cmp	byte [DeviceHi],0
 31193                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 31194                                  	;je	short InitForLo		; no, init for lo mem
 31195 00002776 741F                    	je	short initforlo_x ; 09/04/2019
 31196                                  
 31197                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31198                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 31199                                  ;	je	short InitForConv
 31200                                  ;
 31201                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 31202                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 31203                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 31204                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 31205                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 31206                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 31207                                  ;
 31208                                  ;	call	ShrinkUMB		; Stop using the old device arena
 31209                                  ;
 31210                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 31211                                  ;	call	FreezeUM		; Hide everything BUT the load area
 31212                                  ;	call	GetUMBForDev		; And grab that load area as needed
 31213                                  ;	pushf
 31214                                  ;	call	UnFreeze		; Then unhide everything frozen
 31215                                  ;	popf
 31216                                  ;
 31217                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 31218                                  ;
 31219                                  ;	jmp	short InitForHi
 31220                                  
 31221                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31222                                  	; (SYSINIT:2B67h)
 31223                                  InitForConv:
 31224                                  	; 11/12/2022
 31225                                  	; ds = cs
 31226 00002778 E83700                  	call	SpaceInUMB		; Do we have space left in the
 31227                                  					;  current UMB ?
 31228 0000277B 7308                    	jnc	short InitForHi		; yes, we have
 31229 0000277D E83D04                  	call	ShrinkUMB		; shrink the current UMB in use
 31230 00002780 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 31231 00002783 720D                    	jc	short InitForLo		; we didn't succeed, so load
 31232                                  					;  in low memory
 31233                                  InitForHi:
 31234                                  	; 11/12/2022
 31235                                  	; ds = cs
 31236                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 31237                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 31238                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 31239 00002785 A1[731E]                	mov	ax,[DevUMBFree]
 31240 00002788 8B16[6F1E]              	mov	dx,[DevUMBAddr]
 31241 0000278C 0316[711E]              	add	dx,[DevUMBSize]
 31242 00002790 EB0C                    	jmp	short idl1
 31243                                  
 31244                                  InitForLo:
 31245                                  	; 11/12/2022
 31246                                  	; ds = cs
 31247                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 31248 00002792 C606[7D1E]00            	mov	byte [DeviceHi],0
 31249                                  initforlo_x:
 31250                                  	; 11/12/2022
 31251                                  	; ds = cs
 31252                                  					;  into UMB indicate that
 31253                                  					;  we are loading low
 31254                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 31255                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 31256 00002797 A1[E003]                	mov	ax,[memhi]
 31257 0000279A 8B16[A302]              	mov	dx,[ALLOCLIM]
 31258                                  idl1:
 31259 0000279E E86600                  	call	DevSetMark		; setup a sub-arena for DD
 31260                                  	; 11/12/2022
 31261                                  	; ds = cs
 31262                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 31263                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 31264                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 31265                                  	;mov	[cs:DevEntry+2],ax
 31266 000027A1 A3[621E]                	mov	[DevLoadAddr],ax
 31267 000027A4 8916[641E]              	mov	[DevLoadEnd],dx
 31268 000027A8 C706[661E]0000          	mov	word [DevEntry],0
 31269 000027AE A3[681E]                	mov	[DevEntry+2],ax
 31270 000027B1 C3                      	retn
 31271                                  
 31272                                  ;----------------------------------------------------------------------------
 31273                                  ;
 31274                                  ; procedure : SpaceInUMB?
 31275                                  ;
 31276                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 31277                                  ;	Output : Carry set if no space in UMB
 31278                                  ;		 Carry clear if Space is available for the device in
 31279                                  ;		   current UMB
 31280                                  ;
 31281                                  ;----------------------------------------------------------------------------
 31282                                  
 31283                                  SpaceInUMB:
 31284                                  	; 11/12/2022
 31285                                  	; ds = cs
 31286                                  	;mov	ax,[cs:DevUMBSize]
 31287                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 31288                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 31289 000027B2 A1[711E]                	mov	ax,[DevUMBSize]
 31290 000027B5 0306[6F1E]              	add	ax,[DevUMBAddr]		; End of UMB
 31291 000027B9 2B06[731E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 31292                                  	; 11/12/2022
 31293                                  	;or	ax,ax			; Nospace ?
 31294                                  	;jnz	short spcinumb1
 31295                                  	;stc
 31296                                  	;retn
 31297                                  	; 11/12/2022
 31298 000027BD 83F801                  	cmp	ax,1
 31299 000027C0 7205                    	jb	short spcinumb2	; cf=1
 31300                                  spcinumb1:
 31301 000027C2 48                      	dec	ax			; space for sub-arena
 31302                                  	; 11/12/2022
 31303                                  	; ds = cs
 31304 000027C3 3B06[601E]              	cmp	ax,[DevSize]
 31305                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 31306                                  spcinumb2:
 31307 000027C7 C3                      	retn
 31308                                  
 31309                                  ;----------------------------------------------------------------------------
 31310                                  ;
 31311                                  ; procedure : PrepareMark
 31312                                  ;
 31313                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 31314                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 31315                                  ;
 31316                                  ;----------------------------------------------------------------------------
 31317                                  
 31318                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31319                                  ;
 31320                                  ;PrepareMark:
 31321                                  ;	push	ds
 31322                                  ;	mov	ds,ax
 31323                                  ;	mov	word [ARENA.OWNER],8
 31324                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 31325                                  ;	pop	ds
 31326                                  ;
 31327                                  ;	inc	ax
 31328                                  ;	mov	[cs:DevUMBAddr],ax
 31329                                  ;	mov	[cs:DevUMBFree],ax
 31330                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31331                                  ;	retn
 31332                                  
 31333                                  ;----------------------------------------------------------------------------
 31334                                  ;
 31335                                  ; procedure : GetUMBForDev
 31336                                  ;
 31337                                  ;	Input : DevSize
 31338                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 31339                                  ;		 the device.
 31340                                  ;		 If success carry clear
 31341                                  ;
 31342                                  ;	Allocates the biggest UMB for loading devices and updates
 31343                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 31344                                  ;	UMB.
 31345                                  ;
 31346                                  ;	This routine relies on the fact that all of the low memory
 31347                                  ;	is allocated, and any DOS alloc calls should return memory
 31348                                  ;	from the UMB pool.
 31349                                  ;
 31350                                  ;----------------------------------------------------------------------------
 31351                                  
 31352                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31353                                  	; (SYSINIT:2BC6h)
 31354                                  
 31355                                  GetUMBForDev:
 31356                                  	; 11/12/2022
 31357                                  	; ds = cs
 31358 000027C8 BBFFFF                  	mov	bx,0FFFFh
 31359 000027CB B80048                  	mov	ax,4800h
 31360 000027CE CD21                    	int	21h
 31361                                  		; DOS - 2+ - ALLOCATE MEMORY
 31362                                  		; BX = number of 16-byte paragraphs desired
 31363                                  
 31364 000027D0 09DB                    	or	bx,bx
 31365                                  	;jz	short gufd_err
 31366                                  	; 09/09/2023
 31367 000027D2 742E                    	jz	short gufd_error ; bx = 0
 31368                                  
 31369 000027D4 4B                      	dec	bx
 31370                                  	; 11/12/2022
 31371                                  	; ds = cs
 31372 000027D5 391E[601E]              	cmp	[DevSize],bx
 31373                                  	;cmp	[cs:DevSize],bx
 31374 000027D9 7725                    	ja	short gufd_err
 31375                                  
 31376 000027DB 43                      	inc	bx
 31377                                  
 31378 000027DC B80048                  	mov	ax,4800h
 31379 000027DF CD21                    	int	21h
 31380 000027E1 721D                    	jc	short gufd_err
 31381                                  
 31382                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31383                                  	;dec	ax
 31384                                  	;call	PrepareMark
 31385                                  	;
 31386                                  PrepareMark:
 31387 000027E3 1E                      	push	ds
 31388 000027E4 48                      	dec	ax
 31389 000027E5 8ED8                    	mov	ds,ax
 31390 000027E7 C70601000800            	mov	word [ARENA.OWNER],8
 31391 000027ED C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 31392 000027F3 40                      	inc	ax
 31393 000027F4 1F                      	pop	ds
 31394                                  	; 11/12/2022
 31395                                  	; ds = cs
 31396                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31397                                  	;mov	[cs:DevUMBAddr],ax
 31398                                  	;mov	[cs:DevUMBFree],ax
 31399                                  gufd_x:		; 09/09/2023
 31400 000027F5 891E[711E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 31401 000027F9 A3[6F1E]                	mov	[DevUMBAddr],ax
 31402 000027FC A3[731E]                	mov	[DevUMBFree],ax
 31403                                  	;
 31404                                  	; 11/12/2022
 31405                                  	; cf=0
 31406                                  	;clc				; mark no error
 31407 000027FF C3                      	retn
 31408                                  
 31409                                  	; 09/09/2023
 31410                                  %if 1
 31411                                  gufd_err:
 31412 00002800 31DB                    	xor	bx,bx ; 0
 31413                                  gufd_error:
 31414 00002802 31C0                    	xor	ax,ax ; 0
 31415 00002804 F9                      	stc	; cf=1
 31416 00002805 EBEE                    	jmp	short gufd_x	
 31417                                  %endif
 31418                                  
 31419                                  ; 09/09/2023
 31420                                  %if 0
 31421                                  gufd_err:
 31422                                  	xor	ax,ax ; 0
 31423                                  	; 11/12/2022
 31424                                  	; ds = cs
 31425                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 31426                                  	;mov	[cs:DevUMBAddr],ax
 31427                                  	;mov	[cs:DevUMBFree],ax
 31428                                  	mov	[DevUMBSize],ax		; erase the previous values
 31429                                  	mov	[DevUMBAddr],ax
 31430                                  	mov	[DevUMBFree],ax
 31431                                  	stc
 31432                                  	retn
 31433                                  %endif
 31434                                  
 31435                                  ;----------------------------------------------------------------------------
 31436                                  ;
 31437                                  ; procedure : DevSetMark
 31438                                  ;
 31439                                  ;	Input : AX - Free segment were device is going to be loaded
 31440                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 31441                                  ;
 31442                                  ;	Creates a sub-arena for the device driver
 31443                                  ;	puts 'D' marker in the sub-arena
 31444                                  ;	Put the owner of the sub-arena as (AX+1)
 31445                                  ;	Copies the file name into sub-arena name field
 31446                                  ;
 31447                                  ;	Size field of the sub-arena will be set only at succesful
 31448                                  ;	completion of Device load.
 31449                                  ;
 31450                                  ;----------------------------------------------------------------------------
 31451                                  
 31452                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31453                                  	; (SYSINIT:2C13h)
 31454                                  
 31455                                  DevSetMark:
 31456 00002807 06                      	push	es
 31457 00002808 57                      	push	di
 31458 00002809 1E                      	push	ds
 31459 0000280A 56                      	push	si
 31460 0000280B 8EC0                    	mov	es,ax
 31461 0000280D 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 31462 00002813 40                      	inc	ax
 31463 00002814 26A30100                	mov	[es:devmark.seg],ax
 31464                                  
 31465                                  ;-------------- Copy file name
 31466                                  
 31467 00002818 50                      	push	ax			; save load addr
 31468                                  
 31469                                  	; 09/09/2023
 31470                                  	; ds = cs
 31471                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 31472 00002819 C536[F803]              	lds	si,[bpb_addr]
 31473                                  
 31474 0000281D 89F7                    	mov	di,si
 31475 0000281F FC                      	cld
 31476                                  dsm_again:
 31477 00002820 AC                      	lodsb
 31478 00002821 3C3A                    	cmp	al,':'
 31479 00002823 7504                    	jne	short isit_slash
 31480 00002825 89F7                    	mov	di,si
 31481 00002827 EBF7                    	jmp	short dsm_again
 31482                                  isit_slash:
 31483 00002829 3C5C                    	cmp	al, '\'
 31484 0000282B 7504                    	jne	short isit_null
 31485 0000282D 89F7                    	mov	di,si
 31486 0000282F EBEF                    	jmp	short dsm_again
 31487                                  isit_null:
 31488 00002831 08C0                    	or	al,al
 31489 00002833 75EB                    	jnz	short dsm_again
 31490 00002835 89FE                    	mov	si,di
 31491                                  
 31492 00002837 BF0800                  	mov	di,devmark.filename ; 8
 31493 0000283A B90800                  	mov	cx,8			; maximum 8 characters
 31494                                  dsm_next_char:
 31495 0000283D AC                      	lodsb
 31496 0000283E 08C0                    	or	al, al
 31497 00002840 7407                    	jz	short blankout
 31498 00002842 3C2E                    	cmp	al, '.'
 31499 00002844 7403                    	je	short blankout
 31500 00002846 AA                      	stosb
 31501 00002847 E2F4                    	loop	dsm_next_char
 31502                                  blankout:
 31503 00002849 E304                    	jcxz	dsm_exit
 31504 0000284B B020                    	mov	al, ' '
 31505 0000284D F3AA                    	rep	stosb			; blank out the rest
 31506                                  dsm_exit:
 31507 0000284F 58                      	pop	ax			; restore load addr
 31508 00002850 5E                      	pop	si
 31509 00002851 1F                      	pop	ds
 31510 00002852 5F                      	pop	di
 31511 00002853 07                      	pop	es
 31512 00002854 C3                      	retn
 31513                                  
 31514                                  ;----------------------------------------------------------------------------
 31515                                  ;
 31516                                  ; procedure : SizeDevice
 31517                                  ;
 31518                                  ;	Input : ES:SI - points to device file to be sized
 31519                                  ;
 31520                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 31521                                  ;
 31522                                  ;	Calculates the size of the device file in paras and stores it
 31523                                  ;	in DevSize
 31524                                  ;
 31525                                  ;----------------------------------------------------------------------------
 31526                                  
 31527                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31528                                  SizeDevice:
 31529                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31530                                  	; 11/12/2022 ; *
 31531 00002855 1E                      	push	ds ; *
 31532 00002856 06                      	push	es
 31533 00002857 1F                      	pop	ds
 31534 00002858 89F2                    	mov	dx,si			; ds:dx -> file name
 31535 0000285A B8003D                  	mov	ax,3D00h		; open
 31536 0000285D CD21                    	int	21h
 31537 0000285F 7243                    	jc	short sd_err		; open failed
 31538                                  
 31539 00002861 89C3                    	mov	bx,ax			; BX - file handle
 31540 00002863 B80242                  	mov	ax,4202h		; seek
 31541 00002866 31C9                    	xor	cx,cx
 31542 00002868 89CA                    	mov	dx,cx			; to end of file
 31543 0000286A CD21                    	int	21h
 31544 0000286C 722F                    	jc	short sd_close		; did seek fail (impossible)
 31545 0000286E 83C00F                  	add	ax,15			; para convert
 31546 00002871 83D200                  	adc	dx,0
 31547 00002874 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 31548 00002878 7409                    	jz	short szdev1		; no
 31549 0000287A 2EC706[601E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 31550                                  					; assuming that we fail later
 31551 00002881 EB1A                    	jmp	short sd_close
 31552                                  szdev1:
 31553 00002883 B104                    	mov	cl,4			; convert it to paras
 31554 00002885 D3E8                    	shr	ax,cl
 31555 00002887 B10C                    	mov	cl,12
 31556 00002889 D3E2                    	shl	dx,cl
 31557 0000288B 09D0                    	or	ax,dx
 31558                                  	;
 31559                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31560 0000288D 2E3B06[7E1E]            	cmp     ax,[cs:DevSizeOption]
 31561                                  	;ja	short szdev2
 31562                                  	; 14/08/2023
 31563 00002892 7305                    	jnb	short szdev2
 31564                                  
 31565 00002894 2EA1[7E1E]              	mov     ax,[cs:DevSizeOption]
 31566                                  	; 12/12/2022
 31567 00002898 F8                      	clc
 31568                                  szdev2:
 31569 00002899 2EA3[601E]              	mov	[cs:DevSize],ax		; save file size
 31570                                  
 31571                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31572                                  	; 12/12/2022
 31573                                  	; cf=0
 31574                                  	;clc
 31575                                  sd_close:
 31576 0000289D 9C                      	pushf				; let close not spoil our
 31577                                  					;  carry flag
 31578 0000289E B8003E                  	mov	ax,3E00h		; close
 31579 000028A1 CD21                    	int	21h			; we are not checking for err
 31580 000028A3 9D                      	popf
 31581                                  sd_err:
 31582                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31583                                  	; 11/12/2022 ; *
 31584 000028A4 1F                      	pop     ds ; *
 31585 000028A5 C3                      	retn
 31586                                  
 31587                                  ;----------------------------------------------------------------------------
 31588                                  ;
 31589                                  ; procedure : ExecDev
 31590                                  ;
 31591                                  ;	Input : ds:dx -> device to be executed
 31592                                  ;		DevLoadAddr - contains where device has to be loaded
 31593                                  ;
 31594                                  ;	Output : Carry if error
 31595                                  ;		 Carry clear if no error
 31596                                  ;
 31597                                  ;	Loads a device driver using the 4b03h function call
 31598                                  ;
 31599                                  ;----------------------------------------------------------------------------
 31600                                  
 31601                                  	; 01/11/2022
 31602                                  ExecDev:
 31603 000028A6 2E8B1E[621E]            	mov	bx,[cs:DevLoadAddr]
 31604 000028AB 2E891E[791E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 31605                                  					;  block for exec with
 31606                                  					;  Load address
 31607 000028B0 2E891E[7B1E]            	mov	[cs:DevExecReloc],bx
 31608 000028B5 8CCB                    	mov	bx,cs
 31609 000028B7 8EC3                    	mov	es,bx
 31610 000028B9 BB[791E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 31611 000028BC B003                    	mov	al,3	; (load program only)
 31612 000028BE B44B                    	mov	ah,EXEC ; 4Bh
 31613 000028C0 CD21                    	int	21h			;load in the device driver
 31614                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 31615                                  		; DS:DX -> ASCIZ filename
 31616                                  		; ES:BX -> parameter block
 31617                                  		; AL = subfunction 
 31618 000028C2 C3                      	retn
 31619                                  
 31620                                  ;----------------------------------------------------------------------------
 31621                                  ;
 31622                                  ; procedure : RetFromUM
 31623                                  ;
 31624                                  ;	Input : None
 31625                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 31626                                  ;		 ConvLoad clear if did.
 31627                                  ;
 31628                                  ;	Prepares memory for more devices after returning from loading one
 31629                                  ;	using the DOS 6 options (/L:... etc).
 31630                                  ;
 31631                                  ;----------------------------------------------------------------------------
 31632                                  
 31633                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31634                                  ;RetFromUM:
 31635                                  ;	pushf
 31636                                  ;	mov	byte [cs:ConvLoad],1
 31637                                  ;	call	UnHideUMBs
 31638                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 31639                                  ;	mov	byte [cs:ConvLoad],0
 31640                                  ;rfUM1:	
 31641                                  ;	popf
 31642                                  ;	retn
 31643                                  
 31644                                  ;----------------------------------------------------------------------------
 31645                                  ;
 31646                                  ; procedure : RemoveNull
 31647                                  ;
 31648                                  ;	Input : ES:SI points to a null terminated string
 31649                                  ;
 31650                                  ;	Output : none
 31651                                  ;
 31652                                  ;	Replaces the null at the end of a string with blank
 31653                                  ;
 31654                                  ;----------------------------------------------------------------------------
 31655                                  
 31656                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31657                                  	; (SYSINIT:2CCEh)
 31658                                  RemoveNull:
 31659                                  	; 11/12/2022
 31660                                  	; ds = cs
 31661                                  rn_next:
 31662 000028C3 268A1C                  	mov	bl,[es:si]
 31663 000028C6 08DB                    	or	bl,bl			; null ?
 31664 000028C8 7403                    	jz	short rn_gotnull
 31665 000028CA 46                      	inc	si			; advance the pointer
 31666 000028CB EBF6                    	jmp	short rn_next
 31667                                  rn_gotnull:
 31668                                  	; 11/12/2022
 31669 000028CD 8A1E[921E]              	mov	bl,[DevSavedDelim]
 31670                                  	;mov	bl,[cs:DevSavedDelim]
 31671 000028D1 26881C                  	mov	[es:si],bl		; replace null with blank
 31672                                  	; 02/11/2022
 31673                                  ; 11/12/2022
 31674                                  rba_ok:		; 10/04/2019
 31675 000028D4 C3                      	retn
 31676                                  
 31677                                  ;----------------------------------------------------------------------------
 31678                                  ;
 31679                                  ; procedure : RoundBreakAddr
 31680                                  ;
 31681                                  ;	Input : DevBrkAddr
 31682                                  ;	Output : DevBrkAddr
 31683                                  ;
 31684                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 31685                                  ;
 31686                                  ;----------------------------------------------------------------------------
 31687                                  
 31688                                  RoundBreakAddr:
 31689 000028D5 2EA1[6A1E]              	mov	ax,[cs:DevBrkAddr]
 31690 000028D9 E8C8E7                  	call	ParaRound
 31691 000028DC 2E0106[6C1E]            	add	[cs:DevBrkAddr+2],ax
 31692 000028E1 2EC706[6A1E]0000        	mov	word [cs:DevBrkAddr],0
 31693 000028E8 2EA1[641E]              	mov	ax,[cs:DevLoadEnd]
 31694 000028EC 2E3906[6C1E]            	cmp	[cs:DevBrkAddr+2],ax
 31695 000028F1 76E1                    	jbe	short rba_ok
 31696 000028F3 E95E07                  	jmp	mem_err
 31697                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31698                                  	; 11/12/2022
 31699                                  ;rba_ok:
 31700                                  ;	retn
 31701                                  
 31702                                  ;----------------------------------------------------------------------------
 31703                                  ;
 31704                                  ; procedure : DevSetBreak
 31705                                  ;
 31706                                  ;	Input : DevBrkAddr
 31707                                  ;	Output : Carry set if Device returned Init failed
 31708                                  ;		 Else carry clear
 31709                                  ;
 31710                                  ;----------------------------------------------------------------------------
 31711                                  
 31712                                  DevSetBreak:
 31713 000028F6 50                      	push	ax
 31714                                  
 31715 000028F7 2EA1[6C1E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31716 000028FB 2E803E[0D14]00          	cmp	byte [cs:multdeviceflag],0
 31717 00002901 750F                    	jne	short set_break_continue ;do not check it.
 31718 00002903 2E3B06[621E]            	cmp	ax,[cs:DevLoadAddr]
 31719 00002908 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31720                                  
 31721                                  	;cmp	word [cs:DevBrkAddr],0
 31722                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31723                                  	; 12/12/2022
 31724 0000290A 2E833E[6A1E]01          	cmp	word [cs:DevBrkAddr],1
 31725 00002910 7204                    	jb	short break_failed
 31726                                  
 31727                                  set_break_continue:
 31728 00002912 E8C0FF                  	call	RoundBreakAddr
 31729                                  	; 12/12/2022
 31730 00002915 F8                      	clc
 31731                                  break_failed:
 31732 00002916 58                      	pop	ax
 31733                                  	;clc
 31734 00002917 C3                      	retn
 31735                                  
 31736                                  	; 12/12/2022
 31737                                  ;break_failed:
 31738                                  	;pop	ax
 31739                                  	;stc
 31740                                  	;retn
 31741                                  
 31742                                  ;----------------------------------------------------------------------------
 31743                                  ;
 31744                                  ; procedure : DevBreak
 31745                                  ;
 31746                                  ;	Input : DevLoadAddr & DevBrkAddr
 31747                                  ;	Output : none
 31748                                  ;
 31749                                  ;	Marks a succesful install of a device driver
 31750                                  ;	Sets device size field in sub-arena &
 31751                                  ;	Updates Free ptr in UMB or adjusts memhi
 31752                                  ;
 31753                                  ;----------------------------------------------------------------------------
 31754                                  
 31755                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31756                                  DevBreak:
 31757                                  	;push	ds ; 11/12/2022
 31758                                  
 31759                                  	; 11/12/2022
 31760 00002918 0E                      	push	cs
 31761 00002919 1F                      	pop	ds
 31762                                  	;mov	ax,[cs:DevLoadAddr]
 31763                                  	;mov	bx,[cs:DevBrkAddr+2]
 31764 0000291A A1[621E]                	mov	ax,[DevLoadAddr]
 31765 0000291D 8B1E[6C1E]              	mov	bx,[DevBrkAddr+2]
 31766                                  	; 11/12/2022
 31767 00002921 1E                      	push	ds
 31768                                  
 31769 00002922 48                      	dec	ax			; seg of sub-arena
 31770 00002923 8ED8                    	mov	ds,ax
 31771 00002925 40                      	inc	ax			; Back to Device segment
 31772 00002926 29D8                    	sub	ax,bx
 31773 00002928 F7D8                    	neg	ax			; size of device in paras
 31774 0000292A A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31775                                  	
 31776                                  	; 11/12/2022
 31777 0000292D 1F                      	pop	ds
 31778                                  	; ds = cs
 31779                                   	
 31780 0000292E 803E[7D1E]00            	cmp	byte [DeviceHi],0
 31781                                  	;cmp	byte [cs:DeviceHi],0
 31782 00002933 7405                    	je	short db_lo
 31783                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31784                                  	;jmp	short db_exit
 31785                                  	; 11/12/2022
 31786 00002935 891E[731E]              	mov	[DevUMBFree],bx
 31787 00002939 C3                      	retn	
 31788                                  db_lo:
 31789                                  	; 11/12/2022
 31790                                  	; ds = cs
 31791                                  	;mov	[cs:memhi],bx
 31792                                  	;mov	word [cs:memlo],0
 31793 0000293A 891E[E003]              	mov	[memhi],bx
 31794 0000293E C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31795                                  db_exit:
 31796                                  	;pop	ds ; 11/12/2022
 31797                                  	; 17/09/2023
 31798                                  ;sd_ret:	; 09/09/2023
 31799 00002944 C3                      	retn
 31800                                  
 31801                                  ; 10/04/2019 - Retro DOS v4.0
 31802                                  
 31803                                  ;----------------------------------------------------------------------------
 31804                                  ;
 31805                                  ; procedure : ParseSize
 31806                                  ;
 31807                                  ;	Parses the command line for SIZE= command
 31808                                  ;
 31809                                  ;	ES:SI = command line to parsed
 31810                                  ;
 31811                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31812                                  ;	updates the DevSizeOption variable with value supplied
 31813                                  ;	in SIZE=option
 31814                                  ;	Returns carry if the SIZE option was invalid
 31815                                  ;
 31816                                  ;----------------------------------------------------------------------------
 31817                                  
 31818                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31819                                  	; (SYSINIT:2D5Ah)
 31820                                  
 31821                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization & BugFix)
 31822                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 31823                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 31824                                  ParseSize:
 31825                                  	;push	bx
 31826                                  	;mov	bx,si
 31827                                  
 31828                                  	; 09/09/2023
 31829 00002945 56                      	push	si ; * ; mov bx,si
 31830                                  
 31831                                  	; 11/12/2022
 31832                                  	; ds = cs
 31833                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31834                                  	;mov	[cs:DevCmdLine],si
 31835                                  	;mov	[cs:DevCmdLine+2],es
 31836 00002946 C706[7E1E]0000          	mov	word [DevSizeOption],0 ; init the value
 31837 0000294C 8936[8E1E]              	mov	[DevCmdLine],si
 31838 00002950 8C06[901E]              	mov	[DevCmdLine+2],es	
 31839 00002954 E82400                  	call	SkipDelim
 31840 00002957 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31841 0000295C 7528                    	jne	short ps_no_size
 31842 0000295E 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31843 00002964 7520                    	jne	short ps_no_size
 31844 00002966 268A4404                	mov	al,[es:si+4]
 31845 0000296A E85306                  	call	delim
 31846                                  	;jne	short ps_no_size
 31847                                  	; 22/07/2023 - 09/09/2023 (cf=0)
 31848 0000296D 7518                    	jne	short ps_no_size_2 ; cf=0 here
 31849 0000296F 83C605                  	add	si,5
 31850 00002972 E81400                  	call	GetHexNum
 31851 00002975 7210                    	jc	short ps_err
 31852                                  	; 11/12/2022
 31853                                  	; ds = cs
 31854                                  	;mov	[cs:DevSizeOption],ax
 31855 00002977 A3[7E1E]                	mov	[DevSizeOption],ax
 31856                                  	
 31857                                  	; 09/09/2023
 31858 0000297A 58                      	pop	ax  ; * (discard previous si value on top of stack)
 31859                                  
 31860                                  ;	call	SkipDelim ; **
 31861                                  ;	
 31862                                  ;	; 22/07/2023
 31863                                  ;;ps_no_size_2:
 31864                                  ;	; cf = 0
 31865                                  ;	retn
 31866                                  
 31867                                  	; 09/09/2023
 31868                                  	;jmp	short SkipDelim
 31869                                  
 31870                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 31871                                  %if 1
 31872                                  	; 01/11/2022
 31873                                  SkipDelim:
 31874                                  sd_next_char:
 31875 0000297B 268A04                  	mov	al,[es:si]
 31876 0000297E E83F06                  	call	delim
 31877 00002981 7505                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 31878 00002983 46                      	inc	si
 31879 00002984 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31880                                  	; 11/12/2022
 31881                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31882                                  ;sd_ret:
 31883                                  	;retn
 31884                                  %endif
 31885                                  
 31886                                  	;;;call	SkipDelim ; **
 31887                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31888                                  	;mov	bx,si
 31889                                  ps_no_size:
 31890                                  	;mov	si,bx
 31891                                  	;pop	bx
 31892 00002986 F8                      	clc	; cf=0
 31893                                  	;retn
 31894                                  	; 11/12/2022
 31895                                  ps_err:		; cf=1
 31896                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 31897                                  	; 09/09/2023
 31898 00002987 5E                      	pop	si ; * ; mov si,bx
 31899                                  	; 17/09/2023
 31900                                  sd_ret:	; cf=?
 31901 00002988 C3                      	retn
 31902                                  
 31903                                  ;ps_err:
 31904                                  	; 02/11/2022
 31905                                  	;pop	bx
 31906                                  	;stc
 31907                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31908                                  	; 11/12/2022
 31909                                  	; cf=1
 31910                                  	;stc
 31911                                  	; 11/12/2022
 31912                                  ;sd_ret: 
 31913                                  	; 22/07/2023
 31914                                  	; 12/04/2019
 31915                                  	;retn
 31916                                  
 31917                                  ; 12/04/2019 - Retro DOS v4.0
 31918                                  
 31919                                  ;----------------------------------------------------------------------------
 31920                                  ;
 31921                                  ; procedure : SkipDelim
 31922                                  ;
 31923                                  ;	Skips delimiters in the string pointed to by ES:SI
 31924                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31925                                  ;
 31926                                  ;----------------------------------------------------------------------------
 31927                                  
 31928                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 31929                                  %if 0
 31930                                  	; 01/11/2022
 31931                                  SkipDelim:
 31932                                  sd_next_char:
 31933                                  	mov	al,[es:si]
 31934                                  	call	delim
 31935                                  	jnz	short sd_ret
 31936                                  	inc	si
 31937                                  	jmp	short sd_next_char ; 01/11/2022
 31938                                  	; 11/12/2022
 31939                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31940                                  ;sd_ret:
 31941                                  	;retn
 31942                                  %endif
 31943                                  
 31944                                  ;----------------------------------------------------------------------------
 31945                                  ;
 31946                                  ; procedure : GetHexNum
 31947                                  ;
 31948                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31949                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31950                                  ;
 31951                                  ;	Returns in AX the number number of paras equivalent to the
 31952                                  ;	hex number of bytes specified by the hexadecimal string.
 31953                                  ;
 31954                                  ;	Returns carry in case it encountered a non-hex character or
 31955                                  ;	if it encountered crlf
 31956                                  ;
 31957                                  ;----------------------------------------------------------------------------
 31958                                  
 31959                                  ; 13/05/2019
 31960                                  
 31961                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31962                                  	; (SYSINIT:2DA5h)
 31963                                  GetHexNum:
 31964 00002989 31C0                    	xor	ax,ax
 31965 0000298B 31D2                    	xor	dx,dx
 31966                                  ghn_next:
 31967 0000298D 268A1C                  	mov	bl,[es:si]
 31968 00002990 80FB0D                  	cmp	bl,cr  ; 0Dh
 31969 00002993 7436                    	je	short ghn_err
 31970 00002995 80FB0A                  	cmp	bl,lf  ; 0Ah
 31971 00002998 7431                    	je	short ghn_err
 31972 0000299A 50                      	push	ax
 31973 0000299B 88D8                    	mov	al,bl
 31974 0000299D E82006                  	call	delim
 31975 000029A0 58                      	pop	ax
 31976                                  	; 04/01/2023
 31977 000029A1 B90400                  	mov	cx,4
 31978 000029A4 7410                    	jz	short ghn_into_paras
 31979 000029A6 E82400                  	call	GetNibble
 31980                                  	;jc	short ghn_err
 31981                                  	; 11/12/2022
 31982 000029A9 7221                    	jc	short ghn_ret ; cf=1
 31983                                  	; 04/01/2023
 31984                                  	;mov	cx,4
 31985                                  ghn_shift1:
 31986 000029AB D1E0                    	shl	ax,1
 31987 000029AD D1D2                    	rcl	dx,1
 31988 000029AF E2FA                    	loop	ghn_shift1
 31989 000029B1 08D8                    	or	al,bl
 31990 000029B3 46                      	inc	si
 31991 000029B4 EBD7                    	jmp	short ghn_next
 31992                                  ghn_into_paras:
 31993 000029B6 83C00F                  	add	ax,15
 31994 000029B9 83D200                  	adc	dx,0
 31995 000029BC F7C2F0FF                	test	dx,0FFF0h
 31996 000029C0 7509                    	jnz	short ghn_err
 31997                                  	; 04/01/2023
 31998                                  	;mov	cx,4
 31999                                  ghn_shift2:
 32000 000029C2 F8                      	clc
 32001 000029C3 D1DA                    	rcr	dx,1
 32002 000029C5 D1D8                    	rcr	ax,1
 32003 000029C7 E2F9                    	loop	ghn_shift2
 32004 000029C9 F8                      	clc
 32005 000029CA C3                      	retn
 32006                                  	; 11/12/2022
 32007                                  ghn_err:
 32008                                  gnib_err:
 32009 000029CB F9                      	stc
 32010                                  ghn_ret:
 32011                                  gnib_ret:
 32012 000029CC C3                      	retn
 32013                                  
 32014                                  ;----------------------------------------------------------------------------
 32015                                  ;
 32016                                  ; procedure : GetNibble
 32017                                  ;
 32018                                  ;	Convert one nibble (hex digit) in BL into binary
 32019                                  ;
 32020                                  ;	Retruns binary value in BL
 32021                                  ;
 32022                                  ;	Returns carry if BL contains non-hex digit
 32023                                  ;
 32024                                  ;----------------------------------------------------------------------------
 32025                                  
 32026                                  GetNibble:
 32027 000029CD 80FB30                  	cmp	bl,'0'
 32028                                  	;jb	short gnib_err
 32029                                  	; 11/12/2022
 32030 000029D0 72FA                    	jb	short gnib_ret ; cf=1
 32031 000029D2 80FB39                  	cmp	bl,'9'
 32032 000029D5 7704                    	ja	short is_it_hex
 32033 000029D7 80EB30                  	sub	bl,'0'		; clc
 32034 000029DA C3                      	retn
 32035                                  is_it_hex:
 32036 000029DB 80FB41                  	cmp	bl,'A'
 32037                                  	;jb	short gnib_err
 32038                                  	; 11/12/2022
 32039 000029DE 72EC                    	jb	short gnib_ret ; cf=1
 32040 000029E0 80FB46                  	cmp	bl,'F'
 32041 000029E3 77E6                    	ja	short gnib_err ; 11/12/2022
 32042 000029E5 80EB37                  	sub	bl,'A'- 10	; clc
 32043 000029E8 C3                      	retn
 32044                                  
 32045                                  	; 11/12/2022
 32046                                  ;gnib_err:
 32047                                  ;	stc
 32048                                  ;gnib_ret:
 32049                                  ;	retn
 32050                                  
 32051                                  ;============================================================================
 32052                                  
 32053                                  ; 12/04/2019 - Retro DOS v4.0
 32054                                  
 32055                                  ; umb.inc (MSDOS 6.0, 1991)
 32056                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 32057                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 32058                                  
 32059                                  XMM_REQUEST_UMB	equ 10h
 32060                                  XMM_RELEASE_UMB	equ 11h
 32061                                  
 32062                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32063                                  
 32064                                  ;---------------------------------------------------------------------------
 32065                                  ;
 32066                                  ; Procedure Name	: umb_insert
 32067                                  ;
 32068                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 32069                                  ;			: BX = seg address of UMB to be linked in
 32070                                  ;			: DX = size of UMB to be linked in paras
 32071                                  ;			; DS = data
 32072                                  ;
 32073                                  ; Outputs		: links the UMB into the arena chain
 32074                                  ;
 32075                                  ; Uses			: AX, CX, ES, DX, BX
 32076                                  ;
 32077                                  ;---------------------------------------------------------------------------
 32078                                  
 32079                                  umb_insert:
 32080 000029E9 1E                      	push	ds
 32081                                  
 32082                                  	; 31/12/2022
 32083                                  	; ds = cs
 32084                                  
 32085                                  	;mov	ds,[cs:DevDOSData]
 32086 000029EA 8E1E[8C1E]              	mov	ds,[DevDOSData] ; 31/12/2022 
 32087                                  	;mov	ds,[8Ch]
 32088 000029EE 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 32089 000029F2 8CD8                    	mov	ax,ds
 32090 000029F4 8EC0                    	mov	es,ax
 32091                                  ui_next:
 32092 000029F6 39D8                    	cmp	ax,bx			; Q: is current block above
 32093                                  					;    new block
 32094 000029F8 770F                    	ja	short ui_insert		; Y: insert it
 32095                                  					; Q: is current block the
 32096                                  					;    last
 32097 000029FA 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32098 00002A00 745C                    	je	short ui_append		; Y: append new block to chain
 32099                                  					; N: get next block
 32100 00002A02 8ED8                    	mov	ds,ax			; M005
 32101                                  	;call	get_next		; ax = es = next block
 32102 00002A04 E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 32103 00002A07 EBED                    	jmp	short ui_next
 32104                                  
 32105                                  ui_insert:
 32106 00002A09 8CD9                    	mov	cx,ds			; ds = previous arena
 32107 00002A0B 41                      	inc	cx			; top of previous block
 32108                                  
 32109 00002A0C 29D9                    	sub	cx,bx
 32110 00002A0E F7D9                    	neg	cx			; cx = size of used block
 32111                                  	;mov	byte [0],'M'
 32112 00002A10 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32113                                  	;mov	word [1],8
 32114 00002A15 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 32115                                  	;mov	[3],cx
 32116 00002A1B 890E0300                	mov	[ARENA.SIZE],cx	
 32117                                  	;mov	word [8],4353h ; 'SC'
 32118 00002A1F C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 32119                                  
 32120                                  ; prepare the arena at start of new block
 32121                                  
 32122 00002A25 8EC3                    	mov	es,bx
 32123 00002A27 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32124 00002A2D 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 32125                                  					; mark as free
 32126 00002A34 83EA02                  	sub	dx,2			; make room for arena at
 32127                                  					; start & end of new block
 32128 00002A37 2689160300              	mov	[es:ARENA.SIZE],dx
 32129                                  
 32130                                  ; prepare arena at end of new block
 32131                                  	
 32132 00002A3C 01D3                    	add	bx,dx
 32133 00002A3E 43                      	inc	bx
 32134 00002A3F 8EC3                    	mov	es,bx			; es=arena at top of new block
 32135 00002A41 43                      	inc	bx			; bx=top of new block
 32136                                  
 32137                                  					; ax contains arena just above
 32138                                  					; this block
 32139 00002A42 29D8                    	sub	ax,bx			; ax = size of used block
 32140                                  	
 32141 00002A44 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32142 00002A4A 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32143 00002A51 26A30300                	mov	[es:ARENA.SIZE],ax	
 32144 00002A55 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32145                                  
 32146 00002A5C EB47                    	jmp	short ui_done
 32147                                  
 32148                                  ui_append:
 32149                                  					; es = arena of last block	
 32150 00002A5E 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 32151 00002A63 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 32152                                  					; going to rsrv on top of this 
 32153                                  					; block for the next arena.
 32154                                  	; 13/05/2019
 32155 00002A69 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32156                                  
 32157 00002A6F 89C1                    	mov	cx,ax			; cx=top of prev block-1
 32158 00002A71 40                      	inc	ax
 32159 00002A72 29D8                    	sub	ax,bx			; ax=top of prev block - 
 32160                                  					;    seg. address of new block
 32161 00002A74 F7D8                    	neg	ax
 32162                                  
 32163 00002A76 8EC1                    	mov	es,cx			; ds = arena of unused block
 32164                                  
 32165 00002A78 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32166 00002A7E 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32167 00002A85 26A30300                	mov	[es:ARENA.SIZE],ax	
 32168 00002A89 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 32169                                  
 32170                                  ; prepare the arena at start of new block
 32171 00002A90 8EC3                    	mov	es,bx
 32172 00002A92 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 32173 00002A98 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 32174                                  					; mark as free
 32175 00002A9F 4A                      	dec	dx			; make room for arena
 32176 00002AA0 2689160300              	mov	[es:ARENA.SIZE],dx	
 32177                                  ui_done:
 32178                                  uc_done: ; 31/12/2022 ; *!
 32179 00002AA5 1F                      	pop	ds
 32180                                  	; ds = cs ; 31/12/2022
 32181                                  ;uc_done:	; 18/12/2022
 32182                                  au_exit:	; 09/09/2023
 32183 00002AA6 C3                      	retn
 32184                                  
 32185                                  ;----------------------------------------------------------------------------
 32186                                  ;
 32187                                  ; procedure : AllocUMB
 32188                                  ;
 32189                                  ;	Allocate all UMBs and link it to DOS arena chain
 32190                                  ;
 32191                                  ;----------------------------------------------------------------------------
 32192                                  
 32193                                  AllocUMB:
 32194                                  	; 31/12/2022
 32195                                  	; ds = cs
 32196 00002AA7 E84700                  	call	InitAllocUMB		; link in the first UMB
 32197 00002AAA 72FA                    	jc	short au_exit		; quit on error
 32198                                  au_next:
 32199 00002AAC E87000                  	call	umb_allocate		; allocate
 32200 00002AAF 7205                    	jc	short au_coalesce
 32201 00002AB1 E835FF                  	call	umb_insert		; & insert till no UMBs
 32202 00002AB4 EBF6                    	jmp	short au_next
 32203                                  au_coalesce:
 32204                                  	; 09/09/2023
 32205                                  ;	call	umb_coalesce		; coalesce all UMBs
 32206                                  ;au_exit:
 32207                                  ;	; 31/12/2022
 32208                                  ;	; ds = cs
 32209                                  ;	retn
 32210                                  
 32211                                  	; 09/09/2023
 32212                                  	;jmp	short umb_coalesce
 32213                                  
 32214                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32215                                  
 32216                                  ;----------------------------------------------------------------------------
 32217                                  ;
 32218                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 32219                                  ;
 32220                                  ;	Coalesce adds the block following the argument to the argument block,
 32221                                  ;	iff it's free. Coalesce is usually used to join free blocks, but
 32222                                  ;	some callers (such as $setblock) use it to join a free block to it's
 32223                                  ;	preceeding allocated block.
 32224                                  ;
 32225                                  ;	EXIT	'C' clear if OK
 32226                                  ;		  (ds) unchanged, this block updated
 32227                                  ;		  (ax) = address of next block, IFF not at end
 32228                                  ;		'C' set if arena trashed
 32229                                  ;	USES	cx, di, ds, es
 32230                                  ;
 32231                                  ;----------------------------------------------------------------------------
 32232                                  
 32233                                  umb_coalesce:
 32234                                  	; 31/12/2022
 32235                                  	; ds = cs
 32236 00002AB6 1E                      	push	ds ; *!
 32237                                  
 32238 00002AB7 31FF                    	xor	di, di
 32239                                  
 32240                                  	;mov	es,[cs:DevDOSData]
 32241                                  	; 31/12/2022
 32242 00002AB9 8E06[8C1E]              	mov	es,[DevDOSData]
 32243 00002ABD 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 32244                                  uc_nextfree:
 32245 00002AC2 8CC0                    	mov	ax,es
 32246 00002AC4 8ED8                    	mov	ds,ax
 32247                                  	;cmp	[es:1],di
 32248 00002AC6 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 32249 00002ACB 7407                    	je	short uc_again		; Y: try to coalesce with next block
 32250                                  					; N: get next arena
 32251 00002ACD E86B00                  	call	get_next		; es, ax = next arena
 32252 00002AD0 72D3                    	jc	short uc_done	; *!
 32253 00002AD2 EBEE                    	jmp	short uc_nextfree
 32254                                  uc_again:
 32255 00002AD4 E86400                  	call	get_next		; ES, AX <- next block
 32256 00002AD7 72CC                    	jc	short uc_done	; *!
 32257                                  uc_check:
 32258 00002AD9 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 32259 00002ADE 75E2                    	jne	short uc_nextfree	; N: get next free arena
 32260                                  					; Y: coalesce
 32261 00002AE0 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 32262 00002AE5 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 32263                                  	;add	[3],cx
 32264 00002AE6 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 32265 00002AEA 268A0D                  	mov     cl,[es:di]              ; move up signature
 32266 00002AED 880D                    	mov     [di],cl
 32267 00002AEF EBE3                    	jmp     short uc_again		; try again
 32268                                  
 32269                                  	; 18/12/2022
 32270                                  ;uc_done:
 32271                                  	;retn
 32272                                  
 32273                                  ;----------------------------------------------------------------------------
 32274                                  ;
 32275                                  ; procedure : InitAllocUMB
 32276                                  ;
 32277                                  ;----------------------------------------------------------------------------
 32278                                  
 32279                                  InitAllocUMB:
 32280                                  	; 31/12/2022
 32281                                  	; ds = cs
 32282 00002AF1 E820DF                  	call	IsXMSLoaded
 32283 00002AF4 7527                    	jnz	short iau_err		; quit on no XMS driver
 32284 00002AF6 B452                    	mov	ah,52h
 32285 00002AF8 CD21                    	int	21h			; get DOS DATA seg
 32286                                  	; 31/12/2022
 32287                                  	; ds = cs
 32288                                  	;mov	[cs:DevDOSData],es	; & save it for later
 32289 00002AFA 8C06[8C1E]              	mov	[DevDOSData],es		; & save it for later
 32290 00002AFE B81043                  	mov	ax,4310h
 32291 00002B01 CD2F                    	int	2Fh
 32292                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 32293                                  	;mov	[cs:DevXMSAddr+2],es
 32294 00002B03 891E[751E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 32295 00002B07 8C06[771E]              	mov	[DevXMSAddr+2],es	
 32296                                  	; 31/12/2022
 32297 00002B0B 803E[8B1E]00            	cmp	byte [FirstUMBLinked],0 
 32298                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 32299                                  	;jne	short ia_1		; quit if we already did it
 32300                                  	; 12/12/2022
 32301 00002B10 770A                    	ja	short ia_1 ; cf=0
 32302 00002B12 E83900                  	call	LinkFirstUMB		; else link the first UMB
 32303                                  	;jc	short iau_err
 32304                                  	; 12/12/2022
 32305 00002B15 7207                    	jc	short iau_err2  ; cf=1
 32306                                  	; 31/12/2022
 32307                                  	; ds = cs
 32308 00002B17 C606[8B1E]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32309                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32310                                  ia_1:
 32311                                  	; 12/12/2022
 32312                                  	; cf=0
 32313                                  	;clc
 32314 00002B1C C3                      	retn
 32315                                  iau_err:
 32316 00002B1D F9                      	stc
 32317                                  iau_err2:
 32318 00002B1E C3                      	retn
 32319                                  
 32320                                  ;-------------------------------------------------------------------------
 32321                                  ;
 32322                                  ; Procedure Name	: umb_allocate
 32323                                  ;
 32324                                  ; Inputs		: DS = data
 32325                                  ;
 32326                                  ; Outputs		: if UMB available
 32327                                  ;				Allocates the largest available UMB and 
 32328                                  ;			  	BX = segment of allocated block
 32329                                  ;				DX = size of allocated block
 32330                                  ;				NC
 32331                                  ;			  else 
 32332                                  ;				CY
 32333                                  ;
 32334                                  ; Uses			: BX, DX
 32335                                  ;
 32336                                  ;-------------------------------------------------------------------------
 32337                                  
 32338                                  umb_allocate:
 32339                                  	; 31/12/2022
 32340                                  	; ds = cs
 32341 00002B1F 50                      	push	ax
 32342 00002B20 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32343 00002B22 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 32344                                  					;   possible
 32345                                  	; 31/12/2022
 32346 00002B25 FF1E[751E]              	call	far [DevXMSAddr]
 32347                                  	;call	far [cs:DevXMSAddr]
 32348                                  					; dx now contains the size of
 32349                                  					; the largest UMB
 32350 00002B29 09D2                    	or	dx,dx
 32351 00002B2B 740B                    	jz	short ua_err
 32352                                  	
 32353 00002B2D B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32354                                  
 32355                                  	; 31/12/2022
 32356 00002B2F FF1E[751E]              	call	far [DevXMSAddr]
 32357                                  	;call	far [cs:DevXMSAddr]
 32358                                  
 32359 00002B33 83F801                  	cmp	ax,1			; Q: was the reqst successful
 32360                                  	;jne	short ua_err		; N: error
 32361                                  	; 14/08/2023
 32362 00002B36 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 32363                                  ua_err:
 32364 00002B38 F9                      	stc	
 32365                                  
 32366                                  	;clc
 32367                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32368                                  	; 12/12/2022
 32369                                  	; cf=0
 32370                                  	;clc 
 32371                                  ua_done:
 32372 00002B39 58                      	pop	ax
 32373 00002B3A C3                      	retn
 32374                                  	; 14/08/2023
 32375                                  ;ua_err:
 32376                                  	;stc
 32377                                  	;jmp	short ua_done
 32378                                  
 32379                                  ; 13/04/2019 - Retro DOS v4.0
 32380                                  
 32381                                  ;----------------------------------------------------------------------------
 32382                                  ;
 32383                                  ;**	get_next - Find Next item in Arena
 32384                                  ;
 32385                                  ;	ENTRY	dS - pointer to block head
 32386                                  ;	EXIT	AX,ES - pointers to next head
 32387                                  ;		'C' set if arena damaged
 32388                                  ;
 32389                                  ;----------------------------------------------------------------------------
 32390                                  
 32391                                  	; 01/11/2022
 32392                                  get_next:
 32393 00002B3B 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 32394 00002B40 740A                    	je	short gn_err
 32395                                  _get_next_:
 32396 00002B42 8CD8                    	mov     ax,ds                   ; ax=current block
 32397 00002B44 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 32398 00002B48 40                      	inc     ax                      ; remember that header!
 32399 00002B49 8EC0                    	mov	es,ax
 32400                                  	;clc
 32401                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32402                                  	; 11/12/2022
 32403                                  	; cf=0
 32404                                  	;clc
 32405 00002B4B C3                      	retn
 32406                                  gn_err:
 32407 00002B4C F9                      	stc
 32408                                  	; 11/12/2022	
 32409                                  lfu_err:	 ; cf=1
 32410 00002B4D C3                      	retn
 32411                                  
 32412                                  ;----------------------------------------------------------------------------
 32413                                  ;
 32414                                  ; procedure : LinkFirstUMB
 32415                                  ;
 32416                                  ;----------------------------------------------------------------------------
 32417                                  
 32418                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32419                                  	; (SYSINIT:2F81h)
 32420                                  LinkFirstUMB:
 32421                                  	; 31/12/2022
 32422                                  	; ds = cs
 32423 00002B4E E8CEFF                  	call	umb_allocate
 32424 00002B51 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 32425                                  
 32426                                  ; bx = segment of allocated UMB
 32427                                  ; dx = size of UMB
 32428                                  
 32429                                  	; 31/12/2022
 32430                                  	; ds = cs
 32431                                  
 32432 00002B53 CD12                    	int	12h			; ax = size of memory
 32433 00002B55 B106                    	mov	cl,6
 32434 00002B57 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 32435                                  
 32436 00002B59 89C1                    	mov	cx,ax			; cx = size in paras
 32437 00002B5B 29D8                    	sub	ax,bx			; ax = - size of unused block
 32438                                  
 32439 00002B5D F7D8                    	neg	ax
 32440                                  
 32441                                  	;sub	cx,1			; cx = first umb_arena
 32442                                  	; 09/09/2023
 32443 00002B5F 49                      	dec	cx
 32444 00002B60 8EC1                    	mov	es,cx			; es = first umb_arena
 32445                                  	
 32446 00002B62 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32447 00002B68 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32448                                  					
 32449 00002B6F 26A30300                	mov	[es:ARENA.SIZE],ax	
 32450 00002B73 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32451                                  
 32452                                  ; put in the arena for the first UMB
 32453                                  
 32454 00002B7A 8EC3                    	mov	es,bx			; es has first free umb seg
 32455 00002B7C 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32456 00002B82 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 32457                                  					; mark as free 
 32458 00002B89 4A                      	dec	dx			; make room for arena
 32459 00002B8A 2689160300              	mov	[es:ARENA.SIZE],dx	
 32460                                  
 32461                                  	;mov	es,[cs:DevDOSData]
 32462                                  	; 31/12/2022
 32463 00002B8F 8E06[8C1E]              	mov	es,[DevDOSData] ; ds = cs
 32464                                  	; 18/09/2023
 32465 00002B93 26890E8C00              	mov	[es:UMB_ARENA],cx
 32466                                  	;mov	di,UMB_ARENA ; 8Ch
 32467                                  	;mov	[es:di],cx		; initialize umb_head in DOS
 32468                                  					;  data segment with the arena
 32469                                  					;  just below Top of Mem
 32470                                  
 32471                                  ; we must now scan the arena chain and update the size of the last arena
 32472                                  
 32473                                  	;mov	di,DOS_ARENA ; 24h
 32474                                  	;mov	es,[es:di]		; es = start arena
 32475                                  	; 18/09/2023
 32476 00002B98 268E062400              	mov	es,[es:DOS_ARENA]
 32477 00002B9D 31FF                    	xor	di,di
 32478                                  ;scan_next
 32479                                  ; 09/12/2022
 32480                                  scannext:
 32481 00002B9F 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 32482 00002BA3 740C                    	je	short got_last
 32483                                  	
 32484 00002BA5 8CC0                    	mov	ax,es
 32485 00002BA7 2603060300              	add	ax,[es:ARENA.SIZE]
 32486 00002BAC 40                      	inc	ax
 32487 00002BAD 8EC0                    	mov	es,ax
 32488                                  	;jmp	short scan_next
 32489                                  	; 09/12/2022
 32490 00002BAF EBEE                    	jmp	short scannext
 32491                                  got_last:
 32492                                  	;sub	word [es:ARENA.SIZE],1
 32493                                  	; 09/09/2023
 32494 00002BB1 26FF0E0300              	dec	word [es:ARENA.SIZE]
 32495                                  
 32496 00002BB6 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32497                                  	;clc
 32498                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32499                                  	; 11/12/2022
 32500                                  	; cf=0
 32501                                  	;clc
 32502 00002BBC C3                      	retn
 32503                                  
 32504                                  ; 11/12/2022
 32505                                  ;;lfu_err:
 32506                                  ;	;stc
 32507                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32508                                  ;	; 11/12/2022
 32509                                  ;	; cf=1
 32510                                  ;	;stc
 32511                                  ;	retn
 32512                                  
 32513                                  ;----------------------------------------------------------------------------
 32514                                  ;
 32515                                  ; procedure : ShrinkUMB
 32516                                  ;
 32517                                  ;	Shrinks the current UMB in use, so that the unused portions
 32518                                  ;	of the UMB is given back to the DOS free mem pool
 32519                                  ;
 32520                                  ;----------------------------------------------------------------------------
 32521                                  
 32522                                  ShrinkUMB:
 32523                                  	; 12/12/2022
 32524                                  	; ds = cs
 32525 00002BBD 833E[6F1E]00            	cmp	word [DevUMBAddr],0
 32526                                  	;cmp	word [cs:DevUMBAddr],0
 32527 00002BC2 7421                    	je	short su_exit
 32528 00002BC4 06                      	push	es
 32529 00002BC5 53                      	push	bx
 32530                                  	; 12/12/2022
 32531                                  	;mov	bx,[cs:DevUMBFree]
 32532                                  	;sub	bx,[cs:DevUMBAddr]
 32533                                  	;mov	es,[cs:DevUMBAddr]
 32534 00002BC6 8B1E[731E]              	mov	bx,[DevUMBFree]
 32535 00002BCA 2B1E[6F1E]              	sub	bx,[DevUMBAddr]
 32536 00002BCE 8E06[6F1E]              	mov	es,[DevUMBAddr]
 32537                                  	
 32538 00002BD2 B8004A                  	mov	ax,4A00h
 32539 00002BD5 CD21                    	int	21h
 32540                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 32541                                  		; ES = segment address of block to change
 32542                                  		; BX = new size in paragraphs
 32543 00002BD7 8CC0                    	mov	ax,es
 32544 00002BD9 48                      	dec	ax
 32545 00002BDA 8EC0                    	mov	es,ax
 32546 00002BDC 26C70601000800          	mov	word [es:ARENA.OWNER],8
 32547 00002BE3 5B                      	pop	bx
 32548 00002BE4 07                      	pop	es
 32549                                  su_exit:
 32550 00002BE5 C3                      	retn
 32551                                  
 32552                                  ;----------------------------------------------------------------------------
 32553                                  ;
 32554                                  ; procedure : UnlinkUMB
 32555                                  ;
 32556                                  ;	Unlinks the UMBs from the DOS arena chain
 32557                                  ;
 32558                                  ;----------------------------------------------------------------------------
 32559                                  
 32560                                  UnlinkUMB:
 32561                                  	; 12/12/2022
 32562                                  	; ds = cs
 32563 00002BE6 1E                      	push	ds
 32564 00002BE7 06                      	push	es
 32565                                  	; 12/12/2022
 32566 00002BE8 803E[8B1E]00            	cmp	byte [FirstUMBLinked],0
 32567                                  	;cmp	byte [cs:FirstUMBLinked],0
 32568 00002BED 7420                    	je	short ulu_x		; nothing to unlink
 32569                                  	; 12/12/2022
 32570 00002BEF 8E06[8C1E]              	mov	es,[DevDOSData]
 32571                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 32572 00002BF3 268E1E2400              	mov	ds,[es:DOS_ARENA]
 32573 00002BF8 268B3E8C00              	mov	di,[es:UMB_ARENA]
 32574                                  ulu_next:
 32575 00002BFD E83BFF                  	call	get_next
 32576 00002C00 720D                    	jc	short ulu_x
 32577 00002C02 39C7                    	cmp	di,ax			; is the next one UMB ?
 32578 00002C04 7404                    	je	short ulu_found
 32579 00002C06 8ED8                    	mov	ds,ax
 32580 00002C08 EBF3                    	jmp	short ulu_next
 32581                                  ulu_found:
 32582                                  	;mov	byte [0],'Z'
 32583 00002C0A C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32584                                  ulu_x:
 32585 00002C0F 07                      	pop	es
 32586 00002C10 1F                      	pop	ds
 32587 00002C11 C3                      	retn
 32588                                  
 32589                                  ; ----------------------------------------------------------------------
 32590                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 32591                                  ; ----------------------------------------------------------------------
 32592                                  ; 14/04/2019 - Retro DOS v4.0
 32593                                  
 32594                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 32595                                  ;
 32596                                  ; Summary:
 32597                                  ;
 32598                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 32599                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 32600                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 32601                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 32602                                  ;   and/or config.inc for the full list.
 32603                                  ;
 32604                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 32605                                  ;   configuration support. blockname is either MENU, which contains one
 32606                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 32607                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 32608                                  ;   INCLUDE allows the current block to name another block for inclusion
 32609                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 32610                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 32611                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 32612                                  ;
 32613                                  ; Example:
 32614                                  ;
 32615                                  ;   [menu]
 32616                                  ;   menuitem=misc,Miscellaneous
 32617                                  ;   menuitem=network,Network Configuration
 32618                                  ;   menudefault=network,15
 32619                                  ;
 32620                                  ;   [network]
 32621                                  ;   include misc
 32622                                  ;   device=foo
 32623                                  ;
 32624                                  ;   [misc]
 32625                                  ;   device=bar
 32626                                  ;   include alternate
 32627                                  ;
 32628                                  ;   [alternate]
 32629                                  ;   device=tar
 32630                                  ;
 32631                                  ;
 32632                                  ;   When the menu is displayed
 32633                                  ;
 32634                                  ;    1. Miscellaneous
 32635                                  ;    2. Network Configuration
 32636                                  ;
 32637                                  ;   #2 is highlighted as the default option, and will be automatically
 32638                                  ;   selected after 15 seconds. It will invoke the following lines in the
 32639                                  ;   following order:
 32640                                  ;
 32641                                  ;       DEVICE=BAR
 32642                                  ;       DEVICE=TAR
 32643                                  ;       DEVICE=FOO
 32644                                  ;
 32645                                  
 32646                                  ;MULTI_CONFIG equ 1
 32647                                  
 32648                                  ; the following depend on the positions of the various letters in switchlist
 32649                                  
 32650                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 32651                                  
 32652                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 32653                                  flagdrive	equ 00001000b ; 8 
 32654                                  flagcyln	equ 00010000b ; 16
 32655                                  flagseclim	equ 00100000b ; 32
 32656                                  flagheads	equ 01000000b ; 64
 32657                                  flagff		equ 10000000b ; 128
 32658                                  
 32659                                  ;----------------------------------------------------------------------------
 32660                                  ; 19/04/2019 - Retro DOS v4.0
 32661                                  
 32662                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 32663                                  
 32664                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32665                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 32666                                  
 32667 00002C12 00                      insert_blank:	db 	0
 32668                                  
 32669                                  ;----------------------------------------------------------------------------
 32670                                  ;
 32671                                  ; procedure : setparms
 32672                                  ;
 32673                                  ; the following set of routines is used to parse the drivparm = command in
 32674                                  ; the config.sys file to change the default drive parameters.
 32675                                  ;
 32676                                  ;----------------------------------------------------------------------------
 32677                                  
 32678                                  setparms:
 32679 00002C13 1E                      	push	ds
 32680 00002C14 50                      	push	ax
 32681 00002C15 53                      	push	bx
 32682 00002C16 51                      	push	cx
 32683 00002C17 52                      	push	dx
 32684                                  
 32685 00002C18 0E                      	push	cs
 32686 00002C19 1F                      	pop	ds
 32687                                  
 32688 00002C1A 31DB                    	xor	bx,bx
 32689 00002C1C 8A1E[9C35]              	mov	bl,[drive]
 32690                                  	; 18/12/2022
 32691 00002C20 43                      	inc	bx
 32692                                  	;inc	bl			; get it correct for ioctl call
 32693                                  					; (1=a,2=b...)
 32694 00002C21 BA[7434]                	mov	dx,deviceparameters
 32695                                  	;mov	ah,IOCTL ; 44h
 32696                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 32697                                  	; 14/08/2023
 32698 00002C24 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 32699                                  	;mov	ch,RAWIO ; 8
 32700                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 32701                                  	; 14/08/2023
 32702 00002C27 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 32703 00002C2A CD21                    	int	21h
 32704                                  
 32705                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32706                                  ;
 32707                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 32708                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 32709                                  ;	; 21/10/2022
 32710                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 32711                                  ;	mov	ds,ax			; set Bios_Data segment
 32712                                  ;
 32713                                  ;	test	word [cs:switches],flagec35 ; 4
 32714                                  ;	jz	short not_ec35
 32715                                  
 32716                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32717                                  	;test	word [switches],flagec35 ; 4
 32718                                  	; 12/12/2022
 32719 00002C2C F606[9D35]04            	test	byte [switches],flagec35 ; 4
 32720 00002C31 7411                    	jz	short eot_ok
 32721                                  
 32722                                  	;mov	cl,[cs:drive]		; which drive was this for?
 32723                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32724 00002C33 8A0E[9C35]              	mov	cl,[drive]
 32725 00002C37 B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 32726 00002C3A 8ED8                    	mov	ds,ax	
 32727                                  
 32728 00002C3C B001                    	mov	al,1			; assume drive 0
 32729 00002C3E D2E0                    	shl	al,cl			; set proper bit depending on drive
 32730                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 32731 00002C40 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 32732                                  
 32733                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32734                                  ;
 32735                                  ;not_ec35:
 32736                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 32737                                  ;;	sectors per track than any old ones.
 32738                                  ;
 32739                                  ;	;mov	al,[cs:deviceparameters+20]
 32740                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32741                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 32742                                  ;	cmp	al,[EOT]
 32743                                  ;	jbe	short eot_ok
 32744                                  ;	mov	[EOT],al
 32745                                  
 32746                                  eot_ok:
 32747 00002C44 5A                      	pop	dx			; fix up all the registers
 32748 00002C45 59                      	pop	cx
 32749 00002C46 5B                      	pop	bx
 32750 00002C47 58                      	pop	ax
 32751 00002C48 1F                      	pop	ds ; 13/05/2019
 32752 00002C49 C3                      	retn
 32753                                  
 32754                                  ;----------------------------------------------------------------------------
 32755                                  ;
 32756                                  ; procedure : diddleback
 32757                                  ;
 32758                                  ; replace default values for further drivparm commands
 32759                                  ;
 32760                                  ;----------------------------------------------------------------------------
 32761                                  
 32762                                  diddleback:
 32763 00002C4A 1E                      	push	ds
 32764 00002C4B 0E                      	push	cs
 32765 00002C4C 1F                      	pop	ds
 32766                                  	;mov	word [deviceparameters+4],80
 32767 00002C4D C706[7834]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32768                                  	;mov	byte [deviceparameters+1],2
 32769 00002C53 C606[7534]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 32770                                  	;mov	word [deviceparameters+2],0
 32771 00002C58 C706[7634]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 32772 00002C5E C706[9D35]0000          	mov	word [switches],0	    ; zero all switches
 32773 00002C64 1F                      	pop	ds
 32774 00002C65 C3                      	retn
 32775                                  
 32776                                  ; 04/01/2023
 32777                                  %if 0
 32778                                  
 32779                                  ; 15/04/2019 - Retro DOS v4.0
 32780                                  
 32781                                  ;----------------------------------------------------------------------------
 32782                                  ;
 32783                                  ; procedure : parseline
 32784                                  ;
 32785                                  ; entry point is parseline. al contains the first character in command line.
 32786                                  ;
 32787                                  ;----------------------------------------------------------------------------
 32788                                  
 32789                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32790                                  	; (SYSINIT:30ACh)
 32791                                  
 32792                                  parseline:
 32793                                  	push	ds
 32794                                  
 32795                                  	push	cs
 32796                                  	pop	ds
 32797                                  
 32798                                  nextswtch:
 32799                                  	cmp	al,cr			; carriage return?
 32800                                  	je	short done_line
 32801                                  	cmp	al,lf			; linefeed?
 32802                                  	je	short put_back		; put it back and done
 32803                                  
 32804                                  ; anything less or equal to a space is ignored.
 32805                                  
 32806                                  	cmp	al,' '                  ; space?
 32807                                  	jbe	short getnext		; skip over space
 32808                                  	cmp	al,'/'
 32809                                  	je	short getparm
 32810                                  	stc				; mark error invalid-character-in-input
 32811                                  	jmp	short exitpl
 32812                                  
 32813                                  getparm:
 32814                                  	call	check_switch
 32815                                  	mov	[switches],bx		; save switches read so far
 32816                                  	jc	short swterr
 32817                                  getnext:
 32818                                  	call	getchr
 32819                                  	jc	short done_line
 32820                                  	jmp	short nextswtch
 32821                                  swterr:
 32822                                  	jmp	short exitpl		; exit if error
 32823                                  
 32824                                  done_line:
 32825                                  	; 12/12/2022
 32826                                  	test	byte [switches],flagdrive ; 8
 32827                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32828                                  	jnz	short okay
 32829                                  	stc				; mark error no-drive-specified
 32830                                  	jmp	short exitpl
 32831                                  
 32832                                  okay:
 32833                                  	mov	ax,[switches]
 32834                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32835                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32836                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32837                                  	;clc			    ; everything is fine
 32838                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32839                                  	; 12/12/2022
 32840                                  	; cf=0
 32841                                  	;clc
 32842                                  	call	setdeviceparameters
 32843                                  exitpl:
 32844                                  	pop	ds
 32845                                  	retn
 32846                                  put_back:
 32847                                  	inc	word [count]		; one more char to scan
 32848                                  	dec	word [chrptr]		; back up over linefeed
 32849                                  	jmp	short done_line
 32850                                  
 32851                                  %endif
 32852                                  
 32853                                  ;----------------------------------------------------------------------------
 32854                                  ;
 32855                                  ; procedure : check_switch
 32856                                  ;
 32857                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32858                                  ; gets the number, if any required, following the switch. the switch and the
 32859                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32860                                  ; error.
 32861                                  ;
 32862                                  ;----------------------------------------------------------------------------
 32863                                  
 32864                                  ; 09/09/2023
 32865                                  
 32866                                  err_swtch:
 32867 00002C66 31CB                    	xor	bx,cx			; remove this switch from the records
 32868                                  err_check:
 32869 00002C68 F9                      	stc
 32870                                  err_chk:
 32871                                  done_swtch:	; 09/09/2023 (cf=0)
 32872 00002C69 C3                      	retn
 32873                                  
 32874                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32875                                  
 32876                                  check_switch:
 32877 00002C6A E87803                  	call	getchr
 32878                                  	;jc	short err_check
 32879 00002C6D 72FA                    	jc	short err_chk
 32880 00002C6F 24DF                            and     al,0DFh                 ; convert it to upper case
 32881 00002C71 3C41                    	cmp	al,'A'
 32882                                  	;jb	short err_check
 32883 00002C73 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32884 00002C75 3C5A                    	cmp	al,'Z'
 32885 00002C77 77EF                    	ja	short err_check
 32886                                  
 32887 00002C79 06                      	push	es
 32888                                  
 32889 00002C7A 0E                      	push	cs
 32890 00002C7B 07                      	pop	es
 32891                                  
 32892                                  	;mov	cl,[switchlist]		; get number of valid switches
 32893                                  	;mov	ch,0
 32894                                  	;mov	di,1+switchlist		; point to string of valid switches
 32895                                  	; 09/09/2023
 32896 00002C7C BF[3036]                	mov	di,switchlist
 32897 00002C7F 8A0D                    	mov	cl,[di]
 32898 00002C81 B500                    	mov	ch,0
 32899 00002C83 47                      	inc	di	; 1+switchlist
 32900                                  
 32901 00002C84 F2AE                    	repne	scasb
 32902                                  
 32903 00002C86 07                      	pop	es
 32904 00002C87 75DF                    	jnz	short err_check
 32905                                  
 32906 00002C89 B80100                  	mov	ax,1
 32907 00002C8C D3E0                    	shl	ax,cl			; set bit to indicate switch
 32908 00002C8E 8B1E[9D35]              	mov	bx,[switches]		; get switches so far
 32909 00002C92 09C3                    	or	bx,ax			; save this with other switches
 32910 00002C94 89C1                    	mov	cx,ax
 32911                                  	; 12/12/2022
 32912 00002C96 A8F8                    	test	al,switchnum ; 0F8h
 32913                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32914 00002C98 74CF                    	jz	short done_swtch
 32915                                  
 32916 00002C9A E84803                  	call	getchr
 32917 00002C9D 72C7                    	jc	short err_swtch
 32918                                  
 32919 00002C9F 3C3A                    	cmp	al,':'
 32920 00002CA1 75C3                    	jne	short err_swtch
 32921                                  
 32922 00002CA3 E83F03                  	call	getchr
 32923 00002CA6 53                      	push	bx			; preserve switches
 32924                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32925                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32926                                  	; 12/12/2022
 32927                                  	; ds = cs
 32928 00002CA7 C606[2A03]20            	mov	byte [sepchr],' '
 32929 00002CAC E8DB03                  	call	getnum
 32930                                  	;mov	byte [cs:sepchr],0
 32931                                  	; 12/12/2022
 32932 00002CAF C606[2A03]00            	mov	byte [sepchr],0
 32933 00002CB4 5B                      	pop	bx			; restore switches
 32934                                  
 32935                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32936                                  ; not check for carry set here. if there is an error, it will be detected
 32937                                  ; further on (hopefully).
 32938                                  
 32939                                  	; 09/09/2023
 32940                                  	;call	process_num
 32941                                  	;jmp	short process_num
 32942                                  
 32943                                  ;done_swtch:
 32944                                  ;	;clc
 32945                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32946                                  ;	; 12/12/2022
 32947                                  ;	; cf=0
 32948                                  ;	;clc
 32949                                  ;	retn
 32950                                  
 32951                                  ;----------------------------------------------------------------------------
 32952                                  ;
 32953                                  ; procedure : process_num
 32954                                  ;
 32955                                  ; this routine takes the switch just input, and the number following (if any),
 32956                                  ; and sets the value in the appropriate variable. if the number input is zero
 32957                                  ; then it does nothing - it assumes the default value that is present in the
 32958                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32959                                  ;
 32960                                  ;----------------------------------------------------------------------------
 32961                                  
 32962                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32963                                  	; (SYSINIT:3156h)
 32964                                  process_num:
 32965 00002CB5 850E[9D35]              	test	[switches],cx		; if this switch has been done before,
 32966 00002CB9 752B                    	jnz	short done_ret		; ignore this one.
 32967                                  	; 12/12/2022
 32968 00002CBB F6C108                  	test	cl,flagdrive ; 8
 32969                                  	;test	cx,flagdrive ; 8
 32970 00002CBE 7404                    	jz	short try_f
 32971 00002CC0 A2[9C35]                	mov	byte [drive],al
 32972                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32973                                  	;jmp	short done_ret
 32974                                  	; 12/12/2022
 32975                                  	; cf=0
 32976 00002CC3 C3                      	retn	; 13/05/2019
 32977                                  try_f:
 32978                                  	; 12/12/2022
 32979 00002CC4 F6C180                  	test	cl,flagff ; 80h
 32980                                  	;test	cx,flagff ; 80h
 32981 00002CC7 7404                    	jz	short try_t
 32982                                  
 32983                                  ; ensure that we do not get bogus form factors that are not supported
 32984                                  
 32985                                  	;mov	[deviceparameters+1],al
 32986 00002CC9 A2[7534]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32987                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32988                                  	;jmp	short done_ret
 32989                                  	; 12/12/2022
 32990                                  	; cf=0
 32991 00002CCC C3                      	retn	; 13/05/2019
 32992                                  try_t:
 32993 00002CCD 09C0                    	or	ax,ax
 32994 00002CCF 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32995                                  	; 12/12/2022
 32996 00002CD1 F6C110                  	test	cl,flagcyln ; 10h
 32997                                  	;test	cx,flagcyln ; 10h
 32998 00002CD4 7404                    	jz	short try_s
 32999                                  
 33000                                  	;mov	[deviceparameters+4],ax
 33001 00002CD6 A3[7834]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 33002                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33003                                  	;jmp	short done_ret
 33004                                  	; 12/12/2022
 33005                                  	; cf=0
 33006 00002CD9 C3                      	retn	; 13/05/2019
 33007                                  try_s:
 33008                                  	; 12/12/2022
 33009 00002CDA F6C120                  	test	cl,flagseclim ; 20h
 33010                                  	;test	cx,flagseclim ; 20h
 33011 00002CDD 7404                    	jz	short try_h
 33012 00002CDF A3[9A35]                	mov	[slim],ax
 33013                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33014                                  	;jmp	short done_ret
 33015                                  	; 12/12/2022
 33016                                  	; cf=0
 33017 00002CE2 C3                      	retn	; 13/05/2019
 33018                                  
 33019                                  ; must be for number of heads
 33020                                  
 33021                                  try_h:
 33022 00002CE3 A3[9835]                	mov	[hlim],ax
 33023                                  done_ret:
 33024                                  	;clc
 33025                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33026                                  	; 12/12/2022
 33027                                  	; cf=0 (test instruction resets cf)
 33028                                  	;clc
 33029 00002CE6 C3                      	retn
 33030                                  
 33031                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33032                                  %if 1
 33033                                  
 33034                                  ; 15/04/2019 - Retro DOS v4.0
 33035                                  
 33036                                  ;----------------------------------------------------------------------------
 33037                                  ;
 33038                                  ; procedure : parseline
 33039                                  ;
 33040                                  ; entry point is parseline. al contains the first character in command line.
 33041                                  ;
 33042                                  ;----------------------------------------------------------------------------
 33043                                  
 33044                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33045                                  	; (SYSINIT:30ACh)
 33046                                  parseline:
 33047                                  	; 04/01/2023
 33048                                  	; ds = cs ; *
 33049                                  
 33050                                  	;push	ds ; *
 33051                                  
 33052                                  	;push	cs ; *
 33053                                  	;pop	ds ; *
 33054                                  
 33055                                  nextswtch:
 33056 00002CE7 3C0D                    	cmp	al,cr			; carriage return?
 33057 00002CE9 741C                    	je	short done_line
 33058 00002CEB 3C0A                    	cmp	al,lf			; linefeed?
 33059 00002CED 7421                    	je	short put_back		; put it back and done
 33060                                  
 33061                                  ; anything less or equal to a space is ignored.
 33062                                  
 33063 00002CEF 3C20                    	cmp	al,' '                  ; space?
 33064 00002CF1 760F                    	jbe	short getnext		; skip over space
 33065 00002CF3 3C2F                    	cmp	al,'/'
 33066 00002CF5 7402                    	je	short getparm
 33067 00002CF7 F9                      	stc				; mark error invalid-character-in-input
 33068                                  	;jmp	short exitpl
 33069                                  	; 04/01/2023
 33070                                  swterr:
 33071 00002CF8 C3                      	retn
 33072                                  
 33073                                  getparm:
 33074 00002CF9 E86EFF                  	call	check_switch
 33075 00002CFC 891E[9D35]              	mov	[switches],bx		; save switches read so far
 33076 00002D00 72F6                    	jc	short swterr
 33077                                  getnext:
 33078 00002D02 E8E002                  	call	getchr
 33079                                  	;jc	short done_line
 33080                                  	;jmp	short nextswtch
 33081                                  	; 04/01/2023
 33082 00002D05 73E0                    	jnc	short nextswtch
 33083                                  ;swterr:
 33084                                  	;jmp	short exitpl		; exit if error
 33085                                  
 33086                                  done_line:
 33087                                  	; 12/12/2022
 33088 00002D07 F606[9D35]08            	test	byte [switches],flagdrive ; 8
 33089                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33090 00002D0C 750C                    	jnz	short okay
 33091 00002D0E F9                      	stc				; mark error no-drive-specified
 33092                                  	;jmp	short exitpl
 33093                                  	; 04/01/2023
 33094 00002D0F C3                      	retn
 33095                                  
 33096                                  ;exitpl:
 33097                                  	; 04/01/2023
 33098                                  	; ds = cs
 33099                                  	;;pop	ds ; *
 33100                                  	;retn
 33101                                  
 33102                                  put_back:
 33103 00002D10 FF06[D203]              	inc	word [count]		; one more char to scan
 33104 00002D14 FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 33105 00002D18 EBED                    	jmp	short done_line
 33106                                  
 33107                                  okay:
 33108 00002D1A A1[9D35]                	mov	ax,[switches]
 33109 00002D1D 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33110 00002D20 A3[7634]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33111 00002D23 C706[9A34]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33112                                  	;clc			    ; everything is fine
 33113                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33114                                  	; 12/12/2022
 33115                                  	; cf=0
 33116                                  	;clc
 33117                                  	;call	setdeviceparameters
 33118                                  	; 04/01/2023
 33119                                  	;jmp	short setdeviceparameters
 33120                                  
 33121                                  %endif
 33122                                  
 33123                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 33124                                  
 33125                                  ;----------------------------------------------------------------------------
 33126                                  ;
 33127                                  ; procedure : setdeviceparameters
 33128                                  ;
 33129                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 33130                                  ; system based on the form factor. it is assumed that the bpbs for the
 33131                                  ; various form factors are present in the bpbtable. for hard files,
 33132                                  ; the recommended bpb is the same as the bpb on the drive.
 33133                                  ; no attempt is made to preserve registers since we are going to jump to
 33134                                  ; sysinit straight after this routine.
 33135                                  ;
 33136                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 33137                                  ;	  we always return no carry
 33138                                  ;
 33139                                  ;	note:  there is a routine by the same name in msdioctl.asm
 33140                                  ;
 33141                                  ;----------------------------------------------------------------------------
 33142                                  
 33143                                  ; 15/04/2019 - Retro DOS v4.0
 33144                                  
 33145                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33146                                  setdeviceparameters:
 33147                                  	; 04/01/2023
 33148                                  	; ds = cs
 33149                                  	
 33150 00002D29 06                      	push	es
 33151                                  
 33152 00002D2A 0E                      	push	cs
 33153 00002D2B 07                      	pop	es
 33154                                  
 33155 00002D2C 31DB                    	xor	bx,bx
 33156 00002D2E 8A1E[7534]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 33157 00002D32 80FB00                  	cmp	bl,DEV_5INCH ; 0
 33158 00002D35 7506                    	jne	short got_80
 33159                                  
 33160 00002D37 C706[7834]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33161                                  							; 48 tpi=40 cyl
 33162                                  got_80:
 33163 00002D3D D1E3                    	shl	bx,1			; get index into bpb table
 33164 00002D3F 8BB7[1C36]              	mov	si,[bpbtable+bx]	; get address of bpb
 33165                                  
 33166                                  	;mov	di,deviceparameters+7	
 33167                                  	; 02/11/2022
 33168 00002D43 BF[7B34]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 33169 00002D46 B91F00                  	mov	cx,A_BPB.size ; 31
 33170 00002D49 FC                      	cld
 33171                                  	;repe	movsb
 33172                                  	; 02/11/2022
 33173 00002D4A F3A4                    	rep	movsb
 33174                                  
 33175 00002D4C 07                      	pop	es
 33176                                  
 33177                                  	; 12/12/2022
 33178 00002D4D F606[9D35]20            	test	byte [switches],flagseclim ; 20h
 33179                                  	;test	word [switches],flagseclim ; 20h
 33180 00002D52 7406                    	jz	short see_heads
 33181                                  
 33182 00002D54 A1[9A35]                	mov	ax,[slim]
 33183                                  	;mov	[deviceparameters+20],ax
 33184 00002D57 A3[8834]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 33185                                  
 33186                                  see_heads:
 33187                                  	; 12/12/2022
 33188 00002D5A F606[9D35]40            	test	byte [switches],flagheads ; 40h
 33189                                  	;test	word [switches],flagheads ; 40h
 33190 00002D5F 7406                    	jz	short heads_not_altered
 33191                                  
 33192 00002D61 A1[9835]                	mov	ax,[hlim]
 33193                                  	;mov	[deviceparameters+22],ax	
 33194 00002D64 A3[8A34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 33195                                  
 33196                                  heads_not_altered:
 33197                                  
 33198                                  ; set up correct media descriptor byte and sectors/cluster
 33199                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 33200                                  
 33201                                  	;mov	byte [deviceparameters+9],2
 33202                                  	; 02/11/2022
 33203                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 33204                                  	; 04/01/2023
 33205 00002D67 B80200                  	mov	ax,2	
 33206 00002D6A A2[7D34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 33207                                  
 33208 00002D6D B3F0                    	mov	bl,0F0h			; get default mediabyte
 33209                                  
 33210                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 33211                                  
 33212                                  	;mov	bh,[deviceparameters+17]
 33213                                  	; 02/11/2022
 33214 00002D6F 8A3E[8534]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 33215                                  
 33216                                  	; 04/01/2023
 33217                                  	; ax = 2
 33218 00002D73 3906[8A34]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 33219                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 33220 00002D77 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 33221                                  
 33222 00002D79 7524                    	jne	short only_one_head	; one head, do one head stuff
 33223                                  
 33224                                  ;	two head drives will use the mediadescriptor from the bpb
 33225                                  
 33226 00002D7B 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 33227                                  
 33228                                  ;	two sided drives have two special cases to look for. One is
 33229                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 33230                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 33231                                  ;	   one sector/cluster.
 33232                                  
 33233                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 33234                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 33235                                  ;	   type of 2 headed drive is all set.
 33236                                  
 33237 00002D7D 833E[8834]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 33238 00002D82 7509                    	jne	short not_144m
 33239 00002D84 833E[7834]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33240 00002D89 7502                    	jne	short not_144m
 33241                                  
 33242                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 33243                                  
 33244 00002D8B EB24                    	jmp	short got_one_secperclus_drive
 33245                                  
 33246                                  ;	check for 320K
 33247                                  
 33248                                  not_144m:
 33249 00002D8D 833E[7834]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33250 00002D92 7521                    	jne	short got_correct_mediad
 33251 00002D94 833E[8834]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33252 00002D99 751A                    	jne	short got_correct_mediad
 33253                                  
 33254 00002D9B B3FC                    	mov	bl,0FCh
 33255 00002D9D EB16                    	jmp	short got_correct_mediad
 33256                                  
 33257                                  only_one_head:
 33258                                  
 33259                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 33260                                  
 33261 00002D9F 803E[7534]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 33262 00002DA4 740B                    	je	short got_one_secperclus_drive
 33263                                  
 33264                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 33265                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 33266                                  ;	  besides 8 will be considered 0fch
 33267                                  
 33268 00002DA6 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 33269 00002DA8 833E[8834]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33270                                  	; 12/12/2022
 33271 00002DAD 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 33272                                  
 33273 00002DAF B3FE                    	mov	bl,0FEh			; 160K mediaid
 33274                                  
 33275                                  ;	we've either got a one sided drive, or a 1.44M drive
 33276                                  ;	  either case we'll use 1 sector per cluster instead of 2
 33277                                  
 33278                                  got_one_secperclus_drive:
 33279                                  	; 04/01/2023
 33280                                  	; ax = 2
 33281 00002DB1 48                      	dec	ax  ; ax = 1
 33282 00002DB2 A2[7D34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 33283                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 33284                                  
 33285                                  got_correct_mediad:
 33286 00002DB5 881E[8534]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 33287                                  
 33288                                  ;	 Calculate the correct number of Total Sectors on medium
 33289                                  
 33290 00002DB9 A1[7834]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 33291 00002DBC F726[8A34]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 33292 00002DC0 F726[8834]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33293 00002DC4 A3[8334]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 33294 00002DC7 F8                      	clc				; we currently return no errors
 33295                                  
 33296 00002DC8 C3                      	retn
 33297                                  
 33298                                  ;	M047 -- end rewritten routine
 33299                                  
 33300                                  ;----------------------------------------------------------------------------
 33301                                  ;
 33302                                  ; procedure : organize
 33303                                  ;
 33304                                  ;----------------------------------------------------------------------------
 33305                                  
 33306                                  ; 09/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 33307                                  %if 1
 33308                                  end_commd_line:
 33309 00002DC9 AA                      	stosb				; store line feed char in buffer for the linecount.
 33310                                  	;mov	byte [cs:com_level],0	; reset the command level.
 33311                                  	; 03/01/2023
 33312                                  	; ds = cs
 33313                                  	;mov	byte [com_level],0
 33314                                  	;jmp	short org1
 33315                                  	; 09/09/2023
 33316 00002DCA EB11                    	jmp	short org0
 33317                                  nochar1:
 33318 00002DCC F9                      	stc
 33319 00002DCD C3                      	retn
 33320                                  %endif
 33321                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33322                                  	; (SYSINIT:3234h)
 33323                                  
 33324                                  organize:
 33325                                  	; 04/01/2023
 33326                                  	; ds = cs
 33327 00002DCE 8B0E[D203]              	mov	cx,[count]
 33328                                  	;mov	cx,[cs:count]
 33329 00002DD2 E3F8                    	jcxz	nochar1
 33330                                  
 33331                                  ;ifndef	MULTI_CONFIG
 33332                                  ;
 33333                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 33334                                  ;;   because we the case of values in SET commands preserved
 33335                                  ;
 33336                                  ;	call	mapcase
 33337                                  ;endif
 33338                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33339 00002DD4 E82502                  	call	mapcase
 33340                                  
 33341 00002DD7 31F6                    	xor	si,si
 33342 00002DD9 89F7                    	mov	di,si
 33343 00002DDB 31C0                    	xor	ax,ax
 33344                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 33345                                  	;;mov	byte [cs:com_level],0
 33346                                  	; 12/12/2022
 33347                                  	;mov	[cs:com_level],al ; 0
 33348                                  	; 04/01/2023
 33349                                  	; ds = cs
 33350                                  	; 09/09/2023
 33351                                  	;mov	[com_level],al ; 0
 33352                                  org0:
 33353 00002DDD C606[CC03]00            	mov	byte [com_level],0 ; 09/09/2023
 33354                                  org1:
 33355 00002DE2 E8A501                  	call	skip_comment
 33356 00002DE5 74E2                    	jz	short end_commd_line	; found a comment string and skipped.
 33357 00002DE7 E88A01                  	call	get2			; not a comment string. then get a char.
 33358 00002DEA 3C0A                    	cmp	al,lf ; 0Ah
 33359 00002DEC 74DB                    	je	short end_commd_line	; starts with a blank line.
 33360 00002DEE 3C20                    	cmp	al,' ' ; 20h
 33361 00002DF0 76F0                    	jbe	short org1		; skip leading control characters
 33362                                  	; 09/09/2023
 33363                                  	;jmp	short findit
 33364                                  
 33365                                  ; 09/09/2023
 33366                                  %if 0
 33367                                  end_commd_line:
 33368                                  	stosb				; store line feed char in buffer for the linecount.
 33369                                  	;mov	byte [cs:com_level],0	; reset the command level.
 33370                                  	; 03/01/2023
 33371                                  	; ds = cs
 33372                                  	mov	byte [com_level],0
 33373                                  	jmp	short org1
 33374                                  
 33375                                  nochar1:
 33376                                  	stc
 33377                                  	retn
 33378                                  %endif
 33379                                  
 33380                                  findit:
 33381 00002DF2 51                      	push	cx
 33382 00002DF3 56                      	push	si
 33383 00002DF4 57                      	push	di
 33384 00002DF5 89F5                    	mov	bp,si
 33385 00002DF7 4D                      	dec	bp
 33386 00002DF8 BE[E333]                        mov     si,comtab		; prepare to search command table
 33387 00002DFB B500                    	mov	ch,0
 33388                                  findcom:
 33389 00002DFD 89EF                    	mov	di,bp
 33390 00002DFF 8A0C                    	mov	cl,[si]
 33391 00002E01 46                      	inc	si
 33392 00002E02 E324                    	jcxz	nocom
 33393                                  
 33394                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33395                                  
 33396                                  ;ifdef	MULTI_CONFIG
 33397                                  ;
 33398                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 33399                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 33400                                  ;;   anything in particular)
 33401                                  ;
 33402                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 33403                                  ;       je	short semicolon
 33404                                  ;loopcom:
 33405                                  ;       mov     al,[es:di]
 33406                                  ;       inc     di
 33407                                  ;       and     al,~20h ; 0DFh		; force upper case
 33408                                  ;       inc     si                      ; compare to byte @es:di
 33409                                  ;       cmp     al,[si-1]
 33410                                  ;       loope   loopcom
 33411                                  ;;else
 33412                                  ;;	repe	cmpsb
 33413                                  ;endif
 33414                                  	; 02/11/2022
 33415 00002E04 F3A6                    	repe	cmpsb
 33416                                  
 33417 00002E06 9F                      	lahf
 33418 00002E07 01CE                            add     si,cx                   ; bump to next position without affecting flags
 33419 00002E09 9E                      	sahf
 33420 00002E0A AC                              lodsb                           ; get indicator letter
 33421 00002E0B 75F0                    	jnz	short findcom
 33422 00002E0D 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 33423 00002E11 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 33424 00002E13 26803D0A                	cmp	byte [es:di],lf
 33425 00002E17 740A                    	je	short gotcom0
 33426                                  
 33427                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33428                                  ;
 33429                                  ;;ifdef	MULTI_CONFIG
 33430                                  ;
 33431                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 33432                                  ;
 33433                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 33434                                  ;       je	short gotcom0
 33435                                  ;;endif
 33436                                  ;	push	ax
 33437                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 33438                                  ;
 33439                                  ;;ifdef	MULTI_CONFIG
 33440                                  ;
 33441                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 33442                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 33443                                  ;;   stored in the CONFIG.SYS memory image.
 33444                                  ;
 33445                                  ;       cmp     al,'?'                  ; explicit interactive command?
 33446                                  ;       jne	short no_query		; no
 33447                                  ;       pop     ax                      ; yes, so retrieve the original code
 33448                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 33449                                  ;       jmp     short gotcom0           ;
 33450                                  ;semicolon:
 33451                                  ;       mov     al,CONFIG_REM
 33452                                  ;       jmp     short gotcom0
 33453                                  ;no_query:
 33454                                  ;;endif  ;MULTI_CONFIG
 33455                                  
 33456                                  	; 02/11/2022
 33457 00002E19 50                      	push	ax
 33458 00002E1A 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 33459                                  
 33460 00002E1D E8A001                  	call	delim
 33461                                  no_delim:
 33462 00002E20 58                      	pop	ax
 33463 00002E21 75DA                    	jnz	short findcom
 33464                                  gotcom0:
 33465 00002E23 5F                      	pop	di
 33466 00002E24 5E                      	pop	si
 33467 00002E25 59                      	pop	cx
 33468 00002E26 EB0F                    	jmp	short gotcom
 33469                                  nocom:
 33470 00002E28 5F                      	pop	di
 33471 00002E29 5E                      	pop	si
 33472 00002E2A 59                      	pop	cx
 33473 00002E2B B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 33474 00002E2D AA                      	stosb				; save indicator char.
 33475                                  _skipline:
 33476 00002E2E E84301                  	call	get2
 33477 00002E31 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 33478 00002E33 75F9                            jne     short _skipline
 33479 00002E35 EB92                    	jmp	short end_commd_line	; handle next command line
 33480                                  gotcom:
 33481 00002E37 AA                              stosb                           ; save indicator char in buffer
 33482                                  
 33483                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33484                                  ;;ifdef	MULTI_CONFIG
 33485                                  ;
 33486                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 33487                                  ;;   it screws up the direct comparisons below.
 33488                                  ;
 33489                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33490                                  ;;endif
 33491                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 33492                                  ;
 33493                                  ;;ifdef	MULTI_CONFIG
 33494                                  ;
 33495                                  ;;   There is no whitespace/delimiter between the "begin block" character
 33496                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 33497                                  ;;   skipping code
 33498                                  ;
 33499                                  ;       cmp     al,CONFIG_BEGIN
 33500                                  ;       je	short org31
 33501                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 33502                                  ;       je      short no_mapcase
 33503                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 33504                                  ;       je      short no_mapcase
 33505                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 33506                                  ;       je      short no_mapcase
 33507                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 33508                                  ;       je      short no_mapcase
 33509                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 33510                                  ;no_mapcase:
 33511                                  ;;endif
 33512                                  
 33513                                  	; 02/11/2022
 33514                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 33515                                  	; 04/01/2023
 33516                                  	; ds = cs
 33517 00002E38 A2[D003]                	mov	[cmd_indicator],al
 33518                                  org2:	
 33519 00002E3B E83601                  	call    get2                    ; skip the command name until delimiter
 33520 00002E3E 3C0A                            cmp     al,lf
 33521 00002E40 740B                    	je	short org21
 33522 00002E42 3C0D                    	cmp	al,cr
 33523 00002E44 7407                    	je	short org21
 33524                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33525                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 33526                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 33527                                  
 33528 00002E46 E87701                  	call	delim
 33529 00002E49 75F0                            jnz	short org2
 33530 00002E4B EB02                    	jmp	short org3
 33531                                  org21:					;if cr or lf then
 33532 00002E4D 4E                      	dec	si			; undo si, cx register
 33533 00002E4E 41                      	inc	cx			;  and continue
 33534                                  org3:	
 33535                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 33536                                  	;je	short get_cmt_token
 33537                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33538                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33539                                  	;;je	short org_file
 33540                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 33541                                  	;je	short org_file
 33542                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33543                                          ;;je	short org_file
 33544                                  	;; 02/11/2022
 33545                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33546                                  	;je	short org_file
 33547                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 33548                                  	;je	short org_file
 33549                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 33550                                  	;je	short org_switch
 33551                                  
 33552                                  	; 04/01/2023
 33553                                  	; ds = cs
 33554                                  
 33555 00002E4F 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 33556 00002E54 7456                    	je	short get_cmt_token
 33557                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33558                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33559                                  	;je	short org_file
 33560 00002E56 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 33561 00002E5B 7429                    	je	short org_file
 33562                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33563                                          ;je	short org_file
 33564                                  	; 02/11/2022
 33565 00002E5D 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33566 00002E62 7422                    	je	short org_file
 33567 00002E64 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 33568 00002E69 741B                    	je	short org_file
 33569 00002E6B 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 33570 00002E70 7403                    	je	short org_switch
 33571                                  	
 33572                                  org31:
 33573 00002E72 E99500                  	jmp	org4
 33574                                  
 33575                                  org_switch:
 33576 00002E75 E81201                  	call	skip_comment
 33577 00002E78 7472                    	jz	short end_commd_line_brdg
 33578                                  
 33579 00002E7A E8F700                  	call	get2
 33580 00002E7D E84801                  	call	org_delim
 33581 00002E80 74F3                    	jz	short org_switch
 33582                                  
 33583 00002E82 AA                      	stosb
 33584 00002E83 E99300                  	jmp	org5
 33585                                  
 33586                                  org_file:			; get the filename and put 0 at end
 33587 00002E86 E80101                  	call	skip_comment
 33588 00002E89 7464                    	jz	short org_put_zero
 33589                                  
 33590 00002E8B E8E600                  	call	get2		; not a comment
 33591 00002E8E E82F01                  	call	delim
 33592 00002E91 74F3                    	jz	short org_file	; skip the possible delimiters
 33593                                  
 33594 00002E93 AA                      	stosb			; copy the first non delim char found in buffer
 33595                                  
 33596                                  org_copy_file:
 33597 00002E94 E8F300                  	call	skip_comment	; comment char in the filename?
 33598 00002E97 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 33599                                  
 33600 00002E99 E8D800                  	call	get2
 33601 00002E9C 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 33602 00002E9E 7457                    	je	short end_file_slash ; this will be the special case.
 33603                                  
 33604 00002EA0 AA                      	stosb			; save the char. in buffer
 33605 00002EA1 E81C01                  	call	delim
 33606 00002EA4 7459                    	jz	short end_copy_file
 33607                                  
 33608 00002EA6 3C20                    	cmp	al, ' '
 33609 00002EA8 77EA                    	ja	short org_copy_file ; keep copying
 33610 00002EAA EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 33611                                  
 33612                                  get_cmt_token:			; get the token. just max. 2 char.
 33613 00002EAC E8C500                  	call	get2
 33614 00002EAF 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 33615 00002EB1 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 33616 00002EB3 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 33617 00002EB5 74F5                    	je	short get_cmt_token ;  character.)
 33618 00002EB7 3C3D                    	cmp	al,'='		; = is special in this case.
 33619 00002EB9 74F1                    	je	short get_cmt_token
 33620 00002EBB 3C0D                    	cmp	al,cr
 33621 00002EBD 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 33622 00002EBF 3C0A                    	cmp	al,lf
 33623 00002EC1 7422                    	je	short get_cmt_end
 33624                                  
 33625                                  	; 04/01/2023
 33626                                  	; ds = cs
 33627                                  	;mov	[cs:cmmt1],al	; store it
 33628                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 33629 00002EC3 A2[CE03]                	mov	[cmmt1],al	; store it
 33630 00002EC6 C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 33631 00002ECB E8A600                  	call	get2
 33632 00002ECE 3C20                    	cmp	al,' ' ; 20h
 33633 00002ED0 7413                    	je	short get_cmt_end
 33634 00002ED2 3C09                    	cmp	al,tab ; 9
 33635 00002ED4 740F                    	je	short get_cmt_end
 33636 00002ED6 3C0D                    	cmp	al,cr  ; 0Dh
 33637 00002ED8 740B                    	je	short get_cmt_end
 33638 00002EDA 3C0A                    	cmp	al,lf  ; 0Ah
 33639 00002EDC 740E                    	je	short end_commd_line_brdg
 33640                                  
 33641                                  	;mov	[cs:cmmt2],al
 33642                                  	;inc	byte [cs:cmmt]
 33643                                  	; 04/01/2023
 33644 00002EDE A2[CF03]                	mov	[cmmt2],al
 33645 00002EE1 FE06[CD03]              	inc	byte [cmmt]
 33646                                  
 33647                                  get_cmt_end:
 33648 00002EE5 E88C00                  	call	get2
 33649 00002EE8 3C0A                    	cmp	al,lf
 33650 00002EEA 75F9                    	jne	short get_cmt_end	; skip it.
 33651                                  end_commd_line_brdg: 
 33652 00002EEC E9DAFE                  	jmp	end_commd_line		; else jmp to end_commd_line
 33653                                  
 33654                                  org_put_zero:				; make the filename in front of
 33655 00002EEF 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 33656 00002EF3 47                      	inc	di
 33657 00002EF4 E9D2FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 33658                                  
 33659                                  end_file_slash: 			; al = "/" option char.
 33660 00002EF7 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 33661 00002EFB 47                      	inc	di			; and
 33662 00002EFC AA                      	stosb				; store "/" after that.
 33663 00002EFD EB1A                    	jmp	short org5		; continue with the rest of the line
 33664                                  
 33665                                  end_copy_file:
 33666 00002EFF 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 33667 00002F04 3C0A                    	cmp	al,lf
 33668 00002F06 74E4                    	je	short end_commd_line_brdg
 33669 00002F08 EB0F                    	jmp	short org5
 33670                                  
 33671                                  org4:					; org4 skips all delimiters after the command name except for '/'
 33672 00002F0A E87D00                  	call	skip_comment
 33673 00002F0D 74DD                    	jz	short end_commd_line_brdg
 33674                                  
 33675 00002F0F E86200                  	call	get2
 33676 00002F12 E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 33677 00002F15 74F3                    	jz	short org4
 33678 00002F17 EB08                    	jmp	short org51
 33679                                  
 33680                                  org5:					; rest of the line
 33681 00002F19 E86E00                  	call	skip_comment		; comment?
 33682 00002F1C 74CE                    	jz	short end_commd_line_brdg
 33683 00002F1E E85300                  	call	get2			; not a comment.
 33684                                  
 33685                                  org51:
 33686 00002F21 AA                      	stosb				; copy the character
 33687 00002F22 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 33688 00002F24 743A                    	je	short at_quote
 33689 00002F26 3C20                    	cmp	al,' '  ; 20h
 33690 00002F28 77EF                    	ja	short org5
 33691                                  					; M051 - Start
 33692                                  	; 04/01/2023
 33693                                  	; ds = cs
 33694 00002F2A 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 33695                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 33696 00002F2F 7514                    	jne	short not_dh		; N: 
 33697 00002F31 3C0A                    	cmp	al,lf			; Q: is this line feed
 33698 00002F33 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 33699 00002F35 3C0D                    	cmp	al,cr			; Q: is this a cr
 33700 00002F37 75E0                    	jne	short org5		; N: 
 33701 00002F39 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 33702 00002F3E AA                      	stosb				; put cr after blank
 33703 00002F3F FE06[122C]              	inc	byte [insert_blank]
 33704                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 33705                                  					; inserted
 33706 00002F43 EBD4                    	jmp	short org5
 33707                                  not_dh:					; M051 - End
 33708                                  
 33709 00002F45 3C0A                    	cmp	al,lf			; line feed?
 33710 00002F47 740F                    	je	short org1_brdg		; handles the next command line.
 33711 00002F49 EBCE                    	jmp	short org5		; handles next char in this line.
 33712                                  
 33713                                  org_dhlf:				; M051 - Start
 33714                                  	; 04/01/2023
 33715                                  	; ds = cs
 33716 00002F4B 803E[122C]01            	cmp	byte [insert_blank],1
 33717                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 33718 00002F50 7406                    	je	short org1_brdg		; Y:
 33719 00002F52 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 33720 00002F57 AA                      	stosb				; put lf after blank
 33721                                  					; M051 - End
 33722                                  org1_brdg:
 33723 00002F58 C606[122C]00            	mov	byte [insert_blank],0 
 33724                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 33725                                  					; M051: devicehigh
 33726 00002F5D E982FE                  	jmp	org1
 33727                                  
 33728                                  at_quote:
 33729 00002F60 803E[CC03]00            	cmp	byte [com_level],0
 33730                                  	;cmp	byte [cs:com_level],0
 33731 00002F65 7407                    	je	short up_level
 33732                                  	;mov	byte [cs:com_level],0	; reset it.
 33733 00002F67 C606[CC03]00            	mov	byte [com_level],0
 33734 00002F6C EBAB                    	jmp	short org5
 33735                                  
 33736                                  up_level:
 33737                                  	;inc	byte [cs:com_level]	; set it.
 33738 00002F6E FE06[CC03]              	inc	byte [com_level]
 33739 00002F72 EBA5                    	jmp	short org5
 33740                                  
 33741                                  ;----------------------------------------------------------------------------
 33742                                  ;
 33743                                  ; procedure : get2
 33744                                  ;
 33745                                  ;----------------------------------------------------------------------------
 33746                                  
 33747                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33748                                  	; (SYSINIT:33FAh)
 33749                                  	; 04/01/2023
 33750                                  get2:
 33751 00002F74 E304                    	jcxz	noget
 33752                                  	;
 33753                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33754                                  	;;lods	byte ptr es:[si]
 33755                                  	; 12/12/2022
 33756 00002F76 26                      	es	
 33757 00002F77 AC                      	lodsb
 33758                                  	;mov	al, [es:si]
 33759                                  	;inc	si
 33760                                  	;
 33761 00002F78 49                      	dec	cx
 33762 00002F79 C3                      	retn
 33763                                  noget:
 33764 00002F7A 59                      	pop	cx
 33765                                  	; 04/01/2023
 33766                                  	; ds = cs
 33767                                  	;mov	[cs:count],di ; 13/05/2019
 33768                                  	;mov	[cs:org_count],di
 33769 00002F7B 893E[D203]              	mov	[count],di
 33770 00002F7F 893E[D403]              	mov	[org_count],di
 33771 00002F83 31F6                    	xor	si,si
 33772                                  	;mov	[cs:chrptr],si
 33773 00002F85 8936[D603]              	mov	[chrptr],si
 33774                                  
 33775                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33776                                  ;;ifndef MULTI_CONFIG
 33777                                  ;;	retn
 33778                                  ;;else
 33779                                  ;
 33780                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 33781                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 33782                                  ;;   and the new boot menu stuff...
 33783                                  ;
 33784                                  ;	mov     cx,di
 33785                                  ;	jmp     menu_check
 33786                                  ;;endif
 33787                                  
 33788                                  	; 02/11/2022
 33789 00002F89 C3                      	retn
 33790                                  
 33791                                  ;----------------------------------------------------------------------------
 33792                                  ;
 33793                                  ; procedure : skip_comment
 33794                                  ;
 33795                                  ;skip the commented string until lf, if current es:si-> a comment string.
 33796                                  ;in) es:si-> string
 33797                                  ;	 cx -> length.
 33798                                  ;out) zero flag not set if not found a comment string.
 33799                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 33800                                  ;	  the line feed character at this moment when return.
 33801                                  ;	  ax register destroyed.
 33802                                  ;	  if found, si, cx register adjusted accordingly.
 33803                                  ;
 33804                                  ;----------------------------------------------------------------------------
 33805                                  
 33806                                  	; 04/01/2023 - Retro DOS v4.0
 33807                                  
 33808                                  skip_comment:
 33809 00002F8A E3EE                    	jcxz	noget		; get out of the organize routine.
 33810                                  
 33811                                  	; 04/01/2023
 33812                                  	; ds = cs	
 33813                                  
 33814 00002F8C 803E[CC03]00            	cmp	byte [com_level],0
 33815                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33816 00002F91 752C                    	jne	short no_commt	 ; (not inside quotations)
 33817                                  
 33818 00002F93 803E[CD03]01            	cmp	byte [cmmt],1
 33819                                  	;cmp	byte [cs:cmmt],1
 33820 00002F98 7225                    	jb	short no_commt
 33821                                  
 33822 00002F9A 268A04                  	mov	al,[es:si]
 33823                                  	
 33824 00002F9D 3806[CE03]              	cmp	[cmmt1],al
 33825                                  	;cmp	[cs:cmmt1],al
 33826 00002FA1 751C                    	jne	short no_commt
 33827                                  
 33828 00002FA3 803E[CD03]02            	cmp	byte [cmmt],2
 33829                                  	;cmp	byte [cs:cmmt],2
 33830 00002FA8 750A                    	jne	short skip_cmmt
 33831                                  
 33832 00002FAA 268A4401                	mov	al,[es:si+1]
 33833                                  	
 33834 00002FAE 3806[CF03]              	cmp	[cmmt2],al
 33835                                  	;cmp	[cs:cmmt2],al
 33836 00002FB2 750B                    	jne	short no_commt
 33837                                  skip_cmmt:
 33838 00002FB4 E3C4                    	jcxz	noget		; get out of organize routine.
 33839 00002FB6 268A04                  	mov	al,[es:si]
 33840 00002FB9 46                      	inc	si
 33841 00002FBA 49                      	dec	cx
 33842 00002FBB 3C0A                    	cmp	al,lf		; line feed?
 33843 00002FBD 75F5                    	jne	short skip_cmmt
 33844                                  no_commt:
 33845 00002FBF C3                      	retn
 33846                                  
 33847                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33848                                  %if 0
 33849                                  
 33850                                  ;ifdef	MULTI_CONFIG
 33851                                  
 33852                                  ;----------------------------------------------------------------------------
 33853                                  ;
 33854                                  ;   kbd_read: wait for keystroke
 33855                                  ;
 33856                                  ;   INPUT
 33857                                  ;       DS == CS == sysinitseg
 33858                                  ;
 33859                                  ;   OUTPUT
 33860                                  ;       Carry SET to clean boot, CLEAR otherwise
 33861                                  ;
 33862                                  ;   OTHER REGS USED
 33863                                  ;       All
 33864                                  ;
 33865                                  ;   HISTORY
 33866                                  ;       Created 16-Nov-1992 by JeffPar
 33867                                  ;
 33868                                  ;----------------------------------------------------------------------------
 33869                                  
 33870                                  kbd_read:
 33871                                          test    byte [bDisableUI],2
 33872                                          jnz     short kbd_nodelay
 33873                                  
 33874                                          push    ds              ; the bios timer tick count is incremented
 33875                                          sub     ax,ax           ; 18.2 times per second;
 33876                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33877                                  	;mov	dx,[046Ch]	; get initial value
 33878                                  kbd_loop:
 33879                                          mov     ah,1            ;
 33880                                          int     16h             ; peek the keyboard
 33881                                          jnz	short kbd_loopdone ; something's there, get out
 33882                                          mov     ah,2            ; peek the shift states
 33883                                          int     16h             ;
 33884                                          test    al,03h          ; either right or left shift key bits set?
 33885                                          jnz	short kbd_loopdone ; yes
 33886                                          mov     ax,[046Ch]	;
 33887                                  	;sub	ax,dx           ; get difference
 33888                                  	; 15/04/2019 - Retro DOS v4.0
 33889                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33890                                  
 33891                                  	cmp     al,37           ; reached limit?
 33892                                          jb	short kbd_loop	; not yet
 33893                                  kbd_loopdone:
 33894                                          pop     ds              ; delay complete!
 33895                                  kbd_nodelay:
 33896                                          sub     bx,bx           ; assume clean boot
 33897                                          mov     ah,2            ; peek the shift states
 33898                                          int     16h             ;
 33899                                          test    al,03h          ; either right or left shift key bits set?
 33900                                          jz      short kbd_notshift ; no
 33901                                          inc     bx              ; yes
 33902                                          inc     bx
 33903                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33904                                  	or	byte [bQueryOpt],4
 33905                                  kbd_notshift:                   ;
 33906                                          mov     ah,1            ; peek the keyboard
 33907                                          int     16h             ;
 33908                                          jz	short kbd_test	; no key present
 33909                                          or      al,al           ; is it a function key?
 33910                                          jnz	short kbd_test	; no
 33911                                  
 33912                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33913                                          cmp     ah,62h          ; CTRL F5
 33914                                          je	short kbd_cfg_bypass
 33915                                  	
 33916                                          cmp     ah,3Fh          ; F5 function key?
 33917                                          jne	short kbd_notf5	; no
 33918                                  kbd_cfg_bypass:
 33919                                          mov     dx,_$CleanMsg
 33920                                          call    print
 33921                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33922                                  	or	byte [bQueryOpt],4           ;
 33923                                          jmp     short kbd_eat   ; yes, clean boot selected
 33924                                  kbd_notf5:
 33925                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33926                                          cmp     ah,65h          ; CTRL F8
 33927                                          je	short kbd_cfg_confirm
 33928                                  
 33929                                          cmp     ah,42h          ; F8 function key?
 33930                                          jne	short kbd_exit	; no
 33931                                  kbd_cfg_confirm:
 33932                                          mov     dx,_$InterMsg
 33933                                          call    print           ;
 33934                                          mov     bl,1            ; yes, interactive-boot option enabled
 33935                                          mov     [bQueryOpt],bl  ; change default setting
 33936                                  kbd_eat:                        ;
 33937                                          mov     ah,0            ;
 33938                                          int     16h             ; eat the key we assumed was a signal
 33939                                          mov	byte [secElapsed],-1
 33940                                          or      bx,bx           ;
 33941                                          jz	short kbd_clean	;
 33942                                  kbd_test:                       ;
 33943                                          cmp     bl,2            ;
 33944                                          jb	short kbd_exit	;
 33945                                  kbd_clean:                      ;
 33946                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33947                                          stc                     ; set carry to indicate abort
 33948                                          retn			;
 33949                                  kbd_exit:                       ;
 33950                                          clc                     ; clear carry to indicate success
 33951                                          retn			;
 33952                                  
 33953                                  ;----------------------------------------------------------------------------
 33954                                  ;
 33955                                  ;   set_numlock: set numlock LED
 33956                                  ;
 33957                                  ;   INPUT
 33958                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33959                                  ;
 33960                                  ;   OUTPUT
 33961                                  ;       None
 33962                                  ;
 33963                                  ;   OTHER REGS USED
 33964                                  ;       None
 33965                                  ;
 33966                                  ;   HISTORY
 33967                                  ;       Created 16-Nov-1992 by JeffPar
 33968                                  ;
 33969                                  ;----------------------------------------------------------------------------
 33970                                  
 33971                                  set_numlock:
 33972                                          push    ax
 33973                                          push    ds
 33974                                          sub     ax,ax
 33975                                          mov     ds,ax
 33976                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33977                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33978                                          jne	short not_off	; no
 33979                                          and     byte [0417h],~20h ; 0DFh
 33980                                          jmp     short set_done
 33981                                  not_off:
 33982                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33983                                          stc
 33984                                          jne	short set_done	; no
 33985                                          or      byte [0417h],20h
 33986                                  set_done:
 33987                                          pop     ds
 33988                                          pop     ax
 33989                                          retn
 33990                                  
 33991                                  ; 16/04/2019 - Retro DOS v4.0
 33992                                  
 33993                                  ;----------------------------------------------------------------------------
 33994                                  ;
 33995                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33996                                  ;
 33997                                  ;   INPUT
 33998                                  ;       CX == "organized" config.sys memory image length
 33999                                  ;    ES:SI -> "organized" config.sys memory image
 34000                                  ;       DS == CS == sysinitseg
 34001                                  ;
 34002                                  ;   OUTPUT
 34003                                  ;       Same as above;  the idea is that menu_check simply transforms
 34004                                  ;       a block-structured config.sys image into a conventional image,
 34005                                  ;       based on the user's block selection and any other boot-time options
 34006                                  ;       the user may have employed...
 34007                                  ;
 34008                                  ;   OTHER REGS USED
 34009                                  ;       All
 34010                                  ;
 34011                                  ;   NOTES
 34012                                  ;       [count] and [org_count] are set to the new config.sys image length
 34013                                  ;
 34014                                  ;   HISTORY
 34015                                  ;       Created 16-Mar-1992 by JeffPar
 34016                                  ;
 34017                                  ;----------------------------------------------------------------------------
 34018                                  
 34019                                  menu_check:
 34020                                  
 34021                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 34022                                  ;   disable clean/interactive boot options
 34023                                  
 34024                                          push    cx              ;
 34025                                          push    si              ;
 34026                                          sub     bx,bx           ; remains ZERO until first block
 34027                                  swchk_loop:                     ;
 34028                                          call    get_char        ; get first char of current line
 34029                                          jc	short swchk_end	; hit eof
 34030                                          cmp     al,CONFIG_BEGIN ;
 34031                                          jne	short swchk_next1 ;
 34032                                          inc     bx              ; remember that we've seen a block
 34033                                          jmp     short swchk_nextline
 34034                                  swchk_next1:                    ;
 34035                                          cmp     al,CONFIG_NUMLOCK
 34036                                          jne	short swchk_next2 ;
 34037                                          or      bx,bx           ; only do NUMLOCK commands that exist
 34038                                          jnz	short swchk_nextline ; before the first block
 34039                                          call    set_numlock     ; REM it out so we don't act on it later, too
 34040                                          mov     byte [es:si-1],CONFIG_REM
 34041                                          jmp     short swchk_nextline
 34042                                  swchk_next2:                    ;
 34043                                          cmp     al,CONFIG_SWITCHES
 34044                                          jne	short swchk_nextline ; this line ain't it
 34045                                  swchk_scan:                     ;
 34046                                          call    get_char        ; look for /N or /F
 34047                                  swchk_scan1:                    ;
 34048                                          cmp     al,LF           ; end of line?
 34049                                          je	short swchk_nextline ; yes
 34050                                          cmp     al,'/'          ; switch-char?
 34051                                          jne	short swchk_scan ; no
 34052                                          call    get_char        ;
 34053                                          and     al,~20h ; 0DFh	; convert to upper case
 34054                                          cmp     al,[swit_n+1]
 34055                                          jne	short swchk_scan2 ; no
 34056                                          or      byte [bDisableUI],1
 34057                                          jmp	short swchk_scan ; continue looking for switches of interest
 34058                                  swchk_scan2:                    ;
 34059                                          cmp     al,[swit_f+1]
 34060                                          jne	short swchk_scan1 ; no
 34061                                          or      byte [bDisableUI],2
 34062                                          jmp     short swchk_scan ; continue looking for switches of interest
 34063                                  swchk_nextline:                 ;
 34064                                          call    skip_opt_line   ;
 34065                                          jmp     short swchk_loop ;
 34066                                  swchk_end:                      ;
 34067                                          pop     si              ;
 34068                                          pop     cx              ;
 34069                                  
 34070                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 34071                                  ;   the DisableUI flag is still clear
 34072                                  
 34073                                          test    byte [bDisableUI],1
 34074                                          jnz	short menu_search
 34075                                  ;
 34076                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 34077                                  ;   there is anything at all in the keyboard buffer
 34078                                  ;
 34079                                          call    kbd_read
 34080                                          jnc	short menu_search
 34081                                          jmp	menu_abort
 34082                                  
 34083                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 34084                                  
 34085                                  menu_search:
 34086                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 34087                                          mov     di,szMenu	;
 34088                                          call    find_block      ; find the MENU block
 34089                                          jnc	short menu_found ;
 34090                                          mov     byte [szBoot],0
 34091                                          jmp	no_selection ; not found
 34092                                  
 34093                                  ;   Process the requested menu color(s)
 34094                                  
 34095                                  menu_color:
 34096                                          push    cx              ;
 34097                                          push    dx              ;
 34098                                          mov     dx,0007h        ; default color setting
 34099                                          call    get_number	; get first number
 34100                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 34101                                          mov     ch,bl           ; save it in CH
 34102                                          and     dl,0F0h         ;
 34103                                          or      dl,bl           ;
 34104                                          call    delim           ; did we hit a delimiter
 34105                                          jne	short check_color ; no, all done
 34106                                          call    get_number	; get next number
 34107                                          and     bl,0Fh		; second # is background color (for high nibble)
 34108                                          mov     dh,bl           ; save it in DH
 34109                                          and     dl,0Fh		;
 34110                                          mov     cl,4            ;
 34111                                          shl     bl,cl           ;
 34112                                          or      dl,bl           ;
 34113                                  check_color:                    ;
 34114                                          cmp     ch,dh           ; are foreground/background the same?
 34115                                          jne	short set_color	; no
 34116                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 34117                                  set_color:
 34118                                          mov     [bMenuColor],dl ;
 34119                                          pop     dx              ;
 34120                                          pop     cx              ;
 34121                                          jmp	menu_nextitem
 34122                                  
 34123                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 34124                                  ;   above is there simply to alleviate short jump problems)
 34125                                  
 34126                                  menu_found:
 34127                                          mov     byte [bDefBlock],1
 34128                                          mov     word [offDefBlock],0
 34129                                          mov     byte [secTimeOut],-1
 34130                                          and     byte [bQueryOpt],~2 ; 0FDh
 34131                                  
 34132                                          call    skip_opt_line   ; skip to next line
 34133                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 34134                                  
 34135                                  ;   Process the menu block now
 34136                                  
 34137                                  menu_process:
 34138                                          call    get_char        ; get first char of current line
 34139                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 34140                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34141                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 34142                                          je	short to_menu_getdefault
 34143                                          cmp     al,CONFIG_SUBMENU
 34144                                          je	short menu_item	; go process sub-menu
 34145                                          cmp     al,CONFIG_MENUITEM
 34146                                          je	short menu_item	; go process menu item
 34147                                          cmp     al,CONFIG_MENUDEFAULT
 34148                                          je	short menu_default ; go process menu default
 34149                                          cmp     al,CONFIG_MENUCOLOR
 34150                                          je	short menu_color ; go process menu color
 34151                                          cmp     al,CONFIG_NUMLOCK
 34152                                          je	short menu_numlock ;
 34153                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 34154                                          je	short menu_nextitem ;
 34155                                          call    any_delim       ; allow blank lines and such
 34156                                          je	short menu_nextitem ;
 34157                                          stc                     ;
 34158                                          call    print_error     ; non-MENU command!
 34159                                          jmp     short menu_nextitem
 34160                                  menu_numlock:
 34161                                          call    set_numlock
 34162                                          jmp     short menu_nextitem
 34163                                  to_menu_getdefault:
 34164                                          jmp     short menu_getdefault
 34165                                  
 34166                                  ;   Save the offset of the default block name, we'll need it later
 34167                                  
 34168                                  menu_default:
 34169                                          mov     [offDefBlock],si; save address of default block name
 34170                                          cmp     byte [secElapsed],0
 34171                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 34172                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 34173                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 34174                                          call    skip_delim      ; something is typed
 34175                                          jc	short menu_nextitem ;
 34176                                          mov     si,bx           ;
 34177                                          call    get_number      ; get number (of seconds for timeout)
 34178                                          cmp     bl,90           ; limit it to a reasonable number
 34179                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 34180                                          mov     bl,90           ;  display function can handle)
 34181                                  timeout_ok:                     ;
 34182                                          mov     [secTimeOut],bl ;
 34183                                  timeout_skip:
 34184                                          jmp     short menu_nextitem
 34185                                  
 34186                                  ;   Verify that this is a valid menu item by searching for the named block
 34187                                  
 34188                                  menu_item:
 34189                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 34190                                          jae	short menu_nextitem ;
 34191                                          mov     di,si           ; DS:DI -> block name to search for
 34192                                          call    srch_block      ;
 34193                                          je	short menu_itemfound ;
 34194                                          stc                     ;
 34195                                          call    print_error     ; print error and pause
 34196                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 34197                                  
 34198                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 34199                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 34200                                  ;   and CX are unmodified
 34201                                  
 34202                                  menu_itemfound:
 34203                                          inc     dx              ; otherwise, increment total block count
 34204                                          mov     bx,dx           ; and use it to index the arrays of offsets
 34205                                          mov	[abBlockType+bx],al
 34206                                          add     bx,bx           ; of recorded block names and descriptions
 34207                                  
 34208                                  ;   There should be a description immediately following the block name on
 34209                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 34210                                  ;   description...
 34211                                  
 34212                                          mov     [aoffBlockName+bx],si
 34213                                          mov     [aoffBlockDesc+bx],si
 34214                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 34215                                          call    skip_token      ;
 34216                                          jc	short menu_nextitem ; hit eol/eof
 34217                                          call    skip_delim      ;
 34218                                          jc	short menu_nextitem ; hit eol/eof
 34219                                          xchg    bx,di           ;
 34220                                          mov     [aoffBlockDesc+bx],di
 34221                                  
 34222                                  menu_nextitem:
 34223                                          call    skip_opt_line   ;
 34224                                          jmp     menu_process    ; go back for more lines
 34225                                  
 34226                                  ;   Display menu items now, after determining which one is default
 34227                                  
 34228                                  menu_getdefault:
 34229                                          or      dl,dl           ; where there any valid blocks at all?
 34230                                          jnz	short menu_valid ; yes
 34231                                          sub     bx,bx           ; no, so force autoselect of 0
 34232                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 34233                                  menu_valid:
 34234                                          sub     bx,bx           ;
 34235                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 34236                                          mov     di,[offDefBlock];
 34237                                          or      di,di           ; does a default block exist?
 34238                                          jz	short menu_nodefault ; no
 34239                                          inc     bx              ; yes, walk name table, looking for default
 34240                                  menu_chkdefault:
 34241                                          push    bx              ;
 34242                                          add     bx,bx           ;
 34243                                          mov     si,[aoffBlockName+bx]
 34244                                          mov     cx,128          ; arbitrary maximum length of a name
 34245                                          push    ds              ;
 34246                                          push    es              ;
 34247                                          pop     ds              ;
 34248                                          call    comp_names      ; is this block the same as the default?
 34249                                          pop     ds              ;
 34250                                          pop     bx              ;
 34251                                          je	short menu_setdefault ; yes
 34252                                          inc     bx              ;
 34253                                          cmp     bl,[bMaxBlock]  ; all done searching?
 34254                                          jbe	short menu_chkdefault ; not yet
 34255                                  menu_nodefault:
 34256                                          mov     bl,1            ; if no default, force default to #1
 34257                                  menu_setdefault:
 34258                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 34259                                  
 34260                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 34261                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 34262                                  ;   supposed to skip menu display and run with the specified default block;
 34263                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 34264                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 34265                                  ;   with no timeout)
 34266                                  
 34267                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 34268                                          jne	short menu_display ; no
 34269                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 34270                                          jnz	short menu_display ; yes, so *don't* assume default after all
 34271                                          jmp     not_topmenu	;
 34272                                  
 34273                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 34274                                  
 34275                                  menu_display:
 34276                                          mov     ah,0Fh          ; get current video mode
 34277                                          int     10h             ;
 34278                                          mov     ah,00h          ; just re-select that mode
 34279                                          int     10h             ;
 34280                                          push    es              ;
 34281                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 34282                                          mov     es,ax           ; and save the current (default) video page
 34283                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 34284                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 34285                                          mov     al,[es:0062h]   ;
 34286                                          mov     [bCRTPage],al   ;
 34287                                          mov     ax,[bMenuPage]	; select new page for menu
 34288                                          int     10h             ;
 34289                                          mov     ax,0600h        ; clear entire screen
 34290                                          mov     bh,[bMenuColor] ; using this color
 34291                                          sub     cx,cx           ; upper left row/col
 34292                                          ;mov	dl,[es:CRT_Cols] 
 34293                                          mov	dl,[es:4Ah]
 34294                                  	dec     dl              ;
 34295                                          ;mov	dh,[es:CRT_Rows];
 34296                                          mov	dh,[es:84h]
 34297                                  	or      dh,dh           ; # of rows valid?
 34298                                          jnz	short menu_clear ; hopefully
 34299                                          mov     dh,[bLastRow]   ; no, use a default
 34300                                  menu_clear:
 34301                                          int     10h             ; clear the screen using the req. attribute
 34302                                          pop     es              ;
 34303                                          mov     [bLastRow],dh   ; save DH
 34304                                          mov     dx,_$MenuHeader
 34305                                          call    print           ; cursor now on row 3 (numbered from 0)
 34306                                  
 34307                                          test    byte [bDisableUI],1
 34308                                          jnz     short menu_nostatus
 34309                                          mov     bh,[bMenuPage]  ;
 34310                                          mov     dh,[bLastRow]   ; restore DH
 34311                                          mov     dl,0            ; print the status line on row DH, col 0,
 34312                                          mov     ah,02h          ; now that we can trash the cursor position
 34313                                          int     10h             ;
 34314                                          mov     dx,_$StatusLine
 34315                                          call    print           ;
 34316                                          mov     ah,3            ; get cursor position
 34317                                          int     10h             ;
 34318                                          sub     dl,2            ;
 34319                                          mov     [bLastCol],dl   ; save column where status char will go
 34320                                  
 34321                                  menu_nostatus:
 34322                                          mov     bx,1            ; now prepare to display all the menu items
 34323                                  menu_disploop:
 34324                                          call    print_item	; print item #BL
 34325                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 34326                                          cmp     bl,[bMaxBlock]  ; all done?
 34327                                          jbe	short menu_disploop ; not yet
 34328                                  
 34329                                  ;   Set cursor position to just below the menu items
 34330                                  
 34331                                          mov     dl,0            ; select column
 34332                                          mov     dh,bl           ;
 34333                                          add     dh,4            ; select row below menu
 34334                                          mov     bh,[bMenuPage]  ;
 34335                                          mov     ah,02h          ; set cursor position beneath the block list
 34336                                          int     10h             ;
 34337                                  
 34338                                          mov     dx,_$MenuPrmpt
 34339                                          call    print           ;
 34340                                          call    select_item     ; make a selection, return # in BX
 34341                                          mov     dx,crlfm	
 34342                                          call    print           ;
 34343                                          push    word [bDisableUI]
 34344                                          or      byte [bDisableUI],1
 34345                                          call    show_status     ; clear the status line now
 34346                                          pop     word [bDisableUI]
 34347                                  
 34348                                  ;   Now begins the "re-organization" process...
 34349                                  
 34350                                  menu_autoselect:
 34351                                          cmp     bx,-1           ; clean boot requested?
 34352                                          jne	short normal_boot ; no
 34353                                          call    disable_autoexec; basically, add a /D to the command.com line
 34354                                  menu_abort:
 34355                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 34356                                          jmp	menu_exit	;
 34357                                  
 34358                                  normal_boot:
 34359                                          cmp     bx,-2           ; back to top-level menu?
 34360                                          jne	short not_topmenu ; no
 34361                                          mov     cx,[count]      ; yes, start all over
 34362                                          sub     si,si           ;
 34363                                          jmp     menu_search
 34364                                  
 34365                                  not_topmenu:
 34366                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 34367                                          jne	short not_submenu
 34368                                          add     bx,bx           ;
 34369                                          mov     di,[aoffBlockName+bx]
 34370                                          call    srch_block      ; THIS CANNOT FAIL!
 34371                                          mov     si,di           ;
 34372                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 34373                                          jmp     menu_found
 34374                                  
 34375                                  not_submenu:
 34376                                          add     bx,bx           ; get BX -> name of selected block
 34377                                          mov     bx,[aoffBlockName+bx]
 34378                                  
 34379                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 34380                                  ;   the offset relative to ES of the block name to be processed (along with
 34381                                  ;   all the "common" lines of course)
 34382                                  
 34383                                  no_selection:
 34384                                          mov     [offDefBlock],bx; save selection
 34385                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 34386                                          sub     si,si           ;
 34387                                          push    ds              ;
 34388                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 34389                                          sub     di,di           ;
 34390                                  
 34391                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 34392                                  ;
 34393                                  ;   Work our way through the config.sys image again, this time copying
 34394                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 34395                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 34396                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 34397                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 34398                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 34399                                  ;
 34400                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 34401                                  ;   stack we're running on, then we should check it inside copy_block
 34402                                  
 34403                                  copyblock_loop:
 34404                                          push    bx              ; save selected block name
 34405                                          call    copy_block      ; process (named or common) block
 34406                                          pop     bx              ;
 34407                                          jc	short move_config ; hit eof
 34408                                  
 34409                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 34410                                  
 34411                                  copyblock_begin:
 34412                                          push    ax              ;
 34413                                          push    cx              ;
 34414                                          push    si              ;
 34415                                          push    di              ; always do "common" blocks
 34416                                          mov     di,szCommon
 34417                                          push    ds              ;
 34418                                          push    cs              ;
 34419                                          pop     ds              ;
 34420                                          call    comp_names      ;
 34421                                          pop     ds              ;
 34422                                          pop     di              ;
 34423                                          pop     si              ;
 34424                                          pop     cx              ;
 34425                                          pop     ax              ;
 34426                                          je	short copyblock_check
 34427                                          or      bx,bx           ; is there a block name to check?
 34428                                          jz	short copyblock_skip ; no
 34429                                          push    di              ;
 34430                                          mov     di,bx           ; check block against given block name
 34431                                          push    ds              ;
 34432                                          push    es              ;
 34433                                          pop     ds              ;
 34434                                          call    comp_names      ; is this the block we really want to do?
 34435                                          pop     ds              ;
 34436                                          pop     di              ;
 34437                                  copyblock_check:
 34438                                          jc	short move_config ; hit eof
 34439                                          jne	short copyblock_skip  ;
 34440                                          call    skip_opt_line   ;
 34441                                          jmp	short copyblock_loop 
 34442                                  
 34443                                  copyblock_skip:                 ;
 34444                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 34445                                          call    get_char        ;
 34446                                          jc	short move_config ; hit eof
 34447                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34448                                          cmp     al,CONFIG_BEGIN ;
 34449                                          je	short copyblock_begin
 34450                                          jmp     short copyblock_skip ; anything else is just skipped
 34451                                  ;
 34452                                  ;   To create as little risk to the rest of SysInit as little as possible,
 34453                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 34454                                  ;   copy the new config.sys image to "confbot"
 34455                                  ;
 34456                                  move_config:
 34457                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 34458                                          push    cx              ;
 34459                                  ;
 34460                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 34461                                  ;   since the configuration name only currently exists in the "confbot" area
 34462                                  ;
 34463                                   	;mov	cx,7
 34464                                  	mov     cx,szMenu-szBoot-1
 34465                                          mov     si,szBoot	; first copy the CONFIG= part
 34466                                          inc     di              ; skip a byte, in case absolutely nothing
 34467                                                                  ; was copied to the workspace, because we always
 34468                                                                  ; zero the first byte of the workspace (below)
 34469                                  copy_boot: 
 34470                                  	;lods    byte ptr cs:[si];
 34471                                          cs
 34472                                  	lodsb
 34473                                  	mov     [di],al         ;
 34474                                          inc     di              ;
 34475                                          loop    copy_boot       ;
 34476                                  
 34477                                          push    es              ; then copy the configuration name
 34478                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 34479                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 34480                                          or      si,si           ; valid?
 34481                                          jnz	short l1	; yes
 34482                                          push    cs              ;
 34483                                          pop     es              ;
 34484                                          mov     si,szCommon
 34485                                  l1:     mov     al,[es:si]      ;
 34486                                          call    any_delim       ;
 34487                                          je	short l2	;
 34488                                          mov     [di],al         ;
 34489                                          inc     si              ;
 34490                                          inc     di              ;
 34491                                          loop    l1              ;
 34492                                  l2:     mov     byte [di],lf	; terminate the configuration string
 34493                                          pop     es              ;
 34494                                  
 34495                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 34496                                  
 34497                                          sub     di,di           ;
 34498                                          mov     [cs:config_envlen],di
 34499                                          sub     si,si           ;
 34500                                          pop     cx              ; recover the size of "config_wrkseg"
 34501                                  
 34502                                          push    cx              ;
 34503                                          rep     movsb           ; moved!
 34504                                          pop     cx              ;
 34505                                          mov     ax,ds           ;
 34506                                          pop     ds              ;
 34507                                  
 34508                                  ;   Now that the config_wrkseg is available once again, we shall
 34509                                  ;   use it to create an environment. The first thing to go in will be
 34510                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 34511                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 34512                                  ;   is empty.
 34513                                  
 34514                                          push    es              ;
 34515                                          mov     es,ax           ;
 34516                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 34517                                          mov     byte [es:0],0	;empty the environment block
 34518                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 34519                                          pop     es
 34520                                  
 34521                                  ;   Before returning, restore the default video page setting but do NOT
 34522                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 34523                                  ;   displayed on a different page, then it's because we don't want to see
 34524                                  ;   all the device driver/TSR goop (which goes to the default page)
 34525                                  
 34526                                  menu_done:
 34527                                          cmp     byte [bMenuPage],0
 34528                                          je	short menu_exit	;
 34529                                          push    es              ;
 34530                                          mov     ax,40h          ;
 34531                                          mov     es,ax           ;
 34532                                          mov     ax,[wCRTStart]  ;
 34533                                          mov     [es:004Eh],ax   ;
 34534                                          mov     al,[bCRTPage]   ;
 34535                                          mov     [es:0062h],al   ;
 34536                                          pop     es              ;
 34537                                  menu_exit:
 34538                                          mov     [count],cx      ; set new counts
 34539                                          mov     [org_count],cx  ;
 34540                                          sub     si,si           ; always return ES:SI pointing to config.sys
 34541                                          retn
 34542                                  
 34543                                  ;----------------------------------------------------------------------------
 34544                                  ;
 34545                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 34546                                  ;
 34547                                  ;   INPUT
 34548                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 34549                                  ;
 34550                                  ;   OUTPUT
 34551                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 34552                                  ;       carry set if error (eg, missing =); clear otherwise
 34553                                  ;
 34554                                  ;   OTHER REGS USED
 34555                                  ;       None
 34556                                  ;
 34557                                  ;   NOTES
 34558                                  ;       None
 34559                                  ;
 34560                                  ;   HISTORY
 34561                                  ;       Created 29-Mar-1992 by JeffPar
 34562                                  ;
 34563                                  ;----------------------------------------------------------------------------
 34564                                  
 34565                                  copy_envvar:
 34566                                          push    cx              ;
 34567                                          push    si              ;
 34568                                          push    ds              ;
 34569                                          push    es              ;
 34570                                          push    es              ;
 34571                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 34572                                          pop     ds                 ; DS:SI to point to envvar
 34573                                  
 34574                                  ;   Have to calculate the length of the variable name (and if we hit
 34575                                  ;   the end of the line before we hit '=', then it's curtains for this
 34576                                  ;   config.sys line)
 34577                                  ;
 34578                                  ;   The check for NULL is important because copy_envvar is also used to copy
 34579                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 34580                                  ;   menu block existed (in order to prevent the creation of an environment)
 34581                                  
 34582                                          sub     cx,cx           ;
 34583                                  copy_varlen:                    ;
 34584                                          lodsb                   ;
 34585                                          or      al,al           ; NULL?
 34586                                          stc                     ;
 34587                                          jz	short copy_envexit ; yes, abort
 34588                                          cmp     al,cr          ;
 34589                                          stc                     ;
 34590                                          je	short copy_envexit
 34591                                          cmp     al,lf          ;
 34592                                          stc                     ;
 34593                                          je	short copy_envexit
 34594                                          inc     cx              ;
 34595                                          cmp     al,'='          ;
 34596                                          jne	short copy_varlen
 34597                                          mov     al,0            ;
 34598                                          mov     ah,[si]         ; save char after '='
 34599                                          sub     si,cx           ; back up to given varname
 34600                                          dec     cx              ; CX == # of bytes in varname
 34601                                          sub     di,di           ; start looking for DS:SI at ES:0
 34602                                  copy_varsrch:
 34603                                          cmp     byte [es:di],al
 34604                                          je	short copy_envprep ; search failed, just copy var
 34605                                          mov     bx,di           ; ES:BX -> start of this varname
 34606                                          push    cx              ;
 34607                                          push    si              ;
 34608                                          repe    cmpsb           ;
 34609                                          pop     si              ;
 34610                                          pop     cx              ;
 34611                                          jne	short copy_varnext ; no match, skip to next varname
 34612                                          cmp     byte [es:di],'='
 34613                                          jne     short copy_varnext ; no match, there's more characters
 34614                                  
 34615                                  ;   Previous occurrence of variable has been found; determine the
 34616                                  ;   entire length and then destroy it
 34617                                  
 34618                                          mov     cx,-1           ;
 34619                                          repne   scasb           ; guaranteed to get null (since we put it there)
 34620                                          push    si              ;
 34621                                          mov     si,di           ;
 34622                                          mov     di,bx           ;
 34623                                          mov     cx,[cs:config_envlen]
 34624                                          sub     cx,si           ; destroy variable now
 34625                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 34626                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 34627                                  
 34628                                  	rep	; 0F3h
 34629                                  	es	; 26h
 34630                                  	movsb	; 0A4h
 34631                                  
 34632                                  	pop     si
 34633                                  copy_envprep:
 34634                                          cmp     ah,cr          ; if there is nothing after the '='
 34635                                          je	short copy_envdel ; then just exit with variable deleted
 34636                                          cmp     ah,lf           ;
 34637                                          je	short copy_envdel
 34638                                          jmp     short copy_envloop
 34639                                  
 34640                                  copy_varnext:                   ;
 34641                                          push    cx              ;
 34642                                          mov     cx,-1           ;
 34643                                          repne   scasb           ;
 34644                                          pop     cx              ;
 34645                                          jmp	short copy_varsrch
 34646                                  
 34647                                  copy_envloop:                   ;
 34648                                          lodsb                   ;
 34649                                          cmp     al,cr           ;
 34650                                          je	short copy_envdone
 34651                                          cmp     al,lf           ;
 34652                                          je	short copy_envdone
 34653                                          stosb                   ;
 34654                                          jmp     short copy_envloop
 34655                                  
 34656                                  copy_envdone:                   ;
 34657                                          sub     al,al           ; do SUB to clear carry as well
 34658                                          stosb                   ; always null-terminate these puppies
 34659                                  copy_envdel:                    ;
 34660                                          mov     [es:di],al      ; and stick another null to terminate the env.
 34661                                          mov     [cs:config_envlen],di
 34662                                  
 34663                                  copy_envexit:                   ;
 34664                                          pop     es              ;
 34665                                          pop     ds              ;
 34666                                          pop     si              ;
 34667                                          pop     cx              ;
 34668                                  
 34669                                  copy_done:	; 18/12/2022
 34670                                          retn
 34671                                  
 34672                                  ;----------------------------------------------------------------------------
 34673                                  ;
 34674                                  ;   copy_block:  copy the current block to the new config.sys workspace
 34675                                  ;
 34676                                  ;   INPUT
 34677                                  ;       CX == remaining bytes in "organized" config.sys memory image
 34678                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 34679                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 34680                                  ;             config.sys image) where the current block is to be copied
 34681                                  ;
 34682                                  ;   OUTPUT
 34683                                  ;       Same as above
 34684                                  ;       AL also equals the last character read from the organized image
 34685                                  ;
 34686                                  ;   OTHER REGS USED
 34687                                  ;       All
 34688                                  ;
 34689                                  ;   NOTES
 34690                                  ;       None
 34691                                  ;
 34692                                  ;   HISTORY
 34693                                  ;       Created 16-Mar-1992 by JeffPar
 34694                                  ;
 34695                                  ;----------------------------------------------------------------------------
 34696                                  
 34697                                  copy_block:
 34698                                          call    get_char        ; check for include
 34699                                          jc	short copy_done	;
 34700                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34701                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 34702                                          je	short copy_done ;
 34703                                  
 34704                                          cmp     al,CONFIG_INCLUDE ; 'J'
 34705                                          mov     al,ah           ; AL == the original line code
 34706                                          jne	short copy_line	; not an "include" line
 34707                                  
 34708                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 34709                                  ;   never try to include the block again (no infinite include loops please),
 34710                                  ;   then search for the named block and call copy_block again.
 34711                                  
 34712                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 34713                                          push    di              ;
 34714                                  
 34715                                          mov     di,szMenu
 34716                                          call    comp_names_safe ; don't allow INCLUDE MENU
 34717                                          je	short copy_skip	;
 34718                                  
 34719                                          mov     di,szCommon
 34720                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 34721                                          je	short copy_skip	;
 34722                                  
 34723                                          mov     di,si           ; try to find the block
 34724                                          call    srch_block      ;
 34725                                          mov     dx,di           ;
 34726                                          pop     di              ;
 34727                                          jne	short copy_error ; no such block
 34728                                          push    cx              ;
 34729                                          mov     cx,bx           ;
 34730                                          push    si              ;
 34731                                          dec     dx              ;
 34732                                          mov     si,dx           ;
 34733                                          call    skip_line       ; skip the rest of the "block name" line
 34734                                          call    copy_block      ; and copy in the rest of that block
 34735                                          pop     si              ;
 34736                                          pop     cx              ;
 34737                                          sub     al,al           ; force skip_opt_line to skip...
 34738                                          jmp     short copy_nextline
 34739                                  
 34740                                  copy_skip:
 34741                                          pop     di
 34742                                  copy_error:
 34743                                          clc                     ;
 34744                                          call    print_error     ; note that carry is clear, no pause
 34745                                          jmp     short copy_nextline
 34746                                  
 34747                                  ;   Copy the line at ES:SI to the current location at DS:DI
 34748                                  
 34749                                  copy_line:
 34750                                          mov     [di],al         ;
 34751                                          inc     di              ;
 34752                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 34753                                          jb	short copy_nextline ; no
 34754                                          cmp     byte [cs:config_multi],0
 34755                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 34756                                          call    get_linenum	; BX == line # of line @ES:SI
 34757                                          mov     [di],bx         ; stash it immediately following the line code
 34758                                          inc     di              ;
 34759                                          inc     di              ;
 34760                                          jmp     short copy_next ;
 34761                                  copy_loop:                      ;
 34762                                          call    get_char        ;
 34763                                          jc	short copy_done ; end of file
 34764                                          mov     [di],al         ;
 34765                                          inc     di              ;
 34766                                  copy_next:
 34767                                          cmp     al,lf ; 0Ah	; done with line?
 34768                                          jne	short copy_loop	; nope
 34769                                  
 34770                                  copy_nextline:
 34771                                          call    skip_opt_line   ;
 34772                                          jmp     short copy_block
 34773                                  
 34774                                  	; 18/12/2022
 34775                                  ;copy_done:
 34776                                          ;retn
 34777                                  
 34778                                  ;----------------------------------------------------------------------------
 34779                                  ;
 34780                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 34781                                  ;
 34782                                  ;   INPUT
 34783                                  ;    ES:SI -> some line in the config.sys memory image
 34784                                  ;
 34785                                  ;   OUTPUT
 34786                                  ;       BX == line # (relative to 1)
 34787                                  ;
 34788                                  ;   OTHER REGS USED
 34789                                  ;       DX
 34790                                  ;
 34791                                  ;   NOTES
 34792                                  ;       None
 34793                                  ;
 34794                                  ;   HISTORY
 34795                                  ;       Created 16-Mar-1992 by JeffPar
 34796                                  ;
 34797                                  ;----------------------------------------------------------------------------
 34798                                  
 34799                                  get_linenum:
 34800                                          push    ax              ;
 34801                                          sub     bx,bx           ; BX == line # (to be returned)
 34802                                          push    cx              ;
 34803                                          mov     dx,si           ; DX == the offset we're looking for
 34804                                          push    si              ;
 34805                                          mov     cx,[cs:count]   ;
 34806                                          sub     si,si           ; prepare to scan entire file
 34807                                  get_linenum_loop:               ;
 34808                                          call    skip_line       ;
 34809                                          jc	short get_linenum_done
 34810                                          inc     bx              ;
 34811                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 34812                                          jb	short get_linenum_loop ; no
 34813                                  get_linenum_done:               ;
 34814                                          pop     si              ;
 34815                                          pop     cx              ;
 34816                                          pop     ax              ;
 34817                                          retn
 34818                                  
 34819                                  ;----------------------------------------------------------------------------
 34820                                  ;
 34821                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34822                                  ;
 34823                                  ;   INPUT
 34824                                  ;       ES -> config.sys image
 34825                                  ;    ES:DI -> block name to find
 34826                                  ;
 34827                                  ;   OUTPUT
 34828                                  ;       ZF flag set, if found
 34829                                  ;    ES:DI -> just past the name in the block heading, if found
 34830                                  ;       BX == # bytes remaining from that point, if found
 34831                                  ;
 34832                                  ;   OTHER REGS USED
 34833                                  ;       None
 34834                                  ;
 34835                                  ;   NOTES
 34836                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34837                                  ;       config.sys image, not merely the remaining portion, and that it
 34838                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34839                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34840                                  ;
 34841                                  ;   HISTORY
 34842                                  ;       Created 16-Mar-1992 by JeffPar
 34843                                  ;
 34844                                  ;----------------------------------------------------------------------------
 34845                                  
 34846                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34847                                          push    ax              ;
 34848                                          push    cx              ;
 34849                                          mov     cx,[cs:count]   ;
 34850                                          push    si              ;
 34851                                          sub     si,si           ;
 34852                                          push    ds              ;
 34853                                          push    es              ;
 34854                                          pop     ds              ;
 34855                                          call    find_block      ;
 34856                                          mov     di,si           ;
 34857                                          mov     bx,cx           ;
 34858                                          pop     ds              ;
 34859                                          pop     si              ;
 34860                                          pop     cx              ;
 34861                                          pop     ax              ;
 34862                                  find_exit: ; 16/04/2019
 34863                                          retn			;
 34864                                  
 34865                                  ;----------------------------------------------------------------------------
 34866                                  ;
 34867                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34868                                  ;
 34869                                  ;   INPUT
 34870                                  ;    DS:DI -> block name to find
 34871                                  ;    ES:SI -> remainder of config.sys image
 34872                                  ;       CX == remaining size of config.sys image
 34873                                  ;
 34874                                  ;   OUTPUT
 34875                                  ;       ZF flag set, if found (also, CF set if EOF)
 34876                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34877                                  ;       CX == # bytes remaining from that point
 34878                                  ;
 34879                                  ;   OTHER REGS USED
 34880                                  ;       AX
 34881                                  ;
 34882                                  ;   NOTES
 34883                                  ;       This differs from "srch_block" in that it searches only the
 34884                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34885                                  ;       pointing to where the search left off, and that it takes a pointer
 34886                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34887                                  ;
 34888                                  ;   HISTORY
 34889                                  ;       Created 16-Mar-1992 by JeffPar
 34890                                  ;
 34891                                  ;----------------------------------------------------------------------------
 34892                                  
 34893                                  find_block:
 34894                                          call    get_char        ; get line code
 34895                                          jc	short find_exit	; end of file
 34896                                          and     al,~CONFIG_OPTION_QUERY
 34897                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34898                                          je	short check_line ; no
 34899                                          cmp     al,CONFIG_INCLUDE
 34900                                          jne	short next_line	;
 34901                                          or	byte [cs:config_multi],1
 34902                                          jmp     short next_line ;
 34903                                  check_line:
 34904                                          or      byte [cs:config_multi],1
 34905                                          call    comp_names      ; compare block names
 34906                                          jbe	short find_exit	; end of file, or names matched
 34907                                  next_line:
 34908                                          call    skip_opt_line   ; no, so skip to next line
 34909                                          jmp	short find_block  ;
 34910                                  ;find_exit:
 34911                                  ;	retn
 34912                                  
 34913                                  ;----------------------------------------------------------------------------
 34914                                  ;
 34915                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34916                                  ;
 34917                                  ;   INPUT
 34918                                  ;    DS:DI -> keyword to compare
 34919                                  ;    ES:SI -> position in config.sys
 34920                                  ;       CX == remaining bytes in config.sys
 34921                                  ;
 34922                                  ;   OUTPUT
 34923                                  ;       ZF flag set, if match (also, CF set if EOF)
 34924                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34925                                  ;       CX == # bytes remaining from that point
 34926                                  ;
 34927                                  ;   OTHER REGS USED
 34928                                  ;       AX
 34929                                  ;
 34930                                  ;   NOTES
 34931                                  ;       None
 34932                                  ;
 34933                                  ;   HISTORY
 34934                                  ;       Created 16-Mar-1992 by JeffPar
 34935                                  ;
 34936                                  ;----------------------------------------------------------------------------
 34937                                  
 34938                                  comp_names:
 34939                                          push    di              ;
 34940                                  comp_loop:                      ;
 34941                                          call    get_char        ;
 34942                                          jc	short comp_exit	;
 34943                                          call    any_delim       ; is next character a delimiter?
 34944                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34945                                          je	short comp_almost ; yes, it *could* be a match
 34946                                          inc     di              ;
 34947                                          and     ax,~2020h ; 0DFDFh 
 34948                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34949                                          cmp     al,ah           ; match?
 34950                                          je	short comp_loop ; yes, keep looking at the characters
 34951                                          clc                     ; prevent erroneous eof indication: clear carry
 34952                                  comp_exit:                      ;
 34953                                          pop     di              ;
 34954                                          retn			;
 34955                                  comp_almost:                    ;
 34956                                          xchg    al,ah           ; we don't know for sure if it's a match
 34957                                          call    any_delim       ; until we verify that the second string has
 34958                                          xchg    al,ah           ; been exhausted also...
 34959                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34960                                  
 34961                                  ;----------------------------------------------------------------------------
 34962                                  
 34963                                  comp_names_safe:
 34964                                          push    ax
 34965                                          push    cx
 34966                                          push	si
 34967                                          push    ds
 34968                                          push    cs
 34969                                          pop     ds
 34970                                          call    comp_names
 34971                                          pop     ds
 34972                                  	pop	si
 34973                                          pop     cx
 34974                                          pop     ax
 34975                                          retn
 34976                                  
 34977                                  ;----------------------------------------------------------------------------
 34978                                  ;
 34979                                  ;   print_item:  display menu item #BL
 34980                                  ;
 34981                                  ;   INPUT
 34982                                  ;       BL == menu item # to display
 34983                                  ;
 34984                                  ;   OUTPUT
 34985                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34986                                  ;
 34987                                  ;   OTHER REGS USED
 34988                                  ;       None
 34989                                  ;
 34990                                  ;   NOTES
 34991                                  ;       This function saves/restores the current cursor position, so you
 34992                                  ;       needn't worry about it.
 34993                                  ;
 34994                                  ;   HISTORY
 34995                                  ;       Created 16-Mar-1992 by JeffPar
 34996                                  ;
 34997                                  ;----------------------------------------------------------------------------
 34998                                  
 34999                                  print_item:		; prints menu item #BL (1 to N)
 35000                                          push    ax              ;
 35001                                          push    bx              ;
 35002                                          push    cx              ;
 35003                                          push    dx              ;
 35004                                          push    si              ;
 35005                                          mov     ah,03h          ; get cursor position
 35006                                          mov     bh,[bMenuPage]  ; always page zero
 35007                                          int     10h             ; DH/DL = row/column
 35008                                          push    dx              ; save it
 35009                                          mov     ah,02h          ; set cursor position
 35010                                          mov     dh,bl           ;
 35011                                          add     dh,3            ;
 35012                                          mov     dl,5            ;
 35013                                          int     10h             ; set cursor position for correct row/col
 35014                                          mov     al,bl           ;
 35015                                          add     al,'0'          ; convert menu item # to ASCII digit
 35016                                          mov     ah,[bMenuColor] ; normal attribute
 35017                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 35018                                          jne	short print_other ; no
 35019                                          or      ah,70h          ; yes, set bgnd color to white
 35020                                          mov     ch,ah           ;
 35021                                          mov     cl,4            ;
 35022                                          rol     ch,cl           ;
 35023                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 35024                                          jne	short print_other ; no
 35025                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 35026                                  print_other:                    ;
 35027                                          mov     bh,0            ;
 35028                                          add     bx,bx           ;
 35029                                          mov     di,[aoffBlockDesc+bx]
 35030                                          mov     bl,ah           ; put the attribute in the correct register now
 35031                                          mov     bh,[bMenuPage]  ; get correct video page #
 35032                                          mov     ah,09h          ; write char/attr
 35033                                          mov     cx,1            ;
 35034                                          int     10h             ;
 35035                                          inc     dl              ; increment column
 35036                                          mov     ah,02h          ;
 35037                                          int     10h             ;
 35038                                          ;mov	ax,0900h+'.'    ;
 35039                                          mov	ax,092Eh
 35040                                  	int     10h             ; display '.'
 35041                                          inc     dl              ; increment column
 35042                                          mov     ah,02h          ;
 35043                                          int     10h             ;
 35044                                          ;mov	ax,0900h+' '    ;
 35045                                          mov	ax,0920h
 35046                                  	int     10h             ; display ' '
 35047                                          inc     dl              ; increment column
 35048                                          mov     ah,02h          ;
 35049                                          int     10h             ;
 35050                                          push    es              ;
 35051                                  print_loop:                     ;
 35052                                          mov     al,[es:di]	; get a character of the description
 35053                                          inc     di              ;
 35054                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 35055                                          jne	short print_nontab ;
 35056                                          mov     al,' '          ;
 35057                                  print_nontab:                   ;
 35058                                          cmp     al,' '          ;
 35059                                          jb	short print_done ; stop at the 1st character < space
 35060                                          cmp     al,'$'          ;
 35061                                          je	short print_done ; also stop on $
 35062                                          mov     ah,09h          ; display function #
 35063                                          int     10h             ;
 35064                                          inc     dl              ; increment column
 35065                                          cmp     dl,78           ; far enough?
 35066                                          jae	short print_done ; yes
 35067                                          mov     ah,02h          ;
 35068                                          int     10h             ;
 35069                                          jmp     print_loop      ;
 35070                                  print_done:                     ;
 35071                                          pop     es              ;
 35072                                          pop     dx              ;
 35073                                          mov     ah,02h          ;
 35074                                          int     10h             ; restore previous row/col
 35075                                          pop     si              ;
 35076                                          pop     dx              ;
 35077                                          pop     cx              ;
 35078                                          pop     bx              ;
 35079                                          pop     ax              ;
 35080                                          retn			;
 35081                                  
 35082                                  ;----------------------------------------------------------------------------
 35083                                  ;
 35084                                  ;   select_item:  wait for user to select menu item, with time-out
 35085                                  ;
 35086                                  ;   INPUT
 35087                                  ;       None
 35088                                  ;
 35089                                  ;   OUTPUT
 35090                                  ;       BX == menu item # (1-N), or -1 for clean boot
 35091                                  ;       Selected menu item highlighted
 35092                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 35093                                  ;
 35094                                  ;   OTHER REGS USED
 35095                                  ;       None
 35096                                  ;
 35097                                  ;   NOTES
 35098                                  ;       None
 35099                                  ;
 35100                                  ;   HISTORY
 35101                                  ;       Created 16-Mar-1992 by JeffPar
 35102                                  ;
 35103                                  ;----------------------------------------------------------------------------
 35104                                  
 35105                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 35106                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 35107                                          mov     al,bl           ;
 35108                                          call    disp_num        ;
 35109                                          call    show_status     ; display current interactive status
 35110                                          cmp     byte [secTimeOut],-1
 35111                                          je	short input_key	; no time-out, just go to input
 35112                                          mov     ah,GET_TIME ; 2Ch
 35113                                          int     21h             ;
 35114                                          mov     bh,dh           ; BH = initial # of seconds
 35115                                  check_time:
 35116                                          mov     al,[secTimeOut] ;
 35117                                          sub     al,[secElapsed] ;
 35118                                          jae	short show_time	;
 35119                                          or      byte [bQueryOpt],2  ; disable all further prompting
 35120                                          mov     byte [secElapsed],0
 35121                                          jmp	select_done	; time's up!
 35122                                  show_time:
 35123                                          push    bx              ;
 35124                                          mov     bl,al           ; save # in BL
 35125                                          mov     bh,[bMenuPage]  ;
 35126                                          mov     ah,03h          ; get cursor position
 35127                                          int     10h             ;
 35128                                          push    dx              ;
 35129                                  	add	dl,8		; move cursor to the right
 35130                                          mov     ah,02h          ; set cursor position
 35131                                          int     10h             ;
 35132                                          mov     dx,_$TimeOut
 35133                                          call    print           ; print the "Time remaining: " prompt
 35134                                          mov     al,bl           ; recover # from BL
 35135                                          cbw                     ; this works because AL is always <= 90
 35136                                          mov     cl,10           ;
 35137                                          div     cl              ; AL = tens digit, AH = ones digit
 35138                                          mov     cl,ah           ;
 35139                                          add     al,'0'          ;
 35140                                          mov     ah,0Eh          ;
 35141                                          int     10h             ; write TTY tens digit
 35142                                          mov     al,cl           ;
 35143                                          add     al,'0'          ;
 35144                                          mov     ah,0Eh          ;
 35145                                          int     10h             ; write TTY ones digit
 35146                                          pop     dx
 35147                                          mov     ah,02h          ; set cursor position back to where it was
 35148                                          int     10h             ;
 35149                                          pop     bx              ;
 35150                                  input_key:
 35151                                          mov     ah,RAW_CON_IO ; 6
 35152                                          mov     dl,0FFh         ; input request
 35153                                          int     21h             ;
 35154                                          jnz	short got_key	;
 35155                                          cmp     byte [secTimeOut],-1; is there a time-out?
 35156                                          je	short input_key	; no, just go back to input
 35157                                          mov     ah,GET_TIME     ;
 35158                                          int     21h             ; DH = seconds
 35159                                          mov     ah,dh           ;
 35160                                          sub     dh,bh           ; should generally be zero or one
 35161                                          mov     bh,ah           ;
 35162                                          jnc	short got_time	;
 35163                                          mov     dh,1            ; it wrapped back to zero, so assume one
 35164                                  got_time:
 35165                                          or      dh,dh           ; any change?
 35166                                          jz	short input_key	; no
 35167                                          add     [secElapsed],dh ;
 35168                                          jmp	short check_time ;
 35169                                  got_key:
 35170                                          push    ax              ;
 35171                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 35172                                          xchg    [secTimeOut],ax
 35173                                          cmp     al,-1           ; was time-out already disabled?
 35174                                          je	short timeout_disabled ; yes
 35175                                          push    bx              ; let's disable # seconds display
 35176                                          mov     ax,0A20h        ; write multiple spaces
 35177                                          mov     bx,[bMenuColor]
 35178                                          mov     cx,80           ; 80 of them, to be safe
 35179                                          int     10h             ; to completely obliterate # seconds display
 35180                                          pop     bx   		;
 35181                                  
 35182                                  timeout_disabled:
 35183                                          pop     ax              ;
 35184                                          or      al,al           ; extended key pressed?
 35185                                          jnz	short normal_key ; no
 35186                                          int     21h             ; get the next part of the key then
 35187                                          jz	short input_key	; hmmm, what happened to the second part?
 35188                                  
 35189                                          cmp     al,48h          ; up arrow?
 35190                                          jne	short not_up	; no
 35191                                          cmp     bl,1            ; are we as up as up can get?
 35192                                          jbe	short input_key	; yes, ignore it
 35193                                          dec     byte [bDefBlock] ;
 35194                                          call    print_item      ; re-print the current item
 35195                                          dec     bl              ; and then print the new current item
 35196                                          jmp     short print1
 35197                                  not_up:
 35198                                          cmp     al,50h          ; down arrow?
 35199                                          jne	short not_down	; no
 35200                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 35201                                          jae	short to_input_key ; yes, ignore it
 35202                                          inc     byte [bDefBlock] ;
 35203                                          call    print_item      ; re-print the current item
 35204                                          inc     bx              ; and then print the new current item
 35205                                  print1: 
 35206                                  	mov     al,bl           ;
 35207                                  print2: 
 35208                                  	call    print_item      ;
 35209                                          call    disp_num        ;
 35210                                  to_input_key:
 35211                                          jmp     input_key       ;
 35212                                  not_down:
 35213                                          test    byte [bDisableUI],1
 35214                                          jnz	short to_input_key ; don't allow F8 or F5
 35215                                          cmp     al,42h          ; F8 function key?
 35216                                          jne	short not_f8	; no
 35217                                          xor     byte [bQueryOpt],1
 35218                                          call    show_status     ;
 35219                                          jmp     input_key	;
 35220                                  not_f8:
 35221                                          cmp     al,3Fh          ; F5 function key?
 35222                                          jne	short to_input_key ; no
 35223                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 35224                                          mov     al,' '          ; don't want to display anything really;
 35225                                          jmp     short disp_input; just want to display the cr/lf sequence...
 35226                                  
 35227                                  normal_key:
 35228                                          cmp     al,0Dh          ; Enter?
 35229                                          je	short select_done ; yes
 35230                                          cmp     al,08h          ; backspace?
 35231                                          jne	short not_backspace ; no
 35232                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 35233                                          retn			;
 35234                                  not_backspace:
 35235                                          sub     al,'0'          ; is greater than '0'?
 35236                                          jbe	short to_input_key ; no
 35237                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 35238                                          ja	short to_input_key ; no
 35239                                          mov	[bDefBlock],al  ;
 35240                                          call    print_item      ; redisplay the current selection
 35241                                          mov     bl,al           ; set new selection
 35242                                          jmp	short print2
 35243                                  
 35244                                  select_done:
 35245                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 35246                                          mov     al,bl           ;
 35247                                          add     al,'0'          ; convert it into a digit, then display it
 35248                                  
 35249                                  	; fall into disp_input
 35250                                  
 35251                                  ; 16/04/2019 - Retro DOS v4.0
 35252                                  
 35253                                  ;----------------------------------------------------------------------------
 35254                                  ;
 35255                                  ;   disp_input:  display a single character + cr/lf
 35256                                  ;
 35257                                  ;   INPUT
 35258                                  ;       AL == character to display
 35259                                  ;
 35260                                  ;   OUTPUT
 35261                                  ;       None
 35262                                  ;
 35263                                  ;   OTHER REGS USED
 35264                                  ;       None
 35265                                  ;
 35266                                  ;   NOTES
 35267                                  ;       This function is used not only for the menu input selection but
 35268                                  ;       also for the interactive line prompting (the y/n/a thing).
 35269                                  ;
 35270                                  ;   HISTORY
 35271                                  ;       Created 16-Mar-1992 by JeffPar
 35272                                  ;
 35273                                  ;----------------------------------------------------------------------------
 35274                                  
 35275                                  disp_input:
 35276                                          push    ax
 35277                                          cmp     al,' '
 35278                                          jae	short disp_ok
 35279                                          mov     al,' '
 35280                                  disp_ok:
 35281                                          mov     dl,al
 35282                                          mov     ah,STD_CON_OUTPUT ; 2
 35283                                          int     21h
 35284                                          mov     dx,crlfm
 35285                                          call    print
 35286                                          pop     ax
 35287                                          retn
 35288                                  
 35289                                  ;----------------------------------------------------------------------------
 35290                                  
 35291                                  disp_num:
 35292                                          push    bx
 35293                                          add     al,'0'
 35294                                          mov     ah,0Ah
 35295                                          mov     bx,[bMenuColor]
 35296                                          mov     cx,1
 35297                                          int     10h
 35298                                          pop     bx
 35299                                          retn
 35300                                  
 35301                                  ;----------------------------------------------------------------------------
 35302                                  ;
 35303                                  ;   show_status:  display current interactive mode setting (on/off/none)
 35304                                  ;
 35305                                  ;   INPUT
 35306                                  ;       None
 35307                                  ;
 35308                                  ;   OUTPUT
 35309                                  ;       None
 35310                                  ;
 35311                                  ;   OTHER REGS USED
 35312                                  ;       None
 35313                                  ;
 35314                                  ;   NOTES
 35315                                  ;       None
 35316                                  ;
 35317                                  ;   HISTORY
 35318                                  ;       Created 16-Mar-1992 by JeffPar
 35319                                  ;
 35320                                  ;----------------------------------------------------------------------------
 35321                                  
 35322                                  show_status:
 35323                                          push    bx              ; BL = video page #
 35324                                          mov     bx,[bMenuColor]
 35325                                          mov     ah,03h          ; get cursor position
 35326                                          int     10h             ;
 35327                                          push    dx              ; save it
 35328                                          mov     ah,02h          ; set cursor position
 35329                                          mov     dx,[bLastCol]   ; set correct row/col
 35330                                          test    byte [bDisableUI],1
 35331                                          jz	short show_onoff ; just show on/off
 35332                                          mov     dl,0            ;
 35333                                          int     10h             ;
 35334                                          mov     ax,0A20h        ; write multiple spaces
 35335                                          mov     cx,80           ; 80 of them, to be exact
 35336                                          int     10h             ; to obliterate the status line
 35337                                          jmp     short show_done ;
 35338                                  show_onoff: 
 35339                                          int     10h
 35340                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 35341                                  		; AL = character, BH = display page - alpha mode
 35342                                  		; BL = color of character (graphics mode, PCjr only)
 35343                                  		; CX = number of times to write character
 35344                                  
 35345                                          mov     al,[_$NO]	; assume OFF
 35346                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 35347                                          jne	short show_noton ; no
 35348                                          mov     al,[_$YES]	; yes
 35349                                  show_noton:                     ;
 35350                                          mov     ah,0Eh          ; write TTY
 35351                                          int     10h             ;
 35352                                  show_done:                      ;
 35353                                          pop     dx              ;
 35354                                          mov     ah,02h          ;
 35355                                          int     10h             ; restore original cursor position
 35356                                          pop     bx              ;
 35357                                          retn			;
 35358                                  
 35359                                  ; 16/04/2019 - Retro DOS v4.0
 35360                                  
 35361                                  ;----------------------------------------------------------------------------
 35362                                  ;
 35363                                  ;   skip_token: advances ES:SI/CX past the current token
 35364                                  ;
 35365                                  ;   INPUT
 35366                                  ;    ES:SI -> position in config.sys
 35367                                  ;       CX == remaining bytes in config.sys
 35368                                  ;
 35369                                  ;   OUTPUT
 35370                                  ;       CF set if EOL/EOF hit
 35371                                  ;       AL == 1st char of delimiter
 35372                                  ;    ES:SI -> just past the delimiter
 35373                                  ;       CX == # bytes remaining from that point
 35374                                  ;
 35375                                  ;   OTHER REGS USED
 35376                                  ;       AX
 35377                                  ;
 35378                                  ;   NOTES
 35379                                  ;       None
 35380                                  ;
 35381                                  ;   HISTORY
 35382                                  ;       Created 16-Mar-1992 by JeffPar
 35383                                  ;
 35384                                  ;----------------------------------------------------------------------------
 35385                                  
 35386                                  skip_token:
 35387                                          call    get_char
 35388                                          jc	short skip_token_done
 35389                                          call    any_delim
 35390                                          jne	short skip_token
 35391                                  skip_check_eol:
 35392                                          cmp     al,cr ; 0Dh
 35393                                          je	short skip_token_eol
 35394                                          cmp     al,lf ; 0Ah
 35395                                          je	short skip_token_eol
 35396                                          clc
 35397                                          ;jmp	short skip_token_done
 35398                                  	retn
 35399                                  skip_token_eol:
 35400                                          stc
 35401                                  skip_token_done:
 35402                                          retn
 35403                                  
 35404                                  ;----------------------------------------------------------------------------
 35405                                  ;
 35406                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 35407                                  ;
 35408                                  ;   INPUT
 35409                                  ;    ES:SI -> position in config.sys
 35410                                  ;       CX == remaining bytes in config.sys
 35411                                  ;
 35412                                  ;   OUTPUT
 35413                                  ;       CF set if EOF hit
 35414                                  ;       AL == 1st char of token
 35415                                  ;    ES:SI -> just past the token
 35416                                  ;       CX == # bytes remaining from that point
 35417                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 35418                                  ;
 35419                                  ;   OTHER REGS USED
 35420                                  ;       AX
 35421                                  ;
 35422                                  ;   NOTES
 35423                                  ;       None
 35424                                  ;
 35425                                  ;   HISTORY
 35426                                  ;       Created 16-Mar-1992 by JeffPar
 35427                                  ;
 35428                                  ;----------------------------------------------------------------------------
 35429                                  
 35430                                  skip_delim:       ; returns carry set if eol/eof
 35431                                          call    get_char        ;
 35432                                          lea     bx,[si-1]       ; also returns BX -> next token
 35433                                          jc	short skip_token_done ;
 35434                                          call    delim           ;
 35435                                          je	short skip_delim ;
 35436                                          jmp	short skip_check_eol  ; 13/05/2019
 35437                                  
 35438                                  ;----------------------------------------------------------------------------
 35439                                  ;
 35440                                  ;   skip_opt_line: same as skip_line provided AL != LF
 35441                                  ;
 35442                                  ;   INPUT
 35443                                  ;       AL == last character read
 35444                                  ;    ES:SI -> position in config.sys
 35445                                  ;       CX == remaining bytes in config.sys
 35446                                  ;
 35447                                  ;   OUTPUT
 35448                                  ;       CF set if EOF hit
 35449                                  ;       AL == 1st char of new line
 35450                                  ;    ES:SI -> just past 1st char of new line
 35451                                  ;       CX == # bytes remaining from that point
 35452                                  ;
 35453                                  ;   OTHER REGS USED
 35454                                  ;       AX
 35455                                  ;
 35456                                  ;   NOTES
 35457                                  ;       In other words, the purpose here is to skip to the next line,
 35458                                  ;       unless ES:SI is already sitting at the front of the next line (which
 35459                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 35460                                  ;
 35461                                  ;   HISTORY
 35462                                  ;       Created 16-Mar-1992 by JeffPar
 35463                                  ;
 35464                                  ;----------------------------------------------------------------------------
 35465                                  
 35466                                  skip_opt_line:
 35467                                          cmp     al,lf ; 0Ah
 35468                                          je	short skip_line_done
 35469                                       
 35470                                  	; fall into skip_line
 35471                                  
 35472                                  ;----------------------------------------------------------------------------
 35473                                  ;
 35474                                  ;   skip_line: skip to the next line
 35475                                  ;
 35476                                  ;   INPUT
 35477                                  ;    ES:SI -> position in config.sys
 35478                                  ;       CX == remaining bytes in config.sys
 35479                                  ;
 35480                                  ;   OUTPUT
 35481                                  ;       CF set if EOF hit
 35482                                  ;    ES:SI -> just past 1st char of new line
 35483                                  ;       CX == # bytes remaining from that point
 35484                                  ;
 35485                                  ;   OTHER REGS USED
 35486                                  ;       AX
 35487                                  ;
 35488                                  ;   NOTES
 35489                                  ;       None
 35490                                  ;
 35491                                  ;   HISTORY
 35492                                  ;       Created 16-Mar-1992 by JeffPar
 35493                                  ;
 35494                                  ;----------------------------------------------------------------------------
 35495                                  
 35496                                  skip_line:
 35497                                          call    get_char
 35498                                          jc	short skip_line_done
 35499                                          cmp     al,lf ; 0Ah
 35500                                          jne	short skip_line
 35501                                  skip_line_done:
 35502                                  num_done:	; 18/12/2022
 35503                                          retn
 35504                                  
 35505                                  ;----------------------------------------------------------------------------
 35506                                  ;
 35507                                  ;   get_number: return binary equivalent of numeric string
 35508                                  ;
 35509                                  ;   INPUT
 35510                                  ;    ES:SI -> position in config.sys
 35511                                  ;       CX == remaining bytes in config.sys
 35512                                  ;
 35513                                  ;   OUTPUT
 35514                                  ;       AL == non-digit encountered
 35515                                  ;       BX == binary #
 35516                                  ;    ES:SI -> just past 1st non-digit
 35517                                  ;       CX == # bytes remaining from that point
 35518                                  ;
 35519                                  ;   OTHER REGS USED
 35520                                  ;       AX
 35521                                  ;
 35522                                  ;   NOTES
 35523                                  ;       None
 35524                                  ;
 35525                                  ;   HISTORY
 35526                                  ;       Created 16-Mar-1992 by JeffPar
 35527                                  ;
 35528                                  ;----------------------------------------------------------------------------
 35529                                  
 35530                                  ; 13/05/2019
 35531                                  
 35532                                  get_number:
 35533                                          sub     bx,bx           ; BX = result
 35534                                  num_loop:
 35535                                          call    get_char        ;
 35536                                          jc	short num_done	;
 35537                                          cmp     al,'0'          ; convert to value
 35538                                          jb	short num_done	; no more number
 35539                                          cmp     al,'9'          ;
 35540                                          ja	short num_done	;
 35541                                          push    ax              ;
 35542                                          mov     ax,10           ;
 35543                                          push    dx              ;
 35544                                          mul     bx              ;
 35545                                          pop     dx              ;
 35546                                          mov     bx,ax           ;
 35547                                          pop     ax              ;
 35548                                          sub     al,'0'          ;
 35549                                          cbw                     ;
 35550                                          add     bx,ax           ;
 35551                                          jmp	short num_loop	;
 35552                                  
 35553                                  	; 18/12/2022
 35554                                  ;num_done:
 35555                                          ;retn
 35556                                  
 35557                                  ;----------------------------------------------------------------------------
 35558                                  ;
 35559                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 35560                                  ;
 35561                                  ;   INPUT
 35562                                  ;    ES:SI -> position in config.sys
 35563                                  ;       CX == remaining bytes in config.sys
 35564                                  ;
 35565                                  ;   OUTPUT
 35566                                  ;       AL == next character
 35567                                  ;    ES:SI -> just past next character
 35568                                  ;       CX == # bytes remaining from that point
 35569                                  ;
 35570                                  ;   OTHER REGS USED
 35571                                  ;       AX
 35572                                  ;
 35573                                  ;   NOTES
 35574                                  ;       None
 35575                                  ;
 35576                                  ;   HISTORY
 35577                                  ;       Created 16-Mar-1992 by JeffPar
 35578                                  ;
 35579                                  ;----------------------------------------------------------------------------
 35580                                  
 35581                                  get_char:
 35582                                          sub     cx,1            ; use SUB to set carry,zero
 35583                                          jb	short get_fail	; out of data
 35584                                          ;lods	byte ptr es:[si] ;
 35585                                  	es	
 35586                                  	lodsb
 35587                                          mov     ah,al           ;
 35588                                          retn			;
 35589                                  get_fail:                       ; restore CX to zero
 35590                                          mov     cx,0            ; leave carry set, zero not set
 35591                                  nearby_ret:
 35592                                          retn
 35593                                  
 35594                                  ;----------------------------------------------------------------------------
 35595                                  ;
 35596                                  ;   query_user: ask user whether to execute current config.sys command
 35597                                  ;
 35598                                  ;   INPUT
 35599                                  ;       AL == current command code
 35600                                  ;    ES:SI -> current command line in config.sys
 35601                                  ;    config_cmd == current command code, but with QUERY bit intact
 35602                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 35603                                  ;
 35604                                  ;   OUTPUT
 35605                                  ;       CF set if command should be ignored (it is also REM'ed out)
 35606                                  ;
 35607                                  ;   OTHER REGS USED
 35608                                  ;       BX, CX, DX, DI
 35609                                  ;
 35610                                  ;   NOTES
 35611                                  ;       None
 35612                                  ;
 35613                                  ;   HISTORY
 35614                                  ;       Created 16-Mar-1992 by JeffPar
 35615                                  ;
 35616                                  ;----------------------------------------------------------------------------
 35617                                  
 35618                                  	; 12/12/2022
 35619                                  query_user:
 35620                                          test    byte [bQueryOpt],4	; answer no to everything?
 35621                                          ;jz	short qu_1		;
 35622                                          ; 12/12/2022
 35623                                  	;jmp	short skip_all		;
 35624                                  	jnz	short skip_all
 35625                                  qu_1:
 35626                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 35627                                          jnz	short nearby_ret	; yes (and return carry clear!)
 35628                                          push    ax                      ;
 35629                                          mov     al,[config_cmd]         ;
 35630                                          test    byte [bQueryOpt],1	; query every command?
 35631                                          jnz	short query_all		; yes
 35632                                          test    al,CONFIG_OPTION_QUERY  ;
 35633                                          ;jnz	short query_all		;
 35634                                          ; 12/12/2022
 35635                                  	;jmp	short do_cmd		;
 35636                                  	jz	short do_cmd ; cf=0
 35637                                  query_all:
 35638                                  
 35639                                  ;   Search for the command code (AL) in "comtab", and then print
 35640                                  ;   out the corresponding keyword, followed by the rest of the actual
 35641                                  ;   line pointed to by ES:SI
 35642                                  
 35643                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 35644                                          mov     dx,_$AutoPrmpt    	;
 35645                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35646                                          jz	short generic_prompt	; config_cmd must have been 0
 35647                                  
 35648                                          mov     dh,al                   ; save config_cmd in DH
 35649                                          sub     bx,bx                   ;
 35650                                          mov     di,comtab		;
 35651                                  find_match:                             ;
 35652                                          mov     bl,[di]                 ; get size of current keyword
 35653                                          or      bl,bl                   ;
 35654                                          jz	short line_print	; end of table
 35655                                          inc     di                      ;
 35656                                          cmp     al,[di+bx]              ; match?
 35657                                          je	short cmd_match		; yes
 35658                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 35659                                  	; 13/05/2019	
 35660                                          jmp	short find_match	; loop
 35661                                  cmd_match:                              ;
 35662                                          mov     cl,[di-1]               ;
 35663                                          mov     ch,0                    ;
 35664                                          mov     ah,STD_CON_OUTPUT ; 2
 35665                                  cmd_print:                              ;
 35666                                          mov     al,[di]                 ;
 35667                                          inc     di                      ;
 35668                                          mov     dl,al                   ;
 35669                                          int     21h                     ;
 35670                                          loop    cmd_print               ;
 35671                                          mov     dl,'='                  ;
 35672                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 35673                                          jne	short cmd_notset	;
 35674                                          mov     dl,' '                  ;
 35675                                  cmd_notset:
 35676                                          int     21h                     ; '=' looks funny on SET commands
 35677                                  line_print:                             ;
 35678                                  	;lods	byte ptr es:[si]        ;
 35679                                          es
 35680                                  	lodsb
 35681                                  	or      al,al                   ;
 35682                                          jnz	short non_null		;
 35683                                          mov     al,' '                  ;
 35684                                  non_null:                               ;
 35685                                          cmp     al,' '                  ; control code?
 35686                                          jb	short prompt_user	; yes, assume end of line
 35687                                          jne	short non_space		;
 35688                                          cmp     byte [es:si],' '	;
 35689                                          jb	short prompt_user	;
 35690                                  non_space:                              ;
 35691                                          mov     dl,al                   ;
 35692                                          mov     ah,STD_CON_OUTPUT ; 2	;
 35693                                          int     21h                     ;
 35694                                          jmp	short line_print	;
 35695                                  prompt_user:                            ;
 35696                                          mov     dx,_$InterPrmpt		;
 35697                                  
 35698                                  generic_prompt:
 35699                                          call    print                   ;
 35700                                  input_loop:                             ;
 35701                                          mov     ah,0                    ; read a key
 35702                                          int     16h                     ;
 35703                                          or      al,al                   ; is it a function key?
 35704                                          jnz	short not_func		; no
 35705                                          cmp     ah,3Fh                  ; F5 function key?
 35706                                          jne	short input_loop	; no
 35707                                          mov     al,[_$NO]                  ;
 35708                                          or      byte [bQueryOpt],4	; no more queries
 35709                                          jmp     short legal_char        ;
 35710                                  not_func:
 35711                                          and     al,~20h ; 0DFh		; converting to upper case
 35712                                          cmp     al,[_$NO]		; verify character is legal
 35713                                          je	short legal_char	;
 35714                                          cmp     al,[_$YES]		;
 35715                                          je	short legal_char	;
 35716                                          cmp     byte [config_cmd],0	;
 35717                                          je	short input_loop	; don't allow Esc on this query
 35718                                          cmp     al,1Bh                  ; Esc?
 35719                                          jne	short input_loop	;
 35720                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 35721                                          mov     al,[_$YES]
 35722                                  legal_char:                             ;
 35723                                          call    disp_input              ;
 35724                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 35725                                  
 35726                                          cmp     al,[_$NO]		; process line?
 35727                                          je	short skip_cmd		; no
 35728                                  	; 12/12/2022
 35729                                  	clc
 35730                                  do_cmd:
 35731                                  	pop     ax			;
 35732                                  	; 12/12/2022
 35733                                  	; cf=0
 35734                                  	;clc				; just do the command
 35735                                  	retn
 35736                                  
 35737                                  skip_cmd:
 35738                                  	pop     ax			;
 35739                                  skip_all:
 35740                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 35741                                  	stc
 35742                                  	retn
 35743                                  
 35744                                  ;----------------------------------------------------------------------------
 35745                                  ;
 35746                                  ;   print_error: displays multi-config error conditions
 35747                                  ;
 35748                                  ;   INPUT
 35749                                  ;    Carry set to pause, clear to not
 35750                                  ;    ES:SI -> current command line in config.sys
 35751                                  ;
 35752                                  ;   OUTPUT
 35753                                  ;       None
 35754                                  ;
 35755                                  ;   OTHER REGS USED
 35756                                  ;       None
 35757                                  ;
 35758                                  ;   NOTES
 35759                                  ;       None
 35760                                  ;
 35761                                  ;   HISTORY
 35762                                  ;       Created 16-Mar-1992 by JeffPar
 35763                                  ;
 35764                                  ;----------------------------------------------------------------------------
 35765                                  
 35766                                  print_error:
 35767                                          push    ax
 35768                                          push    bx
 35769                                          push    cx
 35770                                          push    dx
 35771                                          push    ds
 35772                                          push    cs
 35773                                          pop     ds
 35774                                          pushf
 35775                                          call    get_linenum
 35776                                          mov     [linecount],bx
 35777                                          call    error_line
 35778                                          popf
 35779                                          jnc	short pe_ret
 35780                                          mov     dx,_$PauseMsg
 35781                                          call    print
 35782                                          mov     ax,0C07h		; flush input buffer, then wait for key
 35783                                          int     21h			; wait for a key
 35784                                          or      al,al			; extended key?
 35785                                          jnz	short pe_1		; no
 35786                                          mov     ah,07h			; yes
 35787                                          int     21h			; eat it too
 35788                                  pe_1:     
 35789                                  	mov     dx,crlfm
 35790                                          call    print
 35791                                  pe_ret: 
 35792                                  	pop     ds
 35793                                          pop     dx
 35794                                          pop     cx
 35795                                          pop     bx
 35796                                          pop     ax
 35797                                  	retn
 35798                                  
 35799                                  ;----------------------------------------------------------------------------
 35800                                  
 35801                                  ;   This function is very simple:  it merely prepends a "/D" to the
 35802                                  ;   command-line for the shell;  this (undocumented) switch disables
 35803                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 35804                                  ;   displayed when there's no AUTOEXEC.BAT.
 35805                                  
 35806                                  disable_autoexec:
 35807                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 35808                                  	; 17/04/2019 - Retro DOS v4.0
 35809                                  
 35810                                  	test	byte [bQueryOpt],4
 35811                                  	jz	short disable_exit
 35812                                  	test	byte [dae_flag],1
 35813                                  	jnz	short disable_exit
 35814                                  	or	byte [dae_flag],1
 35815                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35816                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35817                                  	mov     dx,'D ' ; 2044h
 35818                                  dae_1:
 35819                                          ;mov	al,[def_swchr]
 35820                                  	mov     al,[command_line-1]     ; get default switchchar
 35821                                          or      al,al                   ; anything there?
 35822                                          jz	short disable_exit	; no, disable_autoexec already called
 35823                                          mov     bl,[command_line]       ;
 35824                                          mov     bh,0                    ; BX == command-line length
 35825                                          mov     cx,bx                   ;
 35826                                          add     bl,3                    ;
 35827                                          cmp     bl,126                  ;
 35828                                          ja	short disable_exit	;
 35829                                          mov     [command_line],bl       ; update length
 35830                                          add     bx,command_line+1	; make sure we move the NULL too
 35831                                          inc     cx                      ; (just for consistency sake)
 35832                                  disable_loop:                           ;
 35833                                          mov     ah,[bx-3]               ;
 35834                                          mov     [bx],ah                 ;
 35835                                          dec     bx                      ;
 35836                                          loop    disable_loop            ;
 35837                                          mov     [bx-2],al               ;
 35838                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35839                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35840                                          ;mov	byte [command_line-1],0 ;
 35841                                  disable_exit:                           ;
 35842                                          retn
 35843                                  
 35844                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35845                                  	cmp     byte [bQueryOpt],1
 35846                                  	jnz     short disable_exit
 35847                                  	test	byte [dae_flag],2
 35848                                  	jnz     short disable_exit
 35849                                  	or      byte [dae_flag],2
 35850                                  	mov     dx,'Y ' ; 2059h ; 11/09/2023
 35851                                  	jmp     short dae_1
 35852                                  
 35853                                  ;endif  ;MULTI_CONFIG
 35854                                  
 35855                                  %endif	; 02/11/2022
 35856                                  
 35857                                  
 35858                                  ; 19/04/2019 - Retro DOS v4.0
 35859                                  
 35860                                  ;----------------------------------------------------------------------------
 35861                                  ;
 35862                                  ; procedure : delim
 35863                                  ;
 35864                                  ;----------------------------------------------------------------------------
 35865                                  
 35866                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35867                                  ;
 35868                                  ;;ifdef	MULTI_CONFIG
 35869                                  ;
 35870                                  ;any_delim:
 35871                                  ;       cmp     al,cr
 35872                                  ;       je	short delim_ret
 35873                                  ;       cmp     al,lf
 35874                                  ;       je	short delim_ret
 35875                                  ;       cmp     al,'['
 35876                                  ;       je	short delim_ret
 35877                                  ;       cmp     al,']'
 35878                                  ;       je	short delim_ret
 35879                                  ;
 35880                                  ;;endif  ;MULTI_CONFIG
 35881                                  
 35882                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35883                                  	; (SYSINIT:3450h)	
 35884                                  delim:
 35885 00002FC0 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35886 00002FC2 7417                    	je	short delim_ret
 35887                                  
 35888 00002FC4 3C00                    	cmp	al,0		; special case for sysinit!!!
 35889 00002FC6 7413                    	je	short delim_ret
 35890                                  
 35891                                  org_delim:			; used by organize routine except for getting
 35892 00002FC8 3C20                    	cmp	al,' '          ; the filename.
 35893 00002FCA 740F                    	je	short delim_ret
 35894 00002FCC 3C09                            cmp     al,tab ; 9
 35895 00002FCE 740B                    	je	short delim_ret
 35896 00002FD0 3C3D                    	cmp	al,'='
 35897 00002FD2 7407                    	je	short delim_ret
 35898 00002FD4 3C2C                    	cmp	al,','
 35899 00002FD6 7403                    	je	short delim_ret
 35900 00002FD8 3C3B                    	cmp	al,';'
 35901                                  
 35902                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35903                                  ;ifdef	MULTI_CONFIG
 35904                                  ;   Make sure there's no chance of a false EOF indication
 35905 00002FDA F8                      	clc	; 09/09/2023 ('SkipDelim' must not be return with cf=1)
 35906                                  ;endif
 35907                                  	; 02/11/2022
 35908                                  delim_ret:
 35909                                  nl_ret:	; 10/09/2023
 35910 00002FDB C3                      	retn
 35911                                  
 35912                                  ;----------------------------------------------------------------------------
 35913                                  ;
 35914                                  ; procedure : newline
 35915                                  ;
 35916                                  ;  newline returns with first character of next line
 35917                                  ;
 35918                                  ;----------------------------------------------------------------------------
 35919                                  
 35920                                  newline:
 35921 00002FDC E80600                  	call	getchr			;skip non-control characters
 35922 00002FDF 72FA                    	jc	short nl_ret
 35923 00002FE1 3C0A                    	cmp	al,lf			;look for line feed
 35924 00002FE3 75F7                    	jne	short newline
 35925                                  
 35926                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 35927                                  	;call	getchr
 35928                                  ;nl_ret:
 35929                                  	;retn
 35930                                  	; 10/09/2023
 35931                                  	;jmp	short getchr
 35932                                  
 35933                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 35934                                  %if 1
 35935                                  
 35936                                  ;----------------------------------------------------------------------------
 35937                                  ;
 35938                                  ; procedure : getchr
 35939                                  ;
 35940                                  ;----------------------------------------------------------------------------
 35941                                  
 35942                                  	; 24/10/2022
 35943                                  getchr:
 35944                                  	; 12/12/2022
 35945                                  	;push	cx
 35946                                  	;mov	cx,[count]
 35947                                  	;jcxz	nochar
 35948                                  	; 12/12/2022
 35949 00002FE5 833E[D203]01            	cmp	word [count],1 
 35950 00002FEA 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 35951                                  	
 35952 00002FEC 8B36[D603]              	mov	si,[chrptr]
 35953 00002FF0 268A04                  	mov	al,[es:si]
 35954 00002FF3 FF0E[D203]              	dec	word [count]
 35955 00002FF7 FF06[D603]              	inc	word [chrptr]
 35956                                  	; 12/12/202
 35957                                  	; cf=0
 35958                                  	;clc
 35959                                  ;get_ret:
 35960                                  	;pop	cx
 35961                                  	;retn
 35962                                  nochar: 
 35963                                  	; 12/12/2022
 35964                                  	; cf=1
 35965                                  	;stc
 35966                                  	;jmp	short get_ret
 35967                                  	
 35968 00002FFB C3                      	retn
 35969                                  %endif
 35970                                  
 35971                                  ;----------------------------------------------------------------------------
 35972                                  ; 
 35973                                  ; procedure : mapcase
 35974                                  ;
 35975                                  ;----------------------------------------------------------------------------
 35976                                  
 35977                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35978                                  mapcase:
 35979 00002FFC 51                      	push	cx
 35980 00002FFD 56                      	push	si
 35981 00002FFE 1E                      	push	ds
 35982                                  
 35983 00002FFF 06                      	push	es
 35984 00003000 1F                      	pop	ds
 35985                                  
 35986                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35987                                  ;;ifdef	MULTI_CONFIG
 35988                                  ;
 35989                                  ;	mov	bl,al                   ; same cmd code this line
 35990                                  ;;else
 35991                                  ;;	xor	si,si
 35992                                  ;;endif
 35993                                  	; 02/11/2022
 35994 00003001 31F6                    	xor	si, si
 35995                                  
 35996                                  convloop:
 35997 00003003 AC                      	lodsb
 35998 00003004 3C61                    	cmp	al,'a'
 35999 00003006 7209                    	jb	short noconv
 36000 00003008 3C7A                    	cmp	al,'z'
 36001 0000300A 7705                    	ja	short noconv
 36002 0000300C 2C20                    	sub	al,20h
 36003 0000300E 8844FF                  	mov	[si-1],al
 36004                                  noconv:
 36005                                  
 36006                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36007                                  ;;ifdef	MULTI_CONFIG
 36008                                  ;;
 36009                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 36010                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 36011                                  ;;   the line is a SET command or not (since we don't want to upper-case
 36012                                  ;;   anything after the "=" in a SET)
 36013                                  ;;
 36014                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 36015                                  ;       jne	short check_eol		; no, just check for end-of-line
 36016                                  ;       cmp     al,'='                  ; separator between SET var and value?
 36017                                  ;       je	short convdone		; yes
 36018                                  ;check_eol:
 36019                                  ;       cmp     al,cr
 36020                                  ;       je	short convdone
 36021                                  ;       cmp     al,lf
 36022                                  ;       je	short convdone
 36023                                  ;;endif
 36024                                  	
 36025                                  	; 02/11/2022
 36026 00003011 E2F0                    	loop	convloop
 36027                                  convdone:
 36028 00003013 1F                      	pop	ds
 36029 00003014 5E                      	pop	si
 36030 00003015 59                      	pop	cx
 36031 00003016 C3                      	retn
 36032                                  
 36033                                  ;----------------------------------------------------------------------------
 36034                                  ;
 36035                                  ; procedure : round
 36036                                  ;
 36037                                  ; round the values in memlo and memhi to paragraph boundary.
 36038                                  ; perform bounds check.
 36039                                  ;
 36040                                  ;----------------------------------------------------------------------------
 36041                                  
 36042                                  round:
 36043                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36044 00003017 1E                      	push	ds
 36045 00003018 0E                      	push	cs
 36046 00003019 1F                      	pop	ds
 36047                                  
 36048 0000301A 50                      	push	ax
 36049                                  	;mov	ax,[cs:memlo]
 36050 0000301B A1[DE03]                	mov	ax,[memlo]
 36051                                  
 36052 0000301E E883E0                  	call	ParaRound		; para round up
 36053                                  
 36054                                  	;add	[cs:memhi],ax
 36055 00003021 0106[E003]              	add	[memhi],ax
 36056                                  	;mov	word [cs:memlo],0
 36057 00003025 C706[DE03]0000          	mov	word [memlo],0
 36058                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 36059 0000302B A1[E003]                	mov	ax,[memhi]
 36060                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 36061 0000302E 3B06[A302]              	cmp	ax,[ALLOCLIM]
 36062                                  	;jae	short mem_err
 36063                                  	; 17/09/2023
 36064 00003032 7322                    	jae	short mem_err2 ; ds = cs
 36065                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 36066 00003034 F606[1014]02            	test	byte [setdevmarkflag],for_devmark ; 2
 36067 00003039 7416                    	jz	short skip_set_devmarksize
 36068 0000303B 06                      	push	es
 36069 0000303C 56                      	push	si
 36070                                  	;mov	si,[cs:devmark_addr]
 36071 0000303D 8B36[0E14]              	mov	si,[devmark_addr]
 36072 00003041 8EC6                    	mov	es,si
 36073 00003043 29F0                    	sub	ax,si
 36074 00003045 48                      	dec	ax
 36075                                  	;mov	[es:3],ax
 36076 00003046 26A30300                	mov	[es:devmark.size],ax	; paragraph
 36077                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 36078 0000304A 8026[1014]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 36079 0000304F 5E                      	pop	si
 36080 00003050 07                      	pop	es
 36081                                  skip_set_devmarksize:
 36082 00003051 58                      	pop	ax
 36083                                  
 36084                                  	; 10/09/2023
 36085 00003052 1F                      	pop	ds
 36086                                  
 36087                                  	; 11/12/2022
 36088                                  	; cf = 0
 36089                                  	; 02/11/2022
 36090                                  	;clc	; ? (not needed here)	; clear carry
 36091 00003053 C3                      	retn
 36092                                  
 36093                                  ;----------------------------------------------------------------------------
 36094                                  
 36095                                  mem_err:
 36096                                  	; 11/12/2022
 36097 00003054 0E                      	push	cs
 36098 00003055 1F                      	pop	ds
 36099                                  mem_err2:
 36100 00003056 BA[3737]                	mov	dx,badmem
 36101                                  	;push	cs
 36102                                  	;pop	ds
 36103 00003059 E83102                  	call	print
 36104 0000305C E9EBD7                  	jmp	stall
 36105                                  
 36106                                  ;----------------------------------------------------------------------------
 36107                                  ;
 36108                                  ; procedure : calldev
 36109                                  ;
 36110                                  ;----------------------------------------------------------------------------
 36111                                  
 36112                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36113                                  	; (SYSINIT:34E0h)
 36114                                  calldev:
 36115 0000305F 2E8E1E[681E]            	mov	ds,[cs:DevEntry+2]
 36116 00003064 2E031E[661E]            	add	bx,[cs:DevEntry]	; do a little relocation
 36117 00003069 8B07                    	mov	ax,[bx]
 36118                                  
 36119 0000306B 2EFF36[661E]            	push	word [cs:DevEntry]
 36120 00003070 2EA3[661E]              	mov	[cs:DevEntry],ax
 36121 00003074 BB[E603]                	mov	bx,packet
 36122 00003077 2EFF1E[661E]            	call	far [cs:DevEntry]
 36123 0000307C 2E8F06[661E]            	pop	word [cs:DevEntry]
 36124 00003081 C3                      	retn
 36125                                  
 36126                                  ;----------------------------------------------------------------------------
 36127                                  ;
 36128                                  ; procedure : todigit
 36129                                  ;
 36130                                  ;----------------------------------------------------------------------------
 36131                                  
 36132                                  todigit:
 36133 00003082 2C30                    	sub	al,'0'
 36134                                  	;jb	short notdig  ; 02/11/2022
 36135                                  	; 12/12/2022
 36136 00003084 7203                    	jb	short notdig2
 36137                                  	;cmp	al,9
 36138                                  	;ja	short notdig
 36139                                  	;clc
 36140                                  	;retn
 36141                                  	; 12/12/2022
 36142 00003086 3C0A                    	cmp	al,10
 36143 00003088 F5                      	cmc
 36144                                  notdig:
 36145                                  	;stc
 36146                                  notdig2:
 36147 00003089 C3                      	retn
 36148                                  
 36149                                  ;----------------------------------------------------------------------------
 36150                                  ;
 36151                                  ; procedure : getnum
 36152                                  ;
 36153                                  ; getnum parses a decimal number.
 36154                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 36155                                  ; error), if number is bad carry is set, zero is set, ax=0.
 36156                                  ;
 36157                                  ;----------------------------------------------------------------------------
 36158                                  
 36159                                  getnum:
 36160 0000308A 53                      	push	bx
 36161 0000308B 31DB                    	xor	bx,bx			; running count is zero
 36162                                  b2:
 36163 0000308D E8F2FF                  	call	todigit 		; do we have a digit ?
 36164 00003090 7247                    	jc	short badnum		; no, bomb
 36165                                  
 36166 00003092 93                      	xchg	ax,bx			; put total in ax
 36167 00003093 53                      	push	bx			; save digit (0 to 9)
 36168                                  	;mov	bx,10			; base of arithmetic
 36169                                  	; 12/12/2022
 36170 00003094 B30A                    	mov	bl,10
 36171 00003096 F7E3                    	mul	bx			; shift by one decimal digit
 36172 00003098 5B                      	pop	bx			; get back digit (0 to 9)
 36173 00003099 00D8                    	add	al,bl			; get total
 36174 0000309B 80D400                  	adc	ah,0			; make that 16 bits
 36175 0000309E 7239                    	jc	short badnum		; too big a number
 36176                                  
 36177 000030A0 93                      	xchg	ax,bx			; stash total
 36178                                  
 36179 000030A1 E841FF                  	call	getchr			;get next digit
 36180 000030A4 722D                    	jc	short b1		; no more characters
 36181 000030A6 3C20                    	cmp	al,' ' 			; space?
 36182 000030A8 741F                    	je	short b15		; then end of digits
 36183 000030AA 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 36184 000030AC 741B                    	je	short b15		; then end of digits.
 36185 000030AE 3C09                    	cmp	al, tab ; 9		; tab
 36186 000030B0 7417                    	je	short b15
 36187 000030B2 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 36188 000030B7 7410                    	je	short b15
 36189 000030B9 3C2F                    	cmp	al,'/'			; see if another switch follows
 36190                                  	;nop				; cas - remnant of old bad code
 36191                                  	;nop
 36192                                  	; 12/12/2022
 36193                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36194                                  	;nop
 36195                                  	;nop
 36196 000030BB 740C                    	je	short b15
 36197 000030BD 3C0A                    	cmp	al,lf			; line-feed?
 36198 000030BF 7408                    	je	short b15
 36199 000030C1 3C0D                    	cmp	al,cr			; carriage return?
 36200 000030C3 7404                    	je	short b15
 36201 000030C5 08C0                    	or	al,al			; end of line separator?
 36202 000030C7 75C4                    	jnz	short b2		; no, try as a valid char...
 36203                                  b15:
 36204 000030C9 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 36205 000030CE 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 36206                                  b1:
 36207 000030D3 89D8                    	mov	ax,bx			; get proper count
 36208 000030D5 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 36209 000030D7 5B                      	pop	bx
 36210 000030D8 C3                      	retn
 36211                                  badnum:
 36212                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36213                                  	;mov	byte [cs:sepchr],0
 36214 000030D9 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 36215                                  	; 12 /12/2022
 36216 000030DB 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 36217 000030DF 5B                      	pop	bx
 36218 000030E0 F9                      	stc				; and carry set
 36219 000030E1 C3                      	retn
 36220                                  
 36221                                  ;****************************************************************************
 36222                                  
 36223                                  setdoscountryinfo:
 36224                                  
 36225                                  ;----------------------------------------------------------------------------
 36226                                  ;input: es:di -> pointer to dos_country_cdpg_info
 36227                                  ;	ds:0  -> buffer.
 36228                                  ;	si = 0
 36229                                  ;	ax = country id
 36230                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 36231                                  ;	bx = file handle
 36232                                  ;	this routine can handle maximum 438 country_data entries.
 36233                                  ;
 36234                                  ;output: dos_country_cdpg_info set.
 36235                                  ;	 carry set if any file read failure or wrong information in the file.
 36236                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 36237                                  ;	 codepage_id in the file.
 36238                                  ;----------------------------------------------------------------------------
 36239                                  
 36240                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36241                                  
 36242 000030E2 57                      	push	di
 36243 000030E3 50                      	push	ax
 36244 000030E4 52                      	push	dx
 36245                                  
 36246 000030E5 31C9                    	xor	cx,cx
 36247 000030E7 31D2                    	xor	dx,dx
 36248 000030E9 B80002                  	mov	ax,512			;read 512 bytes
 36249 000030EC E84301                  	call	readincontrolbuffer	;read the file header
 36250 000030EF 724A                    	jc	short setdosdata_fail
 36251                                  
 36252 000030F1 06                      	push	es
 36253 000030F2 56                      	push	si
 36254                                  
 36255 000030F3 0E                      	push	cs
 36256 000030F4 07                      	pop	es
 36257                                  
 36258 000030F5 BF[5933]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 36259 000030F8 B90800                  	mov	cx,8			;length of the signature
 36260 000030FB F3A6                    	repz	cmpsb
 36261                                  
 36262 000030FD 5E                      	pop	si
 36263 000030FE 07                      	pop	es
 36264 000030FF 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 36265                                  
 36266 00003101 83C612                  	add	si,18			;si -> county info type
 36267 00003104 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 36268 00003107 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 36269                                  
 36270 00003109 46                      	inc	si			;si -> file offset
 36271 0000310A 8B14                    	mov	dx,[si]			;get the info file offset.
 36272 0000310C 8B4C02                  	mov	cx,[si+2]
 36273 0000310F B80018                  	mov	ax,6144			;read 6144 bytes.
 36274 00003112 E81D01                  	call	readincontrolbuffer	;read info
 36275 00003115 7224                    	jc	short setdosdata_fail
 36276                                  
 36277 00003117 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 36278 00003119 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 36279 0000311D 771C                    	ja	short setdosdata_fail
 36280                                  
 36281 0000311F 46                      	inc	si
 36282 00003120 46                      	inc	si			;si -> entry information packet
 36283 00003121 5A                      	pop	dx			;restore code page id
 36284 00003122 58                      	pop	ax			;restore country id
 36285 00003123 5F                      	pop	di
 36286                                  
 36287                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 36288 00003124 3B4402                  	cmp	ax,[si+2]		;compare country_id
 36289 00003127 7509                    	jne	short setdoscntry_next
 36290                                  
 36291                                  	;cmp	dx,0			;no user specified code page ?
 36292                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 36293                                  	; 10/09/2023
 36294 00003129 09D2                    	or	dx,dx ; cmp dx,0
 36295 0000312B 7413                    	jz	short setdoscntry_any_codepage
 36296 0000312D 3B5404                  	cmp	dx,[si+4]		;compare code page id
 36297 00003130 7411                    	je	short setdoscntry_got_it
 36298                                  
 36299                                  setdoscntry_next:
 36300 00003132 0334                    	add	si,[si]			;next entry
 36301 00003134 46                      	inc	si
 36302 00003135 46                      	inc	si			;take a word for size of entry itself
 36303 00003136 E2EC                    	loop	setdoscntry_find
 36304                                  
 36305                                  	;mov	cx,-1			;signals that bad country id entered.
 36306                                  	; 10/09/2023
 36307 00003138 49                      	dec	cx ; 0 -> -1
 36308                                  setdoscntry_fail:
 36309 00003139 F9                      	stc
 36310 0000313A C3                      	retn
 36311                                  
 36312                                  setdosdata_fail:
 36313 0000313B 5E                      	pop	si
 36314 0000313C 59                      	pop	cx
 36315 0000313D 5F                      	pop	di
 36316 0000313E EBF9                    	jmp	short setdoscntry_fail
 36317                                  
 36318                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 36319 00003140 8B5404                  	mov	dx,[si+4]
 36320                                  
 36321                                  setdoscntry_got_it:			;found the matching entry
 36322 00003143 2E8916[6133]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 36323 00003148 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 36324 0000314B 8B4C0C                  	mov	cx,[si+12]
 36325 0000314E B80002                  	mov	ax,512 			;read 512 bytes
 36326 00003151 E8DE00                  	call	readincontrolbuffer
 36327 00003154 72E3                    	jc	short setdoscntry_fail
 36328                                  
 36329 00003156 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 36330 00003158 46                      	inc	si
 36331 00003159 46                      	inc	si			;si -> first entry
 36332                                  
 36333                                  setdoscntry_data:
 36334 0000315A 57                      	push	di			;es:di -> dos_country_cdpg_info
 36335 0000315B 51                      	push	cx			;save # of entry left
 36336 0000315C 56                      	push	si			;si -> current entry in control buffer
 36337                                  
 36338 0000315D 8A4402                  	mov	al,[si+2]		;get data entry id
 36339 00003160 E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 36340 00003163 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 36341                                  
 36342 00003165 8B5404                  	mov	dx,[si+4]		;get offset of data
 36343 00003168 8B4C06                  	mov	cx,[si+6]
 36344 0000316B B80042                  	mov	ax,4200h
 36345 0000316E F9                      	stc
 36346 0000316F CD21                    	int	21h			;move pointer
 36347 00003171 72C8                    	jc	short setdosdata_fail
 36348                                  
 36349 00003173 BA0002                  	mov	dx,512			;start of data buffer
 36350 00003176 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 36351 00003179 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 36352 0000317B F9                      	stc
 36353 0000317C CD21                    	int	21h			;read the country.sys data
 36354 0000317E 72BB                    	jc	short setdosdata_fail 	;read failure
 36355                                  
 36356 00003180 39C8                    	cmp	ax,cx
 36357 00003182 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 36358                                  
 36359 00003184 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 36360 00003187 8B4C06                  	mov	cx,[si+6]
 36361 0000318A B80042                  	mov	ax,4200h
 36362 0000318D F9                      	stc
 36363 0000318E CD21                    	int	21h			;move pointer back again
 36364 00003190 72A9                    	jc	short setdosdata_fail
 36365                                  
 36366 00003192 56                      	push	si
 36367 00003193 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 36368 00003196 8B0C                    	mov	cx,[si]
 36369 00003198 5E                      	pop	si
 36370 00003199 BA0002                  	mov	dx,512			;start of data buffer
 36371 0000319C 83C10A                  	add	cx,10			;signature + a word for the length itself
 36372 0000319F B43F                    	mov	ah,3Fh			;read the data from the file.
 36373 000031A1 F9                      	stc
 36374 000031A2 CD21                    	int	21h
 36375 000031A4 7295                    	jc	short setdosdata_fail
 36376                                  
 36377 000031A6 39C8                    	cmp	ax,cx
 36378 000031A8 7591                    	jne	short setdosdata_fail
 36379                                  
 36380 000031AA 8A4402                  	mov	al,[si+2]		;save data id for future use.
 36381 000031AD BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 36382 000031B0 8B0C                    	mov	cx,[si]			;get the length of the file
 36383 000031B2 41                      	inc	cx			;take care of a word for lenght of tab
 36384 000031B3 41                      	inc	cx			;itself.
 36385 000031B4 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 36386 000031B8 7781                    	ja	short setdosdata_fail
 36387                                  
 36388                                  	;if	bugfix
 36389 000031BA E83100                  	call	setdbcs_before_copy
 36390                                  	;endif
 36391                                  
 36392 000031BD 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 36393 000031BF 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 36394                                  
 36395 000031C1 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 36396                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 36397 000031C5 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 36398                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 36399                                  	
 36400 000031C9 57                      	push	di			;save di
 36401                                  
 36402                                  	;push	ax
 36403                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 36404                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 36405                                  	;pop	ax
 36406                                  	; 10/09/2023
 36407 000031CA 2EFF36[6133]            	push	word [cs:cntrycodepage_id]
 36408 000031CF 8F4404                  	pop	word [si+4]
 36409                                  
 36410                                  setdoscntry_mov:
 36411 000031D2 F3A4                    	rep	movsb			;copy the table into dos
 36412 000031D4 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 36413 000031D6 7509                    	jne	short setdoscntry_data_next
 36414                                  
 36415 000031D8 5F                      	pop	di			;restore di
 36416 000031D9 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 36417                                  	;pop	word [es:di+26]		;restore
 36418 000031DD 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 36419                                  	;pop	word [es:di+24]
 36420                                  
 36421                                  setdoscntry_data_next:
 36422 000031E1 5E                      	pop	si			;restore control buffer pointer
 36423 000031E2 59                      	pop	cx			;restore # of entries left
 36424 000031E3 5F                      	pop	di			;restore pointer to dso_country_cdpg
 36425 000031E4 0334                    	add	si,[si]			;try to get the next entry
 36426 000031E6 46                      	inc	si
 36427 000031E7 46                      	inc	si			;take a word of entry length itself
 36428 000031E8 49                      	dec	cx
 36429                                  	; 10/09/2023
 36430 000031E9 741B                    	jz	short setdoscntry_ok 
 36431                                  	;cmp	cx,0
 36432                                  	;je	short setdoscntry_ok
 36433 000031EB E96CFF                  	jmp	setdoscntry_data
 36434                                  
 36435                                  	; 18/12/2022
 36436                                  ;setdoscntry_ok:
 36437                                  	;retn
 36438                                  
 36439                                  ;----------------------------------------------------------------------------
 36440                                  
 36441                                  	;if	bugfix
 36442                                  
 36443                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36444                                  
 36445                                  setdbcs_before_copy:
 36446 000031EE 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 36447 000031F0 7514                    	jne	short sdbcsbc		; jump if not
 36448                                  	
 36449                                  	; 10/09/2023
 36450 000031F2 50                      	push	ax
 36451 000031F3 31C0                    	xor	ax,ax
 36452 000031F5 263905                  	cmp	[es:di],ax ; 0
 36453 000031F8 740B                    	je	short sdbcsbc_pop
 36454                                  	
 36455                                  	;cmp	word [es:di],0		; zero byte data block?
 36456                                  	;je	short sdbcsbc		; jump if so
 36457                                  
 36458 000031FA 57                      	push	di
 36459                                  	; 10/09/2023
 36460                                  	;push	ax
 36461 000031FB 51                      	push	cx
 36462 000031FC 268B0D                  	mov	cx,[es:di]		; load block length
 36463                                  	;add	di,2			; points actual data
 36464 000031FF 47                      	inc	di
 36465 00003200 47                      	inc	di
 36466                                  	;xor	al,al			; fill bytes
 36467 00003201 F3AA                    	rep	stosb			; clear data block
 36468 00003203 59                      	pop	cx
 36469                                  	;pop	ax
 36470 00003204 5F                      	pop	di
 36471                                  
 36472                                  sdbcsbc_pop:	; 10/09/2023
 36473 00003205 58                      	pop	ax
 36474                                  sdbcsbc:
 36475                                  setdoscntry_ok:	; 18/12/2022
 36476 00003206 C3                      	retn
 36477                                  
 36478                                  	;endif
 36479                                  
 36480                                  ;----------------------------------------------------------------------------
 36481                                  
 36482                                  getcountrydestination:
 36483                                  
 36484                                  ;----------------------------------------------------------------------------
 36485                                  ;get the destination address in the dos country info table.
 36486                                  ;
 36487                                  ;input: al - data id
 36488                                  ;	es:di -> dos_country_cdpg_info
 36489                                  ;on return:
 36490                                  ;	es:di -> destination address of the matching data id
 36491                                  ;	carry set if no matching data id found in dos.
 36492                                  ;----------------------------------------------------------------------------
 36493                                  
 36494                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36495                                  
 36496 00003207 51                      	push	cx
 36497                                  	;add	di,74
 36498 00003208 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 36499                                  					;skip the reserved area, syscodepage etc.
 36500 0000320B 268B0D                  	mov	cx,[es:di]		;get the number of entries
 36501 0000320E 47                      	inc	di
 36502 0000320F 47                      	inc	di			;si -> the first start entry id
 36503                                  
 36504                                  getcntrydest:
 36505 00003210 263805                  	cmp	byte [es:di],al
 36506 00003213 7413                    	je	short getcntrydest_ok
 36507                                  
 36508 00003215 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 36509 00003219 7405                    	je	short getcntrydest_1
 36510                                  
 36511 0000321B 83C705                  	add	di,5			;next data id
 36512 0000321E EB03                    	jmp	short getcntrydest_loop
 36513                                  
 36514                                  getcntrydest_1:
 36515                                  	;add	di,41
 36516 00003220 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 36517                                  getcntrydest_loop:
 36518 00003223 E2EB                    	loop	getcntrydest
 36519 00003225 F9                      	stc
 36520                                  	;jmp	short getcntrydest_exit
 36521                                  getcntrydest_exit:
 36522                                  	; 10/09/2023
 36523 00003226 59                      	pop	cx
 36524 00003227 C3                      	retn
 36525                                  
 36526                                  getcntrydest_ok:
 36527                                  	; 10/09/2023
 36528 00003228 47                      	inc	di
 36529                                  
 36530                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 36531                                  ;	jne	short getcntrydest_ok1
 36532                                  ;
 36533                                  ;	;inc	di			;now di -> cccountryinfolen
 36534                                  ;	jmp	short getcntrydest_exit
 36535                                  
 36536                                  	; 10/09/2023
 36537 00003229 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 36538 0000322B 74F9                    	je	short getcntrydest_exit
 36539                                  
 36540                                  getcntrydest_ok1:
 36541                                  	;les	di,[es:di+1]		;get the destination in es:di
 36542                                  	; 10/09/2023
 36543 0000322D 26C43D                  	les	di,[es:di]
 36544                                  ;getcntrydest_exit:
 36545 00003230 59                      	pop	cx
 36546 00003231 C3                      	retn
 36547                                  
 36548                                  ;----------------------------------------------------------------------------
 36549                                  
 36550                                  readincontrolbuffer:
 36551                                  
 36552                                  ;----------------------------------------------------------------------------
 36553                                  ;move file pointer to cx:dx
 36554                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 36555                                  ;si will be set to 0 hence ds:si points to the control buffer.
 36556                                  ;
 36557                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 36558                                  ;	 be moved.
 36559                                  ;	 ax - # of bytes to read
 36560                                  ;	 bx - file handle
 36561                                  ;	 ds - buffer seg.
 36562                                  ;return: the control data information is read into ds:0 - ds:0200.
 36563                                  ;	 cx,dx value destroyed.
 36564                                  ;	 carry set if error in reading file.
 36565                                  ;----------------------------------------------------------------------------
 36566                                  
 36567 00003232 50                      	push	ax			;# of bytes to read
 36568 00003233 B80042                  	mov	ax,4200h
 36569 00003236 F9                      	stc
 36570 00003237 CD21                    	int	21h			;move pointer
 36571 00003239 59                      	pop	cx			;# of bytes to read
 36572 0000323A 7209                    	jc	short ricb_exit
 36573                                  
 36574 0000323C 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 36575 0000323E 31F6                    	xor	si,si
 36576 00003240 B43F                    	mov	ah,3Fh			;read into the buffer
 36577 00003242 F9                      	stc
 36578 00003243 CD21                    	int	21h			;should be less than 1024 bytes.
 36579                                  ricb_exit:
 36580 00003245 C3                      	retn
 36581                                  
 36582                                  ;----------------------------------------------------------------------------
 36583                                  
 36584                                  ;! set_country_path procedure is not called from anywhere !
 36585                                  ; Erdogan Tan - 04/08/2023 (Retro DOS v4.2)
 36586                                  %if 0
 36587                                  
 36588                                  set_country_path:
 36589                                  
 36590                                  ;----------------------------------------------------------------------------
 36591                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 36592                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 36593                                  ;     assumes current directory is the root directory.
 36594                                  ;out: ds:di -> full path (cntry_drv).
 36595                                  ;     set the cntry_drv string from the country=,,path command.
 36596                                  ;     ds, es, si value saved.
 36597                                  ;----------------------------------------------------------------------------
 36598                                  
 36599                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 36600                                  	; (SYSINIT:4EF4h)
 36601                                  
 36602                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 36603                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:36DDh)
 36604                                  
 36605                                  	push	si
 36606                                  
 36607                                  	push	ds			;switch ds, es
 36608                                  	push	es
 36609                                  	pop	ds
 36610                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 36611                                  
 36612                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 36613                                  	jc	short scp_default_drv 	;no, use current default drive.
 36614                                  
 36615                                  	mov	al,[si]
 36616                                  	inc	si
 36617                                  	inc	si			;si -> next char after ":"
 36618                                  	jmp	short scp_setdrv
 36619                                  
 36620                                  scp_default_drv:
 36621                                  	mov	ah,19h
 36622                                  	int	21h
 36623                                  	add	al,"A"			;convert it to a character.
 36624                                  
 36625                                  scp_setdrv:
 36626                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 36627                                  	mov	di,cntry_path
 36628                                  	mov	al,[si]
 36629                                  	cmp	al, "\"
 36630                                  	je	short scp_root_dir
 36631                                  
 36632                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 36633                                  	;je	short scp_root_dir
 36634                                  	;jmp	short scp_path
 36635                                  	; 04/01/2023
 36636                                  	jne	short scp_path
 36637                                  
 36638                                  scp_root_dir:
 36639                                  	dec	di			;di -> cntry_root
 36640                                  scp_path:
 36641                                  	call	move_asciiz		;copy it
 36642                                  
 36643                                  	mov	di,cntry_drv
 36644                                  scpath_exit:
 36645                                  
 36646                                  	push	ds			;switch ds, es
 36647                                  	push	es
 36648                                  	pop	ds
 36649                                  	pop	es			;ds, es value restored
 36650                                  
 36651                                  	pop	si
 36652                                  	retn
 36653                                  
 36654                                  %endif
 36655                                  
 36656                                  ;----------------------------------------------------------------------------
 36657                                  
 36658                                  chk_drive_letter:
 36659                                  
 36660                                  ;check if ds:[si] is a drive letter followed by ":".
 36661                                  ;assume that every alpha character is already converted to upper case.
 36662                                  ;carry set if not.
 36663                                  
 36664                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 36665                                  
 36666 00003246 50                      	push	ax
 36667 00003247 803C41                  	cmp	byte [si],"A"
 36668                                  	;jb	short cdletter_no
 36669 0000324A 720C                    	jb	short cdletter_exit
 36670 0000324C 803C5A                  	cmp	byte [si],"Z"
 36671 0000324F 7706                    	ja	short cdletter_no
 36672 00003251 807C013A                	cmp	byte [si+1],":"
 36673                                  	;jne	short cdletter_no
 36674                                  	;jmp	short cdletter_exit
 36675                                  	; 10/09/2023
 36676 00003255 7401                    	je	short cdletter_exit
 36677                                  
 36678                                  cdletter_no:
 36679 00003257 F9                      	stc
 36680                                  cdletter_exit:
 36681 00003258 58                      	pop	ax
 36682 00003259 C3                      	retn
 36683                                  
 36684                                  ;----------------------------------------------------------------------------
 36685                                  
 36686                                  move_asciiz:
 36687                                  
 36688                                  ;in: ds:si -> source es:di -> target
 36689                                  ;out: copy the string until 0.
 36690                                  ;assumes there exists a 0.
 36691                                  
 36692                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 36693                                  
 36694                                  masciiz_loop:
 36695                                  	; 10/09/2023
 36696 0000325A F604FF                  	test	byte [si],0FFh
 36697 0000325D A4                      	movsb
 36698                                  	;cmp	byte [si-1],0	; was it 0?
 36699                                  	;jne	short masciiz_loop
 36700 0000325E 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 36701 00003260 C3                      	retn
 36702                                  
 36703                                  
 36704                                  ;----------------------------------------------------------------------------
 36705                                  
 36706                                  ;	ds:dx points to string to output (asciz)
 36707                                  ;
 36708                                  ;	prints <badld_pre> <string> <badld_post>
 36709                                  
 36710                                  badfil:
 36711 00003261 0E                      	push	cs
 36712 00003262 07                      	pop	es
 36713                                  
 36714 00003263 89D6                    	mov	si,dx
 36715                                  badload:
 36716 00003265 BA[A136]                	mov	dx,badld_pre	; want to print config error
 36717 00003268 BB[5E36]                	mov	bx,crlfm
 36718                                  prnerr:
 36719 0000326B 0E                      	push	cs
 36720 0000326C 1F                      	pop	ds ; *
 36721 0000326D E81D00                  	call	print
 36722                                  prn1:
 36723 00003270 268A14                  	mov	dl,[es:si]
 36724 00003273 08D2                    	or	dl,dl
 36725 00003275 7407                    	jz	short prn2
 36726 00003277 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 36727 00003279 CD21                    	int	21h
 36728 0000327B 46                      	inc	si
 36729 0000327C EBF2                    	jmp	short prn1
 36730                                  prn2:
 36731 0000327E 89DA                    	mov	dx,bx
 36732 00003280 E80A00                  	call	print
 36733                                  	; 11/12/2022
 36734                                  	; ds = cs ; *
 36735 00003283 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 36736                                  	;cmp	byte [cs:donotshownum],1 
 36737 00003288 7407                    	je	short prnexit
 36738                                  	
 36739                                  	; 18/12/2022
 36740                                  	;call	error_line
 36741 0000328A E91EF4                  	jmp	error_line
 36742                                  ;prnexit:
 36743                                  	;retn
 36744                                  
 36745                                  ;----------------------------------------------------------------------------
 36746                                  
 36747                                  print:
 36748 0000328D B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 36749 0000328F CD21                    	int	21h
 36750                                  prnexit:	; 18/12/2022
 36751 00003291 C3                      	retn
 36752                                  
 36753                                  ;----------------------------------------------------------------------------
 36754                                  
 36755                                  ;  open device pointed to by dx, al has access code
 36756                                  ;   if unable to open do a device open null device instead
 36757                                  
 36758                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36759                                  	; (SYSINIT:3764h)
 36760                                  open_dev:
 36761 00003292 E80500                  	call	open_file
 36762 00003295 7309                    	jnc	short open_dev3
 36763                                  
 36764                                  open_dev1:
 36765 00003297 BA[FA32]                	mov	dx,nuldev
 36766                                  	; 18/12/2022
 36767                                  	;call	open_file
 36768                                  ;of_retn:
 36769                                  	;retn
 36770                                  	; 18/12/2022
 36771                                  	;jmp	short open_file
 36772                                  open_file:
 36773 0000329A B43D                    	mov	ah,OPEN	; 3Dh
 36774 0000329C F9                      	stc
 36775 0000329D CD21                    	int	21h
 36776                                  of_retn:	; 18/12/2022
 36777 0000329F C3                      	retn
 36778                                  
 36779                                  open_dev3:
 36780 000032A0 89C3                    	mov	bx,ax			; handle from open to bx
 36781                                  	;;xor	ax,ax			; get device info
 36782                                  	;;mov	ah,IOCTL ; 44h
 36783                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 36784                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36785                                  	;xor	ax,ax
 36786                                  	;mov	ah,44h	; IOCTL
 36787                                  	; 11/12/2022
 36788 000032A2 B80044                  	mov	ax,4400h ; IOCTL<<8 
 36789                                  
 36790 000032A5 CD21                    	int	21h
 36791                                  
 36792 000032A7 F6C280                  	test	dl,10000000b ; 80h
 36793 000032AA 75F3                    	jnz	short of_retn
 36794                                  
 36795 000032AC B43E                    	mov	ah,CLOSE ; 3Eh
 36796 000032AE CD21                    	int	21h
 36797 000032B0 EBE5                    	jmp	short open_dev1
 36798                                  
 36799                                  ;----------------------------------------------------------------------------
 36800                                  
 36801                                  ; 18/12/2022
 36802                                  %if 0
 36803                                  open_file:
 36804                                  	mov	ah,OPEN	; 3Dh
 36805                                  	stc
 36806                                  	int	21h
 36807                                  	retn
 36808                                  %endif
 36809                                  
 36810                                  ;----------------------------------------------------------------------------
 36811                                  
 36812                                  ; test int24. return back to dos with the fake user response of "fail"
 36813                                  
 36814                                  int24:
 36815 000032B2 B003                    	mov	al,3			; fail the system call
 36816 000032B4 CF                      	iret				; return back to dos.
 36817                                  
 36818                                  ; 19/04/2019 - Retro DOS v4.0
 36819                                  
 36820                                  ;----------------------------------------------------------------------------
 36821                                  ; DATA
 36822                                  ;----------------------------------------------------------------------------
 36823                                  
 36824                                  ;include copyrigh.inc			; copyright statement
 36825                                  
 36826                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 36827                                  
 36828                                  ;MsDosVersion6Copyr:
 36829                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 36830                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 36831                                  
 36832                                  ; 22/10/2022
 36833                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 36834                                  
 36835                                  ; 28/12/2022
 36836                                  %if 0
 36837                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36838                                  MsDosVersion5Copyr:
 36839                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 36840                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 36841                                  %endif
 36842                                  
 36843                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36844                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36845                                  ; 20/04/2019 - Retro DOS v4.0
 36846                                  ;BOOTMES:
 36847                                  ;	db      13
 36848                                  ;	db      10
 36849                                  ;	db      "MS-DOS version "
 36850                                  ;	db      MAJOR_VERSION + "0"
 36851                                  ;	db      "."
 36852                                  ;	db      (MINOR_VERSION / 10) + "0"
 36853                                  ;	db      (MINOR_VERSION % 10) + "0"
 36854                                  ;	db      13,10
 36855                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 36856                                  ;	; 22/10/2022
 36857                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 36858                                  ;	;
 36859                                  ;	db	0
 36860                                  
 36861                                  	; 12/12/2022
 36862 000032B5 00                      	db	0
 36863                                  ; 12/12/2022
 36864                                  BOOTMES:
 36865 000032B6 0D0A                    	db	13,10
 36866                                  	;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 36867                                  	; 28/12/2022
 36868 000032B8 526574726F20444F53-     	db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 36868 000032C1 2076342E3120284D6F-
 36868 000032CA 646966696564204D53-
 36868 000032D3 444F5320352E302920 
 36869 000032DC 0D0A                    	db	13,10
 36870                                  	;db	"by Erdogan Tan [2022] "
 36871 000032DE 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 36871 000032E7 6E2054616E205B3230-
 36871 000032F0 32335D20           
 36872 000032F4 0D0A                    	db	13,10
 36873 000032F6 0D0A2400                	db	13,10,"$",0
 36874                                  
 36875 000032FA 4E554C00                nuldev:	db	"NUL",0
 36876 000032FE 434F4E00                condev:	db	"CON",0
 36877 00003302 41555800                auxdev:	db	"AUX",0
 36878 00003306 50524E00                prndev:	db	"PRN",0
 36879                                  
 36880                                  ;IFDEF	CONFIGPROC
 36881 0000330A 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 36881 00003313 595300             
 36882                                  
 36883 00003316 413A                    cntry_drv:  db	"A:"
 36884 00003318 5C                      cntry_root: db	"\"
 36885 00003319 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 36885 00003322 595300             
 36886                                  	    ;db	52 dup (0)
 36887 00003325 00<rep 34h>             	    times 52 db 0	
 36888                                  
 36889                                  country_file_signature:
 36890 00003359 FF434F554E545259        	db	0FFh,'COUNTRY'
 36891                                  
 36892                                  cntrycodepage_id: 
 36893 00003361 0000                    	dw	0 	
 36894                                  
 36895                                  ;ENDIF ; CONFIGPROC
 36896                                  
 36897                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36898                                  ;;ifdef	MULTI_CONFIG
 36899                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 36900                                  ;tmplate: db	64                      ; must precede commnd
 36901                                  ;;endif
 36902                                  	; 02/11/2022
 36903                                  	;db	12                      ; size of commnd line (excl. null)
 36904                                  
 36905 00003363 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 36905 0000336C 434F4D00           
 36906                                  	;db	51 dup (0)
 36907 00003370 00<rep 33h>             	times	51 db 0
 36908                                  ;endif
 36909                                  
 36910                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36911                                  ;;ifdef	MULTI_CONFIG
 36912                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 36913                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 36914                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 36915                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 36916                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 36917                                  ;	 db	9,"A:\DOS /P",0		;
 36918                                  ;def_swchr:	
 36919                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 36920                                  ;;endif
 36921                                  
 36922                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36923                                  ;command_line:
 36924                                  ;	db	2,"/P"			; default command.com args
 36925                                  ;	;db	125 dup (0)
 36926                                  ;	times	125 db 0
 36927                                  
 36928                                  pathstring:
 36929                                  	;db	64 dup (0)
 36930 000033A3 00<rep 40h>             	times	64 db 0
 36931                                  
 36932                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36933                                  %if 0
 36934                                  
 36935                                  dae_flag:
 36936                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 36937                                  
 36938                                  ;ifdef	MULTI_CONFIG
 36939                                  
 36940                                  MAX_MULTI_CONFIG equ 10
 36941                                  
 36942                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 36943                                  
 36944                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 36945                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36946                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36947                                  bLastCol:	db      0               ; ending column on status line
 36948                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36949                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 36950                                                                          ; 2=disable default 2-second delay
 36951                                  bCRTPage:	db      0               ; value saved from BIOS data area
 36952                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 36953                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36954                                  bDefBlock:	db      1               ; default block #
 36955                                  bMaxBlock:	db      0               ; maxmimum block #
 36956                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36957                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36958                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36959                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36960                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36961                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36962                                  
 36963                                  szBoot:		db      "CONFIG=",0
 36964                                  szMenu:		db      "MENU",0
 36965                                  szCommon:	db      "COMMON",0
 36966                                  
 36967                                  ;endif	;MULTI_CONFIG
 36968                                  
 36969                                  comtab:	 ; label byte
 36970                                  
 36971                                  ;            cmd len    command         cmd code
 36972                                  ;            -------    -------         --------
 36973                                  
 36974                                  ;ifdef MULTI_CONFIG
 36975                                          db      1,      "[",            CONFIG_BEGIN
 36976                                  ;endif
 36977                                          db      5,      "BREAK",        CONFIG_BREAK
 36978                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36979                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36980                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36981                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36982                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36983                                          db      3,      "DOS",          CONFIG_DOS
 36984                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36985                                          db      4,      "FCBS",         CONFIG_FCBS
 36986                                          db      5,      "FILES",        CONFIG_FILES
 36987                                  ;ifdef MULTI_CONFIG
 36988                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36989                                  ;endif
 36990                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36991                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36992                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36993                                  ;ifdef MULTI_CONFIG
 36994                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36995                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36996                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36997                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 36998                                  ;endif
 36999                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37000                                  ;ifdef MULTI_CONFIG
 37001                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 37002                                  ;endif
 37003                                          db      3,      "REM",          CONFIG_REM
 37004                                  ;ifdef MULTI_CONFIG
 37005                                          db      3,      "SET",          CONFIG_SET
 37006                                  ;endif
 37007                                          db      5,      "SHELL",        CONFIG_SHELL
 37008                                  ;if    STACKSW
 37009                                          db      6,      "STACKS",       CONFIG_STACKS
 37010                                  ;endif
 37011                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 37012                                  	db	0
 37013                                  %endif
 37014                                  
 37015                                  comtab:
 37016                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37017                                  	; (SYSINIT:38EDh)
 37018 000033E3 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 37019 000033EC 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 37020 000033F3 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 37021 000033FB 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37021 00003404 474855             
 37022 00003407 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 37023 0000340E 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 37024 00003414 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37024 0000341D 454C               
 37025 0000341F 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37025 00003428 434B4D             
 37026 0000342B 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37026 00003434 50                 
 37027 00003435 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 37028 0000343D 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 37029 00003446 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 37030 0000344D 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 37031 00003456 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 37032 0000345F 0352454D30              	db      3,      "REM",          CONFIG_REM
 37033 00003464 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 37033 0000346D 31                 
 37034 0000346E 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 37035 00003473 00                      	db	0
 37036                                  
 37037                                  deviceparameters:	
 37038                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 37039                                  devp.specialfunc:	; deviceparameters +
 37040 00003474 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 37041                                  devp.devtype:
 37042 00003475 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 37043                                  devp.devattr:
 37044 00003476 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 37045                                  devp.cylinders:
 37046 00003478 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 37047                                  
 37048 0000347A 00<rep 11Eh>            	times	286	db 0
 37049                                  	
 37050 00003598 0200                    hlim:	dw	2
 37051 0000359A 0900                    slim:	dw	9
 37052                                  
 37053 0000359C 00                      drive:	db	0
 37054                                  
 37055                                  switches:
 37056 0000359D 0000                    	dw	0
 37057                                  
 37058                                  ; the following are the recommended bpbs for the media that
 37059                                  ; we know of so far.
 37060                                  
 37061                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37062                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 37063                                  
 37064                                  ; 48 tpi diskettes
 37065                                  
 37066 0000359F 0002                    bpb48t	dw	512
 37067 000035A1 02                      	db	2
 37068 000035A2 0100                    	dw	1
 37069 000035A4 02                      	db	2
 37070 000035A5 7000                    	dw	112
 37071 000035A7 D002                    	dw	2*9*40 ; 720
 37072 000035A9 FD                      	db	0FDh
 37073 000035AA 0200                    	dw	2
 37074 000035AC 0900                    	dw	9
 37075 000035AE 0200                    	dw	2
 37076 000035B0 00000000                	dd	0
 37077 000035B4 00000000                        dd      0
 37078                                  
 37079                                  ; 96tpi diskettes
 37080                                  
 37081 000035B8 0002                    bpb96t:	dw	512
 37082 000035BA 01                      	db	1
 37083 000035BB 0100                    	dw	1
 37084 000035BD 02                      	db	2
 37085 000035BE E000                    	dw	224
 37086 000035C0 6009                    	dw	2*15*80 ; 2400
 37087 000035C2 F9                      	db	0F9h
 37088 000035C3 0700                    	dw	7
 37089 000035C5 0F00                    	dw	15
 37090 000035C7 0200                    	dw	2
 37091 000035C9 00000000                	dd	0
 37092 000035CD 00000000                        dd      0
 37093                                  
 37094                                  ; 3 1/2 inch diskette bpb
 37095                                  
 37096 000035D1 0002                    bpb35:	dw	512
 37097 000035D3 02                      	db	2
 37098 000035D4 0100                    	dw	1
 37099 000035D6 02                      	db	2
 37100 000035D7 7000                    	dw	112
 37101 000035D9 A005                    	dw	2*9*80 ; 1440
 37102 000035DB F9                      	db	0F9h
 37103 000035DC 0300                    	dw	3
 37104 000035DE 0900                    	dw	9
 37105 000035E0 0200                    	dw	2
 37106 000035E2 00000000                	dd	0
 37107 000035E6 00000000                        dd      0
 37108                                        
 37109 000035EA 0002                    bpb35h:	dw	512
 37110 000035EC 01                      	db	1
 37111 000035ED 0100                    	dw	1
 37112 000035EF 02                      	db	2
 37113 000035F0 E000                    	dw	224
 37114 000035F2 400B                    	dw	2*18*80 ; 2880
 37115 000035F4 F0                      	db	0F0h
 37116 000035F5 0900                    	dw	9
 37117 000035F7 1200                    	dw	18
 37118 000035F9 0200                    	dw	2
 37119 000035FB 00000000                	dd	0
 37120 000035FF 00000000                        dd      0
 37121                                  
 37122                                  ; m037 - BEGIN
 37123                                  
 37124 00003603 0002                    bpb288:	dw	512
 37125 00003605 02                      	db	2
 37126 00003606 0100                    	dw	1
 37127 00003608 02                      	db	2
 37128 00003609 F000                    	dw	240
 37129 0000360B 8016                    	dw	2*36*80 ; 5760
 37130 0000360D F0                      	db	0F0h
 37131 0000360E 0900                    	dw	9
 37132 00003610 2400                    	dw	36
 37133 00003612 0200                    	dw	2
 37134 00003614 00000000                	dd	0
 37135 00003618 00000000                        dd      0
 37136                                  
 37137                                  ; m037 - END
 37138                                  
 37139                                  ; 12/05/2019
 37140                                  
 37141                                  align 2
 37142                                  
 37143                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37144                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 37145                                  
 37146 0000361C [9F35]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 37147 0000361E [B835]                  	    dw	    bpb96t		; 96tpi drives
 37148 00003620 [D135]                  	    dw	    bpb35		; 3.5" drives
 37149                                  ; the following are not supported, so default to 3.5" media layout
 37150 00003622 [D135]                  	    dw	    bpb35		; not used - 8" drives
 37151 00003624 [D135]                  	    dw	    bpb35		; not used - 8" drives
 37152 00003626 [D135]                  	    dw	    bpb35		; not used - hard files
 37153 00003628 [D135]                  	    dw	    bpb35		; not used - tape drives
 37154 0000362A [EA35]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 37155 0000362C [D135]                  	    dw	    bpb35		; ERIMO				m037
 37156 0000362E [0336]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 37157                                  
 37158                                  switchlist: 
 37159 00003630 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 37160                                  
 37161                                  ;----------------------------------------------------------------------------
 37162                                  ; Messages
 37163                                  ;----------------------------------------------------------------------------
 37164                                  
 37165                                  ; 19/04/2019 - Retro DOS v4.0
 37166                                  
 37167                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 37168                                  
 37169 00003639 00                      	db 	0
 37170                                  
 37171                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37172                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 37173                                  
 37174                                  badopm:
 37175 0000363A 0D0A                    	db	0Dh,0Ah 
 37176 0000363C 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 37176 00003645 7A656420636F6D6D61-
 37176 0000364E 6E6420696E20434F4E-
 37176 00003657 4649472E535953     
 37177                                  crlfm:
 37178 0000365E 0D0A24                  	db	0Dh,0Ah,'$'
 37179                                  badparm:
 37180 00003661 0D0A                    	db	0Dh,0Ah
 37181 00003663 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 37181 0000366C 6E64206F7220706172-
 37181 00003675 616D6574657273202D-
 37181 0000367E 2024               
 37182                                  badsiz_pre:
 37183 00003680 0D0A                    	db	0Dh,0Ah
 37184 00003682 536563746F72207369-     	db	'Sector size too large in file $'
 37184 0000368B 7A6520746F6F206C61-
 37184 00003694 72676520696E206669-
 37184 0000369D 6C652024           
 37185                                  badld_pre:
 37186 000036A1 0D0A                    	db	0Dh,0Ah
 37187 000036A3 426164206F72206D69-     	db	'Bad or missing $'
 37187 000036AC 7373696E672024     
 37188                                  badcom:
 37189 000036B3 436F6D6D616E642049-     	db	'Command Interpreter',0
 37189 000036BC 6E7465727072657465-
 37189 000036C5 7200               
 37190                                  badcountry:
 37191 000036C7 0D0A                    	db	0Dh,0Ah
 37192 000036C9 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 37192 000036D2 6F756E74727920636F-
 37192 000036DB 6465206F7220636F64-
 37192 000036E4 6520706167650D0A24 
 37193                                  badcountrycom:
 37194 000036ED 0D0A                    	db	0Dh,0Ah
 37195 000036EF 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 37195 000036F8 434F554E5452592063-
 37195 00003701 6F6D6D616E640D0A24 
 37196                                  insufmemory:
 37197 0000370A 0D0A                    	db	0Dh,0Ah
 37198 0000370C 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 37198 00003715 656E74206D656D6F72-
 37198 0000371E 7920666F7220434F55-
 37198 00003727 4E5452592E53595320-
 37198 00003730 66696C650D0A24     
 37199                                  badmem:
 37200 00003737 0D0A                    	db	0Dh,0Ah
 37201 00003739 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 37201 00003742 74696F6E20746F6F20-
 37201 0000374B 6C6172676520666F72-
 37201 00003754 206D656D6F72790D0A-
 37201 0000375D 24                 
 37202                                  badblock:
 37203 0000375E 0D0A                    	db	0Dh,0Ah
 37204 00003760 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 37204 00003769 626C6F636B20646576-
 37204 00003772 696365730D0A24     
 37205                                  badstack:
 37206 00003779 0D0A                    	db	0Dh,0Ah
 37207 0000377B 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 37207 00003784 5441434B2070617261-
 37207 0000378D 6D65746572730D0A24 
 37208                                  	; 18/12/2022
 37209                                  ;badorder:
 37210                                  	;db	0Dh,0Ah
 37211                                  	;db	'Incorrect order in CONFIG.SYS line $'
 37212                                  errorcmd:
 37213 00003796 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 37213 0000379F 434F4E4649472E5359-
 37213 000037A8 53206C696E652024   
 37214                                  
 37215                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37216                                  %if 0
 37217                                  
 37218                                  OnOff:	db	'ON'
 37219                                  OnOff2:	db	'OFF'
 37220                                  
 37221                                  StartMsg:
 37222                                  	db	'Starting MS-DOS...',0Dh,0Ah
 37223                                  	db	0Ah,0
 37224                                  _$PauseMsg:
 37225                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 37226                                  _$CleanMsg:
 37227                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 37228                                  _$InterMsg:
 37229                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 37230                                  _$MenuHeader:
 37231                                  	db	0Dh,0Ah
 37232                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 37233                                  	db	'  =======================',0Dh,0Ah,'$'
 37234                                  _$MenuPrmpt:
 37235                                  	db	'  Enter a choice: $'
 37236                                  _$StatusLine:
 37237                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 37238                                  	db	'and AUTOEXEC.BAT [ ]$'
 37239                                  _$InterPrmpt:
 37240                                  	db	' [Y,N]?$'
 37241                                  _$YES:	db	'YES$'
 37242                                  _$NO:	db	'NO $'
 37243                                  _$TimeOut:
 37244                                  	db	'Time remaining: $'
 37245                                  badcomprmpt:
 37246                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 37247                                  	db	0Dh,0Ah,'$'
 37248                                  _$AutoPrmpt:
 37249                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 37250                                  
 37251                                  %endif
 37252                                  
 37253                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37254                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 37255                                  
 37256                                  TooManyDrivesMsg:
 37257 000037B0 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 37257 000037B9 4C6F676963616C2064-
 37257 000037C2 726976657320706173-
 37257 000037CB 74205A3A2065786973-
 37257 000037D4 7420616E642077696C-
 37257 000037DD 6C2062652069676E6F-
 37257 000037E6 7265640D0A24       
 37258                                  
 37259                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 37260                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 37261                                  	;db	7 dup(0)
 37262                                  
 37263                                  	;times	7 db 0
 37264                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37265                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 37266                                  	; 09/12/2022
 37267                                  	;times 4 db 0
 37268                                  
 37269                                  ;----------------------------------------------------------------------------
 37270                                  		; 09/12/2022
 37271                                  		;db 0
 37272                                  
 37273                                  number3div	equ ($-SYSINIT$)
 37274                                  number3mod	equ (number3div % 16)
 37275                                  
 37276                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 37277 000037EC 00<rep 4h>              		times (16-number3mod) db 0
 37278                                  %endif
 37279                                  
 37280                                  ;----------------------------------------------------------------------------
 37281                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 37282                                  ;----------------------------------------------------------------------------
 37283                                  
 37284                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 37285                                  
 37286                                  ;----------------------------------------------------------------------------
 37287                                  ; 20/04/2019 - Retro DOS v4.0
 37288                                  
 37289                                  ; 09/12/2022
 37290                                  ;
 37291                                  ;bss_start:
 37292                                  ;
 37293                                  ;ABSOLUTE bss_start
 37294                                  ;
 37295                                  ;alignb 16
 37296                                  
 37297                                  SI_end:  ; SI_end equ $
 37298                                  
 37299                                  ;----------------------------------------------------------------------------
 37300                                  
 37301                                  ;sysinitseg	ends
 37302                                  
 37303                                  ; ***************************************************************************
 37304                                  
 37305                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 37306                                  
 37307                                  SYSINITSIZE	equ SI_end - SYSINIT$
 37308                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 37309                                  
 37310                                  ;----------------------------------------------------------------------------
 37311                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 37312                                  ;----------------------------------------------------------------------------
 37313                                  
 37314                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 37315                                  ;----------------------------------------------------------------------------
 37316                                  ;----------------------------------------------------------------------------
 37317                                  
 37318                                  ; ----------------------------------------------------------------------------
 37319                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 37320                                  ; ----------------------------------------------------------------------------
 37321                                  ; 18/03/2019 - Retro DOS v4.0 
 37322                                  ; 11/06/2018 - Retro DOS v3.0 
 37323                                  
 37324                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 37325                                  		;; 28/06/2019 ('msdos6.s') 
 37326                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 37327                                  		
 37328                                  		; 27/09/2023 (BugFix)
 37329                                  		; 25/09/2023
 37330                                  		; 29/12/2022
 37331 000037F0 <bin 8E5Ah>             		incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 37332                                  		
 37333                                  		;; 28/12/2022 (BugFix)
 37334                                  		;; 22/12/2022
 37335                                  		;; 21/12/2022 ('msdos5.s')
 37336                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 37337                                  	
 37338                                  ; 28/09/2023	
 37339                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 37340                                  
 37341                                  align 2
 37342                                  
 37343                                  ; 21/12/2022
 37344                                  ;;END_OF_KERNEL:
 37345                                  ;END_OF_KERNEL equ $
 37346                                  
 37347                                  ; 28/09/2023
 37348                                  S3SIZE equ $-$$
 37349                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 37350                                  
 37351                                  ;=============================================================================
 37352                                  ;	END
 37353                                  ;=============================================================================
 37354                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 37355                                  ; ------------------------------
 37356                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
