     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 08/10/2023 - Retro DOS v4.1 (Previous: 29/09/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15 (2.11)
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FC14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2B14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]9C02              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]9C02              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [A512]9C02              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [D014]9C02              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;;mov	ax,offset Skip
  2103                                  		;mov	ax,Skip
  2104                                  		;push	ax
  2105                                  		; 08/10/2023
  2106 000008E6 68[EF08]                		push	Skip
  2107 000008E9 06                      		push	es
  2108 000008EA 57                      		push	di		; API far call address
  2109 000008EB B80100                  		mov	ax, 1		; SetFocus function number
  2110 000008EE CB                      		retf			; do the call
  2111                                  ;-----------------------------------------------------------------------------
  2112                                  
  2113                                  Skip:					
  2114 000008EF 58                      		pop	ax
  2115 000008F0 5B                      		pop	bx
  2116 000008F1 07                      		pop	es
  2117 000008F2 5F                      		pop	di
  2118 000008F3 CB                      		retf
  2119                                  
  2120                                  ;End WIN386 support
  2121                                  
  2122                                  ; ----------------------------------------------------------------------------
  2123                                  
  2124                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2125                                  
  2126                                  ; 09/12/2022
  2127                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2128                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2129                                  ; (followings are in sysinit segment)
  2130                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2131                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2132                                  ;DEVICELIST	equ 273h
  2133                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2134                                  ;MEMORYSIZE	equ 292h	
  2135                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2136                                  ;DEFAULTDRIVE	equ 296h
  2137                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2138                                  ;;currentdoslocation equ 271h
  2139                                  ;CURRENTDOSLOCATION equ 271h
  2140                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2141                                  ;SYSINITSTART	equ 267h
  2142                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2143                                  ; 18/10/2022
  2144                                  ;toomanydrivesflag equ 3FFh 
  2145                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2146                                  
  2147                                  ; ----------------------------------------------------------------------------
  2148                                  
  2149 000008F4 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2150                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2151                                  					; (procedure in	SYSINIT	segment)
  2152                                  ; 17/10/2022
  2153 000008F6 [1C0A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2154 000008F8 3904                    		dw SYSINITSEG	
  2155                                  
  2156                                  ;SR;
  2157                                  ; A communication block has been setup between the DOS and the BIOS. All
  2158                                  ;the data starting from SysinitPresent will be part of the data block. 
  2159                                  ;Right now, this is the only data being communicated. It can be expanded 
  2160                                  ;later to add more stuff
  2161                                  
  2162 000008FA 00                      SysinitPresent:	db 0			
  2163 000008FB 0000                    endfloppy:	db 0, 0
  2164                                  
  2165                                  ; ----------------------------------------------------------------------------			
  2166                                  
  2167                                  ; Bios_Data ends
  2168                                  	
  2169                                  ; Possibly disposable BIOS data
  2170                                  ; This data follows the	regular	BIOS data,
  2171                                  ; and is part of the same group.
  2172                                  
  2173 000008FD 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2173 00000906 202000             
  2174                                  					; null volume id
  2175 00000909 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2175 00000912 202000             
  2176                                  					; vid scratch buffer
  2177 00000915 80                      harddrv:	db 80h			
  2178                                  
  2179                                  end96tpi:
  2180                                  
  2181                                  ;;*********************************************************************
  2182                                  ;;memory allocation for bdss
  2183                                  ;;*********************************************************************
  2184                                  ;
  2185                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2186                                  ;
  2187                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2188                                  ;
  2189                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2190                                  
  2191 00000916 FFFF                    bdss:		dw 0FFFFh		
  2192 00000918 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2192 00000921 0210000000F8       
  2193 00000927 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2193 00000930 000000000000000003 
  2194 00000939 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2194 00000942 00000000000000     
  2195 00000949 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2195 00000952 000000000000000000 
  2196 0000095B 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2196 00000964 4E414D45           
  2197 00000968 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2197 00000971 46415431           
  2198 00000975 3220202000              		db 32h,	20h, 20h, 20h, 0
  2199 0000097A FFFF                    		dw 0FFFFh
  2200 0000097C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2200 00000985 0210000000F8       
  2201 0000098B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2201 00000994 000000000000000003 
  2202 0000099D 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2202 000009A6 00000000000000     
  2203 000009AD 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2203 000009B6 000000000000000000 
  2204 000009BF 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2204 000009C8 4E414D45           
  2205 000009CC 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2205 000009D5 46415431           
  2206 000009D9 3220202000              		db 32h,	20h, 20h, 20h, 0
  2207 000009DE FFFF                    		dw 0FFFFh
  2208 000009E0 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2208 000009E9 0210000000F8       
  2209 000009EF 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2209 000009F8 000000000000000003 
  2210 00000A01 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2210 00000A0A 00000000000000     
  2211 00000A11 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2211 00000A1A 000000000000000000 
  2212 00000A23 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2212 00000A2C 4E414D45           
  2213 00000A30 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2213 00000A39 46415431           
  2214 00000A3D 3220202000              		db 32h,	20h, 20h, 20h, 0
  2215 00000A42 FFFF                    		dw 0FFFFh
  2216 00000A44 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2216 00000A4D 0210000000F8       
  2217 00000A53 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2217 00000A5C 000000000000000003 
  2218 00000A65 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2218 00000A6E 00000000000000     
  2219 00000A75 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2219 00000A7E 000000000000000000 
  2220 00000A87 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2220 00000A90 4E414D45           
  2221 00000A94 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2221 00000A9D 46415431           
  2222 00000AA1 3220202000              		db 32h,	20h, 20h, 20h, 0
  2223 00000AA6 FFFF                    		dw 0FFFFh
  2224 00000AA8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2224 00000AB1 0210000000F8       
  2225 00000AB7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2225 00000AC0 000000000000000003 
  2226 00000AC9 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2226 00000AD2 00000000000000     
  2227 00000AD9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2227 00000AE2 000000000000000000 
  2228 00000AEB 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2228 00000AF4 4E414D45           
  2229 00000AF8 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2229 00000B01 46415431           
  2230 00000B05 3220202000              		db 32h,	20h, 20h, 20h, 0
  2231 00000B0A FFFF                    		dw 0FFFFh
  2232 00000B0C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2232 00000B15 0210000000F8       
  2233 00000B1B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2233 00000B24 000000000000000003 
  2234 00000B2D 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2234 00000B36 00000000000000     
  2235 00000B3D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2235 00000B46 000000000000000000 
  2236 00000B4F 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2236 00000B58 4E414D45           
  2237 00000B5C 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2237 00000B65 46415431           
  2238 00000B69 3220202000              		db 32h,	20h, 20h, 20h, 0
  2239 00000B6E FFFF                    		dw 0FFFFh
  2240 00000B70 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2240 00000B79 0210000000F8       
  2241 00000B7F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2241 00000B88 000000000000000003 
  2242 00000B91 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2242 00000B9A 00000000000000     
  2243 00000BA1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2243 00000BAA 000000000000000000 
  2244 00000BB3 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2244 00000BBC 4E414D45           
  2245 00000BC0 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2245 00000BC9 46415431           
  2246 00000BCD 3220202000              		db 32h,	20h, 20h, 20h, 0
  2247 00000BD2 FFFF                    		dw 0FFFFh
  2248 00000BD4 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2248 00000BDD 0210000000F8       
  2249 00000BE3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2249 00000BEC 000000000000000003 
  2250 00000BF5 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2250 00000BFE 00000000000000     
  2251 00000C05 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2251 00000C0E 000000000000000000 
  2252 00000C17 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2252 00000C20 4E414D45           
  2253 00000C24 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2253 00000C2D 46415431           
  2254 00000C31 3220202000              		db 32h,	20h, 20h, 20h, 0
  2255 00000C36 FFFF                    		dw 0FFFFh
  2256 00000C38 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2256 00000C41 0210000000F8       
  2257 00000C47 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2257 00000C50 000000000000000003 
  2258 00000C59 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2258 00000C62 00000000000000     
  2259 00000C69 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2259 00000C72 000000000000000000 
  2260 00000C7B 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2260 00000C84 4E414D45           
  2261 00000C88 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2261 00000C91 46415431           
  2262 00000C95 3220202000              		db 32h,	20h, 20h, 20h, 0
  2263 00000C9A FFFF                    		dw 0FFFFh
  2264 00000C9C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2264 00000CA5 0210000000F8       
  2265 00000CAB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2265 00000CB4 000000000000000003 
  2266 00000CBD 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2266 00000CC6 00000000000000     
  2267 00000CCD 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2267 00000CD6 000000000000000000 
  2268 00000CDF 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2268 00000CE8 4E414D45           
  2269 00000CEC 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2269 00000CF5 46415431           
  2270 00000CF9 3220202000              		db 32h,	20h, 20h, 20h, 0
  2271 00000CFE FFFF                    		dw 0FFFFh
  2272 00000D00 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2272 00000D09 0210000000F8       
  2273 00000D0F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2273 00000D18 000000000000000003 
  2274 00000D21 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2274 00000D2A 00000000000000     
  2275 00000D31 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2275 00000D3A 000000000000000000 
  2276 00000D43 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2276 00000D4C 4E414D45           
  2277 00000D50 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2277 00000D59 46415431           
  2278 00000D5D 3220202000              		db 32h,	20h, 20h, 20h, 0
  2279 00000D62 FFFF                    		dw 0FFFFh
  2280 00000D64 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2280 00000D6D 0210000000F8       
  2281 00000D73 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2281 00000D7C 000000000000000003 
  2282 00000D85 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2282 00000D8E 00000000000000     
  2283 00000D95 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2283 00000D9E 000000000000000000 
  2284 00000DA7 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2284 00000DB0 4E414D45           
  2285 00000DB4 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2285 00000DBD 46415431           
  2286 00000DC1 3220202000              		db 32h,	20h, 20h, 20h, 0
  2287 00000DC6 FFFF                    		dw 0FFFFh
  2288 00000DC8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2288 00000DD1 0210000000F8       
  2289 00000DD7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2289 00000DE0 000000000000000003 
  2290 00000DE9 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2290 00000DF2 00000000000000     
  2291 00000DF9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2291 00000E02 000000000000000000 
  2292 00000E0B 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2292 00000E14 4E414D45           
  2293 00000E18 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2293 00000E21 46415431           
  2294 00000E25 3220202000              		db 32h,	20h, 20h, 20h, 0
  2295 00000E2A FFFF                    		dw 0FFFFh
  2296 00000E2C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2296 00000E35 0210000000F8       
  2297 00000E3B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2297 00000E44 000000000000000003 
  2298 00000E4D 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2298 00000E56 00000000000000     
  2299 00000E5D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2299 00000E66 000000000000000000 
  2300 00000E6F 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2300 00000E78 4E414D45           
  2301 00000E7C 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2301 00000E85 46415431           
  2302 00000E89 3220202000              		db 32h,	20h, 20h, 20h, 0
  2303 00000E8E FFFF                    		dw 0FFFFh
  2304 00000E90 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2304 00000E99 0210000000F8       
  2305 00000E9F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2305 00000EA8 000000000000000003 
  2306 00000EB1 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2306 00000EBA 00000000000000     
  2307 00000EC1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2307 00000ECA 000000000000000000 
  2308 00000ED3 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2308 00000EDC 4E414D45           
  2309 00000EE0 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2309 00000EE9 46415431           
  2310 00000EED 3220202000              		db 32h,	20h, 20h, 20h, 0
  2311 00000EF2 FFFF                    		dw 0FFFFh
  2312 00000EF4 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2312 00000EFD 0210000000F8       
  2313 00000F03 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2313 00000F0C 000000000000000003 
  2314 00000F15 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2314 00000F1E 00000000000000     
  2315 00000F25 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2315 00000F2E 000000000000000000 
  2316 00000F37 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2316 00000F40 4E414D45           
  2317 00000F44 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2317 00000F4D 46415431           
  2318 00000F51 3220202000              		db 32h,	20h, 20h, 20h, 0
  2319 00000F56 FFFF                    		dw 0FFFFh
  2320 00000F58 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2320 00000F61 0210000000F8       
  2321 00000F67 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2321 00000F70 000000000000000003 
  2322 00000F79 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2322 00000F82 00000000000000     
  2323 00000F89 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2323 00000F92 000000000000000000 
  2324 00000F9B 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2324 00000FA4 4E414D45           
  2325 00000FA8 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2325 00000FB1 46415431           
  2326 00000FB5 3220202000              		db 32h,	20h, 20h, 20h, 0
  2327 00000FBA FFFF                    		dw 0FFFFh
  2328 00000FBC 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2328 00000FC5 0210000000F8       
  2329 00000FCB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2329 00000FD4 000000000000000003 
  2330 00000FDD 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2330 00000FE6 00000000000000     
  2331 00000FED 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2331 00000FF6 000000000000000000 
  2332 00000FFF 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2332 00001008 4E414D45           
  2333 0000100C 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2333 00001015 46415431           
  2334 00001019 3220202000              		db 32h,	20h, 20h, 20h, 0
  2335 0000101E FFFF                    		dw 0FFFFh
  2336 00001020 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2336 00001029 0210000000F8       
  2337 0000102F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2337 00001038 000000000000000003 
  2338 00001041 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2338 0000104A 00000000000000     
  2339 00001051 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2339 0000105A 000000000000000000 
  2340 00001063 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2340 0000106C 4E414D45           
  2341 00001070 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2341 00001079 46415431           
  2342 0000107D 3220202000              		db 32h,	20h, 20h, 20h, 0
  2343 00001082 FFFF                    		dw 0FFFFh
  2344 00001084 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2344 0000108D 0210000000F8       
  2345 00001093 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2345 0000109C 000000000000000003 
  2346 000010A5 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2346 000010AE 00000000000000     
  2347 000010B5 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2347 000010BE 000000000000000000 
  2348 000010C7 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2348 000010D0 4E414D45           
  2349 000010D4 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2349 000010DD 46415431           
  2350 000010E1 3220202000              		db 32h,	20h, 20h, 20h, 0
  2351 000010E6 FFFF                    		dw 0FFFFh
  2352 000010E8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2352 000010F1 0210000000F8       
  2353 000010F7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2353 00001100 000000000000000003 
  2354 00001109 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2354 00001112 00000000000000     
  2355 00001119 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2355 00001122 000000000000000000 
  2356 0000112B 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2356 00001134 4E414D45           
  2357 00001138 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2357 00001141 46415431           
  2358 00001145 3220202000              		db 32h,	20h, 20h, 20h, 0
  2359 0000114A FFFF                    		dw 0FFFFh
  2360 0000114C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2360 00001155 0210000000F8       
  2361 0000115B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2361 00001164 000000000000000003 
  2362 0000116D 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2362 00001176 00000000000000     
  2363 0000117D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2363 00001186 000000000000000000 
  2364 0000118F 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2364 00001198 4E414D45           
  2365 0000119C 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2365 000011A5 46415431           
  2366 000011A9 3220202000              		db 32h,	20h, 20h, 20h, 0
  2367 000011AE FFFF                    		dw 0FFFFh
  2368 000011B0 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2368 000011B9 0210000000F8       
  2369 000011BF 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2369 000011C8 000000000000000003 
  2370 000011D1 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2370 000011DA 00000000000000     
  2371 000011E1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2371 000011EA 000000000000000000 
  2372 000011F3 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2372 000011FC 4E414D45           
  2373 00001200 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2373 00001209 46415431           
  2374 0000120D 3220202000              		db 32h,	20h, 20h, 20h, 0
  2375 00001212 FFFF                    		dw 0FFFFh
  2376 00001214 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2376 0000121D 0210000000F8       
  2377 00001223 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2377 0000122C 000000000000000003 
  2378 00001235 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2378 0000123E 00000000000000     
  2379 00001245 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2379 0000124E 000000000000000000 
  2380 00001257 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2380 00001260 4E414D45           
  2381 00001264 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2381 0000126D 46415431           
  2382 00001271 3220202000              		db 32h,	20h, 20h, 20h, 0
  2383 00001276 FFFF                    		dw 0FFFFh
  2384 00001278 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2384 00001281 0210000000F8       
  2385 00001287 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2385 00001290 000000000000000003 
  2386 00001299 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2386 000012A2 00000000000000     
  2387 000012A9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2387 000012B2 000000000000000000 
  2388 000012BB 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2388 000012C4 4E414D45           
  2389 000012C8 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2389 000012D1 46415431           
  2390 000012D5 3220202000              		db 32h,	20h, 20h, 20h, 0
  2391 000012DA 00                      		db 0
  2392                                  
  2393                                  ;---------------------------------------------------------------------------
  2394                                  ; Possibly disposable data, goes at end of data group
  2395                                  ;***************************************************************************
  2396                                  
  2397                                  ; Possibly disposable data, goes at end of data group
  2398                                  
  2399                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2400                                  ;
  2401                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2402                                  ;		(dl) = drive number (80h or 81h).
  2403                                  ;		(dh) = head number.
  2404                                  ;		(ch) = cylinder number.
  2405                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2406                                  ;		(al) = number of sectors.
  2407                                  ;		(es:bx) = address of read buffer.
  2408                                  ;		for more on register contents see rom bios listing.
  2409                                  ;		stack set up for return by an iret.
  2410                                  ;
  2411                                  ;	exit:	(ah) = status of current operation.
  2412                                  ;		(cy) = 1 if failed, 0 if successful.
  2413                                  ;		for other register contents see rom bios listing.
  2414                                  ;
  2415                                  ;	uses:	
  2416                                  ;
  2417                                  ;
  2418                                  ;	warning: uses old13 vector for non-read calls.
  2419                                  ;		does direct calls to the at rom.
  2420                                  ;		does segment arithmatic.
  2421                                  ;
  2422                                  ;	effects: performs disk i/o operation.
  2423                                  
  2424                                  ; 16/10/2022
  2425                                  ; 28/05/2019
  2426                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2427                                  
  2428                                  ;* offsets into cmd_block for registers
  2429                                  
  2430                                  pre_comp equ 0	;write pre-compensation
  2431                                  sec_cnt	 equ 1	;sector count
  2432                                  sec_num	 equ 2	;sector number
  2433                                  cyl_low	 equ 3	;cylinder number, low part
  2434                                  cyl_high equ 4	;cylinder number, high part
  2435                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2436                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2437                                  cmd_reg  equ 6	;command register
  2438                                  
  2439                                  ; 01/10/2022
  2440                                  disk_status1	equ 74h
  2441                                  hf_num		equ 75h
  2442                                  control_byte	equ 76h
  2443                                  
  2444                                  ibm_disk_io:				
  2445 000012DB 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2446 000012DE 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2447 000012E0 80FC02                  		cmp	ah, 2
  2448 000012E3 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2449 000012E5 80FC0A                  		cmp	ah, 0Ah
  2450 000012E8 7405                    		jz	short atd2	; and call 0Ah (read long).
  2451                                  atd1:
  2452 000012EA 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2453                                  		;jmp	cs:Old13	; use rom int 13h handler
  2454                                  ;-----------------------------------------------------------------------------
  2455                                  
  2456                                  atd2:					
  2457 000012EF 53                      		push	bx
  2458 000012F0 51                      		push	cx
  2459 000012F1 52                      		push	dx
  2460 000012F2 57                      		push	di
  2461 000012F3 1E                      		push	ds
  2462 000012F4 06                      		push	es
  2463 000012F5 50                      		push	ax
  2464 000012F6 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2465                                  					; establish bios segment addressing
  2466 000012F9 8ED8                    		mov	ds, ax
  2467                                  		; 16/10/2022
  2468 000012FB C606740000              		mov	byte [disk_status1], 0
  2469                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2470                                  					; initially no error code.
  2471 00001300 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2472 00001303 3A167500                		cmp	dl, [hf_num]
  2473                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2474 00001307 7207                    		jb	short atd3	; disk number in range
  2475                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2476 00001309 C606740001              		mov	byte [disk_status1], 1
  2477 0000130E EB20                    		jmp	short atd4	; disk number out of range error,
  2478                                  					; return
  2479                                  ; ----------------------------------------------------------------------------
  2480                                  
  2481                                  atd3:					
  2482 00001310 53                      		push	bx
  2483 00001311 8CC0                    		mov	ax, es
  2484 00001313 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2485 00001316 01D8                    		add	ax, bx
  2486 00001318 8EC0                    		mov	es, ax
  2487 0000131A 5B                      		pop	bx
  2488 0000131B 83E30F                  		and	bx, 0Fh
  2489 0000131E 0E                      		push	cs
  2490 0000131F E8DF00                  		call	check_dma
  2491 00001322 720C                    		jb	short atd4	; abort if dma across segment boundary
  2492 00001324 58                      		pop	ax
  2493 00001325 50                      		push	ax
  2494 00001326 E81A00                  		call	setcmd		; set up command block for disk op
  2495 00001329 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2496 0000132C EE                      		out	dx, al		; write out command modifier
  2497 0000132D E86B00                  		call	docmd		; carry out command
  2498                                  ; ----------------------------------------------------------------------------
  2499                                  
  2500                                  atd4:	
  2501                                  
  2502                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2503                                  ;	      and save a couple bytes while were at it.
  2504                                  				
  2505 00001330 58                      		pop	ax
  2506                                  		;mov	ah, ds:74h	; [disk_status1]
  2507 00001331 8A267400                		mov	ah, [disk_status1]
  2508 00001335 08E4                    		or	ah, ah
  2509 00001337 7401                    		jz	short atd5
  2510 00001339 F9                      		stc
  2511                                  atd5:					
  2512 0000133A 07                      		pop	es
  2513 0000133B 1F                      		pop	ds
  2514 0000133C 5F                      		pop	di
  2515 0000133D 5A                      		pop	dx
  2516 0000133E 59                      		pop	cx
  2517 0000133F 5B                      		pop	bx
  2518 00001340 CA0200                  		retf	2		; far return, dropping flags
  2519                                  
  2520                                  ; =============== S U B	R O U T	I N E ========================================
  2521                                  
  2522                                  ;***	setcmd - set up cmd_block for the disk operation
  2523                                  ;
  2524                                  ;	entry:	(ds) = bios data segment.
  2525                                  ;		(es:bx) in seg:000x form.
  2526                                  ;		other registers as in int 13h call
  2527                                  ;	
  2528                                  ;	exit:	cmd_block set up for disk read call.
  2529                                  ;		control_byte set up for disk operation.
  2530                                  ;		(al) = control byte modifier
  2531                                  ;
  2532                                  ;	sets the fields of cmd_block using the register contents
  2533                                  ;	and the contents of the disk parameter block for the given drive.
  2534                                  ;
  2535                                  ;	warning: (ax) destroyed.
  2536                                  ;		does direct calls to the at rom.
  2537                                  
  2538                                  setcmd:		; proc near		
  2539                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2540                                  		; 16/10/2022
  2541 00001343 A24300                  		mov	[cmd_block+sec_cnt], al
  2542                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2543 00001346 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2544 0000134B 80FC02                  		cmp	ah, 2
  2545 0000134E 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2546 00001350 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2547                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2548                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2549                                  setc1:					
  2550 00001355 88C8                    		mov	al, cl
  2551 00001357 243F                    		and	al, 3Fh		; mask sector number
  2552                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2553                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2554 00001359 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2555 0000135C 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2556 00001360 88C8                    		mov	al, cl
  2557 00001362 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2558                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2559 00001365 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2560 00001368 89D0                    		mov	ax, dx
  2561 0000136A C0E004                  		shl	al, 4		; drive	number
  2562 0000136D 80E40F                  		and	ah, 0Fh
  2563 00001370 08E0                    		or	al, ah		; head number
  2564 00001372 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2565                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2566 00001374 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2567 00001377 06                      		push	es
  2568 00001378 53                      		push	bx
  2569 00001379 0E                      		push	cs
  2570 0000137A E85C00                  		call	get_vec
  2571 0000137D 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2572                                  			 		; write pre-comp from disk parameters
  2573 00001381 C1E802                  		shr	ax, 2
  2574                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2575 00001384 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2576                                  					; only use low part
  2577 00001387 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2578                                  					; control byte modifier
  2579 0000138B 5B                      		pop	bx
  2580 0000138C 07                      		pop	es
  2581                                  		;mov	ah, ds:76h	; [control_byte]
  2582 0000138D 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2583 00001391 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2584 00001394 08C4                    		or	ah, al
  2585                                  		;mov	ds:76h,	ah
  2586 00001396 88267600                		mov	[control_byte], ah ; mov [76h],al
  2587 0000139A C3                      		retn
  2588                                  
  2589                                  ; =============== S U B	R O U T	I N E ========================================
  2590                                  
  2591                                  ;***	docmd - carry out read operation to at hard disk
  2592                                  ;
  2593                                  ;	entry:	(es:bx) = address for read in data.
  2594                                  ;		cmd_block set up for disk read.
  2595                                  ;
  2596                                  ;	exit:	buffer at (es:bx) contains data read.
  2597                                  ;		disk_status1 set to error code (0 if success).
  2598                                  ;
  2599                                  ;	
  2600                                  ;
  2601                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2602                                  ;		no check is made for dma boundary overrun.
  2603                                  ;
  2604                                  ;	effects: programs disk controller.
  2605                                  ;		performs disk input.
  2606                                  
  2607                                  docmd:		; proc near		
  2608 0000139B 89DF                    		mov	di, bx
  2609 0000139D 0E                      		push	cs
  2610 0000139E E84000                  		call	command
  2611 000013A1 7535                    		jnz	short doc3
  2612                                  doc1:					
  2613 000013A3 0E                      		push	cs
  2614 000013A4 E84200                  		call	waitt		; wait for controller to complete read
  2615 000013A7 752F                    		jnz	short doc3
  2616 000013A9 B90001                  		mov	cx, 256		; 256 words per sector
  2617 000013AC BAF001                  		mov	dx, 1F0h	; hf_port
  2618 000013AF FC                      		cld			; string op goes up
  2619 000013B0 FA                      		cli			; disable interrupts
  2620                                  					; (bug was forgetting this)
  2621                                  
  2622                                  ;	M062 -- some of these old machines have intermittent failures
  2623                                  ;		when the read is done at full speed. Instead of using
  2624                                  ;		a string rep instruction, we'll use a loop. There is
  2625                                  ;		a slight performance hit, but it only affects these
  2626                                  ;		very old machines with an exact date code match, and
  2627                                  ;		it makes said machines more reliable
  2628                                  ;
  2629                                  ;M062	repz	insw		;read in sector
  2630                                  
  2631                                  rsct_loop:				
  2632 000013B1 6D                      		insw
  2633 000013B2 E2FD                    		loop	rsct_loop
  2634 000013B4 FB                      		sti
  2635                                  		; 16/10/2022
  2636 000013B5 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2637                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2638                                  					; (ds =	40h)
  2639 000013BA 7410                    		jz	short doc2	; no ecc bytes to read.
  2640 000013BC 0E                      		push	cs
  2641 000013BD E83100                  		call	wait_drq	; wait for controller to complete read
  2642 000013C0 7216                    		jb	short doc3
  2643 000013C2 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2644 000013C5 BAF001                  		mov	dx, 1F0h	; hf_port
  2645 000013C8 FA                      		cli
  2646 000013C9 F36C                    		rep insb		; read in ecc
  2647 000013CB FB                      		sti
  2648                                  doc2:					
  2649 000013CC 0E                      		push	cs
  2650 000013CD E82900                  		call	check_status
  2651 000013D0 7506                    		jnz	short doc3	; operation failed
  2652                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2653 000013D2 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2654 000013D6 75CB                    		jnz	short doc1	; loop while more sectors to read
  2655                                  doc3:					
  2656 000013D8 C3                      		retn
  2657                                  
  2658                                  ; =============== S U B	R O U T	I N E ========================================
  2659                                  
  2660                                  ;***	define where the rom routines are actually located
  2661                                  ;	   in the buggy old AT BIOS that we might need to
  2662                                  ;	   install a special level of int13 handler for
  2663                                  
  2664                                  ; 16/10/2022
  2665                                  
  2666                                  romsegment 	equ 0F000h  ; segment
  2667                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2668                                  romwait		equ 2E7Fh   ; offset in romsegment
  2669                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2670                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2671                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2672                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2673                                  romfret		equ 0FF65h  ; far return in rom	
  2674                                  
  2675                                  ;***	get_vec - get pointer to hard disk parameters.
  2676                                  ;
  2677                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2678                                  ;
  2679                                  ;	exit:	(es:bx) = address of disk parameters table.
  2680                                  ;
  2681                                  ;	uses:	ax for segment computation.
  2682                                  ;
  2683                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2684                                  ;	or 70h (disk 1).
  2685                                  ;	
  2686                                  ;	warning: (ax) destroyed.
  2687                                  ;		this does a direct call to the at rom.
  2688                                  
  2689                                  get_vec:	; proc near		
  2690                                  		;push	0FF65h		; romfret ; far	return in rom
  2691                                  		;jmp	far ptr	0F000h:2F8Eh
  2692                                  		; 16/10/2022
  2693 000013D9 6865FF                  		push	romfret		; far return in rom
  2694 000013DC EA8E2F00F0              		jmp	romsegment:romget_vec
  2695                                  
  2696                                  ; =============== S U B	R O U T	I N E ========================================
  2697                                  
  2698                                  ;***	command - send contents of cmd_block to disk controller.
  2699                                  ;
  2700                                  ;	entry:	control_byte 
  2701                                  ;		cmd_block - set up with values for hard disk controller.
  2702                                  ;
  2703                                  ;	exit:	disk_status1 = error code.
  2704                                  ;		nz if error, zr for no error.
  2705                                  ;
  2706                                  ;
  2707                                  ;	warning: (ax), (cx), (dx) destroyed.
  2708                                  ;		does a direct call to the at rom.
  2709                                  ;
  2710                                  ;	effects: programs disk controller.
  2711                                  
  2712                                  command:	; proc near		
  2713                                  		;push	0FF65h		; romfret ; far	return in rom
  2714                                  		;jmp	far ptr	0F000h:2E1Eh
  2715                                  		; 16/10/2022
  2716 000013E1 6865FF                  		push	romfret		; far return in rom
  2717 000013E4 EA1E2E00F0              		jmp	romsegment:romcommand
  2718                                  
  2719                                  ; =============== S U B	R O U T	I N E ========================================
  2720                                  
  2721                                  ;***	waitt - wait for disk interrupt
  2722                                  ;
  2723                                  ;	entry:	nothing.
  2724                                  ;
  2725                                  ;	exit:	disk_status1 = error code.
  2726                                  ;		nz if error, zr if no error.
  2727                                  ;
  2728                                  ;
  2729                                  ;	warning: (ax), (bl), (cx) destroyed.
  2730                                  ;		does a direct call to the at rom.
  2731                                  ;		
  2732                                  ;	effects: calls int 15h, function 9000h.
  2733                                  
  2734                                  waitt:		; proc near		
  2735                                  		;push	0FF65h		; romfret ; far	return in rom
  2736                                  		;jmp	far ptr	0F000h:2E7Fh
  2737                                  		; 16/10/2022
  2738 000013E9 6865FF                  		push	romfret		; far return in rom
  2739 000013EC EA7F2E00F0              		jmp	romsegment:romwait
  2740                                  
  2741                                  ; =============== S U B	R O U T	I N E ========================================
  2742                                  
  2743                                  ;***	wait_drq - wait for data request.
  2744                                  ;
  2745                                  ;	entry:	nothing.
  2746                                  ;
  2747                                  ;	exit:	disk_status1 = error code.
  2748                                  ;		cy if error, nc if no error.
  2749                                  ;
  2750                                  ;	warning: (al), (cx), (dx) destroyed.
  2751                                  ;		does a direct call to the at rom.
  2752                                  
  2753                                  wait_drq:	; proc near		
  2754                                  		;push	0FF65h		; romfret ; far	return in rom
  2755                                  		;jmp	far ptr	0F000h:2EE2h
  2756                                  		; 16/10/2022
  2757 000013F1 6865FF                  		push	romfret		; far return in rom
  2758 000013F4 EAE22E00F0              		jmp	romsegment:romwait_drq
  2759                                  
  2760                                  ; =============== S U B	R O U T	I N E ========================================
  2761                                  
  2762                                  ;***	check_status - check hard disk status.
  2763                                  ;
  2764                                  ;	entry:	nothing.
  2765                                  ;
  2766                                  ;	exit:	disk_status1 = error code.
  2767                                  ;		nz if error, zr if no error.
  2768                                  ;
  2769                                  ;	warning: (ax), (cx), (dx) destroyed.
  2770                                  ;		does a direct call to the at rom.
  2771                                  
  2772                                  check_status:	; proc near		
  2773                                  		;push	0FF65h		; romfret ; far	return in rom
  2774                                  		;jmp	far ptr	0F000h:2EF8h
  2775                                  		; 16/10/2022
  2776 000013F9 6865FF                  		push	romfret		; far return in rom
  2777 000013FC EAF82E00F0              		jmp	romsegment:romcheck_status
  2778                                  
  2779                                  ; =============== S U B	R O U T	I N E ========================================
  2780                                  
  2781                                  ;***	check_dma - check for dma overrun 64k segment.
  2782                                  ;
  2783                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2784                                  ;		cmd_block set up for operation.
  2785                                  ;
  2786                                  ;	exit:	disk_status1 - error code.
  2787                                  ;		cy if error, nc if no error.
  2788                                  ;
  2789                                  ;	warning: does a direct call to the at rom.
  2790                                  
  2791                                  check_dma:	; proc near		
  2792                                  		;push	0FF65h		; romfret ; far	return in rom
  2793                                  		;jmp	far ptr	0F000h:2F69h
  2794                                  		; 16/10/2022
  2795 00001401 6865FF                  		push	romfret		; far return in rom
  2796 00001404 EA692F00F0              		jmp	romsegment:romcheck_dma
  2797                                  
  2798                                  ;-----------------------------------------------------------------------------
  2799                                  
  2800                                  endatrom:
  2801                                  
  2802                                  ; ----------------------------------------------------------------------------
  2803                                  
  2804                                  ;; M015 -- begin changes
  2805                                  ;;
  2806                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2807                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2808                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2809                                  ;; If our init code detects this error, it will install this
  2810                                  ;; special Int13 hook through the same mechanism that was set
  2811                                  ;; up for the IBM patch above. This code is also dynamically
  2812                                  ;; relocated by MSINIT.
  2813                                  
  2814                                  compaq_disk_io:
  2815 00001409 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2816                                  					;
  2817                                  					; the following	label defines the end of the at	rom patch.
  2818                                  					; this is used at configuration	time.
  2819                                  					;
  2820                                  					; warning!!!
  2821                                  					; this code will be dynamically	relocated by msinit
  2822 0000140C 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2823                                  no_hookit:				
  2824                                  		;jmp	cs:Old13
  2825                                  		; 16/10/2022
  2826 0000140E 2EFF2E[0601]            		jmp	far [cs:Old13]
  2827                                  
  2828                                  ; ----------------------------------------------------------------------------
  2829                                  
  2830                                  mebbe_hookit:				
  2831 00001413 80FA80                  		cmp	dl, 80h
  2832 00001416 72F6                    		jb	short no_hookit
  2833 00001418 1E                      		push	ds
  2834 00001419 50                      		push	ax
  2835 0000141A B84000                  		mov	ax, 40h
  2836 0000141D 8ED8                    		mov	ds, ax
  2837 0000141F 58                      		pop	ax
  2838 00001420 9C                      		pushf
  2839                                  		;call	cs:Old13
  2840                                  		; 16/10/2022
  2841 00001421 2EFF1E[0601]            		call	far [cs:Old13]
  2842 00001426 1F                      		pop	ds
  2843 00001427 CA0200                  		retf	2
  2844                                  
  2845                                  ; ----------------------------------------------------------------------------
  2846                                  
  2847 0000142A 00                      end_compaq_i13hook: db 0			
  2848                                  
  2849                                  ; =============== S U B	R O U T	I N E ========================================
  2850                                  
  2851                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2852                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2853                                  
  2854                                  daycnt_to_day:	; proc far
  2855                                  
  2856                                  ; entry: [daycnt] = number of days since 1-1-80
  2857                                  ;
  2858                                  ; return: ch - century in bcd
  2859                                  ;	  cl - year in bcd
  2860                                  ;	  dh - month in bcd
  2861                                  ;	  dl - day in bcd
  2862                                  
  2863                                  		; 16/10/2022		
  2864 0000142B 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2865 00001430 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2866                                  					; # days from 1-1-1980 to 1-1-2000
  2867 00001437 730E                    		jnb	short century20
  2868 00001439 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2869 0000143F 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2870 00001445 EB13                    		jmp	short years
  2871                                  ; ----------------------------------------------------------------------------
  2872                                  		
  2873                                  century20:				
  2874 00001447 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2875 0000144D 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2876 00001453 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2877                                  					; adjust daycnt
  2878                                  years:					
  2879 0000145A 31D2                    		xor	dx, dx
  2880 0000145C 2EA1[F004]              		mov	ax, [cs:daycnt]
  2881 00001460 BBB505                  		mov	bx, 1461	; (366+365*3)
  2882                                  					; # of days in a Leap year block
  2883 00001463 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2884 00001465 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2885 0000146A B304                    		mov	bl, 4
  2886 0000146C F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2887 0000146E 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2888 00001473 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2889 00001478 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2890 0000147F 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2891 00001481 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2892 00001486 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2893 0000148D B90300                  		mov	cx, 3		; And next three years are normal
  2894                                  regularyear:				
  2895 00001490 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2896 00001497 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2897 00001499 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2898 0000149E 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2899 000014A5 E2E9                    		loop	regularyear	; }
  2900                                  					;
  2901                                  					; should never fall through loop
  2902                                  leapyear:				
  2903 000014A7 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2904                                  					; change month table.
  2905                                  yeardone:				
  2906 000014AD 31DB                    		xor	bx, bx
  2907 000014AF 31D2                    		xor	dx, dx
  2908 000014B1 2EA1[F004]              		mov	ax, [cs:daycnt]
  2909                                  		;mov	si, offset month_tab
  2910 000014B5 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2911 000014B8 B90C00                  		mov	cx, 12
  2912                                  months:					
  2913 000014BB FEC3                    		inc	bl
  2914                                  
  2915                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2916                                  		;mov	dl, [cs:si]
  2917                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2918                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2919                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2920                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2921                                  		
  2922 000014BD 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2923 000014BF 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2924                                  					; dh=0
  2925 000014C1 7605                    		jbe	short month_done
  2926 000014C3 46                      		inc	si		; next month
  2927 000014C4 29D0                    		sub	ax, dx		; adjust daycnt
  2928 000014C6 E2F3                    		loop	months		;
  2929                                  					; should never fall through loop
  2930                                  month_done:				
  2931 000014C8 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2932                                  					; restore month table value
  2933 000014CE 88DA                    		mov	dl, bl
  2934 000014D0 2E8A36[F504]            		mov	dh, [cs:base_year]
  2935 000014D5 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2936 000014DA 2EFF1E[0205]            		call	far [cs:bintobcd]
  2937                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2938                                  					; dl = bcd day,	al = month
  2939 000014DF 86D0                    		xchg	dl, al
  2940 000014E1 2EFF1E[0205]            		call	far [cs:bintobcd]
  2941                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2942 000014E6 86F0                    		xchg	dh, al
  2943 000014E8 2EFF1E[0205]            		call	far [cs:bintobcd]
  2944                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2945 000014ED 86C8                    		xchg	cl, al
  2946 000014EF 2EFF1E[0205]            		call	far [cs:bintobcd]
  2947                                  		;call	cs:bintobcd	; ch = bcd century
  2948 000014F4 88C5                    		mov	ch, al
  2949 000014F6 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2950 000014FB CB                      		retf
  2951                                  
  2952                                  enddaycnttoday:	
  2953                                  
  2954                                  ; =============== S U B	R O U T	I N E ========================================
  2955                                  
  2956                                  bin_to_bcd:	; proc far		; real time clock support
  2957                                  
  2958                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2959                                  ;into a bcd value in al. ah destroyed.	
  2960                                  		
  2961 000014FC 51                      		push	cx		
  2962 000014FD D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2963 000014FF B104                    		mov	cl, 4
  2964 00001501 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2965 00001503 08E0                    		or	al, ah
  2966 00001505 59                      		pop	cx
  2967 00001506 CB                      		retf
  2968                                  
  2969                                  ; ----------------------------------------------------------------------------
  2970                                  
  2971                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2972                                  ; resume facility. the system clock needs to be reset after resume.
  2973                                  
  2974                                  ; the following routine is executed at resume time when the system
  2975                                  ; powered on after suspension. it reads the real time clock and
  2976                                  ; resets the system time and date, and then irets.
  2977                                  
  2978                                  ; warning!!! this code will be dynamically relocated by msinit.
  2979                                  
  2980                                  int6c:					
  2981 00001507 0E                      		push	cs
  2982 00001508 1F                      		pop	ds
  2983 00001509 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2984 0000150D 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2985 00001511 9D                      		popf
  2986 00001512 E81300                  		call	read_real_date	; get the date from the clock
  2987 00001515 FA                      		cli
  2988 00001516 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2989 0000151A FB                      		sti
  2990 0000151B E8CB00                  		call	read_real_time	; get the time from the	rtc
  2991 0000151E FA                      		cli
  2992 0000151F B401                    		mov	ah, 1
  2993 00001521 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2994                                  					; CX:DX	= clock	count
  2995                                  					; Return: time of day set
  2996 00001523 FB                      		sti
  2997                                  		;jmp	int6c_ret_addr	; long jump
  2998                                  		; 16/10/2022
  2999 00001524 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  3000                                  
  3001                                  ; =============== S U B	R O U T	I N E ========================================
  3002                                  
  3003                                  ;   read_real_date reads real-time clock for date and returns the number
  3004                                  ;   of days elapsed since 1-1-80 in si
  3005                                  
  3006                                  read_real_date:	; proc near		
  3007 00001528 50                      		push	ax
  3008 00001529 51                      		push	cx
  3009 0000152A 52                      		push	dx
  3010 0000152B 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3011 0000152D CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3012                                  					; Return: CX:DX	= clock	count
  3013                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3014                                  					; midnight
  3015                                  					; Otherwise, AL	> 0
  3016 0000152F 5A                      		pop	dx
  3017 00001530 59                      		pop	cx
  3018 00001531 58                      		pop	ax
  3019 00001532 50                      		push	ax
  3020 00001533 53                      		push	bx
  3021 00001534 51                      		push	cx
  3022 00001535 52                      		push	dx
  3023 00001536 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3024                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3025 0000153D B404                    		mov	ah, 4
  3026 0000153F CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3027                                  					; Return: DL = day in BCD
  3028                                  					; DH = month in	BCD
  3029                                  					; CL = year in BCD
  3030                                  					; CH = century (19h or 20h)
  3031 00001541 7303                    		jnb	short read_ok
  3032 00001543 E99300                  		jmp	r_d_ret
  3033                                  ;-----------------------------------------------------------------------------
  3034                                  
  3035                                  read_ok:				
  3036 00001546 882E[BF06]              		mov	[bin_date_time], ch
  3037 0000154A 880E[C006]              		mov	[bin_date_time+1], cl
  3038 0000154E 8836[C106]              		mov	[bin_date_time+2], dh
  3039 00001552 8816[C206]              		mov	[bin_date_time+3], dl
  3040 00001556 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3041 0000155D E84201                  		call	bcd_verify	; verify bcd values in range
  3042 00001560 7277                    		jb	short r_d_ret	;  some	value out of range
  3043 00001562 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3044 00001569 E8E600                  		call	date_verify
  3045 0000156C 726B                    		jb	short r_d_ret
  3046 0000156E 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3047 00001575 E8AA00                  		call	in_bin
  3048 00001578 A0[C006]                		mov	al, [bin_date_time+1]
  3049 0000157B 98                      		cbw
  3050 0000157C 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3051 00001581 7503                    		jnz	short century_19 ; no
  3052 00001583 83C064                  		add	ax, 100		; add in a century
  3053                                  
  3054                                  century_19:				
  3055 00001586 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3056 00001589 B104                    		mov	cl, 4		; leap year every 4
  3057 0000158B F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3058 0000158D 88E3                    		mov	bl, ah		; save odd years
  3059 0000158F 98                      		cbw			; zero ah
  3060 00001590 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3061                                  					; # of days in leap year blocks
  3062 00001593 F7E1                    		mul	cx
  3063 00001595 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3064 00001599 88D8                    		mov	al, bl		; get odd years	count
  3065 0000159B 98                      		cbw
  3066 0000159C 09C0                    		or	ax, ax
  3067 0000159E 740C                    		jz	short leap_year
  3068 000015A0 B96D01                  		mov	cx, 365		; days in year
  3069 000015A3 F7E1                    		mul	cx
  3070 000015A5 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3071 000015AA EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3072                                  					; possibly account for a leap day
  3073                                  ;-----------------------------------------------------------------------------
  3074                                  
  3075                                  leap_year:				
  3076 000015AC 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3077 000015B1 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3078                                  leap_adjustment:			
  3079 000015B3 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3080                                  no_leap_adjustment:			
  3081 000015B8 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3082 000015BC 30ED                    		xor	ch, ch
  3083 000015BE 49                      		dec	cx		; because of offset from day 1,	not day	0
  3084 000015BF 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3085 000015C4 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3086 000015C8 30ED                    		xor	ch, ch
  3087 000015CA 49                      		dec	cx		; january starts at offset 0
  3088 000015CB D1E1                    		shl	cx, 1		; word offset
  3089 000015CD BE[C306]                		mov	si, month_table
  3090 000015D0 01CE                    		add	si, cx
  3091                                  		; 16/10/2022
  3092                                  		; ds must be same with cs here, if so..
  3093                                  		; what for cs: prefixes are used !?)
  3094                                  		; mov	ax, [cs:si]
  3095                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3096 000015D2 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3097                                  					; get #	days in	previous months
  3098 000015D4 2E0106[DB06]            		add	[cs:daycnt2], ax
  3099                                  r_d_ret:				
  3100 000015D9 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3101 000015DE 5A                      		pop	dx
  3102 000015DF 59                      		pop	cx
  3103 000015E0 5B                      		pop	bx
  3104 000015E1 58                      		pop	ax
  3105 000015E2 C3                      		retn
  3106                                  
  3107                                  ;-----------------------------------------------------------------------------
  3108                                  
  3109                                  r_t_retj:				
  3110 000015E3 31C9                    		xor	cx, cx
  3111 000015E5 31D2                    		xor	dx, dx
  3112 000015E7 EB38                    		jmp	short r_t_ret
  3113                                  
  3114                                  ; =============== S U B	R O U T	I N E ========================================
  3115                                  
  3116                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3117                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3118                                  
  3119                                  read_real_time:	; proc near		
  3120 000015E9 B402                    		mov	ah, 2
  3121 000015EB CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3122                                  					; Return: CH = hours in	BCD
  3123                                  					; CL = minutes in BCD
  3124                                  					; DH = seconds in BCD
  3125 000015ED 72F4                    		jb	short r_t_retj
  3126 000015EF 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3127 000015F3 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3128 000015F7 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3129 000015FB C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3130 00001600 E89F00                  		call	bcd_verify
  3131 00001603 72DE                    		jb	short r_t_retj
  3132 00001605 E88500                  		call	time_verify
  3133 00001608 72D9                    		jb	short r_t_retj
  3134 0000160A E81500                  		call	in_bin		; from bcd to bin
  3135 0000160D 8A2E[BF06]              		mov	ch, [bin_date_time]
  3136 00001611 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3137 00001615 8A36[C106]              		mov	dh, [bin_date_time+2]
  3138 00001619 8A16[C206]              		mov	dl, [bin_date_time+3]
  3139                                  		; 16/10/2022
  3140                                  		; 17/09/2022
  3141                                  		; 31/05/2019
  3142 0000161D FF1E[E206]              		call	far [ttticks] 
  3143                                  		;call	dword ptr ttticks ; note: indirect far call
  3144                                  					; cx:dx	= number of ticks
  3145                                  					; (at 18.2 ticks per sec.)
  3146                                  r_t_ret:				
  3147 00001621 C3                      		retn
  3148                                  
  3149                                  ; =============== S U B	R O U T	I N E =======================================
  3150                                  
  3151                                  ;   in_bin converts bin_date_time values from bcd to bin
  3152                                  
  3153                                  in_bin:		; proc near		
  3154 00001622 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3155 00001625 E81F00                  		call	bcd_to_bin
  3156 00001628 A2[BF06]                		mov	[bin_date_time], al
  3157 0000162B A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3158 0000162E E81600                  		call	bcd_to_bin
  3159 00001631 A2[C006]                		mov	[bin_date_time+1], al
  3160 00001634 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3161 00001637 E80D00                  		call	bcd_to_bin
  3162 0000163A A2[C106]                		mov	[bin_date_time+2], al
  3163 0000163D A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3164 00001640 E80400                  		call	bcd_to_bin
  3165 00001643 A2[C206]                		mov	[bin_date_time+3], al
  3166 00001646 C3                      		retn
  3167                                  
  3168                                  ; =============== S U B	R O U T	I N E =======================================
  3169                                  
  3170                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3171                                  ;   a binary representation in al
  3172                                  ;   ah is destroyed
  3173                                  
  3174                                  bcd_to_bin:	; proc near		
  3175 00001647 88C4                    		mov	ah, al
  3176 00001649 240F                    		and	al, 0Fh
  3177 0000164B B104                    		mov	cl, 4
  3178 0000164D D2EC                    		shr	ah, cl
  3179 0000164F D50A                    		aad
  3180 00001651 C3                      		retn
  3181                                  
  3182                                  ; =============== S U B	R O U T	I N E ========================================
  3183                                  
  3184                                  ;   date_verify loosely checks bcd date values to be in range
  3185                                  ;   in bin_date_time
  3186                                  
  3187                                  date_verify:	; proc near		
  3188 00001652 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3189 00001657 7732                    		ja	short date_error
  3190 00001659 740E                    		jz	short century_20 ; jmp in 21th century
  3191 0000165B 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3192                                  		;jb	short date_error
  3193                                  		; 12/12/2022
  3194 00001660 722A                    		jb	short date_err2
  3195 00001662 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3196                                  		;jb	short date_error
  3197                                  		; 12/12/2022
  3198 00001667 7223                    		jb	short date_err2
  3199                                  century_20:				
  3200 00001669 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3201 0000166E 771B                    		ja	short date_error
  3202 00001670 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3203 00001675 7714                    		ja	short date_error
  3204 00001677 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3205                                  		;jbe	short date_error
  3206 0000167C 760D                    		jna	short date_error
  3207 0000167E 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3208 00001683 7706                    		ja	short date_error
  3209                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3210                                  		;;jbe	short date_error
  3211                                  		;jna	short date_error
  3212                                  		; 12/12/2022
  3213                                  		; cf=0
  3214                                  		;clc
  3215                                  		; 12/12/2022
  3216 00001685 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3217 0000168A C3                      		retn
  3218                                  ;-----------------------------------------------------------------------------
  3219                                  
  3220                                  date_error:				
  3221 0000168B F9                      		stc
  3222                                  date_err2:
  3223 0000168C C3                      		retn
  3224                                  
  3225                                  ; =============== S U B	R O U T	I N E ========================================
  3226                                  
  3227                                  ; time_verify very loosely checks bcd date values to be in range
  3228                                  ; in bin_date_time
  3229                                  
  3230                                  time_verify:	; proc near		
  3231 0000168D 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3232 00001692 770C                    		ja	short time_error
  3233 00001694 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3234 00001699 7705                    		ja	short time_error
  3235                                  		; 12/12/2022h
  3236                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3237                                  		;ja	short time_error
  3238                                  		;clc
  3239                                  		;retn
  3240                                  		; 12/12/2022
  3241 0000169B 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3242                                  time_error:
  3243                                  bv_error:	
  3244 000016A0 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3245 000016A1 C3                      		retn
  3246                                  
  3247                                  ; ----------------------------------------------------------------------------
  3248                                  
  3249                                  ;time_error:				
  3250                                  		;stc
  3251                                  		;retn
  3252                                  
  3253                                  ; =============== S U B	R O U T	I N E ========================================
  3254                                  
  3255                                  ;   bcd_verify checks values in bin_date_time to be valid
  3256                                  ;   bcd numerals.  carry set if any nibble out of range
  3257                                  
  3258                                  bcd_verify:	; proc near		
  3259 000016A2 B90400                  		mov	cx, 4		; 4 bytes to check
  3260 000016A5 BB[BF06]                		mov	bx, bin_date_time
  3261                                  bv_loop:				
  3262 000016A8 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3263 000016AA 88C4                    		mov	ah, al
  3264 000016AC 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3265                                  					; is 1's place in range?
  3266 000016AF 3C0A                    		cmp	al, 10
  3267 000016B1 77ED                    		ja	short bv_error	; jmp out of range
  3268 000016B3 D0EC                    		shr	ah, 1
  3269 000016B5 D0EC                    		shr	ah, 1
  3270 000016B7 D0EC                    		shr	ah, 1
  3271 000016B9 D0EC                    		shr	ah, 1
  3272 000016BB 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3273 000016BE 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3274 000016C1 77DD                    		ja	short bv_error	; jmp out of range
  3275 000016C3 43                      		inc	bx		; next byte
  3276 000016C4 49                      		dec	cx
  3277 000016C5 75E1                    		jnz	short bv_loop
  3278 000016C7 F8                      		clc			; set success flag
  3279 000016C8 C3                      		retn
  3280                                  ; ----------------------------------------------------------------------------
  3281                                  
  3282                                  		; 12/12/2022
  3283                                  ;bv_error:				
  3284                                  		;stc			; set error flag
  3285                                  		;retn
  3286                                  
  3287                                  ; ----------------------------------------------------------------------------
  3288                                  
  3289                                  endk09:
  3290                                  
  3291                                  ; ----------------------------------------------------------------------------
  3292                                  
  3293                                  ;------------------------------------------------------------------------
  3294                                  ;									:
  3295                                  ;	System initialization						:
  3296                                  ;									:
  3297                                  ;	The entry conditions are established by the bootstrap		:
  3298                                  ;	loader and are considered unknown. The following jobs		:
  3299                                  ;	will be performed by this module:				:
  3300                                  ;									:
  3301                                  ;	1.	All device initialization is performed			:
  3302                                  ;	2.	A local stack is set up and DS:SI are set		:
  3303                                  ;		to point to an initialization table. Then		:
  3304                                  ;		an inter-segment call is made to the first		:
  3305                                  ;		byte of the dos 					:
  3306                                  ;	3.	Once the dos returns from this call the ds		:
  3307                                  ;		register has been set up to point to the start		:
  3308                                  ;		of free memory. The initialization will then		:
  3309                                  ;		load the command program into this area 		:
  3310                                  ;		beginning at 100 hex and transfer control to		:
  3311                                  ;		this program.						:
  3312                                  ;									:
  3313                                  ;------------------------------------------------------------------------
  3314                                  
  3315                                  ; 01/10/2022
  3316                                  ; 08/01/2018 - Retro DOS v4.0
  3317                                  
  3318                                  ; drvfat must be the first location of freeable space!
  3319                                  
  3320                                  
  3321 000016C9 90                      align 2
  3322                                  		;db 90h
  3323                                  
  3324                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3325                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3326                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3327                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3328                                  	
  3329 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3330                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3331                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3332                                  ;doscnt:	dw 0			; how many sectors to read
  3333 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3334                                  ;fatloc:	dw 0			; seg addr of fat sector
  3335 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3336 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3337                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3338                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3339                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3340                                  
  3341                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3342                                  ; call to determine drive parameters.
  3343                                  
  3344 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3345 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3346 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3347 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3348                                  
  3349                                  ; ----------------------------------------------------------------------------
  3350                                  
  3351 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3352 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3353 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3354 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3355 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3356                                  					; the assumption of total fat size <= 128 kb,
  3357                                  					; and the maximum size of fat entry = 16 bit.
  3358                                  
  3359 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3359 00001705 00                 
  3360                                  					; for compatibility.
  3361 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3361 0000170F 00                 
  3362                                  					; fbig = 40h
  3363 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3363 00001719 00                 
  3364 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3364 00001723 00                 
  3365 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3365 0000172D 00                 
  3366 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3366 00001737 00                 
  3367 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3367 00001741 00                 
  3368                                  					
  3369                                  ; ----------------------------------------------------------------------------
  3370                                  
  3371                                  ;******************************************************
  3372                                  ;variables for mini disk initialization
  3373                                  ;******************************************************
  3374                                  
  3375                                  ; 01/10/2022
  3376                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3377                                  
  3378 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3379 00001743 00                      hnum:		db 0			; real number of hardfiles
  3380 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3381 00001746 [1609]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3382                                  					; of bds table. needed to figure out
  3383                                  					; the dosdatasg address.
  3384 00001748 0000                    mini_hdlim:	dw 0			
  3385 0000174A 0000                    mini_seclim:	dw 0
  3386                                  
  3387                                  ;end of mini disk init variables **********************
  3388                                  
  3389                                  ; ----------------------------------------------------------------------------
  3390                                  			
  3391 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3392                                  
  3393                                  ; 13/12/2022
  3394                                  %if 0
  3395                                  
  3396                                  ;align 2
  3397                                  		db  90h	
  3398                                  
  3399                                  ; the following are the recommended bpbs for the media that we know of so far.
  3400                                  
  3401                                  ;struc bpbx
  3402                                  ;   resw 1 ; 512
  3403                                  ;   resb 1
  3404                                  ;   resw 1 ; 1
  3405                                  ;   resb 1 ; 2
  3406                                  ;   resw 1
  3407                                  ;   resw 1
  3408                                  ;   resb 1
  3409                                  ;   resw 1
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; 2
  3412                                  ;   resw 1
  3413                                  ;   resw 1 ; hidden sector high
  3414                                  ;   resd 1 ; extended total sectors
  3415                                  ;.size:
  3416                                  ;endstruc
  3417                                  
  3418                                  ; 08/01/2019 - Retro DOS v4.0
  3419                                  
  3420                                  ; 20/04/2019
  3421                                  
  3422                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3423                                  
  3424                                  ; 09/12/2022
  3425                                  BPB48T:
  3426                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3427                                  		; 48 tpi diskettes	;
  3428                                  		dw	512		; physical sector size in bytes
  3429                                  		db	2		; sectors/allocation unit
  3430                                  		dw	1		; reserved sectors for dos
  3431                                  		db	2		; number of allocation tables
  3432                                  		dw	112		; number of directory entries
  3433                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3434                                  		db	0FDh		; media descriptor
  3435                                  		dw	2		; number of fat sectors
  3436                                  		dw	9		; sectors per track
  3437                                  		dw	2		; heads
  3438                                  		dw	0		; hidden sector count (low word)
  3439                                  		dw	0		; hidden sector (high)
  3440                                  		dw	0		; number of sectors (low)
  3441                                  		dw	0		; number of sectors (high)					
  3442                                  
  3443                                  		db 90h
  3444                                  ;align 2
  3445                                  BPB96T:
  3446                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3447                                  		; 96 tpi diskettes	;
  3448                                  		dw	512		; physical sector size in bytes
  3449                                  		db	1		; sectors/allocation unit
  3450                                  		dw	1		; reserved sectors for dos
  3451                                  		db	2		; number of allocation tables
  3452                                  		dw	224		; number of directory entries
  3453                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3454                                  		db	0F9h		; media descriptor
  3455                                  		dw	7		; number of fat sectors
  3456                                  		dw	15		; sectors per track
  3457                                  		dw	2		; heads
  3458                                  		dw	0		; hidden sector count (low word)
  3459                                  		dw	0		; hidden sector (high)
  3460                                  		dw	0		; number of sectors (low)
  3461                                  		dw	0		; number of sectors (high)
  3462                                  
  3463                                  		db 90h
  3464                                  ;align 2
  3465                                  BPB35:
  3466                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3467                                  		; 3.5" diskettes - 720 KB ;		
  3468                                  		dw	512		; physical sector size in bytes
  3469                                  		db	2		; sectors/allocation unit
  3470                                  		dw	1		; reserved sectors for dos
  3471                                  		db	2		; number of allocation tables
  3472                                  		dw	112		; number of directory entries
  3473                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3474                                  		db	0F9h		; media descriptor
  3475                                  		dw	3		; number of fat sectors
  3476                                  		dw	9		; sectors per track
  3477                                  		dw	2		; heads
  3478                                  		dw	0		; hidden sector count (low word)
  3479                                  		dw	0		; hidden sector (high)
  3480                                  		dw	0		; number of sectors (low)
  3481                                  		dw	0		; number of sectors (high)
  3482                                  
  3483                                  		db 90h
  3484                                  ;align 2
  3485                                  
  3486                                  ;align 2
  3487                                  ;BPB144:
  3488                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3489                                  ;
  3490                                  ;		dw	512		; physical sector size in bytes
  3491                                  ;		db	1		; sectors/allocation unit
  3492                                  ;		dw	1		; reserved sectors for dos
  3493                                  ;		db	2		; number of allocation tables
  3494                                  ;		dw	224		; number of directory entries
  3495                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3496                                  ;		db	0F0h		; media descriptor
  3497                                  ;		dw	9		; number of fat sectors
  3498                                  ;		dw	18		; sectors per track
  3499                                  ;		dw	2		; heads
  3500                                  ;		dw	0		; hidden sector count (low word)
  3501                                  ;		dw	0		; hidden sector (high)
  3502                                  ;		dw	0		; number of sectors (low)
  3503                                  ;		dw	0		; number of sectors (high)
  3504                                  ;
  3505                                  ;		db 90h
  3506                                  ;align 2
  3507                                  
  3508                                  BPB288:
  3509                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3510                                  		; 3.5" diskettes - 2.88 MB ;	 
  3511                                  		dw	512		; physical sector size in bytes
  3512                                  		db	2		; sectors/allocation unit
  3513                                  		dw	1		; reserved sectors for dos
  3514                                  		db	2		; number of allocation tables
  3515                                  		dw	240		; number of directory entries
  3516                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3517                                  		db	0F0h		; media descriptor
  3518                                  		dw	3		; number of fat sectors
  3519                                  		dw	9		; sectors per track
  3520                                  		dw	2		; heads
  3521                                  		dw	0		; hidden sector count (low word)
  3522                                  		dw	0		; hidden sector (high)
  3523                                  		dw	0		; number of sectors (low)
  3524                                  		dw	0		; number of sectors (high)
  3525                                  
  3526                                  		db 90h			;
  3527                                  ;align 2
  3528                                  
  3529                                  %endif
  3530                                  
  3531                                  ; ----------------------------------------------------------------------------
  3532                                  					; align	2
  3533                                  ; 09/12/2022
  3534                                  %if 0
  3535                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3536                                  		dw bpb96t		; 96tpi	drives
  3537                                  		dw bpb35		; 3.5" drives
  3538                                  		dw bpb35		; unused 8" diskette
  3539                                  		dw bpb35		; unused 8" diskette
  3540                                  		dw bpb35		; used for hard	disk
  3541                                  		dw bpb35		; used for tape	drive
  3542                                  		dw bpb35		; FFOTHER
  3543                                  		dw bpb35		; ERIMO
  3544                                  		dw bpb288		; 2.88MB drive
  3545                                  		;
  3546                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3547                                  %endif
  3548                                  
  3549                                  ; 13/12/2022
  3550                                  %if 0
  3551                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3552                                  		dw BPB96T		; 96tpi	drives
  3553                                  		dw BPB35		; 3.5" drives
  3554                                  		dw BPB35		; unused 8" diskette
  3555                                  		dw BPB35		; unused 8" diskette
  3556                                  		dw BPB35		; used for hard	disk
  3557                                  		dw BPB35		; used for tape	drive
  3558                                  		dw BPB35		; FFOTHER
  3559                                  		dw BPB35		; ERIMO
  3560                                  		dw BPB288		; 2.88MB drive
  3561                                  		;
  3562                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3563                                  
  3564                                  %endif
  3565                                  
  3566                                  ; ----------------------------------------------------------------------------
  3567                                  
  3568                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3569                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3570                                  ;	  will not yet be moved to its final resting place, so we know
  3571                                  ;	  it'll be low.
  3572                                  ;
  3573                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3574                                  ;	  the function you want to call in Bios_Code. This routine will
  3575                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3576                                  ;	  will get executed when the utility function finishes. It will
  3577                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3578                                  ;	  and a retf
  3579                                  
  3580                                  ; 16/10/2022
  3581                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3582                                  ; 09/12/2022
  3583                                  BC_RETF equ bc_retf
  3584                                  
  3585                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3586                                  					; 2C7h:0C8h = 70h:2638h
  3587 00001755 [C800]                  		dw BC_RETF
  3588                                  
  3589                                  ; ----------------------------------------------------------------------------
  3590                                  
  3591                                  call_bios_code:	; proc far			
  3592 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3593                                  					; set up near return to far return
  3594 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3595 00001761 55                      		push	bp		; save offset of utility function
  3596 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3597                                  
  3598                                  ; ----------------------------------------------------------------------------
  3599                                  		
  3600                                  		; 20/12/2022
  3601                                  ;flp_drvs	db 0			
  3602                                  
  3603                                  ; ----------------------------------------------------------------------------
  3604                                  
  3605                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3606                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3607                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3608                                  
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  ; entry point from boot sector
  3611                                  ;-----------------------------------------------------------------------------
  3612                                  
  3613                                  init:		; 27/12/2018
  3614                                  		; MSDOS 6.0 (MSINIT.ASM)
  3615                                  		;=============================================================
  3616                                  		;
  3617                                  		; entry from boot sector. the register contents are:
  3618                                  		;
  3619                                  		;   dl = int 13 drive number we booted from
  3620                                  		;   ch = media byte
  3621                                  		;   bx = first data sector on disk.
  3622                                  		;   ax = first data sector (high)
  3623                                  		;   di = sectors/fat for the boot media.
  3624                                  
  3625                                  		; 07/04/2018
  3626                                  		;=============================================================
  3627                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3628                                                  ; DL = [bsDriveNumber]
  3629                                  		; DH = [bsMedia]
  3630                                  		; AX = [bsSectors] ; Total sectors
  3631                                  		; DS = 0, SS = 0
  3632                                  		; BP = 7C00h
  3633                                  
  3634                                  		; 29/09/2023
  3635                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  3636                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  3637                                  	
  3638                                  ; 20/12/2022
  3639                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3640                                  %if 0	
  3641                                  		cli
  3642                                  
  3643                                  		push	ax
  3644                                  		xor	ax, ax
  3645                                  		mov	ds, ax
  3646                                  		pop	ax
  3647                                  %endif
  3648                                  
  3649                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3650                                  
  3651                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3652                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3653                                  
  3654                                  ;-----------------------------------------------------------------------------
  3655                                  ; initialization - stage 1
  3656                                  ;-----------------------------------------------------------------------------
  3657                                  ; 02/06/2018 - Retro DOS v3.0
  3658                                  		
  3659                                  		; 21/12/2022
  3660                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3661                                  		;mov	bx, 60h
  3662                                  		;mov	es, bx
  3663                                  		;mov	si, bp
  3664                                  		;sub	di, di
  3665                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3666                                  		;;mov	cl, 35
  3667                                  		;rep	movsw
  3668                                  
  3669 00001763 0E                      		push	cs
  3670 00001764 1F                      		pop	ds
  3671                                  
  3672                                  		; 20/03/2019 - Retro DOS v4.0
  3673                                  		;cli		; turn interrupts off while manupulating stack
  3674                                  		;mov	ss, cx	; set stack segment register
  3675 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3676                                  		;sti		; turn interrupts on
  3677                                  
  3678                                  		; 27/03/2018
  3679                                  		;mov	cx, KERNEL_SIZE	; words !
  3680                                  
  3681                                  		; 20/03/2019
  3682 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3683                                  
  3684                                  		; 21/12/2022
  3685                                  		; 07/04/2018
  3686 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3687                                  		;mov	bl, KERNEL_SEGMENT
  3688 0000176E 8EC3                    		mov	es, bx
  3689 00001770 31FF                    		xor	di, di
  3690 00001772 89FE                    		mov	si, di
  3691                                  		
  3692                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3693                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3694 00001774 F3A5                    		rep	movsw
  3695                                  
  3696                                  		; 20/03/2019 - Retro DOS v4.0
  3697 00001776 53                      		push	bx
  3698 00001777 68[7B17]                		push	init0
  3699 0000177A CB                      		retf
  3700                                  init0:	
  3701                                  		; 20/12/2022
  3702                                  		; (combined kernel file > 64KB)
  3703                                  
  3704                                  		; 20/03/2019
  3705 0000177B B520                    		mov	ch, 20h
  3706 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3707                                  		;mov	cx, 1070h
  3708 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3709 00001782 8EC1                    		mov	es, cx
  3710                                  		
  3711                                  		; 21/12/2022
  3712                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3713                                  		; 28/09/2023
  3714                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  3715                                  
  3716                                  		;mov	cx, KERNEL_SIZE - 32768
  3717                                  		; 28/09/2023 (BugFix)
  3718 00001784 B96D01                  		mov	cx, NXWORDCOUNT
  3719                                  		;shr	cx, 1 ; 28/09/2023
  3720                                  		;xor	si, si
  3721                                  		;xor	di, di
  3722 00001787 F3A5                    		rep	movsw
  3723                                  
  3724                                  		; 28/09/2023
  3725                                  		;; 17/06/2018 
  3726                                  		;mov	ds, bx
  3727                                  		;; 21/03/2019
  3728                                  		;mov	es, bx
  3729                                  ;init0:
  3730                                  ;		;push	es
  3731                                  ;		push	bx ; 20/03/2019
  3732                                  ;		push	init1 ; 07/04/2018
  3733                                  ;		retf	; jump to 0070h:init1
  3734                                  ;init:
  3735                                  init1:
  3736                                  		; 20/12/2022
  3737                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3738                                  		; for full MSDOS compatibility.
  3739                                  
  3740 00001789 8EC1                    		mov	es, cx ; 0
  3741 0000178B 8ED9                    		mov	ds, cx ; 0
  3742                                  
  3743 0000178D B82205                  		mov	ax, SEC9
  3744                                  
  3745                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3746 00001790 B378                    		mov	bl, 1Eh*4
  3747                                  				; INT 1Eh points to diskette parms table
  3748                                  
  3749                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3750                                   		; (do not move the DPT if is not original ROMBIOS table)
  3751                                  
  3752                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3753                                  		;;jnz	short mov_dpt
  3754                                  
  3755                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3756                                  		;je	short dont_mov_dpt
  3757                                  
  3758                                  		;mov	si, [bx] ; [1Eh*4]		
  3759                                  ;mov_dpt:
  3760                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3761 00001792 C537                    		lds	si, [bx]
  3762 00001794 89C7                    		mov	di, ax  ; SEC9
  3763 00001796 B10B                    		mov	cl, 11
  3764                                  		;cld
  3765 00001798 F3A4                    		rep	movsb
  3766                                  
  3767                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3768 0000179A 8ED9                    		mov	ds, cx ; 0
  3769 0000179C 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3770 0000179E 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3771                                  ;dont_mov_dpt:
  3772                                  
  3773                                  ; 20/12/2022 - Retro DOS v4.0
  3774                                  %if 0
  3775                                  		; 27/12/2018 - Retro DOS v4.0
  3776                                  		; 'Starting MS-DOS...' message
  3777                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3778                                  		; (0070h:96A3h)
  3779                                  
  3780                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3781                                  		mov     ah, 0Eh
  3782                                  		;bh = 0
  3783                                          	mov     bl, 7		; "normal" attribute and page
  3784                                  startmsg_nxt_chr:  
  3785                                  		lodsb
  3786                                  		or	al, al
  3787                                          	jz	short startmsg_ok
  3788                                         
  3789                                  		int	10h		; video write
  3790                                          	jmp	short startmsg_nxt_chr
  3791                                  
  3792                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3793                                  
  3794                                  startmsg_ok:
  3795                                  
  3796                                  %endif
  3797                                  
  3798                                  ;-----------------------------------------------------------------------------
  3799                                  ; initialization - stage 2
  3800                                  ;-----------------------------------------------------------------------------
  3801                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3802                                  
  3803                                  
  3804                                  ; 19/03/2018
  3805                                  ; Retro DOS v2.0 (24/02/2018)
  3806                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3807                                  
  3808                                  ;------------------------------------------------------------------------
  3809                                  ;									:
  3810                                  ;	System initialization						:
  3811                                  ;									:
  3812                                  ;	The entry conditions are established by the bootstrap		:
  3813                                  ;	loader and are considered unknown. The following jobs		:
  3814                                  ;	will be performed by this module:				:
  3815                                  ;									:
  3816                                  ;	1.	All device initialization is performed			:
  3817                                  ;	2.	A local stack is set up and DS:SI are set		:
  3818                                  ;		to point to an initialization table. Then		:
  3819                                  ;		an inter-segment call is made to the first		:
  3820                                  ;		byte of the dos 					:
  3821                                  ;	3.	Once the dos returns from this call the ds		:
  3822                                  ;		register has been set up to point to the start		:
  3823                                  ;		of free memory. The initialization will then		:
  3824                                  ;		load the command program into this area 		:
  3825                                  ;		beginning at 100 hex and transfer control to		:
  3826                                  ;		this program.						:
  3827                                  ;									:
  3828                                  ;------------------------------------------------------------------------
  3829                                  		
  3830                                  		; 20/12/2022
  3831                                  		; ----------------------
  3832                                  		; Registers
  3833                                  		; ----------------------
  3834                                  		; DL = [bsDriveNumber]
  3835                                  		; DH = [bsMedia]
  3836                                  		; DS = 0, ES = 0, SS = 0
  3837                                  		; BP = 7C00h
  3838                                  		; SP = 700h
  3839                                  		; ----------------------
  3840                                  		; CX = 0				
  3841                                  
  3842                                  ; 02/10/2022 - 20/12/2022
  3843                                  ; ------------------------------------------------------------------------------
  3844                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3845                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3846                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3847                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3848                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3849                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3850                                  ; ------------------------------------------------------------------------------
  3851                                  
  3852                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3853                                  ;
  3854                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3855                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3856                                  ;;	data sector of the bios.
  3857                                  ;
  3858                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3859                                  ;		mov	[cs:bios_l], bx
  3860                                  
  3861                                  ; with the following information from msload, we don't need the
  3862                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3863                                  ;     limitation of msbio.com file.
  3864                                  
  3865                                  		; 21/12/2022
  3866 000017A1 FA                      		cli
  3867                                  
  3868 000017A2 0E                      		push	cs		; Save a peck of interrupt vectors...
  3869 000017A3 07                      		pop	es
  3870                                  		;push	cx
  3871                                  		;push	di
  3872                                  		; 20/12/2022
  3873 000017A4 B105                    		mov	cl, 5
  3874                                  		;mov	cx, 5		; NUMROMVECTORS
  3875                                  					; no. of rom vectors to	be saved
  3876                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3877 000017A6 BE[0001]                		mov	si, RomVectors
  3878                                  next_int_:		
  3879 000017A9 2E                      		cs	; 16/10/2022
  3880 000017AA AC                      		lodsb		
  3881                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3882 000017AB 98                      		cbw			; ax = interrupt number
  3883 000017AC D1E0                    		shl	ax, 1
  3884 000017AE D1E0                    		shl	ax, 1		; int no * 4
  3885 000017B0 89C7                    		mov	di, ax		; interrupt vector address
  3886 000017B2 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3887                                  					; saving address in di
  3888                                  		;lodsw			; movsw
  3889                                  		;stosw
  3890                                  		;lodsw			; movsw
  3891                                  		;stosw			; save the vector
  3892                                  		; 20/12/2022
  3893 000017B4 A5                      		movsw
  3894 000017B5 A5                      		movsw		
  3895                                  
  3896 000017B6 87F7                    		xchg	si, di
  3897 000017B8 E2EF                    		loop	next_int_
  3898                                  		
  3899                                  		;pop	di
  3900                                  		;pop	cx
  3901                                  
  3902                                  ; we need to save int13 in two places in case we are running on an at.
  3903                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3904                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3905                                  ; rom int13 routine, we must have that rom address also stored away.
  3906                                  
  3907                                  		; 20/12/2022
  3908                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3909                                  		;mov	[cs:Orig13], ax
  3910                                  		;mov	ax, [cs:Old13+2]
  3911                                  		;mov	[cs:Orig13+2], ax
  3912                                  
  3913                                  		; 16/10/2022
  3914 000017BA C7064C00[7407]          		mov	word [13h*4], block13
  3915                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3916                                  					; set up int 13	for new	action
  3917 000017C0 8C0E4E00                		mov	[13h*4+2], cs
  3918                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3919 000017C4 C7065400[4808]          		mov	word [15h*4], Int15
  3920                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3921                                  					; set up int 15	for new	action
  3922 000017CA 8C0E5600                		mov	[15h*4+2], cs
  3923                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3924 000017CE C7066400[F907]          		mov	word [19h*4], int19
  3925                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3926                                  					; set up int 19	for new	action
  3927 000017D4 8C0E6600                		mov	[19h*4+2], cs
  3928                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3929                                  
  3930                                  		; 20/12/2022
  3931 000017D8 0E                      		push	cs
  3932 000017D9 1F                      		pop	ds
  3933                                  		
  3934 000017DA A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3935 000017DD A3[B400]                		mov	[Orig13], ax
  3936 000017E0 A1[0801]                		mov	ax, [Old13+2]
  3937 000017E3 A3[B600]                		mov	[Orig13+2], ax
  3938                                  					; ;
  3939 000017E6 FB                      		sti
  3940 000017E7 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3941                                  					; Return: AX = equipment flag bits
  3942                                  
  3943                                  ; we have to support a system that does not have any diskette
  3944                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3945                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3946                                  ; otherwise, the system has only hardfiles.
  3947                                  ;
  3948                                  ; important thing is that still, for compatibility reason, the drive letter
  3949                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3950                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3951                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3952                                  ; drives will get "invalid drive letter ..." message. we are going to
  3953                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3954                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3955                                  
  3956                                  ; check the register returned by the equipment determination interrupt
  3957                                  ; we have to handle the case of no diskettes in the system by faking
  3958                                  ; two dummy drives.
  3959                                  ;
  3960                                  ; if the register indicates that we do have floppy drives we don't need
  3961                                  ; to do anything special.
  3962                                  ;
  3963                                  ; if the register indicates that we don't have any floppy drives then
  3964                                  ; what we need to do is set the fakefloppydrv variable, change the
  3965                                  ; register to say that we do have floppy drives and then go to execute
  3966                                  ; the code which starts at notsingle. this is because we can skip the
  3967                                  ; code given below which tries to find if there are one or two drives
  3968                                  ; since we already know about this.
  3969                                  
  3970                                  		; 06/05/2019 - Retro DOS v4.0
  3971 000017E9 88C1                    		mov	cl, al
  3972                                  
  3973                                  		; 12/12/2022
  3974 000017EB A801                    		test	al, 1
  3975                                  		;test	ax, 1		; floppy drives	present	?
  3976 000017ED 751F                    		jnz	short normalfloppydrv ;	yes.
  3977                                  
  3978                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3979                                  ; whether it is an old ROM BIOS or a new one
  3980                                  ;
  3981                                  ; WARNING !!!
  3982                                  ;
  3983                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3984                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3985                                  
  3986                                  		; 20/12/2022
  3987                                  		;push	ax
  3988                                  		;push	bx
  3989                                  		;push	cx
  3990 000017EF 52                      		push	dx
  3991                                  		;push	di
  3992 000017F0 06                      		push	es
  3993 000017F1 B408                    		mov	ah, 8
  3994 000017F3 B200                    		mov	dl, 0
  3995 000017F5 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3996                                  					; DL = drive number
  3997                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3998                                  					; DL = number of consecutive drives
  3999                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4000 000017F7 7202                    		jc	short _gdskp_error
  4001                                  		;;mov	[cs:flp_drvs], dl
  4002                                  		; 20/12/2022
  4003                                  		; ds = cs
  4004                                  		;mov	[flp_drvs], dl
  4005 000017F9 88D1                    		mov	cl, dl
  4006                                  _gdskp_error:	
  4007                                  		; 20/12/2022			
  4008 000017FB 07                      		pop	es
  4009                                  		;pop	di
  4010 000017FC 5A                      		pop	dx
  4011                                  		;pop	cx
  4012                                  		;pop	bx
  4013                                  		;pop	ax
  4014                                  		
  4015 000017FD 720F                    		jc	short normalfloppydrv
  4016                                  					; if error it is an old ROM BIOS
  4017                                  					; so, lets assume that ROM BIOS lied
  4018                                  		; 20/12/2022
  4019                                  		; ds = cs
  4020                                  		;cmp	byte [flp_drvs], 0
  4021                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4022                                  		;jz	short _set_fake_flpdrv
  4023                                  		;;mov	al, [cs:flp_drvs]
  4024                                  		;mov	al, [flp_drvs]
  4025                                  		;;dec	al		; make it zero based
  4026                                  		;; 18/12/2022
  4027                                  		;dec	ax
  4028                                  		;jmp	short got_num_flp_drvs
  4029                                  		
  4030                                  		; 20/12/2022
  4031 000017FF 08C9                    		or	cl, cl ; [flp_drvs]
  4032 00001801 7403                    		jz	short _set_fake_flpdrv		
  4033 00001803 49                      		dec	cx	
  4034 00001804 EB0C                    		jmp	short got_num_flp_drvs
  4035                                  ; ----------------------------------------------------------------------------
  4036                                  
  4037                                  _set_fake_flpdrv:
  4038                                  		;20/12/2022
  4039                                  		; ds = cs
  4040 00001806 FEC1                    		inc	cl	; cl = 1
  4041 00001808 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4042                                  		;mov	byte [fakefloppydrv], 1		
  4043                                  		;;mov	byte [cs:fakefloppydrv], 1
  4044                                  					; we don't have any floppy drives.
  4045                                  		; 20/12/2022
  4046                                  		;mov	ax, 1
  4047 0000180C EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4048                                  ; ----------------------------------------------------------------------------
  4049                                  
  4050                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4051                                  		; 20/12/2022
  4052                                  		;rol	al, 1		; there	exist floppy drives.
  4053                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4054 0000180E D0C1                    		rol	cl, 1
  4055 00001810 D0C1                    		rol	cl, 1
  4056                                  got_num_flp_drvs:			
  4057                                  		;;and	ax, 3		; only look at bits 0 &	1
  4058                                  		; 18/12/2022
  4059                                  		;and	al, 3
  4060                                  		; 20/12/2022
  4061 00001812 80E103                  		and	cl, 3
  4062 00001815 7505                    		jnz	short notsingle	; zero means single drive system
  4063                                  		; 20/12/2022
  4064 00001817 41                      		inc	cx
  4065                                  		;inc	ax		; pretend it's a two drive system
  4066                                  settwodrive:				; set this to two fakedrives
  4067                                  		; 20/12/2022
  4068                                  		; ds = cs
  4069 00001818 FE06[7800]              		inc	byte [single]
  4070                                  		;inc	byte [cs:single] ; remember this
  4071                                  notsingle:	
  4072                                  		; 20/12/2022			
  4073                                  		;inc	ax		; ax has number	of drives, 2-4
  4074                                  		;			; is also 0 indexed boot drive if we
  4075                                  		;			; booted off hard file
  4076                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4077                                  		; 20/12/2022
  4078 0000181C FEC1                    		inc	cl	; cl >= 2
  4079                                  
  4080                                  ; 16/10/2022
  4081                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4082                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4083                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4084                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4085                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4086                                  SEC9	EQU	522h	; address of disk parameters
  4087                                  CHROUT	EQU	29h
  4088                                  LSTDRV	EQU     504h
  4089                                  
  4090                                  ; determine whether we booted from floppy or hard disk...
  4091                                  
  4092                                  		; 20/12/2022
  4093 0000181E 88C8                    		mov	al, cl	; 26/05/2019
  4094                                  
  4095 00001820 F6C280                  		test	dl, 80h		; boot from floppy ?
  4096 00001823 7502                    		jnz	short gothrd	; no.
  4097 00001825 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4098                                  gothrd:					
  4099                                  
  4100                                  ; MSDOS 6.0
  4101                                  ;   ax = 0-based drive we booted from
  4102                                  ;   bios_l, bios_h set.
  4103                                  ;   cl = number of floppies including fake one
  4104                                  ;   ch = media byte
  4105                                  
  4106                                  ; Retro DOS 4.0 - 27/12/2018 
  4107                                  ;  (from Retro DOS v2.0 boot sector)
  4108                                  ;   dl = int 13 drive number we booted from
  4109                                  ;   dh = media byte
  4110                                  
  4111                                  		; 20/12/2022
  4112 00001827 88F5                    		mov	ch, dh		; 01/07/2018
  4113                                  
  4114                                  		; cl = number of floppies
  4115                                  		; ch = media byte
  4116                                  
  4117                                  		; set up local stack
  4118                                  
  4119                                  		; 20/12/2022
  4120                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4121                                  					; bios_l, bios_h set.
  4122                                  					; cl = number of floppies including fake one
  4123                                  					; ch = media byte
  4124                                  		; 20/12/2022
  4125                                  		; es = ds = cs
  4126                                  		; ss = 0
  4127                                  		; sp = 700h
  4128                                  
  4129                                  		; 20/12/2022
  4130                                  		;cli
  4131                                  		;mov	ss, dx		; set stack segment and stack pointer
  4132                                  		;mov	sp, 700h
  4133                                  		;sti
  4134                                  
  4135 00001829 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4136                                  		
  4137 0000182A 88EC                    		mov	ah, ch		; FAT ID to AH
  4138 0000182C 50                      		push	ax ; (**)	; save boot drive number and media byte
  4139                                  		
  4140                                  ; let model_byte, secondary_model_byte be set here!!!
  4141                                  
  4142 0000182D B4C0                    		mov	ah, 0C0h
  4143 0000182F CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4144 00001831 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4145 00001833 80FC00                  		cmp	ah, 0
  4146 00001836 7510                    		jnz	short no_rom_system_conf
  4147                                  
  4148                                  ;		; 20/12/2022
  4149                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4150                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4151                                  ;
  4152                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4153                                  ;
  4154                                  ;		on return:
  4155                                  ;		CF = 0 if successful
  4156                                  ;		   = 1 if error
  4157                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4158                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4159                                  ;
  4160                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4161                                  ;
  4162                                  ;		Offset Size	     Description
  4163                                  ;
  4164                                  ;		  00   word   length of descriptor (8 minimum)
  4165                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4166                                  ;		  03   byte   secondary model byte
  4167                                  ;		  04   byte   BIOS revision level (zero based)
  4168                                  ;		  05   byte   feature information, see below
  4169                                  ;		  06   dword  reserved
  4170                                  
  4171                                  		; 20/12/2022
  4172                                  		; ds = cs
  4173 00001838 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4174 0000183C A2[3E06]                		mov	[model_byte], al
  4175                                  		;mov	[cs:model_byte], al
  4176                                  					; get/save model byte
  4177 0000183F 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4178 00001843 A2[3F06]                		mov	[secondary_model_byte], al
  4179                                  		;mov	[cs:secondary_model_byte], al
  4180                                  					; get/save secondary model byte
  4181 00001846 EB0C                    		jmp	short turn_timer_on
  4182                                  ;-----------------------------------------------------------------------------
  4183                                  
  4184                                  no_rom_system_conf:			
  4185 00001848 BEFFFF                  		mov	si, 0FFFFh
  4186 0000184B 8EC6                    		mov	es, si
  4187                                  		; 20/12/2022
  4188 0000184D 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4189 00001851 A2[3E06]                		mov	[model_byte], al
  4190                                  		;mov	[cs:model_byte], al ; save model byte
  4191                                  turn_timer_on:				
  4192 00001854 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4193 00001856 E620                    		out	20h, al		; Interrupt controller,	8259A.
  4194                                  					; AKPORT
  4195                                  
  4196                                  ; some olivetti m24 machines have an 8530 serial communications
  4197                                  ; chip installed at io address 50h and 52h. if we're running
  4198                                  ; on one of those, we must inhibit the normal aux port initialization
  4199                                  
  4200                                  		; 20/12/2022
  4201                                  		; ds = cs
  4202 00001858 803E[3E06]00            		cmp	byte [model_byte], 0
  4203                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4204 0000185D 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4205                                  					; (except olivetti m24)
  4206 0000185F E466                    		in	al, 66h		; is 8530 installed?
  4207 00001861 A820                    		test	al, 20h
  4208 00001863 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4209 00001865 B00F                    		mov	al, 0Fh		; double check
  4210 00001867 E650                    		out	50h, al
  4211 00001869 E450                    		in	al, 50h
  4212 0000186B A801                    		test	al, 1		; this test was	copied from olivetti
  4213 0000186D 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4214                                  
  4215                                  not_olivetti_m24:
  4216 0000186F B003                    		mov	al, 3		; init com4
  4217 00001871 E85808                  		call	aux_init
  4218 00001874 B002                    		mov	al, 2		; init com3
  4219 00001876 E85308                  		call	aux_init
  4220 00001879 B001                    		mov	al, 1		; init com2
  4221 0000187B E84E08                  		call	aux_init
  4222 0000187E 30C0                    		xor	al, al		; init com1
  4223 00001880 E84908                  		call	aux_init
  4224                                  
  4225                                  skip_aux_port_init:			
  4226 00001883 B002                    		mov	al, 2		; init lpt3
  4227 00001885 E83C08                  		call	print_init
  4228 00001888 B001                    		mov	al, 1		; init lpt2
  4229 0000188A E83708                  		call	print_init
  4230 0000188D 30C0                    		xor	al, al		; init lpt1
  4231 0000188F E83208                  		call	print_init
  4232                                  
  4233 00001892 31D2                    		xor	dx, dx	; 0
  4234 00001894 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4235 00001896 8EC2                    		mov	es, dx
  4236 00001898 31C0                    		xor	ax, ax
  4237                                  		; 16/10/2022
  4238 0000189A BF3405                  		mov	di, INITSPOT	; 0534h
  4239                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4240                                  					; IBM wants 4 zeros here
  4241 0000189D AB                      		stosw
  4242 0000189E AB                      		stosw
  4243 0000189F 8CC8                    		mov	ax, cs		; fetch	segment
  4244 000018A1 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4245                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4246                                  					; break	entry point
  4247 000018A7 A36E00                  		mov	[BRKADR+2], ax		
  4248                                  		;mov	ds:6Eh,	ax	; vector for break
  4249 000018AA C706A400[6207]          		mov	word [CHROUT*4], outchr
  4250                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4251 000018B0 A3A600                  		mov	[CHROUT*4+2], ax
  4252                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4253                                  
  4254 000018B3 BF0400                  		mov	di, 4
  4255 000018B6 BB[F406]                		mov	bx, intret ; 19/10/2022
  4256                                  		;mov	bx, offset intret ; intret (cs:intret)
  4257                                  					; will initialize rest of interrupts
  4258 000018B9 93                      		xchg	ax, bx
  4259 000018BA AB                      		stosw			; location 4
  4260 000018BB 93                      		xchg	ax, bx		; cs:
  4261 000018BC AB                      		stosw			; int 1	; location 6
  4262 000018BD 83C704                  		add	di, 4
  4263 000018C0 93                      		xchg	ax, bx
  4264 000018C1 AB                      		stosw			; location 12
  4265 000018C2 93                      		xchg	ax, bx		; cs:
  4266 000018C3 AB                      		stosw			; int 3	; location 14
  4267 000018C4 93                      		xchg	ax, bx
  4268 000018C5 AB                      		stosw			; location 16
  4269 000018C6 93                      		xchg	ax, bx		; cs:
  4270 000018C7 AB                      		stosw			; int 4	; location 18
  4271                                  
  4272                                  
  4273                                  ;		; 20/12/2022
  4274                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4275                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4276                                  ;	
  4277                                  ;		50:00	byte	Print screen status byte
  4278                                  ;				 00 = PrtSc not active,
  4279                                  ;				 01 = PrtSc in progress
  4280                                  ;				 FF = error
  4281                                  ;		50:01  3 bytes	Used by BASIC
  4282                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4283                                  ;		50:05  10bytes	POST work area
  4284                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4285                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4286                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4287                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4288                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4289                                  ;		50:20	word	DOS dynamic storage
  4290                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4291                                  ;		50:30	4bytes	MODE command
  4292                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4293                                  
  4294 000018C8 89160005                		mov	[0500h], dx ; 0
  4295                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4296 000018CC 89160405                		mov	[LSTDRV], dx	; [0504h]
  4297                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4298                                  
  4299                                  ; we need to initialize the cs:motorstartup variable from the disk
  4300                                  ; parameter table at sec9. the offsets in this table are defined in
  4301                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4302                                  
  4303 000018D0 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4304                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4305                                  					; [522h+0Ah]
  4306                                  		; 20/12/2022
  4307                                  		; ds = 0
  4308                                  
  4309 000018D3 2EA2[2601]              		mov	[cs:motorstartup], al
  4310 000018D7 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4311 000018DD 720B                    		jb	short no_diddle	; no
  4312 000018DF C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4313                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4314                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4315 000018E5 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4316                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4317                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4318                                  no_diddle:				
  4319 000018EA CD12                    		int	12h		; MEMORY SIZE -
  4320                                  					; Return: AX = number of contiguous 1K blocks of memory
  4321 000018EC B106                    		mov	cl, 6
  4322 000018EE D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4323                                  		
  4324                                  		; 20/12/2022
  4325                                  		; 03/07/2018 - 27/12/2018
  4326                                  		;pop	cx ; (**)
  4327                                  		;mov	[cs:drvfat], cx
  4328                                  		
  4329 000018F0 50                      		push	ax ; (*)	; save real top	of memory
  4330                                  
  4331                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4332                                  
  4333                                  ;M068 - BEGIN
  4334                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4335                                  
  4336                                  		; 20/12/2022
  4337                                  		; ds = 0
  4338                                  
  4339                                  		;push	ds
  4340                                  		;push	bx		; pushes not required but since this
  4341                                  					; happens to be a last minute change
  4342                                  					; & since it is only init code.
  4343                                  		;xor	bx, bx
  4344                                  		;mov	ds, bx
  4345                                  
  4346                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  4347                                  		;mov	bx, [2Fh*4]
  4348                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4349                                  		;mov	ds, [2Fh*4+2]
  4350                                  		; 29/09/2023
  4351 000018F1 C51EBC00                		lds	bx, [2Fh*4]
  4352                                  
  4353 000018F5 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4354                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4355 000018FA 750F                    		jnz	short SkipRPL
  4356 000018FC 807F054C                		cmp	byte [bx+5], 'L'
  4357                                  		;cmp	byte ptr [bx+5], 'L'
  4358 00001900 7509                    		jnz	short SkipRPL
  4359 00001902 89C2                    		mov	dx, ax		; get TOM into DX
  4360 00001904 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4361 00001907 CD2F                    		int	2Fh		; Get new TOM from any RPL
  4362 00001909 89D0                    		mov	ax, dx
  4363                                  SkipRPL:	
  4364                                  		; 20/12/2022
  4365                                  		;pop	bx
  4366                                  		;pop	ds
  4367                                  
  4368                                  ;M068 - END
  4369                                  		; 20/12/2022
  4370                                  		; 27/12/2018
  4371 0000190B 0E                      		push	cs
  4372 0000190C 1F                      		pop	ds
  4373                                  
  4374                                  		; 18/03/2019 - Retro DOS v4.0
  4375                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4376                                  		;mov	[cs:fatloc], ax	; location to read fat
  4377                                  
  4378                                  		; 01/07/2018
  4379                                  		; 08/04/2018
  4380                                  		; 28/03/2018
  4381                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4382 0000190D 83E840                  		sub	ax, 64
  4383 00001910 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4384                                  		;mov	[cs:init_bootseg], ax
  4385                                  
  4386                                  		; 27/12/2018 - Retro DOS v4.0
  4387                                  		;;pop	ax ; (*)	; get back real top of memory
  4388                                  		;pop	dx ; (*)
  4389                                  		; 29/09/2023 (BugFix)
  4390 00001913 58                      		pop	ax ; (*)	; get back real top of memory
  4391                                  
  4392                                  		; 20/12/2022
  4393                                  		; 27/12/2018
  4394 00001914 59                      		pop	cx ; (**)
  4395 00001915 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4396                                  
  4397                                  		; 20/12/2022
  4398                                  
  4399                                  		;mov	dx, 46Dh	; SYSINIT segment
  4400 00001919 BA3904                  		mov	dx, SYSINITSEG	; 17/10/2022
  4401 0000191C 8EDA                    		mov	ds, dx
  4402                                  
  4403                                  ; set pointer to resident device driver chain
  4404                                  
  4405                                  		; 17/10/2022
  4406 0000191E C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4407                                  		;mov	word [273h], res_dev_list
  4408                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4409                                  					; [SYSINIT+DEVICE_LIST]
  4410 00001924 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4411                                  		;mov	[275h], cs
  4412                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4413                                  
  4414 00001928 A3[9202]                		mov	[MEMORYSIZE], ax
  4415                                  		;mov	[292h], ax
  4416                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4417                                  
  4418 0000192B FEC1                    		inc	cl
  4419 0000192D 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4420                                  		;mov	[296h], cl
  4421                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4422                                  
  4423 00001931 C706[7102]B807          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4424                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4425                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4426                                  					; dos_load_seg
  4427                                  
  4428                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4429                                  ; printer cards. we initialize this value to point to an iret only if
  4430                                  ;
  4431                                  ; 1) the original segment points to storage inside valid ram.
  4432                                  ;
  4433                                  ; 2) the original segment is 0F000:xxxx
  4434                                  
  4435                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4436                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4437                                  		;mov	es, ax
  4438                                  		; 20/12/2022
  4439                                  		;push	ds ; SYSINITSEG
  4440                                  		;pop	es
  4441 00001937 8EC2                    		mov	es, dx ; SYSINITSEG
  4442 00001939 31C0                    		xor	ax, ax ; 0
  4443 0000193B 8ED8                    		mov	ds, ax		; segment 0
  4444                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4445 0000193D A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4446                                  		; 18/10/2022
  4447 00001940 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4448                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4449 00001945 7605                    		jbe	short resetintf
  4450 00001947 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4451 0000194A 750A                    		jnz	short keepintf
  4452                                  resetintf:	
  4453 0000194C C7063C00[F406]          		mov	word [0Fh*4], intret			
  4454                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4455 00001952 8C0E3E00                		mov	word [0Fh*4+2], cs
  4456                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4457                                  keepintf:				
  4458                                  ; end important
  4459                                  
  4460                                  ; 17/10/2022
  4461                                  ; 28/12/2018 - Retro DOS v4.0
  4462                                  
  4463                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4464                                  ;
  4465                                  ; we will check if the system has ibm extended keyboard by
  4466                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4467                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4468                                  ; for the extended keyboard function. use cx as the temporary register.
  4469                                  
  4470                                  		; 20/12/2022
  4471                                  		; ds = 0
  4472                                  		;xor	cx, cx
  4473                                  		;mov	ds, cx
  4474                                  
  4475 00001956 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4476                                  
  4477                                  		; 20/12/2022
  4478                                  		; 20/03/2019
  4479 0000195A 0E                      		push	cs
  4480 0000195B 1F                      		pop	ds
  4481                                  
  4482                                  		;test	cl, 00010000b ; 10h
  4483 0000195C F6C110                  		test	cl, 10h		; extended keyboard ?
  4484 0000195F 740A                    		jz	short org_key	; no, original keyboard
  4485                                  
  4486                                  		; 20/12/2022
  4487                                  		;  ds = cs
  4488 00001961 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4489 00001966 C606[E604]11            		mov	byte [keysts_func], 11h
  4490                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4491                                  		;mov	byte [cs:keysts_func], 11h
  4492                                  					; change for extended keyboard functions
  4493                                  org_key:
  4494                                  
  4495                                  ; 02/06/2018 - Retro DOS v3.0
  4496                                  
  4497                                  ;**************************************************************
  4498                                  ;	will initialize the number of drives
  4499                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4500                                  ;	the indications are as follows:
  4501                                  ;
  4502                                  ;	bits	7	6	drives
  4503                                  ;		0	0	1
  4504                                  ;		0	1	2
  4505                                  ;		1	0	3
  4506                                  ;		1	1	4
  4507                                  ;**************************************************************
  4508                                  		
  4509                                  		; 20/12/2022
  4510                                  		; ds = cs		
  4511                                  		;push	cs
  4512                                  		;pop	ds
  4513                                  		; 21/12/2022
  4514                                  		;push	cs
  4515                                  		;pop	es
  4516                                  
  4517 0000196B E89F08                  		call	cmos_clock_read	; If cmos clock	exists,
  4518                                  					; then set the system time according to	that.
  4519                                  					; also,	reset the cmos clock rate.
  4520                                  		; 18/10/2022
  4521                                  		;mov	word ptr BData_start, offset harddrv ;
  4522                                  					; set up pointer to hdrive
  4523                                  		; 02/10/2022
  4524 0000196E C706[0000][1509]        		mov	word [hdrv_pat], harddrv 
  4525                                  		
  4526                                  		; 20/12/2022
  4527                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4528 00001974 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4529 00001975 30E4                    		xor	ah, ah		; chuck	fat id byte
  4530 00001977 A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4531 0000197A A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4532 0000197D D1E0                    		shl	ax, 1
  4533 0000197F 0106[4417]              		add	[last_dskdrv_table], ax
  4534                                  
  4535 00001983 B280                    		mov	dl, 80h
  4536 00001985 B408                    		mov	ah, 8
  4537 00001987 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4538                                  					; DL = drive number
  4539                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4540                                  					; DL = number of consecutive drives
  4541                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4542 00001989 7204                    		jc	short enddrv
  4543 0000198B 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4544                                  enddrv:
  4545                                  		; 21/12/2022
  4546 0000198F 0E                      		push	cs
  4547 00001990 07                      		pop	es
  4548                                  
  4549                                  ; scan the list of drives to determine their type. we have three flavors of
  4550                                  ; diskette drives:
  4551                                  ;
  4552                                  ;   48tpi drives    we do nothing special for them
  4553                                  ;   96tpi drives    mark the fact that they have changeline support.
  4554                                  ;   3.5"  drives    mark changeline support and small.
  4555                                  ;
  4556                                  ; the following code uses registers for certain values:
  4557                                  ;
  4558                                  ;   dl - physical drive
  4559                                  ;   ds:di - points to current bds
  4560                                  ;   cx - flag bits for bds
  4561                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4562                                  					
  4563 00001991 30D2                    		xor	dl, dl
  4564                                  
  4565                                  		; 20/12/2022
  4566                                  		; ds = cs
  4567                                  		; 17/06/2018		 
  4568                                  		;push	cs
  4569                                  		;pop	ds
  4570                                  
  4571 00001993 C606[2C01]09            		mov	byte [eot], 9
  4572 00001998 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4573                                  					; to set aside two bdss	for the	two fake floppy	drives
  4574                                  
  4575                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4576                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4577                                  
  4578                                  ; check to see if we are faking floppy drives. if not we don't
  4579                                  ; do anything special. if we are faking floppy drives we need
  4580                                  ; to set aside two bdss for the two fake floppy drives. we
  4581                                  ; don't need to initalise any fields though. so starting at start_bds
  4582                                  ; use the link field in the bds structure to go to the second bds
  4583                                  ; in the list and initalise it's link field to -1 to set the end of
  4584                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4585                                  ; the bds for harddrives.
  4586                                  
  4587 0000199B 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4588 000019A0 750B                    		jnz	short loop_drive
  4589 000019A2 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4590                                  					; di <-	first bds link
  4591 000019A4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4592                                  					; di <-	second bds link
  4593 000019A6 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4594 000019AA E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4595                                  ;-----------------------------------------------------------------------------
  4596                                  
  4597                                  loop_drive:				
  4598 000019AD 3A16[7500]              		cmp	dl, [drvmax]
  4599 000019B1 7203                    		jb	short got_more
  4600 000019B3 E90201                  		jmp	done_drives
  4601                                  ;-----------------------------------------------------------------------------
  4602                                  
  4603                                  got_more:				
  4604 000019B6 31C9                    		xor	cx, cx		; zero all flags
  4605 000019B8 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4606                                  					; get next bds
  4607 000019BA B600                    		mov	dh, 0 ; ff48tpi
  4608                                  					; set form factor to 48	tpi
  4609 000019BC C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per	side
  4610                                  		
  4611                                  		; 20/12/2022
  4612                                  		;push	ds ; 11/05/2019	
  4613 000019C1 57                      		push	di
  4614 000019C2 52                      		push	dx
  4615 000019C3 51                      		push	cx
  4616 000019C4 06                      		push	es ; ((*)) ; 20/12/2022	
  4617                                  		
  4618 000019C5 B408                    		mov	ah, 8
  4619 000019C7 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4620                                  					; DL = drive number
  4621                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4622                                  					; DL = number of consecutive drives
  4623                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4624 000019C9 7276                    		jc	short noparmsfromrom
  4625                                  
  4626                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4627                                  ; in this case, we are going to put bogus informations to bds table.
  4628                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4629                                  ; they are calculated at the later time. this is just for the diagnostic
  4630                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4631                                  ; this should only happen with drive b.
  4632                                  
  4633 000019CB 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4634 000019CE 7505                    		jnz	short pfr_ok
  4635                                  
  4636                                  		;mov	ch, 39		; rom gave wrong info.
  4637                                  		;mov	cl, 9		; let's default to 360k.
  4638                                  		; 20/12/2022
  4639 000019D0 B90927                  		mov	cx, 2709h
  4640                                  
  4641 000019D3 B601                    		mov	dh, 1
  4642                                  pfr_ok:					
  4643 000019D5 FEC6                    		inc	dh		; make number of heads 1-based
  4644 000019D7 FEC5                    		inc	ch		; make number of cylinders 1-based
  4645 000019D9 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4646 000019DD 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4647 000019E0 880E[D116]              		mov	[sec_trk], cl
  4648 000019E4 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4649                                  
  4650                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4651                                  
  4652 000019E8 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4653                                  		;jbe	short eot_ok
  4654                                  		; 09/12/2022
  4655                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4656                                  		; 14/08/2023
  4657 000019EC 7604                    		jbe	short eotok
  4658 000019EE 880E[2C01]              		mov	[eot], cl
  4659                                  ;eot_ok:					
  4660                                  eotok:
  4661                                  		; 20/12/2022
  4662 000019F2 07                      		pop	es ; ((*)) es = cs = ds		
  4663 000019F3 59                      		pop	cx
  4664 000019F4 5A                      		pop	dx
  4665 000019F5 5F                      		pop	di
  4666                                  		;pop	ds ; 20/12/2022
  4667                                  
  4668                                  ; Check	for presence of	changeline
  4669                                  
  4670 000019F6 B415                    		mov	ah, 15h
  4671 000019F8 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4672                                  					; DL = drive ID
  4673                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4674                                  					; CX:DX	= number of sectors on the media
  4675 000019FA 720D                    		jc	short changeline_done
  4676 000019FC 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4677 000019FF 7508                    		jnz	short changeline_done
  4678                                  
  4679                                  ; we have a drive with change line support.
  4680                                  
  4681 00001A01 80C902                  		or	cl, 2		; fchangeline
  4682                                  					; signal type
  4683 00001A04 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4684                                  
  4685                                  ; we now try to set up the form factor for the types of media that we know
  4686                                  ; and can recognise. for the rest, we set the form factor as "other".
  4687                                  
  4688                                  changeline_done:
  4689                                  
  4690                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4691                                  			
  4692 00001A09 803E[D216]28            		cmp	byte [num_cyln], 40
  4693 00001A0E 750B                    		jnz	short try_80
  4694 00001A10 803E[D116]09            		cmp	byte [sec_trk], 9
  4695 00001A15 7653                    		jbe	short nextdrive
  4696                                  gotother:				
  4697 00001A17 B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4698 00001A19 EB4F                    		jmp	short nextdrive
  4699                                  ;-----------------------------------------------------------------------------
  4700                                  
  4701                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4702                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4703                                  
  4704                                  try_80:					
  4705 00001A1B 803E[D216]50            		cmp	byte [num_cyln], 80
  4706 00001A20 75F5                    		jnz	short gotother
  4707 00001A22 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4708 00001A24 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4709 00001A29 743F                    		jz	short nextdrive	; yeah,	go update
  4710                                  
  4711                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4712                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4713                                  		;mov	dh, ff144
  4714                                  		;cmp	byte [sec_trk], 18
  4715                                  		;je	short nextdrive
  4716                                  
  4717 00001A2B 803E[D116]0F            		cmp	byte [sec_trk], 15
  4718 00001A30 740B                    		jz	short got96
  4719                                  		
  4720 00001A32 803E[D116]09            		cmp	byte [sec_trk], 9
  4721 00001A37 75DE                    		jnz	short gotother
  4722                                  		
  4723 00001A39 B602                    		mov	dh, 2 ; ffSmall
  4724 00001A3B EB2D                    		jmp	short nextdrive
  4725                                  ; ----------------------------------------------------------------------------
  4726                                  
  4727                                  got96:					
  4728 00001A3D B601                    		mov	dh, 1 ; ff96tpi
  4729 00001A3F EB29                    		jmp	short nextdrive
  4730                                  ; ----------------------------------------------------------------------------
  4731                                  
  4732                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4733                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4734                                  
  4735                                  noparmsfromrom:				
  4736                                  		; 20/12/2022
  4737 00001A41 07                      		pop	es ; ((*)) 
  4738 00001A42 59                      		pop	cx
  4739 00001A43 5A                      		pop	dx
  4740 00001A44 5F                      		pop	di
  4741                                  		;pop	ds ; 20/12/2022
  4742                                  		
  4743 00001A45 B415                    		mov	ah, 15h
  4744 00001A47 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4745                                  					; DL = drive ID
  4746                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4747                                  					; CX:DX	= number of sectors on the media
  4748 00001A49 721F                    		jc	short nextdrive
  4749                                  		
  4750 00001A4B 80FC02                  		cmp	ah, 2		; is there changeline?
  4751 00001A4E 751A                    		jnz	short nextdrive
  4752                                  
  4753 00001A50 80C902                  		or	cl, 2 ; fchangeline
  4754 00001A53 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4755 00001A58 C606[D216]50            		mov	byte [num_cyln], 80
  4756 00001A5D B601                    		mov	dh, 1 ; ff96tpi 
  4757 00001A5F B00F                    		mov	al, 15
  4758 00001A61 3A06[2C01]              		cmp	al, [eot]
  4759 00001A65 7603                    		jbe	short nextdrive ; eot_ok2
  4760 00001A67 A2[2C01]                		mov	[eot], al
  4761                                  ; ----------------------------------------------------------------------------
  4762                                  
  4763                                  ;eot_ok2:
  4764                                  nextdrive:				
  4765 00001A6A 80C920                  		or	cl, 20h	; fi_own_physical
  4766                                  					; set this true	for all	drives
  4767 00001A6D 88D7                    		mov	bh, dl		; save int13 drive number
  4768                                  
  4769                                  ; we need to do special things if we have a single drive system and are setting
  4770                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4771                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4772                                  ; we detect the presence of this situation by examining the flag single for the
  4773                                  ; value 2.
  4774 00001A6F 803E[7800]02            		cmp	byte [single], 2
  4775 00001A74 7505                    		jnz	short not_special
  4776 00001A76 FECF                    		dec	bh		; int13	drive number same for logical drive
  4777 00001A78 80F120                  		xor	cl, 20h	; fi_own_physical
  4778                                  					; reset	ownership flag for logical drive
  4779                                  not_special:
  4780                                  
  4781                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4782                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4783                                  ; form factor is of type "ffother".
  4784                                  				
  4785 00001A7B 31C0                    		xor	ax, ax		; fill BDS for drive
  4786 00001A7D A0[D016]                		mov	al, [num_heads]
  4787 00001A80 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4788 00001A83 A0[D116]                		mov	al, [sec_trk]
  4789 00001A86 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4790 00001A89 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4791 00001A8C 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4792 00001A8F 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4793 00001A92 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4794 00001A95 8A1E[D216]              		mov	bl, [num_cyln]
  4795 00001A99 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4796 00001A9C 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4797 00001AA1 7511                    		jnz	short no_single
  4798 00001AA3 C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4799                                  					; single drive system
  4800                                  		; 18/12/2022
  4801 00001AA8 80C910                  		or	cl, 10h
  4802                                  		;or	cx, 10h	; fi_am_mult
  4803                                  					; set that this	is one of several drives
  4804 00001AAB 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4805                                  					; save flags
  4806 00001AAE 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4807                                  					; move to next BDS in list
  4808 00001AB0 FEC2                    		inc	dl		; add a	number
  4809 00001AB2 EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4810                                  ; ----------------------------------------------------------------------------
  4811                                  
  4812                                  no_single:				
  4813                                  		;inc	dl
  4814                                  		; 18/12/2022
  4815 00001AB4 42                      		inc	dx
  4816 00001AB5 E9F5FE                  		jmp	loop_drive
  4817                                  ; ----------------------------------------------------------------------------
  4818                                  
  4819                                  done_drives:	
  4820                                  		;mov	word [di+BDS.link], -1			
  4821 00001AB8 C705FFFF                		mov	word [di], -1	; set link to null
  4822                                  
  4823                                  ; set up all the hard drives in	the system
  4824                                  
  4825                                  		; 20/12/2022
  4826                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4827                                  dohard:					
  4828 00001ABC 8A36[4317]              		mov	dh, [hnum]
  4829 00001AC0 08F6                    		or	dh, dh		; done if no hardfiles
  4830 00001AC2 745B                    		jz	short static_configure
  4831 00001AC4 B280                    		mov	dl, 80h
  4832                                  dohard1:				
  4833 00001AC6 52                      		push	dx
  4834 00001AC7 8B3E[4617]              		mov	di, [end_of_bdss]
  4835 00001ACB 8A1E[7500]              		mov	bl, [drvmax]
  4836 00001ACF B700                    		mov	bh, 0		; first	primary	partition (or active)
  4837 00001AD1 E8C801                  		call	sethard
  4838 00001AD4 7208                    		jb	short hardfile_err
  4839 00001AD6 E8EA06                  		call	dmax_check	; error	if already 26 drives
  4840 00001AD9 7303                    		jnb	short hardfile_err
  4841 00001ADB E8FA06                  		call	xinstall_bds	; insert new bds into linked list
  4842                                  hardfile_err:				
  4843 00001ADE 5A                      		pop	dx
  4844 00001ADF FEC2                    		inc	dl		; next hard drive
  4845 00001AE1 FECE                    		dec	dh
  4846 00001AE3 75E1                    		jnz	short dohard1
  4847                                  
  4848                                  ; end of physical drive	initialization
  4849                                  
  4850                                  ; *** do not change the position of the following statement.
  4851                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4852                                  ; *** drive number of mini disk(s).
  4853                                  					
  4854 00001AE5 E8ED05                  		call	domini		; for setting up mini disks, if found
  4855                                  
  4856                                  ; -- begin added section
  4857                                  
  4858 00001AE8 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4859 00001AEC B280                    		mov	dl, 80h
  4860                                  dohardx1:				
  4861 00001AEE B701                    		mov	bh, 1		; do all subsequent primary partitions
  4862                                  dohardx2:				
  4863 00001AF0 52                      		push	dx
  4864 00001AF1 53                      		push	bx
  4865 00001AF2 8B3E[4617]              		mov	di, [end_of_bdss]
  4866 00001AF6 8A1E[7500]              		mov	bl, [drvmax]
  4867 00001AFA E89F01                  		call	sethard
  4868 00001AFD 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4869 00001AFF E8C106                  		call	dmax_check	; make sure <=26 drives
  4870 00001B02 7309                    		jnb	short dohardx4	; skip if error
  4871 00001B04 E8D106                  		call	xinstall_bds	; insert new bds into linked list
  4872 00001B07 5B                      		pop	bx		; get partition	number
  4873 00001B08 5A                      		pop	dx		; restore physical drive counts
  4874 00001B09 FEC7                    		inc	bh
  4875 00001B0B EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4876                                  ; ----------------------------------------------------------------------------
  4877                                  
  4878                                  dohardx4:				
  4879 00001B0D 5B                      		pop	bx		; unjunk partition number from stack
  4880 00001B0E 5A                      		pop	dx		; restore physical drive counts
  4881 00001B0F FEC2                    		inc	dl		; next hard drive
  4882 00001B11 FECE                    		dec	dh
  4883 00001B13 75D9                    		jnz	short dohardx1
  4884                                  
  4885                                  ; -- end changed section
  4886                                  
  4887                                  ;******************************************************************************
  4888                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4889                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4890                                  ; than two diskette drives
  4891                                  ;
  4892                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4893                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4894                                  ;		letters. to do this, scan for disk drives and assign logical
  4895                                  ;		drive number starting from 2 and then rescan diskette drives
  4896                                  ;		and assign next to the last logical drive number of last disk
  4897                                  ;		drive to the 3rd and 4th diskette drives.
  4898                                  ;******************************************************************************
  4899                                  
  4900 00001B15 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4901                                  		;jbe	short static_configure ; no - no need for remapping
  4902 00001B1A 7603                    		jbe	short no_remap
  4903 00001B1C E8F900                  		call	remap		; remap	bds chain to adjust driver letters
  4904                                  no_remap:
  4905                                  
  4906                                  ; End of drive initialization.
  4907                                  
  4908                                  ; ----------------------------------------------------------------------------
  4909                                  
  4910                                  ;we now decide, based on the configurations available so far, what
  4911                                  ;code or data we need to keep as a stay resident code. the following table
  4912                                  ;shows the configurations under consideration. they are listed in the order
  4913                                  ;of their current position memory.
  4914                                  ;
  4915                                  ;configuration will be done in two ways:
  4916                                  ;
  4917                                  ;first, we are going to set "static configuration". static configuration will
  4918                                  ;consider from basic configuration to endof96tpi configuration. the result
  4919                                  ;of static configuration will be the address the dynamic configuration will
  4920                                  ;use to start with.
  4921                                  ;
  4922                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4923                                  ;involves possible relocation of code or data. dynamic configuration routine
  4924                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4925                                  ;code individually. after these operation, [dosdatasg] will be set.
  4926                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4927                                  
  4928                                  ; -- begin changed section
  4929                                  ;
  4930                                  ;   1.	 basic configuration for msbio (endfloppy)
  4931                                  ;   2.   end96tpi	; a system that supports "change line error"
  4932                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4933                                  ;   4.	 endatrom	;some of at rom fix module.
  4934                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4935                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4936                                  ;
  4937                                  
  4938                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4939                                  
  4940                                  static_configure:			
  4941 00001B1F 8B3E[4617]              		mov	di, [end_of_bdss]
  4942 00001B23 81FF[1609]              		cmp	di, bdss	; 19/10/2022
  4943                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4944 00001B27 750D                    		jnz	short dynamic_configure	; that's the end, then
  4945                                  		; 18/10/2022
  4946 00001B29 BF[1609]                		mov	di, end96tpi
  4947                                  		;mov	di, offset harddrv ; end96tpi
  4948                                  					; keep everything up to	end96tpi
  4949 00001B2C 803E[7700]00            		cmp	byte [fhave96], 0
  4950 00001B31 7503                    		jnz	short dynamic_configure
  4951                                  		
  4952 00001B33 BF[FB08]                		mov	di, endfloppy
  4953                                  dynamic_configure:
  4954                                  		; 20/12/2022
  4955                                  		;push	cs
  4956                                  		;pop	es
  4957                                  		
  4958 00001B36 FC                      		cld			; clear direction
  4959                                  
  4960                                  ; -- end changed section
  4961                                  
  4962                                  		; 20/12/2022
  4963                                  		; ds = cs <> es
  4964                                  		; ss = 0
  4965                                  		; sp = 700h
  4966                                  
  4967 00001B37 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  4968 00001B3C 7577                    		jnz	short checkcmosclock
  4969 00001B3E 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  4970 00001B43 7470                    		jz	short checkcmosclock
  4971 00001B45 97                      		xchg	ax, di		; save allocation pointer in ax
  4972 00001B46 BE00F0                  		mov	si, 0F000h
  4973 00001B49 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  4974 00001B4B BE[4C17]                		mov	si, bios_date	; "01/10/84"
  4975 00001B4E BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  4976 00001B51 B90900                  		mov	cx, 9		; bdate_l
  4977                                  					; Only patch ROM for bios 01/10/84
  4978 00001B54 F3A6                    		repe cmpsb		; check	for date + zero	on end
  4979 00001B56 97                      		xchg	ax, di		; restore allocation pointer
  4980                                  
  4981                                  ; M015 -- begin changes
  4982                                  
  4983                                  		;jnz	short checkcmosclock
  4984                                  		; 02/10/2022
  4985 00001B57 7508                    		jnz	short checkcompaqbug
  4986                                  
  4987                                  ; install at rom fix
  4988                                  
  4989                                  		; 19/10/2022
  4990                                  		;mov	cx, offset endatrom
  4991 00001B59 B9[0914]                		mov	cx, endatrom
  4992                                  		;mov	si, offset ibm_disk_io
  4993 00001B5C BE[DB12]                		mov	si, ibm_disk_io
  4994 00001B5F EB46                    		jmp	short install_int13_patch
  4995                                  ; ----------------------------------------------------------------------------
  4996                                  
  4997                                  ; M065 -- begin changes
  4998                                  ;
  4999                                  ; On certain systems with Western Digital disk controllers, the
  5000                                  ; following detection scheme caused an unpredictable and serious
  5001                                  ; failure. In particular, they've implemented a nonstandard
  5002                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5003                                  ; what happens to be at es:[bx] and other memory locations indexed
  5004                                  ; off of it.
  5005                                  ;
  5006                                  ; Compaq was unable to tell us exactly which kind of systems have
  5007                                  ; the bug, except that they guarantee that the bug was fixed in
  5008                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5009                                  ; string, and then look for date codes before 08/04/86 to decide
  5010                                  ; when to install the hook.
  5011                                  
  5012                                  ;checkcmosclock:
  5013                                  ; 02/10/2022				
  5014                                  checkcompaqbug:
  5015                                  		; 20/12/2022
  5016                                  		; es = 0F000h
  5017                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5018                                  		;mov	es, ax
  5019                                  
  5020                                  		; 19/10/2022
  5021 00001B61 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5022                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5023 00001B68 754B                    		jnz	short not_compaq_patch
  5024 00001B6A 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5025                                  		;cmp	word ptr es:0FFECh, 'PM'
  5026 00001B71 7542                    		jnz	short not_compaq_patch
  5027 00001B73 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5028                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5029 00001B7A 7539                    		jnz	short not_compaq_patch
  5030                                  
  5031                                  ; We're running on a COMPAQ. Now look at the date code.
  5032                                  
  5033 00001B7C 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5034 00001B80 86E0                    		xchg	ah, al
  5035 00001B82 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5036                                  		;cmp	ax, '86'        ; 3836h
  5037                                  					; is it	86?
  5038 00001B85 772E                    		ja	short not_compaq_patch
  5039 00001B87 7218                    		jb	short do_compaq_patch
  5040 00001B89 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5041 00001B8D 86E0                    		xchg	ah, al
  5042 00001B8F 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5043                                  		;cmp	ax, '08'        ; 3038h
  5044                                  					; is it	08?
  5045 00001B92 7721                    		ja	short not_compaq_patch
  5046 00001B94 720B                    		jb	short do_compaq_patch
  5047 00001B96 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5048 00001B9A 86E0                    		xchg	ah, al
  5049 00001B9C 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5050                                  		;cmp	ax, '04'        ; 3034h
  5051                                  					; is it	04?
  5052 00001B9F 7314                    		jnb	short not_compaq_patch
  5053                                  
  5054                                  do_compaq_patch:			
  5055 00001BA1 B9[2A14]                		mov	cx, end_compaq_i13hook
  5056 00001BA4 BE[0914]                		mov	si, endatrom
  5057                                  
  5058                                  install_int13_patch:			
  5059 00001BA7 0E                      		push	cs
  5060 00001BA8 07                      		pop	es
  5061                                  		; 18/10/2022
  5062 00001BA9 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5063 00001BAD 8C0E[B600]              		mov	[Orig13+2], cs
  5064 00001BB1 29F1                    		sub	cx, si		; size of rom fix module
  5065 00001BB3 F3A4                    		rep movsb		; relocate it
  5066                                  
  5067                                  ; M065 -- end changes
  5068                                  
  5069                                  ; ----------------------------------------------------------------------------
  5070                                  not_compaq_patch:			; M065
  5071                                  		; 17/10/2022
  5072                                  checkcmosclock:	
  5073                                  		; 18/10/2022		
  5074 00001BB5 0E                      		push	cs
  5075 00001BB6 07                      		pop	es
  5076                                  
  5077                                  		; 20/12/2022
  5078                                  		; ds = cs = es
  5079                                  		; ss = 0
  5080                                  		; sp = 700h
  5081                                  
  5082 00001BB7 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5083 00001BBC 7518                    		jnz	short checkk09	; no
  5084                                  
  5085 00001BBE 893E[0605]              		mov	word [daycnttoday], di
  5086                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5087 00001BC2 B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5088 00001BC5 BE[2B14]                		mov	si, daycnt_to_day
  5089 00001BC8 F3A4                    		rep movsb
  5090 00001BCA 893E[0205]              		mov	word [bintobcd], di
  5091                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5092                                  					; let original segment stay
  5093 00001BCE B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5094 00001BD1 BE[FC14]                		mov	si, bin_to_bcd
  5095 00001BD4 F3A4                    		rep movsb
  5096                                  checkk09:				
  5097 00001BD6 57                      		push	di ; ? ; save ? ; 20/12/2022
  5098 00001BD7 B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5099 00001BDA B301                    		mov	bl, 1		; wait for 1 clock tick
  5100 00001BDC 268A3D                  		mov	bh, [es:di]
  5101 00001BDF F9                      		stc			; Assume we will fail
  5102 00001BE0 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5103                                  					; AL = condition type, BH = condition compare or mask value
  5104                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5105                                  					; DX = I/O port	address	if AL bit 4 set
  5106 00001BE2 5F                      		pop	di ; ?
  5107 00001BE3 721B                    		jc	short configdone ; 20/12/2022
  5108                                  
  5109 00001BE5 C606[7900]01            		mov	byte [fhavek09], 1
  5110                                  					; remember we have a k09 type
  5111 00001BEA 1E                      		push	ds
  5112 00001BEB 31C0                    		xor	ax, ax
  5113 00001BED 8ED8                    		mov	ds, ax
  5114                                  		
  5115 00001BEF 893EB001                		mov	[6Ch*4], di
  5116                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5117                                  					; new int 6ch handler
  5118                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5119 00001BF3 8C0EB201                		mov	word [6Ch*4+2], cs
  5120 00001BF7 1F                      		pop	ds
  5121                                  		; 20/12/2022
  5122                                  		; ds = cs = es
  5123 00001BF8 BE[0715]                		mov	si, int6c
  5124 00001BFB B9C201                  		mov	cx, endk09-int6c ; 459
  5125                                  		;mov	cx, 459		; endk09 - int6c
  5126                                  					; size of k09 routine
  5127 00001BFE F3A4                    		rep movsb		;
  5128                                  					; set up config	stuff for sysinit
  5129                                  ; ----------------------------------------------------------------------------
  5130                                  ; Set up config stuff for SYSINIT
  5131                                  
  5132                                  ; 17/10/2022
  5133                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5134                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5135                                  ; 09/12/2022
  5136                                  SETDRIVE equ SetDrive
  5137                                  GETBP equ GetBp
  5138                                  		
  5139                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5140                                  configdone:				
  5141 00001C00 0E                      		push	cs		; di is	final ending address of	msbio.
  5142 00001C01 1F                      		pop	ds
  5143 00001C02 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5144                                  		; 10/12/2022
  5145                                  		;shr	di, 1
  5146                                  		;shr	di, 1
  5147                                  		;shr	di, 1
  5148                                  		;shr	di, 1
  5149 00001C05 B104                    		mov	cl, 4
  5150 00001C07 D3EF                    		shr	di, cl		
  5151                                  		; 10/12/2022
  5152                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5153                                  		; 19/10/2022 - Temporary !
  5154                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5155                                  		; 14/08/2023
  5156 00001C09 83C770                  		add	di, 70h
  5157 00001C0C 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5158                                  
  5159                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5160                                  
  5161                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5162                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5163                                  	     
  5164                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5165                                  
  5166                                  ; ----------------------------------------------------------------------------
  5167                                  ; ----------------------------------------------------------------------------
  5168                                  %if 0
  5169                                  		mov	ax, [drvfat]	; get drive and	fat id
  5170                                  		; 22/12/2022
  5171                                  		; Note: SETDRIVES uses AL (drive number) only
  5172                                  		mov	bp, SETDRIVE
  5173                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5174                                  					; at 2C7h:4D7h = 70h:2A47h
  5175                                  		push	cs		; simulate far call
  5176                                  		call	call_bios_code	; get bds for drive
  5177                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5178                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5179                                  		push	cs
  5180                                  		call	call_bios_code
  5181                                  
  5182                                  	; resort to funky old segment definitions for now
  5183                                  
  5184                                  		; 22/12/2022
  5185                                  		;push	es		; copy bds to ds:di
  5186                                  		;pop	ds
  5187                                  
  5188                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5189                                  	;
  5190                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5191                                  	;	  back. Apparently it was what actually setup es: for the following
  5192                                  	; cas----
  5193                                  
  5194                                  		; 22/12/2022
  5195                                  		;xor	di, di
  5196                                  		;mov	al, [es:di]	; get fat id byte
  5197                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5198                                  		;mov	[es:drvfat+1], al
  5199                                  		;mov	ax, [es:drvfat]
  5200                                  		
  5201                                  		; 22/12/2022
  5202                                  		; ds = cs
  5203                                  	;;;	mov	al, [drvfat]
  5204                                  
  5205                                  	; cas -- why do a SECOND setdrive here???
  5206                                  
  5207                                  		; 22/12/2022
  5208                                  		;push	es		; save whatever's in es
  5209                                  		;push	ds		; copy bds to es:di
  5210                                  		;pop	es
  5211                                  		;push	cs		; copy Bios_Data to ds
  5212                                  		;pop	ds
  5213                                  	
  5214                                  	; 22/12/2022
  5215                                  	;;;	mov	bp, SETDRIVE
  5216                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5217                                  	;;;	push	cs		; simulate far call
  5218                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5219                                  	
  5220                                  		; 22/12/2022
  5221                                  		;push	es		; copy bds back to ds:di
  5222                                  		;pop	ds
  5223                                  		;pop	es		; pop whatever was in es
  5224                                  
  5225                                  	; Now we load in the MSDOS.SYS file
  5226                                  
  5227                                  	; 22/12/2022
  5228                                  	; -----
  5229                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5230                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5231                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5232                                  	;				; get size of fat on media
  5233                                  	;	;mov	es:16DEh, bl
  5234                                  	;	mov	[es:fbigfat], bl
  5235                                  	;	mov	cl, [di+8]
  5236                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5237                                  	;	;sub	es:16D8h, ax
  5238                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5239                                  	;				; need a logical sector number that will
  5240                                  	;				; be used by getclus(diskrd procedure)
  5241                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5242                                  	;	;sbb	es:16DAh, ax
  5243                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5244                                  	; -----
  5245                                  		
  5246                                  	; -----	; 22/12/2022
  5247                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5248                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5249                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5250                                  					; get size of fat on media
  5251                                  		mov	[fbigfat], bl
  5252                                  		mov	cl, [es:di+8]
  5253                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5254                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5255                                  					; need a logical sector number that will
  5256                                  					; be used by getclus(diskrd procedure)
  5257                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5258                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5259                                  	; ------
  5260                                  
  5261                                  		xor	ch, ch	 ; cx = sectors/cluster
  5262                                  
  5263                                  	; the boot program has left the directory at 0:500h
  5264                                  
  5265                                  		push	ds
  5266                                  		xor	di, di
  5267                                  		mov	ds, di
  5268                                  		mov	bx, [53Ah]
  5269                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5270                                  					; (First cluster field of 2nd dir entry
  5271                                  					; of root directory in the buffer at 500h)
  5272                                  		pop	ds
  5273                                  loadit:
  5274                                  		mov	ax, SYSINITSEG	; 46Dh
  5275                                  		;mov	ax, 46Dh	; sysinit segment
  5276                                  		mov	es, ax
  5277                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5278                                  		;mov	es, [es:271h]
  5279                                  
  5280                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5281                                  ; ----------------------------------------------------------------------------
  5282                                  
  5283                                  		;test	byte [cs:fbigfat], fbig
  5284                                  		test	byte [cs:fbigfat], 40h ; fbig
  5285                                  		jnz	short eofbig
  5286                                  		cmp	bx, 0FF7h
  5287                                  		jmp	short iseofx
  5288                                  ; ----------------------------------------------------------------------------
  5289                                  
  5290                                  eofbig:
  5291                                  		cmp	bx, 0FFF7h
  5292                                  iseofx:
  5293                                  		jb	short loadit	; keep loading until cluster = eof
  5294                                  
  5295                                  %endif
  5296                                  ; ----------------------------------------------------------------------------
  5297                                  ; ----------------------------------------------------------------------------
  5298                                  
  5299 00001C10 E8F803                  		call	setdrvparms	; 
  5300                                  
  5301                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5302                                  		;jmp	far 46Dh:267h
  5303 00001C13 EA[6702]3904            		jmp	SYSINITSEG:SYSINITSTART
  5304                                  
  5305                                  ; =============== S U B	R O U T	I N E ========================================
  5306                                  
  5307                                  ; Following are subroutines to support resident device driver initialization
  5308                                  ;
  5309                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5310                                  
  5311                                  ;	M035 -- begin changed section
  5312                                  
  5313                                  ;******************************************************************************
  5314                                  ; module name: remap
  5315                                  ;
  5316                                  ; descriptive name: all the code for himem that could be separated from msbio
  5317                                  ;
  5318                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5319                                  ;	     letters) if more than two diskette drives on the system.
  5320                                  ;
  5321                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5322                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5323                                  ;	       letters. to do this, scan for disk drives and assign logical
  5324                                  ;	       drive number starting from 2 and then rescan diskette drives
  5325                                  ;	       and assign next to the last logical drive number of last disk
  5326                                  ;	       drive to the 3rd and 4th diskette drives.
  5327                                  
  5328                                  ; input:       none
  5329                                  ; exit:	drive letters have been remapped in bds chain
  5330                                  ; exit error:  none
  5331                                  ; called from: msinit
  5332                                  ;
  5333                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5334                                  ;	  found in the system
  5335                                  ;	  this function assumes that there are no more than 26 drives assigned
  5336                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5337                                  ;	  this function assumes that the first entries in the chain are
  5338                                  ;	   floppy drives, and all the rest are hard drives
  5339                                  ;	  will alter the boot drive if necessary to reflect remapping
  5340                                  ;
  5341                                  ;******************************************************************************
  5342                                  
  5343                                  ; 17/10/2022
  5344                                  ; 02/10/2022
  5345                                  
  5346                                  remap:		; proc near		
  5347 00001C18 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5348                                  
  5349                                  ; search for 1st fixed disk physical drive num
  5350                                  
  5351                                  drive_loop:				
  5352 00001C1D 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5353                                  					; first	hard disk??
  5354 00001C21 7409                    		jz	short fdrv_found ; yes,	continue
  5355 00001C23 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5356                                  					; get next bds,	assume segment
  5357 00001C25 83FFFF                  		cmp	di, -1		; last bds?
  5358 00001C28 75F3                    		jnz	short drive_loop ; loop	if not
  5359 00001C2A EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5360                                  
  5361                                  ;------------------------------------------------------------------------------
  5362                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5363                                  ;logical drive nums to 3, 4, 5 etc.
  5364                                  ;------------------------------------------------------------------------------
  5365                                  
  5366                                  fdrv_found:				
  5367 00001C2C B002                    		mov	al, 2		; start	with logical drv num=2
  5368                                  fdrv_loop:				
  5369 00001C2E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5370                                  					; found	??
  5371 00001C31 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5372                                  					; ds:di--> next	bds
  5373                                  		;inc	al		; set num for next drive
  5374                                  		; 18/12/2022
  5375 00001C33 40                      		inc	ax
  5376 00001C34 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ??
  5377 00001C37 75F5                    		jnz	short fdrv_loop	; no - assign more disk	drives
  5378                                  
  5379                                  ;------------------------------------------------------------------------------
  5380                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5381                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5382                                  ; any more.
  5383                                  ;------------------------------------------------------------------------------
  5384                                  
  5385 00001C39 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5386                                  					; get first bds
  5387 00001C3E 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5388                                  					; ds:di-->bds2
  5389 00001C40 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5390 00001C45 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5391                                  remap_loop1:				
  5392 00001C48 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5393                                  					; set new num to next floppy
  5394 00001C4A 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5395 00001C4D FEC0                    		inc	al		; new number for next floppy
  5396 00001C4F FECC                    		dec	ah		; count	down extra floppies
  5397 00001C51 75F5                    		jnz	short remap_loop1
  5398                                  
  5399                                  ; now we've got to adjust the boot drive if we reassigned it
  5400                                  
  5401 00001C53 2EA0[CA16]              		mov	al, [cs:drvfat]
  5402 00001C57 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5403 00001C59 7220                    		jb	short rmap_exit
  5404 00001C5B 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5405 00001C60 7204                    		jb	short remap_boot_flop ;	brif so
  5406                                  
  5407                                  ; we've got to remap the boot hard drive
  5408                                  ; subtract the number of EXTRA floppies from it
  5409                                  
  5410 00001C62 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5411 00001C64 EB05                    		jmp	short remap_change_boot_drv
  5412                                  ; ---------------------------------------------------------------------------
  5413                                  
  5414                                  ; we've got to remap the boot floppy.
  5415                                  ; add the number of hard drive partitions to it
  5416                                  
  5417                                  remap_boot_flop:			
  5418 00001C66 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5419                                  remap_change_boot_drv:			
  5420 00001C6B 2EA2[CA16]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5421 00001C6F FEC0                    		inc	al
  5422 00001C71 1E                      		push	ds
  5423 00001C72 BF3904                  		mov	di, SYSINITSEG	; 46Dh
  5424                                  		;mov	di, 46Dh	; SYSINIT segment
  5425 00001C75 8EDF                    		mov	ds, di
  5426 00001C77 A2[9602]                		mov	[DEFAULTDRIVE], al
  5427                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5428                                  					; pass it to sysinit as	well
  5429 00001C7A 1F                      		pop	ds
  5430                                  rmap_exit:				
  5431 00001C7B C3                      		retn
  5432                                  
  5433                                  ; =============== S U B	R O U T	I N E =======================================
  5434                                  
  5435                                  ; 17/10/2022
  5436                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5437                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5438                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5439                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5440                                  ;**************************************************
  5441                                  ; getboot - get the boot sector for a hard disk
  5442                                  ;
  5443                                  ; Reads the boot sector from a specified drive into
  5444                                  ; a buffer at the top of memory.
  5445                                  ;
  5446                                  ; dl = int13 drive number to read boot sector for
  5447                                  ;**************************************************
  5448                                  
  5449                                  ; 17/10/2022
  5450                                  bootbias equ 200h
  5451                                  
  5452                                  getboot:	; proc near		
  5453                                  		
  5454                                  		; 08/04/2018
  5455                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5456                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5457                                  		; 02/10/2022 - Retro DOS v4.0
  5458                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5459                                  
  5460 00001C7C 2EA1[CD16]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5461 00001C80 8EC0                    		mov	es, ax
  5462                                  		; 17/10/2022
  5463 00001C82 BB0002                  		mov	bx, bootbias ; 200h
  5464                                  		;mov	bx, 200h	; bootbias
  5465                                  					; load BX, ES:BX is where sector goes
  5466 00001C85 B80102                  		mov	ax, 201h
  5467 00001C88 30F6                    		xor	dh, dh
  5468 00001C8A B90100                  		mov	cx, 1
  5469 00001C8D CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5470                                  					; AL = number of sectors to read, CH = track, CL = sector
  5471                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5472                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5473 00001C8F 7209                    		jb	short erret
  5474                                  		; 17/10/2022
  5475 00001C91 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5476                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5477                                  					; Dave Litton magic word?
  5478 00001C98 7401                    		jz	short norm_ret	; yes
  5479                                  erret:					
  5480 00001C9A F9                      		stc
  5481                                  norm_ret:				
  5482 00001C9B C3                      		retn
  5483                                  
  5484                                  ; =============== S U B	R O U T	I N E =======================================
  5485                                  
  5486                                  ; 28/12/2018 - Retro DOS v4.0 
  5487                                  
  5488                                  ;***************************************************************************
  5489                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5490                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5491                                  ;   our own logical sectors start. we also read in our boot sector to
  5492                                  ;   determine version number
  5493                                  ;
  5494                                  ;   inputs:	dl is rom drive number (80...)
  5495                                  ;		bh is partition number (0....) 
  5496                                  ;		ds:di points to bds
  5497                                  ;   outputs:	carry clear -> bpb is filled in
  5498                                  ;		carry set   -> bpb is left uninitialized due to error
  5499                                  ;	trashes (at least) si, cx
  5500                                  ;	MUST PRESERVE ES:!!!!
  5501                                  ;***************************************************************************
  5502                                  
  5503                                  sethard:	; proc near		
  5504                                  		; 14/08/2023
  5505                                  		; ds = cs = BIOSDATA
  5506 00001C9C 57                      		push	di
  5507 00001C9D 53                      		push	bx
  5508                                  		;push	ds  ; ds = cs = BIOSDATA ; 14/08/2023
  5509 00001C9E 06                      		push	es
  5510 00001C9F 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5511 00001CA2 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5512 00001CA5 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5513                                  					; fnon_removable
  5514 00001CA9 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5515                                  					; ffHardFile
  5516 00001CAD C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5517 00001CB2 88FE                    		mov	dh, bh		; partition number
  5518 00001CB4 52                      		push	dx
  5519 00001CB5 B408                    		mov	ah, 8
  5520 00001CB7 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5521                                  					; DL = drive number
  5522                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5523                                  					; DL = number of consecutive drives
  5524                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5525 00001CB9 FEC6                    		inc	dh
  5526 00001CBB 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5527 00001CBE 5A                      		pop	dx
  5528 00001CBF 7263                    		jb	short setret	; error	if no hard disk
  5529 00001CC1 80E13F                  		and	cl, 3Fh
  5530 00001CC4 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5531 00001CC7 52                      		push	dx		; save partition number
  5532 00001CC8 E8B1FF                  		call	getboot
  5533 00001CCB 5A                      		pop	dx		; restore partition number
  5534 00001CCC 7256                    		jb	short setret
  5535 00001CCE BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5536                                  
  5537                                  ; The first 'active' partition is 00, the second is 01....
  5538                                  ;   then the remainder of the 'primary' but non-active partitions
  5539                                  
  5540                                  act_part:				
  5541 00001CD1 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5542 00001CD6 7418                    		jz	short no_act	; no
  5543 00001CD8 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5544 00001CDC 740C                    		jz	short got_good_act
  5545 00001CDE 26803F04                		cmp	byte [es:bx], 4
  5546 00001CE2 7406                    		jz	short got_good_act
  5547 00001CE4 26803F06                		cmp	byte [es:bx], 6
  5548 00001CE8 7506                    		jnz	short no_act
  5549                                  got_good_act:				
  5550 00001CEA 08F6                    		or	dh, dh		; is this our target partition #?
  5551 00001CEC 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5552 00001CEE FECE                    		dec	dh		; count	down
  5553                                  no_act:					
  5554 00001CF0 83C310                  		add	bx, 16
  5555 00001CF3 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5556                                  					; last entry done?
  5557 00001CF7 75D8                    		jnz	short act_part	; no, process next entry
  5558 00001CF9 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5559                                  					; restore original value of bx
  5560                                  
  5561                                  ; Now scan the non-active partitions
  5562                                  
  5563                                  get_primary:				
  5564 00001CFC 26F647FC80              		test	byte [es:bx-4], 80h
  5565 00001D01 7518                    		jnz	short not_prim	; we've already scanned
  5566                                  					; the ACTIVE ones
  5567 00001D03 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5568 00001D07 740C                    		jz	short got_prim
  5569 00001D09 26803F04                		cmp	byte [es:bx], 4
  5570 00001D0D 7406                    		jz	short got_prim
  5571 00001D0F 26803F06                		cmp	byte [es:bx], 6
  5572 00001D13 7506                    		jnz	short not_prim
  5573                                  got_prim:				
  5574 00001D15 08F6                    		or	dh, dh		; is this our target partition?
  5575 00001D17 740F                    		jz	short set2
  5576 00001D19 FECE                    		dec	dh
  5577                                  not_prim:				
  5578 00001D1B 83C310                  		add	bx, 16
  5579 00001D1E 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5580 00001D22 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5581                                  setret:					
  5582 00001D24 F9                      		stc			; error	return
  5583 00001D25 E9A002                  		jmp	ret_hard_err
  5584                                  
  5585                                  ; ---------------------------------------------------------------------------
  5586                                  
  5587                                  ;  until we get the real logical boot record and get the bpb,
  5588                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5589                                  ;  for the convenience of the computation.
  5590                                  ;
  5591                                  ;  at the end of this procedure, if a bpb information is gotten from
  5592                                  ;  the valid boot record, then we are going to use those bpb information
  5593                                  ;  without change.
  5594                                  ;
  5595                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5596                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5597                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5598                                  
  5599                                  set2:					
  5600                                  		; 14/08/2023
  5601                                  		; ds = cs = BIOSDATA segment (0070h)
  5602 00001D28 8816[CF16]              		mov	[rom_drv_num], dl
  5603                                  		;mov	[cs:rom_drv_num], dl
  5604                                  			; save the rom bios drive number we are handling now.
  5605 00001D2C 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5606 00001D30 268B5706                		mov	dx, [es:bx+6]
  5607                                  
  5608                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5609                                  ; sectors should be allowed	
  5610                                  
  5611 00001D34 83E801                  		sub	ax, 1
  5612 00001D37 83DA00                  		sbb	dx, 0
  5613 00001D3A 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5614 00001D3E 2613570A                		adc	dx, [es:bx+10]
  5615 00001D42 7305                    		jnb	short okdrive
  5616 00001D44 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5617                                  okdrive:				
  5618 00001D49 268B4704                		mov	ax, [es:bx+4]
  5619 00001D4D 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5620                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5621 00001D50 268B4706                		mov	ax, [es:bx+6]
  5622 00001D54 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5623 00001D57 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5624 00001D5B 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5625 00001D5F 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5626 00001D62 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5627                                  					; bpb->maxsec =	p->partitionlength
  5628 00001D65 83FA00                  		cmp	dx, 0
  5629 00001D68 7705                    		ja	short okdrive_1
  5630 00001D6A 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5631 00001D6D 72B5                    		jb	short setret	; return -1;
  5632                                  okdrive_1:				
  5633 00001D6F 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5634 00001D72 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5635 00001D75 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5636                                  					; usually equal	to the # of sec/trk.
  5637 00001D77 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5638 00001D7A 50                      		push	ax
  5639 00001D7B 89D0                    		mov	ax, dx
  5640 00001D7D 31D2                    		xor	dx, dx
  5641 00001D7F F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5642                                  					; (track)temp_h:ax + (sector)dx
  5643                                  		; 17/10/2022
  5644                                  		;mov	[cs:temp_h], ax
  5645                                  		; 14/08/2023 (ds=cs)
  5646 00001D81 A3[2905]                		mov	[temp_h], ax
  5647 00001D84 58                      		pop	ax
  5648 00001D85 F7F3                    		div	bx
  5649 00001D87 88D1                    		mov	cl, dl
  5650 00001D89 FEC1                    		inc	cl
  5651 00001D8B 31DB                    		xor	bx, bx
  5652 00001D8D 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5653 00001D90 50                      		push	ax
  5654 00001D91 31D2                    		xor	dx, dx
  5655                                  		;mov	ax, [cs:temp_h]
  5656 00001D93 A1[2905]                		mov	ax, [temp_h] ; 14/08/2023
  5657 00001D96 F7F3                    		div	bx
  5658                                  		;mov	[cs:temp_h], ax
  5659 00001D98 A3[2905]                		mov	[temp_h], ax ; 14/08/2023
  5660 00001D9B 58                      		pop	ax
  5661 00001D9C F7F3                    		div	bx		; dl is head, ax is cylinder
  5662                                  		; 14/08/2023 (ds=cs)
  5663 00001D9E 833E[2905]00            		cmp	word [temp_h], 0
  5664                                  		;cmp	word [cs:temp_h], 0
  5665 00001DA3 775F                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5666 00001DA5 3D0004                  		cmp	ax, 1024
  5667 00001DA8 775A                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5668                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5669                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5670                                  			; ('ja' must be 'jnb')
  5671                                  okdrive_2:
  5672                                   		; 28/07/2019
  5673                                  ; dl is head.
  5674                                  ; ax is cylinder
  5675                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5676                                  
  5677                                  ;*** for mini disks ***
  5678                                  
  5679 00001DAA 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5680                                  					; check	for mini disk
  5681 00001DAE 7503                    		jnz	short oknotmini	; not mini disk.
  5682 00001DB0 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5683                                  					; set the physical track number
  5684                                  oknotmini:
  5685                                  ;*** end of added logic for mini disk
  5686                                  				
  5687 00001DB3 D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5688 00001DB5 D0CC                    		ror	ah, 1		; two bits of upper byte
  5689 00001DB7 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5690 00001DBA 08E1                    		or	cl, ah		; move two bits	to correct spot
  5691 00001DBC 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5692                                  					; cl is	sector + 2 high	bits of	cylinder
  5693 00001DBE 88D6                    		mov	dh, dl		; dh is	head
  5694                                  		
  5695                                  		; 14/08/2023 (ds=cs)
  5696 00001DC0 8A16[CF16]              		mov	dl, [rom_drv_num]
  5697                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  5698                                  
  5699                                  
  5700                                  ; cl is sector + 2 high bits of cylinder
  5701                                  ; ch is low 8 bits of cylinder
  5702                                  ; dh is head
  5703                                  ; dl is drive
  5704                                  
  5705                                  ; for convenience, we are going to read the logical boot sector
  5706                                  ; into cs:disksector area.
  5707                                  
  5708                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5709                                  ; is to be read in is cs:disksector.
  5710                                  
  5711 00001DC4 0E                      		push	cs
  5712 00001DC5 07                      		pop	es
  5713 00001DC6 BB[4E01]                		mov	bx, disksector	; for convenience,
  5714                                  					; we are going to read the logical boot	sector
  5715                                  					; into cs:disksector area.
  5716 00001DC9 B80102                  		mov	ax, 201h
  5717 00001DCC CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5718                                  					; AL = number of sectors to read, CH = track, CL = sector
  5719                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5720                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5721                                  
  5722                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5723                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5724                                  ; media if we recognize the version number.
  5725                                  
  5726                                  		; 14/08/2023
  5727                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  5728                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  5729 00001DCE 53                      		push	bx
  5730 00001DCF 50                      		push	ax
  5731                                  		; 14/08/2023
  5732                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  5733 00001DD0 803FE9                  		cmp	byte [bx], 0E9h
  5734                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5735 00001DD3 740B                    		jz	short check_1_ok ; yes
  5736 00001DD5 803FEB                  		cmp	byte [bx], 0EBh
  5737                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5738 00001DD8 7525                    		jnz	short invalid_boot_record ; no
  5739 00001DDA 807F0290                		cmp	byte [bx+2], 90h
  5740                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5741 00001DDE 751F                    		jnz	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  5742                                  check_1_ok:	
  5743                                  		; 14/08/2023			
  5744 00001DE0 BB[5901]                		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  5745                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5746                                  					; point	to the bpb in the boot record
  5747                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5748 00001DE3 8A470A                  		mov	al, [bx+10] ; 14/08/2023 
  5749                                  					; get the mediadescriptor byte
  5750 00001DE6 24F0                    		and	al, 0F0h	; mask off low nibble
  5751 00001DE8 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5752 00001DEA 7513                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5753                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5754 00001DEC 813F0002                		cmp	word [bx], 512 ; 14/08/2023
  5755 00001DF0 750D                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5756                                  
  5757                                  check2_ok:				; yes, mediadescriptor ok.
  5758 00001DF2 8A4702                  		mov	al, [bx+2] ; 14/08/2023
  5759                                  		;mov	al, [cs:bx+2]	; now make sure that
  5760                                  					; the sectorspercluster	is
  5761                                  					; a power of 2
  5762                                  					;
  5763                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5764                                  					; get the sectorspercluster
  5765 00001DF5 08C0                    		or	al, al		; is it	zero?
  5766 00001DF7 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5767                                  
  5768                                  ck_power_of_two:			
  5769 00001DF9 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5770 00001DFB 73FC                    		jnb	short ck_power_of_two
  5771 00001DFD 740B                    		jz	short valid_boot_record
  5772                                  
  5773                                  invalid_boot_record:			
  5774 00001DFF 58                      		pop	ax
  5775 00001E00 5B                      		pop	bx
  5776 00001E01 E90F01                  		jmp	unknown		; jump to invalid boot record
  5777                                  					; unformatted or illegal media.
  5778                                  	; 14/08/2023	
  5779                                  ; ---------------------------------------------------------------------------
  5780                                  setret_brdg:				
  5781 00001E04 E91DFF                  		jmp	setret
  5782                                  ; ---------------------------------------------------------------------------
  5783                                  
  5784                                  unknown3_0_j:				
  5785 00001E07 E90D01                  		jmp	unknown3_0	; legally formatted media,
  5786                                  					; although, content might be bad.
  5787                                  ; ---------------------------------------------------------------------------
  5788                                  
  5789                                  valid_boot_record:			
  5790 00001E0A 58                      		pop	ax
  5791 00001E0B 5B                      		pop	bx
  5792                                  
  5793                                  ; Signature found. Now check version.
  5794                                  
  5795                                  		; 14/08/2023
  5796 00001E0C 817F08322E              		cmp	word [bx+8], '2.'
  5797                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5798                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5799 00001E11 7506                    		jnz	short try5
  5800 00001E13 807F0A30                		cmp	byte [bx+10], '0'
  5801                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5802                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5803                                  		; 14/08/2023
  5804                                  		;jnz	short try5
  5805                                  		;jmp	short copybpb
  5806 00001E17 7425                    		jz	short copybpb
  5807                                  
  5808                                  	; 14/08/2023
  5809                                  ; ---------------------------------------------------------------------------
  5810                                  ;
  5811                                  ;setret_brdg:				
  5812                                  ;		jmp	setret
  5813                                  ; ---------------------------------------------------------------------------
  5814                                  ;
  5815                                  ;unknown3_0_j:				
  5816                                  ;		jmp	unknown3_0	; legally formatted media,
  5817                                  ;					; although, content might be bad.
  5818                                  ; ---------------------------------------------------------------------------
  5819                                  
  5820                                  try5:					
  5821 00001E19 E8B001                  		call	cover_fdisk_bug
  5822                                  
  5823                                  ; see if it is an os2 signature
  5824                                  
  5825                                  		; 14/08/2023
  5826                                  		; ds = cs = BIOSDATA segment
  5827 00001E1C 817F08302E              		cmp	word [bx+8], '0.'
  5828                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5829                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5830 00001E21 750C                    		jnz	short no_os2
  5831 00001E23 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  5832                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5833 00001E26 2C31                    		sub	al, '1'
  5834                                  		;sub	al, 31h		; '1'
  5835 00001E28 24FE                    		and	al, 0FEh
  5836 00001E2A 7412                    		jz	short copybpb	; accept either	'1' or '2'
  5837 00001E2C E9E400                  		jmp	unknown
  5838                                  ; ---------------------------------------------------------------------------
  5839                                  
  5840                                  ; no os2 signature, this is to check for real dos versions
  5841                                  
  5842                                  no_os2:					
  5843                                  		; 14/08/2023
  5844                                  		; ds = cs = BIOSDATA
  5845 00001E2F 817F08332E              		cmp	word [bx+8], '3.'			
  5846                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5847                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5848 00001E34 72D1                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5849                                  					; do not trust it, but still legal.
  5850 00001E36 7506                    		jnz	short copybpb	; honor	os2 boot record
  5851                                  					; or dos 4.0 version
  5852 00001E38 807F0A31                		cmp	byte [bx+10], '1' ; 14/08/2023
  5853                                  		;cmp	byte [cs:bx+10], '1'
  5854                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5855 00001E3C 72C9                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  5856                                  copybpb:
  5857                                  
  5858                                  ; 03/10/2022
  5859                                  
  5860                                  ; we have a valid boot sector. use the bpb in it to build the
  5861                                  ; bpb in bios. it is assumed that only
  5862                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5863                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5864                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5865                                  ; need to be set (all other values in already). fbigfat is also set.
  5866                                  
  5867                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5868                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5869                                  ; and system id according to the boot record.
  5870                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5871                                  
  5872                                  		; 10/12/2022
  5873                                  		; (number of FATs optimization)
  5874 00001E3E BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5875                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5876                                  		;mov	cl, [cs:si+05h]
  5877                                  		; 14/08/2023
  5878                                  		; ds = cs = BIOSDATA segment (0070h)
  5879 00001E41 8A4C05                  		mov	cl, [si+05h] ; number of FATs
  5880                                  
  5881 00001E44 807C1B29                		cmp	byte [si+1Bh], 29h ; 14/08/2023
  5882                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5883                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5884                                  					; [disksector+EXT_BOOT.SIG]
  5885                                  					; EXT_BOOT_SIGNATURE
  5886 00001E48 7542                    		jnz	short copybpb_fat ; conventional fat system
  5887                                  
  5888                                  		; 03/10/2022
  5889                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5890                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5891                                  		;	     number of FATs must be 2 ; =*?=
  5892                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5893                                  		;
  5894                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5895                                  
  5896                                  		; 10/12/2022
  5897                                  		;cmp	byte [cs:disksector+10h], 0
  5898                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5899                                  		;jnz	short copybpb_fat ; a fat system.
  5900 00001E4A 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5901 00001E4C 753E                    		jnz	short copybpb_fat ; a fat system.
  5902                                  
  5903                                  ; non fat based	media.
  5904                                  
  5905 00001E4E 57                      		push	di
  5906                                  		; 14/08/2023
  5907                                  		;push	ds  ; ds = cs = BIOSDATA segment
  5908 00001E4F 1E                      		push	ds
  5909 00001E50 07                      		pop	es
  5910                                  		; 14/08/2023
  5911                                  		; ds = cs
  5912                                  		;push	cs
  5913                                  		;pop	ds
  5914                                  
  5915                                  		; 10/12/2022
  5916                                  		; (number of FATs optimization)
  5917                                  		; SI = disksector+11
  5918                                  		; 17/10/2022
  5919                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5920                                  		;mov	si, disksector+11
  5921 00001E51 83C706                  		add	di, 6		; add di,BDS.BPB
  5922                                  
  5923                                  ; just for completeness, we'll make sure that total_sectors and
  5924                                  ; big_total_sectors aren't both zero. I've seen examples of
  5925                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5926                                  ; got that way. If it occurs, then use the values from the
  5927                                  ; partition table.
  5928                                  
  5929                                  		; 18/12/2022
  5930 00001E54 29C9                    		sub	cx, cx 
  5931                                  
  5932                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5933                                  		;jnz	short already_nonz 
  5934                                  		;			; how about big_total?
  5935                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5936                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5937                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5938                                  		;jnz	short already_nonz
  5939                                  
  5940                                  		; 14/08/2023
  5941                                  		; ds = cs = BIOSDATA segment (0070h)
  5942                                  
  5943                                  		; 18/12/2022
  5944                                  		;cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5945                                  		; 14/08/2023
  5946 00001E56 394C08                  		cmp	[si+8], cx ; 0
  5947 00001E59 751C                    		jnz	short already_nonz
  5948                                  					     	; how about big_total?
  5949                                  		;cmp	[cs:si+15h], cx ; 0 	; [cs:si+EBPB.BIGTOTALSECTORS]
  5950                                  		; 14/08/2023
  5951 00001E5B 394C15                  		cmp	[si+15h], cx ; 0
  5952 00001E5E 7517                    		jnz	short already_nonz	; we're okay if any are != 0
  5953                                  		;cmp	[cs:si+17h], cx ; 0  	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5954 00001E60 394C17                  		cmp	[si+17h], cx ; 0
  5955 00001E63 7512                    		jnz	short already_nonz
  5956                                  
  5957                                  ; now let's copy the values from the partition table (now in the BDS)
  5958                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5959                                  
  5960 00001E65 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5961                                  		; 14/08/2023
  5962                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5963 00001E68 894408                  		mov	[si+8], ax
  5964 00001E6B 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5965                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5966 00001E6E 894415                  		mov	[si+15h], ax
  5967 00001E71 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5968                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5969 00001E74 894417                  		mov	[si+17h], ax
  5970                                  
  5971                                  already_nonz:	
  5972                                  		; 18/12/2022
  5973                                  		; cx = 0
  5974 00001E77 B119                    		mov	cl, 25		
  5975                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5976 00001E79 F3A4                    		rep movsb
  5977 00001E7B 1F                      		pop	ds
  5978 00001E7C 5F                      		pop	di
  5979 00001E7D 06                      		push	es
  5980 00001E7E 1E                      		push	ds
  5981 00001E7F 07                      		pop	es
  5982 00001E80 0E                      		push	cs
  5983 00001E81 1F                      		pop	ds
  5984                                  		; 14/08/2023
  5985 00001E82 BD[3607]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  5986                                  		; 18/12/2022
  5987                                  		;mov	bp, mov_media_ids
  5988                                  		;;mov	bp, 751h	; mov_media_ids
  5989                                  					; at 2C7h:751h = 70h:2CC1h
  5990                                  					; set volume id, systemid, serial.
  5991 00001E85 0E                      		push	cs		; simulate far call
  5992 00001E86 E8CEF8                  		call	call_bios_code
  5993                                  		; 14/08/2023
  5994                                  		; ds = cs = es
  5995                                  		;push	es
  5996                                  		;pop	ds
  5997                                  		;pop	es
  5998 00001E89 E93501                  		jmp	goodret
  5999                                  ; ---------------------------------------------------------------------------
  6000                                  
  6001                                  ; ****** cas ---
  6002                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  6003                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  6004                                  ; happens with some frequency -- perhaps through some OS/2 setup
  6005                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  6006                                  ; from the boot sector into the DPB anyway, we've just been using
  6007                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  6008                                  ; we'll go ahead and copy it into the DPB, except in the case
  6009                                  ; that it equals zero, in which case we just use the values in
  6010                                  ; the DPB from the partition table.
  6011                                  
  6012                                  ; 17/10/2022
  6013                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  6014                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  6015                                  ; 09/12/2022
  6016                                  MOVMEDIAIDS equ mov_media_ids
  6017                                  CLEARIDS equ clear_ids
  6018                                  ; 11/09/2023
  6019                                  CLEARIDS_X equ clear_ids_x
  6020                                  
  6021                                  copybpb_fat:
  6022                                  		; 10/12/2022
  6023                                  		; (number of FATs optimization)
  6024                                  		; SI = disksector+11				
  6025                                  		; 17/10/2022
  6026                                  		;mov	si, disksector+11
  6027                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6028                                  					; cs:si	-> bpb in boot
  6029 00001E8C 31D2                    		xor	dx, dx
  6030                                  		; 14/08/2023
  6031                                  		; ds = cs = BIOSDATA segment (0070h)
  6032 00001E8E 8B4408                  		mov	ax, [si+8]
  6033                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6034                                  					; get totsec from boot sec
  6035 00001E91 09C0                    		or	ax, ax
  6036 00001E93 7514                    		jnz	short copy_totsec ; if non zero, use that
  6037 00001E95 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  6038                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6039                                  					; get the big version
  6040                                  					; (32 bit total	sectors)
  6041 00001E98 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  6042                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6043                                  		; 10/12/2022
  6044                                  		; (number of FATs optimization)
  6045                                  		; CL = number of FATs (2 or 1) 
  6046 00001E9B 89D3                    		mov	bx, dx		; see if it is a big zero
  6047 00001E9D 09C3                    		or	bx, ax
  6048 00001E9F 7508                    		jnz	short copy_totsec
  6049                                  			; screw it. it was bogus.
  6050 00001EA1 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6051 00001EA4 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6052 00001EA7 EB06                    		jmp	short fat_big_small
  6053                                  
  6054                                  		;mov	cx, dx
  6055                                  		;or	cx, ax		; see if it is a big zero
  6056                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6057                                  copy_totsec:				
  6058 00001EA9 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6059                                  					; make DPB match boot sec
  6060 00001EAC 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6061                                  
  6062                                  		; 10/12/2022
  6063                                  ;totsec_already_set:			
  6064                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6065                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6066                                  
  6067                                  ; determine fat entry size.
  6068                                  
  6069                                  fat_big_small:
  6070                                  
  6071                                  ;at this moment dx;ax = total sector number
  6072                                  
  6073                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6074                                  ;from the BPB on the disk
  6075                                  				
  6076                                  		; 14/08/2023
  6077                                  		; ds = cs = BIOSDATA segment (0070h)
  6078                                  				
  6079 00001EAF 8B5C03                  		mov	bx, [si+3]
  6080                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6081                                  					; get #reserved_sectors	from BPB
  6082 00001EB2 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6083                                  					; update BDS field
  6084 00001EB5 29D8                    		sub	ax, bx
  6085 00001EB7 83DA00                  		sbb	dx, 0		; update the count
  6086                                  		; 14/08/2023
  6087 00001EBA 8B5C0B                  		mov	bx, [si+0Bh]
  6088                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6089                                  					; bx = sectors/fat
  6090 00001EBD 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6091                                  					; set in bds bpb
  6092                                  		; 10/12/2022
  6093                                  		; (number of FATs optimization)
  6094                                  		; CL = number of FATs (2 or 1) 
  6095                                  		;dec	cl ; *
  6096                                  		; 18/12/2022
  6097 00001EC0 49                      		dec	cx ; *
  6098 00001EC1 D3E3                    		shl	bx, cl
  6099                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6100                                  		
  6101 00001EC3 29D8                    		sub	ax, bx		; sub #	fat sectors
  6102 00001EC5 83DA00                  		sbb	dx, 0
  6103 00001EC8 8B5C06                  		mov	bx, [si+6] ; 14/08/2023
  6104                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6105                                  					; # root entries
  6106 00001ECB 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6107                                  					; set in bds bpb
  6108 00001ECE B104                    		mov	cl, 4
  6109 00001ED0 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6110 00001ED2 29D8                    		sub	ax, bx		; sub #	dir sectors
  6111 00001ED4 83DA00                  		sbb	dx, 0		;
  6112                                  					; dx:ax	now contains the
  6113                                  					; # of data sectors
  6114 00001ED7 31C9                    		xor	cx, cx ; *
  6115 00001ED9 8A4C02                  		mov	cl, [si+2] ; 14/08/2023
  6116                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6117                                  					; sectors per cluster
  6118 00001EDC 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6119                                  					; set in bios bpb
  6120 00001EDF 50                      		push	ax
  6121 00001EE0 89D0                    		mov	ax, dx
  6122 00001EE2 31D2                    		xor	dx, dx
  6123 00001EE4 F7F1                    		div	cx		; cx = sectors per cluster
  6124                                  		; 14/08/2023 (ds=cs)
  6125 00001EE6 A3[2905]                		mov	[temp_h], ax
  6126                                  		;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6127                                  					; # clusters.
  6128 00001EE9 58                      		pop	ax
  6129 00001EEA F7F1                    		div	cx
  6130                                  		;cmp	word [cs:temp_h], 0
  6131 00001EEC 833E[2905]00            		cmp	word [temp_h], 0 ; 14/08/2023
  6132 00001EF1 7718                    		ja	short toobig_ret ; too big cluster number
  6133 00001EF3 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6134                                  					; is this 16-bit fat?
  6135 00001EF6 7205                    		jb	short copymediaid ; no,	small fat
  6136                                  		; 17/10/2022
  6137 00001EF8 800E[CC16]40            		or	byte [fbigfat], 40h
  6138                                  		;or	ds:fbigfat, 40h	; fbig
  6139                                  					; 16 bit fat
  6140                                  copymediaid:				
  6141 00001EFD 06                      		push	es
  6142 00001EFE 1E                      		push	ds
  6143 00001EFF 07                      		pop	es
  6144                                  		; 14/08/2023
  6145                                  		; ds = cs = BIOSDATA
  6146                                  		;push	cs
  6147                                  		;pop	ds
  6148                                  		; 17/10/2022
  6149 00001F00 BD[3607]                		mov	bp, MOVMEDIAIDS
  6150                                  		;mov	bp, 751h	; mov_media_ids
  6151                                  					; at 2C7h:751h = 70h:2CC1h
  6152                                  					; copy filesys_id, volume label
  6153 00001F03 0E                      		push	cs		; simulate far call
  6154 00001F04 E850F8                  		call	call_bios_code
  6155                                  		; 14/08/2023
  6156                                  		;push	es
  6157                                  		;pop	ds
  6158 00001F07 07                      		pop	es
  6159 00001F08 E99800                  		jmp	massage_bpb	; now final check for bpb info
  6160                                  					; and return.
  6161                                  ; ---------------------------------------------------------------------------
  6162                                  
  6163                                  toobig_ret:				
  6164                                  		; 14/08/2023 (ds=cs=BIOSDATA)
  6165 00001F0B 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  6166                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  6167                                  					; too big (32 bit clust #) for FAT16
  6168 00001F10 E9AE00                  		jmp	goodret		; still	drive letter is	assigned
  6169                                  					; but useless. to big for
  6170                                  					; current pc dos fat file system
  6171                                  ; ---------------------------------------------------------------------------
  6172                                  
  6173                                  unknown:	
  6174                                  		; 12/12/2022
  6175 00001F13 804D2402                		or	byte [di+24h], 02h			
  6176                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6177                                  					; unformatted_media
  6178                                  					; Set unformatted media	flag.
  6179                                  
  6180                                  ; the boot signature may not be	recognizable,
  6181                                  ; but we should	try and	read it	anyway.
  6182                                  
  6183                                  unknown3_0:				
  6184 00001F17 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6185                                  					; [di+BDS.totalsecs32+2]
  6186 00001F1A 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6187 00001F1D BE[FC16]                		mov	si, disktable2
  6188                                  
  6189                                  scan:					
  6190                                  		;cmp	dx, [cs:si]	; total sectors hw
  6191                                  		; 14/08/2023 (ds=cs)
  6192 00001F20 3B14                    		cmp	dx, [si] 
  6193 00001F22 720C                    		jb	short gotparm
  6194 00001F24 7705                    		ja	short scan_next
  6195                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  6196 00001F26 3B4402                  		cmp	ax, [si+2]
  6197 00001F29 7605                    		jbe	short gotparm
  6198                                  
  6199                                  scan_next:				
  6200 00001F2B 83C60A                  		add	si, 10		; 5*2
  6201 00001F2E EBF0                    		jmp	short scan	; covers upto 512 mb media
  6202                                  ; ---------------------------------------------------------------------------
  6203                                  
  6204                                  gotparm:				
  6205 00001F30 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6206                                  		;or	ds:fbigfat, cl
  6207                                  		; 17/10/2022
  6208 00001F33 080E[CC16]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  6209                                  		; 14/08/2023
  6210                                  		; ds = cs = BIOSDATA
  6211 00001F37 8B4C04                  		mov	cx, [si+4]
  6212                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6213                                  					; cl = log base 2 of ch
  6214 00001F3A 8B5406                  		mov	dx, [si+6]
  6215                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  6216                                  
  6217                                  ; now calculate size of fat table
  6218                                  
  6219 00001F3D 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6220                                  					; save number of (root)	dir entries
  6221 00001F40 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6222 00001F43 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6223 00001F46 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6224                                  					; save sectors per cluster
  6225                                  		; 17/10/2022
  6226 00001F49 F606[CC16]40            		test	byte [fbigfat], 40h
  6227                                  		;test	ds:fbigfat, 40h	; fbig
  6228                                  					; if (fbigfat)
  6229 00001F4E 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6230                                  
  6231                                  ; we don't need to change "small fat" logic since it is gauranteed
  6232                                  ; that double word total sector will not use 12 bit fat (unless
  6233                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6234                                  ; so in this case we assume dx = 0 !!
  6235                                  
  6236 00001F50 31DB                    		xor	bx, bx		; (12 bit fat)
  6237 00001F52 88EB                    		mov	bl, ch
  6238 00001F54 4B                      		dec	bx
  6239 00001F55 01C3                    		add	bx, ax		; dx=0
  6240 00001F57 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6241 00001F59 43                      		inc	bx		; BDS.secperclus
  6242 00001F5A 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6243 00001F5D 89DE                    		mov	si, bx
  6244 00001F5F D1EB                    		shr	bx, 1
  6245 00001F61 01F3                    		add	bx, si
  6246 00001F63 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6247 00001F67 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6248 00001F69 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6249                                  					; save number of fat sectors
  6250 00001F6C EB35                    		jmp	short massage_bpb
  6251                                  ; ---------------------------------------------------------------------------
  6252                                  
  6253                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6254                                  
  6255                                  dobig:					
  6256 00001F6E B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6257 00001F70 52                      		push	dx		; save total sectors (high)
  6258 00001F71 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6259 00001F74 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6260 00001F76 29D0                    		sub	ax, dx
  6261 00001F78 5A                      		pop	dx
  6262 00001F79 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6263 00001F7C 83E801                  		sub	ax, 1
  6264 00001F7F 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6265                                  					; total	secs - reserved	secs - root dir	secs
  6266 00001F82 B302                    		mov	bl, 2
  6267 00001F84 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6268                                  					; bx = 256 * BDS.secperclus + 2
  6269                                  
  6270                                  ; I don't understand why to add bx here!!!
  6271                                  
  6272                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6273                                  		; 27/09/2022
  6274                                  		; (Microsoft FAT32 File	System Specification,
  6275                                  		; December 2000, Page 21)
  6276                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6277                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6278                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6279                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6280                                  		
  6281                                  					; dx:ax = TmpVal1, bx = TmpVal2
  6282 00001F87 01D8                    		add	ax, bx		; 
  6283 00001F89 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  6284 00001F8C 83E801                  		sub	ax, 1		
  6285 00001F8F 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  6286                                  
  6287                                  ; assuming dx in the table will never be bigger than bx.
  6288                                  
  6289 00001F92 F7F3                    		div	bx		; BDS.fatsecs =
  6290                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6291 00001F94 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6292                                  					; number of fat	sectors
  6293                                  
  6294                                  ; now, set the default filesys_id, volume label, serial number
  6295                                  
  6296                                  		; 14/08/2023
  6297                                  		; [di+1Fh] = [fbigfat]
  6298                                  		;
  6299                                  		;;mov	bl, ds:fbigfat
  6300                                  		;; 17/10/2022
  6301                                  		;mov	bl, [fbigfat]
  6302                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6303                                  
  6304                                  		; 14/08/2023
  6305                                  		;push	ds ; ds = cs = BIOSDATA
  6306 00001F97 1E                      		push	ds
  6307 00001F98 07                      		pop	es
  6308                                  		; 14/08/2023 
  6309                                  		; ds = cs = BIOSDATA
  6310                                  		;push	cs
  6311                                  		;pop	ds
  6312                                  		; 11/09/2023
  6313 00001F99 A0[CC16]                		mov	al, [fbigfat]
  6314 00001F9C BD[D005]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  6315                                  		; 17/10/2022
  6316                                  		;mov	bp, CLEARIDS
  6317                                  		;;mov	bp, 5D9h	; clear_ids
  6318                                  					; at 2C7h:5D9h = 70h:2B49h
  6319                                  					; at BIOSCODE:06ABh
  6320                                  					;	in PCDOS 7.1 IBMBIO.COM
  6321 00001F9F 0E                      		push	cs
  6322 00001FA0 E8B4F7                  		call	call_bios_code
  6323                                  
  6324                                  		; 14/08/2023
  6325                                  		;pop	ds ; ds = cs = BIOSDATA
  6326                                  
  6327                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6328                                  ; set according to the partition information. we are going to
  6329                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6330                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6331                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6332                                  ; we don't do this for the bpb information from the boot record. we
  6333                                  ; are not going to change the bpb information from the boot record.
  6334                                  
  6335                                  massage_bpb:
  6336                                  		; 14/08/2023
  6337                                  		; [di+1Fh] = [fbigfat]
  6338                                  		;
  6339                                  		;; 12/12/2022
  6340                                  		;mov	bl, [fbigfat]
  6341                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6342                                  		;			; set size of fat on media
  6343                                  		;
  6344 00001FA3 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6345 00001FA6 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6346                                  		; 11/09/2023
  6347 00001FA9 09D2                    		or	dx, dx
  6348 00001FAB 7514                    		jnz	short goodret	
  6349                                  		;cmp	dx, 0		; double word total sectors?
  6350                                  		;;ja	short goodret	; don't have to change it.
  6351                                  		;; 12/12/2022
  6352                                  		;ja	short short goodret2
  6353                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6354                                  		;ja	short goodret	; don't have to change it.
  6355                                  		; 12/12/2022
  6356 00001FAD 395519                  		cmp	[di+19h], dx ; 0
  6357                                  		;ja	short goodret2
  6358 00001FB0 770F                    		ja	short goodret	; 11/09/2023
  6359 00001FB2 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6360                                  		;jb	short goodret
  6361                                  		; 12/12/2022
  6362                                  		;jc	short goodret
  6363 00001FB5 7209                    		jc	short goodret_clc ; 11/09/2023
  6364 00001FB7 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6365 00001FBA 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6366                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6367                                  		; 12/12/2022
  6368 00001FBD 89551B                  		mov	[di+1Bh], dx ; 0
  6369                                  goodret_clc:
  6370                                  		; 11/09/2023
  6371 00001FC0 F8                      		clc 
  6372                                  goodret:
  6373                                  		;mov	bl, ds:fbigfat
  6374                                  		; 11/09/2023
  6375                                  		; 12/12/2022
  6376                                  		; 17/10/2022
  6377 00001FC1 8A1E[CC16]              		mov	bl, [fbigfat]
  6378 00001FC5 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6379                                  					; set size of fat on media
  6380                                  		; 11/09/2023
  6381                                  		;clc
  6382                                  ret_hard_err:
  6383                                  		; 12/12/2022
  6384                                  goodret2:
  6385 00001FC8 07                      		pop	es
  6386                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  6387 00001FC9 5B                      		pop	bx
  6388 00001FCA 5F                      		pop	di
  6389 00001FCB C3                      		retn
  6390                                  
  6391                                  ; =============== S U B	R O U T	I N E =======================================
  6392                                  
  6393                                  ; 15/10/2022
  6394                                  
  6395                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6396                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6397                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6398                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6399                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6400                                  
  6401                                  		; 17/10/2022
  6402                                  cover_fdisk_bug:	
  6403                                  		; 14/08/2023		; ds = cs
  6404 00001FCC 50                      		push	ax
  6405 00001FCD 52                      		push	dx
  6406 00001FCE 56                      		push	si
  6407                                  		; 14/08/2023
  6408 00001FCF 803E[7401]29            		cmp	byte [disksector+26h], 29h
  6409                                  		;cmp	byte [cs:disksector+26h], 29h
  6410                                  					; [disksector+EXT_BOOT.SIG],
  6411                                  					; EXT_BOOT_SIGNATURE
  6412 00001FD4 742B                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6413 00001FD6 817F073130              		cmp	word [bx+7], 3031h
  6414                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6415 00001FDB 7506                    		jnz	short cfb_chk_totalsecs ; 14/08/2023
  6416 00001FDD 807F0A30                		cmp	byte [bx+10], '0'
  6417                                  		;cmp	byte [cs:bx+10], '0'
  6418 00001FE1 751E                    		jnz	short cfb_retit
  6419                                  cfb_chk_totalsecs:
  6420                                  		; 17/10/2022		
  6421 00001FE3 BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6422                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6423                                  		; 14/08/2023
  6424 00001FE6 837C0800                		cmp	word [si+8], 0
  6425                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6426                                  					; just to make sure.
  6427 00001FEA 7415                    		jz	short cfb_retit
  6428                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6429                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6430                                  		; 14/08/2023
  6431 00001FEC 8B4408                  		mov	ax, [si+8]
  6432 00001FEF 034411                  		add	ax, [si+11h]
  6433                                  
  6434 00001FF2 730D                    		jnb	short cfb_retit
  6435 00001FF4 750B                    		jnz	short cfb_retit
  6436                                  					; if carry set and ax=0
  6437 00001FF6 FF4C08                  		dec	word [si+8]
  6438                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  6439                                  					; then decrease	BPB_TOTALSECTORS by 1
  6440 00001FF9 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6441 00001FFD 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6442                                  cfb_retit:				
  6443 00002001 5E                      		pop	si
  6444 00002002 5A                      		pop	dx
  6445 00002003 58                      		pop	ax
  6446 00002004 C3                      		retn
  6447                                  
  6448                                  ; ---------------------------------------------------------------------------
  6449                                  
  6450 00002005 0200                    word2:		dw 2
  6451 00002007 0300                    word3:		dw 3
  6452 00002009 0002                    word512:	dw 512
  6453                                  
  6454                                  ; =============== S U B	R O U T	I N E =======================================
  6455                                  
  6456                                  ; 15/10/2022
  6457                                  
  6458                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6459                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6460                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6461                                  ; as the bpb on the drive.
  6462                                  ;
  6463                                  ; no attempt is made to preserve registers since we are going to jump to
  6464                                  ; sysinit straight after this routine.
  6465                                  
  6466                                  setdrvparms:
  6467 0000200B 31DB                    		xor	bx, bx
  6468                                  		; 18/10/2022
  6469 0000200D C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6470                                  _next_bds:				
  6471 00002011 06                      		push	es
  6472 00002012 57                      		push	di
  6473 00002013 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6474 00002017 80FB05                  		cmp	bl, 5		; ffHardFile
  6475 0000201A 753E                    		jnz	short nothardff
  6476 0000201C 31D2                    		xor	dx, dx
  6477 0000201E 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6478 00002022 09C0                    		or	ax, ax
  6479 00002024 7508                    		jnz	short get_ccyl
  6480 00002026 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6481 0000202A 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6482                                  
  6483                                  get_ccyl:				
  6484 0000202E 52                      		push	dx
  6485 0000202F 50                      		push	ax
  6486 00002030 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6487 00002034 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6488                                  					; assume sectors per cyl. < 64k.
  6489 00002038 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6490 0000203A 58                      		pop	ax
  6491 0000203B 5A                      		pop	dx		; dx:ax	= total	sectors
  6492 0000203C 50                      		push	ax
  6493 0000203D 89D0                    		mov	ax, dx
  6494 0000203F 31D2                    		xor	dx, dx
  6495 00002041 F7F1                    		div	cx
  6496 00002043 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6497 00002047 58                      		pop	ax
  6498 00002048 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6499 0000204A 09D2                    		or	dx, dx
  6500 0000204C 7401                    		jz	short no_cyl_rnd ; came out even
  6501 0000204E 40                      		inc	ax		; round	up
  6502                                  
  6503                                  no_cyl_rnd:				
  6504 0000204F 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6505 00002053 06                      		push	es
  6506 00002054 1F                      		pop	ds
  6507 00002055 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6508                                  					; ds:si	-> bpb for hard	file
  6509 00002058 EB55                    		jmp	short set_recbpb
  6510                                  ; ---------------------------------------------------------------------------
  6511                                  
  6512                                  nothardff:				
  6513 0000205A 0E                      		push	cs
  6514 0000205B 1F                      		pop	ds
  6515                                  
  6516                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6517                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6518                                  
  6519                                  		; 10/12/2022
  6520                                  		; ds = cs
  6521                                  		; 17/10/2022 (ds=cs)
  6522 0000205C 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6523                                  		;cmp	byte [cs:fakefloppydrv], 1
  6524 00002061 7454                    		jz	short go_to_next_bds
  6525 00002063 80FB07                  		cmp	bl, 7		; ffother
  6526                                  					; special case "other" type of medium
  6527 00002066 753D                    		jnz	short not_process_other
  6528                                  process_other:
  6529 00002068 31D2                    		xor	dx, dx
  6530 0000206A 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6531 0000206D F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6532 00002070 F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6533 00002073 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6534                                  					; have the total number of sectors
  6535 00002076 48                      		dec	ax
  6536 00002077 B201                    		mov	dl, 1
  6537                                  _again:					
  6538 00002079 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6539 0000207C 7206                    		jb	short _@@
  6540 0000207E D1E8                    		shr	ax, 1
  6541 00002080 D0E2                    		shl	dl, 1
  6542 00002082 EBF5                    		jmp	short _again
  6543                                  ; ---------------------------------------------------------------------------
  6544                                  
  6545                                  _@@:					
  6546 00002084 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6547 00002087 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6548 00002089 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6549                                  __@@:					
  6550 0000208E 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6551                                  
  6552                                  ; logic to get the sectors/fat area.
  6553                                  ; fat entry is assumed to be 1.5 bytes!!!
  6554                                  
  6555                                  		; 10/12/2022
  6556                                  		; ds = cs
  6557                                  		; 17/10/2022 (ds=cs)
  6558 00002091 F726[0720]              		mul	word [word3]
  6559 00002095 F736[0520]              		div	word [word2]
  6560 00002099 31D2                    		xor	dx, dx
  6561 0000209B F736[0920]              		div	word [word512]
  6562                                  		;
  6563                                  		; 10/12/2022
  6564                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6565                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6566                                  		;xor	dx, dx
  6567                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6568                                  		;
  6569 0000209F 40                      		inc	ax		; + 1
  6570                                  no_round_up:
  6571 000020A0 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6572 000020A3 EB12                    		jmp	short go_to_next_bds
  6573                                  ; ---------------------------------------------------------------------------
  6574                                  
  6575                                  not_process_other:			
  6576 000020A5 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6577                                  		;mov	si, bpbtable
  6578                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6579                                  		; 09/12/2022
  6580                                  		;mov	si, BPBTABLE
  6581                                  		;mov	si, [bx+si]	; get address of bpb
  6582                                  		; 10/12/2022
  6583                                  		;mov	si, [BPBTABLE+bx]
  6584                                  		; 13/12/2022
  6585                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6586                                  		; 14/08/2023
  6587                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6588                                  							; correct offset
  6589 000020A7 8BB7[AC72]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6590                                  		
  6591                                  		; 28/08/2023
  6592 000020AB 81C6903C                		add	si, SYSINIT_OFFSET
  6593                                  set_recbpb:				
  6594 000020AF 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6595                                  					; es:di	-> recbpb
  6596 000020B2 B91900                  		mov	cx, 25		; bpbx.size
  6597 000020B5 F3A4                    		rep movsb		; move (size bpbx) bytes	
  6598                                  go_to_next_bds:				
  6599 000020B7 5F                      		pop	di
  6600 000020B8 07                      		pop	es		; restore pointer to bds
  6601 000020B9 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6602 000020BC 83FFFF                  		cmp	di, 0FFFFh	; -1
  6603 000020BF 740A                    		jz	short got_end_of_bds_chain
  6604 000020C1 E94DFF                  		jmp	_next_bds
  6605                                  ; ---------------------------------------------------------------------------
  6606                                  
  6607                                  		; 18/12/2022
  6608                                  ;got_end_of_bds_chain:			
  6609                                  		;retn
  6610                                  
  6611                                  ; =============== S U B	R O U T	I N E =======================================
  6612                                  
  6613                                  ; 15/10/2022
  6614                                  ; 30/12/2018 - Retro DOS v4.0
  6615                                  
  6616                                  ; al = device number
  6617                                  
  6618                                  print_init:	
  6619 000020C4 98                      		cbw
  6620 000020C5 89C2                    		mov	dx, ax
  6621 000020C7 B401                    		mov	ah, 1
  6622 000020C9 CD17                    		int	17h		; PRINTER - INITIALIZE
  6623                                  					; DX = printer port (0-3)
  6624                                  					; Return: AH = status
  6625                                  got_end_of_bds_chain:	; 18/12/2022
  6626 000020CB C3                      		retn
  6627                                  
  6628                                  ; =============== S U B	R O U T	I N E =======================================
  6629                                  
  6630                                  ; al = device number
  6631                                  
  6632                                  aux_init:
  6633 000020CC 98                      		cbw
  6634 000020CD 89C2                    		mov	dx, ax
  6635                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6636                                  					; 2400,n,1,8 (msequ.inc)
  6637                                  		;mov	ah, 0
  6638                                  		; 10/12/2022
  6639 000020CF B8A300                  		mov	ax, 00A3h
  6640 000020D2 CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6641                                  					; 	AL = initializing parameters,
  6642                                  					;	DX = port number (0-3)
  6643                                  					; Return: AH = RS-232 status code bits,
  6644                                  					;	  AL = modem status bits
  6645 000020D4 C3                      		retn
  6646                                  
  6647                                  ; =============== S U B	R O U T	I N E =======================================
  6648                                  
  6649                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6650                                  ; 30/12/2018 - Retro DOS v4.0
  6651                                  ; 03/06/2018 - Retro DOS v3.0
  6652                                  ; (19/03/2018 - Retro DOS v2.0)
  6653                                  
  6654                                  ; domini **********************************************************************
  6655                                  ;
  6656                                  ;mini disk initialization routine. called right after dohard
  6657                                  ;modified for >2 hardfile support
  6658                                  ;
  6659                                  ; **cs=ds=es=datagrp
  6660                                  ;
  6661                                  ; **domini will search for every extended partition in the system, and
  6662                                  ;   initialize it.
  6663                                  ;
  6664                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6665                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6666                                  ;   address of bdsm table.
  6667                                  ;
  6668                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6669                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6670                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6671                                  ;
  6672                                  ; **domini will use the same routine in sethard routine after label set2 to
  6673                                  ;   save coding.
  6674                                  ;
  6675                                  ; **drvmax determined in dohard routine will be used for the next
  6676                                  ;   available logical mini disk drive number.
  6677                                  ;
  6678                                  ; input: drvmax, dskdrvs
  6679                                  ;
  6680                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6681                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6682                                  ;
  6683                                  ; called modules:
  6684                                  ;		  getboot
  6685                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6686                                  ;
  6687                                  ;		  setmini (new, it will use set2 routine)
  6688                                  ;
  6689                                  ; variables used: end_of_bdsm
  6690                                  ;		  rom_minidisk_num
  6691                                  ;		  mini_hdlim, mini_seclim
  6692                                  ;		  BDS_STRUC, start_bds
  6693                                  ;
  6694                                  ;******************************************************************************
  6695                                  
  6696                                  		; 19/10/2022
  6697                                  domini:	
  6698 000020D5 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6699                                  		; 10/12/2022
  6700 000020D9 20F6                    		and	dh, dh
  6701                                  		;cmp	dh, 0
  6702 000020DB 7431                    		jz	short dominiret	; no hard file?	then exit.
  6703 000020DD B280                    		mov	dl, 80h		; start	with hardfile 80h
  6704                                  domini_loop:				
  6705 000020DF 52                      		push	dx
  6706 000020E0 8816[4217]              		mov	[rom_minidisk_num], dl
  6707 000020E4 B408                    		mov	ah, 8
  6708 000020E6 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6709                                  					; DL = drive number
  6710                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6711                                  					; DL = number of consecutive drives
  6712                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6713 000020E8 FEC6                    		inc	dh
  6714 000020EA 31C0                    		xor	ax, ax
  6715 000020EC 88F0                    		mov	al, dh
  6716 000020EE A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6717 000020F1 80E13F                  		and	cl, 3Fh
  6718 000020F4 88C8                    		mov	al, cl
  6719 000020F6 A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6720 000020F9 06                      		push	es
  6721 000020FA 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6722 000020FE E87BFB                  		call	getboot		; read master boot record into
  6723                                  					; initbootsegment:bootbias
  6724 00002101 7203                    		jb	short domininext
  6725 00002103 E80900                  		call	find_mini_partition
  6726                                  domininext:				
  6727 00002106 07                      		pop	es
  6728 00002107 5A                      		pop	dx
  6729 00002108 FEC2                    		inc	dl		; next hard file
  6730 0000210A FECE                    		dec	dh
  6731 0000210C 75D1                    		jnz	short domini_loop
  6732                                  dominiret:				
  6733 0000210E C3                      		retn
  6734                                  
  6735                                  ; =============== S U B	R O U T	I N E =======================================
  6736                                  
  6737                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6738                                  ; 30/12/2018 - Retro DOS v4.0
  6739                                  
  6740                                  ;find_mini_partition tries to find every extended partition on a disk.
  6741                                  ;at entry:	di -> bdsm entry
  6742                                  ;		es:bx -> 07c0:bootbias - master boot record
  6743                                  ;		rom_minidisk_num - rom drive number
  6744                                  ;		drvmax - logical drive number
  6745                                  ;		mini_hdlim, mini_seclim
  6746                                  ;
  6747                                  ;called routine: setmini which uses set2 (in sethard routine)
  6748                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6749                                  
  6750                                  
  6751                                  find_mini_partition:	
  6752 0000210F 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6753                                  fmpnext:				
  6754 00002113 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6755 00002117 740A                    		jz	short fmpgot
  6756 00002119 83C310                  		add	bx, 16
  6757 0000211C 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6758 00002120 75F1                    		jnz	short fmpnext
  6759                                  		;jmp	short fmpnextfound ; extended partition	not found
  6760                                  		; 18/12/2022
  6761                                  fmpnextfound:
  6762 00002122 C3                      		retn
  6763                                  
  6764                                  ;		; 30/07/2019 - Retro DOS v3.2
  6765                                  ;		jb	short fmpnext
  6766                                  ;fmpret:
  6767                                  ;		retn	; 29/05/2019
  6768                                  
  6769                                  ; ---------------------------------------------------------------------------
  6770                                  
  6771                                  		; 19/10/2022
  6772                                  fmpgot:					; found my partition.				
  6773 00002123 E89D00                  		call	dmax_check	; check	for drvmax already 26
  6774 00002126 73FA                    		jnb	short fmpnextfound ; done if too many
  6775 00002128 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  6776 0000212C C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6777                                  		; 10/12/2022
  6778 00002131 804D2301                		or	byte [di+23h], 1
  6779                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6780                                  					; fNon_Removable
  6781 00002135 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6782                                  					; ffHardFile
  6783 00002139 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6784 0000213E A1[4817]                		mov	ax, [mini_hdlim]
  6785 00002141 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6786 00002144 A1[4A17]                		mov	ax, [mini_seclim]
  6787 00002147 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6788 0000214A A0[4217]                		mov	al, [rom_minidisk_num]
  6789 0000214D 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6790                                  					; set physical number
  6791 00002150 A0[7500]                		mov	al, [drvmax]
  6792 00002153 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6793                                  					; set logical number
  6794 00002156 26837F0A00              		cmp	word [es:bx+10], 0
  6795 0000215B 7707                    		ja	short fmpgot_cont
  6796 0000215D 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6797                                  					; only lower word is meaningful.
  6798 00002162 72BE                    		jb	short fmpnextfound
  6799                                  					; should be bigger than 64 sectors at least
  6800                                  fmpgot_cont:				
  6801 00002164 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6802 00002167 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6803 0000216B 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6804 0000216E D0C6                    		rol	dh, 1
  6805 00002170 D0C6                    		rol	dh, 1
  6806 00002172 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6807 00002176 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6808                                  					; set hidden trks
  6809 00002179 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6810 0000217D 268A7701                		mov	dh, [es:bx+1]	; head
  6811 00002181 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6812 00002185 BB0002                  		mov	bx, 200h	; bootbias
  6813 00002188 B80102                  		mov	ax, 201h
  6814 0000218B CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6815                                  					; AL = number of sectors to read, CH = track, CL = sector
  6816                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6817                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6818 0000218D 7293                    		jb	short fmpnextfound
  6819 0000218F BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6820                                  
  6821                                  		; 14/08/2023
  6822                                  		;push	es
  6823 00002192 E80800                  		call	setmini		; install a mini disk.
  6824                                  					; bx value saved.
  6825                                  		;pop	es  ; 14/08/2023
  6826 00002195 7203                    		jb	short fmpnextchain
  6827 00002197 E83E00                  		call	xinstall_bds	; -- install the bdsm into table
  6828                                  fmpnextchain:				
  6829 0000219A E976FF                  		jmp	fmpnext		; let's find out
  6830                                  					; if we	have any chained partition
  6831                                  ; ---------------------------------------------------------------------------
  6832                                  
  6833                                  		; 18/12/2022
  6834                                  ;fmpnextfound:				
  6835                                  		;retn
  6836                                  
  6837                                  ; =============== S U B	R O U T	I N E =======================================
  6838                                  
  6839                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6840                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6841                                  
  6842                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6843                                  	
  6844 0000219D 57                      		push	di
  6845 0000219E 53                      		push	bx
  6846                                  		; 14/08/2023
  6847                                  		; ds = cs = BIOSDATA segment
  6848                                  		;push	ds
  6849 0000219F 06                      		push	es
  6850                                  setmini_1:				
  6851 000021A0 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6852 000021A4 741A                    		jz	short setmini_2
  6853 000021A6 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6854 000021AA 7414                    		jz	short setmini_2
  6855 000021AC 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6856 000021B0 740E                    		jz	short setmini_2
  6857 000021B2 83C310                  		add	bx, 16
  6858 000021B5 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6859 000021B9 75E5                    		jnz	short setmini_1
  6860 000021BB F9                      		stc
  6861 000021BC 07                      		pop	es
  6862                                  		; 14/08/2023
  6863                                  		;pop	ds
  6864 000021BD 5B                      		pop	bx
  6865 000021BE 5F                      		pop	di
  6866 000021BF C3                      		retn
  6867                                  
  6868                                  ; ---------------------------------------------------------------------------
  6869                                  setmini_2:				
  6870 000021C0 E965FB                  		jmp	set2		; branch into middle of sethard
  6871                                  
  6872                                  ; =============== S U B	R O U T	I N E =======================================
  6873                                  
  6874                                  ; 15/10/2022
  6875                                  ; 28/12/2018 - Retro DOS v4.0
  6876                                  ;
  6877                                  ; dmax_check --- call this when we want to install a new drive.
  6878                                  ;		it checks for drvmax < 26 to see if there is
  6879                                  ;		a drive letter left.
  6880                                  ;
  6881                                  ;	drvmax < 26 : carry SET!
  6882                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6883                                  ;			trash ax
  6884                                  
  6885                                  dmax_check:	
  6886 000021C3 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6887 000021C8 720D                    		jb	short dmax_ok	; return with carry if okay
  6888 000021CA 06                      		push	es
  6889                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6890 000021CB B83904                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6891 000021CE 8EC0                    		mov	es, ax
  6892                                  		; 18/10/2022
  6893 000021D0 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6894                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6895                                  					; set message flag
  6896                                  					; [SYSINIT+toomanydrivesflag]
  6897 000021D6 07                      		pop	es
  6898                                  
  6899                                  		;;push	es
  6900                                  		;;mov	ax,SYSINIT_SEG
  6901                                  		;;mov	es,ax
  6902                                  		;;mov	byte [es:toomanydrivesflag],1
  6903                                  					; set message flag
  6904                                  		;;pop	es
  6905                                  		;
  6906                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6907                                  dmax_ok:				
  6908 000021D7 C3                      		retn
  6909                                  
  6910                                  ; =============== S U B	R O U T	I N E =======================================
  6911                                  
  6912                                  ; 18/10/2022
  6913                                  ; 15/10/2022
  6914                                  ; 28/12/2018 - Retro DOS v4.0						
  6915                                  ;								 
  6916                                  ;	link next bds (at ds:di) into the chain. assume that the
  6917                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6918                                  ;	  dskdrv_table, and end_of_bdss.	
  6919                                  
  6920                                  xinstall_bds:		
  6921 000021D8 56                      		push	si
  6922 000021D9 53                      		push	bx
  6923 000021DA 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6924                                  xinstall_bds_1:				
  6925 000021DE 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6926 000021E1 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6927                                  		;mov	si, [si+BDS.link]
  6928 000021E3 8B34                    		mov	si, [si]	; chain	through	list
  6929 000021E5 EBF7                    		jmp	short xinstall_bds_1
  6930                                  ; ---------------------------------------------------------------------------
  6931                                  
  6932                                  xinstall_bds_2:				
  6933                                  		;mov	[si+BDS.link], di
  6934 000021E7 893C                    		mov	[si], di
  6935                                  		;mov	[si+BDS.link+2], ds
  6936 000021E9 8C5C02                  		mov	[si+2], ds
  6937                                  		;mov	word [di+BDS.link], -1
  6938 000021EC C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6939                                  		;mov	[di+BDS.link+2], ds
  6940 000021F0 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6941                                  		; 20/03/2019 - Retro DOS v4.0
  6942                                  		;lea	bx, [di+BDS.BPB]
  6943 000021F3 8D5D06                  		lea	bx, [di+6]
  6944 000021F6 8B36[4417]              		mov	si, [last_dskdrv_table]
  6945 000021FA 891C                    		mov	[si], bx
  6946 000021FC 8306[4417]02            		add	word [last_dskdrv_table], 2
  6947 00002201 FE06[7500]              		inc	byte [drvmax]
  6948 00002205 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6949 0000220A 5B                      		pop	bx
  6950 0000220B 5E                      		pop	si
  6951 0000220C C3                      		retn
  6952                                  
  6953                                  ; =============== S U B	R O U T	I N E =======================================
  6954                                  
  6955                                  ; 17/10/2022
  6956                                  ; 15/10/2022
  6957                                  ; 28/12/2018 - Retro DOS v4.0
  6958                                  ; 03/06/2018 - Retro DOS v3.0
  6959                                  
  6960                                  cmos_clock_read:	
  6961 0000220D 50                      		push	ax
  6962 0000220E 51                      		push	cx
  6963 0000220F 52                      		push	dx
  6964 00002210 55                      		push	bp
  6965 00002211 31ED                    		xor	bp, bp
  6966                                  loop_clock:				
  6967 00002213 31C9                    		xor	cx, cx
  6968 00002215 31D2                    		xor	dx, dx
  6969 00002217 B402                    		mov	ah, 2
  6970 00002219 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6971                                  					; Return: CH = hours in	BCD
  6972                                  					; CL = minutes in BCD
  6973                                  					; DH = seconds in BCD
  6974 0000221B 83F900                  		cmp	cx, 0
  6975 0000221E 7512                    		jnz	short clock_present
  6976 00002220 83FA00                  		cmp	dx, 0
  6977 00002223 750D                    		jnz	short clock_present
  6978 00002225 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6979 00002228 741C                    		jz	short no_readdate ; was	at zero	setting.
  6980 0000222A 45                      		inc	bp		; only perform delay once.
  6981 0000222B B90040                  		mov	cx, 4000h	; 16384
  6982                                  delay:					
  6983 0000222E E2FE                    		loop	delay
  6984 00002230 EBE1                    		jmp	short loop_clock
  6985                                  ; ---------------------------------------------------------------------------
  6986                                  
  6987                                  clock_present:				
  6988 00002232 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6989 00002238 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6990                                  					; possibly destroyed by	cp dos and
  6991                                  					; post routine did not restore that.
  6992 0000223B 56                      		push	si
  6993 0000223C E8E9F2                  		call	read_real_date	; read real-time clock for date
  6994 0000223F FA                      		cli
  6995                                  		;mov	ds:daycnt, si	; set system date
  6996 00002240 8936[F004]              		mov	[daycnt], si
  6997 00002244 FB                      		sti
  6998 00002245 5E                      		pop	si
  6999                                  
  7000                                  no_readdate:				
  7001 00002246 5D                      		pop	bp
  7002 00002247 5A                      		pop	dx
  7003 00002248 59                      		pop	cx
  7004 00002249 58                      		pop	ax
  7005 0000224A C3                      		retn
  7006                                  
  7007                                  ; ---------------------------------------------------------------------------
  7008                                  
  7009                                  ; the following code is written by jack gulley in engineering group.
  7010                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  7011                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  7012                                  ; the cmos clock rate are still slow which slow down disk operations
  7013                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  7014                                  ; to fix this problem at the request of cp dos.
  7015                                  ;
  7016                                  ; the program is modified to be run on msinit. equates are defined
  7017                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  7018                                  ;
  7019                                  ;  the following code cmosck is used to insure that the cmos has not
  7020                                  ;	had its rate controls left in an invalid state on older at's.
  7021                                  ;
  7022                                  ;	it checks for an at model byte "fc" with a submodel type of
  7023                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  7024                                  ;	bits in case post has not done it. this initilization routine
  7025                                  ;	is only needed once when dos loads. it should be run as soon
  7026                                  ;	as possible to prevent slow diskette access.
  7027                                  ;
  7028                                  ;	this code exposes one to dos clearing cmos setup done by a
  7029                                  ;	resident program that hides and re-boots the system.
  7030                                  
  7031                                  cmosck:					; check and reset rtc rate bits	
  7032                                  
  7033                                  ;model byte and submodel byte were already determined in msinit.
  7034                                  
  7035                                  	; 16/06/2018 - Retro DOS v3.0
  7036                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  7037                                  			
  7038 0000224B 50                      		push	ax
  7039 0000224C 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  7040 00002252 7525                    		jnz	short cmosck9	; Exit if not an AT model
  7041 00002254 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  7042                                  					; Is it 06 for the industral AT ?
  7043 0000225A 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  7044 0000225C 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  7045                                  					; Is it 00, 01, 02, or 03 ?
  7046 00002262 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  7047                                  					; Also,Secondary_model_byte = 0 
  7048                                  					;   when AH=0C0h, int 15h failed.
  7049                                  					;	RESET THE CMOS PERIODIC RATE 
  7050                                  					;  Model=FC submodel=00,01,02,03 or 06 
  7051                                  cmosck4:				
  7052 00002264 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7053                                  					; NMI disabled on return
  7054 00002266 B426                    		mov	ah, 26h		; 00100110b
  7055                                  					; Set divider &	rate selection
  7056 00002268 E83000                  		call	cmos_write
  7057 0000226B B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7058                                  					; NMI disabled on return
  7059 0000226D E80B00                  		call	cmos_read
  7060 00002270 2407                    		and	al, 7		; 00000111b
  7061                                  					; clear	SET,PIE,AIE,UIE,SQWE
  7062 00002272 88C4                    		mov	ah, al
  7063 00002274 B00B                    		mov	al, 0Bh		; cmos_reg_b
  7064                                  					; NMI enabled on return
  7065 00002276 E82200                  		call	cmos_write
  7066                                  cmosck9:				
  7067 00002279 58                      		pop	ax
  7068 0000227A C3                      		retn
  7069                                  
  7070                                  ; =============== S U B	R O U T	I N E =======================================
  7071                                  
  7072                                  ;--- CMOS_READ -----------------------------------------------------------------
  7073                                  ;		read byte from cmos system clock configuration table	       :
  7074                                  ;									       :
  7075                                  ; input: (al)=	cmos table address to be read				       :
  7076                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7077                                  ;		bits 6-0 = address of table location to read		       :
  7078                                  ;									       :
  7079                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7080                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  7081                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7082                                  ;		the cmos address register is pointed to a default value and    :
  7083                                  ;		the interrupt flag restored to the entry state on return.      :
  7084                                  ;		only the (al) register and the nmi state is changed.	       :
  7085                                  ;-------------------------------------------------------------------------------
  7086                                  
  7087                                  cmos_read:				; read location (al) into (al)	
  7088 0000227B 9C                      		pushf
  7089 0000227C FA                      		cli
  7090 0000227D 53                      		push	bx
  7091 0000227E 50                      		push	ax		; AL = cmos table address to be	read
  7092 0000227F 0C80                    		or	al, 80h
  7093 00002281 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7094                                  					; RTC Seconds
  7095 00002283 90                      		nop			; (undocumented	delay needed)
  7096 00002284 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7097 00002286 89C3                    		mov	bx, ax
  7098 00002288 58                      		pop	ax
  7099 00002289 2480                    		and	al, 80h
  7100 0000228B 0C0F                    		or	al, 0Fh
  7101 0000228D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7102                                  					; RTC Seconds
  7103 0000228F 90                      		nop
  7104 00002290 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7105 00002292 89D8                    		mov	ax, bx
  7106 00002294 5B                      		pop	bx
  7107 00002295 0E                      		push	cs		; *place code segment in stack and
  7108 00002296 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7109 00002299 C3                      		retn			; return with flags restored
  7110                                  
  7111                                  ; ---------------------------------------------------------------------------
  7112                                  
  7113                                  cmos_popf:				
  7114 0000229A CF                      		iret			; popf for level b- parts
  7115                                  					; return far and restore flags
  7116                                  
  7117                                  ; =============== S U B	R O U T	I N E =======================================
  7118                                  
  7119                                  ;--- cmos_write ----------------------------------------------------------------
  7120                                  ;		write byte to cmos system clock configuration table	       :
  7121                                  ;									       :
  7122                                  ; input: (al)=	cmos table address to be written to			       :
  7123                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7124                                  ;		bits 6-0 = address of table location to write		       :
  7125                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7126                                  ;									       :
  7127                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7128                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7129                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7130                                  ;		the cmos address register is pointed to a default value and    :
  7131                                  ;		the interrupt flag restored to the entry state on return.      :
  7132                                  ;		only the cmos location and the nmi state is changed.	       :
  7133                                  ;-------------------------------------------------------------------------------
  7134                                  
  7135                                  cmos_write:				; write (ah) to location (al)	
  7136 0000229B 9C                      		pushf			; write (ah) to location (al)
  7137 0000229C 50                      		push	ax		; save work register values
  7138 0000229D FA                      		cli
  7139 0000229E 50                      		push	ax		; save user nmi	state
  7140 0000229F 0C80                    		or	al, 80h		; disable nmi for us
  7141 000022A1 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7142                                  					; RTC Seconds
  7143 000022A3 90                      		nop
  7144 000022A4 88E0                    		mov	al, ah
  7145 000022A6 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7146 000022A8 58                      		pop	ax		; get user nmi
  7147 000022A9 2480                    		and	al, 80h
  7148 000022AB 0C0F                    		or	al, 0Fh
  7149 000022AD E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7150                                  					; RTC Seconds
  7151 000022AF 90                      		nop
  7152 000022B0 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7153 000022B2 58                      		pop	ax		; restore work registers
  7154 000022B3 0E                      		push	cs		; *place code segment in stack and
  7155 000022B4 E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  7156 000022B7 C3                      		retn
  7157                                  
  7158                                  ; 21/12/2022
  7159                                  ; ---------------------------------------------------------------------------
  7160                                  ; ---------------------------------------------------------------------------
  7161                                  %if 0
  7162                                  
  7163                                  ; ---------------------------------------------------------------------------
  7164                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7165                                  ; ---------------------------------------------------------------------------
  7166                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7167                                  ; ---------------------------------------------------------------------------
  7168                                  
  7169                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7170                                  ;
  7171                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7172                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7173                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7174                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7175                                  
  7176                                  ; =============== S U B	R O U T	I N E =======================================
  7177                                  
  7178                                  ; GetClus, read in a cluster at a specified address
  7179                                  ;
  7180                                  ;  bx = cluster to read
  7181                                  ;  cx = sectors per cluster
  7182                                  ;  es:di = load location
  7183                                  
  7184                                  ; 17/10/2022
  7185                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7186                                  ; 09/12/2022
  7187                                  DISKRD equ diskrd
  7188                                  
  7189                                  		; 17/10/2022
  7190                                  getclus:				
  7191                                  		push	cx
  7192                                  		push	di
  7193                                  		mov	[cs:doscnt], cx
  7194                                  		mov	ax, bx
  7195                                  		dec	ax
  7196                                  		dec	ax
  7197                                  		mul	cx		; convert to logical sector
  7198                                  					; dx:ax	= matching logical sector number
  7199                                  					;	  starting from the data sector
  7200                                  		add	ax, [cs:bios_l]
  7201                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7202                                  unpack:					
  7203                                  		push	ds
  7204                                  		push	ax
  7205                                  		push	bx
  7206                                  		mov	si, [cs:fatloc]
  7207                                  		mov	ds, si
  7208                                  		mov	si, bx		; next cluster
  7209                                  		test	byte [cs:fbigfat], 40h	; fbig
  7210                                  					; 16 bit fat?
  7211                                  		jnz	short unpack16	; yes
  7212                                  		shr	si, 1		; 12 bit fat. si=si/2
  7213                                  					; si = clus + clus/2
  7214                                  		add	si, bx		;
  7215                                  					; (si =	byte offset of the cluster in the FAT)
  7216                                  		push	dx
  7217                                  		xor	dx, dx
  7218                                  		call	get_fat_sector
  7219                                  		pop	dx
  7220                                  		mov	ax, [bx]	; save it into ax
  7221                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7222                                  		; 25/06/2023
  7223                                  		;mov	al, [bx]	; splitted fat
  7224                                  		mov	[cs:temp_cluster], al
  7225                                  		inc	si		; (next	byte)
  7226                                  		push	dx
  7227                                  		xor	dx, dx
  7228                                  		call	get_fat_sector
  7229                                  		pop	dx
  7230                                  		;mov	al, ds:0
  7231                                  		mov	al, [0] ; 19/10/2022
  7232                                  		mov	[cs:temp_cluster+1], al
  7233                                  		mov	ax, [cs:temp_cluster]
  7234                                  even_odd:				
  7235                                  		pop	bx		; restore old fat entry	value
  7236                                  		push	bx		; save it right	away.
  7237                                  		shr	bx, 1		; was it even or odd?
  7238                                  		jnb	short havclus	; it was even.
  7239                                  		shr	ax, 1		; odd. massage fat value and keep
  7240                                  					; the highest 12 bits.
  7241                                  		shr	ax, 1
  7242                                  		shr	ax, 1
  7243                                  		shr	ax, 1
  7244                                  havclus:				
  7245                                  		mov	bx, ax		; now bx = new fat entry.
  7246                                  		and	bx, 0FFFh	; keep low 12 bits.
  7247                                  		jmp	short unpackx
  7248                                  ; ---------------------------------------------------------------------------
  7249                                  
  7250                                  unpack16:				
  7251                                  		push	dx
  7252                                  		xor	dx, dx
  7253                                  		shl	si, 1		; extend to 32 bit offset
  7254                                  		adc	dx, 0
  7255                                  		call	get_fat_sector
  7256                                  		pop	dx
  7257                                  		mov	bx, [bx]	;
  7258                                  					; bx = new fat entry.
  7259                                  unpackx:				
  7260                                  		pop	si		; restore old bx value into si
  7261                                  		pop	ax		; restore logical sector (low)
  7262                                  		pop	ds
  7263                                  		sub	si, bx
  7264                                  		cmp	si, -1		; one apart?
  7265                                  		jnz	short getcl2
  7266                                  		add	[cs:doscnt], cx
  7267                                  		jmp	short unpack
  7268                                  ; ---------------------------------------------------------------------------
  7269                                  
  7270                                  getcl2:					
  7271                                  		push	bx
  7272                                  		push	dx		; sector to read (high)
  7273                                  		push	ax		; sector to read (low)
  7274                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7275                                  		mov	cx, [cs:doscnt]
  7276                                  		pop	dx		; sector to read for diskrd (low)
  7277                                  		pop	word [cs:start_sec_h]
  7278                                  					; sector to read for diskrd (high)
  7279                                  		push	ds
  7280                                  		push	cs
  7281                                  		pop	ds
  7282                                  		push	cs		; simulate far call
  7283                                  		; 17/10/2022
  7284                                  		mov	bp, DISKRD	; 8E5h
  7285                                  		;mov	bp, 8E5h	; offset diskrd
  7286                                  					; 2C7h:8E5h = 70h:2E55h
  7287                                  		call	call_bios_code	; read the clusters
  7288                                  		pop	ds
  7289                                  		pop	bx
  7290                                  		pop	di
  7291                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7292                                  		xchg	ah, al		; multiply by 256
  7293                                  		shl	ax, 1		; times	2 equal	512
  7294                                  		add	di, ax		; update load location
  7295                                  		pop	cx		; restore sectors/cluster
  7296                                  		retn
  7297                                  
  7298                                  ; =============== S U B	R O U T	I N E =======================================
  7299                                  
  7300                                  
  7301                                  ;function: find and read the corresponding fat sector into ds:0
  7302                                  ;
  7303                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7304                                  ;     ds - fatloc segment
  7305                                  ;     cs:drvfat - logical drive number, fat id
  7306                                  ;     cs:md_sectorsize
  7307                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7308                                  ;
  7309                                  ;out). corresponding fat sector read in.
  7310                                  ;      bx = offset value from fatlog segment.
  7311                                  ;      other registera saved.
  7312                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7313                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7314                                  ;      should save this byte, and read the next fat sector to get the rest
  7315                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7316                                  
  7317                                  		; 17/10/2022
  7318                                  get_fat_sector:	
  7319                                  		push	ax
  7320                                  		push	cx
  7321                                  		push	di
  7322                                  		push	si
  7323                                  		push	es
  7324                                  		push	ds
  7325                                  		mov	ax, si
  7326                                  		mov	cx, [cs:md_sectorsize] ; 512
  7327                                  		div	cx		; ax = sector number, dx = offset
  7328                                  		nop
  7329                                  
  7330                                  		; Get rid of the assumption that
  7331                                  		; there	is only	one reserved sector
  7332                                  
  7333                                  		push	es
  7334                                  		push	ds
  7335                                  		push	di
  7336                                  		push	ax
  7337                                  		push	cs
  7338                                  		pop	ds
  7339                                  
  7340                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7341                                  		mov	bp, SETDRIVE
  7342                                  		;mov	bp, 4D7h	; setdrive
  7343                                  					; at 2C7h:4D7h = 70h:2A47h
  7344                                  		push	cs		; simulate far call
  7345                                  		call	call_bios_code	; get bds for drive
  7346                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7347                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7348                                  					; add #reserved_sectors
  7349                                  		pop	di
  7350                                  		pop	ds
  7351                                  		pop	es
  7352                                  		cmp	ax, [cs:last_fat_sec_num]
  7353                                  		jz	short gfs_split_chk ; don't need to read it again.
  7354                                  		mov	[cs:last_fat_sec_num], ax 
  7355                                  					; sector number
  7356                                  					; (in the partition, without hidden sectors)
  7357                                  		push	dx
  7358                                  		mov	word [cs:start_sec_h], 0 
  7359                                  					; prepare to read the fat sector
  7360                                  					; start_sec_h is always	0 for fat sector.
  7361                                  		mov	dx, ax
  7362                                  		mov	cx, 1		; 1 sector read
  7363                                  		mov	ax, [cs:drvfat]
  7364                                  		push	ds
  7365                                  		pop	es
  7366                                  		xor	di, di		; es:di	-> fatloc segment:0
  7367                                  		push	ds
  7368                                  		push	cs
  7369                                  		pop	ds
  7370                                  		push	cs		; simulate far call
  7371                                  		mov	bp, DISKRD	; 8E5h
  7372                                  		;mov	bp, 8E5h	; offset diskrd
  7373                                  					; 2C7h:8E5h = 70h:2E55h
  7374                                  		call	call_bios_code
  7375                                  		pop	ds
  7376                                  		pop	dx
  7377                                  		mov	cx, [cs:md_sectorsize] ; 512
  7378                                  
  7379                                  gfs_split_chk:				
  7380                                  		dec	cx		; 511
  7381                                  		cmp	dx, cx		; if offset points to the
  7382                                  					; last byte of this sector,
  7383                                  					; then splitted	entry.
  7384                                  		mov	bx, dx		; set bx to dx
  7385                                  		pop	ds
  7386                                  		pop	es
  7387                                  		pop	si
  7388                                  		pop	di
  7389                                  		pop	cx
  7390                                  		pop	ax
  7391                                  		retn
  7392                                  
  7393                                  ; 15/10/2022
  7394                                  ;Bios_Data_Init	ends
  7395                                  
  7396                                  %endif
  7397                                  ; ---------------------------------------------------------------------------
  7398                                  ; ---------------------------------------------------------------------------
  7399                                  
  7400                                  		; 09/12/2022
  7401                                  		;db 0
  7402                                  
  7403                                  numbertodiv	equ ($-BData_start)
  7404                                  numbertomod	equ (numbertodiv % 16)
  7405                                  
  7406                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
  7407 000022B8 00<rep 8h>              		times (16-numbertomod) db 0
  7408                                  %endif
  7409                                  
  7410                                  ;align 16
  7411                                  
  7412                                  ; 09/12/2022
  7413                                  IOSYSCODESEGOFF equ $ - BData_start
  7414                                  ; 29/09/2023
  7415                                  ;IOSYSCODESEGOFF equ $-$$
  7416                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7417                                  
  7418                                  ; 28/09/2023
  7419                                  S1SIZE equ $-$$
  7420                                  
  7421                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7422                                  ; ---------------------------------------------------------------------------
  7423                                  		;db 4 dup(0)
  7424                                  ; 09/12/2022		
  7425                                  ;		times 4 db 0	; 19/10/2022
  7426                                  ; ---------------------------------------------------------------------------
  7427                                  
  7428                                  ;============================================================================
  7429                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7430                                  ;============================================================================
  7431                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7432                                  
  7433                                  section .BIOSCODE vstart=0  
  7434                                  
  7435                                  BCode_start:	 ; 09/12/2022
  7436                                   
  7437                                  ; 02/10/2022
  7438                                  
  7439                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7440                                  ;----------------------------------------------------------------------------
  7441                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7442                                  ;----------------------------------------------------------------------------
  7443                                  
  7444                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7445 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7446 00000030 7000                    BiosDataWord:	dw 70h
  7447                                  
  7448                                  ; 15/10/2022
  7449                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7450                                  ; 09/12/2022
  7451                                  BIOSDATAWORD	equ BiosDataWord
  7452                                  
  7453                                  ; ---------------------------------------------------------------------------
  7454                                  
  7455                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7456                                  
  7457                                  ;************************************************************************
  7458                                  ;*									*
  7459                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7460                                  ;*	  trashes di, cx, es						*
  7461                                  ;*									*
  7462                                  ;*	cas -- should be made disposable!				*
  7463                                  ;*									*
  7464                                  ;************************************************************************
  7465                                  
  7466                                  _seg_reinit:
  7467 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7468                                  					; at 2C7h:30h or 70h:25A0h
  7469                                  		;mov	di, (offset cdev+2)
  7470 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7471 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7472                                  
  7473                                  _seg_reinit_1:				
  7474 0000003D AB                      		stosw			; modify Bios_Code entry points
  7475 0000003E 47                      		inc	di
  7476 0000003F 47                      		inc	di
  7477 00000040 E2FB                    		loop	_seg_reinit_1
  7478 00000042 CB                      		retf
  7479                                  
  7480                                  ; ---------------------------------------------------------------------------
  7481                                  
  7482                                  ; 15/10/2022
  7483                                  
  7484                                  ;************************************************************************
  7485                                  ;*									*
  7486                                  ;*	chardev_entry - main device driver dispatch routine		*
  7487                                  ;*	   called with a dummy parameter block on the stack		*
  7488                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7489                                  ;*									*
  7490                                  ;*	will eventually take care of doing the transitions in		*
  7491                                  ;*	   out of Bios_Code						*
  7492                                  ;*									*
  7493                                  ;************************************************************************
  7494                                  
  7495                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7496 00000043 56                      		push	si
  7497 00000044 50                      		push	ax
  7498 00000045 51                      		push	cx
  7499 00000046 52                      		push	dx
  7500 00000047 57                      		push	di
  7501 00000048 55                      		push	bp
  7502 00000049 1E                      		push	ds
  7503 0000004A 06                      		push	es
  7504 0000004B 53                      		push	bx
  7505 0000004C 89E5                    		mov	bp, sp
  7506 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7507                                  		;;mov	ds, word [cs:0030h]
  7508                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7509 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7510 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7511 00000059 A2[2100]                		mov	[auxnum], al
  7512 0000005C 8826[E704]              		mov	[printdev], ah
  7513 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7514 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7515 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7516 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7517 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7518 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7519                                  		; 17/10/2022
  7520 00000076 81FE[9604]              		cmp	si, DSKTBL
  7521                                  		;cmp	si, 4A2h	; dsktbl
  7522                                  					; at 2C7h:4A2h = 70h:2A12h
  7523 0000007A 7517                    		jnz	short no_sector32_mapping
  7524                                  
  7525                                  ; Special case for 32-bit start sector number:
  7526                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7527                                  ;      set high 16 bits of secnum to 0
  7528                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7529                                  ;
  7530                                  ; pass high word of sector number in start_sec_h, low word in dx
  7531                                  ;
  7532                                  ; note: start_l and start_h are the offsets within the io_request packet
  7533                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7534                                  ;	  it has been used.
  7535                                  ;
  7536                                  ; note: remember not to destroy the registers which have been set up before
  7537                                  
  7538                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7539 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7540 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7541 00000085 750C                    		jnz	short no_sector32_mapping
  7542 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7543                                  					; 32 bits dsk req
  7544                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7545 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7546 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7547                                  					; dx = packet.start_l
  7548                                  no_sector32_mapping:			
  7549 00000093 97                      		xchg	ax, di
  7550 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7551 00000098 2E3A04                  		cmp	al, cs:[si]
  7552 0000009B 732C                    		jnb	short command_error
  7553 0000009D 98                      		cbw			; note that al <= 15 means ok
  7554 0000009E D1E0                    		shl	ax, 1
  7555 000000A0 01C6                    		add	si, ax
  7556 000000A2 97                      		xchg	ax, di
  7557 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7558 000000A7 FC                      		cld
  7559                                  		; 17/10/2022
  7560 000000A8 2EFF5401                		call	near [cs:si+1]
  7561                                  		;call	word ptr cs:si+1
  7562 000000AC 7202                    		jb	short already_got_ah_status
  7563 000000AE B401                    		mov	ah, 1
  7564                                  already_got_ah_status:
  7565                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7566                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7567                                  					; cas note: shouldn't be needed!
  7568 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7569                                  		;lds	bx, ds:ptrsav
  7570 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7571 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7572                                  					; mark operation complete
  7573 000000BC 5B                      		pop	bx
  7574 000000BD 07                      		pop	es
  7575 000000BE 1F                      		pop	ds
  7576 000000BF 5D                      		pop	bp
  7577 000000C0 5F                      		pop	di
  7578 000000C1 5A                      		pop	dx
  7579 000000C2 59                      		pop	cx
  7580 000000C3 58                      		pop	ax
  7581 000000C4 5E                      		pop	si
  7582 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7583                                  	
  7584                                  		; fall through into bc_retf
  7585                                  ; ---------------------------------------------------------------------------	
  7586                                  bc_retf:
  7587 000000C8 CB                      		retf
  7588                                  ; ---------------------------------------------------------------------------
  7589                                  
  7590                                  command_error:				
  7591 000000C9 E80900                  		call	bc_cmderr
  7592 000000CC EBE2                    		jmp	short already_got_ah_status
  7593                                  ; 15/10/2022
  7594                                  ; 01/05/2019
  7595                                  
  7596                                  ;----------------------------------------------------------------------------
  7597                                  ; The following piece of hack is for supporting CP/M compatibility
  7598                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7599                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7600                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7601                                  ; high.
  7602                                  ;----------------------------------------------------------------------------
  7603                                  
  7604                                  		;db 7 dup(0)
  7605                                  
  7606                                  		; 15/10/2022
  7607                                  
  7608 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7609                                  
  7610 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7611                                  				;  which is the CP/M call 5 entry point
  7612                                  		
  7613                                  
  7614                                  ; ---------------------------------------------------------------------------
  7615                                  
  7616                                  ;	exit - all routines return through this path
  7617                                  
  7618                                  bc_cmderr:				
  7619 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7620                                  					; unknown command error
  7621                                  
  7622                                  ; =============== S U B	R O U T	I N E =======================================
  7623                                  
  7624                                  ;	now zero the count field by subtracting its current value,
  7625                                  ;	  which is still in cx, from itself.
  7626                                  
  7627                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7628                                  ;	  in order to return the number actually complete
  7629                                  
  7630                                  bc_err_cnt:	
  7631                                  		;les	bx, ds:ptrsav
  7632                                  		; 19/10/2022
  7633 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7634 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7635                                  					; # of successful i/o's
  7636 000000DF B481                    		mov	ah, 81h		; mark error return
  7637 000000E1 F9                      		stc			; indicate abnormal end
  7638 000000E2 C3                      		retn
  7639                                  
  7640                                  ; 15/10/2022
  7641                                  
  7642                                  ;Bios_Code ends
  7643                                  
  7644                                  ;----------------------------------------------------------------------------
  7645                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7646                                  ;----------------------------------------------------------------------------
  7647                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7648                                  ; 10/01/2019 - Retro DOS v4.0
  7649                                  
  7650                                  ; 30/04/2019
  7651                                  
  7652                                  ;title	mschar - character and clock devices
  7653                                  
  7654                                  ;MODE_CTRLBRK	equ	0FFh
  7655                                  
  7656                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7657                                  
  7658                                  ;************************************************************************
  7659                                  ;*									*
  7660                                  ;*	device driver dispatch tables					*
  7661                                  ;*									*
  7662                                  ;*	each table starts with a byte which lists the number of		*
  7663                                  ;*	legal functions, followed by that number of words. Each		*
  7664                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7665                                  ;*	handles the function. The functions are terminated with		*
  7666                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7667                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7668                                  ;*	returned as abnormal completion status. Notice that ds		*
  7669                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7670                                  ;*									*
  7671                                  ;************************************************************************
  7672                                  
  7673                                  		; 13/12/2022
  7674                                  		;db 0
  7675                                  
  7676                                  		; 13/12/202
  7677 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7678                                  					; 2C7h:0E4h = 70h:2654h
  7679 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7680                                  					; 00 init
  7681 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7682 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7683 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7684                                  					; 03
  7685 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7686                                  					; 04
  7687 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7688                                  					; 05
  7689 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7690 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7691                                  					; 07
  7692 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7693                                  					; 08
  7694 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7695 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7696                                  con_table_end:
  7697 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7698                                  					; 2C7h:0FBh = 70h:266Bh
  7699 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7700 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7701 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7702 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7703 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7704                                  					; 04 indicate zero chars read
  7705 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7706                                  					; 05 read non-destructive
  7707 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7708 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7709 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7710 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7711 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7712 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7713 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7714 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7715 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7716 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7717 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7718 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7719 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7720 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7721 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7722 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7723 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7724 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7725 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7726 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7727                                  prn_table_end:
  7728 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7729                                  					; 2C7h:130h = 70h:26A0h
  7730 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7731 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7732 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7733 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7734 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7735 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7736 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7737 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7738 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7739 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7740 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7741                                  aux_table_end:
  7742 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7743                                  					; 2C7h:147h = 70h:26B7h
  7744 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7745 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7746 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7747 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7748 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7749 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7750 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7751 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7752 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7753 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7754                                  tim_table_end:
  7755                                  
  7756                                  ; ---------------------------------------------------------------------------
  7757                                  
  7758                                  ;************************************************************************
  7759                                  ;*									*
  7760                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7761                                  ;*									*
  7762                                  ;************************************************************************
  7763                                  
  7764                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7765                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7766 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7767                                  con_loop:				
  7768 0000015D E80500                  		call	chrin		; get char in al
  7769 00000160 AA                      		stosb			; store	char at	es:di
  7770 00000161 E2FA                    		loop	con_loop
  7771                                  con_exit:				
  7772 00000163 F8                      		clc
  7773 00000164 C3                      		retn
  7774                                  
  7775                                  ; =============== S U B	R O U T	I N E =======================================
  7776                                  
  7777                                  ;************************************************************************
  7778                                  ;*									*
  7779                                  ;*	chrin - input single char from keyboard into al			*
  7780                                  ;*									*
  7781                                  ;*	  we are going to issue extended keyboard function, if		*
  7782                                  ;*	  supported. the returning value of the extended keystroke	*
  7783                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7784                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7785                                  ;*	  this creates a conflict when the user entered real		*
  7786                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7787                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7788                                  ;*	  in the following manner:					*
  7789                                  ;*									*
  7790                                  ;*	      ah = 16h							*
  7791                                  ;*	      int 16h							*
  7792                                  ;*	      if al == 0, then extended code (in ah)			*
  7793                                  ;*	      else if al == 0E0h, then					*
  7794                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7795                                  ;*		else greek_alpha character.				*
  7796                                  ;*									*
  7797                                  ;*	also, for compatibility reason, if an extended code is		*
  7798                                  ;*	  detected, then we are going to change the value in al		*
  7799                                  ;*	  from 0E0h to 00h.						*
  7800                                  ;*									*
  7801                                  ;************************************************************************
  7802                                  
  7803                                  		; 19/10/2022
  7804                                  chrin:		
  7805 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7806 00000169 30C0                    		xor	al, al
  7807 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7808 0000016F 08C0                    		or	al, al
  7809 00000171 752A                    		jnz	short keyret
  7810 00000173 CD16                    		int	16h		; KEYBOARD -
  7811 00000175 09C0                    		or	ax, ax
  7812 00000177 74EC                    		jz	short chrin
  7813 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7814 0000017C 7504                    		jnz	short alt_ext_chk
  7815 0000017E B010                    		mov	al, 10h
  7816 00000180 EB1B                    		jmp	short keyret
  7817                                  ; ---------------------------------------------------------------------------
  7818                                  
  7819                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7820                                  ;    if character read was 0E0h then
  7821                                  ;      if extended byte was zero (i.e. ah == 0) then
  7822                                  ;	 goto keyret
  7823                                  ;      else
  7824                                  ;	 set al to zero
  7825                                  ;	 goto alt_save
  7826                                  ;      endif
  7827                                  ;    endif
  7828                                  ;  endif
  7829                                  
  7830                                  alt_ext_chk:
  7831 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7832 00000187 740C                    		jz	short not_ext
  7833 00000189 3CE0                    		cmp	al, 0E0h
  7834 0000018B 7508                    		jnz	short not_ext
  7835 0000018D 08E4                    		or	ah, ah
  7836 0000018F 740C                    		jz	short keyret
  7837 00000191 30C0                    		xor	al, al
  7838 00000193 EB04                    		jmp	short alt_save
  7839                                  ; ---------------------------------------------------------------------------
  7840                                  
  7841                                  not_ext:				
  7842 00000195 08C0                    		or	al, al		; special case?
  7843 00000197 7504                    		jnz	short keyret
  7844                                  alt_save:				
  7845 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7846                                  keyret:					
  7847 0000019D C3                      		retn
  7848                                  
  7849                                  ; ---------------------------------------------------------------------------
  7850                                  
  7851                                  ;************************************************************************
  7852                                  ;*									*
  7853                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7854                                  ;*									*
  7855                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7856                                  ;*	in the status word of the request packet, and there is no	*
  7857                                  ;*	character in the input buffer, the driver issues a system	*
  7858                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7859                                  ;*	a 'char-not-found' to the dos.					*
  7860                                  ;*									*
  7861                                  ;************************************************************************
  7862                                  
  7863                                  		; 19/10/2022
  7864                                  con_rdnd:				
  7865 0000019E A0[0C00]                		mov	al, [altah]
  7866 000001A1 08C0                    		or	al, al
  7867 000001A3 754C                    		jnz	short rdexit
  7868 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7869 000001A9 CD16                    		int	16h		; KEYBOARD -
  7870 000001AB 751D                    		jnz	short gotchr
  7871 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7872 000001B2 7412                    		jz	short z_bus_exit
  7873 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7874                                  		; 12/12/2022
  7875 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7876                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7877 000001BD 7407                    		jz	short z_bus_exit
  7878 000001BF B80041                  		mov	ax, 4100h
  7879 000001C2 30DB                    		xor	bl, bl
  7880 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7881                                  					; AL = condition type, BH = condition compare or mask value
  7882                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7883                                  					; DX = I/O port	address	if AL bit 4 set
  7884                                  z_bus_exit:				
  7885 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7886 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7887 000001C9 C3                      		retn
  7888                                  ; ---------------------------------------------------------------------------
  7889                                  
  7890                                  gotchr:					
  7891 000001CA 09C0                    		or	ax, ax
  7892 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7893 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7894 000001D2 CD16                    		int	16h		; KEYBOARD -
  7895 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7896                                  ; ---------------------------------------------------------------------------
  7897                                  
  7898                                  notbrk:					
  7899 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7900 000001D9 7504                    		jnz	short rd_ext_chk
  7901 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7902 000001DD EB12                    		jmp	short rdexit
  7903                                  ; ---------------------------------------------------------------------------
  7904                                  
  7905                                  rd_ext_chk:				
  7906 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7907 000001E4 740B                    		jz	short rdexit
  7908 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7909 000001E8 7507                    		jnz	short rdexit
  7910 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7911 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7912 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7913                                  					; change it for	compatibility
  7914                                  rdexit:					
  7915 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7916 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7917                                  					; return keyboard character here
  7918                                  bc_exvec:				
  7919 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7920                                  					; indicate normal termination
  7921 000001FA C3                      		retn
  7922                                  ; ---------------------------------------------------------------------------
  7923                                  
  7924                                  ;************************************************************************
  7925                                  ;*									*
  7926                                  ;*	con_write - console write routine				*
  7927                                  ;*									*
  7928                                  ;*	entry:	es:di -> buffer						*
  7929                                  ;*		cx    =  count						*
  7930                                  ;*									*
  7931                                  ;************************************************************************
  7932                                  
  7933                                  con_writ:
  7934                                  		;jcxz	short bc_exvec
  7935 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  7936                                  		; 12/12/2022
  7937                                  		;jcxz	cc_ret
  7938                                  con_lp:					
  7939 000001FD 268A05                  		mov	al, [es:di]
  7940 00000200 47                      		inc	di
  7941 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  7942                                  					; AL = character to display
  7943 00000203 E2F8                    		loop	con_lp
  7944                                  cc_ret:					
  7945 00000205 F8                      		clc
  7946 00000206 C3                      		retn
  7947                                  
  7948                                  ; =============== S U B	R O U T	I N E =======================================
  7949                                  
  7950                                  ;************************************************************************
  7951                                  ;*									*
  7952                                  ;*	con_flush - flush out keyboard queue				*
  7953                                  ;*									*
  7954                                  ;************************************************************************
  7955                                  
  7956                                  con_flush:
  7957 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  7958                                  flloop:					; while	(charavail()) charread();	
  7959 0000020C B401                    		mov	ah, 1
  7960 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  7961                                  					; Return: ZF clear if character	in buffer
  7962                                  					; AH = scan code, AL = character
  7963                                  					; ZF set if no character in buffer
  7964 00000210 74F3                    		jz	short cc_ret
  7965 00000212 30E4                    		xor	ah, ah
  7966 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  7967                                  					; Return: AH = scan code, AL = character
  7968 00000216 EBF4                    		jmp	short flloop
  7969                                  
  7970                                  ; ---------------------------------------------------------------------------
  7971                                  
  7972                                  ; 15/10/2022
  7973                                  
  7974                                  ;************************************************************************
  7975                                  ;*									*
  7976                                  ;*	some equates for rom bios printer i/o				*
  7977                                  ;*									*
  7978                                  ;************************************************************************
  7979                                  
  7980                                  ; ibm rom status bits (i don't trust them, neither should you)
  7981                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  7982                                  ; whole slew of bits, only one of which is correct.
  7983                                  
  7984                                  ;notbusystatus	equ 10000000b		; not busy
  7985                                  ;nopaperstatus	equ 00100000b		; no more paper
  7986                                  ;prnselected	equ 00010000b		; printer selected
  7987                                  ;ioerrstatus	equ 00001000b		; some kinda error
  7988                                  ;timeoutstatus	equ 00000001b		; time out.
  7989                                  ;
  7990                                  ;noprinter	equ 00110000b		; no printer attached
  7991                                  
  7992                                  ; 18/03/2019 - Retro DOS v4.0
  7993                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  7994                                  
  7995                                  ; ---------------------------------------------------------------------------
  7996                                  
  7997                                  ;************************************************************************
  7998                                  ;*									*
  7999                                  ;*	prn_input - return with no error but zero chars read		*
  8000                                  ;*									*
  8001                                  ;*	enter with cx = number of characters requested			*
  8002                                  ;*									*
  8003                                  ;************************************************************************
  8004                                  
  8005                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  8006 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  8007                                  					; (sub reqpkt.count,cx)
  8008                                  		; 12/12/2022
  8009                                  prn_done:
  8010 0000021B F8                      		clc			; but return with carry	reset for no error
  8011 0000021C C3                      		retn
  8012                                  ; ---------------------------------------------------------------------------
  8013                                  
  8014                                  ;************************************************************************
  8015                                  ;*									*
  8016                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  8017                                  ;*									*
  8018                                  ;*	auxnum has printer number					*
  8019                                  ;*									*
  8020                                  ;************************************************************************
  8021                                  
  8022                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  8023                                  		;jcxz	short prn_done	; no chars to output
  8024 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  8025                                  prn_loop:				
  8026 0000021F BB0200                  		mov	bx, 2		; retry	count
  8027                                  prn_out:				
  8028 00000222 E83600                  		call	prnstat		; get status
  8029 00000225 751D                    		jnz	short TestPrnError
  8030 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  8031 0000022A 30E4                    		xor	ah, ah
  8032 0000022C E82E00                  		call	prnop		; print	to printer
  8033 0000022F 7419                    		jz	short prn_con	; no error - continue
  8034 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8035 00000234 7509                    		jnz	short _prnwf
  8036 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8037 00000238 C606[0C00]00            		mov	byte [altah], 0
  8038 0000023D EB08                    		jmp	short pmessg
  8039                                  ; ---------------------------------------------------------------------------
  8040                                  
  8041                                  _prnwf:					
  8042 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  8043 00000242 7406                    		jz	short prn_con
  8044                                  TestPrnError:				
  8045 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  8046 00000245 75DB                    		jnz	short prn_out
  8047                                  pmessg:					
  8048 00000247 E98DFE                  		jmp	bc_err_cnt
  8049                                  ; ---------------------------------------------------------------------------
  8050                                  
  8051                                  prn_con:				
  8052 0000024A 47                      		inc	di		; point	to next	char and continue
  8053 0000024B E2D2                    		loop	prn_loop
  8054                                  ;prn_done:				
  8055                                  		; 12/12/2022
  8056                                  prn_done2:
  8057                                  		;clc
  8058                                  		; cf=0
  8059 0000024D C3                      		retn
  8060                                  ; ---------------------------------------------------------------------------
  8061                                  
  8062                                  ;************************************************************************
  8063                                  ;*									*
  8064                                  ;*	prn_stat - device driver entry to return printer status		*
  8065                                  ;*									*
  8066                                  ;************************************************************************
  8067                                  
  8068                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8069 0000024E E80A00                  		call	prnstat		; device in dx
  8070 00000251 75F4                    		jnz	short pmessg
  8071 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  8072                                  		;jnz	short prn_done
  8073                                  		; 12/12/2022
  8074 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  8075 00000258 E96BFF                  		jmp	z_bus_exit
  8076                                  ; ---------------------------------------------------------------------------
  8077                                  
  8078                                  ;************************************************************************
  8079                                  ;*									*
  8080                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8081                                  ;*		 printer status. Return meaningful error code		*
  8082                                  ;*									*
  8083                                  ;************************************************************************
  8084                                  
  8085                                  prnstat:				
  8086 0000025B B402                    		mov	ah, 2		; set command for get status
  8087                                  					; PRINTER - GET	STATUS
  8088                                  					; DX = printer port (0-3)
  8089                                  					; Return: AH = status
  8090                                  
  8091                                  ; =============== S U B	R O U T	I N E =======================================
  8092                                  
  8093                                  ;************************************************************************
  8094                                  ;*									*
  8095                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8096                                  ;*		return zero true if no error				*
  8097                                  ;*		return zero false if error, al = error code		*
  8098                                  ;*									*
  8099                                  ;************************************************************************
  8100                                  
  8101                                  prnop:	
  8102 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8103 00000261 CD17                    		int	17h
  8104                                  
  8105                                  	; This check was added to see if this is a case of no
  8106                                  	; printer being installed. This tests checks to be sure
  8107                                  	; the error is noprinter (30h)
  8108                                  
  8109 00000263 50                      		push	ax
  8110 00000264 80E430                  		and	ah, 30h
  8111 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  8112 0000026A 58                      		pop	ax
  8113 0000026B 7506                    		jnz	short NextTest
  8114 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8115 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  8116                                  
  8117                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8118                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8119                                  ; careful about breaking basic.
  8120                                  
  8121                                  NextTest:				
  8122 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8123                                  					; i/o error?
  8124 00000276 740A                    		jz	short checknotready ; no, try not ready
  8125                                  
  8126                                  ; at this point, we know we have an error. the converse is not true
  8127                                  
  8128 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  8129                                  					; first, assume	out of paper
  8130 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  8131 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  8132 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  8133                                  ret1:					
  8134 00000281 C3                      		retn
  8135                                  ; ---------------------------------------------------------------------------
  8136                                  
  8137                                  checknotready:				
  8138 00000282 B002                    		mov	al, 2		; assume not-ready
  8139 00000284 F6C401                  		test	ah, 1
  8140 00000287 C3                      		retn
  8141                                  
  8142                                  ; ---------------------------------------------------------------------------
  8143                                  
  8144                                  ;************************************************************************
  8145                                  ;*									*
  8146                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8147                                  ;*		     this entry point should never block waiting for	*
  8148                                  ;*		     device to come ready.				*
  8149                                  ;*									*
  8150                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8151                                  ;*	outputs: set the number of bytes transferred in the		*
  8152                                  ;*		 device driver request packet				*
  8153                                  ;*									*
  8154                                  ;************************************************************************
  8155                                  
  8156                                  		; 19/10/2022
  8157                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8158 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8159                                  prn_tilbloop:				
  8160 0000028A 51                      		push	cx
  8161 0000028B 53                      		push	bx
  8162 0000028C 30FF                    		xor	bh, bh
  8163 0000028E 8A1E[E704]              		mov	bl, [printdev]
  8164 00000292 D1E3                    		shl	bx, 1
  8165                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8166 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  8167 00000298 5B                      		pop	bx
  8168                                  prn_getstat:				
  8169 00000299 E8BFFF                  		call	prnstat		; get status
  8170 0000029C 7514                    		jnz	short prn_bperr	; error
  8171 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8172 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8173 000002A3 59                      		pop	cx		; get original count
  8174 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8175 000002A6 26                      		es
  8176 000002A7 AC                      		lodsb
  8177                                  		;lods	byte ptr es:[si] ; es
  8178                                  					; lodsb
  8179 000002A8 30E4                    		xor	ah, ah
  8180 000002AA E8B0FF                  		call	prnop
  8181 000002AD 7504                    		jnz	short prn_berr	; error
  8182 000002AF E2D9                    		loop	prn_tilbloop
  8183                                  		; 12/12/2022
  8184                                  		; cf=0 (prnop)
  8185                                  		;clc			; normal no-error return
  8186 000002B1 C3                      		retn			;   from device driver
  8187                                  
  8188                                  ; ---------------------------------------------------------------------------
  8189                                  
  8190                                  prn_bperr:				
  8191 000002B2 59                      		pop	cx		; restore transfer count from stack
  8192                                  prn_berr:				
  8193 000002B3 E921FE                  		jmp	bc_err_cnt
  8194                                  ; ---------------------------------------------------------------------------
  8195                                  
  8196                                  ; 15/10/2022
  8197                                  
  8198                                  ;************************************************************************
  8199                                  ;*									*
  8200                                  ;*	prn_genioctl - get/set printer retry count			*
  8201                                  ;*									*
  8202                                  ;************************************************************************
  8203                                  
  8204                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8205                                  ; 11/01/2019
  8206                                  
  8207                                  ;********************************;*
  8208                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8209                                  ;********************************;*
  8210                                  
  8211                                  ;;RAWIO SUB-FUNCTIONS
  8212                                  ;;get_retry_count equ 65h
  8213                                  ;;set_retry_count equ 45h
  8214                                  
  8215                                  ;;struc A_RETRYCOUNT
  8216                                  ;;.rc_count: resw 1
  8217                                  ;;endstruc
  8218                                  
  8219                                  ;ioc_pc equ 5
  8220                                  
  8221                                  ; ---------------------------------------------------------------------------
  8222                                  
  8223                                  		; 19/10/2022
  8224                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8225 000002B6 C43E[1200]              		les	di, [ptrsav]
  8226 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8227                                  					; ioc_pc
  8228 000002BF 7403                    		jz	short prnfunc_ok
  8229                                  
  8230                                  prnfuncerr:				
  8231 000002C1 E911FE                  		jmp	bc_cmderr
  8232                                  ; ---------------------------------------------------------------------------
  8233                                  
  8234                                  prnfunc_ok:				
  8235 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8236 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8237 000002CC 30FF                    		xor	bh, bh
  8238                                  		;mov	bl, ds:printdev	; get index into retry counts
  8239 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8240 000002D2 D1E3                    		shl	bx, 1
  8241                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8242 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8243 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8244 000002DA 7407                    		jz	short prngetcount
  8245 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8246 000002DE 75E1                    		jnz	short prnfuncerr
  8247 000002E0 268B0D                  		mov	cx, [es:di]
  8248                                  prngetcount:				
  8249                                  		;mov	ds:wait_count[bx], cx
  8250 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8251 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8252                                  					; return current retry count
  8253                                  		; 12/12/2022
  8254                                  		; cf=0
  8255                                  		;clc
  8256 000002EA C3                      		retn
  8257                                  ; ---------------------------------------------------------------------------
  8258                                  
  8259                                  ;************************************************************************
  8260                                  ;*									*
  8261                                  ;*  prn_ioctl_query							*
  8262                                  ;*									*
  8263                                  ;*  Added for 5.00							*
  8264                                  ;************************************************************************
  8265                                  
  8266                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8267 000002EB C43E[1200]              		les	di, [ptrsav]
  8268 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8269                                  					; ioc_pc
  8270 000002F4 750D                    		jnz	short prn_query_err
  8271 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8272 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8273 000002FC 7404                    		jz	short IOCtlSupported
  8274 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8275 00000300 7501                    		jnz	short prn_query_err
  8276                                  IOCtlSupported:	
  8277                                  		; 12/12/2022
  8278                                  		; cf=0		
  8279                                  		;clc
  8280 00000302 C3                      		retn
  8281                                  ; ---------------------------------------------------------------------------
  8282                                  
  8283                                  prn_query_err:
  8284                                  		; 12/12/2022				
  8285                                  		;stc
  8286 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8287                                  ; ---------------------------------------------------------------------------
  8288                                  
  8289                                  ;************************************************************************
  8290                                  ;*									*
  8291                                  ;*	aux port driver code -- "aux" == "com1"				*
  8292                                  ;*									*
  8293                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8294                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8295                                  ;*									*
  8296                                  ;************************************************************************
  8297                                  
  8298                                  ;	values in ah, requesting function of int 14h in rom bios
  8299                                  
  8300                                  ;auxfunc_send	 equ	1	;transmit
  8301                                  ;auxfunc_receive equ	2	;read
  8302                                  ;auxfunc_status	 equ	3	;request status
  8303                                  
  8304                                  ;	error flags, reported by int 14h, reported in ah:
  8305                                  
  8306                                  ;flag_data_ready equ	01h	;data ready
  8307                                  ;flag_overrun	 equ	02h	;overrun error
  8308                                  ;flag_parity	 equ	04h	;parity error
  8309                                  ;flag_frame	 equ	08h	;framing error
  8310                                  ;flag_break	 equ	10h	;break detect
  8311                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8312                                  ;flag_timeout	 equ	80h	;timeout
  8313                                  
  8314                                  ;	these flags reported in al:
  8315                                  
  8316                                  ;flag_cts	 equ	10h	;clear to send
  8317                                  ;flag_dsr	 equ	20h	;data set ready
  8318                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8319                                  
  8320                                  ; ---------------------------------------------------------------------------
  8321                                  
  8322                                  ;************************************************************************
  8323                                  ;*									*
  8324                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8325                                  ;*		   at es:di						*
  8326                                  ;*									*
  8327                                  ;************************************************************************
  8328                                  
  8329                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8330                                  		;jcxz	short exvec2
  8331 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8332 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8333 0000030B 30C0                    		xor	al, al
  8334 0000030D 8607                    		xchg	al, [bx]
  8335 0000030F 08C0                    		or	al, al
  8336 00000311 7503                    		jnz	short aux2
  8337                                  aux1:					
  8338 00000313 E80500                  		call	auxin		; get character	from port
  8339                                  					; won't return if error
  8340                                  aux2:					
  8341 00000316 AA                      		stosb
  8342 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8343                                  exvec2:					
  8344 00000319 F8                      		clc			; all done, successful exit
  8345                                  auxin_retn:	; 18/12/2022
  8346 0000031A C3                      		retn
  8347                                  ; ---------------------------------------------------------------------------
  8348                                  
  8349                                  ;************************************************************************
  8350                                  ;*									*
  8351                                  ;*	auxin - call rom bios to read character from aux port		*
  8352                                  ;*		if error occurs, map the error and return one		*
  8353                                  ;*		level up to device driver exit code, setting		*
  8354                                  ;*		the number of bytes transferred appropriately		*
  8355                                  ;*									*
  8356                                  ;************************************************************************
  8357                                  
  8358                                  auxin:					
  8359 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8360 0000031D E83C00                  		call	auxop
  8361 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8362                                  		;jnz	short arbad	; skip if any error bits set
  8363                                  		;retn
  8364                                  		; 25/06/2023 (BugFix)
  8365 00000323 74F5                    		jz	short auxin_retn
  8366                                  ; ---------------------------------------------------------------------------
  8367                                  
  8368                                  arbad:					
  8369 00000325 58                      		pop	ax		; remove return	address	(near call)
  8370 00000326 30C0                    		xor	al, al
  8371 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8372 0000032A E9AAFD                  		jmp	bc_err_cnt
  8373                                  
  8374                                  ; ---------------------------------------------------------------------------
  8375                                  
  8376                                  ;************************************************************************
  8377                                  ;*									*
  8378                                  ;*	aux_rdnd - non-destructive aux port read			*
  8379                                  ;*									*
  8380                                  ;************************************************************************
  8381                                  
  8382                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8383 0000032D E85200                  		call	getbx
  8384 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8385 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8386 00000334 7511                    		jnz	short auxdrx	; then return character
  8387 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8388 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8389 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8390 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8391 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8392 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8393 00000345 8807                    		mov	[bx], al
  8394                                  auxdrx:					
  8395 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8396                                  ; ---------------------------------------------------------------------------
  8397                                  
  8398                                  auxbus:					
  8399 0000034A E979FE                  		jmp	z_bus_exit
  8400                                  ; ---------------------------------------------------------------------------
  8401                                  
  8402                                  ;************************************************************************
  8403                                  ;*									*
  8404                                  ;*	aux_wrst - return aux port write status				*
  8405                                  ;*									*
  8406                                  ;************************************************************************
  8407                                  
  8408                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8409 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8410 00000350 A820                    		test	al, 20h		; test data set	ready
  8411 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8412 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8413 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8414                                  		; 12/12/2022
  8415                                  		; cf=0	; (test instruction resets cf)
  8416                                  		;clc
  8417 00000359 C3                      		retn
  8418                                  ; ---------------------------------------------------------------------------
  8419                                  
  8420                                  ;************************************************************************
  8421                                  ;*									*
  8422                                  ;*	auxstat - call rom bios to determine aux port status		*
  8423                                  ;*									*
  8424                                  ;*	exit:	ax = status						*
  8425                                  ;*		dx = [auxnum]						*
  8426                                  ;*									*
  8427                                  ;************************************************************************
  8428                                  
  8429                                  auxstat:				
  8430 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8431                                  
  8432                                  		; fall into auxop
  8433                                  
  8434                                  ; =============== S U B	R O U T	I N E =======================================
  8435                                  
  8436                                  ;************************************************************************
  8437                                  ;*									*
  8438                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8439                                  ;*									*
  8440                                  ;*	entry:	ah = int 14h function number				*
  8441                                  ;*	exit:	ax = results						*
  8442                                  ;*		dx = [auxnum]						*
  8443                                  ;*									*
  8444                                  ;************************************************************************
  8445                                  
  8446                                  auxop:		; proc near		
  8447 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8448                                  					; 0=init, 1=send, 2=receive, 3=status
  8449                                  					; get port number
  8450 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8451                                  					; DX = port number (0-3)
  8452                                  					; Return: AX = port status code
  8453 00000362 C3                      		retn
  8454                                  
  8455                                  ; ---------------------------------------------------------------------------
  8456                                  
  8457                                  ;************************************************************************
  8458                                  ;*									*
  8459                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8460                                  ;*		   auxbuf [auxnum] to zero				*
  8461                                  ;*									*
  8462                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8463                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8464                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8465                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8466                                  ;*									*
  8467                                  ;************************************************************************
  8468                                  
  8469                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8470 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8471 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8472                                  					; zero out buffer
  8473                                  		;clc			; all done, successful return
  8474                                  		; 12/12/2022
  8475                                  		; cf=0 ('add' instruction in 'getbx')
  8476 00000369 C3                      		retn
  8477                                  ; ---------------------------------------------------------------------------
  8478                                  
  8479                                  ;************************************************************************
  8480                                  ;*									*
  8481                                  ;*	aux_writ - write to aux device					*
  8482                                  ;*									*
  8483                                  ;************************************************************************
  8484                                  
  8485                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8486                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8487 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8488                                  aux_loop:				
  8489 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8490                                  					; move di pointer to next character
  8491 0000036F 47                      		inc	di
  8492 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8493 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8494 00000375 F6C480                  		test	ah, 80h		; check	for error
  8495 00000378 7405                    		jz	short awok	; then no error
  8496 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8497 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8498                                  ; ---------------------------------------------------------------------------
  8499                                  
  8500                                  awok:					
  8501 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8502                                  					; still	more character to print
  8503                                  		;clc			; all done, successful return
  8504                                  		; 12/12/2022
  8505                                  		; cf=0 (test instruction above)	
  8506 00000381 C3                      		retn
  8507                                  
  8508                                  ; =============== S U B	R O U T	I N E =======================================
  8509                                  
  8510                                  ;************************************************************************
  8511                                  ;*									*
  8512                                  ;*	getbx - return bx -> single byte input buffer for		*
  8513                                  ;*		selected aux port ([auxnum])				*
  8514                                  ;*									*
  8515                                  ;************************************************************************
  8516                                  
  8517                                  getbx:	
  8518 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8519                                  					; for selected aux port	([auxnum])
  8520                                  		;add	bx, offset auxbuf
  8521 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8522                                  		; 12/12/2022
  8523                                  		; cf=0 (if [uaxnum] is valid number) 
  8524 0000038A C3                      		retn
  8525                                  
  8526                                  ; ---------------------------------------------------------------------------
  8527                                  
  8528                                  ; 15/10/2022
  8529                                  
  8530                                  ;----------------------------------------------------------------
  8531                                  ;								:
  8532                                  ;		    clock device driver 			:
  8533                                  ;								:
  8534                                  ;								:
  8535                                  ;   this file contains the clock device driver. 		:
  8536                                  ;								:
  8537                                  ;   the routines in this files are:				:
  8538                                  ;								:
  8539                                  ;	routine 		function			:
  8540                                  ;	------- 		--------			:
  8541                                  ;	tim_writ		set the current time		:
  8542                                  ;	tim_read		read the current time		:
  8543                                  ;	time_to_ticks		convert time to corresponding	:
  8544                                  ;				  number of clock ticks 	:
  8545                                  ;								:
  8546                                  ; the clock ticks at the rate of:				:
  8547                                  ;								:
  8548                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8549                                  ; see each routine for information on the use.			:
  8550                                  ;								:
  8551                                  ;----------------------------------------------------------------
  8552                                  
  8553                                  ; convert time to ticks
  8554                                  ; input : time in cx and dx
  8555                                  ; ticks returned in cx:dx
  8556                                  
  8557                                  ;19/07/2019
  8558                                  ;09/03/2019
  8559                                  
  8560                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8561                                  
  8562                                  ; first convert from hour,min,sec,hund. to
  8563                                  ; total number of 100th of seconds
  8564                                  
  8565 0000038B B03C                    		mov	al, 60
  8566 0000038D F6E5                    		mul	ch		; hours	to minutes
  8567 0000038F B500                    		mov	ch, 0
  8568 00000391 01C8                    		add	ax, cx		; total	minutes
  8569 00000393 B97017                  		mov	cx, 6000	; 60*100
  8570 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8571 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8572 0000039A 89C1                    		mov	cx, ax
  8573 0000039C B064                    		mov	al, 100
  8574 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8575 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8576 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8577 000003A5 B700                    		mov	bh, 0
  8578 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8579 000003A9 83D200                  		adc	dx, 0
  8580                                  
  8581                                  	; dx:cx is time in 1/100 sec
  8582                                  
  8583 000003AC 92                      		xchg	ax, dx
  8584 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8585 000003AE BB0BE9                  		mov	bx, 59659
  8586 000003B1 F7E3                    		mul	bx		; multiply low half
  8587 000003B3 87D1                    		xchg	dx, cx
  8588 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8589 000003B6 F7E3                    		mul	bx		; multiply high	half
  8590 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8591 000003BA 83D200                  		adc	dx, 0
  8592 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8593 000003BE BB0500                  		mov	bx, 5
  8594 000003C1 F6F3                    		div	bl		; divide high half by 5
  8595 000003C3 88C1                    		mov	cl, al
  8596 000003C5 B500                    		mov	ch, 0
  8597 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8598 000003C9 98                      		cbw
  8599 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8600 000003CB F7F3                    		div	bx		; divide low half by 5
  8601 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8602 000003CF CB                      		retf			; far return
  8603                                  
  8604                                  ; ---------------------------------------------------------------------------
  8605                                  
  8606                                  ; 17/10/2022
  8607                                  ; 15/10/2022
  8608                                  
  8609                                  ;--------------------------------------------------------------------
  8610                                  ;
  8611                                  ; tim_writ sets the current time
  8612                                  ;
  8613                                  ; on entry es:[di] has the current time:
  8614                                  ;
  8615                                  ;	number of days since 1-1-80	(word)
  8616                                  ;	minutes (0-59)			(byte)
  8617                                  ;	hours (0-23)			(byte)
  8618                                  ;	hundredths of seconds (0-99)	(byte)
  8619                                  ;	seconds (0-59)			(byte)
  8620                                  ;
  8621                                  ; each number has been checked for the correct range.
  8622                                  ;
  8623                                  ;	NOTE: Any changes in this routine probably require corresponding
  8624                                  ;	changes in the version that is built with the power manager driver.
  8625                                  ;	See ptime.asm.
  8626                                  ;
  8627                                  ;--------------------------------------------------------------------
  8628                                  
  8629                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8630 000003D0 268B05                  		mov	ax, [es:di]
  8631 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8632                                  					; end to avoid tick windows.
  8633 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8634                                  		;cmp	ds:havecmosclock, 0
  8635 000003D9 7426                    		jz	short no_cmos_1
  8636 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8637                                  					; get binary hours
  8638                                  					; convert to bcd
  8639 000003DF FF1E[0205]              		call	far [bintobcd]
  8640                                  		;call	ds:bintobcd	; call far [bintobcd]
  8641 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8642 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8643 000003E9 FF1E[0205]              		call	far [bintobcd]
  8644                                  		;call	ds:bintobcd	; convert to bcd
  8645 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8646 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8647 000003F3 FF1E[0205]              		call	far [bintobcd]
  8648                                  		;call	ds:bintobcd
  8649 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8650 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8651 000003FB FA                      		cli
  8652 000003FC B403                    		mov	ah, 3
  8653 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8654                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8655                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8656                                  					; Return: CMOS clock set
  8657 00000400 FB                      		sti
  8658                                  no_cmos_1:				
  8659 00000401 268B4D02                		mov	cx, [es:di+2]
  8660 00000405 268B5504                		mov	dx, [es:di+4]
  8661                                  		; 17/10/2022
  8662 00000409 FF1E[E206]              		call	far [ttticks]
  8663                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8664                                  					; convert time to ticks
  8665                                  					; cx:dx	now has	time in	ticks
  8666 0000040D FA                      		cli			; turn off timer
  8667 0000040E B401                    		mov	ah, 1
  8668 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8669                                  					; CX:DX	= clock	count
  8670                                  					; Return: time of day set
  8671                                  		;pop	ds:daycnt
  8672 00000412 8F06[F004]              		pop	word [daycnt]
  8673 00000416 FB                      		sti
  8674                                  		;cmp	ds:havecmosclock, 0
  8675 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8676 0000041C 740A                    		jz	short no_cmos_2
  8677 0000041E FF1E[0605]              		call	far [daycnttoday]
  8678                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8679                                  					; convert to bcd format
  8680 00000422 FA                      		cli
  8681 00000423 B405                    		mov	ah, 5
  8682 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8683                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8684                                  					; CH = century (19h or 20h)
  8685                                  					; Return: CMOS clock set
  8686 00000427 FB                      		sti
  8687                                  no_cmos_2:
  8688                                  		; 12/12/2022
  8689                                  		; cf=0				
  8690                                  		;clc
  8691 00000428 C3                      		retn
  8692                                  
  8693                                  ; ---------------------------------------------------------------------------
  8694                                  
  8695                                  ; 15/10/2022
  8696                                  
  8697                                  ;----------------------------------------------------------------------------
  8698                                  ; gettime reads date and time
  8699                                  ; and returns the following information:
  8700                                  ;
  8701                                  ;	es:[di]  =count of days since 1-1-80
  8702                                  ;	es:[di+2]=hours
  8703                                  ;	es:[di+3]=minutes
  8704                                  ;	es:[di+4]=seconds
  8705                                  ;	es:[di+5]=hundredths of seconds
  8706                                  ;
  8707                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8708                                  ;	changes in the version that is built with the power manager driver.
  8709                                  ;	See ptime.asm.
  8710                                  ;----------------------------------------------------------------------------
  8711                                  
  8712                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8713 00000429 E84E00                  		call	GetTickCnt
  8714 0000042C 8B36[F004]              		mov	si, [daycnt]
  8715                                  
  8716                                  ; we now need to convert the time in tick to the time in 100th of
  8717                                  ; seconds. the relation between tick and seconds is:
  8718                                  ;
  8719                                  ;		 65,536 seconds
  8720                                  ;	       ----------------
  8721                                  ;		1,193,180 tick
  8722                                  ;
  8723                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8724                                  ;
  8725                                  ;	ticks from clock  * 65,536 * 100
  8726                                  ;      --------------------------------- = time in 100th of seconds
  8727                                  ;		1,193,180
  8728                                  ;
  8729                                  ; fortunately this formula simplifies to:
  8730                                  ;
  8731                                  ;	ticks from clock * 5 * 65,536
  8732                                  ;      --------------------------------- = time in 100th of seconds
  8733                                  ;		59,659
  8734                                  ;
  8735                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8736                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8737                                  ; my 16 bits to the left.
  8738                                  ;
  8739                                  ; start with ticks in cx:dx
  8740                                  ; multiply by 5
  8741                                  
  8742 00000430 89C8                    		mov	ax, cx
  8743 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8744                                  					; multiply by 5
  8745 00000434 D1E2                    		shl	dx, 1
  8746 00000436 D1D1                    		rcl	cx, 1		; times	2
  8747 00000438 D1E2                    		shl	dx, 1
  8748 0000043A D1D1                    		rcl	cx, 1		; times	4
  8749 0000043C 01DA                    		add	dx, bx
  8750 0000043E 11C8                    		adc	ax, cx		; times	5
  8751 00000440 92                      		xchg	ax, dx
  8752                                  
  8753                                  ; now have ticks * 5 in	dx:ax
  8754                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8755                                  
  8756 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8757 00000444 F7F1                    		div	cx		; dx now has remainder
  8758                                  					; ax has high word of final quotient
  8759 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8760 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8761 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8762                                  
  8763                                  ; rounding based on the	remainder may be added here
  8764                                  ; the result in	bx:ax is time in 1/100 second.
  8765                                  
  8766 0000044C 89DA                    		mov	dx, bx		
  8767 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8768                                  
  8769                                  ; division by 200 is necessary to ensure no overflow--max result
  8770                                  ; is number of seconds in a day/2 = 43200.
  8771                                  
  8772 00000451 F7F1                    		div	cx
  8773 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8774 00000456 7203                    		jb	short noadj
  8775 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8776                                  noadj:					
  8777 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8778 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8779                                  
  8780                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8781                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8782                                  
  8783 0000045E D1D0                    		rcl	ax, 1		
  8784 00000460 B200                    		mov	dl, 0
  8785 00000462 D1D2                    		rcl	dx, 1
  8786 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8787 00000467 F7F1                    		div	cx
  8788 00000469 88D7                    		mov	bh, dl		; save the seconds
  8789 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8790 0000046D 86C4                    		xchg	al, ah
  8791                                  
  8792                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8793                                  
  8794 0000046F 50                      		push	ax
  8795 00000470 89F0                    		mov	ax, si		; daycnt
  8796 00000472 AB                      		stosw
  8797 00000473 58                      		pop	ax
  8798 00000474 AB                      		stosw
  8799 00000475 89D8                    		mov	ax, bx
  8800 00000477 AB                      		stosw
  8801 00000478 F8                      		clc
  8802 00000479 C3                      		retn
  8803                                  
  8804                                  ; =============== S U B	R O U T	I N E =======================================
  8805                                  
  8806                                  ; 15/10/2022
  8807                                  
  8808                                  ;----------------------------------------------------------------------------
  8809                                  ;
  8810                                  ; procedure : GetTickCnt
  8811                                  ;
  8812                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8813                                  ;		of rollover [except when power management driver is in use]. 
  8814                                  ;		Uses the following logic for updating Daycnt
  8815                                  ;
  8816                                  ;		if ( rollover ) {
  8817                                  ;			if ( t_switch )
  8818                                  ;				daycnt++ ;
  8819                                  ;			else
  8820                                  ;				daycnt += rollover ;
  8821                                  ;		}
  8822                                  ;
  8823                                  ; USES : AX
  8824                                  ;
  8825                                  ; RETURNS : CX:DX - tick count
  8826                                  ; MODIFIES : daycnt
  8827                                  ;
  8828                                  ;----------------------------------------------------------------------------
  8829                                  
  8830                                  		; 17/10/2022
  8831                                  GetTickCnt:	
  8832 0000047A 30E4                    		xor	ah, ah
  8833 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8834                                  					; Return: CX:DX	= clock	count
  8835                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8836                                  					; midnight
  8837                                  					; Otherwise, AL	> 0
  8838 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8839 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8840 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8841                                  					; and not flag
  8842 00000487 0106[F004]              		add	[daycnt], ax
  8843 0000048B C3                      		retn
  8844                                  ; ---------------------------------------------------------------------------
  8845                                  
  8846                                  inc_case:				
  8847 0000048C 08C0                    		or	al, al
  8848 0000048E 7404                    		jz	short no_rollover
  8849 00000490 FF06[F004]              		inc	word [daycnt]
  8850                                  no_rollover:				
  8851 00000494 C3                      		retn
  8852                                  
  8853                                  ;----------------------------------------------------------------------------
  8854                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8855                                  ;----------------------------------------------------------------------------
  8856                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8857                                  ; 09/03/2019 - Retro DOS v4.0
  8858                                  
  8859                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8860                                  ; 26/05/2018 - Retro DOS v3.0
  8861                                  ; 23/03/2018 - Retro DOS v2.0
  8862                                  
  8863                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8864                                  
  8865                                  ;struc BPB_TYPE
  8866                                  ;.SECSIZE:	resw 1
  8867                                  ;.SECALL:	resb 1
  8868                                  ;.RESNUM:	resw 1
  8869                                  ;.FATNUM:	resb 1
  8870                                  ;.DIRNUM:	resw 1
  8871                                  ;.SECNUM:	resw 1
  8872                                  ;.FATID:	resb 1
  8873                                  ;.FATSIZE:	resw 1
  8874                                  ;.SLIM:		resw 1
  8875                                  ;.HLIM:		resw 1
  8876                                  ;.HIDDEN:	resw 1
  8877                                  ;.size:
  8878                                  ;endstruc
  8879                                  
  8880                                  ;-----------------------------------------------------------------
  8881                                  ;	disk interface routines
  8882                                  ;-----------------------------------------------------------------
  8883                                  
  8884                                  ; device attribute bits:
  8885                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8886                                  
  8887                                  ;MAXERR		equ	5
  8888                                  ;MAX_HD_FMT_ERR	equ	2
  8889                                  
  8890                                  ;LSTDRV	equ 504h
  8891                                  
  8892                                  ; some floppies do not have changeline. as a result, media-check would
  8893                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8894                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8895                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8896                                  ; the time of the last successful disk operation and compare it with the current
  8897                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8898                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8899                                  ; since we cannot trust the timer to be always available, we record the number 
  8900                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8901                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8902                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8903                                  ; the time of last successful access, if we see that time has passed too,
  8904                                  ; we reset the counter.
  8905                                  
  8906                                  accessmax	equ	5
  8907                                  
  8908                                  ; due to various bogosities, we need to continually adjust what the head
  8909                                  ; settle time is.  the following algorithm is used:
  8910                                  ;
  8911                                  ;   get the current head settle value.
  8912                                  ;   if it is 0, then
  8913                                  ;	set slow = 15
  8914                                  ;   else
  8915                                  ;	set slow = value
  8916                                  ;   ...
  8917                                  ;*********************************************
  8918                                  ;************ old algorithm ******************
  8919                                  ;*   if we are seeking and writing then
  8920                                  ;*	 use slow
  8921                                  ;*   else
  8922                                  ;*	 use fast
  8923                                  ;*********************************************
  8924                                  ;*********** ibm's requested logic ***********
  8925                                  ;   if we are seeking and writing and not on an at then
  8926                                  ;	use slow
  8927                                  ;   else
  8928                                  ;	use fast
  8929                                  ;   ...
  8930                                  ;   restore current head settle value
  8931                                  ;
  8932                                  ;
  8933                                  ;---------------------------------------
  8934                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  8935                                  					; it on after handling config.sys file as a
  8936                                  					; default value, if multrk_flag = multrk_off1.
  8937                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  8938                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  8939                                  
  8940                                  ; close data segment, open Bios_Code segment
  8941                                  
  8942                                  ; 15/10/2022
  8943                                  
  8944                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  8945                                  
  8946                                  ;-----------------------------------------------------------------
  8947                                  ;	command jump table
  8948                                  ;-----------------------------------------------------------------
  8949                                  
  8950 00000495 00                      		db 0
  8951                                  
  8952                                  ; 11/12/2022
  8953                                  %if 0
  8954                                  
  8955                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  8956                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  8957                                  		dw 1742h		; dsk_init
  8958                                  		dw 4EBh			; media_chk
  8959                                  		dw 592h			; get_bpb
  8960                                  		dw 0D5h			; bc_cmderr
  8961                                  		dw 857h			; dsk_read
  8962                                  		dw 83Dh			; x_bus_exit
  8963                                  		dw 558h			; ret_carry_clear
  8964                                  		dw 558h			; ret_carry_clear
  8965                                  		dw 849h			; dsk_writ
  8966                                  		dw 841h			; dsk_writv
  8967                                  		dw 558h			; ret_carry_clear
  8968                                  		dw 558h			; ret_carry_clear
  8969                                  		dw 0D5h			; bc_cmderr
  8970                                  		dw 80Ah			; dsk_open
  8971                                  		dw 81Ah			; dsk_close
  8972                                  		dw 831h			; dsk_rem
  8973                                  		dw 558h			; ret_carry_clear
  8974                                  		dw 558h			; ret_carry_clear
  8975                                  		dw 558h			; ret_carry_clear
  8976                                  		dw 0C6Bh		; do_generic_ioctl
  8977                                  		dw 558h			; ret_carry_clear
  8978                                  		dw 558h			; ret_carry_clear
  8979                                  		dw 558h			; ret_carry_clear
  8980                                  		dw 1124h		; ioctl_getown
  8981                                  		dw 1142h		; ioctl_setown
  8982                                  		dw 129Ah		; ioctl_support_query
  8983                                  
  8984                                  ;dtbl_siz equ $-dsktbl
  8985                                  
  8986                                  %endif
  8987                                  		; 11/12/2022
  8988 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  8989 00000497 [C316]                  		dw dsk_init
  8990 00000499 [DF04]                  		dw media_chk
  8991 0000049B [8505]                  		dw get_bpb
  8992 0000049D [D500]                  		dw bc_cmderr
  8993 0000049F [3508]                  		dw dsk_read
  8994 000004A1 [1B08]                  		dw x_bus_exit
  8995 000004A3 [4B05]                  		dw ret_carry_clear
  8996 000004A5 [4B05]                  		dw ret_carry_clear
  8997 000004A7 [2708]                  		dw dsk_writ
  8998 000004A9 [1F08]                  		dw dsk_writv
  8999 000004AB [4B05]                  		dw ret_carry_clear
  9000 000004AD [4B05]                  		dw ret_carry_clear
  9001 000004AF [D500]                  		dw bc_cmderr
  9002 000004B1 [EB07]                  		dw dsk_open
  9003 000004B3 [FA07]                  		dw dsk_close
  9004 000004B5 [1008]                  		dw dsk_rem
  9005 000004B7 [4B05]                  		dw ret_carry_clear
  9006 000004B9 [4B05]                  		dw ret_carry_clear
  9007 000004BB [4B05]                  		dw ret_carry_clear
  9008 000004BD [420C]                  		dw do_generic_ioctl
  9009 000004BF [4B05]                  		dw ret_carry_clear
  9010 000004C1 [4B05]                  		dw ret_carry_clear
  9011 000004C3 [4B05]                  		dw ret_carry_clear
  9012 000004C5 [D910]                  		dw ioctl_getown
  9013 000004C7 [F610]                  		dw ioctl_setown
  9014 000004C9 [4412]                  		dw ioctl_support_query
  9015                                  
  9016                                  dtbl_siz equ $-dsktbl
  9017                                  
  9018                                  ; =============== S U B	R O U T	I N E =======================================
  9019                                  
  9020                                  ; ---------------------------------------------------------------------------
  9021                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  9022                                  ; the one that belongs to the drive specified. carry is set if none exists
  9023                                  ; for the drive. Pointer is returned in es:[di]
  9024                                  ;
  9025                                  ;  AL contains the logical drive number.
  9026                                  ; ---------------------------------------------------------------------------
  9027                                  
  9028                                  SetDrive:	
  9029                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  9030 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9031                                  X_Scan_Loop:				
  9032 000004CF 26384505                		cmp	[es:di+5], al	
  9033 000004D3 7409                    		jz	short X_SetDrv
  9034 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9035 000004D8 83FFFF                  		cmp	di, 0FFFFh
  9036 000004DB 75F2                    		jnz	short X_Scan_Loop
  9037 000004DD F9                      		stc
  9038                                  X_SetDrv:				
  9039 000004DE C3                      		retn
  9040                                  
  9041                                  ; ---------------------------------------------------------------------------
  9042                                  
  9043                                  ; 15/10/2022
  9044                                  
  9045                                  ; ---------------------------------------------------------------------
  9046                                  ; if id is f9, have a 96tpi disk else
  9047                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9048                                  ;  otherwise if within 2 secs of last disk operation media could not
  9049                                  ;    have changed, otherwise dont know if media has changed
  9050                                  ; ---------------------------------------------------------------------
  9051                                  
  9052                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9053 000004DF E8E9FF                  		call	SetDrive
  9054 000004E2 BE0100                  		mov	si, 1
  9055 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9056                                  					; fchanged_by_format
  9057 000004EA 7416                    		jz	short WeAreNotFakingIt
  9058                                  		; 12/12/2022
  9059 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9060                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9061                                  					; ~fchanged_by_format ;	reset flag
  9062 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9063                                  					; Ensure that we ask the rom if media has changed
  9064 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9065                                  					; fnon_removable
  9066 000004FB 740C                    		jz	short wehaveafloppy
  9067 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  9068 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  9069                                  ; ---------------------------------------------------------------------------
  9070                                  
  9071                                  WeAreNotFakingIt:
  9072                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9073 00000502 26F6452301              		test	byte [es:di+23h], 1
  9074 00000507 7525                    		jnz	short Media_Done
  9075                                  wehaveafloppy:				
  9076 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  9077                                  
  9078                                  		; If we have a floppy with changeline support, we ask the ROM
  9079                                  		; to determine if media has changed. We do not perform the
  9080                                  		; 2 second check for these drives.
  9081                                  
  9082 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9083 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9084 00000512 E87912                  		call	mediacheck	;  Call	into removable routine
  9085 00000515 7236                    		jb	short err_exitj
  9086 00000517 E8C913                  		call	haschange
  9087 0000051A 7512                    		jnz	short Media_Done
  9088                                  mChk_NoChangeLine:
  9089                                  		; If we come here, we have a floppy with no changeline support
  9090                                  			
  9091 0000051C BE0100                  		mov	si, 1		; Presume no change
  9092 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9093 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9094                                  					; Is drive of last access the same?
  9095 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9096 00000528 E82800                  		call	Check_Time_Of_Access
  9097 0000052B EB01                    		jmp	short Media_Done
  9098                                  ; ---------------------------------------------------------------------------
  9099                                  
  9100                                  Media_Unk:				
  9101 0000052D 4E                      		dec	si		; ; Return "I don't know"
  9102                                  
  9103                                  		; SI now contains the correct value for media change.
  9104                                  		; Clean up the left overs
  9105                                  Media_Done:	
  9106                                  		; 19/10/2022			
  9107 0000052E 06                      		push	es
  9108 0000052F C41E[1200]              		les	bx, [ptrsav]
  9109 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9110 00000537 07                      		pop	es
  9111 00000538 09F6                    		or	si, si
  9112 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  9113 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  9114 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9115 00000543 E82F13                  		call	media_set_vid
  9116                                  mChk1_NoChangeLine:			
  9117 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9118                                  					; Make sure we ask rom for media check
  9119                                  ret_carry_clear:			
  9120 0000054B F8                      		clc			; volidok
  9121 0000054C C3                      		retn
  9122                                  ; ---------------------------------------------------------------------------
  9123                                  
  9124                                  err_exitj:				
  9125 0000054D E87D06                  		call	maperror	; guaranteed to	set carry
  9126                                  ret81:					
  9127 00000550 B481                    		mov	ah, 81h		; return error status
  9128 00000552 C3                      		retn			; return with carry set
  9129                                  
  9130                                  ; =============== S U B	R O U T	I N E =======================================
  9131                                  
  9132                                  ; ---------------------------------------------------------------------------
  9133                                  ; perform a check on the time passed since the last access for this physical
  9134                                  ; drive.
  9135                                  ; we are accessing the same drive. if the time of last successful access was
  9136                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9137                                  ; returns in si:
  9138                                  ;	0 - if time of last access was >= 2 seconds
  9139                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9140                                  ; registers affected ax,cx,dx, flags.
  9141                                  ;
  9142                                  ;	assume es:di -> bds, ds->Bios_Data
  9143                                  ; ---------------------------------------------------------------------------
  9144                                  
  9145                                  		; 19/10/2022
  9146                                  Check_Time_Of_Access:
  9147 00000553 BE0100                  		mov	si, 1		; presume no change.
  9148 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9149 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9150                                  					; get stored time
  9151 0000055D 29C2                    		sub	dx, ax
  9152 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9153 00000563 19C1                    		sbb	cx, ax
  9154 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9155 00000567 09D2                    		or	dx, dx		; time must pass
  9156 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  9157 0000056B FE06[1D01]              		inc	byte [accesscount]
  9158 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  9159                                  					; if count is less than threshold, ok
  9160 00000574 720C                    		jb	short timecheck_ret
  9161 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9162 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9163                                  ; ---------------------------------------------------------------------------
  9164                                  
  9165                                  timepassed:				
  9166 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9167                                  					; min elapsed time? (2 seconds)
  9168 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9169                                  
  9170                                  		; everything indicates that we do not know what has happened.
  9171                                  timecheck_unk:				
  9172 00000581 4E                      		dec	si		; presume i don't know
  9173                                  timecheck_ret:				
  9174 00000582 C3                      		retn
  9175                                  
  9176                                  ; ---------------------------------------------------------------------------
  9177                                  ; 15/10/2022
  9178                                  Err_Exitj2:
  9179 00000583 EBC8                    		jmp	short err_exitj
  9180                                  
  9181                                  ; ---------------------------------------------------------------------------
  9182                                  
  9183                                  ; 15/10/2022
  9184                                  
  9185                                  ; ==========================================================================
  9186                                  ; Build a valid bpb for the disk in the drive.
  9187                                  ; ==========================================================================
  9188                                  
  9189                                  		; 19/10/2022
  9190                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9191 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9192 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9193 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9194                                  					; fnon_removable
  9195 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9196                                  
  9197                                  		; let's set the default value for volid,vol_serial,
  9198                                  		; filesys_id in bds table
  9199                                  
  9200 00000592 E83700                  		call	clear_ids
  9201                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9202 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9203 0000059A E85B00                  		call	GetBp		; build	a bpb if necessary
  9204 0000059D 72B1                    		jb	short ret81
  9205                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9206 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9207                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9208 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9209 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9210                                  					; otherwise, conventional boot record
  9211                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9212 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9213 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9214 000005B2 E83413                  		call	set_volume_id
  9215                                  already_gotbpb:				
  9216 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9217                                  					; return the bpb from the current bds
  9218                                  
  9219                                  ;		 fall into setptrsav, es:di -> result
  9220                                  
  9221                                  ; ---------------------------------------------------------------------------
  9222                                  
  9223                                  ; 15/10/2022
  9224                                  
  9225                                  ; ==========================================================================
  9226                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9227                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9228                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9229                                  ;It fails, for instance, when we install an external drive using driver.sys
  9230                                  ;because then the BDS segment is no longer Bios_Data. 
  9231                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9232                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9233                                  ;restored before returning to the caller.
  9234                                  ; ==========================================================================
  9235                                  
  9236                                  		; 19/10/2022
  9237                                  SetPtrSav:	; return point for dsk_init				
  9238 000005B8 8CC1                    		mov	cx, es		; save es
  9239                                  		;les	bx, ds:ptrsav
  9240 000005BA C41E[1200]              		les	bx, [ptrsav]
  9241 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9242 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9243 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9244 000005CA F8                      		clc
  9245 000005CB C3                      		retn
  9246                                  
  9247                                  ; =============== S U B	R O U T	I N E =======================================
  9248                                  
  9249                                  ; 15/10/2022
  9250                                  
  9251                                  ; -----------------------------------------------------
  9252                                  ; clear ids in bds table. only applied for floppies.
  9253                                  ;input:  es:di -> bds table
  9254                                  ;	assumes ds: -> Bios_Data
  9255                                  ;output: volid set to "NO NAME    "
  9256                                  ;	 vol_serial set to 0.
  9257                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9258                                  ;	   depending on the flag fatsize in bds.
  9259                                  ;
  9260                                  ;	trashes si, cx
  9261                                  ; -----------------------------------------------------
  9262                                  
  9263                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9264                                  ;size_of_EXT_SYSTEM_ID equ 8
  9265                                  
  9266                                  clear_ids:
  9267                                  		; 11/09/2023 - Retro DOS v4.1 IO.SYS (Optimization & BugFix)
  9268 000005CC 268A451F                		mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
  9269                                  clear_ids_x:	; 11/09/2023		
  9270                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
  9271 000005D0 57                      		push	di
  9272 000005D1 31C9                    		xor	cx, cx		; no serial number
  9273 000005D3 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9274 000005D7 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9275                                  
  9276                                  		; BUGBUG - there's a lot in common here and with
  9277                                  		; mov_media_ids.. see if we can save some space by
  9278                                  		; merging them... jgl
  9279                                  
  9280                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9281                                  		; 10/12/2022
  9282 000005DB B10B                    		mov	cl, 11 ; cx = 11		
  9283                                  
  9284                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9285 000005DD BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9286 000005E0 83C74B                  		add	di, 75		; BDS.volid
  9287 000005E3 F3A4                    		rep movsb
  9288                                  		
  9289                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
  9290                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9291                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
  9292                                  		;test	byte [es:di+1Fh], 40h
  9293                                  
  9294                                  			; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
  9295                                  			; Microsoft/IBM code has a bug here because the BDS's
  9296                                  			; .volid and .filesys_id fields will be reset
  9297                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9298                                  			; at the BDS offset 31 but current (this) code checks flags
  9299                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9300                                  			;
  9301                                  			; Correct Code:
  9302                                  			; ;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9303                                  			; 11/09/2023
  9304                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
  9305                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
  9306                                  			;
  9307                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9308                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9309                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9310                                  			;
  9311                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9312                                  			; 'clear_ids' is used for floppy disks only and the default
  9313                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9314                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9315                                  
  9316 000005E5 A840                    		test	al, 40h ; * 
  9317                                  		
  9318                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9319 000005E7 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9320 000005EA 7503                    		jnz	short ci_bigfat
  9321                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9322 000005EC BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9323                                  ci_bigfat:				
  9324                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9325                                  		; 10/12/2022
  9326 000005EF B108                    		mov	cl, 8 ; cx = 8 
  9327 000005F1 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9328                                  					; filesys_id field
  9329 000005F4 F3A4                    		rep movsb
  9330 000005F6 5F                      		pop	di		; restore bds pointer
  9331 000005F7 C3                      		retn
  9332                                  
  9333                                  ; =============== S U B	R O U T	I N E =======================================
  9334                                  
  9335                                  ; 15/10/2022
  9336                                  
  9337                                  ; ---------------------------------------------------------------------------
  9338                                  ;	getbp - return bpb from the drive specified by the bds.
  9339                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9340                                  ;	    note that we never come here for fixed disks.
  9341                                  ;	    for all other cases,
  9342                                  ;	      - it reads boot sector to pull out the bpb
  9343                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9344                                  ;		to get the fat id byte to build the bpb from there.
  9345                                  ;
  9346                                  ;   inputs:	es:di point to correct bds.
  9347                                  ;
  9348                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9349                                  ;		carry set, and al=7 if invalid disk.
  9350                                  ;		carry set and error code in al if other error.
  9351                                  ;		if failed to recognize the boot record, then will set the
  9352                                  ;		set_id_flag to 0.
  9353                                  ;		this routine will only work for a floppy diskette.
  9354                                  ;		     for a fixed disk, it will just return.
  9355                                  ;
  9356                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9357                                  ;	  segment definitions. It should be migrated towards.
  9358                                  ;	   now es:di has the bds, ds: has Bios_Data
  9359                                  ; ---------------------------------------------------------------------------
  9360                                  
  9361                                  GetBp:		; if returning fake bpb then return bpb as is.
  9362                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9363 000005F8 26F6452305              		test	byte [es:di+23h], 5
  9364 000005FD 7403                    		jz	short getbp1	; getbp1
  9365 000005FF E99A00                  		jmp	getret_exit
  9366                                  ; ---------------------------------------------------------------------------
  9367                                  
  9368                                  getbp1:					
  9369 00000602 51                      		push	cx
  9370 00000603 52                      		push	dx
  9371 00000604 53                      		push	bx
  9372                                  
  9373                                  		; attempt to read in boot sector and determine bpb.
  9374                                  		; we assume that the 2.x and greater dos disks all
  9375                                  		; have a valid boot sector.
  9376                                  
  9377 00000605 E8A900                  		call	readbootsec
  9378 00000608 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9379 0000060A 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9380 0000060C 7508                    		jnz	short dofatbpb
  9381 0000060E E8EE00                  		call	movbpb		; move bpb into	registers
  9382 00000611 EB57                    		jmp	short Has1
  9383                                  ; ---------------------------------------------------------------------------
  9384                                  
  9385                                  getbp_err_ret_brdg:			
  9386 00000613 E98700                  		jmp	getbp_err_ret
  9387                                  ; ---------------------------------------------------------------------------
  9388                                  
  9389                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9390                                  		; and fill in bpb from there.
  9391                                  dofatbpb:				
  9392 00000616 E85201                  		call	readfat		; puts media descriptor	byte in	ah
  9393 00000619 72F8                    		jb	short getbp_err_ret_brdg
  9394                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9395 0000061B 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9396 00000620 7403                    		jz	short bpb_nochangeline ; brif not
  9397 00000622 E86512                  		call	hidensity	; may not return! May add sp, 2	and
  9398                                  					; jump to has1!!!!!! or	has720K
  9399                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9400 00000625 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9401                                  					; ffSmall
  9402 0000062A 7515                    		jnz	short is_floppy
  9403 0000062C 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9404 0000062F 7576                    		jnz	short got_unknown_medium
  9405                                  Has720K:				
  9406                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9407 00000631 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9408                                  
  9409                                  		; es points to segment of bds. the following should be modified
  9410                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9411                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9412                                  
  9413                                  		; 10/12/2022
  9414                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9415                                  		; 21/12/2022
  9416 00000634 8A07                    		mov	al, [bx]
  9417 00000636 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9418 00000639 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9419 0000063C 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9420                                  		; 19/10/2022 - Temporary !
  9421                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9422                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9423                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9424                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9425                                  
  9426 0000063F EB29                    		jmp	short Has1
  9427                                  ; ---------------------------------------------------------------------------
  9428                                  
  9429                                  is_floppy:			; must be a 5.25" floppy if we come here
  9430 00000641 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9431 00000644 7261                    		jb	short got_unknown_medium
  9432 00000646 B001                    		mov	al, 1		; set number of	fat sectors
  9433 00000648 BB0840                  		mov	bx, 16392	; 64*256+8
  9434                                  					; set dir entries and sector max
  9435 0000064B B94001                  		mov	cx, 320		; 40*8
  9436                                  					; set size of drive
  9437 0000064E BA0101                  		mov	dx, 257		; 01*256+1
  9438                                  					; set head limit and sec/all unit
  9439 00000651 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9440 00000654 7507                    		jnz	short has8	; nz = has 8 sectors
  9441 00000656 FEC0                    		inc	al		; inc number of	fat sectors
  9442 00000658 FEC3                    		inc	bl		; inc sector max
  9443                                  		;add	cx, 40		; increase size	(to 360)
  9444                                  		; 18/12/2022
  9445 0000065A 80C128                  		add	cl, 40
  9446                                  has8:					
  9447 0000065D F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9448 00000660 7408                    		jz	short Has1	; jz = 1 head
  9449 00000662 01C9                    		add	cx, cx		; double size of disk
  9450 00000664 B770                    		mov	bh, 112		; increase number of directory entries
  9451 00000666 FEC6                    		inc	dh		; inc sec/all unit
  9452 00000668 FEC2                    		inc	dl		; inc head limit
  9453                                  Has1:					
  9454                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
  9455 0000066A 1E                      		push	ds
  9456 0000066B 06                      		push	es
  9457 0000066C 1F                      		pop	ds		
  9458                                  				
  9459                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9460                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9461                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9462                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
  9463                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9464                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9465                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9466                                  
  9467 0000066D 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
  9468 00000670 30F6                    		xor	dh, dh
  9469 00000672 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
  9470 00000675 88FA                    		mov	dl, bh
  9471 00000677 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  9472 0000067A 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
  9473 0000067D 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
  9474 00000680 886510                  		mov	[di+10h], ah	; [di+BDS.media]
  9475 00000683 88C2                    		mov	dl, al
  9476 00000685 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
  9477 00000688 88DA                    		mov	dl, bl
  9478 0000068A 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
  9479                                  
  9480                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9481                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9482                                  		; to 0 since this code is for floppies
  9483                                  
  9484                                  		; 18/12/2022
  9485                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9486                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9487                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9488                                  		; 18/12/2022
  9489 0000068D 29C9                    		sub	cx, cx ; 0
  9490                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9491                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9492                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9493                                  		
  9494                                  		; 02/09/2023
  9495 0000068F 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
  9496 00000692 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
  9497 00000695 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
  9498                                  		
  9499 00000698 1F                      		pop	ds ; 02/09/2023
  9500                                  getret:					
  9501 00000699 5B                      		pop	bx
  9502 0000069A 5A                      		pop	dx
  9503 0000069B 59                      		pop	cx
  9504                                  getret_exit:				
  9505 0000069C C3                      		retn
  9506                                  ; ---------------------------------------------------------------------------
  9507                                  
  9508                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9509                                  		;mov	ds:set_id_flag,	0
  9510                                  		; 19/10/2022
  9511 0000069D C606[0A05]00            		mov	byte [set_id_flag], 0
  9512 000006A2 E82805                  		call	maperror
  9513 000006A5 EBF2                    		jmp	short getret
  9514                                  ; ---------------------------------------------------------------------------
  9515                                  
  9516                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9517                                  		; we do	not assume any type of bpb for this medium.
  9518                                  
  9519                                  got_unknown_medium:			
  9520                                  		;mov	ds:set_id_flag,	0 
  9521 000006A7 C606[0A05]00            		mov	byte [set_id_flag], 0
  9522 000006AC B007                    		mov	al, 7
  9523 000006AE F9                      		stc
  9524 000006AF EBE8                    		jmp	short getret
  9525                                  
  9526                                  ; =============== S U B	R O U T	I N E =======================================
  9527                                  
  9528                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9529                                  
  9530                                  ; ----------------------------------------------------------------
  9531                                  ; read in the boot sector. set carry if error in reading sector.
  9532                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9533                                  ;
  9534                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9535                                  ; ----------------------------------------------------------------
  9536                                  
  9537                                  ; 10/03/2019 - Retro DOS v4.0
  9538                                  
  9539                                  readbootsec:	
  9540 000006B1 B600                    		mov	dh, 0		; head 0
  9541 000006B3 B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9542 000006B6 E8BF00                  		call	read_sector
  9543 000006B9 7243                    		jb	short err_ret
  9544 000006BB 31DB                    		xor	bx, bx		; assume valid boot sector
  9545                                  
  9546                                  		; put a sanity check for the boot sector in here to detect
  9547                                  		; boot sectors that do not have valid bpbs. we examine the
  9548                                  		; first two bytes - they must contain a long jump (69h) or a
  9549                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9550                                  		; (E9h). if this test is passed, we further check by examining
  9551                                  		; the signature at the end of the boot sector for the word
  9552                                  		; AA55h. if the signature is not present, we examine the media
  9553                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9554                                  		; logic is modified a little bit. we are not going to check
  9555                                  		; signature. instead we are going to sanity check the media
  9556                                  		; byte in bpb regardless of the validity of signature. this is
  9557                                  		; to save the already developed commercial products that have
  9558                                  		; good jump instruction and signature but with the false bpb
  9559                                  		; informations
  9560                                  
  9561                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9562                                  
  9563                                  		; 02/09/2023
  9564                                  		; 19/10/2022
  9565                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
  9566                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
  9567                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9568                                  		;jz	short check_bpb_mediabyte ; no need for	nop
  9569                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
  9570                                  		;jnz	short invalidbootsec
  9571                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
  9572                                  		;jnz	short invalidbootsec
  9573                                  
  9574                                  		; 02/09/2023 (PCDOS 7.1)
  9575 000006BD A0[4E01]                		mov	al, [disksector]
  9576 000006C0 3C69                    		cmp	al, 69h		; is it a direct jump?
  9577 000006C2 740F                    		je	short check_bpb_mediabyte
  9578                                  					; don't need to find a nop
  9579 000006C4 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
  9580 000006C6 740B                    		je	short check_bpb_mediabyte
  9581                                  					; no need for nop
  9582 000006C8 3CEB                    		cmp	al, 0EBh	; how about a short jump?
  9583 000006CA 7530                    		jne	short invalidbootsec
  9584 000006CC 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9585 000006D1 7529                    		jne	short invalidbootsec
  9586                                  
  9587                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9588                                  ;
  9589                                  ;; 10/03/2019
  9590                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9591                                  ;;
  9592                                  ;; Don't have to perform the following signature check since
  9593                                  ;; we need to check the media byte even with the good signatured diskette.
  9594                                  ;;
  9595                                  ;;check_signature:
  9596                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9597                                  ;;							 ; disk or 1.x media.
  9598                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9599                                  ;;					       ; may need some special handling
  9600                                  
  9601                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9602                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9603                                  ; by examining the media descriptor in the boot sector.
  9604                                  
  9605                                  		; 19/10/2022
  9606                                  check_bpb_mediabyte:
  9607 000006D3 A0[6301]                		mov	al, [disksector+15h]
  9608                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9609 000006D6 50                      		push	ax ; 02/09/2023
  9610 000006D7 24F0                    		and	al, 0F0h
  9611 000006D9 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9612 000006DB 58                      		pop	ax ; 02/09/2023
  9613 000006DC 751E                    		jnz	short invalidbootsec
  9614                                  
  9615                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9616                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9617                                  ; sectors. these are specifically diskettes that were formatted in drives
  9618                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9619                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9620                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9621                                  ; help our build bpb routine to recognise these specific cases, and to
  9622                                  ; set up out copy of the bpb accordingly.
  9623                                  ; we do this by checking to see if the boot sector is off a diskette that
  9624                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9625                                  ; sec/clus field to 1. if not, we carry on as normal.
  9626                                  
  9627                                  checksinglesided:
  9628                                  		;mov	al, [disksector+15h]
  9629                                  		; 02/09/2023
  9630                                  		; al = [disksector+15h]
  9631 000006DE 3CF0                    		cmp	al, 0F0h
  9632 000006E0 741B                    		jz	short gooddsk
  9633 000006E2 A801                    		test	al, 1
  9634 000006E4 7517                    		jnz	short gooddsk
  9635 000006E6 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9636 000006EC 7507                    		jnz	short mustbeearlier
  9637 000006EE 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9638 000006F3 7308                    		jnb	short gooddsk
  9639                                  
  9640                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9641                                  
  9642                                  mustbeearlier:				
  9643 000006F5 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9644                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9645 000006FA EB01                    		jmp	short gooddsk
  9646                                  ; ---------------------------------------------------------------------------
  9647                                  
  9648                                  invalidbootsec:				
  9649 000006FC 43                      		inc	bx		; indicate that boot sector invalid
  9650                                  		; 10/12/2022
  9651                                  movbpb_ret:
  9652                                  gooddsk:				
  9653 000006FD F8                      		clc
  9654                                  err_ret:
  9655 000006FE C3                      		retn
  9656                                  ; ---------------------------------------------------------------------------
  9657                                  
  9658                                  		; 10/12/2022
  9659                                  ;err_ret:				
  9660                                  		;retn
  9661                                  
  9662                                  ; =============== S U B	R O U T	I N E =======================================
  9663                                  
  9664                                  ; 15/10/2022
  9665                                  ; ---------------------------------------------------------------------------
  9666                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9667                                  ; getbp routine at has1
  9668                                  ;
  9669                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9670                                  ; serial number, volume label, file system id in bds according to
  9671                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9672                                  ; to signal that volume label is set already from the extended boot record
  9673                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9674                                  ; the volume label in the root directory.)
  9675                                  ; ---------------------------------------------------------------------------
  9676                                  
  9677                                  ; 10/03/2019 - Retro DOS v4.0
  9678                                  
  9679                                  		; 19/10/2022
  9680                                  movbpb:	
  9681 000006FF 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9682                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9683                                  					; sectors per unit
  9684 00000703 8A3E[5F01]              		mov	bh, [disksector+11h]
  9685                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9686                                  					; number of directory entries
  9687 00000707 8B0E[6101]              		mov	cx, [disksector+13h]
  9688                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9689                                  					; size of drive
  9690 0000070B 8A26[6301]              		mov	ah, [disksector+15h]
  9691                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9692                                  					; media	descriptor
  9693 0000070F A0[6401]                		mov	al, [disksector+16h];
  9694                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9695                                  					; number of fat	sectors
  9696 00000712 8A1E[6601]              		mov	bl, [disksector+18h]
  9697                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9698                                  					; sectors per track
  9699 00000716 8A16[6801]              		mov	dl, [disksector+1Ah]
  9700                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9701                                  					; number of heads
  9702 0000071A 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9703 0000071F 75DC                    		jnz	short movbpb_ret
  9704 00000721 E81200                  		call	mov_media_ids
  9705 00000724 7205                    		jb	short movbpb_conv ; conventional boot record?
  9706 00000726 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9707                                  movbpb_conv:				
  9708 0000072B 803E[7700]01            		cmp	byte [fhave96], 1
  9709 00000730 75CB                    		jnz	short movbpb_ret
  9710 00000732 E8A811                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9711                                  		; 10/12/2022
  9712                                  		; cf = 0
  9713                                  ;movbpb_ret:				
  9714                                  		;clc
  9715 00000735 C3                      		retn
  9716                                  
  9717                                  ; =============== S U B	R O U T	I N E =======================================
  9718                                  
  9719                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9720                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9721                                  ;by es:di.
  9722                                  
  9723                                  ;in.) es:di -> bds
  9724                                  ;     ds:disksector = valid extended boot record.
  9725                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9726                                  ;      the boot record information.
  9727                                  ;     carry flag set if not an extended bpb.
  9728                                  ;     all registers saved except the flag.
  9729                                  
  9730                                  		; 19/10/2022
  9731                                  mov_media_ids:		
  9732 00000736 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9733                                  					; [disksector+EXT_BOOT.SIG],
  9734                                  					; EXT_BOOT_SIGNATURE
  9735 0000073B 752C                    		jnz	short mmi_not_ext
  9736 0000073D 51                      		push	cx
  9737 0000073E 8B0E[7501]              		mov	cx, [disksector+27h]
  9738                                  					; [disksector+EXT_BOOT.SERIAL]
  9739 00000742 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9740 00000746 8B0E[7701]              		mov	cx, [disksector+29h]
  9741                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9742 0000074A 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9743 0000074E 57                      		push	di
  9744 0000074F 56                      		push	si
  9745 00000750 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9746 00000753 BE[7901]                		mov	si, disksector+2Bh
  9747                                  		;mov	si, (offset disksector+2Bh) ;
  9748                                  					; disksector+EXT_BOOT.VOL_LABEL
  9749 00000756 83C74B                  		add	di, 75		; BDS.volid
  9750 00000759 F3A4                    		rep movsb
  9751                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9752                                  		; 10/12/2022
  9753 0000075B B108                    		mov	cl, 8 ; cx = 8
  9754 0000075D BE[8401]                		mov	si, disksector+36h
  9755                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9756 00000760 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9757 00000763 F3A4                    		rep movsb
  9758 00000765 5E                      		pop	si
  9759 00000766 5F                      		pop	di
  9760 00000767 59                      		pop	cx
  9761                                  		; 10/12/2022
  9762                                  		; cf = 0
  9763                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9764                                  				; (20/09/2022)
  9765 00000768 C3                      		retn
  9766                                  ; ---------------------------------------------------------------------------
  9767                                  
  9768                                  mmi_not_ext:				
  9769 00000769 F9                      		stc
  9770 0000076A C3                      		retn
  9771                                  
  9772                                  ; =============== S U B	R O U T	I N E =======================================
  9773                                  
  9774                                  ; 15/10/2022
  9775                                  ; --------------------------------------------------------------
  9776                                  ; read in the fat sector and get the media byte from it.
  9777                                  ; input : es:di -> bds
  9778                                  ; output:
  9779                                  ;	  carry set if an error occurs, ax contains error code.
  9780                                  ;	  otherwise, ah contains media byte on exit
  9781                                  ; --------------------------------------------------------------
  9782                                  
  9783                                  readfat:	
  9784                                  		;mov	dh, 0
  9785                                  		; 10/12/2022
  9786 0000076B 30F6                    		xor	dh, dh
  9787 0000076D B90200                  		mov	cx, 2		; head 0
  9788                                  					; cylinder 0, sector 2
  9789 00000770 E80500                  		call	read_sector
  9790 00000773 7202                    		jb	short bad_fat_ret
  9791 00000775 8A27                    		mov	ah, [bx]	; media	byte
  9792                                  bad_fat_ret:				
  9793 00000777 C3                      		retn
  9794                                  
  9795                                  ; =============== S U B	R O U T	I N E =======================================
  9796                                  
  9797                                  ; 15/10/2022
  9798                                  
  9799                                  ; ---------------------------------------------------------------------------
  9800                                  ; read a single sector into the temp buffer.
  9801                                  ; perform three retries in case of error.
  9802                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9803                                  ;		cx has sector and cylinder
  9804                                  ;		dh has head
  9805                                  ;		es:di has bds
  9806                                  ;		ds has Bios_Data
  9807                                  ;
  9808                                  ;   outputs:	carry clear
  9809                                  ;		    Bios_Data:bx point to sector
  9810                                  ;		       (note: some callers assume location of buffer)
  9811                                  ;
  9812                                  ;		carry set
  9813                                  ;		    ax has rom error code
  9814                                  ;
  9815                                  ; register bp is preserved.
  9816                                  ; ---------------------------------------------------------------------------
  9817                                  
  9818                                  ; 10/03/2019 - Retro DOS v4.0
  9819                                  
  9820                                  		; 19/10/2022
  9821                                  read_sector:	
  9822 00000778 55                      		push	bp
  9823 00000779 BD0300                  		mov	bp, 3		; make 3 attempts
  9824 0000077C 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9825 00000780 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9826                                  rd_ret:					
  9827 00000783 06                      		push	es
  9828 00000784 1E                      		push	ds
  9829 00000785 07                      		pop	es
  9830 00000786 B80102                  		mov	ax, 201h
  9831 00000789 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9832                                  					; AL = number of sectors to read, CH = track, CL = sector
  9833                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9834                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9835 0000078B 07                      		pop	es
  9836 0000078C 734A                    		jnb	short okret2
  9837                                  rd_rty:					
  9838 0000078E E87404                  		call	again		; reset	disk, decrement	bp, preserve ax
  9839 00000791 7442                    		jz	short err_rd_ret
  9840 00000793 26F6452301              		test	byte [es:di+23h], 1
  9841                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9842                                  					; fnon_removable
  9843 00000798 75E9                    		jnz	short rd_ret
  9844 0000079A 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9845 0000079F 7510                    		jnz	short rd_skip1_dpt
  9846 000007A1 50                      		push	ax
  9847 000007A2 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9848 000007A3 C536[2D01]              		lds	si, [dpt]
  9849                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9850                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9851                                  		;			; NORMSETTLE
  9852                                  		; 12/12/2022
  9853 000007A7 B00F                    		mov	al, 15
  9854 000007A9 864409                  		xchg	al, [si+9]
  9855                                  		; 
  9856 000007AC 1F                      		pop	ds
  9857 000007AD A2[2A01]                		mov	[save_head_sttl], al
  9858 000007B0 58                      		pop	ax
  9859                                  rd_skip1_dpt:				
  9860 000007B1 06                      		push	es
  9861 000007B2 1E                      		push	ds
  9862 000007B3 07                      		pop	es
  9863 000007B4 B80102                  		mov	ax, 201h
  9864 000007B7 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9865                                  					; AL = number of sectors to read, CH = track, CL = sector
  9866                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9867                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9868 000007B9 07                      		pop	es
  9869 000007BA 9C                      		pushf
  9870 000007BB 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9871 000007C0 750E                    		jnz	short rd_skip2_dpt
  9872 000007C2 50                      		push	ax
  9873 000007C3 A0[2A01]                		mov	al, [save_head_sttl]
  9874 000007C6 1E                      		push	ds
  9875 000007C7 C536[2D01]              		lds	si, [dpt]
  9876 000007CB 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9877 000007CE 1F                      		pop	ds
  9878 000007CF 58                      		pop	ax
  9879                                  rd_skip2_dpt:				
  9880 000007D0 9D                      		popf
  9881 000007D1 7305                    		jnb	short okret2
  9882 000007D3 EBB9                    		jmp	short rd_rty
  9883                                  ; ---------------------------------------------------------------------------
  9884                                  
  9885                                  err_rd_ret:				
  9886 000007D5 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9887                                  					; return error
  9888 000007D7 F9                      		stc
  9889                                  
  9890                                  ; update information pertaining to last drive accessed, time of access, last
  9891                                  ; track accessed in that drive.
  9892                                  
  9893                                  okret2:					
  9894 000007D8 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9895 000007DC 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9896 000007E0 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9897                                  					; save last track accessed on this drive
  9898                                  					; preserve flags in case error occurred
  9899 000007E4 9C                      		pushf
  9900 000007E5 E8FD03                  		call	set_tim
  9901 000007E8 9D                      		popf			; restore flags
  9902 000007E9 5D                      		pop	bp
  9903 000007EA C3                      		retn
  9904                                  
  9905                                  ;----------------------------------------------------------------------------
  9906                                  ;	disk open/close routines
  9907                                  ;----------------------------------------------------------------------------
  9908                                  
  9909                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9910 000007EB 803E[7700]00            		cmp	byte [fhave96], 0
  9911 000007F0 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9912 000007F2 E8D6FC                  		call	SetDrive	; get bds for drive
  9913 000007F5 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9914                                  dsk_open_exit:	
  9915                                  		; 10/12/2022
  9916                                  		; cf = 0			
  9917                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9918                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9919 000007F9 C3                      		retn
  9920                                  ; ---------------------------------------------------------------------------
  9921                                  
  9922                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9923 000007FA 803E[7700]00            		cmp	byte [fhave96], 0
  9924 000007FF 740E                    		jz	short exitjx	; done if no changeline	support
  9925 00000801 E8C7FC                  		call	SetDrive	; get bds for drive
  9926 00000804 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9927 00000809 7404                    		jz	short exitjx	; watch	out for	wrap
  9928 0000080B 26FF4D20                		dec	word [es:di+20h]
  9929                                  exitjx:					
  9930                                  		; 10/12/2022
  9931                                  		; cf = 0
  9932                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9933                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9934 0000080F C3                      		retn
  9935                                  
  9936                                  ;----------------------------------------------------------------------------
  9937                                  ;		disk removable routine
  9938                                  ;----------------------------------------------------------------------------
  9939                                  
  9940                                  		; al is	unit #
  9941                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9942 00000810 E8B8FC                  		call	SetDrive	; get bds for this drive
  9943                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9944 00000813 26F6452301              		test	byte [es:di+23h], 1
  9945                                  		;jnz	short x_bus_exit ; non_rem
  9946 00000818 7501                    		jnz	short non_rem	; 15/10/2022
  9947                                  		; 10/12/2022
  9948                                  		; cf = 0
  9949                                  		;clc			; CF is already ZERO here
  9950                                  					; 15/10/2022
  9951 0000081A C3                      		retn
  9952                                  ; ---------------------------------------------------------------------------
  9953                                  
  9954                                  non_rem:
  9955                                  x_bus_exit:				
  9956 0000081B B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9957                                  					; return busy status
  9958 0000081D F9                      		stc
  9959                                  dsk_ret:				
  9960 0000081E C3                      		retn
  9961                                  
  9962                                  ;----------------------------------------------------------------------------
  9963                                  ;		disk i/o routines
  9964                                  ;----------------------------------------------------------------------------
  9965                                  
  9966                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9967                                  		;mov	word [wrtverify], 103h
  9968                                  		; 19/10/2022
  9969 0000081F C706[2001]0301          		mov	word [rflag], 103h
  9970                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
  9971 00000825 EB06                    		jmp	short dsk_cl
  9972                                  ; ---------------------------------------------------------------------------
  9973                                  
  9974                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
  9975                                  		;mov	word [wrtverify], 3
  9976                                  		; 19/10/2022
  9977 00000827 C706[2001]0300          		mov	word [rflag], 3
  9978                                  		;mov	word ptr ds:rflag, 3 ; romwrite
  9979                                  
  9980                                  dsk_cl:					
  9981 0000082D E89800                  		call	diskio		; romwrite
  9982                                  ; ---------------------------------------------------------------------------
  9983                                  
  9984                                  dsk_io:					
  9985 00000830 73EC                    		jnb	short dsk_ret
  9986 00000832 E9A2F8                  		jmp	bc_err_cnt
  9987                                  ; ---------------------------------------------------------------------------
  9988                                  
  9989                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
  9990 00000835 E88B00                  		call	diskrd
  9991 00000838 EBF6                    		jmp	short dsk_io
  9992                                  
  9993                                  ; =============== S U B	R O U T	I N E =======================================
  9994                                  
  9995                                  ; 15/10/2022
  9996                                  ; 10/03/2019 - Retro DOS v4.0
  9997                                  
  9998                                  ;-----------------------------------------------------------
  9999                                  ; miscellaneous odd jump routines. 
 10000                                  ; moved out of mainline for speed.
 10001                                  
 10002                                  ; if we have a system where we have virtual drives, we need 
 10003                                  ; to prompt the user to place the correct disk in the drive.
 10004                                  ;
 10005                                  ;	assume es:di -> bds, ds:->Bios_Data
 10006                                  ;-----------------------------------------------------------
 10007                                  
 10008                                  		; 19/10/2022
 10009                                  checksingle:		
 10010 0000083A 50                      		push	ax
 10011 0000083B 53                      		push	bx
 10012 0000083C 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 10013                                  
 10014                                  ; if hard drive, cannot change disk.
 10015                                  ; if current owner of physical drive, no need to change diskette.
 10016                                  
 10017 00000840 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 10018 00000843 7573                    		jnz	short singleret
 10019 00000845 F6C310                  		test	bl, 10h		; fi_am_mult
 10020                                  					; is there a drive sharing this	physical drive?
 10021 00000848 746E                    		jz	short singleret
 10022                                  
 10023                                  
 10024                                  ; look for the previous owner of this physical drive
 10025                                  ; and reset its ownership flag.
 10026                                  
 10027 0000084A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10028                                  					; get physical drive number
 10029 0000084E 06                      		push	es		; preserve pointer to current bds
 10030 0000084F 57                      		push	di
 10031 00000850 C43E[1901]              		les	di, [start_bds] ; get first bds
 10032                                  scan_list:				
 10033 00000854 26384504                		cmp	[es:di+4], al
 10034 00000858 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 10035 0000085A B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 10036 0000085C 26845D23                		test	[es:di+23h], bl
 10037 00000860 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 10038 00000862 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
 10039 00000866 5F                      		pop	di		; restore pointer to current bds
 10040 00000867 07                      		pop	es
 10041 00000868 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
 10042                                  
 10043                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 10044                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 10045                                  ; in this case.
 10046 0000086C 803E[7A00]01            		cmp	byte [fsetowner], 1
 10047 00000871 7517                    		jnz	short not_fsetowner
 10048                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 10049 00000873 26807D0400              		cmp	byte [es:di+4], 0
 10050 00000878 753E                    		jnz	short singleret
 10051 0000087A 268A4505                		mov	al, [es:di+5]
 10052                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 10053                                  					; get the DOS drive letter
 10054 0000087E 06                      		push	es
 10055 0000087F 8E06[1A00]              		mov	es, [zeroseg]
 10056 00000883 26A20405                		mov	[es:LSTDRV], al
 10057                                  		;mov	es:504h, al	; [es:LSTDRV]
 10058                                  					; set up sdsb
 10059 00000887 07                      		pop	es		; restore bds pointer
 10060 00000888 EB2E                    		jmp	short singleret
 10061                                  ; ---------------------------------------------------------------------------
 10062                                  
 10063                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10064                                  ; we now check to see if we are in a single drive system and the application
 10065                                  ; has "cleverly" diddled the sdsb
 10066                                  
 10067                                  not_fsetowner:				
 10068 0000088A 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10069 0000088F 7517                    		jnz	short ignore_sdsb
 10070 00000891 50                      		push	ax
 10071 00000892 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10072 00000896 88C4                    		mov	ah, al
 10073 00000898 06                      		push	es
 10074 00000899 8E06[1A00]              		mov	es, [zeroseg]
 10075 0000089D 2686060405              		xchg	al, [es:LSTDRV]
 10076                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10077                                  					; then swap(curr_drv,req_drv)
 10078 000008A2 07                      		pop	es
 10079 000008A3 38C4                    		cmp	ah, al		; else
 10080 000008A5 58                      		pop	ax		; swap(curr_drv,req_drv)
 10081 000008A6 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10082                                  ignore_sdsb:				
 10083 000008A8 E85C0E                  		call	swpdsk
 10084 000008AB EB0B                    		jmp	short singleret
 10085                                  ; ---------------------------------------------------------------------------
 10086                                  
 10087                                  scan_skip:	
 10088 000008AD 26C43D                  		les	di, [es:di]			
 10089                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10090                                  					; go to	next bds
 10091 000008B0 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10092 000008B3 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10093 000008B5 F9                      		stc
 10094 000008B6 5F                      		pop	di		; restore current bds
 10095 000008B7 07                      		pop	es
 10096                                  
 10097                                  singleret:				
 10098 000008B8 5B                      		pop	bx
 10099 000008B9 58                      		pop	ax
 10100 000008BA C3                      		retn
 10101                                  
 10102                                  ; ---------------------------------------------------------------------------
 10103                                  
 10104                                  baddrive:				
 10105 000008BB B008                    		mov	al, 8		; sector not found
 10106 000008BD EB02                    		jmp	short baddrive_ret
 10107                                  ; ---------------------------------------------------------------------------
 10108                                  
 10109                                  unformatteddrive:				
 10110 000008BF B007                    		mov	al, 7		; unknown media
 10111                                  baddrive_ret:				
 10112 000008C1 F9                      		stc
 10113                                  ; ---------------------------------------------------------------------------
 10114                                  
 10115                                  ioret:		
 10116 000008C2 C3                      		retn
 10117                                  
 10118                                  ; ---------------------------------------------------------------------------
 10119                                  
 10120                                  ; 15/10/52022
 10121                                  
 10122                                  ; ---------------------------------------------------------------------------
 10123                                  ;	disk i/o handler
 10124                                  ;
 10125                                  ;	al = drive number (0-6)
 10126                                  ;	ah = media descriptor
 10127                                  ;	cx = sector count
 10128                                  ;	dx = first sector (low)
 10129                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10130                                  ;	ds = cs
 10131                                  ;	es:di = transfer address
 10132                                  ;	[rflag]=operation (2=read, 3=write)
 10133                                  ;	[verify]=1 for verify after write
 10134                                  ;
 10135                                  ;	if successful carry flag = 0
 10136                                  ;	  else cf=1 and al contains error code
 10137                                  ; ---------------------------------------------------------------------------
 10138                                  
 10139                                  diskrd:	
 10140                                  		;mov	ds:rflag, 2	; romread
 10141                                  		; 19/10/2022
 10142 000008C3 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10143                                  
 10144                                  ; =============== S U B	R O U T	I N E =======================================
 10145                                  
 10146                                  		; 19/10/2022
 10147                                  diskio:
 10148 000008C8 89FB                    		mov	bx, di		; es:bx	= transfer address
 10149 000008CA 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
 10150 000008CE E8FAFB                  		call	SetDrive
 10151 000008D1 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10152 000008D5 A2[1F01]                		mov	[medbyt], al
 10153                                  		;jcxz	short ioret
 10154 000008D8 E3E8                    		jcxz	ioret
 10155                                  
 10156                                  ; see if the media is formatted or not by checking the flags field in
 10157                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10158                                  ; go to the error exit at label unformatteddrive.
 10159                                  
 10160 000008DA 26F6452402              		test	byte [es:di+24h], 2
 10161                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10162                                  					; unformatted_media
 10163 000008DF 75DE                    		jnz	short unformatteddrive
 10164 000008E1 890E[2201]              		mov	[seccnt], cx	; save sector count
 10165 000008E5 8926[3501]              		mov	[spsav], sp	; save sp
 10166                                  
 10167                                  ; ensure that we are trying to access valid sectors on the drive
 10168                                  
 10169 000008E9 89D0                    		mov	ax, dx
 10170 000008EB 31F6                    		xor	si, si
 10171 000008ED 01CA                    		add	dx, cx
 10172                                  		;adc	si, 0
 10173                                  		; 02/09/2023 (PCDOS 7.1)
 10174 000008EF D1D6                    		rcl	si, 1
 10175 000008F1 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10176                                  					; > 32 bit sector ?
 10177 000008F6 740C                    		jz	short sanity32
 10178                                  		;cmp	si, 0
 10179                                  		; 02/09/2023
 10180 000008F8 09F6                    		or	si, si
 10181 000008FA 75BF                    		jnz	short baddrive
 10182 000008FC 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10183 00000900 77B9                    		ja	short baddrive
 10184 00000902 EB12                    		jmp	short sanityok
 10185                                  ; ---------------------------------------------------------------------------
 10186                                  
 10187                                  sanity32:				
 10188 00000904 0336[2B05]              		add	si, [start_sec_h]
 10189 00000908 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10190 0000090C 7208                    		jb	short sanityok
 10191 0000090E 77AB                    		ja	short baddrive
 10192 00000910 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10193 00000914 77A5                    		ja	short baddrive
 10194                                  
 10195                                  sanityok:				
 10196 00000916 8B16[2B05]              		mov	dx, [start_sec_h]
 10197 0000091A 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10198 0000091E 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10199                                  
 10200                                  ; now dx;ax have the physical first sector.
 10201                                  ; since the following procedures is going to destroy ax, let's
 10202                                  ; save it temporarily to saved_word.
 10203                                  
 10204 00000922 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
 10205                                  
 10206                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10207                                  ; will do it because we will skip the set up stuff with hard disks.
 10208                                  
 10209 00000925 06                      		push	es
 10210                                  		;mov	es, [zeroseg]
 10211                                  		; 02/09/2023
 10212 00000926 31F6                    		xor	si, si ; 0
 10213 00000928 8EC6                    		mov	es, si
 10214 0000092A 26C4367800              		les	si, [es:DSKADR]
 10215                                  		;les	si, es:78h	; [es:DSKADR]
 10216                                  					; current disk parm table
 10217 0000092F 8936[2D01]              		mov	[dpt], si
 10218 00000933 8C06[2F01]              		mov	[dpt+2], es
 10219 00000937 07                      		pop	es
 10220 00000938 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10221                                  					; fnon_removable
 10222 0000093D 7510                    		jnz	short skip_setup
 10223 0000093F E8F8FE                  		call	checksingle
 10224                                  
 10225                                  ; check to see if we have previously noted a change line. the routine
 10226                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10227                                  ; the proper error code.
 10228                                  
 10229 00000942 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10230 00000947 7403                    		jz	short diskio_nochangeline ; brif not
 10231 00000949 E8890E                  		call	checklatchio	; will do a sneaky pop stack return
 10232                                  					; if a disk error occurs
 10233                                  diskio_nochangeline:			
 10234 0000094C E84700                  		call	iosetup		; set up tables	and variables for i/o
 10235                                  
 10236                                  ; now the settle values are correct for the following code
 10237                                  
 10238                                  skip_setup:
 10239                                  
 10240                                  ; 32 bit sector calculation.
 10241                                  ; dx:[saved_word] = starting sector number.
 10242                                  				
 10243 0000094F 89D0                    		mov	ax, dx
 10244 00000951 31D2                    		xor	dx, dx
 10245                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10246                                  					 ; divide by sec per track
 10247                                  		; 02/09/2023
 10248 00000953 268B4D13                		mov	cx, [es:di+13h]
 10249 00000957 F7F1                    		div	cx
 10250 00000959 A3[2905]                		mov	[temp_h], ax
 10251 0000095C A1[2D05]                		mov	ax, [saved_word]
 10252 0000095F F7F1                    		div	cx ; 02/09/2023
 10253                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10254                                  					; now, [temp_h]:ax = track #, dx = sector
 10255                                  		;inc	dl		; sector number	is 1 based.
 10256                                  		; 18/12/2022
 10257 00000961 42                      		inc	dx
 10258 00000962 8816[3101]              		mov	[cursec], dl	; save current sector
 10259 00000966 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10260                                  					; get number of	heads
 10261 0000096A 50                      		push	ax
 10262 0000096B 31D2                    		xor	dx, dx
 10263 0000096D A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10264 00000970 F7F1                    		div	cx
 10265 00000972 A3[2905]                		mov	[temp_h], ax
 10266 00000975 58                      		pop	ax
 10267 00000976 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10268 00000978 833E[2905]00            		cmp	word [temp_h], 0
 10269 0000097D 7714                    		ja	short baddrive_brdg
 10270 0000097F 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10271 00000982 770F                    		ja	short baddrive_brdg
 10272 00000984 8816[3201]              		mov	[curhd], dl	; save current head
 10273 00000988 A3[3301]                		mov	[curtrk], ax	; save current track
 10274                                  
 10275                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10276                                  ; violations here. not true. we perform the operation as if everything is
 10277                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10278                                  
 10279 0000098B A1[2201]                		mov	ax, [seccnt]
 10280 0000098E E88400                  		call	block		; (cas - call/ret)
 10281                                  		;call	done
 10282                                  		;retn
 10283                                  		; 18/12/2022
 10284 00000991 EB4B                    		jmp	done
 10285                                  
 10286                                  ; ---------------------------------------------------------------------------
 10287                                  
 10288                                  baddrive_brdg:				
 10289 00000993 E925FF                  		jmp	baddrive
 10290                                  
 10291                                  ; =============== S U B	R O U T	I N E =======================================
 10292                                  
 10293                                  ;--------------------------------------------------------------
 10294                                  ; set the drive-last-accessed flag for diskette only. 
 10295                                  ; we know that the hard disk will not be removed.
 10296                                  ; es:di -> current bds.
 10297                                  ; ds -> Bios_Data
 10298                                  ; ax,cx,si are destroyed.
 10299                                  ;--------------------------------------------------------------
 10300                                  
 10301                                  		; 19/10/2022
 10302                                  iosetup:	
 10303 00000996 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10304 0000099A A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10305                                  
 10306                                  ; determine proper head settle values
 10307                                  
 10308 0000099D 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10309 000009A2 7539                    		jnz	short skip_dpt_setting
 10310 000009A4 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10311 000009A7 1E                      		push	ds
 10312 000009A8 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10313 000009AC 884404                  		mov	[si+4],	al
 10314 000009AF 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10315 000009B2 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10316 000009B5 1F                      		pop	ds
 10317 000009B6 A2[2601]                		mov	[motorstartup], al
 10318 000009B9 8826[2B01]              		mov	[save_eot], ah
 10319                                  
 10320                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10321                                  ; motor start time to 4. this checking for every i/o is going to affect
 10322                                  ; performance across the board, but is necessary!!
 10323                                  
 10324 000009BD 1E                      		push	ds
 10325 000009BE C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10326 000009C2 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10327                                  					; ffSmall
 10328 000009C7 7505                    		jnz	short motor_start_ok
 10329 000009C9 B004                    		mov	al, 4
 10330 000009CB 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10331                                  motor_start_ok:
 10332                                  
 10333                                  ; ds:si now points to disk parameter table.
 10334                                  ; get current settle and set fast settle
 10335                                  				
 10336                                  		;xor	al, al
 10337                                  		;inc	al		; ibm wants fast settle	to be 1
 10338                                  		; 18/12/2022
 10339 000009CE 31C0                    		xor	ax, ax
 10340 000009D0 40                      		inc	ax
 10341 000009D1 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10342                                  					; get settle and set up	for fast
 10343 000009D4 1F                      		pop	ds
 10344 000009D5 A2[2701]                		mov	[settlecurrent], al
 10345 000009D8 B00F                    		mov	al, 15		; NORMSETTLE
 10346                                  					; someone has diddled the settle
 10347 000009DA A2[2801]                		mov	[settleslow], al
 10348                                  skip_dpt_setting:			
 10349 000009DD C3                      		retn
 10350                                  
 10351                                  ; =============== S U B	R O U T	I N E =======================================
 10352                                  
 10353                                  ;--------------------------------------------------------------
 10354                                  ; set time of last access, and reset default values in the dpt.
 10355                                  ;
 10356                                  ;	  note: trashes (at least) si
 10357                                  ;--------------------------------------------------------------
 10358                                  
 10359                                  		; 19/10/2022
 10360                                  done:
 10361 000009DE 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10362                                  					; fnon_removable
 10363 000009E3 752F                    		jnz	short ddbx	; do not set for non-removable media
 10364 000009E5 E8FD01                  		call	set_tim
 10365                                  ;diddleback:
 10366                                  ; 09/12/2022
 10367                                  diddle_back:				
 10368 000009E8 9C                      		pushf
 10369 000009E9 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10370 000009EE 7523                    		jnz	short nodiddleback
 10371 000009F0 50                      		push	ax
 10372 000009F1 06                      		push	es
 10373 000009F2 C436[2D01]              		les	si, [dpt]
 10374 000009F6 A0[2B01]                		mov	al, [save_eot]
 10375 000009F9 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10376 000009FD A0[2701]                		mov	al, [settlecurrent]
 10377 00000A00 8A26[2601]              		mov	ah, [motorstartup]
 10378 00000A04 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10379 00000A08 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10380 00000A0D 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10381 00000A11 07                      		pop	es
 10382 00000A12 58                      		pop	ax
 10383                                  nodiddleback:				
 10384 00000A13 9D                      		popf
 10385                                  ddbx:					
 10386 00000A14 C3                      		retn
 10387                                  
 10388                                  ; =============== S U B	R O U T	I N E =======================================
 10389                                  
 10390                                  ;--------------------------------------------------------------
 10391                                  ;read the number of sectors specified in ax, 
 10392                                  ;handling track boundaries
 10393                                  ;es:di -> bds for this drive
 10394                                  ;--------------------------------------------------------------
 10395                                  
 10396                                  		 ; 19/10/2022
 10397                                  block:	
 10398 00000A15 09C0                    		or	ax, ax
 10399 00000A17 74FB                    		jz	short ddbx
 10400 00000A19 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10401                                  					; fnon_removable
 10402 00000A1E 740D                    		jz	short block_floppy ;
 10403                                  
 10404                                  ; check	to see if multi	track operation	is allowed. if not
 10405                                  ; we have to go	to the block_floppy below to break up the operation.
 10406                                  
 10407 00000A20 F606[2F05]80            		test	byte [multrk_flag], 80h
 10408                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10409 00000A25 7406                    		jz	short block_floppy
 10410 00000A27 E82900                  		call	Disk
 10411 00000A2A 31C0                    		xor	ax, ax
 10412 00000A2C C3                      		retn
 10413                                  ; ---------------------------------------------------------------------------
 10414                                  
 10415                                  block_floppy:
 10416                                  
 10417                                  ; read at most 1 track worth. perform minimization at sector / track
 10418                                  				
 10419 00000A2D 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10420 00000A31 FEC1                    		inc	cl
 10421 00000A33 2A0E[3101]              		sub	cl, [cursec]
 10422 00000A37 30ED                    		xor	ch, ch
 10423 00000A39 39C8                    		cmp	ax, cx
 10424 00000A3B 7302                    		jnb	short gotmin
 10425 00000A3D 89C1                    		mov	cx, ax
 10426                                  
 10427                                  gotmin:
 10428                                  
 10429                                  ; ax is the requested number of sectors to read
 10430                                  ; cx is the number that we can do on this track
 10431                                  					
 10432 00000A3F 50                      		push	ax
 10433 00000A40 51                      		push	cx
 10434 00000A41 89C8                    		mov	ax, cx
 10435 00000A43 E80D00                  		call	Disk
 10436 00000A46 59                      		pop	cx
 10437 00000A47 58                      		pop	ax
 10438                                  
 10439                                  ; cx is the number of sectors just transferred
 10440                                  
 10441 00000A48 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10442 00000A4A D0E1                    		shl	cl, 1
 10443 00000A4C 00CF                    		add	bh, cl		; adjust transfer address
 10444 00000A4E EBC5                    		jmp	short block
 10445                                  dskerr_brdg:				
 10446 00000A50 E9EC00                  		jmp	dskerr
 10447                                  
 10448                                  ; =============== S U B	R O U T	I N E =======================================
 10449                                  
 10450                                  ; 15/10/2022
 10451                                  
 10452                                  ;--------------------------------------------------------------
 10453                                  ;perform disk i/o with retries
 10454                                  ; al = number of sectors (1-8, all on one track)
 10455                                  ; es:di point to drive parameters
 10456                                  ; xfer_seg:bx = transfer address 
 10457                                  ;		(must not cross a 64k physical boundary)
 10458                                  ; [rflag] = 2 if read, 3 if write
 10459                                  ; [verify] = 0 for normal, 1 for verify after write
 10460                                  ;--------------------------------------------------------------
 10461                                  
 10462                                  		 ; 19/10/2022
 10463                                  Disk:
 10464                                  
 10465                                  ; Check for hard disk format and
 10466                                  ; if TRUE then set max error count to 2
 10467                                  
 10468 00000A53 BD0500                  		mov	bp, 5		; MAXERR
 10469                                  					; set up retry count
 10470 00000A56 26F6452301              		test	byte [es:di+23h], 1	;
 10471                                  					; [es:di+BDS.flags], fnon_removable
 10472 00000A5B 7408                    		jz	short GetRdWrInd
 10473 00000A5D 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10474 00000A60 7403                    		jz	short GetRdWrInd
 10475 00000A62 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10476                                  GetRdWrInd:				
 10477 00000A65 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10478 00000A69 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10479 00000A6D 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10480                                  ;retry:
 10481                                  ; 09/12/2022
 10482                                  _retry:					
 10483 00000A71 50                      		push	ax
 10484 00000A72 8B16[3301]              		mov	dx, [curtrk]
 10485 00000A76 26F6452301              		test	byte [es:di+23h], 1
 10486 00000A7B 740B                    		jz	short disk_not_mini
 10487 00000A7D 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10488                                  					; is this a mini disk? ((logical dos partition))
 10489 00000A82 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10490 00000A84 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10491                                  					; add hidden trks.
 10492                                  disk_not_mini:				
 10493 00000A88 D0CE                    		ror	dh, 1
 10494 00000A8A D0CE                    		ror	dh, 1
 10495 00000A8C 0A36[3101]              		or	dh, [cursec]
 10496 00000A90 89D1                    		mov	cx, dx
 10497 00000A92 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10498 00000A94 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10499 00000A98 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10500                                  					; [es:di+BDS.drivenum]
 10501 00000A9C 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10502 00000AA1 7413                    		jz	short do_fast	; hard files use fast speed
 10503                                  
 10504                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10505                                  ; this helps when we have just done a reset disk operation and the head has
 10506                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10507                                  
 10508 00000AA3 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10509 00000AA8 740A                    		jz	short do_writej
 10510 00000AAA 80FC02                  		cmp	ah, 2		; romread
 10511 00000AAD 7407                    		jz	short do_fast
 10512 00000AAF 80FC04                  		cmp	ah, 4		; romverify
 10513 00000AB2 7402                    		jz	short do_fast
 10514                                  do_writej:	
 10515                                  
 10516                                  ; reads always fast, unless we have just done a disk reset operation
 10517                                  			
 10518 00000AB4 EB56                    		jmp	short do_write	; reads	always fast
 10519                                  ; ---------------------------------------------------------------------------
 10520                                  
 10521                                  do_fast:				
 10522 00000AB6 E8FC00                  		call	fastspeed	; change settle	mode
 10523                                  
 10524                                  testerr:				
 10525 00000AB9 7295                    		jb	short dskerr_brdg
 10526                                  
 10527                                  ; set drive and track of last access
 10528                                  
 10529 00000ABB 8816[7600]              		mov	[step_drv], dl
 10530 00000ABF 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10531                                  no_set:
 10532                                  		;cmp	word [wrtverify], 103h
 10533 00000AC3 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10534 00000AC9 7452                    		jz	short doverify
 10535                                  noverify:				
 10536 00000ACB 58                      		pop	ax
 10537                                  
 10538                                  ; check the flags word in the bds to see if the drive is non removable
 10539                                  ; if not we needn't do anything special
 10540                                  ; if it is a hard disk then check to see if multi-track operation
 10541                                  ; is specified. if specified we don't have to calculate for the next
 10542                                  ; track since we are already done. so we can go to the exit of this routine.
 10543                                  
 10544 00000ACC 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10545                                  					; fnon_removable
 10546 00000AD1 7407                    		jz	short its_removable
 10547 00000AD3 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10548 00000AD8 7530                    		jnz	short disk_ret
 10549                                  its_removable:				
 10550 00000ADA 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10551 00000ADD 30E4                    		xor	ah, ah
 10552 00000ADF 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10553 00000AE3 00C1                    		add	cl, al
 10554 00000AE5 880E[3101]              		mov	[cursec], cl
 10555 00000AE9 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10556                                  					; see if sector/track limit reached
 10557 00000AED 761B                    		jbe	short disk_ret
 10558 00000AEF C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10559 00000AF4 8A36[3201]              		mov	dh, [curhd]
 10560 00000AF8 FEC6                    		inc	dh
 10561 00000AFA 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10562 00000AFE 7206                    		jb	short noxor
 10563 00000B00 30F6                    		xor	dh, dh
 10564 00000B02 FF06[3301]              		inc	word [curtrk]
 10565                                  noxor:					
 10566 00000B06 8836[3201]              		mov	[curhd], dh
 10567                                  disk_ret:				
 10568 00000B0A F8                      		clc
 10569 00000B0B C3                      		retn
 10570                                  ; ---------------------------------------------------------------------------
 10571                                  
 10572                                  ; 15/10/2022
 10573                                  
 10574                                  ;--------------------------------------------------------------
 10575                                  ; the request is for write. determine if we are talking about
 10576                                  ; the same track and drive. if so, use the fast speed.
 10577                                  ;--------------------------------------------------------------
 10578                                  
 10579                                  do_write:				
 10580 00000B0C 3A16[7600]              		cmp	dl, [step_drv]
 10581 00000B10 7506                    		jnz	short do_norm	; we have changed drives
 10582 00000B12 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10583 00000B16 749E                    		jz	short do_fast	; we are still on the same track
 10584                                  
 10585                                  do_norm:				
 10586 00000B18 E87500                  		call	normspeed
 10587 00000B1B EB9C                    		jmp	short testerr
 10588                                  ; ---------------------------------------------------------------------------
 10589                                  
 10590                                  ;--------------------------------------------------------------
 10591                                  ; we have a verify request also. get state info and go verify
 10592                                  ;--------------------------------------------------------------
 10593                                  
 10594                                  doverify:				
 10595 00000B1D 58                      		pop	ax
 10596 00000B1E 50                      		push	ax
 10597 00000B1F B404                    		mov	ah, 4
 10598 00000B21 E89100                  		call	fastspeed
 10599 00000B24 73A5                    		jnb	short noverify
 10600                                  
 10601                                  ; check the error returned in ah to see if it is a soft ecc error.
 10602                                  ; if it is not we needn't do anything special. if it is a soft
 10603                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10604                                  ; this retry count becomes 0 then we just ignore the error and go to
 10605                                  ; no_verify but if we can still try then we call the routine to reset
 10606                                  ; the disk and go to dskerr1 to retry the operation.
 10607                                  
 10608 00000B26 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10609 00000B29 750B                    		jnz	short not_softecc_err
 10610 00000B2B FF0E[3405]              		dec	word [soft_ecc_cnt]
 10611 00000B2F 749A                    		jz	short noverify	; no more retry
 10612 00000B31 E83705                  		call	ResetDisk	; reset	disk
 10613 00000B34 EB3E                    		jmp	short dskerr1	; retry
 10614                                  ; ---------------------------------------------------------------------------
 10615                                  
 10616                                  not_softecc_err:			; other error.			
 10617 00000B36 E83205                  		call	ResetDisk
 10618 00000B39 FF0E[3205]              		dec	word [vretry_cnt]
 10619 00000B3D EB1C                    		jmp	short dskerr0
 10620                                  ; ---------------------------------------------------------------------------
 10621                                  
 10622                                  ;--------------------------------------------------------------
 10623                                  ; need to special case the change-line error ah=06h.
 10624                                  ; if we get this, we need to return it.
 10625                                  ;--------------------------------------------------------------
 10626                                  
 10627                                  dskerr:					
 10628 00000B3F 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10629 00000B44 7403                    		jz	short dskerr_nochangeline ; brif not
 10630 00000B46 E8FE0C                  		call	checkio
 10631                                  dskerr_nochangeline:			
 10632 00000B49 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10633 00000B4E 7508                    		jnz	short dochkagain ; no more retry.
 10634 00000B50 BD0100                  		mov	bp, 1
 10635 00000B53 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10636                                  dochkagain:				
 10637 00000B58 E8AA00                  		call	again
 10638                                  dskerr0:				
 10639 00000B5B 7420                    		jz	short harderr
 10640 00000B5D 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10641                                  					; fnon_removable
 10642 00000B62 7505                    		jnz	short skip_timeout_chk
 10643 00000B64 80FC80                  		cmp	ah, 80h		; timeout?
 10644 00000B67 7414                    		jz	short harderr
 10645                                  skip_timeout_chk:			
 10646 00000B69 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10647 00000B6C 740A                    		jz	short write_fault_err ;	then, don't retry.
 10648 00000B6E C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10649                                  					; set soft_ecc_cnt back	to maxerr
 10650                                  dskerr1:				
 10651 00000B74 58                      		pop	ax		; restore sector count
 10652                                  		;jmp	retry
 10653                                  		; 09/12/2022
 10654 00000B75 E9F9FE                  		jmp	_retry
 10655                                  ; ---------------------------------------------------------------------------
 10656                                  
 10657                                  write_fault_err:			
 10658 00000B78 BD0100                  		mov	bp, 1		; just retry only once
 10659                                  					; for write fault error.
 10660 00000B7B EBF7                    		jmp	short dskerr1
 10661                                  
 10662                                  		; fall into harderr
 10663                                  ; ---------------------------------------------------------------------------
 10664                                  
 10665                                  ; entry point for routines that call maperror themselves
 10666                                  
 10667                                  harderr:				
 10668 00000B7D E84D00                  		call	maperror
 10669                                  harderr2:				
 10670 00000B80 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10671                                  					; force a media check through rom
 10672 00000B85 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10673 00000B89 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10674                                  
 10675                                  ; since we are performing a non-local goto, restore the disk parameters
 10676                                  
 10677                                  		;jmp	diddleback
 10678                                  		; 09/12/2022
 10679 00000B8D E958FE                  		jmp	diddle_back
 10680                                  
 10681                                  ; =============== S U B	R O U T	I N E =======================================
 10682                                  
 10683                                  ; change settle value from settlecurrent to whatever is appropriate
 10684                                  ; note that this routine is never called for a fixed disk.
 10685                                  
 10686                                  		; 19/10/2022
 10687                                  normspeed:
 10688 00000B90 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10689 00000B95 751E                    		jnz	short fastspeed
 10690 00000B97 06                      		push	es
 10691 00000B98 50                      		push	ax
 10692 00000B99 A0[2801]                		mov	al, [settleslow]
 10693 00000B9C C436[2D01]              		les	si, [dpt]	; current disk parm table
 10694 00000BA0 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10695 00000BA4 58                      		pop	ax
 10696 00000BA5 07                      		pop	es
 10697 00000BA6 E80C00                  		call	fastspeed
 10698 00000BA9 06                      		push	es
 10699 00000BAA C436[2D01]              		les	si, [dpt]
 10700 00000BAE 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10701                                  					; 1 is fast settle value
 10702 00000BB3 07                      		pop	es
 10703 00000BB4 C3                      		retn
 10704                                  
 10705                                  ; =============== S U B	R O U T	I N E =======================================
 10706                                  
 10707                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10708                                  ; partition is > 16 bits, then always return drive not ready.
 10709                                  
 10710                                  fastspeed:		
 10711 00000BB5 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10712                                  					; ftoobig
 10713 00000BBA 750D                    		jnz	short notready
 10714 00000BBC 06                      		push	es
 10715 00000BBD 8E06[3705]              		mov	es, [xfer_seg]
 10716 00000BC1 CD13                    		int	13h		; DISK -
 10717 00000BC3 8C06[3705]              		mov	[xfer_seg], es
 10718 00000BC7 07                      		pop	es
 10719 00000BC8 C3                      		retn
 10720                                  ; ---------------------------------------------------------------------------
 10721                                  
 10722                                  notready:				
 10723 00000BC9 F9                      		stc
 10724 00000BCA B480                    		mov	ah, 80h
 10725 00000BCC C3                      		retn
 10726                                  
 10727                                  ; =============== S U B	R O U T	I N E =======================================
 10728                                  
 10729                                  ; map error returned by rom in ah into corresponding code to be returned to
 10730                                  ; dos in al. trashes di. guaranteed to set carry.
 10731                                  
 10732                                  maperror:	
 10733 00000BCD 51                      		push	cx
 10734 00000BCE 06                      		push	es
 10735 00000BCF 1E                      		push	ds		; set es=Bios_Data
 10736 00000BD0 07                      		pop	es
 10737 00000BD1 88E0                    		mov	al, ah		; put error code in al
 10738 00000BD3 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10739 00000BD6 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10740                                  					; number of possible error conditions
 10741 00000BD9 BF[3C01]                		mov	di, errin	; point to error conditions
 10742 00000BDC F2AE                    		repne scasb
 10743                                  		; 10/12/2022
 10744 00000BDE 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10745                                  					; get translation
 10746                                  		; 19/10/2022 - Temporary ! 
 10747                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10748 00000BE1 07                      		pop	es
 10749 00000BE2 59                      		pop	cx
 10750 00000BE3 F9                      		stc			; flag error condition
 10751 00000BE4 C3                      		retn
 10752                                  
 10753                                  ; =============== S U B	R O U T	I N E =======================================
 10754                                  
 10755                                  ; set the time of last access for this drive.
 10756                                  ; this is done only for removable media. es:di -> bds
 10757                                  
 10758                                  set_tim:		
 10759 00000BE5 50                      		push	ax
 10760 00000BE6 E891F8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10761                                  
 10762                                  ; we have the new time. if we see that the time has passed,
 10763                                  ; then we reset the threshold counter...
 10764                                  
 10765 00000BE9 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10766 00000BED 7506                    		jnz	short setaccess
 10767 00000BEF 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10768                                  		;jz	short done_set
 10769                                  		; 12/12/2022
 10770 00000BF3 740E                    		je	short done_set2
 10771                                  setaccess:				
 10772 00000BF5 C606[1D01]00            		mov	byte [accesscount], 0
 10773 00000BFA 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10774 00000BFE 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10775                                  done_set:				
 10776 00000C02 F8                      		clc
 10777                                  done_set2:		; 12/12/2022
 10778 00000C03 58                      		pop	ax
 10779 00000C04 C3                      		retn
 10780                                  
 10781                                  ; =============== S U B	R O U T	I N E =======================================
 10782                                  
 10783                                  ; this routine is called if an error occurs while formatting or verifying.
 10784                                  ; it resets the drive,and decrements the retry count.
 10785                                  ; on entry - ds:di - points to bds for the drive
 10786                                  ;	     bp    - contains retry count
 10787                                  ; on exit    flags indicate result of decrementing retry count
 10788                                  
 10789                                  again:	
 10790 00000C05 E86304                  		call	ResetDisk
 10791 00000C08 80FC06                  		cmp	ah, 6
 10792 00000C0B 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10793                                  					; do not decrement retry count.
 10794 00000C0D 4D                      		dec	bp		; decrement retry count
 10795 00000C0E C3                      		retn
 10796                                  ; ---------------------------------------------------------------------------
 10797                                  
 10798                                  dont_dec_retry_count:			
 10799 00000C0F 08E4                    		or	ah, ah
 10800 00000C11 C3                      		retn
 10801                                  
 10802                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10803                                  
 10804                                  ;----------------------------------------------------------------------------
 10805                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10806                                  ;----------------------------------------------------------------------------
 10807                                  ; 11/03/2019 - Retro DOS v4.0
 10808                                  
 10809                                  ; 18/03/2019
 10810                                  
 10811                                  ; ==========================================================================
 10812                                  ;
 10813                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10814                                  ;
 10815                                  ;      This function is intended to give the user to control the
 10816                                  ;      bds table flags of unformatted_media bit.
 10817                                  ;      GetAccessFlag will show the status -
 10818                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10819                                  ;						1 disk i/o allowed
 10820                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10821                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10822                                  ;						1 disallow disk i/o
 10823                                  ; ==========================================================================
 10824                                  
 10825                                  		; generic ioctl dispatch tables
 10826                                  
 10827                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10828                                  
 10829                                  ; ---------------------------------------------------------------------------
 10830 00000C12 00                      		db 0
 10831                                  
 10832                                  ; 09/12/2022 
 10833                                  %if 0
 10834                                  
 10835                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10836                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10837                                  		dw 0EE8h	; 61h	; ReadTrack
 10838                                  		dw 0E86h	; 62h	; VerifyTrack
 10839                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10840                                  		dw 0CA3h		; Cmd_Error_Proc
 10841                                  		dw 0CA3h		; Cmd_Error_Proc
 10842                                  		dw 119Ah	; 66h	; GetMediaId
 10843                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10844                                  		dw 12C1h	; 68h	; SenseMediaType
 10845                                  
 10846                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10847                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10848                                  		dw 0EEFh	; 41h	; WriteTrack
 10849                                  		dw 0DC1h	; 42h	; FormatTrack
 10850                                  		dw 0CA3h		; Cmd_Error_Proc
 10851                                  		dw 0CA3h		; Cmd_Error_Proc
 10852                                  		dw 0CA3h		; Cmd_Error_Proc
 10853                                  		dw 11D2h	; 46h	; SetMediaId
 10854                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10855                                  
 10856                                  %endif
 10857                                  
 10858                                  		; 09/12/2022
 10859 00000C13 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10860 00000C14 [7E0C]                  		dw GetDeviceParameters	; 60h
 10861 00000C16 [C00E]                  		dw ReadTrack		; 61h
 10862 00000C18 [600E]                  		dw VerifyTrack		; 62h
 10863 00000C1A [7A0C]                  		dw Cmd_Error_Proc
 10864 00000C1C [7A0C]                  		dw Cmd_Error_Proc
 10865 00000C1E [7A0C]                  		dw Cmd_Error_Proc
 10866 00000C20 [4A11]                  		dw GetMediaId		; 66h
 10867 00000C22 [1612]                  		dw GetAccessFlag	; 67h ; unpublished function
 10868 00000C24 [6812]                  		dw SenseMediaType	; 68h
 10869                                  
 10870 00000C26 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10871 00000C27 [C90C]                  		dw SetDeviceParameters	; 40h
 10872 00000C29 [C70E]                  		dw WriteTrack		; 41h
 10873 00000C2B [9C0D]                  		dw FormatTrack		; 42h
 10874 00000C2D [7A0C]                  		dw Cmd_Error_Proc
 10875 00000C2F [7A0C]                  		dw Cmd_Error_Proc
 10876 00000C31 [7A0C]                  		dw Cmd_Error_Proc
 10877 00000C33 [8011]                  		dw SetMediaId		; 46h
 10878 00000C35 [2C12]                  		dw SetAccessFlag	; 47h ; unpublished function
 10879                                  
 10880                                  ; ==========================================================================
 10881                                  ; IOC_DC_Table
 10882                                  ;
 10883                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10884                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10885                                  ; Added for 5.00
 10886                                  ; ==========================================================================
 10887                                  
 10888 00000C37 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10889 00000C38 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10890 00000C39 61                      		db 61h			; READ_TRACK
 10891 00000C3A 41                      		db 41h			; WRITE_TRACK
 10892 00000C3B 62                      		db 62h			; VERIFY_TRACK
 10893 00000C3C 42                      		db 42h			; FORMAT_TRACK
 10894 00000C3D 66                      		db 66h			; GET_MEDIA_ID
 10895 00000C3E 46                      		db 46h			; SET_MEDIA_ID
 10896 00000C3F 67                      		db 67h			; GET_ACCESS_FLAG
 10897 00000C40 47                      		db 47h			; SET_ACCESS_FLAG
 10898 00000C41 68                      		db 68h			; SENSE_MEDIA_TYPE
 10899                                  
 10900                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10901                                  
 10902                                  ; ---------------------------------------------------------------------------
 10903                                  
 10904                                  ; 16/10/2022
 10905                                  
 10906                                  ; ==========================================================================
 10907                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10908                                  ;
 10909                                  ;    input: AL contains logical drive
 10910                                  ;
 10911                                  ;	functions are dispatched through a call. On return, carry indicates
 10912                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10913                                  ;	subfunctions.
 10914                                  ;
 10915                                  ; ==========================================================================
 10916                                  
 10917                                  ; 11/03/2019
 10918                                  		; 19/10/2022
 10919                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10920 00000C42 E886F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10921 00000C45 06                      		push	es
 10922 00000C46 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10923 00000C4A 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10924                                  					; RAWIO
 10925 00000C4F 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10926 00000C53 07                      		pop	es
 10927 00000C54 7525                    		jnz	short IoctlFuncErr
 10928                                  
 10929                                  		; cas note: Could do the above two blocks in reverse order.
 10930                                  		; Would have to preserve al for SetDrive
 10931                                  
 10932                                  		; 10/12/2022
 10933 00000C56 BE[130C]                		mov	si, IoReadJumpTable
 10934                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10935                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10936 00000C59 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10937 00000C5B 7503                    		jnz	short NotGenericWrite ; function is a read.
 10938                                  		; 10/12/2022
 10939 00000C5D BE[260C]                		mov	si, IoWriteJumpTable
 10940                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10941                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10942                                  NotGenericWrite:			
 10943 00000C60 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10944 00000C62 2C40                    		sub	al, 40h		; offset for base function
 10945 00000C64 2E3A04                  		cmp	al, [cs:si]
 10946 00000C67 7712                    		ja	short IoctlFuncErr
 10947 00000C69 98                      		cbw
 10948 00000C6A D1E0                    		shl	ax, 1
 10949 00000C6C 46                      		inc	si
 10950 00000C6D 01C6                    		add	si, ax
 10951 00000C6F 2EFF14                  		call	near [cs:si]
 10952                                  		;call	word ptr cs:[si]
 10953 00000C72 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10954                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10955                                  					; 2C7h:30h = 70h:25A0h
 10956 00000C77 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10957 00000C79 C3                      		retn			; Pass carry flag through to exit code
 10958                                  ; ---------------------------------------------------------------------------
 10959                                  
 10960                                  		; Cmd_Error_Proc is called as a procedure and also use
 10961                                  		; as a fall through from above
 10962                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10963 00000C7A 5A                      		pop	dx
 10964                                  
 10965                                  IoctlFuncErr:				
 10966 00000C7B E957F4                  		jmp	bc_cmderr
 10967                                  ; ---------------------------------------------------------------------------
 10968                                  
 10969                                  ; 16/10/2022
 10970                                  
 10971                                  ; ==========================================================================
 10972                                  ;**	GetDeviceParameters:
 10973                                  ;
 10974                                  ;	GetDeviceParameters implements the generic ioctl function:
 10975                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 10976                                  ;
 10977                                  ;	ENTRY	(ES:di) = BDS for drive
 10978                                  ;		PtrSav = long pointer to request header
 10979                                  ;	EXIT	??? BUGBUG
 10980                                  ;	USES	??? BUGBUG
 10981                                  ; ==========================================================================
 10982                                  
 10983                                  		; 19/10/2022
 10984                                  GetDeviceParameters:
 10985                                  		; Copy info from bds to the device parameters packet
 10986                                  
 10987 00000C7E C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10988 00000C82 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10989                                  					; (DS:BX) = return buffer
 10990 00000C85 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 10991 00000C89 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10992 00000C8C 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 10993 00000C90 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 10994                                  					; Mask off other bits
 10995 00000C93 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10996 00000C96 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 10997 00000C9A 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10998 00000C9D 30C0                    		xor	al, al		; Set media type to default
 10999 00000C9F 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11000                                  					
 11001                                  		; copy recommended bpb
 11002 00000CA2 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 11003 00000CA5 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11004                                  					; BUILD_DEVICE_BPB
 11005 00000CA8 7412                    		jz	short UseBpbPresent
 11006 00000CAA 1E                      		push	ds		; Save request packet segment
 11007 00000CAB 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11008                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11009                                  					; 2C7h:30h = 70h:25A0h
 11010                                  					; Point back to Bios_Data
 11011 00000CB0 E887FB                  		call	checksingle
 11012 00000CB3 E842F9                  		call	GetBp		; Build	the bpb	from scratch
 11013 00000CB6 1F                      		pop	ds		; Restore request packet segment
 11014 00000CB7 720F                    		jb	short GetParmRet
 11015 00000CB9 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 11016                                  					; Use this subfield of bds instead
 11017                                  UseBpbPresent:				
 11018 00000CBC 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11019                                  					; This is where	the result goes
 11020 00000CBF B91900                  		mov	cx, 25		; A_BPB.size - 6
 11021                                  					; For now use 'small' bpb
 11022 00000CC2 1E                      		push	ds		; reverse segments for copy
 11023 00000CC3 06                      		push	es
 11024 00000CC4 1F                      		pop	ds
 11025 00000CC5 07                      		pop	es
 11026 00000CC6 F3A4                    		rep movsb
 11027                                  		
 11028                                  		; 12/12/2022
 11029                                  		; cf=0 (test instruction -above- resets cf) 	
 11030                                  		;clc
 11031                                  GetParmRet:				
 11032 00000CC8 C3                      		retn
 11033                                  ; ---------------------------------------------------------------------------
 11034                                  
 11035                                  ; 17/10/2022
 11036                                  ; 16/10/2022
 11037                                  
 11038                                  ; ==========================================================================
 11039                                  ; SetDeviceParameters:
 11040                                  ;
 11041                                  ; input: ES:di points to bds for drive
 11042                                  ; ==========================================================================
 11043                                  
 11044                                  		; 19/10/2022
 11045                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 11046 00000CC9 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11047 00000CCD C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11048 00000CD0 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 11049                                  					; fchanged_by_format|fchanged
 11050 00000CD6 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11051                                  					; ONLY_SET_TRACKLAYOUT
 11052 00000CD9 7579                    		jnz	short setTrackTable
 11053 00000CDB 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11054 00000CDE 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 11055 00000CE2 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11056 00000CE5 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 11057 00000CE9 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11058 00000CEC 1E                      		push	ds
 11059                                  		; 17/10/2022
 11060 00000CED 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11061                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11062                                  					; 2C7h:30h = 70h:25A0h
 11063                                  		;cmp	byte [fhave96], 0
 11064 00000CF2 803E[7700]00            		cmp	byte [fhave96], 0
 11065 00000CF7 1F                      		pop	ds
 11066 00000CF8 7502                    		jnz	short HaveChange ; we have changeline support
 11067                                  		; 10/12/2022
 11068 00000CFA 24FD                    		and	al, 0FDh
 11069                                  		;and	ax, 0FFFDh	; ~fchangeline
 11070                                  
 11071                                  		; Ignore all bits except non_removable and changeline
 11072                                  HaveChange:				
 11073 00000CFC 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11074 00000CFF 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11075 00000D03 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11076 00000D07 09C8                    		or	ax, cx
 11077 00000D09 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11078 00000D0D 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11079                                  					; Set media type
 11080 00000D10 1E                      		push	ds
 11081 00000D11 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11082                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11083 00000D16 A2[3706]                		mov	[mediatype], al
 11084                                  		;mov	ds:mediatype, al
 11085 00000D19 1F                      		pop	ds
 11086                                  
 11087                                  		; The media changed (maybe) so we will have to do a set dasd
 11088                                  		; the next time we format a track
 11089                                  
 11090                                  		; 10/12/2022
 11091 00000D1A 26804D2380              		or	byte [es:di+35], 80h
 11092                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11093                                  					; set_dasd_true
 11094 00000D1F 57                      		push	di		; Save bds pointer
 11095                                  
 11096                                  		; Figure out what we are supposed to do with the bpb
 11097                                  		; were we asked to install a fake bpb?
 11098                                  
 11099 00000D20 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11100                                  					; INSTALL_FAKE_BPB
 11101 00000D23 7514                    		jnz	short InstallFakeBpb
 11102                                  
 11103                                  		; were we returning a fake bpb when asked to build a bpb?
 11104                                  
 11105                                  		; 10/12/2022
 11106 00000D25 26F6452304              		test	byte [es:di+35], 4
 11107                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11108                                  					; return_fake_bpb
 11109 00000D2A 7405                    		jz	short InstallRecommendedBpb
 11110                                  
 11111                                  		; we were returning a fake bpb but we can stop now
 11112                                  
 11113                                  		; 10/12/2022
 11114 00000D2C 26806523FB              		and	byte [es:di+35], 0FBh
 11115                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11116                                  					; ~return_fake_bpb
 11117                                  InstallRecommendedBpb:			
 11118 00000D31 B91F00                  		mov	cx, 31		; A_BPB.size
 11119 00000D34 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11120 00000D37 EB0B                    		jmp	short CopyTheBpb
 11121                                  ; ---------------------------------------------------------------------------
 11122                                  
 11123                                  InstallFakeBpb:
 11124                                  		; 10/12/2022
 11125 00000D39 26804D2304              		or	byte [es:di+35], 4				
 11126                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11127                                  					; return_fake_bpb
 11128 00000D3E B91900                  		mov	cx, 25		; A_BPB.size - 6
 11129                                  					; move 'smaller' bpb
 11130 00000D41 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11131                                  
 11132                                  CopyTheBpb:				
 11133 00000D44 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11134 00000D47 F3A4                    		rep movsb
 11135 00000D49 1E                      		push	ds		; Save packet segment
 11136                                  		; 17/10/2022
 11137 00000D4A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11138                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11139                                  					; Setup	for ds -> Bios_Data
 11140 00000D4F E8CA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11141 00000D52 1F                      		pop	ds		; Restore packet segment
 11142 00000D53 5F                      		pop	di		; Restore bds pointer
 11143                                  setTrackTable:				
 11144 00000D54 8B4F26                  		mov	cx, [bx+38]
 11145 00000D57 1E                      		push	ds
 11146 00000D58 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11147 00000D5D 890E[3905]              		mov	[sectorspertrack], cx
 11148 00000D61 1F                      		pop	ds
 11149                                  		; 10/12/2022
 11150 00000D62 26806523F7              		and	byte [es:di+35], 0F7h
 11151                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11152                                  					; ~good_tracklayout
 11153 00000D67 F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11154                                  					; TRACKLAYOUT_IS_GOOD
 11155 00000D6A 7405                    		jz	short UglyTrackLayOut
 11156                                  		; 10/12/2022
 11157 00000D6C 26804D2308              		or	byte [es:di+35], 8
 11158                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11159                                  					; good_tracklayout
 11160                                  UglyTrackLayOut:			
 11161 00000D71 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11162 00000D74 7722                    		ja	short TooManyPerTrack
 11163                                  		;jcxz	short SectorInfoSaved
 11164 00000D76 E31E                    		jcxz	SectorInfoSaved	; 19/10/2022
 11165 00000D78 BF[3B05]                		mov	di, tracktable
 11166 00000D7B 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11167                                  		; 17/10/2022
 11168 00000D7E 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11169                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11170                                  					; Trash	our bds	pointer
 11171                                  StoreSectorInfo:
 11172 00000D83 47                      		inc	di
 11173 00000D84 47                      		inc	di		; Skip over cylinder and head
 11174 00000D85 AD                      		lodsw			; Get sector id
 11175 00000D86 AA                      		stosb			; Copy it
 11176 00000D87 AD                      		lodsw			; Get sector size
 11177                                  		
 11178                                  		; 02/09/2023 (PCDOS 7.1)
 11179                                  		;call	SectSizeToSectIndex
 11180 00000D88 80FC03                  		cmp	ah, 3 ; 02/09/2023
 11181                                  		;cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11182                                  					; examine upper	byte only
 11183 00000D8B 7704                    		ja	short OneK
 11184 00000D8D 88E0                    		mov	al, ah		; value	in AH is the index!
 11185 00000D8F EB02                    		jmp	short sdp_s
 11186                                  OneK:
 11187 00000D91 B003                    		mov	al, 3
 11188                                  sdp_s:
 11189 00000D93 AA                      		stosb			; Store	sector SIZE index
 11190 00000D94 E2ED                    		loop	StoreSectorInfo
 11191                                  SectorInfoSaved:
 11192 00000D96 F8                      		clc
 11193 00000D97 C3                      		retn
 11194                                  ; ---------------------------------------------------------------------------
 11195                                  
 11196                                  TooManyPerTrack:			
 11197 00000D98 B00C                    		mov	al, 0Ch
 11198 00000D9A F9                      		stc
 11199 00000D9B C3                      		retn
 11200                                  ; ---------------------------------------------------------------------------
 11201                                  
 11202                                  ; 16/10/2022
 11203                                  
 11204                                  ; ==========================================================================
 11205                                  ; FormatTrack:
 11206                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11207                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11208                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11209                                  ;
 11210                                  ; input: ES:di points to bds for drive
 11211                                  ;
 11212                                  ; output:
 11213                                  ;	for status call:
 11214                                  ;	specialfunction byte set to:
 11215                                  ;		0 - rom support + legal combination
 11216                                  ;		1 - no rom support
 11217                                  ;		2 - illegal combination
 11218                                  ;		3 - no media present
 11219                                  ;	carry cleared.
 11220                                  ;
 11221                                  ;	for format track:
 11222                                  ;		carry set if error
 11223                                  ;
 11224                                  ; ==========================================================================
 11225                                  
 11226                                  ; 16/03/2019
 11227                                  
 11228                                  		; 19/10/2022
 11229                                  FormatTrack:
 11230 00000D9C C51E[1200]              		lds	bx, [ptrsav]
 11231 00000DA0 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11232 00000DA3 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11233                                  					; STATUS_FOR_FORMAT
 11234 00000DA6 740E                    		jz	short DoFormatTrack
 11235 00000DA8 1E                      		push	ds
 11236                                  		; 17/10/2022
 11237 00000DA9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11238                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11239 00000DAE E82602                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11240 00000DB1 1F                      		pop	ds
 11241 00000DB2 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11242 00000DB4 F8                      		clc
 11243 00000DB5 C3                      		retn
 11244                                  ; ---------------------------------------------------------------------------
 11245                                  
 11246                                  DoFormatTrack:				
 11247 00000DB6 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11248                                  					; DEV_HARDDISK
 11249 00000DBB 7508                    		jnz	short DoFormatDiskette
 11250                                  		; 17/10/2022
 11251 00000DBD 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11252                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11253                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11254 00000DC2 E99B00                  		jmp	VerifyTrack
 11255                                  ; ---------------------------------------------------------------------------
 11256                                  
 11257                                  DoFormatDiskette:			
 11258 00000DC5 8B4F01                  		mov	cx, [bx+1]
 11259 00000DC8 8B5703                  		mov	dx, [bx+3]
 11260 00000DCB F60702                  		test	byte [bx], 2
 11261                                  		; 17/10/2022
 11262 00000DCE 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11263                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11264                                  					; Setup	ds-> Bios_Data for verify
 11265 00000DD3 7403                    		jz	short DoFormatDiskette_1
 11266 00000DD5 E9E300                  		jmp	VerifyTrack_Err
 11267                                  ; ---------------------------------------------------------------------------
 11268                                  
 11269                                  DoFormatDiskette_1:			
 11270 00000DD8 E8FC01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11271 00000DDB 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11272 00000DDD 7406                    		jz	short NeedToSetDasd ; Old rom
 11273 00000DDF 3C03                    		cmp	al, 3		; Time out error?
 11274 00000DE1 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11275                                  					; about	the illegal combination)
 11276 00000DE3 EB66                    		jmp	short FormatFailed
 11277                                  ; ---------------------------------------------------------------------------
 11278                                  
 11279                                  NeedToSetDasd:				
 11280 00000DE5 52                      		push	dx
 11281 00000DE6 E89001                  		call	SetDasd		; INT 13h, AH=17h
 11282 00000DE9 5A                      		pop	dx
 11283                                  NoSetDasd:				
 11284 00000DEA E84DFA                  		call	checksingle	; Do any needed	diskette swapping
 11285 00000DED 89D0                    		mov	ax, dx		; Get track from packet
 11286 00000DEF A3[3901]                		mov	[trknum], ax
 11287 00000DF2 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11288 00000DF6 88CC                    		mov	ah, cl
 11289 00000DF8 BB[3B05]                		mov	bx, tracktable
 11290 00000DFB 8B0E[3905]              		mov	cx, [sectorspertrack]
 11291                                  
 11292                                  StoreCylinderHead:			
 11293 00000DFF 8907                    		mov	[bx], ax	; Store	into TrackTable
 11294 00000E01 83C304                  		add	bx, 4		; Skip to next sector field
 11295 00000E04 E2F9                    		loop	StoreCylinderHead
 11296                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 11297                                  		; 02/09/2023
 11298 00000E06 B105                    		mov	cl, 5
 11299                                  FormatRetry:				
 11300 00000E08 51                      		push	cx
 11301 00000E09 BB[3B05]                		mov	bx, tracktable
 11302 00000E0C A0[3905]                		mov	al, [sectorspertrack]
 11303 00000E0F B405                    		mov	ah, 5		; romformat
 11304 00000E11 8C1E[3705]              		mov	[xfer_seg], ds
 11305 00000E15 E86902                  		call	ToRom
 11306 00000E18 59                      		pop	cx
 11307 00000E19 7216                    		jb	short FormatError
 11308 00000E1B 51                      		push	cx		; Now verify the sectors just formatted.
 11309                                  					; NOTE:	because	of bug in some BIOSes we have to
 11310                                  					;	set ES:BX to 00:00
 11311 00000E1C 53                      		push	bx
 11312 00000E1D 31DB                    		xor	bx, bx
 11313 00000E1F 891E[3705]              		mov	[xfer_seg], bx
 11314 00000E23 A0[3905]                		mov	al, [sectorspertrack]
 11315 00000E26 B404                    		mov	ah, 4		; romverify
 11316 00000E28 B101                    		mov	cl, 1
 11317 00000E2A E85402                  		call	ToRom
 11318 00000E2D 5B                      		pop	bx
 11319 00000E2E 59                      		pop	cx
 11320 00000E2F 7329                    		jnb	short FormatOk
 11321                                  FormatError:				
 11322 00000E31 E83702                  		call	ResetDisk
 11323 00000E34 C606[3906]01            		mov	byte [had_format_error], 1
 11324 00000E39 50                      		push	ax
 11325 00000E3A 51                      		push	cx
 11326 00000E3B 52                      		push	dx
 11327 00000E3C E89801                  		call	SetMediaForFormat
 11328 00000E3F 3C01                    		cmp	al, 1
 11329 00000E41 7503                    		jnz	short WhileErr
 11330 00000E43 E83301                  		call	SetDasd
 11331                                  WhileErr:				
 11332 00000E46 5A                      		pop	dx
 11333 00000E47 59                      		pop	cx
 11334 00000E48 58                      		pop	ax
 11335 00000E49 E2BD                    		loop	FormatRetry
 11336                                  FormatFailed:				
 11337 00000E4B C606[3906]01            		mov	byte [had_format_error], 1
 11338                                  					; Set the format error flag
 11339 00000E50 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11340 00000E53 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11341 00000E55 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11342                                  DoMapIt:				
 11343 00000E57 E973FD                  		jmp	maperror
 11344                                  ; ---------------------------------------------------------------------------
 11345                                  
 11346                                  FormatOk:				
 11347 00000E5A C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11348 00000E5F C3                      		retn
 11349                                  ; ---------------------------------------------------------------------------
 11350                                  
 11351                                  ; 16/10/2022
 11352                                  
 11353                                  ; ==========================================================================
 11354                                  ;
 11355                                  ; VerifyTrack:
 11356                                  ;
 11357                                  ; input: ES:di points to bds for drive
 11358                                  ; ==========================================================================
 11359                                  
 11360                                  VerifyTrack:				
 11361 00000E60 1E                      		push	ds
 11362 00000E61 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11363 00000E65 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11364                                  
 11365                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11366                                  
 11367 00000E68 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11368 00000E6B 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11369 00000E6E 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11370 00000E71 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11371                                  					; Get option flag word
 11372 00000E73 1F                      		pop	ds
 11373 00000E74 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11374 00000E79 890E[3301]              		mov	[curtrk], cx
 11375 00000E7D A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11376 00000E80 8B0E[3905]              		mov	cx, [sectorspertrack]
 11377                                  
 11378                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11379                                  		; specified if not we should go to the normal track verification
 11380                                  		; routine. If fast format has been specified we should get the
 11381                                  		; number of tracks to be verified and check it to see if it is
 11382                                  		; > 255. If it is then it is an error and we should go to
 11383                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11384                                  		; sectors per track to get the total number of sectors to be
 11385                                  		; verified. This should also be less than equal to 255
 11386                                  		; otherwise we go to same error exit. If everything is okay
 11387                                  		; we initalise cx to the total sectors. use ax as a temporary
 11388                                  		; register.
 11389                                  
 11390                                  					; Special function requested?	
 11391 00000E84 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11392 00000E87 7421                    		jz	short NormVerifyTrack
 11393 00000E89 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11394 00000E8B 08E4                    		or	ah, ah
 11395 00000E8D 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11396 00000E8F F6E1                    		mul	cl
 11397 00000E91 08E4                    		or	ah, ah
 11398 00000E93 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11399 00000E95 89C1                    		mov	cx, ax
 11400                                  		; 10/12/2022
 11401 00000E97 26F6452301              		test	byte [es:di+35], 1
 11402                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11403                                  					; fnon_removable
 11404 00000E9C 740C                    		jz	short NormVerifyTrack
 11405                                  					; Multitrack operation = on?
 11406                                  		; 10/12/2022
 11407                                  		; 19/10/2022
 11408 00000E9E F606[2F05]80            		test	byte [multrk_flag], 80h
 11409                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11410                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11411 00000EA3 7405                    		jz	short NormVerifyTrack
 11412 00000EA5 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11413                                  NormVerifyTrack:			
 11414 00000EAA 31C0                    		xor	ax, ax		; 1st sector
 11415 00000EAC 31DB                    		xor	bx, bx
 11416 00000EAE 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11417 00000EB2 E83F00                  		call	TrackIo
 11418 00000EB5 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11419 00000EBA C3                      		retn
 11420                                  ; ---------------------------------------------------------------------------
 11421                                  
 11422                                  VerifyTrack_Err:			
 11423 00000EBB B401                    		mov	ah, 1
 11424 00000EBD E90DFD                  		jmp	maperror
 11425                                  ; ---------------------------------------------------------------------------
 11426                                  
 11427                                  ; 16/10/2022
 11428                                  
 11429                                  ; ==========================================================================
 11430                                  ;
 11431                                  ; ReadTrack:
 11432                                  ;
 11433                                  ; input: ES:di points to bds for drive
 11434                                  ;
 11435                                  ; ==========================================================================
 11436                                  
 11437                                  ReadTrack:				
 11438 00000EC0 C606[2001]02            		mov	byte [rflag], 2	; romread
 11439 00000EC5 EB05                    		jmp	short ReadWriteTrack
 11440                                  ; ---------------------------------------------------------------------------
 11441                                  
 11442                                  WriteTrack:
 11443                                  
 11444                                  ; ==========================================================================
 11445                                  ;
 11446                                  ; WriteTrack:
 11447                                  ;
 11448                                  ; input: ES:di points to bds for drive
 11449                                  ;
 11450                                  ; ==========================================================================
 11451                                  				
 11452 00000EC7 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11453                                  
 11454                                  		; Fall into ReadWriteTrack
 11455                                  
 11456                                  ; ==========================================================================
 11457                                  ;
 11458                                  ; readWriteTrack:
 11459                                  ;
 11460                                  ; input:
 11461                                  ;    ES:di points to bds for drive
 11462                                  ;    rFlag - 2 for read,3 for write
 11463                                  ;
 11464                                  ; ==========================================================================
 11465                                  
 11466                                  ReadWriteTrack:	
 11467                                  		; save bds pointer segment so we can use it to access
 11468                                  		; our packet. Notice that this is not the standard register
 11469                                  		; assignment for accessing packets
 11470                                  		
 11471                                  		; 19/10/2022	
 11472 00000ECC 06                      		push	es
 11473 00000ECD C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11474 00000ED1 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11475 00000ED5 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11476 00000ED9 A3[3301]                		mov	[curtrk], ax
 11477 00000EDC 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11478 00000EE0 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11479 00000EE3 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11480 00000EE7 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11481 00000EEB 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11482                                  					; Get transfer address
 11483                                  
 11484                                  		; we just trashed our packet address, but we no longer care
 11485                                  
 11486 00000EEF 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11487 00000EF3 07                      		pop	es
 11488                                  
 11489                                  		; Fall into TrackIo
 11490                                  
 11491                                  ; =============== S U B	R O U T	I N E =======================================
 11492                                  
 11493                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11494                                  
 11495                                  ; ==========================================================================
 11496                                  ;
 11497                                  ; TrackIo:
 11498                                  ;    performs track read/write/verify
 11499                                  ;
 11500                                  ;   input:
 11501                                  ;      rFlag	- 2 = read
 11502                                  ;		  3 = write
 11503                                  ;		  4 = verify
 11504                                  ;      AX	- Index into track table of first sector to io
 11505                                  ;      CX	- Number of sectors to io
 11506                                  ;      Xfer_Seg:BX - Transfer address
 11507                                  ;      ES:DI	- Pointer to bds
 11508                                  ;      CurTrk	- Current cylinder
 11509                                  ;      CurHd	- Current head
 11510                                  ;
 11511                                  ; ==========================================================================
 11512                                  
 11513                                  ; 16/03/2019 - Retro DOS v4.0
 11514                                  		
 11515                                  		; 19/10/2022
 11516                                  TrackIo:	
 11517                                  					; Procedure `disk' will pop stack to
 11518 00000EF4 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11519 00000EF8 E83FF9                  		call	checksingle	; Ensure correct disk is in drv
 11520 00000EFB 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11521                                  					; See if we have already set	disk
 11522 00000F00 7407                    		jz	short Dptalreadyset ; base table
 11523 00000F02 50                      		push	ax		; set up tables	and variables for i/o
 11524 00000F03 51                      		push	cx
 11525 00000F04 E88FFA                  		call	iosetup
 11526 00000F07 59                      		pop	cx
 11527 00000F08 58                      		pop	ax
 11528                                  Dptalreadyset:				; Point si at the table entry of the			
 11529 00000F09 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11530 00000F0C D1E0                    		shl	ax, 1
 11531 00000F0E D1E0                    		shl	ax, 1
 11532 00000F10 01C6                    		add	si, ax
 11533                                  
 11534                                  		; WE WANT:
 11535                                  		; CX to	be the number of times we have to loop
 11536                                  		; DX to	be the number of sectors we read on each iteration
 11537                                  		
 11538 00000F12 BA0100                  		mov	dx, 1
 11539                                  		; 12/12/2022
 11540 00000F15 26F6452308              		test	byte [es:di+23h], 8
 11541                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11542                                  					; good_tracklayout
 11543 00000F1A 7402                    		jz	short ionextsector
 11544                                  		
 11545 00000F1C 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11546                                  ionextsector:				
 11547 00000F1E 51                      		push	cx
 11548 00000F1F 52                      		push	dx
 11549 00000F20 46                      		inc	si
 11550 00000F21 46                      		inc	si		; Skip over the	cylinder and head in
 11551                                  					; the track table
 11552 00000F22 AC                      		lodsb			; Get sector ID	from track table
 11553 00000F23 A2[3101]                		mov	[cursec], al
 11554                                  
 11555                                  		; assumptions for a fixed disk multi-track disk	i/o
 11556                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11557                                  		;     only CL is valid.
 11558                                  		; 2). Sector size should be set	to 512 bytes.
 11559                                  		; 3). Good track layout
 11560                                  		
 11561                                  		; 12/12/2022
 11562 00000F26 26F6452301              		test	byte [es:di+23h], 1
 11563                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11564                                  					; fnon_removable ; Fixed disk?
 11565 00000F2B 7414                    		jz	short IoRemovable ; No
 11566                                  		; 12/12/2022
 11567 00000F2D F606[2F05]80            		test	byte [multrk_flag], 80h
 11568                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11569                                  						; Allow multi-track operation?
 11570 00000F32 740D                    		jz	short IoRemovable ; No,don't do that.
 11571 00000F34 8916[2201]              		mov	[seccnt], dx
 11572 00000F38 89D0                    		mov	ax, dx
 11573 00000F3A E816FB                  		call	Disk
 11574 00000F3D 5A                      		pop	dx
 11575 00000F3E 59                      		pop	cx
 11576 00000F3F F8                      		clc
 11577 00000F40 C3                      		retn
 11578                                  ; ---------------------------------------------------------------------------
 11579                                  
 11580                                  IoRemovable:				
 11581 00000F41 AC                      		lodsb			; Get sector size index	from track
 11582                                  					; table	and save it
 11583 00000F42 50                      		push	ax
 11584 00000F43 56                      		push	si
 11585 00000F44 1E                      		push	ds		; Save Bios_Data
 11586 00000F45 50                      		push	ax
 11587 00000F46 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11588                                  					; Fetch	EOT while ds-> Bios_Data
 11589 00000F4A C536[2D01]              		lds	si, [dpt]
 11590 00000F4E 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11591 00000F51 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11592 00000F54 58                      		pop	ax
 11593 00000F55 1F                      		pop	ds
 11594 00000F56 88D0                    		mov	al, dl
 11595 00000F58 A3[2201]                		mov	[seccnt], ax
 11596 00000F5B E8F5FA                  		call	Disk
 11597 00000F5E 5E                      		pop	si		; Advance buffer pointer by adding
 11598                                  					; sector size
 11599 00000F5F 58                      		pop	ax
 11600                                  
 11601                                  		; 02/09/2023 (PCDOS 7.1)
 11602                                  		;call	SectorSizeIndexToSectorSize
 11603 00000F60 88C1                    		mov	cl, al
 11604 00000F62 B88000                  		mov	ax, 128
 11605 00000F65 D3E0                    		shl	ax, cl
 11606                                  
 11607 00000F67 01C3                    		add	bx, ax
 11608 00000F69 5A                      		pop	dx
 11609 00000F6A 59                      		pop	cx
 11610 00000F6B E2B1                    		loop	ionextsector
 11611 00000F6D 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11612                                  		;jz	short NoNeedDone
 11613                                  		; 12/12/2022
 11614 00000F72 7404                    		je	short NoNeedDone2
 11615 00000F74 E867FA                  		call	done		; set time of last access, and reset
 11616                                  					; entries in Dpt.
 11617                                  NoNeedDone:
 11618 00000F77 F8                      		clc
 11619                                  NoNeedDone2:
 11620 00000F78 C3                      		retn
 11621                                  
 11622                                  ; =============== S U B	R O U T	I N E =======================================
 11623                                  
 11624                                  ; ---------------------------------------------------------------------------
 11625                                  ;
 11626                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11627                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11628                                  ; are permissible.
 11629                                  ;
 11630                                  ; On Input   AX contains sector size in bytes
 11631                                  ; On Output  AL Contains index
 11632                                  ; All other registers preserved
 11633                                  ;
 11634                                  ; ---------------------------------------------------------------------------
 11635                                  
 11636                                  ; 02/09/2023
 11637                                  ;SectSizeToSectIndex:
 11638                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11639                                  ;					; examine upper	byte only
 11640                                  ;		ja	short OneK
 11641                                  ;		mov	al, ah		; value	in AH is the index!
 11642                                  ;		retn
 11643                                  
 11644                                  ; ---------------------------------------------------------------------------
 11645                                  ;
 11646                                  ;OneK:
 11647                                  ;		mov	al, 3
 11648                                  ;		retn
 11649                                  
 11650                                  ; =============== S U B	R O U T	I N E =======================================
 11651                                  
 11652                                  ; 02/09/2023
 11653                                  ;SectorSizeIndexToSectorSize:
 11654                                  ;		mov	cl, al
 11655                                  ;		mov	ax, 128
 11656                                  ;		shl	ax, cl
 11657                                  ;		retn
 11658                                  
 11659                                  ; =============== S U B	R O U T	I N E =======================================
 11660                                  
 11661                                  ; 16/10/2022
 11662                                  
 11663                                  ; ---------------------------------------------------------------------------
 11664                                  ;
 11665                                  ; SetDASD
 11666                                  ;
 11667                                  ; Set up the rom for formatting.
 11668                                  ; we have to tell the rom bios what type of disk is in the drive.
 11669                                  ;
 11670                                  ; On Input   - ES:di - Points to bds
 11671                                  ;
 11672                                  ; ---------------------------------------------------------------------------
 11673                                  
 11674                                  		; 19/10/2022
 11675                                  SetDasd:	
 11676 00000F79 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11677                                  					; See if we've previously set dasd type
 11678 00000F7E 740C                    		jz	short DoSetDasd
 11679                                  		; 10/12/2022
 11680 00000F80 26F6452380              		test	byte [es:di+23h], 80h
 11681                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11682                                  					; set_dasd_true
 11683 00000F85 7447                    		jz	short DasdHasBeenSet
 11684                                  		; 10/12/2022
 11685 00000F87 268065237F              		and	byte [es:di+23h], 7Fh
 11686                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11687                                  					; ~set_dasd_true
 11688                                  DoSetDasd:
 11689 00000F8C C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11690 00000F91 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11691 00000F96 B004                    		mov	al, 4
 11692                                  		; 02/09/2023
 11693 00000F98 268A6522                		mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 11694 00000F9C 80FC02                  		cmp	ah, 2
 11695                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11696                                  					; DEV_3INCH720KB
 11697 00000F9F 7415                    		jz	short DoSet
 11698 00000FA1 80FC01                  		cmp	ah, 1
 11699                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11700                                  					; DEV_5INCH96TPI
 11701                                  		;jz	short GotBig
 11702 00000FA4 B001                    		mov	al, 1
 11703                                  		;jmp	short DoSet
 11704                                  		; 02/09/2023
 11705 00000FA6 750E                    		jnz	short DoSet
 11706                                  
 11707                                  ; ---------------------------------------------------------------------------
 11708                                  
 11709                                  GotBig:
 11710                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 11711                                  		; 02/09/2023
 11712 00000FA8 40                      		inc	ax  ; mov al, 2
 11713 00000FA9 803E[3706]00            		cmp	byte [mediatype], 0
 11714 00000FAE 7506                    		jnz	short DoSet
 11715                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11716                                  		; 10/12/2022
 11717                                  		;inc	al  ; al = 3
 11718                                  		; 18/12/2022
 11719 00000FB0 40                      		inc	ax  ; al = 3
 11720 00000FB1 C606[3B01]54            		mov	byte [gap_patch], 54h
 11721                                  DoSet:
 11722 00000FB6 1E                      		push	ds
 11723 00000FB7 56                      		push	si
 11724                                  
 11725                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 11726                                  		; 02/09/2023
 11727 00000FB8 31F6                    		xor	si, si
 11728 00000FBA 8EDE                    		mov	ds, si	; 0
 11729                                  
 11730 00000FBC C5367800                		lds	si, [DSKADR]
 11731                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11732                                  		;;lds	si, ds:78h
 11733                                  
 11734 00000FC0 C644090F                		mov	byte [si+9], 0Fh ;
 11735                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11736 00000FC4 5E                      		pop	si
 11737 00000FC5 1F                      		pop	ds
 11738 00000FC6 B417                    		mov	ah, 17h
 11739 00000FC8 268A5504                		mov	dl, [es:di+4]
 11740 00000FCC CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11741                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11742                                  DasdHasBeenSet:
 11743 00000FCE 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11744 00000FD2 8826[3701]              		mov	[formt_eot], ah
 11745 00000FD6 C3                      		retn
 11746                                  
 11747                                  ; =============== S U B	R O U T	I N E =======================================
 11748                                  
 11749                                  ; 16/10/2022
 11750                                  
 11751                                  ; ---------------------------------------------------------------------------
 11752                                  ;
 11753                                  ; Set Media Type for Format
 11754                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11755                                  ; BPB area in the BDS can be handled by the rom.
 11756                                  ; On Input, ES:DI -> current BDS.
 11757                                  ; The status of the operation is returned in AL
 11758                                  ;
 11759                                  ;	- 0 - if the support is available,and the combination is valid.
 11760                                  ;	- 1 - no rom support
 11761                                  ;	- 2 - illegal combination
 11762                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11763                                  ;
 11764                                  ; Flags also may be altered. All other registers preserved.
 11765                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11766                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11767                                  ; to the one returned. the original pointer to the disk base table is stored
 11768                                  ; in TempDpt, until it is restored.
 11769                                  ;
 11770                                  ; ---------------------------------------------------------------------------
 11771                                  
 11772                                  		; 19/10/2022
 11773                                  SetMediaForFormat:	
 11774 00000FD7 51                      		push	cx
 11775 00000FD8 52                      		push	dx
 11776                                  
 11777                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11778                                  		; but we need to call int 13h, ah=18h again.
 11779                                  
 11780 00000FD9 803E[3906]01            		cmp	byte [had_format_error], 1
 11781 00000FDE 7425                    		jz	short SkipSaveDskAdr
 11782 00000FE0 30C0                    		xor	al, al		; If already done return 0
 11783 00000FE2 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11784 00000FE7 7502                    		jnz	short DoSetMediaForFormat
 11785 00000FE9 EB7D                    		jmp	SetMediaRet	; Media	already	set
 11786                                  ; ---------------------------------------------------------------------------
 11787                                  
 11788                                  DoSetMediaForFormat:
 11789 00000FEB 06                      		push	es
 11790 00000FEC 56                      		push	si
 11791                                  		
 11792                                  		; 02/09/2023
 11793                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 11794 00000FED 31F6                    		xor	si, si ; 0
 11795 00000FEF 8EC6                    		mov	es, si
 11796                                  
 11797 00000FF1 26C4367800              		les	si, [es:DSKADR]
 11798                                  		;les	si, es:78h	; [es:DSKADR]
 11799                                  					; Get pointer to disk base table
 11800 00000FF6 8936[2D01]              		mov	[dpt], si
 11801 00000FFA 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11802                                  
 11803                                  		; Initialize the head settle time to 0Fh. See the offsets
 11804                                  		; given in dskprm.inc.
 11805                                  
 11806 00000FFE 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11807 00001003 5E                      		pop	si
 11808 00001004 07                      		pop	es
 11809                                  SkipSaveDskAdr:				
 11810 00001005 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11811 00001009 49                      		dec	cx
 11812 0000100A 80E503                  		and	ch, 3
 11813 0000100D D0CD                    		ror	ch, 1
 11814 0000100F D0CD                    		ror	ch, 1
 11815 00001011 86E9                    		xchg	ch, cl
 11816 00001013 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11817 00001017 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11818 0000101B 06                      		push	es
 11819 0000101C 1E                      		push	ds
 11820 0000101D 56                      		push	si
 11821 0000101E 57                      		push	di
 11822 0000101F B418                    		mov	ah, 18h
 11823 00001021 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11824                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11825 00001023 7231                    		jb	short FormaStatErr
 11826 00001025 803E[3906]01            		cmp	byte [had_format_error], 1
 11827 0000102A 7423                    		jz	short skip_disk_base_setting
 11828 0000102C 06                      		push	es		; Save segment returned	by the rom
 11829                                  
 11830                                  		; 02/09/2023
 11831                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 11832 0000102D 31F6                    		xor	si, si
 11833 0000102F 8EC6                    		mov	es, si ; 0
 11834 00001031 06                      		push	es ; * ; 02/09/2023
 11835                                  
 11836 00001032 26C4367800              		les	si, [es:DSKADR]
 11837                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11838                                  					; Get current disk base	table
 11839 00001037 8936[3A06]              		mov	[tempdpt], si
 11840 0000103B 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11841                                  
 11842                                  		; 02/09/2023
 11843                                  		;;mov	es, [zeroseg]
 11844                                  		;xor	si, si ; 0
 11845                                  		;mov	es, si
 11846 0000103F 07                      		pop	es ; * ; 02/09/2023
 11847                                  
 11848                                  		;mov	es:78h,	di
 11849 00001040 26893E7800              		mov	[es:DSKADR], di
 11850                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11851 00001045 268F067A00              		pop	word [es:DSKADR+2]
 11852 0000104A C606[3806]01            		mov	byte [media_set_for_format], 1
 11853                                  skip_disk_base_setting:			
 11854 0000104F 30C0                    		xor	al, al		; Legal	combination + rom support code
 11855                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11856 00001051 A2[3906]                		mov	[had_format_error], al
 11857 00001054 EB0E                    		jmp	short PopStatRet
 11858                                  ; ---------------------------------------------------------------------------
 11859                                  
 11860                                  FormaStatErr:
 11861                                  		; 10/12/2022
 11862 00001056 B003                    		mov	al, 3
 11863                                  				
 11864 00001058 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11865                                  					; Illegal combination =	0Ch
 11866 0000105B 7406                    		jz	short FormatStatIllegalComb
 11867 0000105D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11868 00001060 7402                    		jz	short FormatStatTimeOut
 11869                                  		; 10/12/2022
 11870                                  		;dec	al
 11871                                  		; 18/12/2022
 11872 00001062 48                      		dec	ax
 11873                                  		; al = 2
 11874                                  		;mov	al, 1		; Function not supported.
 11875                                  		;jmp	short PopStatRet
 11876                                  ; ---------------------------------------------------------------------------
 11877                                  
 11878                                  FormatStatIllegalComb:
 11879                                  		; 10/12/2022
 11880                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11881                                  		; 18/12/2022
 11882 00001063 48                      		dec	ax
 11883                                  		; al = 2				
 11884                                  		;mov	al, 2		; Function supported, but
 11885                                  					; Illegal sect/trk,trk combination.
 11886                                  		; 10/12/2022
 11887                                  		;jmp	short PopStatRet
 11888                                  ; ---------------------------------------------------------------------------
 11889                                  
 11890                                  FormatStatTimeOut:			
 11891                                  		; 10/12/2022
 11892                                  		; al = 3
 11893                                  		;mov	al, 3		; Function supported, but
 11894                                  					; Media	not present.
 11895                                  PopStatRet:				
 11896 00001064 5F                      		pop	di
 11897 00001065 5E                      		pop	si
 11898 00001066 1F                      		pop	ds
 11899 00001067 07                      		pop	es
 11900                                  SetMediaRet:				
 11901 00001068 5A                      		pop	dx
 11902 00001069 59                      		pop	cx
 11903 0000106A C3                      		retn
 11904                                  
 11905                                  ; =============== S U B	R O U T	I N E =======================================
 11906                                  
 11907                                  ; 16/10/2022
 11908                                  
 11909                                  ; ---------------------------------------------------------------------------
 11910                                  ;
 11911                                  ; RESET THE DRIVE
 11912                                  ;
 11913                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11914                                  ; slow head settle time for the next operation. this is because the reset
 11915                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11916                                  ; time around - there is a problem with 3.5" drives in that the head does
 11917                                  ; not settle down in time,even for read operations!!
 11918                                  ;
 11919                                  ; ---------------------------------------------------------------------------
 11920                                  
 11921                                  ResetDisk:
 11922 0000106B 50                      		push	ax
 11923                                  
 11924                                  		; 02/09/2023
 11925 0000106C B80100                  		mov	ax, 1 ; PCDOS 7.1
 11926 0000106F 3806[3806]              		cmp	[media_set_for_format], al ; 1
 11927                                  		;cmp	byte [media_set_for_format], 1
 11928                                  					; Reset while formatting?
 11929 00001073 7503                    		jnz	short ResetDisk_cont
 11930                                  					; Then verify operation in "fmt & vrfy"
 11931                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 11932 00001075 A2[3906]                		mov	[had_format_error], al ; 1
 11933                                  ResetDisk_cont:
 11934                                  		; 02/09/2023 (ah=0)
 11935                                  		;xor	ah, ah		; So signals that we had a format error
 11936 00001078 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11937                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11938 0000107A C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11939                                  					; Zap up the speed
 11940 0000107F 58                      		pop	ax
 11941 00001080 C3                      		retn
 11942                                  
 11943                                  ; =============== S U B	R O U T	I N E =======================================
 11944                                  
 11945                                  ; 16/10/2022
 11946                                  
 11947                                  ; ---------------------------------------------------------------------------
 11948                                  ;
 11949                                  ; This routine sets up the drive parameter table with the values needed for
 11950                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11951                                  ;
 11952                                  ; on entry  -	ES:DI - points to bds for the drive
 11953                                  ;		Xfer_Seg:BX - points to trkbuf
 11954                                  ;		AL    - number of sectors
 11955                                  ;		AH    - int 13 function code
 11956                                  ;		CL    - sector number for verify
 11957                                  ;		DS    - Bios_Data
 11958                                  ;
 11959                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11960                                  ;		AX and flags are the results of the int 13
 11961                                  ;
 11962                                  ; ---------------------------------------------------------------------------
 11963                                  
 11964                                  		; 19/10/2022
 11965                                  ToRom:	
 11966 00001081 53                      		push	bx
 11967 00001082 56                      		push	si
 11968                                  
 11969                                  		; Compaq bug fix - check whether we are using new ROM
 11970                                  		; functionality to set up format, not merely if it exists.
 11971                                  		; This was formerly a check against [new_rom]
 11972                                  
 11973 00001083 F606[3806]01            		test	byte [media_set_for_format], 1
 11974 00001088 7536                    		jnz	short GotValidDpt
 11975 0000108A 50                      		push	ax
 11976 0000108B 06                      		push	es		; Save bds segment
 11977 0000108C 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11978                                  					; ffSmall ; is it a 3.5" drive?
 11979 00001091 9C                      		pushf			; (Save	the cmp	result)
 11980 00001092 8E06[1A00]              		mov	es, [zeroseg]
 11981                                  		;les	si, es:78h	; Get pointer to disk base table
 11982 00001096 26C4367800              		les	si, [es:DSKADR]
 11983                                  		;mov	word ptr ds:dpt, si
 11984                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11985 0000109B 8936[2D01]              		mov	[dpt], si
 11986 0000109F 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11987                                  		
 11988 000010A3 A0[3701]                		mov	al, [formt_eot]
 11989 000010A6 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11990 000010AA A0[3B01]                		mov	al, [gap_patch]
 11991 000010AD 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11992                                  					; Important for	format
 11993 000010B1 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11994                                  					; Assume we are	doing a	seek operation
 11995                                  					; Setup	motor start correctly for 3.5" drives
 11996 000010B6 9D                      		popf			; Get result of	earlier	cmp
 11997 000010B7 7505                    		jnz	short MotorStrtOK
 11998 000010B9 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11999                                  MotorStrtOK:				
 12000 000010BE 07                      		pop	es		; Restore bds segment
 12001 000010BF 58                      		pop	ax
 12002                                  GotValidDpt:				
 12003 000010C0 8B16[3901]              		mov	dx, [trknum]	; Set track number
 12004 000010C4 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 12005 000010C6 268A5504                		mov	dl, [es:di+4]	; Set drive number
 12006 000010CA 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 12007 000010CE 06                      		push	es		; Save bds segment
 12008 000010CF 8E06[3705]              		mov	es, [xfer_seg]
 12009 000010D3 CD13                    		int	13h		; DISK -
 12010 000010D5 07                      		pop	es		; Restore bds segment
 12011 000010D6 5E                      		pop	si
 12012 000010D7 5B                      		pop	bx
 12013 000010D8 C3                      		retn
 12014                                  
 12015                                  ; ---------------------------------------------------------------------------
 12016                                  
 12017                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12018                                  
 12019                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 12020                                  
 12021                                  ; ==========================================================================
 12022                                  ;
 12023                                  ; get the owner of the physical drive represented by the logical drive in al.
 12024                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 12025                                  ; if this is not the case, the system may hang, just following the linked list.
 12026                                  ;
 12027                                  ; ==========================================================================
 12028                                  
 12029                                  		; 19/10/2022
 12030                                  ioctl_getown:
 12031 000010D9 E8EFF3                  		call	SetDrive
 12032 000010DC 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 12033                                  					; Get physical drive number
 12034 000010E0 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 12035                                  ownloop:				
 12036 000010E4 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 12037 000010E8 7507                    		jnz	short getnextBDS
 12038                                  		; 10/12/2022
 12039 000010EA 26F6452320              		test	byte [es:di+23h], 20h
 12040                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 12041                                  					; fi_own_physical
 12042 000010EF 7514                    		jnz	short exitown
 12043                                  getnextBDS:				
 12044 000010F1 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12045 000010F4 EBEE                    		jmp	short ownloop
 12046                                  ; ---------------------------------------------------------------------------
 12047                                  
 12048                                  ; ==========================================================================
 12049                                  ;
 12050                                  ; set the ownership of the physical drive represented by the logical drive
 12051                                  ; in al to al.
 12052                                  ;
 12053                                  ; ==========================================================================
 12054                                  
 12055                                  		; 19/10/2022
 12056                                  ioctl_setown:
 12057 000010F6 E8D2F3                  		call	SetDrive
 12058 000010F9 C606[7A00]01            		mov	byte [fsetowner], 1
 12059                                  					; set flag for CheckSingle to look at.
 12060 000010FE E839F7                  		call	checksingle
 12061                                  		; 02/09/2023
 12062 00001101 FE0E[7A00]              		dec	byte [fsetowner] ; 0
 12063                                  		;mov	byte [fsetowner], 0
 12064                                  					; set ownership	of drive reset flag
 12065                                  		; Fall into ExitOwn
 12066                                  
 12067                                  ; ==========================================================================
 12068                                  ;
 12069                                  ; if there is only one logical drive assigned to this physical drive, return
 12070                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12071                                  ;
 12072                                  ; ==========================================================================
 12073                                  
 12074                                  exitown:				
 12075 00001105 30C9                    		xor	cl, cl
 12076                                  		; 12/12/2022
 12077 00001107 26F6452310              		test	byte [es:di+23h], 10h
 12078                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12079                                  					; fi_am_mult
 12080 0000110C 7406                    		jz	short exitnomult
 12081 0000110E 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12082                                  					; Get logical drive number
 12083                                  					; Get it 1-based
 12084 00001112 FEC1                    		inc	cl
 12085                                  exitnomult:				
 12086 00001114 C51E[1200]              		lds	bx, [ptrsav]
 12087 00001118 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12088                                  					; Exit normal termination
 12089                                  		; 12/12/2022
 12090                                  		; cf=0
 12091                                  		;clc
 12092 0000111B C3                      		retn
 12093                                  
 12094                                  ; =============== S U B	R O U T	I N E =======================================
 12095                                  
 12096                                  ; 16/10/2022
 12097                                  
 12098                                  ; ---------------------------------------------------------------------------
 12099                                  ;
 12100                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12101                                  ; only if the first byte of TempDpt is not -1.
 12102                                  ; all registers (including flags) are preserved.
 12103                                  ;
 12104                                  ; ---------------------------------------------------------------------------
 12105                                  
 12106                                  		; 19/10/2022
 12107                                  RestoreOldDpt:
 12108                                  		; if we have already restored the disk base table earlier,
 12109                                  		; do not do it again.
 12110                                  	
 12111 0000111C 50                      		push	ax
 12112 0000111D 30C0                    		xor	al, al
 12113 0000111F A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 12114 00001122 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 12115 00001126 08C0                    		or	al, al
 12116 00001128 741E                    		jz	short DontRestore
 12117 0000112A 56                      		push	si
 12118 0000112B 1E                      		push	ds
 12119 0000112C 06                      		push	es
 12120 0000112D C536[3A06]              		lds	si, [tempdpt]
 12121                                  
 12122                                  		; 17/10/2022
 12123 00001131 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 12124                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12125 00001136 268E06[1A00]            		mov	es, [es:zeroseg]
 12126                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 12127                                  
 12128                                  		;mov	es:78h,	si	; [es:DSKADR]
 12129 0000113B 2689367800              		mov	[es:DSKADR], si
 12130                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12131 00001140 268C1E7A00              		mov	[es:DSKADR+2], ds
 12132 00001145 07                      		pop	es
 12133 00001146 1F                      		pop	ds
 12134 00001147 5E                      		pop	si
 12135                                  DontRestore:				
 12136 00001148 58                      		pop	ax
 12137                                  		; 12/12/2022
 12138                                  		; cf=0
 12139                                  		;clc			;  Clear carry
 12140 00001149 C3                      		retn
 12141                                  
 12142                                  ; ---------------------------------------------------------------------------
 12143                                  
 12144                                  ; 16/10/2022
 12145                                  
 12146                                  ; ==========================================================================
 12147                                  ;	get media id
 12148                                  ; ==========================================================================
 12149                                  ;
 12150                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12151                                  ;	    the media that has the extended boot record.
 12152                                  ;	    for the conventional media,this routine will return "unknown
 12153                                  ;	    media type" error to dos.
 12154                                  ;
 12155                                  ; INPUT :   ES:di -> bds table for this drive.
 12156                                  ;
 12157                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12158                                  ;	    if carry set,then al contains the device driver error number
 12159                                  ;	    that will be returned to dos.
 12160                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12161                                  ;
 12162                                  ; SUBROUTINES TO BE CALLED:
 12163                                  ;	BootIo:NEAR
 12164                                  ;
 12165                                  ; LOGIC:
 12166                                  ;	to recognize the extended boot record,this logic will actually
 12167                                  ;	access the boot sector even if it is a hard disk.
 12168                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12169                                  ;	field of bpb and the extended boot signature.
 12170                                  ;
 12171                                  ; {
 12172                                  ;	get logical drive number from bds table;
 12173                                  ;	rFlag = read operation;
 12174                                  ;	BootIo;		 /*get the media boot record into the buffer
 12175                                  ;	if (no error) then
 12176                                  ;	     if (extended boot record) then
 12177                                  ;		{ set volume label,volume serial number and system id
 12178                                  ;		  of the request packet to those of the boot record;
 12179                                  ;		};
 12180                                  ;	     else		  /*not an extended bpb */
 12181                                  ;		{ set register al to "unknown media.." error code;
 12182                                  ;		  set carry bit;
 12183                                  ;		};
 12184                                  ;	else
 12185                                  ;	     ret;	/*already error code is set in the register al
 12186                                  ;
 12187                                  ; ==========================================================================
 12188                                  
 12189                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12190                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12191                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12192                                  
 12193                                  		; 19/10/2022
 12194                                  GetMediaId:
 12195 0000114A E89F00                  		call	ChangeLineChk
 12196 0000114D 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12197 00001151 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12198 00001156 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 12199 00001159 7224                    		jb	short IOCtl_If1
 12200                                  					; Valid? (0F0h-0FFh?)
 12201 0000115B 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12202                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12203 00001160 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12204                                  		; 10/12/2022
 12205 00001162 BE[7401]                		mov	si, disksector+26h
 12206 00001165 803C29                  		cmp	byte [si], 29h
 12207                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12208                                  					; EXT_BOOT_SIGNATURE
 12209 00001168 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12210 0000116A C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12211 0000116E 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12212                                  		; 10/12/2022
 12213 00001172 46                      		inc	si
 12214                                  		; si = disksector+27h 
 12215                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12216 00001173 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12217 00001176 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12218                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12219                                  					; +size_of_EXT_SYSTEM_ID
 12220 00001179 F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12221                                  	
 12222                                  		; 10/12/2022
 12223                                  		; cf = 0
 12224                                  		;clc
 12225                                  
 12226 0000117B C3                      		retn
 12227                                  ; ---------------------------------------------------------------------------
 12228                                  
 12229                                  IOCtl_If2:				
 12230 0000117C B007                    		mov	al, 7		; error_unknown_media
 12231 0000117E F9                      		stc
 12232                                  IOCtl_If1:				
 12233 0000117F C3                      		retn
 12234                                  ; ---------------------------------------------------------------------------
 12235                                  
 12236                                  ; 16/10/2022
 12237                                  
 12238                                  ; ==========================================================================
 12239                                  ;  set media id
 12240                                  ; ==========================================================================
 12241                                  
 12242                                  ; function: set the volume label, the system id and the serial number of
 12243                                  ;	    the media that has the extended boot record.
 12244                                  ;	    for the conventional media, this routine will return "unknown
 12245                                  ;	    media.." error to dos.
 12246                                  ;	    this routine will also set the corresponding informations in
 12247                                  ;	    the bds table.
 12248                                  ;
 12249                                  ; input :   ES:di -> bds table for this drive.
 12250                                  ;
 12251                                  ; output:   the extended boot record in the media will be set according to
 12252                                  ;	    the request packet.
 12253                                  ;	    if carry set, then al contains the device driver error number
 12254                                  ;	    that will be returned to dos.
 12255                                  ;
 12256                                  ; subroutines to be called:
 12257                                  ;	BootIo:NEAR
 12258                                  ;
 12259                                  ; logic:
 12260                                  ;
 12261                                  ; {
 12262                                  ;	get drive_number from bds;
 12263                                  ;	rFlag = "read operation";
 12264                                  ;	BootIo;
 12265                                  ;	if (no error) then
 12266                                  ;	     if (extended boot record) then
 12267                                  ;		{ set volume label,volume serial number and system id
 12268                                  ;		  of the boot record to those of the request packet;
 12269                                  ;		  rFlag = "write operation";
 12270                                  ;		  get drive number from bds;
 12271                                  ;		  BootIo;	  /*write it back*/
 12272                                  ;		};
 12273                                  ;	     else		  /*not an extended bpb */
 12274                                  ;		{ set register al to "unknown media.." error code;
 12275                                  ;		  set carry bit;
 12276                                  ;		  ret;	 /*return back to caller */
 12277                                  ;		};
 12278                                  ;	else
 12279                                  ;	     ret;		 /*already error code is set */
 12280                                  ;
 12281                                  ; ==========================================================================
 12282                                  
 12283                                  		; 19/10/2022
 12284                                  SetMediaId:
 12285 00001180 E86900                  		call	ChangeLineChk
 12286 00001183 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12287                                  					; Logical drive	number
 12288 00001187 88C2                    		mov	dl, al
 12289 00001189 C606[2001]02            		mov	byte [rflag], 2	; romread
 12290 0000118E 52                      		push	dx
 12291 0000118F E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12292 00001192 5A                      		pop	dx
 12293 00001193 723E                    		jb	short IOCtl_If6
 12294                                  					; Valid? (0F0h-0FFh?)
 12295 00001195 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12296                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12297 0000119A 7234                    		jb	short IOCtl_If7	; Brif not
 12298 0000119C 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12299                                  					; EXT_BOOT_SIGNATURE
 12300 000011A1 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12301 000011A3 06                      		push	es		; Save BDS pointer
 12302 000011A4 57                      		push	di
 12303 000011A5 1E                      		push	ds		; Point	ES To boot record
 12304 000011A6 07                      		pop	es
 12305 000011A7 BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12306 000011AA C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12307 000011AE C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12308 000011B1 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12309 000011B4 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12310                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12311                                  					; +size_of_EXT_SYSTEM_ID
 12312 000011B7 F3A4                    		rep movsb
 12313 000011B9 06                      		push	es		; point	ds back	to Bios_Data
 12314 000011BA 1F                      		pop	ds
 12315 000011BB 5F                      		pop	di		; restore bds pointer
 12316 000011BC 07                      		pop	es
 12317 000011BD E876F5                  		call	mov_media_ids	; update the bds media id info.
 12318 000011C0 88D0                    		mov	al, dl
 12319 000011C2 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12320 000011C7 E80A00                  		call	BootIo		; write	it back.
 12321 000011CA C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12322                                  					; make sure chk_media check the driver
 12323                                  					; return with error code from BootIo
 12324 000011CF C3                      		retn
 12325                                  ; ---------------------------------------------------------------------------
 12326                                  
 12327                                  IOCtl_If7:				
 12328 000011D0 B007                    		mov	al, 7		; error_unknown_media
 12329 000011D2 F9                      		stc
 12330                                  IOCtl_If6:				
 12331 000011D3 C3                      		retn
 12332                                  
 12333                                  ; =============== S U B	R O U T	I N E =======================================
 12334                                  
 12335                                  ; 16/10/2022
 12336                                  
 12337                                  ; ---------------------------------------------------------------------------
 12338                                  ;	BootIo
 12339                                  ; ---------------------------------------------------------------------------
 12340                                  ;
 12341                                  ; function: read/write the boot record into boot sector.
 12342                                  ;
 12343                                  ; input :
 12344                                  ;	    al=logical drive number
 12345                                  ;	    rFlag = operation (read/write)
 12346                                  ;
 12347                                  ; output:   for read operation,the boot record of the drive specified in bds
 12348                                  ;	    be read into the DiskSector buffer.
 12349                                  ;	    for write operation,the DiskSector buffer image will be written
 12350                                  ;	    to the drive specified in bds.
 12351                                  ;	    if carry set,then al contains the device driver error number
 12352                                  ;	    that will be returned to dos.
 12353                                  ;	    AX,CX,DX register destroyed.
 12354                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12355                                  ;
 12356                                  ; subroutines to be called:
 12357                                  ;	DiskIO:NEAR
 12358                                  ;
 12359                                  ; logic:
 12360                                  ;
 12361                                  ; {
 12362                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12363                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12364                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12365                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12366                                  ; }
 12367                                  ; ==========================================================================
 12368                                  
 12369                                  		; 19/10/2022
 12370                                  BootIo:	
 12371 000011D4 06                      		push	es
 12372 000011D5 57                      		push	di
 12373 000011D6 53                      		push	bx
 12374 000011D7 1E                      		push	ds
 12375 000011D8 07                      		pop	es		; Point ES: to Bios_Data
 12376                                  
 12377                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12378                                  		; need to be initialized for this subroutine out here are
 12379                                  		; - Transfer address to Bios_Data:DiskSector
 12380                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12381                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12382                                  		; - Number of sectors <-- 1
 12383                                  
 12384 000011D9 BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12385 000011DC 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12386 000011DE 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12387 000011E2 B90100                  		mov	cx, 1
 12388 000011E5 E8E0F6                  		call	diskio
 12389 000011E8 5B                      		pop	bx
 12390 000011E9 5F                      		pop	di
 12391 000011EA 07                      		pop	es
 12392 000011EB C3                      		retn
 12393                                  
 12394                                  ; =============== S U B	R O U T	I N E =======================================
 12395                                  
 12396                                  ; 16/10/2022
 12397                                  
 12398                                  ; ---------------------------------------------------------------------------
 12399                                  ;	ChangeLineChk
 12400                                  ; ---------------------------------------------------------------------------
 12401                                  ;
 12402                                  ; when the user calls get/set media id call before dos establishes the media
 12403                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12404                                  ; lost.	this routine will check the change line activity and will save the
 12405                                  ; history in the flags.
 12406                                  ;
 12407                                  ; FUNCTION: check the change line error activity
 12408                                  ;
 12409                                  ; INPUT :  ES:di -> bds table.
 12410                                  ;
 12411                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12412                                  ;
 12413                                  ; SUBROUTINES TO BE CALLED:
 12414                                  ;	Set_Changed_DL
 12415                                  ;
 12416                                  ; ---------------------------------------------------------------------------
 12417                                  
 12418                                  ChangeLineChk:	
 12419 000011EC 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12420 000011F0 08D2                    		or	dl, dl		; Fixed	disk?
 12421 000011F2 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12422                                  		; 12/12/2022
 12423 000011F4 26F6452304              		test	byte [es:di+23h], 4
 12424                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12425                                  					; return_fake_bpb
 12426 000011F9 751A                    		jnz	short ChangeLnChkRet
 12427 000011FB 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12428 00001200 7513                    		jnz	short ChangeLnChkRet
 12429 00001202 E8DE06                  		call	haschange	; This drive support change line?
 12430 00001205 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12431                                  
 12432                                  		; Execute the rom disk interrupt to check changeline activity.
 12433                                  
 12434 00001207 B416                    		mov	ah, 16h
 12435 00001209 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12436                                  					; DL = drive to	check
 12437                                  					; Return: AH = disk change status
 12438 0000120B 7308                    		jnb	short ChangeLnChkRet
 12439 0000120D 53                      		push	bx
 12440 0000120E BB4000                  		mov	bx, 40h		; fchanged
 12441                                  					; Update flag in BDS for this
 12442                                  					; physical drive
 12443 00001211 E8A806                  		call	set_changed_dl
 12444 00001214 5B                      		pop	bx
 12445                                  ChangeLnChkRet:				
 12446 00001215 C3                      		retn
 12447                                  
 12448                                  ; ---------------------------------------------------------------------------
 12449                                  
 12450                                  ; 16/10/2022
 12451                                  
 12452                                  ; ==========================================================================
 12453                                  ;	GetAccessFlag
 12454                                  ; ==========================================================================
 12455                                  ;
 12456                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12457                                  ;
 12458                                  ; INPUT :
 12459                                  ;	    ES:di -> bds table
 12460                                  ;
 12461                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12462                                  ;						 = 1 if disk i/o allowed.
 12463                                  ; ==========================================================================
 12464                                  
 12465                                  		; 19/10/2022
 12466                                  GetAccessFlag:				
 12467 00001216 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12468 0000121A C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12469                                  		;mov	al, 0		; Assume result	is unformatted
 12470                                  		; 10/12/2022
 12471 0000121D 28C0                    		sub	al, al
 12472                                  		; 10/12/2022
 12473 0000121F 26F6452402              		test	byte [es:di+36], 02h
 12474                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12475                                  					; unformatted_media
 12476 00001224 7502                    		jnz	short GafDone	; Done if unformatted
 12477 00001226 FEC0                    		inc	al		; Return true for formatted
 12478                                  
 12479                                  GafDone:				
 12480 00001228 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12481 0000122B C3                      		retn
 12482                                  ; ---------------------------------------------------------------------------
 12483                                  
 12484                                  ; 16/10/2022
 12485                                  
 12486                                  ; ==========================================================================
 12487                                  ;	SetAccessFlag
 12488                                  ; ==========================================================================
 12489                                  ;
 12490                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12491                                  ;
 12492                                  ; input :
 12493                                  ;	    ES:di -> bds table
 12494                                  ;
 12495                                  ; output:   unformtted_media bit modified according to the user request
 12496                                  ; ==========================================================================
 12497                                  
 12498                                  		; 19/10/2022
 12499                                  SetAccessFlag:				
 12500 0000122C C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12501 00001230 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12502                                  		; 10/12/2022
 12503 00001233 26806524FD              		and	byte [es:di+36], 0FDh
 12504                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12505                                  					; ~unformatted_media
 12506 00001238 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12507 0000123C 7505                    		jnz	short saf_Done
 12508                                  		; 10/12/2022
 12509 0000123E 26804D2402              		or	byte [es:di+36], 02h
 12510                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12511                                  					; unformatted_media
 12512                                  saf_Done:				
 12513 00001243 C3                      		retn
 12514                                  ; ---------------------------------------------------------------------------
 12515                                  
 12516                                  ; 16/10/2022
 12517                                  
 12518                                  ; ==========================================================================
 12519                                  ; Ioctl_Support_Query
 12520                                  ; ==========================================================================
 12521                                  ;
 12522                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12523                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12524                                  ; device attributes specifies if this function is supported.
 12525                                  ;
 12526                                  ; ==========================================================================
 12527                                  
 12528                                  		; 19/10/2022
 12529                                  ioctl_support_query:
 12530 00001244 06                      		push	es
 12531 00001245 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12532 00001249 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12533                                  					; AL ==	Major, AH == Minor
 12534 0000124D 3C08                    		cmp	al, 8		; IOC_DC
 12535                                  					; See if major code is 8
 12536 0000124F 7513                    		jnz	short nosupport
 12537 00001251 0E                      		push	cs
 12538 00001252 07                      		pop	es
 12539 00001253 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12540                                  		; 10/12/2022
 12541 00001256 BF[370C]                		mov	di, IOC_DC_Table
 12542                                  		;mov	di, 0C60h	; IOC_DC_Table
 12543                                  					; at 2C7h:0C60h	= 70h:31D0h
 12544 00001259 86C4                    		xchg	al, ah		; Put minor code in AL
 12545 0000125B F2AE                    		repne scasb		; Scan for minor code in AL
 12546 0000125D 7505                    		jnz	short nosupport	; it was not found
 12547 0000125F B80001                  		mov	ax, 100h
 12548                                  		; 10/12/2022
 12549                                  		; (jump to ioctlsupexit is not required)
 12550                                  		;jmp	short $+2	; ioctlsupexit
 12551                                  					; Signal ioctl is supported
 12552                                  		;;jmp	short ioctlsupexit
 12553                                  ; ---------------------------------------------------------------------------
 12554                                  ioctlsupexit:				
 12555 00001262 07                      		pop	es
 12556                                  		; 10/12/2022
 12557                                  		; cf = 0
 12558                                  		;clc
 12559 00001263 C3                      		retn
 12560                                  ; ---------------------------------------------------------------------------
 12561                                  nosupport:				
 12562 00001264 07                      		pop	es
 12563 00001265 E96DEE                  		jmp	bc_cmderr
 12564                                  ; ---------------------------------------------------------------------------
 12565                                  
 12566                                  ; 16/10/2022
 12567                                  
 12568                                  ; ==========================================================================
 12569                                  ;	GetMediaSenseStatus
 12570                                  ; ==========================================================================
 12571                                  ;
 12572                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12573                                  ;	    diskette drive and whether the media is the default type
 12574                                  ;	    for that drive. (default type means the max size for that
 12575                                  ;	    drive)
 12576                                  ;
 12577                                  ; INPUT :   ES:DI -> BDS table
 12578                                  ; OUTPUT:   If carry clear
 12579                                  ;	    DS:BX -> Updated IOCtlPacket
 12580                                  ;
 12581                                  ;			 Special Function at offset 0:
 12582                                  ;				0	- Media detected is not default type
 12583                                  ;				1	- Media detected is default type
 12584                                  ;
 12585                                  ;			 Device Type at offset 1:
 12586                                  ;				2       - 720K 3.5" 80 tracks
 12587                                  ;				7	- 1.44M 3.5" 80 tracks
 12588                                  ;				9	- 2.88M 3.5" 80 tracks
 12589                                  ;
 12590                                  ; Error Codes returned in AX if carry set:
 12591                                  ;
 12592                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12593                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12594                                  ;				  the media is really unkown, any error
 12595                                  ;				  other than "media not present"
 12596                                  ; 
 12597                                  ; ==========================================================================
 12598                                  
 12599                                  		; 19/10/2022
 12600                                  SenseMediaType:				
 12601 00001268 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12602 0000126C C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12603                                  		; 10/10/2022
 12604                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12605 0000126F 31D2                    		xor	dx, dx
 12606 00001271 8917                    		mov	[bx], dx ; 0
 12607                                  		;
 12608 00001273 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12609                                  					; Get int 13h drive number from	BDS
 12610                                  		; 10/12/2022
 12611                                  		;xor	dh, dh		; DX = physical	drive number
 12612 00001277 B420                    		mov	ah, 20h		; Get Media Type function
 12613                                  					; If no	carry media type in AL
 12614 00001279 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12615 0000127B 7216                    		jb	short MediaSenseEr ; error code	in AH
 12616 0000127D FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12617                                  DetermineMediaType:			
 12618 0000127F FEC8                    		dec	al
 12619 00001281 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12620 00001283 740A                    		jz	short GotMediaType
 12621 00001285 0404                    		add	al, 4
 12622 00001287 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12623 00001289 7404                    		jz	short GotMediaType
 12624 0000128B 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12625 0000128D 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12626                                  GotMediaType:				
 12627 0000128F 884701                  		mov	[bx+1],	al	; Save the return value
 12628                                  		; 10/12/2022
 12629                                  		; cf = 0
 12630                                  		;clc			; Signal success
 12631 00001292 C3                      		retn
 12632                                  ; ---------------------------------------------------------------------------
 12633                                  
 12634                                  MediaSenseEr:				
 12635 00001293 80FC32                  		cmp	ah, 32h		; See if not default media error
 12636 00001296 74E7                    		jz	short DetermineMediaType ; Not really an error
 12637 00001298 B002                    		mov	al, 2		; Now assume drive not ready
 12638 0000129A 80FC31                  		cmp	ah, 31h		; See if media was present
 12639 0000129D 7402                    		jz	short SenseErrExit ; Return drive not ready
 12640                                  UnknownMediaType:			
 12641 0000129F B007                    		mov	al, 7		; Just don't know the media type
 12642                                  SenseErrExit:				
 12643 000012A1 B481                    		mov	ah, 81h		; Signal error return
 12644 000012A3 F9                      		stc
 12645 000012A4 C3                      		retn
 12646                                  
 12647                                  ; ---------------------------------------------------------------------------
 12648                                  		; 10/12/2022
 12649                                  		;db    0
 12650                                  ; ---------------------------------------------------------------------------
 12651                                  
 12652                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12653                                  
 12654                                  ;-----------------------------------------------------------------------------
 12655                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12656                                  ;-----------------------------------------------------------------------------
 12657                                  ; 16/03/2019 - Retro DOS v4.0
 12658                                  
 12659                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12660                                  ;	after booting. this allows testing and implementation of custom int_13
 12661                                  ;	handlers, without giving up ms-dos error recovery
 12662                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12663                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12664                                  ;	exit:	orig13	== address of new int_13 handler
 12665                                  ;		ds:dx	== old orig13 value
 12666                                  ;		es:bx	== old old13  value
 12667                                  ;
 12668                                  ; int 2f handler for external block drivers to communicate with the internal
 12669                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12670                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12671                                  ; dsk_entry, the entry point for all disk requests.
 12672                                  ;
 12673                                  ; on exit from this driver, we will return to the external driver
 12674                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12675                                  ; this scheme allows us to have a small external device driver, and makes
 12676                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12677                                  ; since we only need to make changes in one place (most of the time).
 12678                                  ;
 12679                                  ;   ax=800h - check for installed handler - reserved
 12680                                  ;   ax=801h - install the bds into the linked list
 12681                                  ;   ax=802h - dos request
 12682                                  ;   ax=803h - return bds table starting pointer in ds:di
 12683                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12684                                  ;	    problem. bds table is going to be used to get head/sector
 12685                                  ;	    informations without calling generic ioctl get device parm call.)
 12686                                  
 12687                                  ;BIOSSEGMENT equ 70h
 12688                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12689                                  
 12690                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12691                                  
 12692                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12693 000012A5 80FC13                  		cmp	ah, 13h
 12694 000012A8 7413                    		jz	short int2f_replace_int13
 12695 000012AA 80FC08                  		cmp	ah, 8
 12696 000012AD 7431                    		jz	short mine
 12697                                  
 12698                                  ; Check for WIN386 startup and return the BIOS instance data
 12699                                  
 12700 000012AF 80FC16                  		cmp	ah, 16h		; MultWin386
 12701 000012B2 746C                    		jz	short win386call
 12702 000012B4 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12703 000012B7 7503                    		jnz	short i2f_handler_iret
 12704 000012B9 E99700                  		jmp	handle_multmult
 12705                                  ; ---------------------------------------------------------------------------
 12706                                  
 12707                                  i2f_handler_iret:			
 12708 000012BC CF                      		iret
 12709                                  ; ---------------------------------------------------------------------------
 12710                                  
 12711                                  int2f_replace_int13:			
 12712 000012BD 50                      		push	ax	; free up a register for caller's ds
 12713 000012BE 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12714                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12715                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12716                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12717 000012C0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12718                                  		; 19/10/2022
 12719                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12720                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12721                                  		;push	word ptr ds:Old13	; return them to caller
 12722                                  		;push	word ptr ds:Old13+2
 12723                                  		
 12724                                  		; 02/09/2023 (PCDOS 7.1)
 12725                                  		;push	word [Orig13]
 12726 000012C5 FF36[B600]              		push	word [Orig13+2]
 12727                                  		;push	word [Old13]
 12728 000012C9 FF36[0801]              		push	word [Old13+2]
 12729                                  
 12730                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12731                                  		;mov	word ptr ds:Orig13+2, ax
 12732                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12733                                  		;mov	word ptr ds:Old13+2, es
 12734                                  		
 12735                                  		;mov	[Orig13], dx
 12736                                  		; 02/09/2023
 12737 000012CD 8716[B400]              		xchg	dx, [Orig13]
 12738 000012D1 A3[B600]                		mov	[Orig13+2], ax
 12739                                  		;mov	[Old13], bx
 12740                                  		; 02/09/2023
 12741 000012D4 871E[0601]              		xchg	bx, [Old13]
 12742 000012D8 8C06[0801]              		mov	[Old13+2], es
 12743                                  
 12744 000012DC 07                      		pop	es			; es:bx := old old13 vector
 12745                                  		; 02/09/2023
 12746                                  		;pop	bx
 12747 000012DD 1F                      		pop	ds			; ds:dx := old orig13 vector
 12748                                  		;pop	dx ; 02/09/2023
 12749 000012DE 58                      		pop	ax
 12750                                  i2f_iret:
 12751 000012DF CF                      		iret
 12752                                  ; ---------------------------------------------------------------------------
 12753                                  
 12754                                  mine:					
 12755 000012E0 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12756 000012E2 73FB                    		jnb	short i2f_iret
 12757 000012E4 08C0                    		or	al, al			; a get installed state request?
 12758 000012E6 7503                    		jnz	short disp_func
 12759 000012E8 B0FF                    		mov	al, 0FFh
 12760                                  		;jmp	short i2f_iret
 12761                                  		; 02/09/2023
 12762 000012EA CF                      		iret
 12763                                  ; ---------------------------------------------------------------------------
 12764                                  
 12765                                  disp_func:				
 12766 000012EB 3C01                    		cmp	al, 1			; request for installing bds?
 12767 000012ED 7418                    		jz	short do_subfun_01
 12768 000012EF 3C03                    		cmp	al, 3			; get bds vector?
 12769 000012F1 7423                    		jz	short do_get_bds_vector
 12770                                  
 12771                                  ; set up pointer to request packet
 12772                                  
 12773 000012F3 1E                      		push	ds
 12774 000012F4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12775                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12776                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12777                                  		; 19/10/2022
 12778                                  		;mov	word ptr ds:ptrsav, bx
 12779                                  		;mov	word ptr ds:ptrsav+2, es
 12780 000012F9 891E[1200]              		mov	[ptrsav], bx
 12781 000012FD 8C06[1400]              		mov	[ptrsav+2], es
 12782 00001301 1F                      		pop	ds
 12783                                  		;jmp	far ptr	i2f_dskentry
 12784                                  		; 17/10/2022
 12785                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12786 00001302 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12787                                  					; NOTE: jump to a FAR function, not an
 12788                                  					;  IRET type function. Callers of
 12789                                  					;  this int2f subfunction will have
 12790                                  					;  to be careful to do a popf
 12791                                  
 12792                                  ; ---------------------------------------------------------------------------
 12793                                  
 12794                                  do_subfun_01:
 12795 00001307 06                      		push	es
 12796 00001308 1E                      		push	ds
 12797 00001309 1E                      		push	ds
 12798 0000130A 07                      		pop	es
 12799                                  		; 17/10/2022
 12800 0000130B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12801                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12802                                  					; point	ds: -> Bios_Data
 12803 00001310 E8BC03                  		call	install_bds
 12804 00001313 1F                      		pop	ds
 12805 00001314 07                      		pop	es
 12806                                  		;jmp	short i2f_iret
 12807                                  		; 02/09/2023
 12808 00001315 CF                      		iret
 12809                                  ; ---------------------------------------------------------------------------
 12810                                  
 12811                                  do_get_bds_vector:
 12812                                  		; 17/10/2022
 12813 00001316 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12814                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12815 0000131B C53E[1901]              		lds	di, [start_bds]
 12816                                  		;lds	di, ds:start_bds
 12817                                  ;ii2f_iret:	; 10/12/2022
 12818                                  		;jmp	short i2f_iret
 12819                                  		; 02/09/2023
 12820 0000131F CF                      		iret
 12821                                  ; ---------------------------------------------------------------------------
 12822                                  
 12823                                  ; 17/10/2022
 12824                                  ; 16/10/2022
 12825                                  
 12826                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12827                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12828                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12829                                  
 12830                                  win386call:				
 12831 00001320 1E                      		push	ds
 12832 00001321 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12833                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12834                                  					; at 2C7h:30h =	70h:25A0h
 12835 00001326 3C05                    		cmp	al, 5		; Win386_Init
 12836                                  					; is it	win386 initializing?
 12837 00001328 7410                    		jz	short Win386Init
 12838 0000132A 3C06                    		cmp	al, 6		; Win386_Exit
 12839                                  					; is it	win386 exiting?
 12840 0000132C 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12841                                  		; 12/12/2022
 12842 0000132E F6C201                  		test	dl, 1
 12843                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12844 00001331 751E                    		jnz	short win_iret	; if not win386, then continue
 12845                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12846 00001333 8026[CE08]00            		and	byte [IsWin386], 0 
 12847 00001338 EB17                    		jmp	short win_iret
 12848                                  ; ---------------------------------------------------------------------------
 12849                                  
 12850                                  Win386Init:	
 12851                                  		; 12/12/2022
 12852 0000133A F6C201                  		test	dl, 1			
 12853                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12854 0000133D 7512                    		jnz	short win_iret	; if not win386, then continue
 12855                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12856 0000133F 800E[CE08]01            		or	byte [IsWin386], 1
 12857                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12858                                  		;mov	word ptr ds:SI_Next+2, es
 12859 00001344 891E[9C08]              		mov	[SI_Next], bx
 12860 00001348 8C06[9E08]              		mov	[SI_Next+2], es
 12861                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12862 0000134C BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12863 0000134F 1E                      		push	ds
 12864 00001350 07                      		pop	es
 12865                                  win_iret:				
 12866 00001351 1F                      		pop	ds
 12867                                  ii2f_iret:	; 10/12/2022
 12868                                  		;jmp	short i2f_iret	; return back up the chain
 12869                                  		; 02/09/2023
 12870 00001352 CF                      		iret
 12871                                  ; ---------------------------------------------------------------------------
 12872                                  
 12873                                  handle_multmult:			
 12874 00001353 3C01                    		cmp	al, 1
 12875 00001355 7514                    		jnz	short try_2
 12876 00001357 1E                      		push	ds
 12877 00001358 E84500                  		call	HMAPtr		; get offset of free HMA
 12878                                  		; 10/12/2022
 12879                                  		;xor	bx, bx
 12880                                  		;dec	bx
 12881 0000135B BBFFFF                  		mov	bx, 0FFFFh
 12882 0000135E 8EC3                    		mov	es, bx		; seg of HMA
 12883 00001360 89FB                    		mov	bx, di
 12884 00001362 F7D3                    		not	bx
 12885 00001364 09DB                    		or	bx, bx
 12886 00001366 7401                    		jz	short try_1
 12887 00001368 43                      		inc	bx
 12888                                  try_1:
 12889 00001369 1F                      		pop	ds
 12890                                  		;jmp	short ii2f_iret
 12891                                  		; 02/09/2023
 12892 0000136A CF                      		iret
 12893                                  ; ---------------------------------------------------------------------------
 12894                                  
 12895                                  try_2:					
 12896 0000136B 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12897 0000136D 7530                    		jnz	short try_3
 12898 0000136F 1E                      		push	ds
 12899                                  		; 10/12/2022
 12900                                  		;xor	di, di
 12901                                  		;dec	di
 12902 00001370 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12903 00001373 8EC7                    		mov	es, di
 12904 00001375 E82800                  		call	HMAPtr		; get offset of free HMA
 12905 00001378 83FFFF                  		cmp	di, 0FFFFh
 12906 0000137B 7421                    		jz	short InsuffHMA
 12907 0000137D F7DF                    		neg	di		; free space in HMA
 12908 0000137F 39FB                    		cmp	bx, di
 12909 00001381 7605                    		jbe	short try_4
 12910                                  		; 10/12/2022
 12911                                  		;sub	di, di
 12912                                  		;dec	di
 12913 00001383 BFFFFF                  		mov	di, 0FFFFh
 12914                                  		;jmp	short InsuffHMA
 12915                                  		; 02/09/2023
 12916 00001386 1F                      		pop	ds
 12917 00001387 CF                      		iret
 12918                                  ; ---------------------------------------------------------------------------
 12919                                  
 12920                                  try_4:					
 12921                                  		;mov	di, ds:FreeHMAPtr
 12922 00001388 8B3E[F408]              		mov	di, [FreeHMAPtr]
 12923 0000138C 83C30F                  		add	bx, 15
 12924                                  		;and	bx, 0FFF0h
 12925                                  		; 10/12/2022
 12926 0000138F 80E3F0                  		and	bl, 0F0h
 12927                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12928 00001392 011E[F408]              		add	[FreeHMAPtr], bx
 12929 00001396 7506                    		jnz	short InsuffHMA
 12930 00001398 C706[F408]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12931                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12932                                  					; no more HMA if we have wrapped
 12933                                  InsuffHMA:
 12934 0000139E 1F                      		pop	ds
 12935                                  		; 10/12/2022
 12936                                  try_3:		
 12937                                  		;jmp	short ii2f_iret
 12938                                  		; 02/09/2023
 12939 0000139F CF                      		iret
 12940                                  ; ---------------------------------------------------------------------------
 12941                                  
 12942                                  		; 10/12/2022
 12943                                  ;try_3:					
 12944                                  		;jmp	ii2f_iret
 12945                                  
 12946                                  ; =============== S U B	R O U T	I N E =======================================
 12947                                  
 12948                                  ; 16/10/2022
 12949                                  
 12950                                  ;--------------------------------------------------------------------------
 12951                                  ;
 12952                                  ; procedure : HMAPtr
 12953                                  ;
 12954                                  ;		Gets the offset of the free HMA area ( with respect to
 12955                                  ;							seg ffff )
 12956                                  ;		If DOS has not moved high, tries to move DOS high.
 12957                                  ;		In the course of doing this, it will allocate all the HMA
 12958                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12959                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12960                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12961                                  ;
 12962                                  ;	RETURNS : offset of free HMA in DI
 12963                                  ;		  BIOS_DATA, seg in DS
 12964                                  ;
 12965                                  ;--------------------------------------------------------------------------
 12966                                  
 12967                                  		; 17/10/2022
 12968                                  HMAPtr:
 12969 000013A0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12970                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12971 000013A5 8B3E[F408]              		mov	di, [FreeHMAPtr]
 12972                                  		;mov	di, ds:FreeHMAPtr
 12973 000013A9 83FFFF                  		cmp	di, 0FFFFh
 12974 000013AC 750F                    		jnz	short HMAPtr_retn
 12975 000013AE 803E[FA08]00            		cmp	byte [SysinitPresent], 0
 12976                                  		;cmp	ds:SysinitPresent, 0
 12977 000013B3 7408                    		jz	short HMAPtr_retn
 12978 000013B5 FF1E[F608]              		call	far [MoveDOSIntoHMA]
 12979                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12980 000013B9 8B3E[F408]              		mov	di, [FreeHMAPtr]
 12981                                  		;mov	di, ds:FreeHMAPtr
 12982                                  HMAPtr_retn:				
 12983 000013BD C3                      		retn
 12984                                  
 12985                                  ; =============== S U B	R O U T	I N E =======================================
 12986                                  
 12987                                  ; 16/10/2022
 12988                                  
 12989                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12990                                  ; but go ahead and update direction flag, si, & di
 12991                                  
 12992                                  move_sector:
 12993                                  
 12994                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12995                                  ; any segment to be a fault. Theoretically, this could be handled
 12996                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12997                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12998                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12999                                  ; also handles the fault incorrectly in their ROM BIOS for real
 13000                                  ; mode. Their fault handler was only designed to deal with one
 13001                                  ; special case which occurred in a magazine benchmark, but didn't
 13002                                  ; handle the general case worth beans.
 13003                                  ;
 13004                                  ; Simply changing this code to do a byte loop would work okay but
 13005                                  ; would involve a general case performance hit. Therefore, we'll
 13006                                  ; check for either source or destination offsets being within one
 13007                                  ; sector of the end of their segments and only in that case fall
 13008                                  ; back to a byte move.
 13009                                  
 13010 000013BE FC                      		cld
 13011 000013BF 51                      		push	cx
 13012 000013C0 B90001                  		mov	cx, 256
 13013 000013C3 81FE00FE                		cmp	si, 0FE00h
 13014 000013C7 770A                    		ja	short movsec_bytes
 13015 000013C9 81FF00FE                		cmp	di, 0FE00h
 13016 000013CD 7704                    		ja	short movsec_bytes
 13017 000013CF F3A5                    		rep movsw
 13018 000013D1 59                      		pop	cx
 13019 000013D2 C3                      		retn
 13020                                  ; ---------------------------------------------------------------------------
 13021                                  
 13022                                  movsec_bytes:				
 13023 000013D3 D1E1                    		shl	cx, 1
 13024 000013D5 F3A4                    		rep movsb
 13025 000013D7 59                      		pop	cx
 13026 000013D8 C3                      		retn
 13027                                  
 13028                                  ; =============== S U B	R O U T	I N E =======================================
 13029                                  
 13030                                  ; 16/10/2022
 13031                                  
 13032                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 13033                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 13034                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 13035                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 13036                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 13037                                  ; but we break down a request when we get an ecc or dma error into several
 13038                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 13039                                  ; number of sectors on a track on the medium, and the request would fail.
 13040                                  ;
 13041                                  ; input conditions:
 13042                                  ;	all registers set up for an int 13 request.
 13043                                  ;
 13044                                  ; output:
 13045                                  ;	dh - contains starting head number for request
 13046                                  ;	cx - contains starting sector and cylinder numbers
 13047                                  ;	(the above may or may not have been changed, and are 0-based)
 13048                                  ;	all other registers preserved.
 13049                                  
 13050                                  check_wrap:	
 13051 000013D9 50                      		push	ax
 13052 000013DA 53                      		push	bx
 13053 000013DB 06                      		push	es
 13054 000013DC 57                      		push	di
 13055 000013DD E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 13056 000013E0 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 13057                                  		; 12/12/2022
 13058 000013E2 26F6452301              		test	byte [es:di+23h], 1
 13059                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13060 000013E7 7457                    		jz	short no_wrap	; no wrapping for removable media
 13061 000013E9 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13062 000013ED 89C8                    		mov	ax, cx
 13063 000013EF 83E03F                  		and	ax, 3Fh		; extract sector number
 13064 000013F2 39D8                    		cmp	ax, bx		; are we going to wrap?
 13065 000013F4 764A                    		jbe	short no_wrap
 13066 000013F6 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13067                                  
 13068                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13069                                  ; last sector on that track.
 13070                                  
 13071 000013F8 08E4                    		or	ah, ah
 13072 000013FA 7503                    		jnz	short not_on_bound
 13073                                  		; 18/12/2022
 13074 000013FC 48                      		dec	ax ; *
 13075 000013FD 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13076                                  					; if on	boundary
 13077                                  		;dec	al ; *		; also decrement # of head wraps
 13078                                  not_on_bound:				
 13079 000013FF 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13080 00001402 08E1                    		or	cl, ah		; or in	new sector #
 13081 00001404 30E4                    		xor	ah, ah		; ax = # of head wraps
 13082 00001406 40                      		inc	ax
 13083 00001407 00F0                    		add	al, dh		; add in starting head #
 13084 00001409 80D400                  		adc	ah, 0		; catch	any carry
 13085                                  		; 02/09/2023
 13086 0000140C 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13087 00001410 39D8                    		cmp	ax, bx
 13088                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13089                                  					; are we going to wrap around a	head?
 13090 00001412 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13091 00001414 52                      		push	dx		; preserve drive number and head number
 13092 00001415 31D2                    		xor	dx, dx
 13093                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13094 00001417 F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13095                                  
 13096                                  ; careful here! if new head # is 0, then we are on the last head.
 13097                                  
 13098 00001419 09D2                    		or	dx, dx
 13099 0000141B 7507                    		jnz	short no_head_bound
 13100 0000141D 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13101                                  
 13102                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13103                                  
 13104 0000141F 09C0                    		or	ax, ax
 13105 00001421 7401                    		jz	short no_head_bound
 13106 00001423 48                      		dec	ax		; reduce number	of cylinder wraps
 13107                                  no_head_bound:				
 13108 00001424 88D7                    		mov	bh, dl		; bh has new head number
 13109 00001426 5A                      		pop	dx		; restore drive number and head number
 13110 00001427 FECF                    		dec	bh		; get it 0-based
 13111 00001429 88FE                    		mov	dh, bh		; set up new head number in dh
 13112 0000142B 88CF                    		mov	bh, cl
 13113 0000142D 80E73F                  		and	bh, 3Fh		; preserve sector number
 13114 00001430 B306                    		mov	bl, 6
 13115 00001432 86CB                    		xchg	cl, bl
 13116 00001434 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13117 00001436 00C5                    		add	ch, al		; add in cylinder wrap
 13118 00001438 10E3                    		adc	bl, ah		; add in high byte
 13119 0000143A D2E3                    		shl	bl, cl		; move up to ms	end
 13120 0000143C 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13121 0000143E 08F9                    		or	cl, bh		; or in	sector number
 13122                                  no_wrap:				
 13123 00001440 F8                      		clc
 13124 00001441 5F                      		pop	di
 13125 00001442 07                      		pop	es
 13126 00001443 5B                      		pop	bx
 13127 00001444 58                      		pop	ax
 13128 00001445 C3                      		retn
 13129                                  ; ---------------------------------------------------------------------------
 13130                                  
 13131                                  no_wrap_head:				
 13132 00001446 88C6                    		mov	dh, al		; do not lose new head number
 13133 00001448 FECE                    		dec	dh		; get it 0-based
 13134 0000144A EBF4                    		jmp	short no_wrap
 13135                                  
 13136                                  ; =============== S U B	R O U T	I N E =======================================
 13137                                  
 13138                                  ; 16/10/2022
 13139                                  
 13140                                  ; this is a special version of the bds lookup code which is
 13141                                  ; based on physical drives rather than the usual logical drives
 13142                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13143                                  ; otherwise carry is clear
 13144                                  ;
 13145                                  ; guaranteed to trash no registers except es:di
 13146                                  
 13147                                  		; 19/10/2022
 13148                                  find_bds:	
 13149 0000144C C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13150                                  fbds_1:					
 13151 00001450 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13152 00001454 7409                    		jz	short fdbs_2
 13153 00001456 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13154                                  					; go to next bds
 13155 00001459 83FFFF                  		cmp	di, 0FFFFh
 13156 0000145C 75F2                    		jnz	short fbds_1
 13157 0000145E F9                      		stc
 13158                                  fdbs_2:					
 13159 0000145F C3                      		retn
 13160                                  
 13161                                  ; =============== S U B	R O U T	I N E =======================================
 13162                                  
 13163                                  ; 16/10/2022
 13164                                  		; 17/10/2022
 13165                                  doint:
 13166                                  		; 10/12/2022
 13167 00001460 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13168                                  					; get physical drive number
 13169                                  		; 19/10/2022 - Temporary !
 13170                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13171                                  		
 13172 00001463 30E4                    		xor	ah, ah
 13173 00001465 08C0                    		or	al, al
 13174 00001467 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13175                                  		; 10/12/2022
 13176 00001469 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13177                                  					; get request code
 13178                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13179 0000146C FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13180                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13181 0000146F 9D                      		popf
 13182                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13183                                  		; 17/10/2022
 13184 00001470 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13185                                  		;;call	call_orig13	; call far 70h:797h
 13186                                  					; call far KERNEL_SEGMENT:call_orig13
 13187 00001475 9C                      		pushf
 13188                                  		; 10/12/2022
 13189 00001476 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13190                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13191                                  dointdone:				
 13192 00001479 C3                      		retn
 13193                                  
 13194                                  ;----------------------------------------------------------------------------
 13195                                  
 13196                                  ; 16/10/2022
 13197                                  
 13198                                  ; this is the true int 13 handler. we parse the request to see if there is
 13199                                  ; a dma violation. if so, depending on the function, we:
 13200                                  ;   read/write break the request into three pieces and move the middle one
 13201                                  ;	       into our internal buffer.
 13202                                  ;
 13203                                  ;   format     copy the format table into the buffer
 13204                                  ;   verify     point the transfer address into the buffer
 13205                                  ;
 13206                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13207                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13208                                  ; the offending sector into the buffer below and do the i/o from there.
 13209                                  
 13210                                  ;struc INT13FRAME
 13211                                  ;.oldbp: resw
 13212                                  ;.oldax: resw 
 13213                                  ;.oldbx: resw
 13214                                  ;.oldcx: resw
 13215                                  ;.olddx: resw
 13216                                  ;.oldds: resw	; now we save caller's ds, too
 13217                                  ;.olddd: resd
 13218                                  ;.oldf:	resw
 13219                                  ;end struc
 13220                                  
 13221                                  ;----------------------------------------------------------------------------
 13222                                  
 13223                                  ;   entry conditions:
 13224                                  ;	ah = function
 13225                                  ;	al = number of sectors
 13226                                  ;	es:bx = dma address
 13227                                  ;	cx = packed track and sector
 13228                                  ;	dx = head and drive
 13229                                  ;   output conditions:
 13230                                  ;	no dma violation.
 13231                                  
 13232                                  ;	use extreme caution when working with this code. In general,
 13233                                  ;	  all registers are hot at all times.
 13234                                  ;
 13235                                  ;	question:  does this code handle cases where dma errors
 13236                                  ;	  occur during ecc retries, and where ecc errors occur during
 13237                                  ;	  dma breakdowns???? Hmmmmm.
 13238                                  
 13239                                  ;----------------------------------------------------------------------------
 13240                                  
 13241                                  ; ---------------------------------------------------------------------------
 13242                                  
 13243 0000147A 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13244                                  
 13245                                  ; 17/10/2022
 13246                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13247                                  ; 09/12/2022
 13248                                  DTYPEARRAY equ dtype_array
 13249                                  
 13250                                  ; ---------------------------------------------------------------------------
 13251                                  
 13252                                  ; stick some special stuff out of mainline
 13253                                  
 13254                                  ; we know we're doing a format command. if we have changeline
 13255                                  ; support, then flag some special changed stuff and set changed
 13256                                  ; by format bit for all logical drives using this physical drive
 13257                                  
 13258                                  format_special_stuff:			
 13259 0000147E 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 13260 00001483 7459                    		jz	short format_special_stuff_done ; brif not
 13261 00001485 53                      		push	bx
 13262 00001486 BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13263 00001489 E83004                  		call	set_changed_dl	; indicate that media changed by format
 13264 0000148C 5B                      		pop	bx
 13265 0000148D EB4F                    		jmp	short format_special_stuff_done
 13266                                  ; ---------------------------------------------------------------------------
 13267                                  
 13268                                  ; 16/10/2022
 13269                                  
 13270                                  ; we know we've got ec35's on the system. Now see if we're doing
 13271                                  ; a floppy. If so, create a mask and see if this particular
 13272                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13273                                  
 13274                                  		; 19/10/2022
 13275                                  ec35_special_stuff:			
 13276 0000148F 84D2                    		test	dl, dl		; floppy or hard disk?
 13277 00001491 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13278 00001493 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13279 00001494 51                      		push	cx
 13280 00001495 88D1                    		mov	cl, dl		; turn drive number into bit map
 13281 00001497 B001                    		mov	al, 1		; assume drive 0
 13282 00001499 D2E0                    		shl	al, cl		; shift	over correct number of times
 13283 0000149B 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13284 0000149F 59                      		pop	cx
 13285 000014A0 58                      		pop	ax
 13286 000014A1 7442                    		jz	short ec35_special_stuff_done
 13287                                  					; done if this floppy is not an	ec35
 13288 000014A3 53                      		push	bx		; free up a far	pointer	(es:bx)
 13289 000014A4 06                      		push	es
 13290                                  		; 17/10/2022
 13291 000014A5 2EC41E[7A14]            		les	bx, [cs:DTYPEARRAY]
 13292                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13293                                  					; 0070h:3A65h =	2C7h:14F5h
 13294 000014AA 00D3                    		add	bl, dl
 13295 000014AC 80D700                  		adc	bh, 0		; find entry for this drive
 13296 000014AF 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13297                                  					; (360k	disk in	360k drive,
 13298                                  					; no double-stepping, 250 kbs transfer rate)
 13299 000014B3 07                      		pop	es
 13300 000014B4 5B                      		pop	bx
 13301 000014B5 EB2E                    		jmp	short ec35_special_stuff_done
 13302                                  ; ---------------------------------------------------------------------------
 13303                                  
 13304                                  ; 16/10/2022
 13305                                  
 13306                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13307                                  ; this function does not reset the common buses after the execution.
 13308                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13309                                  ; will issue ah=1 (read status) call to reset the buses.
 13310                                  
 13311                                  ps2_special_stuff:			
 13312 000014B7 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13313                                  					; read driver parm ?
 13314 000014BC 7407                    		jz	short ps2_30_problem
 13315 000014BE 803E[1E00]15            		cmp	byte [prevoper], 15h
 13316                                  					; apparently function 15h fails, too
 13317 000014C3 752D                    		jnz	short ps2_special_stuff_done
 13318                                  ps2_30_problem:				
 13319 000014C5 50                      		push	ax
 13320 000014C6 B401                    		mov	ah, 1
 13321                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13322                                  		; 17/10/2022
 13323 000014C8 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13324                                  		;call	call_orig13	; call far 70:797h
 13325                                  					; call far KERNEL_SEGMENT:call_orig13
 13326 000014CD 58                      		pop	ax
 13327 000014CE EB22                    		jmp	short ps2_special_stuff_done
 13328                                  ; ---------------------------------------------------------------------------
 13329                                  
 13330                                  ; 17/10/2022
 13331                                  ; 16/10/2022
 13332                                  
 13333                                  ; here is the actual int13 handler
 13334                                  
 13335                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13336                                  
 13337                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13338                                  ; vectoring up here from Bios_Data
 13339                                  
 13340                                  		; 19/10/2022
 13341 000014D0 1E                      		push	ds		; save caller's ds register first thing
 13342                                  		;;mov	ds, word [cs:0030h]
 13343                                  					; and set up our own ds -> Bios_Data
 13344 000014D1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13345                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13346                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13347                                  
 13348                                  ; let the operation proceed. if there is a dma violation, then we do things
 13349                                  
 13350 000014D6 A3[1E00]                		mov	[prevoper], ax	; save request
 13351 000014D9 80FC05                  		cmp	ah, 5		; romformat
 13352 000014DC 74A0                    		jz	short format_special_stuff
 13353                                  					; go do special stuff for format
 13354                                   format_special_stuff_done:		
 13355 000014DE 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13356 000014E3 75AA                    		jnz	short ec35_special_stuff
 13357                                  					; go handle it out of line if so
 13358                                  ec35_special_stuff_done:
 13359                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13360 000014E5 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13361                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13362                                  		
 13363 000014EA 9C                      		pushf			; save result flags
 13364                                  		
 13365 000014EB 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13366                                  					; mdl_ps2_30
 13367 000014F0 74C5                    		jz	short ps2_special_stuff
 13368                                  					; exit mainline to address special
 13369                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13370 000014F2 9D                      		popf
 13371 000014F3 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13372                                  ret_from_i13:				
 13373 000014F5 1F                      		pop	ds
 13374 000014F6 CA0200                  		retf	2		; restore ds &	iret w/flags
 13375                                  ; ---------------------------------------------------------------------------
 13376                                  
 13377                                  ; most of our code exits through here. If carry isn't set, then
 13378                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13379                                  ; a changeline error.
 13380                                  
 13381                                  i13ret_ck_chglinerr:			
 13382 000014F9 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13383                                  i13_ret_error:				
 13384 000014FB 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13385 000014FE 7513                    		jnz	short int13b	; skip if wrong	error
 13386 00001500 08D2                    		or	dl, dl		; is this for the hard disk?
 13387 00001502 780F                    		js	short int13b	; yes, ignore
 13388 00001504 803E[7700]00            		cmp	byte [fhave96], 0
 13389 00001509 7408                    		jz	short int13b	; just in case ROM returned this
 13390                                  					; error	even though it told us it
 13391                                  					; never	would
 13392 0000150B 53                      		push	bx
 13393 0000150C BB4000                  		mov	bx, 40h		; fchanged
 13394 0000150F E8AA03                  		call	set_changed_dl
 13395 00001512 5B                      		pop	bx
 13396                                  int13b:					
 13397 00001513 F9                      		stc			; now return the error
 13398 00001514 EBDF                    		jmp	short ret_from_i13
 13399                                  ; ---------------------------------------------------------------------------
 13400                                  
 13401                                  ; some kind of error occurred. see if it is dma violation
 13402                                  
 13403                                  goterr13:				
 13404 00001516 80FC09                  		cmp	ah, 9		; dma error?
 13405 00001519 747C                    		jz	short gotdmaerr
 13406                                  goterr13_xxxx:				
 13407 0000151B 80FC11                  		cmp	ah, 11h		; ecc error?
 13408 0000151E 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13409 00001520 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13410 00001525 74D4                    		jz	short i13_ret_error
 13411                                  
 13412 00001527 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13413                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13414                                  					; (2 = romread)
 13415                                  					; ECC correction only applies to reads
 13416 0000152C 75CD                    		jnz	short i13_ret_error
 13417                                  
 13418 0000152E 30E4                    		xor	ah, ah
 13419                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13420                                  		; 17/10/2022
 13421 00001530 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13422                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13423                                  					; call far 70:797h
 13424 00001535 A1[1E00]                		mov	ax, [prevoper]
 13425 00001538 30E4                    		xor	ah, ah		; return code =	no error
 13426 0000153A 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13427 0000153C 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13428 0000153E 53                      		push	bx
 13429 0000153F 51                      		push	cx
 13430 00001540 52                      		push	dx
 13431 00001541 A2[2000]                		mov	[number_of_sec], al
 13432                                  loop_ecc:				
 13433 00001544 B80102                  		mov	ax, 201h	; read one sector
 13434                                  
 13435                                  ; we do reads one sector at a time. this ensures that we will eventually
 13436                                  ; finish the request since ecc errors on one sector do read in that sector.
 13437                                  ;
 13438                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13439                                  ; that attempt to read more sectors than are available on a particular
 13440                                  ; track.
 13441                                  ;
 13442                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13443                                  ; this request.
 13444                                  ;
 13445                                  ; at this point, all registers are set up for the call to orig13, except
 13446                                  ; that there may be a starting sector number that is bigger than the number
 13447                                  ; of sectors on a track.
 13448                                  ;
 13449 00001547 E88FFE                  		call	check_wrap	; get correct parameters for int 13
 13450                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13451                                  		; 17/10/2022
 13452 0000154A 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13453                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13454 0000154F 730C                    		jnb	short ok11_op
 13455 00001551 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13456 00001554 741B                    		jz	short handle_dma_during_ecc
 13457 00001556 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13458 00001559 7510                    		jnz	short ok11_exit_err
 13459                                  		; 10/12/2022
 13460                                  		; xor ax ax -> ah = 0
 13461                                  		;mov	ah, 0		; ecc error. reset the system again.
 13462 0000155B 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13463                                  					; was the last sector, no error	code
 13464                                  					; will be returned for the corrected
 13465                                  					; read.	(clear carry too.)
 13466                                  ok11_op:				
 13467 0000155D FE0E[2000]              		dec	byte [number_of_sec]
 13468 00001561 7409                    		jz	short ok11_exit	; all done?
 13469 00001563 FEC1                    		inc	cl		; advance sector number
 13470                                  					; add 200h to address
 13471 00001565 FEC7                    		inc	bh
 13472 00001567 FEC7                    		inc	bh
 13473 00001569 EBD9                    		jmp	short loop_ecc
 13474                                  ; ---------------------------------------------------------------------------
 13475                                  
 13476                                  ; locate error returns centrally
 13477                                  
 13478                                  ok11_exit_err:				
 13479 0000156B F9                      		stc			; set carry bit again.
 13480                                  ok11_exit:				
 13481 0000156C 5A                      		pop	dx
 13482 0000156D 59                      		pop	cx
 13483 0000156E 5B                      		pop	bx
 13484 0000156F EB88                    		jmp	short i13ret_ck_chglinerr
 13485                                  ; ---------------------------------------------------------------------------
 13486                                  
 13487                                  ; do the single sector read again, this time into our temporary
 13488                                  ; buffer, which is guaranteed not to have a DMA error, then
 13489                                  ; move the data to its proper location and proceed
 13490                                  
 13491                                  handle_dma_during_ecc:			
 13492 00001571 06                      		push	es
 13493 00001572 53                      		push	bx
 13494 00001573 BB[4E01]                		mov	bx, disksector
 13495 00001576 1E                      		push	ds
 13496 00001577 07                      		pop	es		; point es:bx to buffer
 13497 00001578 B80102                  		mov	ax, 201h	; read one sector
 13498                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13499                                  		; 17/10/2022
 13500 0000157B 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13501                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13502 00001580 5B                      		pop	bx
 13503 00001581 07                      		pop	es
 13504 00001582 7305                    		jnb	short handle_dma_during_ecc_noerr
 13505 00001584 80FC11                  		cmp	ah, 11h
 13506 00001587 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13507                                  
 13508                                  ; now we're kosher. Copy the data to where it belongs and resume
 13509                                  ; the ECC looping code.
 13510                                  
 13511                                  handle_dma_during_ecc_noerr:		
 13512 00001589 56                      		push	si
 13513 0000158A 57                      		push	di
 13514 0000158B 89DF                    		mov	di, bx
 13515 0000158D BE[4E01]                		mov	si, disksector
 13516 00001590 E82BFE                  		call	move_sector
 13517 00001593 5F                      		pop	di
 13518 00001594 5E                      		pop	si
 13519 00001595 EBC6                    		jmp	short ok11_op
 13520                                  ; ---------------------------------------------------------------------------
 13521                                  
 13522                                  ; we truly have a dma violation. restore register ax and retry the
 13523                                  ; operation as best we can.
 13524                                  
 13525                                  gotdmaerr:				
 13526 00001597 A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13527 0000159A FB                      		sti
 13528 0000159B 80FC02                  		cmp	ah, 2		; romread
 13529 0000159E 723B                    		jb	short i13_done_dmaerr
 13530                                  					; just pass dma error thru for
 13531                                  					; functions we don't handle
 13532 000015A0 80FC04                  		cmp	ah, 4		; romverify
 13533 000015A3 743C                    		jz	short intverify
 13534 000015A5 80FC05                  		cmp	ah, 5		; romformat
 13535 000015A8 7448                    		jz	short intformat
 13536 000015AA 772F                    		ja	short i13_done_dmaerr
 13537                                  
 13538                                  ; we are doing a read/write call. check for dma problems
 13539                                  
 13540                                  ;	******** set up stack frame here!!! ********
 13541                                  
 13542 000015AC 52                      		push	dx
 13543 000015AD 51                      		push	cx
 13544 000015AE 53                      		push	bx
 13545 000015AF 50                      		push	ax
 13546 000015B0 55                      		push	bp
 13547 000015B1 89E5                    		mov	bp, sp
 13548 000015B3 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13549 000015B5 D1E2                    		shl	dx, 1
 13550 000015B7 D1E2                    		shl	dx, 1
 13551 000015B9 D1E2                    		shl	dx, 1
 13552 000015BB D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13553 000015BD 01DA                    		add	dx, bx		; combine with offset
 13554 000015BF 81C2FF01                		add	dx, 511		; simulate a transfer
 13555                                  
 13556                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13557                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13558                                  
 13559 000015C3 7303                    		jnb	short no_skip_first
 13560 000015C5 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13561                                  ; ---------------------------------------------------------------------------
 13562                                  
 13563                                  no_skip_first:				
 13564 000015C8 D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13565 000015CA B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13566 000015CC 28F4                    		sub	ah, dh
 13567                                  
 13568                                  ; ah is now the number of sectors that we can successfully write in this
 13569                                  ; segment. if this number is above or equal to the requested number, then we
 13570                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13571                                  ;
 13572                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13573                                  ; first place is because we got a dma error. so it's impossible
 13574                                  ; for the whole block to fit, unless the dma error was returned
 13575                                  ; in error.
 13576                                  
 13577 000015CE 38C4                    		cmp	ah, al		; can we fit it	in?
 13578 000015D0 7236                    		jb	short doblock	; no, perform blocking.
 13579                                  
 13580                                  ; yes, the request fits. let it happen.
 13581                                  
 13582 000015D2 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13583                                  					; set up head number
 13584 000015D5 E888FE                  		call	doint
 13585 000015D8 E9D900                  		jmp	bad13		; and return from this place
 13586                                  ; ---------------------------------------------------------------------------
 13587                                  
 13588                                  i13_done_dmaerr:			
 13589 000015DB B409                    		mov	ah, 9		; pass dma error thru to caller
 13590 000015DD F9                      		stc
 13591 000015DE E914FF                  		jmp	ret_from_i13	; return with error,
 13592                                  					; we know it's not a changeline error
 13593                                  ; ---------------------------------------------------------------------------
 13594                                  
 13595                                  ; verify the given sectors. place the buffer pointer into our space.
 13596                                  
 13597                                  intverify:				
 13598 000015E1 06                      		push	es		; save caller's dma address
 13599 000015E2 53                      		push	bx
 13600 000015E3 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13601 000015E4 07                      		pop	es
 13602                                  dosimple:				
 13603 000015E5 BB[4E01]                		mov	bx, disksector
 13604                                  					; do the i/o from Bios_Data:disksector
 13605                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13606                                  		; 17/10/2022
 13607 000015E8 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13608                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13609 000015ED 5B                      		pop	bx
 13610 000015EE 07                      		pop	es
 13611 000015EF E907FF                  		jmp	i13ret_ck_chglinerr
 13612                                  ; ---------------------------------------------------------------------------
 13613                                  
 13614                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13615                                  
 13616                                  intformat:				
 13617 000015F2 06                      		push	es
 13618 000015F3 53                      		push	bx
 13619 000015F4 56                      		push	si
 13620 000015F5 57                      		push	di
 13621 000015F6 1E                      		push	ds
 13622                                  
 13623                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13624                                  ; in other words, swap (ds, es)
 13625                                  
 13626 000015F7 06                      		push	es
 13627 000015F8 1E                      		push	ds
 13628 000015F9 07                      		pop	es
 13629 000015FA 1F                      		pop	ds
 13630 000015FB 89DE                    		mov	si, bx
 13631 000015FD BF[4E01]                		mov	di, disksector
 13632 00001600 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 13633 00001603 1F                      		pop	ds
 13634 00001604 5F                      		pop	di
 13635 00001605 5E                      		pop	si		; do the i/o from
 13636 00001606 EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13637                                  ; ---------------------------------------------------------------------------
 13638                                  
 13639                                  ; we can't fit the request into the entire block. perform the operation on
 13640                                  ; the first block.
 13641                                  ;
 13642                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13643                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13644                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13645                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13646                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13647                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13648                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13649                                  ; doblock will handle the first block of requested sectors within the
 13650                                  ; boundary of this safe value.
 13651                                  
 13652                                  doblock:
 13653                                  
 13654                                  ; try to get the # of sectors/track from bds via rom drive number.
 13655                                  ; for any mini disks installed, here we have to pray that they have the
 13656                                  ; same # of sector/track as the main dos partition disk drive.
 13657                                  				
 13658 00001608 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13659                                  					; get head #, drive #
 13660 0000160B 51                      		push	cx
 13661 0000160C 06                      		push	es
 13662 0000160D 57                      		push	di		; ah - # of sectors before dma boundary
 13663                                  					; al - requested # of sectors for i/o.
 13664 0000160E E83BFE                  		call	find_bds
 13665 00001611 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13666                                  		; 12/12/2022
 13667 00001615 26F6452301              		test	byte [es:di+23h], 1
 13668                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13669 0000161A 5F                      		pop	di
 13670 0000161B 07                      		pop	es
 13671 0000161C 88E0                    		mov	al, ah		; set al=ah for	floppies
 13672 0000161E 7404                    		jz	short doblockflop ; they are track by track operation
 13673 00001620 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13674 00001622 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13675                                  doblockflop:				
 13676 00001624 59                      		pop	cx
 13677                                  doblockcontinue:			
 13678 00001625 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13679 00001627 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13680 00001629 50                      		push	ax
 13681 0000162A 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13682 0000162C EB03                    		jmp	short doblockdoint
 13683                                  ; ---------------------------------------------------------------------------
 13684                                  
 13685                                  doblocklast:				
 13686 0000162E 88C4                    		mov	ah, al
 13687 00001630 50                      		push	ax
 13688                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13689 00001631 E82CFE                  		call	doint
 13690 00001634 727E                    		jb	short bad13	; something happened, bye!
 13691 00001636 58                      		pop	ax
 13692 00001637 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13693                                  					; decrement by the successful operation
 13694 0000163A 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13695 0000163C 00E7                    		add	bh, ah		; advance dma addres
 13696 0000163E 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13697 00001640 38C4                    		cmp	ah, al		; check	the previous value
 13698 00001642 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13699                                  					; then we are done already.
 13700 00001644 28E0                    		sub	al, ah		; otherwise,
 13701                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13702 00001646 E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 13703 00001649 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13704                                  ; ---------------------------------------------------------------------------
 13705                                  
 13706                                  bufferx:				
 13707 0000164B 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13708                                  					; set up head number
 13709                                  buffer:					
 13710 0000164E 53                      		push	bx
 13711 0000164F 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13712 00001652 80FC03                  		cmp	ah, 3		; romwrite
 13713 00001655 7525                    		jnz	short doread	;
 13714                                  					
 13715                                  ; copy the offending sector into local buffer
 13716                                  
 13717 00001657 06                      		push	es
 13718 00001658 1E                      		push	ds
 13719 00001659 56                      		push	si
 13720 0000165A 57                      		push	di
 13721 0000165B 1E                      		push	ds		; exchange segment registers
 13722 0000165C 06                      		push	es
 13723 0000165D 1F                      		pop	ds
 13724 0000165E 07                      		pop	es
 13725 0000165F BF[4E01]                		mov	di, disksector	; where to move
 13726 00001662 57                      		push	di		; save it
 13727 00001663 89DE                    		mov	si, bx		; source
 13728 00001665 E856FD                  		call	move_sector	; move sector into local buffer
 13729 00001668 5B                      		pop	bx		; new transfer address
 13730                                  					; (es:bx = Bios_Data:diskbuffer)
 13731 00001669 5F                      		pop	di		; restore caller's di & si
 13732 0000166A 5E                      		pop	si
 13733 0000166B 1F                      		pop	ds		; restore Bios_Data
 13734                                  
 13735                                  ; see if we are wrapping around a track or head
 13736                                  
 13737 0000166C B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13738                                  					; get drive number
 13739 0000166E 8A5608                  		mov	dl, [bp+8]
 13740 00001671 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 13741                                  					;
 13742                                  					; ah is	function
 13743                                  					; al is	1 for single sector transfer
 13744                                  					; es:bx	is local transfer addres
 13745                                  					; cx is	track/sector number
 13746                                  					; dx is	head/drive number
 13747                                  					; si,di	unchanged
 13748 00001674 E8E9FD                  		call	doint
 13749 00001677 07                      		pop	es		; restore caller's dma segment
 13750 00001678 723A                    		jb	short bad13	; go clean up
 13751 0000167A EB22                    		jmp	short dotail
 13752                                  ; ---------------------------------------------------------------------------
 13753                                  
 13754                                  ; reading a sector. do int first, then move things around
 13755                                  
 13756                                  doread:					
 13757 0000167C 06                      		push	es
 13758 0000167D 53                      		push	bx
 13759 0000167E 1E                      		push	ds		; es = Bios_Code
 13760 0000167F 07                      		pop	es
 13761 00001680 BB[4E01]                		mov	bx, disksector
 13762 00001683 B001                    		mov	al, 1
 13763 00001685 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13764                                  					; get drive number
 13765 00001688 E84EFD                  		call	check_wrap	;
 13766                                  					; ah = function
 13767                                  					; al = 1 for single sector
 13768                                  					; es:bx	points to local	buffer
 13769                                  					; cx, dx are track/sector, head/drive
 13770 0000168B E8D2FD                  		call	doint
 13771 0000168E 5B                      		pop	bx
 13772 0000168F 07                      		pop	es
 13773 00001690 7222                    		jb	short bad13
 13774 00001692 56                      		push	si
 13775 00001693 57                      		push	di
 13776 00001694 89DF                    		mov	di, bx
 13777 00001696 BE[4E01]                		mov	si, disksector
 13778 00001699 E822FD                  		call	move_sector
 13779 0000169C 5F                      		pop	di
 13780 0000169D 5E                      		pop	si
 13781                                  
 13782                                  ; note the fact that we've done 1 more sector
 13783                                  
 13784                                  dotail:					
 13785 0000169E 5B                      		pop	bx		; retrieve new dma area
 13786 0000169F 80C702                  		add	bh, 2		; advance over sector
 13787 000016A2 41                      		inc	cx
 13788 000016A3 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13789 000016A6 F8                      		clc
 13790 000016A7 FEC8                    		dec	al
 13791 000016A9 7409                    		jz	short bad13	; no more i/o
 13792                                  
 13793                                  ; see if we wrap around a track or head boundary with starting sector
 13794                                  ; we already have the correct head number to pass to check_wrap
 13795                                  
 13796 000016AB 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13797 000016AE E828FD                  		call	check_wrap
 13798 000016B1 E8ACFD                  		call	doint
 13799                                  
 13800                                  ; we are done. ax has the final code; we throw away what we got before
 13801                                  
 13802                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13803                                  ;	   or we've finished. If carry is set now, our only
 13804                                  ;	   hope for salvation is that it was a read operation
 13805                                  ;	   and the error code is ECC error. In that case, we'll
 13806                                  ;	   just pop the registers and go do the old ECC thing.
 13807                                  ;	   When the DMA error that got us here in the first
 13808                                  ;	   place occurs, it'll handle it.
 13809                                  
 13810                                  bad13:					
 13811 000016B4 89EC                    		mov	sp, bp
 13812 000016B6 5D                      		pop	bp
 13813 000016B7 5B                      		pop	bx
 13814 000016B8 5B                      		pop	bx
 13815 000016B9 59                      		pop	cx
 13816 000016BA 5A                      		pop	dx
 13817 000016BB 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13818 000016BD E935FE                  		jmp	ret_from_i13	; non-error exit
 13819                                  ; ---------------------------------------------------------------------------
 13820                                  
 13821                                  xgoterr13_xxxx:				
 13822 000016C0 E958FE                  		jmp	goterr13_xxxx
 13823                                  
 13824                                  ; ---------------------------------------------------------------------------
 13825                                  		; 10/12/2022
 13826                                  		;db 	0
 13827                                  ; ---------------------------------------------------------------------------
 13828                                  
 13829                                  ;Bios_Code ends
 13830                                  
 13831                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13832                                  
 13833                                  ;-----------------------------------------------------------------------------
 13834                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13835                                  ;-----------------------------------------------------------------------------
 13836                                  ; 17/03/2019 - Retro DOS v4.0
 13837                                  
 13838                                  		; 19/10/2022
 13839                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13840 000016C3 8A26[7500]              		mov	ah, [drvmax]
 13841 000016C7 BF[8706]                		mov	di, dskdrvs
 13842 000016CA 1E                      		push	ds		; pass result in es:di
 13843 000016CB 07                      		pop	es
 13844 000016CC E9E9EE                  		jmp	SetPtrSav
 13845                                  
 13846                                  ; =============== S U B	R O U T	I N E =======================================
 13847                                  
 13848                                  ;---------------------------------------------------------------------------
 13849                                  ; install_bds installs a bds at location es:di into the current linked list of
 13850                                  ; bds maintained by this device driver. it places the bds at the end of the
 13851                                  ; list. Trashes (at least) ax, bx, di, si
 13852                                  ;---------------------------------------------------------------------------
 13853                                  
 13854                                  install_bds:		
 13855 000016CF 1E                      		push	ds		; save Bios_Data segment
 13856 000016D0 BE[1901]                		mov	si, start_bds	; beginning of chain
 13857                                  
 13858                                  		; ds:si now points to link to first bds
 13859                                  		; assume bds list is non-empty
 13860                                  loop_next_bds:				
 13861 000016D3 C534                    		lds	si, [si]	; [si+BDS.link]
 13862                                  					; fetch	next bds
 13863 000016D5 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13864 000016D9 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13865                                  					; drive	with new one?
 13866 000016DC 7518                    		jnz	short next_bds
 13867 000016DE B310                    		mov	bl, 10h		; fi_am_mult
 13868 000016E0 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13869                                  					; set both of them to i_am_mult	if so
 13870 000016E4 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13871 000016E7 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13872                                  					; we don't own it
 13873 000016EC 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13874                                  					; determine if changeline available
 13875 000016EF 80E302                  		and	bl, 2		; fchangeline
 13876 000016F2 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13877                                  next_bds:				
 13878                                  		; 02/09/2023 (PCDOS 7.1)
 13879 000016F6 B8FFFF                  		mov	ax, 0FFFFh	; -1
 13880 000016F9 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 13881                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13882                                  					; are we at end	of list?
 13883 000016FB 75D6                    		jnz	short loop_next_bds
 13884 000016FD 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 13885                                  					; install bds
 13886 00001700 893C                    		mov	[si], di
 13887 00001702 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 13888                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13889                                  					; set next pointer to null
 13890 00001705 1F                      		pop	ds
 13891                                  
 13892                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13893                                  ;
 13894                                  ; **** If the new drive has a higher EOT value, we must alter the
 13895                                  ;      'eot' variable appropriately.
 13896                                  ;
 13897                                  ;		; 01/06/2019
 13898                                  ;		;mov	al,[es:di+52]
 13899                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13900                                  ;
 13901                                  ;		cmp	al,[eot]
 13902                                  ;		jbe	short _eot_ok
 13903                                  ;		mov	[eot],al
 13904                                  
 13905 00001706 C3                      		retn
 13906                                  
 13907                                  ; ---------------------------------------------------------------------------
 13908                                  
 13909                                  ; 17/10/2022
 13910                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13911                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13912                                  ; 09/12/2022
 13913                                  DRVLET equ drvlet
 13914                                  SNGMSG equ sngmsg
 13915                                  
 13916                                  ; 16/10/2022
 13917                                  
 13918                                  ;---------------------------------------------------------------------------
 13919                                  ;  ask to swap the disk in drive a:
 13920                                  ;	es:di -> bds
 13921                                  ;	ds -> Bios_Data
 13922                                  ;---------------------------------------------------------------------------
 13923                                  
 13924                                  		; 19/10/2022
 13925 00001707 F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13926                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13927 0000170C 7405                    		jz	short no_win386	; no, skip SetFocus
 13928                                  		
 13929                                  		; set focus to the correct VM
 13930                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13931                                  		; 17/10/2022
 13932 0000170E 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13933                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13934                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13935                                  no_win386:				
 13936 00001713 51                      		push	cx
 13937 00001714 52                      		push	dx
 13938 00001715 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13939                                  					; get the drive	letter
 13940                                  
 13941                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13942                                  ;           then existing dsk is drive A & vice versa
 13943                                  
 13944 00001719 88D6                    		mov	dh, dl
 13945 0000171B 80F601                  		xor	dh, 1
 13946 0000171E 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13947 00001720 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13948                                  					; broad	cast code for swap disk
 13949                                  					; Broadcast it
 13950 00001723 CD2F                    		int	2Fh	
 13951 00001725 41                      		inc	cx		; cx == -1 ?
 13952 00001726 741E                    		jz	short swpdsk9	; somebody has handled it
 13953                                  
 13954                                  ; using a different drive in a one drive system so request the user change disks
 13955                                  
 13956 00001728 80C241                  		add	dl, 'A'
 13957                                  		; 17/10/2022
 13958 0000172B 2E8816[6517]            		mov	[cs:DRVLET], dl
 13959                                  		; 16/10/2022
 13960                                  		;;mov	byte [cs:drvlet], dl
 13961                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13962                                  					; 0070h:3D54h =	2C7h:17E4h
 13963 00001730 BE[4917]                		mov	si, SNGMSG
 13964                                  		;mov	si, 17C8h	; sngmsg
 13965                                  					; 0070h:3D38h =	2C7h:17C8h
 13966 00001733 53                      		push	bx
 13967 00001734 2E                      		cs
 13968 00001735 AC                      		lodsb			; get the next character of the message
 13969                                  		;lods	byte ptr cs:[si]
 13970                                  wrmsg_loop:				
 13971 00001736 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13972                                  					; AL = character to display
 13973 00001738 2E                      		cs
 13974 00001739 AC                      		lodsb
 13975                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13976                                  					; get the next character of the	message
 13977 0000173A 08C0                    		or	al, al
 13978 0000173C 75F8                    		jnz	short wrmsg_loop
 13979 0000173E E8C6EA                  		call	con_flush	; flush out keyboard queue
 13980                                  					; call rom-bios
 13981 00001741 30E4                    		xor	ah, ah
 13982 00001743 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13983                                  					; Return: AH = scan code, AL = character
 13984 00001745 5B                      		pop	bx
 13985                                  swpdsk9:				
 13986 00001746 5A                      		pop	dx
 13987 00001747 59                      		pop	cx
 13988 00001748 C3                      		retn
 13989                                  
 13990                                  ; ---------------------------------------------------------------------------
 13991                                  
 13992                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13993                                  
 13994                                  ;--------------------------------------------------------
 13995                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13996                                  ;--------------------------------------------------------
 13997                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13998                                  ;--------------------------------------------------------
 13999                                  ; 17/03/2019 - Retro DOS v4.0
 14000                                  
 14001                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 14002 00001749 0D0A                    sngmsg:		db 0Dh,0Ah
 14003 0000174B 496E73657274206469-     		db 'Insert diskette for drive '
 14003 00001754 736B6574746520666F-
 14003 0000175D 7220647269766520   
 14004                                  
 14005                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 14006 00001765 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 14006 0000176E 65737320616E79206B-
 14006 00001777 6579207768656E2072-
 14006 00001780 656164790D0A       
 14007 00001786 0A00                    		db 0Ah,0
 14008                                  
 14009                                  ; =============== S U B	R O U T	I N E =======================================
 14010                                  
 14011                                  ;---------------------------------------------------------------------------
 14012                                  ; input : es:di points to current bds for drive.
 14013                                  ; return : zero set if no open files
 14014                                  ;	   zero reset if open files
 14015                                  ;---------------------------------------------------------------------------
 14016                                  
 14017                                  chkopcnt:		
 14018 00001788 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 14019 0000178D C3                      		retn
 14020                                  
 14021                                  ; =============== S U B	R O U T	I N E =======================================
 14022                                  
 14023                                  ;---------------------------------------------------------------------------
 14024                                  ; at media check time, we need to really get down and check what the change is.
 14025                                  ; this is guaranteed to be expensive.
 14026                                  ;
 14027                                  ;	es:di -> bds, ds -> Bios_Data
 14028                                  ;---------------------------------------------------------------------------
 14029                                  
 14030                                  mediacheck:	
 14031 0000178E E8A9F0                  		call	checksingle	; make sure correct disk is in place
 14032 00001791 31F6                    		xor	si, si
 14033 00001793 E84D01                  		call	haschange
 14034 00001796 742F                    		jz	short mediaret
 14035 00001798 E83C01                  		call	checkromchange
 14036 0000179B 752B                    		jnz	short mediadovolid
 14037 0000179D 50                      		push	ax
 14038 0000179E 52                      		push	dx
 14039 0000179F 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14040                                  					; set logical drive number
 14041 000017A3 B416                    		mov	ah, 16h
 14042 000017A5 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 14043                                  					; DL = drive to	check
 14044                                  					; Return: AH = disk change status
 14045 000017A7 5A                      		pop	dx
 14046 000017A8 58                      		pop	ax
 14047 000017A9 721D                    		jb	short mediadovolid
 14048 000017AB BE0100                  		mov	si, 1		; signal no change
 14049                                  
 14050                                  ; there are some drives with changeline that "lose" the changeline indication
 14051                                  ; if a different drive is accessed after the current one. in order to avoid
 14052                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 14053                                  ; is not active and we are accessing a different drive from the last one.
 14054                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 14055                                  ; status.
 14056                                  		; 19/10/2022
 14057 000017AE 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 14058 000017B2 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 14059                                  					; (If the last drive accessed is not current drive
 14060                                  					; media	change status may be incorrect.	So,
 14061                                  					; "I don't now" will be returned even if it is indicated
 14062                                  					; as media is not changed.)
 14063 000017B6 740F                    		jz	short mediaret	; (same	drive,
 14064                                  					; media	changeline indication is reliable)
 14065                                  
 14066                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14067                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14068                                  ; "not changed" here since the 2 second test said no change.)
 14069                                  
 14070 000017B8 50                      		push	ax
 14071 000017B9 51                      		push	cx
 14072 000017BA 52                      		push	dx
 14073 000017BB E895ED                  		call	Check_Time_Of_Access
 14074 000017BE 5A                      		pop	dx
 14075 000017BF 59                      		pop	cx
 14076 000017C0 58                      		pop	ax
 14077 000017C1 09F6                    		or	si, si
 14078 000017C3 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14079                                  					; (volume id will be checked)
 14080 000017C5 31F6                    		xor	si, si		; return "i don't know"
 14081                                  mediaret:				
 14082 000017C7 C3                      		retn
 14083                                  ; ---------------------------------------------------------------------------
 14084                                  
 14085                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14086                                  ; because this may be different since we only set medbyt when doing a read
 14087                                  ; or write.
 14088                                  
 14089                                  mediadovolid:				
 14090 000017C8 E82DEE                  		call	GetBp		; build	a new bpb in current bds
 14091 000017CB 72FA                    		jb	short mediaret
 14092 000017CD E82D00                  		call	check_vid
 14093 000017D0 73F5                    		jnb	short mediaret
 14094 000017D2 E9F8F3                  		jmp	maperror	; fix up al for	return to dos
 14095                                  ; ---------------------------------------------------------------------------
 14096                                  
 14097                                  ; simple, quick check of latched change. if no indication, then return
 14098                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14099                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14100                                  ; dos.
 14101                                  ;
 14102                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14103                                  
 14104                                  ;	call with es:di -> bds, ds -> Bios_Data
 14105                                  ;	***** warning:  this routine will return one level up on the stack
 14106                                  ;			if an error occurs!
 14107                                  
 14108                                  checklatchio:	
 14109                                  
 14110                                  ; if returning fake bpb then assume the disk has not changed
 14111                                  			
 14112 000017D5 E8B0FF                  		call	chkopcnt
 14113 000017D8 741B                    		jz	short checkret	; done if zero
 14114                                  
 14115                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14116                                  
 14117 000017DA E8FA00                  		call	checkromchange
 14118 000017DD 7416                    		jz	short checkret
 14119                                  
 14120                                  ; we now see that a change line has been seen in the past. let's do the
 14121                                  ; expensive verification.
 14122                                  
 14123 000017DF E816EE                  		call	GetBp		; build	bpb in current bds
 14124 000017E2 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14125 000017E4 E81600                  		call	check_vid
 14126 000017E7 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14127 000017E9 09F6                    		or	si, si		; is changed for sure?
 14128 000017EB 7908                    		jns	short checkret
 14129 000017ED E87B00                  		call	returnvid
 14130                                  checklatchret:				
 14131 000017F0 E8DAF3                  		call	maperror	; fix up al for	return to dos
 14132                                  ret_no_error_map:			
 14133 000017F3 F9                      		stc
 14134 000017F4 5E                      		pop	si		; pop off return address
 14135                                  checkret:				
 14136 000017F5 C3                      		retn
 14137                                  ; ---------------------------------------------------------------------------
 14138                                  
 14139                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14140                                  ; only if there was a disk error. return that error code in ax.
 14141                                  ;
 14142                                  ;	called with es:di -> bds, ds -> Bios_Data
 14143                                  
 14144                                  checkfatvid:				
 14145 000017F6 E8BD01                  		call	fat_check	; check	the fat	and the	vid
 14146 000017F9 09F6                    		or	si, si
 14147 000017FB 7827                    		js	short changed_drv ;
 14148                                  
 14149                                  ; the fat was the same. fall into check_vid and check volume id.
 14150                                  
 14151                                  		; fall into check_vid
 14152                                  
 14153                                  ; =============== S U B	R O U T	I N E =======================================
 14154                                  
 14155                                  ; now with the extended boot record, the logic should be enhanced.
 14156                                  ;
 14157                                  ; if it is the extended boot record, then we check the volume serial
 14158                                  ; number instead of volume id. if it is different, then set si to -1.
 14159                                  ;
 14160                                  ; if it is same, then si= 1 (no change).
 14161                                  ;
 14162                                  ; if it is not the extended boot record, then just follows the old
 14163                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14164                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14165                                  ; should have already covered by extended boot structure checking.
 14166                                  ; so, we will return "i don't know" by setting si to 0.
 14167                                  ;
 14168                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14169                                  ; (this will be gauranteed by a successful getbp call right before this
 14170                                  ; routine.)
 14171                                  ;
 14172                                  ;	called with es:di -> bds, ds -> bds
 14173                                  
 14174                                  		; 19/10/2022
 14175                                  check_vid:
 14176                                  
 14177                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14178                                  ; boot signature. if it is set then go to do the extended
 14179                                  ; id check otherwise continue with code below
 14180                                  
 14181 000017FD 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14182                                  					; [disksector+EXT_BOOT.SIG],
 14183                                  					; EXT_BOOT_SIGNATURE
 14184 00001802 7427                    		jz	short do_ext_check_id
 14185 00001804 E8DC00                  		call	haschange
 14186 00001807 74EC                    		jz	short checkret
 14187 00001809 31F6                    		xor	si, si
 14188 0000180B 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14189                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14190 00001810 7411                    		jz	short checkfatret ; don't read vol id
 14191                                  					; if not fat system
 14192 00001812 E8EE00                  		call	read_volume_id
 14193 00001815 720C                    		jb	short checkfatret
 14194 00001817 E89201                  		call	check_volume_id
 14195 0000181A BEFFFF                  		mov	si, 0FFFFh	; -1
 14196                                  					; definitely changed
 14197 0000181D 7505                    		jnz	short changed_drv
 14198                                  
 14199 0000181F 46                      		inc	si		; not changed
 14200                                  vid_no_changed:				
 14201 00001820 E8BA00                  		call	resetchanged
 14202                                  		; 12/12/2022
 14203                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14204                                  		;clc
 14205                                  checkfatret:				
 14206 00001823 C3                      		retn
 14207                                  ; ---------------------------------------------------------------------------
 14208                                  
 14209                                  		; 12/12/2022
 14210                                  changed_drv:
 14211 00001824 F8                      		clc			; cas -- return	no error
 14212 00001825 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14213                                  					; ensure that we ask rom for media
 14214 0000182A C3                      		retn			; check	next time round
 14215                                  ; ---------------------------------------------------------------------------
 14216                                  
 14217                                  ; extended id check
 14218                                  
 14219                                  ; 16/10/2022
 14220                                  
 14221                                  ; the code to check extended id is basically a check to see if the
 14222                                  ; volume serial number is still the same. the volume serial number
 14223                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14224                                  ; ds:di points to the bds of the drive under consideration.
 14225                                  ; the bds has fields containing the high and low words 
 14226                                  ; of the volume serial number of the media in the drive.
 14227                                  ; compare these fields to the fields mentioned above. if these fields
 14228                                  ; do not match the media has changed and so we should jump to the code
 14229                                  ; starting at ext_changed else return "i don't know" status
 14230                                  ; in the register used for the changeline status and continue executing
 14231                                  ; the code given below. for temporary storage use the register which
 14232                                  ; has been saved and restored around this block.
 14233                                  ;
 14234                                  ; bds fields in inc\msbds.inc
 14235                                  
 14236                                  		; 19/10/2022
 14237                                  do_ext_check_id:
 14238 0000182B 50                      		push	ax
 14239                                  		;mov	ax, word ptr ds:disksector+27h
 14240                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14241 0000182C A1[7501]                		mov	ax, [disksector+27h]
 14242                                  		; 02/09/2023
 14243 0000182F 31F6                    		xor	si, si ; 0
 14244 00001831 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14245 00001835 750C                    		jnz	short ext_changed
 14246 00001837 A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14247 0000183A 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14248 0000183E 7503                    		jnz	short ext_changed
 14249                                  		;xor	si, si		; 0
 14250                                  					; don't know
 14251 00001840 58                      		pop	ax
 14252 00001841 EBDD                    		jmp	short vid_no_changed
 14253                                  					; reset the flag
 14254                                  ; ---------------------------------------------------------------------------
 14255                                  
 14256                                  ext_changed:
 14257 00001843 58                      		pop	ax
 14258                                  		; 02/09/2023
 14259 00001844 4E                      		dec	si ; mov si, 0FFFFh ; -1
 14260                                  		;mov	si, 0FFFFh	; -1
 14261                                  					; disk changed!
 14262                                  		; 12/12/2022
 14263                                  		; ('changed_drv' clears cf)
 14264                                  		;clc
 14265 00001845 EBDD                    		jmp	short changed_drv
 14266                                  
 14267                                  ; ---------------------------------------------------------------------------
 14268                                  
 14269                                  ; at i/o time, we detected the error. now we need to determine whether the
 14270                                  ; media was truly changed or not. we return normally if media change unknown.
 14271                                  ; and we pop off the call and jmp to harderr if we see an error.
 14272                                  ;
 14273                                  ; es:di -> bds
 14274                                  
 14275                                  checkio:				
 14276 00001847 80FC06                  		cmp	ah, 6
 14277 0000184A 75D7                    		jnz	short checkfatret
 14278 0000184C E839FF                  		call	chkopcnt
 14279 0000184F 74D2                    		jz	short checkfatret
 14280 00001851 E8A4ED                  		call	GetBp
 14281 00001854 7212                    		jb	short no_error_map
 14282 00001856 E89DFF                  		call	checkfatvid
 14283 00001859 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14284 0000185B 09F6                    		or	si, si		; is changed for sure?
 14285 0000185D 7802                    		js	short checkioerr ; yes changed
 14286 0000185F 45                      		inc	bp		; allow	a retry
 14287 00001860 C3                      		retn
 14288                                  ; ---------------------------------------------------------------------------
 14289                                  
 14290                                  checkioerr:				
 14291 00001861 E80700                  		call	returnvid
 14292                                  
 14293                                  checkioret:				
 14294 00001864 F9                      		stc			; make sure carry gets passed through
 14295 00001865 E915F3                  		jmp	harderr
 14296                                  ; ---------------------------------------------------------------------------
 14297                                  
 14298                                  no_error_map:				
 14299 00001868 E915F3                  		jmp	harderr2
 14300                                  
 14301                                  ; =============== S U B	R O U T	I N E =======================================
 14302                                  
 14303                                  ; return vid sets up the vid for a return to dos.
 14304                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14305                                  ;  **** trashes si! ****
 14306                                  
 14307                                  returnvid:		
 14308 0000186B BE1600                  		mov	si, 22		; extra
 14309                                  					; offset into pointer to return	value
 14310 0000186E E80700                  		call	vid_into_packet
 14311 00001871 B406                    		mov	ah, 6
 14312 00001873 F9                      		stc
 14313 00001874 C3                      		retn
 14314                                  
 14315                                  ; ---------------------------------------------------------------------------
 14316                                  
 14317                                  ; moves the pointer to the volid for the drive into the original request packet
 14318                                  ; no attempt is made to preserve registers.
 14319                                  ;
 14320                                  ; assumes es:di -> bds
 14321                                  ; **trashes si**
 14322                                  
 14323                                  media_set_vid:				
 14324 00001875 BE0F00                  		mov	si, 15		; trans+1
 14325                                  					; return the value here	in packet
 14326                                  
 14327                                  		; fall into vid_into_packet
 14328                                  
 14329                                  ; =============== S U B	R O U T	I N E =======================================
 14330                                  
 14331                                  ; return pointer to vid in bds at es:di in packet[si]
 14332                                  
 14333                                  		; 19/10/2022
 14334                                  vid_into_packet:
 14335 00001878 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14336 00001879 C51E[1200]              		lds	bx, [ptrsav]
 14337 0000187D 83C74B                  		add	di, 75		; BDS.volid
 14338 00001880 8938                    		mov	[bx+si], di
 14339 00001882 83EF4B                  		sub	di, 75		; BDS.volid
 14340 00001885 8C4002                  		mov	[bx+si+2], es
 14341 00001888 1F                      		pop	ds
 14342                                  dofloppy:	; 18/12/2022
 14343 00001889 C3                      		retn
 14344                                  
 14345                                  ; ---------------------------------------------------------------------------
 14346                                  
 14347                                  ;----------------------------------------------------------------------------
 14348                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14349                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14350                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14351                                  ;   of getbp. for 3.5" media, we just return.
 14352                                  ;
 14353                                  ;   inputs:	es:di point to correct bds for this drive
 14354                                  ;		ah has media byte
 14355                                  ;
 14356                                  ;   outputs:	carry clear
 14357                                  ;		    no registers modified
 14358                                  ;		carry set
 14359                                  ;		    al = sectors/fat
 14360                                  ;		    bh = number of root directory entries
 14361                                  ;		    bl = sectors per track
 14362                                  ;		    cx = number of sectors
 14363                                  ;		    dh = sectors per allocation unit
 14364                                  ;		    dl = number of heads
 14365                                  ;
 14366                                  ;----------------------------------------------------------------------------
 14367                                  
 14368                                  hidensity:
 14369                                  
 14370                                  ; check for correct drive
 14371                                  		
 14372                                  		; 12/12/2022
 14373 0000188A 26F6452302              		test	byte [es:di+23h], 2		
 14374                                  		;test	word [es:di+23h], 2 ; is it special?	
 14375                                  					; [es:di+BDS.flags], fchangeline
 14376 0000188F 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14377                                  
 14378                                  ; we have a media byte that is pretty complex. examine drive information
 14379                                  ; table to see what kind it is.
 14380                                  
 14381 00001891 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14382 00001896 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14383                                  					; yes, use fatid...
 14384                                  ; 96 tpi drive?
 14385 00001898 80FCF9                  		cmp	ah, 0F9h
 14386 0000189B 75EC                    		jnz	short dofloppy
 14387                                  
 14388                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14389                                  ;------ a 720K diskette
 14390                                  
 14391                                  		; 02/09/2023 (PCDOS 7.1)
 14392 0000189D 268A4522                		mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 14393 000018A1 3C07                    		cmp	al, 7
 14394                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14395                                  					; ffOther
 14396 000018A3 7413                    		jz	short Is720K
 14397 000018A5 3C09                    		cmp	al, 9
 14398                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14399                                  					; ff288
 14400 000018A7 740F                    		jz	short Is720K
 14401 000018A9 B007                    		mov	al, 7		; seven	sectors	/ fat
 14402 000018AB BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14403                                  					; 224 root dir entries
 14404                                  					; & 0Fh sector max
 14405 000018AE B96009                  		mov	cx, 2400	; 80*15*2
 14406                                  					; 80 tracks, 15 sectors/track,
 14407                                  					; 2 sides
 14408                                  		; 02/09/2023
 14409 000018B1 5A                      		pop	dx		; pop off return address
 14410 000018B2 BA0201                  		mov	dx, 258		; 1*256+2
 14411                                  					; sectors/allocation unit
 14412                                  					; & head max
 14413                                  		;add	sp, 2		; pop off return address
 14414 000018B5 E9B2ED                  		jmp	Has1		; return to tail of getbp
 14415                                  ; ---------------------------------------------------------------------------
 14416                                  
 14417                                  Is720K:
 14418                                  		; 02/09/2023
 14419 000018B8 5B                      		pop	bx		; pop off return address
 14420                                  		;add	sp, 2		; pop off return address
 14421 000018B9 E975ED                  		jmp	Has720K		; return to 720K code
 14422                                  ; ---------------------------------------------------------------------------
 14423                                  
 14424                                  		; 18/12/2022
 14425                                  ;dofloppy:				
 14426                                  		;retn
 14427                                  
 14428                                  ; =============== S U B	R O U T	I N E =======================================
 14429                                  
 14430                                  ; 16/10/2022
 14431                                  
 14432                                  ;---------------------------------------------------------------------------
 14433                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14434                                  ;		   essentially used to indicate changeline, or format.
 14435                                  ;
 14436                                  ;   inputs:	dl contains physical drive number
 14437                                  ;		bx contains bits to set in the flag field in the bdss
 14438                                  ;   outputs:	none
 14439                                  ;   registers modified: flags
 14440                                  ;
 14441                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14442                                  ;
 14443                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14444                                  ;---------------------------------------------------------------------------
 14445                                  
 14446                                  set_changed_dl:	
 14447 000018BC 06                      		push	es
 14448 000018BD 57                      		push	di
 14449                                  		;les	di, ds:start_bds
 14450                                  		; 19/10/2022
 14451 000018BE C43E[1901]              		les	di, [start_bds]
 14452                                  
 14453                                  ; note: we assume that the list is non-empty
 14454                                  
 14455                                  scan_bds:				
 14456 000018C2 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14457 000018C6 7504                    		jnz	short get_next_bds
 14458                                  
 14459                                  ; someone may complain, but this *always* must be done when a disk change is
 14460                                  ; noted. there are *no* other compromising circumstances.
 14461                                  
 14462 000018C8 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14463                                  					; signal change	on other drive
 14464                                  get_next_bds:				
 14465 000018CC 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14466                                  					; go to	next bds
 14467 000018CF 83FFFF                  		cmp	di, 0FFFFh
 14468 000018D2 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14469 000018D4 5F                      		pop	di
 14470 000018D5 07                      		pop	es
 14471 000018D6 C3                      		retn
 14472                                  
 14473                                  ; =============== S U B	R O U T	I N E =======================================
 14474                                  
 14475                                  ;---------------------------------------------------------------------------
 14476                                  ; checkromchange - see if external program has diddled rom change line.
 14477                                  ;
 14478                                  ;   inputs:	es:di points to current bds.
 14479                                  ;   outputs:	zero set - no change
 14480                                  ;		zero reset - change
 14481                                  ;   registers modified: none
 14482                                  ;---------------------------------------------------------------------------
 14483                                  
 14484                                  checkromchange:	
 14485                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14486                                  		; 10/12/2022
 14487 000018D7 26F6452340              		test	byte [es:di+23h], 40h
 14488                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14489                                  					; fchanged
 14490 000018DC C3                      		retn
 14491                                  
 14492                                  ; =============== S U B	R O U T	I N E =======================================
 14493                                  
 14494                                  ;---------------------------------------------------------------------------
 14495                                  ; resetchanged - restore value of change line
 14496                                  ;
 14497                                  ;   inputs:	es:di points to current bds
 14498                                  ;   outputs:	none
 14499                                  ;   registers modified: none
 14500                                  ;---------------------------------------------------------------------------
 14501                                  
 14502                                  resetchanged:	
 14503                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14504                                  		; 10/12/2022
 14505 000018DD 26806523BF              		and	byte [es:di+23h], 0BFh
 14506                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14507                                  					; ~fchanged
 14508 000018E2 C3                      		retn
 14509                                  
 14510                                  ; =============== S U B	R O U T	I N E =======================================
 14511                                  
 14512                                  ;---------------------------------------------------------------------------
 14513                                  ; haschange - see if drive can supply change line
 14514                                  ;
 14515                                  ;   inputs:	es:di points to current bds
 14516                                  ;   outputs:	zero set - no change line available
 14517                                  ;		zero reset - change line available
 14518                                  ;   registers modified: none
 14519                                  ;---------------------------------------------------------------------------
 14520                                  
 14521                                  haschange:
 14522                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14523                                  		; 10/12/2022
 14524 000018E3 26F6452302              		test	byte [es:di+23h], 2		
 14525                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14526                                  					; fchangeline
 14527 000018E8 C3                      		retn
 14528                                  
 14529                                  ; ---------------------------------------------------------------------------
 14530                                  
 14531                                  ; 16/10/2022
 14532                                  
 14533                                  ;-------------------------------------------------------------------------
 14534                                  ; set_volume_id      -	main routine, calls other routines.
 14535                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14536                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14537                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14538                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14539                                  ;-------------------------------------------------------------------------
 14540                                  
 14541                                  ; set_volume_id
 14542                                  ;   if drive has changeline support, read in and set the volume_id
 14543                                  ; and the last fat_id byte. if no change line support then do nothing.
 14544                                  ;
 14545                                  ;   on entry:
 14546                                  ;	es:di points to the bds for this disk.
 14547                                  ;	ah contains media byte
 14548                                  ;
 14549                                  ;   on exit:
 14550                                  ;	carry clear:
 14551                                  ;	   successful call
 14552                                  ;	carry set
 14553                                  ;	   error and ax has error code
 14554                                  
 14555                                  set_volume_id:				
 14556 000018E9 52                      		push	dx		; save registers
 14557 000018EA 50                      		push	ax
 14558 000018EB E8F5FF                  		call	haschange	; does drive have changeline support?
 14559 000018EE 740B                    		jz	short setvret	; no, get out
 14560 000018F0 E81000                  		call	read_volume_id
 14561 000018F3 7209                    		jb	short seterr
 14562 000018F5 E8A800                  		call	transfer_volume_id ; copy the volume id	to special drive
 14563 000018F8 E8E2FF                  		call	resetchanged	; restore value	of change line
 14564                                  setvret:				
 14565                                  		; 10/12/2022
 14566                                  		; cf = 0
 14567                                  		;clc			; no error, clear carry flag
 14568 000018FB 58                      		pop	ax		; restore registers
 14569 000018FC 5A                      		pop	dx
 14570 000018FD C3                      		retn
 14571                                  ; ---------------------------------------------------------------------------
 14572                                  
 14573                                  seterr:					
 14574 000018FE 5A                      		pop	dx		; pop stack but don't overwrite ax
 14575 000018FF 5A                      		pop	dx		; restore dx
 14576 00001900 C3                      		retn
 14577                                  ; ---------------------------------------------------------------------------
 14578 00001901 0000                    root_sec:	dw 0			; root sector #
 14579                                  
 14580                                  ; 16/10/2022
 14581                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14582                                  ; 09/12/2022
 14583                                  ROOTSEC equ root_sec
 14584                                  
 14585                                  ; =============== S U B	R O U T	I N E =======================================
 14586                                  
 14587                                  ; 16/10/2022
 14588                                  
 14589                                  ; read_volume_id read the volume id and tells if it has been changed.
 14590                                  ;
 14591                                  ;   on entry:
 14592                                  ;	es:di points to current bds for drive.
 14593                                  ;
 14594                                  ;   on exit:
 14595                                  ;	carry clear
 14596                                  ;	    si = 1  no change
 14597                                  ;	    si = 0  ?
 14598                                  ;	    si = -1 change
 14599                                  ;
 14600                                  ;	carry set:
 14601                                  ;	    error and ax has error code.
 14602                                  
 14603                                  read_volume_id:
 14604 00001903 52                      		push	dx		; preserve registers
 14605 00001904 51                      		push	cx
 14606 00001905 53                      		push	bx
 14607 00001906 50                      		push	ax
 14608 00001907 06                      		push	es		; stack the bds last
 14609 00001908 57                      		push	di
 14610 00001909 1E                      		push	ds		; point es to Bios_Data
 14611 0000190A 07                      		pop	es
 14612 0000190B BF[0909]                		mov	di, tmp_vid	; "NO NAME	 "
 14613 0000190E BE[FD08]                		mov	si, nul_vid	; "NO NAME	 "
 14614 00001911 B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14615 00001914 F3A4                    		rep movsb
 14616 00001916 5F                      		pop	di
 14617 00001917 07                      		pop	es
 14618 00001918 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14619                                  					; # of fats
 14620 0000191C 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14621                                  					; sectors / fat
 14622 00001920 F6E1                    		mul	cl		; size taken by	fats
 14623 00001922 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14624                                  					; add on reserved sectors
 14625                                  					;
 14626                                  					; ax is	now sector # (0	based)
 14627                                  		; 17/10/2022
 14628 00001926 2EA3[0119]              		mov	[cs:ROOTSEC], ax
 14629                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14630                                  					; 0070h:3EFFh =	2C7h:198Fh
 14631 0000192A 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14632                                  					; # root dir entries
 14633 0000192E B104                    		mov	cl, 4		; 16 entries/sector
 14634 00001930 D3E8                    		shr	ax, cl		; divide by 16
 14635                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 14636                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 14637 00001932 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 14638                                  next_sec:				
 14639 00001933 51                      		push	cx		; save outer loop counter
 14640 00001934 2EA1[0119]              		mov	ax, [cs:ROOTSEC]
 14641                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14642                                  					; get sector #
 14643 00001938 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14644                                  					; sectors / track
 14645 0000193C 31D2                    		xor	dx, dx
 14646 0000193E F7F1                    		div	cx
 14647                                  
 14648                                  ; set up registers for call to read_sector
 14649                                  
 14650 00001940 42                      		inc	dx		; dx= sectors into track
 14651                                  					; ax= track count from 0
 14652 00001941 88D1                    		mov	cl, dl		; sector to read
 14653 00001943 31D2                    		xor	dx, dx
 14654 00001945 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14655                                  					; # heads on this disc
 14656 00001949 88D6                    		mov	dh, dl		; head number
 14657 0000194B 88C5                    		mov	ch, al		; track	#
 14658 0000194D E828EE                  		call	read_sector	; get first sector of the root directory,
 14659                                  					; ds:bx	-> directory sector
 14660 00001950 723F                    		jb	short readviderr
 14661 00001952 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14662 00001955 B008                    		mov	al, 8		; volume label bit
 14663                                  fvid_loop:				
 14664                                  		; 02/09/2023 (PCDOS 7.1)
 14665 00001957 382F                    		cmp	[bx], ch ; 0
 14666                                  		;cmp	byte [bx], 0 ; end of dir?
 14667 00001959 7433                    		jz	short no_vid	; yes, no vol id
 14668 0000195B 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14669 0000195E 7405                    		jz	short ent_loop	; yes, skip
 14670 00001960 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14671 00001963 750F                    		jnz	short found_vid	; jmp yes
 14672                                  ent_loop:				
 14673 00001965 83C320                  		add	bx, 32		; add length of	directory entry
 14674 00001968 E2ED                    		loop	fvid_loop
 14675 0000196A 59                      		pop	cx		; outer loop
 14676 0000196B 2EFF06[0119]            		inc	word [cs:ROOTSEC]
 14677                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14678                                  					; next sector
 14679 00001970 E2C1                    		loop	next_sec	; continue
 14680                                  notfound:
 14681                                  		; 02/09/2023
 14682                                  		;xor	si, si
 14683 00001972 EB13                    		jmp	short fvid_ret
 14684                                  ; ---------------------------------------------------------------------------
 14685                                  
 14686                                  found_vid:
 14687                                  		; 02/09/2023
 14688                                  		; cf = 0  ('test' instruction clears cf)				
 14689 00001974 59                      		pop	cx		; clean stack of outer loop counter
 14690 00001975 89DE                    		mov	si, bx		; point	to volume_id
 14691 00001977 06                      		push	es		; preserve current bds
 14692 00001978 57                      		push	di
 14693 00001979 1E                      		push	ds
 14694 0000197A 07                      		pop	es		; point es to Bios_Data
 14695 0000197B BF[0909]                		mov	di, tmp_vid	; "NO NAME	 "
 14696 0000197E B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14697                                  					; length of string minus nul
 14698 00001981 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14699                                  		;xor	al, al
 14700                                  		; 02/09/2023
 14701 00001983 91                      		xchg	ax, cx		; ax = 0
 14702 00001984 AA                      		stosb			; null terminate
 14703                                  		;;xor	si, si
 14704                                  		; 02/09/2023
 14705                                  		;xchg	ax, si		; si = 0
 14706 00001985 5F                      		pop	di		; restore current bds
 14707 00001986 07                      		pop	es
 14708                                  fvid_ret:
 14709                                  		; 02/09/2023
 14710 00001987 31F6                    		xor	si, si ; 0
 14711                                  				
 14712 00001989 58                      		pop	ax
 14713                                  		; 10/12/2022
 14714                                  		; cf = 0
 14715                                  		;clc
 14716                                  rvidret:				
 14717 0000198A 5B                      		pop	bx		; restore registers
 14718 0000198B 59                      		pop	cx
 14719 0000198C 5A                      		pop	dx
 14720 0000198D C3                      		retn
 14721                                  ; ---------------------------------------------------------------------------
 14722                                  
 14723                                  no_vid:
 14724 0000198E 59                      		pop	cx		; clean stack of outer loop counter
 14725                                  		;jmp	short notfound	; not found
 14726                                  		; 02/09/2023
 14727 0000198F EBF6                    		jmp	short fvid_ret
 14728                                  ; ---------------------------------------------------------------------------
 14729                                  
 14730                                  readviderr:				
 14731 00001991 5E                      		pop	si		; trash the outer loop counter
 14732 00001992 5E                      		pop	si		; caller's ax, return error code instead 
 14733 00001993 EBF5                    		jmp	short rvidret
 14734                                  
 14735                                  ; ---------------------------------------------------------------------------
 14736                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 14737                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 14738                                  preset_volid_addr:
 14739 00001995 BE[0909]                		mov	si, tmp_vid	; "NO NAME    "
 14740                                  		;
 14741                                  		; PCDOS 7.1
 14742                                  		;add	di, 125		; BDS.volid
 14743                                  		;mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 14744                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 14745 00001998 83C74B                  		add	di, 75		; BDS.volid
 14746 0000199B B90C00                  		mov	cx, 12		; VOLID_SIZ
 14747                                  		;
 14748 0000199E FC                      		cld
 14749 0000199F C3                      		retn
 14750                                  
 14751                                  ; =============== S U B	R O U T	I N E =======================================
 14752                                  
 14753                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14754                                  ;
 14755                                  ; inputs:	es:di has current bds
 14756                                  ; outputs:	bds for drive has volume id from tmp
 14757                                  
 14758                                  transfer_volume_id:
 14759 000019A0 57                      		push	di		; copy the volume id from tmp to special drive
 14760 000019A1 56                      		push	si
 14761 000019A2 51                      		push	cx
 14762                                  		
 14763                                  		;mov	si, tmp_vid	; "NO NAME	 "
 14764                                  		;;add	di, BDS.volid
 14765                                  		;add	di, 75		; BDS.volid
 14766                                  		;;mov	cx, VOLID_SIZ
 14767                                  		;mov	cx, 12		; VOLID_SIZ
 14768                                  		;cld
 14769                                  		; 02/09/2023 (PCDOS 7.1)
 14770 000019A3 E8EFFF                  		call	preset_volid_addr
 14771                                  
 14772 000019A6 F3A4                    		rep movsb
 14773 000019A8 59                      		pop	cx
 14774 000019A9 5E                      		pop	si
 14775 000019AA 5F                      		pop	di
 14776 000019AB C3                      		retn
 14777                                  
 14778                                  ; =============== S U B	R O U T	I N E =======================================
 14779                                  
 14780                                  ;  check_volume_id - compare volume id in tmp area with
 14781                                  ;		     one expected for drive
 14782                                  ;
 14783                                  ;   inputs:	es:di has current bds for drive
 14784                                  ;   outputs:	zero true means it matched
 14785                                  
 14786                                  check_volume_id:
 14787 000019AC 57                      		push	di
 14788 000019AD 51                      		push	cx
 14789                                  		
 14790                                  		;mov	si, tmp_vid	; "NO NAME	 "
 14791                                  		;;add	di, BDS.volid
 14792                                  		;add	di, 75		; BDS.volid
 14793                                  		;;mov	cx, VOLID_SIZ
 14794                                  		;mov	cx, 12		; VOLID_SIZ
 14795                                  		;cld
 14796                                  		; 02/09/2023 (PCDOS 7.1)
 14797 000019AE E8E4FF                  		call	preset_volid_addr
 14798                                  
 14799 000019B1 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14800 000019B3 59                      		pop	cx
 14801 000019B4 5F                      		pop	di
 14802 000019B5 C3                      		retn
 14803                                  
 14804                                  ; =============== S U B	R O U T	I N E =======================================
 14805                                  
 14806                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14807                                  ;	      - uses the fat id obtained from the boot sector.
 14808                                  ;
 14809                                  ;   inputs:	medbyt is expected fat id
 14810                                  ;		es:di points to current bds
 14811                                  ;
 14812                                  ;   output:	si = -1 if fat id different,
 14813                                  ;		si = 0 otherwise
 14814                                  ;
 14815                                  ;   no other registers changed.
 14816                                  
 14817                                  fat_check:		
 14818 000019B6 50                      		push	ax
 14819 000019B7 31F6                    		xor	si, si		; say fat id's are same.
 14820 000019B9 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14821 000019BC 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14822                                  					; compare it with the bds medbyte
 14823 000019C0 7401                    		jz	short okret1	; carry	clear
 14824 000019C2 4E                      		dec	si
 14825                                  okret1:					
 14826 000019C3 58                      		pop	ax
 14827 000019C4 C3                      		retn
 14828                                  
 14829                                  ; ---------------------------------------------------------------------------
 14830                                  
 14831                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14832                                  		;times 7 db 0
 14833                                  
 14834                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14835                                  
 14836                                  		; 09/12/2022
 14837                                  		;times 4 db 0	; 17/10/2022
 14838                                  		;db 4 dup(0)	; times 4 db 0
 14839                                  
 14840                                  ; ---------------------------------------------------------------------------
 14841                                  
 14842                                  		; 09/12/2022
 14843                                  		;db 0
 14844                                  
 14845                                  number2div	equ ($-BCode_start)
 14846                                  number2mod	equ (number2div % 16)
 14847                                  
 14848                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 14849 000019C5 00<rep Bh>              		times (16-number2mod) db 0
 14850                                  %endif
 14851                                  
 14852                                  ;align 16
 14853                                  
 14854                                  ; 09/12/2022
 14855                                  BCODE_END	equ $ - BCode_start
 14856                                  ; 29/09/2023
 14857                                  BCODEEND:
 14858                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14859                                  ; 13/12/2022
 14860                                  SYSINITOFFSET	equ BCODE_END
 14861                                  ; 29/09/2023
 14862                                  ;SYSINITOFFSET	equ $-$$
 14863                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14864                                  
 14865                                  ; 28/09/2023
 14866                                  S2SIZE equ $-$$
 14867                                  
 14868                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14869                                  
 14870                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14871                                  ; 01/05/2019 - Retro DOS v4.0 
 14872                                  ; ============================================================================
 14873                                  ; end of BIOSCODE
 14874                                  
 14875                                  ; ----------------------------------------------------------------------------
 14876                                  ; %include sysinit5.s	; 09/12/2022
 14877                                  ; ----------------------------------------------------------------------------
 14878                                  
 14879                                  ;=============================================================================
 14880                                  ; (IO.SYS) SYSINIT SEGMENT 
 14881                                  ;=============================================================================
 14882                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14883                                  
 14884                                  section .SYSINIT vstart=0
 14885                                  
 14886                                  ; ****************************************************************************
 14887                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14888                                  ; ----------------------------------------------------------------------------
 14889                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14890                                  ; ----------------------------------------------------------------------------
 14891                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14892                                  ; ----------------------------------------------------------------------------
 14893                                  ; Assembler: NASM version 2.15
 14894                                  ; ----------------------------------------------------------------------------
 14895                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14896                                  ; ----------------------------------------------------------------------------
 14897                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14898                                  ; ----------------------------------------------------------------------------
 14899                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14900                                  ; source code by Microsoft, 1991 
 14901                                  ; ----------------------------------------------------------------------------
 14902                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14903                                  ; by Microsoft, 12/10/1983
 14904                                  ; ****************************************************************************
 14905                                  ; main file: 'retrodos4.s'
 14906                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14907                                  
 14908                                  ; 21/10/2022
 14909                                  ; ----------------------------------------------------------------------------
 14910                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14911                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14912                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14913                                  ; ----------------------------------------------------------------------------
 14914                                  ; Binary file splitter & joiner: FFSJ v3.3
 14915                                  
 14916                                  ;--------------------------------------------------------------
 14917                                  ; SYSINIT.TXT (27/01/1983)
 14918                                  ;--------------------------------------------------------------
 14919                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14920                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14921                                  ;performed any  initialization  it  needs  to  do.   Control is
 14922                                  ;transfered with a long jump to the external  variable  SYSINIT
 14923                                  ;
 14924                                  ;
 14925                                  ;   The OEM  has  the  following  variables declared external:
 14926                                  ;
 14927                                  ;   CURRENT_DOS_LOCATION    WORD
 14928                                  ;
 14929                                  ;This word  contains  the  segment  number of the DOS before it
 14930                                  ;is relocated.  The OEM bios must set this value.
 14931                                  ;
 14932                                  ;   FINAL_DOS_LOCATION      WORD
 14933                                  ;
 14934                                  ;This word contains the segment number of the DOS after SYSINIT
 14935                                  ;moves it.  The OEM bios must set this value.
 14936                                  ;
 14937                                  ;   DEVICE_LIST             DWORD
 14938                                  ;
 14939                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14940                                  ;character and block device drivers.  The  OEM  must  set  this
 14941                                  ;value.
 14942                                  ;
 14943                                  ;   MEMORY_SIZE             WORD
 14944                                  ;
 14945                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14946                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14947                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14948                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14949                                  ;and read it back until it gets a mismatch.
 14950                                  ;
 14951                                  ;   DEFAULT_DRIVE           BYTE
 14952                                  ;
 14953                                  ;This is  the initial default drive when the system first comes
 14954                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14955                                  ;it then drive a is assumed.
 14956                                  ;
 14957                                  ;   BUFFERS                 BYTE
 14958                                  ;
 14959                                  ;This is  the  default  number of buffers for the system.  This
 14960                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14961                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14962                                  ;
 14963                                  ;   FILES                   BYTE
 14964                                  ;
 14965                                  ;This is  the  default  number  of  files for the system.  This
 14966                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14967                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14968                                  ;
 14969                                  ;   SYSINIT                 FAR
 14970                                  ;
 14971                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14972                                  ;this label at the end of its INIT code.
 14973                                  ;
 14974                                  ;   The OEM  has  the  following  variables declared public:
 14975                                  ;
 14976                                  ;   RE_INIT                 FAR
 14977                                  ;
 14978                                  ;This is an entry point which allows the BIOS to do some INIT
 14979                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14980                                  ;PRESERVED.  On entry DS points to the first available memory
 14981                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14982                                  ;prefix which represents  the  "program"  currently  running.
 14983                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14984                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14985                                  ;that  no  memory  is  allocated to it, it is running in free
 14986                                  ;memory.
 14987                                  ;NOTES:
 14988                                  ;     At the time this routine is called SYSINIT occupies the
 14989                                  ;highest 10K of memory ("highest" is determined by the  value
 14990                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14991                                  ;     Since this is called AFTER DOS is initialized, you can
 14992                                  ;make system calls.  This also implies that the code for this
 14993                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14994                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14995                                  ;     If you don't want  anything done just set this to point
 14996                                  ;at a FAR RET instruction.
 14997                                  
 14998                                  ; ----------------------------------------------------------------------
 14999                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 15000                                  ; ----------------------------------------------------------------------
 15001                                  
 15002                                  ;include version.inc
 15003                                  ; ----------------------------------------------------------------------
 15004                                  
 15005                                  ;FALSE   EQU     0
 15006                                  ;TRUE    EQU     0FFFFh
 15007                                  
 15008                                  ;IBMVER	    EQU     TRUE
 15009                                  ;IBMCOPYRIGHT EQU   FALSE
 15010                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 15011                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 15012                                  ;MSVER      EQU     FALSE
 15013                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 15014                                  ;KANJI      EQU     FALSE
 15015                                  
 15016                                  ;(MSDOS 6.0, versiona.inc, 1991)
 15017                                  ; ----------------------------------------------------------------------
 15018                                  ;MAJOR_VERSION  EQU	6
 15019                                  ;;MINOR_VERSION	EQU	0	;6.00
 15020                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 15021                                  
 15022                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 15023                                  ; ----------------------------------------------------------------------
 15024                                  MAJOR_VERSION   EQU	5
 15025                                  MINOR_VERSION   EQU	0
 15026                                  
 15027                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 15028                                  
 15029                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 15030                                  				; currently 0.
 15031                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 15032                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 15033                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 15034                                  
 15035                                  ;      if1
 15036                                  ;      %OUT  ... for DOS Version 5.00 ...
 15037                                  ;      endif
 15038                                  
 15039                                         ;******************************
 15040                                         ;Each assembler program should:
 15041                                         ;  mov ah,030h                   ;DOS Get Version function
 15042                                         ;  int 021h                      ;Version ret. in AX,minor version first
 15043                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 15044                                         ;  jne error_handler             ; EXACT version match.
 15045                                         ;******************************
 15046                                  
 15047                                  ; ----------------------------------------------------------------------
 15048                                  ; device definitions
 15049                                  
 15050                                  ;Attribute bit masks
 15051                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 15052                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 15053                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 15054                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 15055                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 15056                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 15057                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 15058                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 15059                                  
 15060                                  ; The device table list has the form:
 15061                                  struc	SYSDEV
 15062 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 15063 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 15064 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 15065 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 15066 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 15067                                  .size:
 15068                                  endstruc
 15069                                  
 15070                                  ;Static Reguest Header
 15071                                  struc	SRHEAD
 15072 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 15073 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 15074 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 15075 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 15076 00000005 ????????????????                	resb 8		;Reserved for queue links
 15077                                  .size:
 15078                                  endstruc
 15079                                  
 15080                                  ;Status word masks
 15081                                  STERR   EQU     8000H           ;Bit 15 - Error
 15082                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 15083                                  STDON   EQU     0100H           ;Bit 8 - Done
 15084                                  STECODE EQU     00FFH           ;Error code
 15085                                  WRECODE EQU     0
 15086                                  
 15087                                  ;Function codes
 15088                                  DEVINIT EQU     0               ;Initialization
 15089                                  DINITHL EQU     26              ;Size of init header
 15090                                  DEVMDCH EQU     1               ;Media check
 15091                                  DMEDHL  EQU     15              ;Size of media check header
 15092                                  DEVBPB  EQU     2               ;Get BPB
 15093                                  DEVRDIOCTL EQU  3               ;IOCTL read
 15094                                  DBPBHL  EQU     22              ;Size of Get BPB header
 15095                                  DEVRD   EQU     4               ;Read
 15096                                  DRDWRHL EQU     22              ;Size of RD/WR header
 15097                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 15098                                  DRDNDHL EQU     14              ;Size of non destructive read header
 15099                                  DEVIST  EQU     6               ;Input status
 15100                                  DSTATHL EQU     13              ;Size of status header
 15101                                  DEVIFL  EQU     7               ;Input flush
 15102                                  DFLSHL  EQU     15              ;Size of flush header
 15103                                  DEVWRT  EQU     8               ;Write
 15104                                  DEVWRTV EQU     9               ;Write with verify
 15105                                  DEVOST  EQU     10              ;Output status
 15106                                  DEVOFL  EQU     11              ;Output flush
 15107                                  DEVWRIOCTL EQU  12              ;IOCTL write
 15108                                  
 15109                                  ; ----------------------------------------------------------------------
 15110                                  struc	SYS_FCB
 15111 00000000 ??                      .fcb_drive:	resb 1
 15112 00000001 ????????????????        .fcb_name:	resb 8
 15113 00000009 ??????                  .fcb_ext:	resb 3
 15114 0000000C ????                    .fcb_EXTENT:	resw 1
 15115 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15116 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15117                                                          ; word
 15118 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15119 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15120 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15121 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15122                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15123                                                          ; If file, bit 6=0 if dirty
 15124                                                          ; If I/O device, bit 6=0 if EOF (input)
 15125                                                          ;               Bit 5=1 if Raw mode
 15126                                                          ;               Bit 0=1 if console input device
 15127                                                          ;               Bit 1=1 if console output device
 15128                                                          ;               Bit 2=1 if null device
 15129                                                          ;               Bit 3=1 if clock device
 15130 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15131 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15132 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15133 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15134 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15135 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15136                                  .size:
 15137                                  endstruc
 15138                                  
 15139                                  ; ----------------------------------------------------------------------
 15140                                  ; Field definition for I/O buffer information
 15141                                  
 15142                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15143                                  
 15144                                  struc buffinfo
 15145 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15146 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15147 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15148                                  			; SFT table index (bit 7 = 1)
 15149                                  			; = FFh if buffer free
 15150 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15151                                  			;	= 0 if Local device buffer
 15152                                  			; Bit 6 = 1 if buffer dirty
 15153                                  			; Bit 5 = Reserved
 15154                                  			; Bit 4 = Search bit (bit 7 = 1)
 15155                                  			; Bit 3 = 1 if buffer is DATA
 15156                                  			; Bit 2 = 1 if buffer is DIR
 15157                                  			; Bit 1 = 1 if buffer is FAT
 15158                                  			; Bit 0 = Reserved
 15159 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15160                                  ; The next two items are often refed as a word (bit 7 = 0)
 15161 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15162 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15163 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15164 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15165 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15166                                  .size:
 15167                                  endstruc
 15168                                  
 15169                                  %define buf_offset	dword [buf_sector]
 15170                                  			;For bit 7 = 1, this is the byte
 15171                                  			;offset of the start of the buffer in
 15172                                  			;the file pointed to by buf_ID.  Thus
 15173                                  			;the buffer starts at location
 15174                                  			;buf_offset in the file and contains
 15175                                  			;buf_fill bytes.
 15176                                  
 15177                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15178                                  
 15179                                  
 15180                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15181                                  
 15182                                  ;Flag byte masks
 15183                                  buf_isnet	EQU	10000000B
 15184                                  buf_dirty	EQU	01000000B
 15185                                  ;***
 15186                                  buf_visit	EQU	00100000B
 15187                                  ;***
 15188                                  buf_snbuf	EQU	00010000B
 15189                                  
 15190                                  buf_isDATA	EQU	00001000B
 15191                                  buf_isDIR	EQU	00000100B
 15192                                  buf_isFAT	EQU	00000010B
 15193                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15194                                  
 15195                                  buf_NetID	EQU	bufinsiz
 15196                                  
 15197                                  ; ----------------------------------------------------------------------
 15198                                  
 15199                                  ; ----------------------------------------------------------------------
 15200                                  ;**	DPB - Drive Parameter Block
 15201                                  
 15202                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15203                                  
 15204                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15205                                  ;	possibly inaccurate deductions from code study... - jgl
 15206                                  ;
 15207                                  ;	The DPB is DOS's main structure for describing block devices.
 15208                                  ;	It contains info about the "Drive" intermingled with info about
 15209                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15210                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15211                                  ;
 15212                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15213                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15214                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15215                                  
 15216                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15217                                  
 15218                                  ; 12/05/2019 - Retro DOS v4.0
 15219                                  
 15220                                  struc	DPB
 15221 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15222 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15223 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15224 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15225 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15226 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15227 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15228 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15229 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15230 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15231                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15232 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15233 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15234 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15235 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15236 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15237                                  				; check the first time this DPB is used
 15238 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15239 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15240 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15241                                  .size:
 15242                                  endstruc
 15243                                  
 15244                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15245                                  
 15246                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15247                                  
 15248                                  ; ----------------------------------------------------------------------
 15249                                  ; 26/03/2018
 15250                                  
 15251                                  ; IOCTL SUB-FUNCTIONS
 15252                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15253                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15254                                  IOCTL_READ_HANDLE	EQU	2
 15255                                  IOCTL_WRITE_HANDLE	EQU	3
 15256                                  IOCTL_READ_DRIVE	EQU	4
 15257                                  IOCTL_WRITE_DRIVE	EQU	5
 15258                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15259                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15260                                  IOCTL_CHANGEABLE?	EQU	8
 15261                                  IOCTL_SHARING_RETRY	EQU	11
 15262                                  GENERIC_IOCTL_HANDLE	EQU	12
 15263                                  GENERIC_IOCTL		EQU	13
 15264                                  
 15265                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15266                                  RAWIO			EQU	8
 15267                                  
 15268                                  ; RAWIO SUB-FUNCTIONS
 15269                                  GET_DEVICE_PARAMETERS	EQU	60H
 15270                                  SET_DEVICE_PARAMETERS	EQU	40H
 15271                                  READ_TRACK		EQU	61H
 15272                                  WRITE_TRACK		EQU	41H
 15273                                  VERIFY_TRACK		EQU	62H
 15274                                  FORMAT_TRACK		EQU	42H
 15275                                  
 15276                                  ; DEVICETYPE VALUES
 15277                                  MAX_SECTORS_IN_TRACK	EQU	63
 15278                                  DEV_5INCH		EQU	0
 15279                                  DEV_5INCH96TPI		EQU	1
 15280                                  DEV_3INCH720KB		EQU	2
 15281                                  DEV_8INCHSS		EQU	3
 15282                                  DEV_8INCHDS		EQU	4
 15283                                  DEV_HARDDISK		EQU	5
 15284                                  DEV_OTHER		EQU	7
 15285                                  ;DEV_3INCH1440KB	EQU	7
 15286                                  DEV_3INCH2880KB		EQU	9
 15287                                  ; Retro DOS v2.0 - 26/03/2018
 15288                                  ;;DEV_TAPE		EQU	6
 15289                                  ;;DEV_ERIMO		EQU	8
 15290                                  ;DEV_3INCH2880KB	EQU	9
 15291                                  DEV_3INCH1440KB		EQU	10
 15292                                  
 15293                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15294                                  					; CURRENTLY SUPPORT.
 15295                                  MAX_DEV_TYPE		EQU	10
 15296                                  
 15297                                  struc A_SECTORTABLE
 15298 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15299 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15300                                  .size:
 15301                                  endstruc
 15302                                  
 15303                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15304                                  
 15305                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15306                                  ;
 15307                                  ;	The BPB contains information about the disk structure.  It dates
 15308                                  ;	back to the earliest FAT systems and so FAT information is
 15309                                  ;	intermingled with physical driver information.
 15310                                  ;
 15311                                  ;	A boot sector contains a BPB for its device; for other disks
 15312                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15313                                  ;	information in the DPB.
 15314                                  ;
 15315                                  ;	The BDS structure contains a BPB within it.
 15316                                  
 15317                                  struc A_BPB
 15318 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15319 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15320 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15321 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15322 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15323 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15324 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15325 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15326 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15327 0000000F ????                    .BPB_HEADS:		resw	1
 15328 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15329 00000013 ????                    			resw	1
 15330 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15331 00000017 ????                    			resw	1
 15332 00000019 ????????????            			resb	6	; NOTE:  many times these
 15333                                  ;					; 	 6 bytes are omitted
 15334                                  ;					;	 when BPB manipulations
 15335                                  ;					;	 are performed!
 15336                                  .size:
 15337                                  endstruc
 15338                                  
 15339                                  struc A_DEVICEPARAMETERS
 15340 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15341 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15342 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15343 00000004 ????                    .DP_CYLINDERS:		resw	1
 15344 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15345 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15346 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15347 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15348                                  endstruc
 15349                                  
 15350                                  ; ----------------------------------------------------------------------
 15351                                  ; structure, equates for devmark for mem command.
 15352                                  
 15353                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15354                                  
 15355                                  struc devmark
 15356 00000000 ??                       .id:	    resb 1
 15357 00000001 ????                     .seg:	    resw 1
 15358 00000003 ????                     .size:	    resw 1
 15359 00000005 ??????                   .dum:	    resb 3
 15360 00000008 ????????????????         .filename: resb 8
 15361                                  endstruc
 15362                                  
 15363                                  devmark_stk	equ	'S'
 15364                                  devmark_device	equ	'D'
 15365                                  devmark_ifs	equ	'I'
 15366                                  devmark_buf	equ	'B'
 15367                                  devmark_cds	equ	'L' ; lastdrive
 15368                                  devmark_files	equ	'F'
 15369                                  devmark_fcbs	equ	'X'
 15370                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15371                                  devmark_ems_stub equ	'E'
 15372                                  
 15373                                  setbrkdone	equ	00000001b
 15374                                  for_devmark	equ	00000010b
 15375                                  not_for_devmark equ	11111101b
 15376                                  
 15377                                  ; ----------------------------------------------------------------------
 15378                                  ; Memory arena structure
 15379                                  
 15380                                  ; 24/03/2019 - Retro DOS v4.0 
 15381                                  ; (MSDOS 6.0, ARENA.INC)
 15382                                  
 15383                                  ;** Arena Header
 15384                                  
 15385                                  struc ARENA
 15386 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15387 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15388 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15389 00000005 ??????                  .RESERVED	resb 3		; reserved
 15390 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15391                                  endstruc
 15392                                  
 15393                                  ; 12/04/2019
 15394                                  
 15395                                  arena_owner_system	EQU 0	; free block indication
 15396                                  
 15397                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15398                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15399                                  
 15400                                  ; ----------------------------------------------------------------------
 15401                                  ; Process data block (otherwise known as program header)
 15402                                  
 15403                                  ; 23/03/2019 - Retro DOS v4.0
 15404                                  
 15405                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15406                                  
 15407                                  FILPERPROC	EQU     20
 15408                                  
 15409                                  struc PDB	; Process_data_block
 15410 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15411 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15412 00000004 ??                                      resb 1
 15413 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15414 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15415 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15416 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15417 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15418 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15419 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15420 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15421 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15422 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15423 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15424 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15425 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15426 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15427 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15428 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15429 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15430 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15431 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15432 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15433 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15434 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15435                                  ;.size:
 15436                                  endstruc
 15437                                  
 15438                                  ; ----------------------------------------------------------------------
 15439                                  ; <system call definitions>
 15440                                  
 15441                                  ; 23/03/2019 - Retro DOS v4.0
 15442                                  
 15443                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15444                                  
 15445                                  ABORT                           EQU 0   ;  0      0
 15446                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15447                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15448                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15449                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15450                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15451                                  RAW_CON_IO                      EQU 6   ;  6      6
 15452                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15453                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15454                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15455                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15456                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15457                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15458                                  DISK_RESET                      EQU 13  ; 13      D
 15459                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15460                                  FCB_OPEN                        EQU 15  ; 15      F
 15461                                  FCB_CLOSE                       EQU 16  ; 16     10
 15462                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15463                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15464                                  FCB_DELETE                      EQU 19  ; 19     13
 15465                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15466                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15467                                  FCB_CREATE                      EQU 22  ; 22     16
 15468                                  FCB_RENAME                      EQU 23  ; 23     17
 15469                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15470                                  SET_DMA                         EQU 26  ; 26     1A
 15471                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15472                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15473                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15474                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15475                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15476                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15477                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15478                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15479                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15480                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15481                                  GET_DATE                        EQU 42  ; 42     2A
 15482                                  SET_DATE                        EQU 43  ; 43     2B
 15483                                  GET_TIME                        EQU 44  ; 44     2C
 15484                                  SET_TIME                        EQU 45  ; 45     2D
 15485                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15486                                  ; Extended functionality group
 15487                                  GET_DMA                         EQU 47  ; 47     2F
 15488                                  GET_VERSION                     EQU 48  ; 48     30
 15489                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15490                                  GET_DPB                         EQU 50  ; 50     32
 15491                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15492                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15493                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15494                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15495                                  CHAR_OPER                       EQU 55  ; 55     37
 15496                                  INTERNATIONAL                   EQU 56  ; 56     38
 15497                                  ;   Directory Group
 15498                                  MKDIR                           EQU 57  ; 57     39
 15499                                  RMDIR                           EQU 58  ; 58     3A
 15500                                  CHDIR                           EQU 59  ; 59     3B
 15501                                  ;   File Group
 15502                                  CREAT                           EQU 60  ; 60     3C
 15503                                  OPEN                            EQU 61  ; 61     3D
 15504                                  CLOSE                           EQU 62  ; 62     3E
 15505                                  READ                            EQU 63  ; 63     3F
 15506                                  WRITE                           EQU 64  ; 64     40
 15507                                  UNLINK                          EQU 65  ; 65     41
 15508                                  LSEEK                           EQU 66  ; 66     42
 15509                                  CHMOD                           EQU 67  ; 67     43
 15510                                  IOCTL                           EQU 68  ; 68     44
 15511                                  XDUP                            EQU 69  ; 69     45
 15512                                  XDUP2                           EQU 70  ; 70     46
 15513                                  CURRENT_DIR                     EQU 71  ; 71     47
 15514                                  ;    Memory Group
 15515                                  ALLOC                           EQU 72  ; 72     48
 15516                                  DEALLOC                         EQU 73  ; 73     49
 15517                                  SETBLOCK                        EQU 74  ; 74     4A
 15518                                  ;    Process Group
 15519                                  EXEC                            EQU 75  ; 75     4B
 15520                                  EXIT                            EQU 76  ; 76     4C
 15521                                  WAITPROCESS			EQU 77  ; 77     4D
 15522                                  FIND_FIRST                      EQU 78  ; 78     4E
 15523                                  ;   Special Group
 15524                                  FIND_NEXT                       EQU 79  ; 79     4F
 15525                                  ; SPECIAL SYSTEM GROUP
 15526                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15527                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15528                                  GET_IN_VARS                     EQU 82  ; 82     52
 15529                                  SETDPB                          EQU 83  ; 83     53
 15530                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15531                                  DUP_PDB                         EQU 85  ; 85     55
 15532                                  RENAME                          EQU 86  ; 86     56
 15533                                  FILE_TIMES                      EQU 87  ; 87     57
 15534                                  ;
 15535                                  ALLOCOPER			EQU 88	; 88     58	
 15536                                  ; Network extention system calls
 15537                                  GetExtendedError		EQU 89	; 89	 59
 15538                                  CreateTempFile			EQU 90	; 90	 5A
 15539                                  CreateNewFile			EQU 91	; 91	 5B
 15540                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15541                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15542                                  					;	    CloseByName, CloseUser,
 15543                                  					;	    CloseUserProcess,
 15544                                  					;	    GetOpenFileList
 15545                                  UserOper			EQU 94	; 94	 5E Get and Set
 15546                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15547                                  xNameTrans			EQU 96	; 96	 60
 15548                                  PathParse			EQU 97	; 97	 61
 15549                                  GetCurrentPSP			EQU 98	; 98	 62
 15550                                  Hongeul 			EQU 99	; 99	 63
 15551                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15552                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15553                                  GetExtCntry			EQU 101 ; 101	 65
 15554                                  GetSetCdPg			EQU 102 ; 102	 66
 15555                                  ExtHandle			EQU 103 ; 103	 67
 15556                                  Commit				EQU 104 ; 104	 68
 15557                                  GetSetMediaID			EQU 105 ; 105	 69
 15558                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15559                                  ExtOpen 			EQU 108 ; 108	 6C
 15560                                  ;
 15561                                  ;ifdef ROMEXEC
 15562                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15563                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15564                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15565                                  ;endif
 15566                                  ;
 15567                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15568                                  OEM_C1				EQU 249 ; 249	 F9
 15569                                  OEM_C2				EQU 250 ; 250	 FA
 15570                                  OEM_C3				EQU 251 ; 251	 FB
 15571                                  OEM_C4				EQU 252 ; 252	 FC
 15572                                  OEM_C5				EQU 253 ; 253	 FD
 15573                                  OEM_C6				EQU 254 ; 254	 FE
 15574                                  OEM_C7				EQU 255 ; 255	 FF
 15575                                  
 15576                                  ; ----------------------------------------------------------------------
 15577                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15578                                  ; ----------------------------------------------------------------------
 15579                                  
 15580                                  ;;	IF	STACKSW
 15581                                  
 15582                                  ;;
 15583                                  ;; Internal Stack Parameters
 15584                                  ;EntrySize		equ	8
 15585                                  ;
 15586                                  ;MinCount		equ	8
 15587                                  ;DefaultCount		equ	9
 15588                                  ;MaxCount		equ	64
 15589                                  ;
 15590                                  ;MinSize 		equ	32
 15591                                  ;DefaultSize		equ	128
 15592                                  ;MaxSize 		equ	512
 15593                                  
 15594                                  ;;	ENDIF
 15595                                  
 15596                                  ; ----------------------------------------------------------------------
 15597                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15598                                  ; ----------------------------------------------------------------------
 15599                                  					  ;;Rev 3.30 Modification
 15600                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15601                                  									  
 15602                                  ;*******************************					  
 15603                                  ;System Service call ( Int 15h )					  
 15604                                  ;*******************************					  
 15605                                  ;Function AH = 0C0h, Return system configuration			  
 15606                                  ;For PC and PCJR on return:						  
 15607                                  ;	(AH)	= 80h							  
 15608                                  ;	(CY)	= 1							  
 15609                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15610                                  ;	(AH)	= 86h							  
 15611                                  ;	(CY)	= 1							  
 15612                                  ;For all others:							  
 15613                                  ;	(AH)	= 0							  
 15614                                  ;	(CY)	= 0							  
 15615                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15616                                  ; System descriptor :							  
 15617                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15618                                  ;				minimum length = 8			  
 15619                                  ;	DB	xx		model byte				  
 15620                                  ;				0FFh	= PC				  
 15621                                  ;				0FEh	= PC/XT, Portable		  
 15622                                  ;				0FDh	= PC/JR 			  
 15623                                  ;				0FCh	= PC/AT				  
 15624                                  ;				0F9h	= Convertable			  
 15625                                  ;				0F8h	= Model 80			  
 15626                                  ;				0E0 thru 0EFh = reserved		  
 15627                                  ;									  
 15628                                  ;	DB	xx		secondary model byte			  
 15629                                  ;				000h	= PC1				  
 15630                                  ;				000h	= PC/XT, Portable		  
 15631                                  ;				000h	= PC/JR 			  
 15632                                  ;				000h	= PC/AT 			  
 15633                                  ;				001h	= PC/AT Model 339		  
 15634                                  ;				003h	= PC/RT				  
 15635                                  ;				000h	= Convertable			  
 15636                                  ;									  
 15637                                  ;	DB	xx		bios revision level			  
 15638                                  ;				00 for first release, subsequent release  
 15639                                  ;				of code with same model byte and	  
 15640                                  ;				secondary model byte require revison level
 15641                                  ;				to increase by one.			  
 15642                                  ;									  
 15643                                  ;	DB	xx		feature information byte 1		  
 15644                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15645                                  ;					 = 0, DMA channel 3 not used	  
 15646                                  ;									  
 15647                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15648                                  ;					 = 0, 2nd Interrupt chip not present
 15649                                  ;									  
 15650                                  ;				00X00000 = 1, Real Time Clock present	  
 15651                                  ;					 = 0, Real Time Clock not present 
 15652                                  ;									  
 15653                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15654                                  ;						called in keyboard interrupt
 15655                                  ;						(Int 09h).		  
 15656                                  ;					 = 0, Keyboard escape sequence not
 15657                                  ;						called. 		  
 15658                                  ;				0000XXXX reserved			  
 15659                                  ;									  
 15660                                  ;	DB	xx		feature information byte 2 - reserved	  
 15661                                  ;									  
 15662                                  ;	DB	xx		feature information byte 2 - reserved	  
 15663                                  ;									  
 15664                                  ;	DB	xx		feature information byte 2 - reserved	  
 15665                                  ;									  
 15666                                  ;	DB	xx		feature information byte 2 - reserved	  
 15667                                  ;									  
 15668                                  
 15669                                  ; 22/03/2019									  
 15670                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15671 00000000 ????                    .bios_sd_leng:		resw 1				  
 15672 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15673                                  .bios_sd_scnd_modelbyte: 
 15674 00000003 ??                      			resb 1					  
 15675 00000004 ??                      			resb 1					  
 15676 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15677 00000006 ????????                			resb 4					  
 15678                                  endstruc					  
 15679                                  									  
 15680                                  ;FeatureByte1	bit map equates 					  
 15681                                  DMAchannel3		equ 10000000b					  
 15682                                  ScndIntController	equ 01000000b					  
 15683                                  RealTimeClock		equ 00100000b					  
 15684                                  KeyEscapeSeq		equ 00010000b					  
 15685                                  					;;End of Modification
 15686                                  
 15687                                  ; ----------------------------------------------------------------------
 15688                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15689                                  ; ----------------------------------------------------------------------
 15690                                  ; 22/03/2019 - Retro DOS v4.0
 15691                                  
 15692                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15693                                  
 15694                                  struc SysInitVars
 15695                                  ; MSDOS 3.3
 15696 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15697 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15698 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15699 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15700 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15701 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15702 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15703 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15704 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15705 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15706 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15707 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15708                                  ; MSDOS 6.0
 15709 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15710 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15711 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15712 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15713                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15714 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15715 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15716 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15717 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15718 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15719 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15720 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15721                                  .size:
 15722                                  endstruc
 15723                                  
 15724                                  ;This is added for more information exchage between DOS, BIOS.
 15725                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15726                                  
 15727                                  ; 22/03/2019
 15728                                  struc SysInitVars_Ext
 15729 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15730 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15731                                  endstruc
 15732                                  
 15733                                  ; 09/06/2018
 15734                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15735                                  SYSI_DPB    equ	0
 15736                                  SYSI_SFT    equ 4
 15737                                  SYSI_CLOCK  equ 8
 15738                                  SYSI_CON    equ 12
 15739                                  SYSI_MAXSEC equ 16
 15740                                  SYSI_BUF    equ 18 		
 15741                                  SYSI_CDS    equ 22
 15742                                  SYSI_FCB    equ 26
 15743                                  SYSI_KEEP   equ 30
 15744                                  SYSI_NUMIO  equ	32
 15745                                  SYSI_NCDS   equ	33
 15746                                  SYSI_DEV    equ 34
 15747                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15748                                  SYSI_ATTR	  equ 38
 15749                                  SYSI_STRAT	  equ 40
 15750                                  SYSI_INTER	  equ 42
 15751                                  SYSI_NAME	  equ 44
 15752                                  SYSI_SPLICE	  equ 52
 15753                                  SYSI_IBMDOS_SIZE  equ 53
 15754                                  SYSI_IFS_DOSCALL@ equ 55
 15755                                  SYSI_IFS	  equ 59
 15756                                  SYSI_BUFFERS	  equ 63
 15757                                  SYSI_BOOT_DRIVE   equ 67
 15758                                  SYSI_DWMOVE	  equ 68
 15759                                  SYSI_EXT_MEM	  equ 69
 15760                                  
 15761                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15762                                  
 15763                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15764                                  
 15765                                  struc BUFFINF 	; BUFFINFO
 15766 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15767 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15768 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15769 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15770                                  
 15771 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15772                                  				; are in HMA
 15773 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15774                                  				;  used to read/write on disks
 15775 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15776 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15777 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15778 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15779 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15780 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15781 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15782 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15783 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15784                                  .size:
 15785                                  endstruc
 15786                                  
 15787                                  ; ----------------------------------------------------------------------
 15788                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15789                                  ; ----------------------------------------------------------------------
 15790                                  ; 22/03/2019 - Retro DOS v4.0
 15791                                  
 15792                                  ;**	CDS - Current Directory Structure
 15793                                  ;
 15794                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15795                                  ; network identifiers for each logical name.  The ID field is used dually,
 15796                                  ; both as net ID and for a cluster number for local devices. In the case
 15797                                  ; of local devices, the cluster number will be -1 if there is a potential
 15798                                  ; of the disk being changed or if the path must be recracked.
 15799                                  ;
 15800                                  ;	Some pathnames have special preambles, such as
 15801                                  ;
 15802                                  ;		\\machine\sharename\...
 15803                                  ;	For these pathnames we can't allow ".." processing to back us
 15804                                  ;	up into the special front part of the name.  The CURDIR_END field
 15805                                  ;	holds the address of the seperator character which marks
 15806                                  ;	the split between the special preamble and the regular
 15807                                  ;	path list; ".." processing isn't allowed to back us up past
 15808                                  ;	(i.e., before) CURDIR_END
 15809                                  ;	For the root, it points at the leading /. For net
 15810                                  ;	assignments it points at the end (nul) of the initial assignment:
 15811                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15812                                  ;	  ^		 ^		     ^
 15813                                  
 15814                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15815                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15816                                  
 15817                                  struc 		curdir_list
 15818                                  ; MSDOS 3.3
 15819 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15820 00000043 ????                    .cdir_flags	resw	1		; various flags
 15821 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15822 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15823 0000004D ????                    .cdir_usr_word	resw	1
 15824 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15825                                  ; MSDOS 6.0
 15826 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15827 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15828 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15829                                  .size:
 15830                                  endstruc
 15831                                  
 15832                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15833                                  						; ASM87 which doesn't allow
 15834                                  						; Size directive as a macro
 15835                                  						; argument
 15836                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15837                                  
 15838                                  ;**	Flag values for CURDIR_FLAGS
 15839                                  
 15840                                  ;Flag word masks
 15841                                  curdir_isnet	EQU	1000000000000000B
 15842                                  curdir_isifs	EQU	1000000000000000B
 15843                                  curdir_inuse	EQU	0100000000000000B
 15844                                  curdir_splice	EQU	0010000000000000B
 15845                                  curdir_local	EQU	0001000000000000B
 15846                                  
 15847                                  ; ----------------------------------------------------------------------
 15848                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15849                                  ; ----------------------------------------------------------------------
 15850                                  ; 25/03/2019 - Retro DOS v4.0
 15851                                  
 15852                                  ; system file table
 15853                                  
 15854                                  ;**	System File Table SuperStructure
 15855                                  ;
 15856                                  ;	The system file table entries are allocated in contiguous groups.
 15857                                  ;	There may be more than one such groups; the SF "superstructure"
 15858                                  ;	tracks the groups.
 15859                                  
 15860                                  struc	SF
 15861 00000000 ????????                .SFLink:	resd	1
 15862 00000004 ????                    .SFCount:	resw	1		; number of entries
 15863 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15864                                  .size:
 15865                                  endstruc
 15866                                  
 15867                                  ;**	System file table entry
 15868                                  ;
 15869                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15870                                  
 15871                                  struc	SF_ENTRY
 15872 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15873                                  					;   if FCB then ref count
 15874 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15875 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15876 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15877                                  					; Bit 15 = 1 if remote file
 15878                                  					;	 = 0 if local file or device
 15879                                  					; Bit 14 = 1 if date/time is not to be
 15880                                  					;   set from clock at CLOSE.  Set by
 15881                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15882                                  					;   other reseters of the dirty bit
 15883                                  					;   (WRITE)
 15884                                  					; Bit 13 = Pipe bit (reserved)
 15885                                  					;
 15886                                  					; Bits 0-7 (old FCB_devid bits)
 15887                                  					; If remote file or local file, bit
 15888                                  					; 6=0 if dirty Device ID number, bits
 15889                                  					; 0-5 if local file.
 15890                                  					; bit 7=0 for local file, bit 7
 15891                                  					;      =1 for local I/O device
 15892                                  					; If local I/O device, bit 6=0 if EOF (input)
 15893                                  					;		Bit 5=1 if Raw mode
 15894                                  					;		Bit 0=1 if console input device
 15895                                  					;		Bit 1=1 if console output device
 15896                                  					;		Bit 2=1 if null device
 15897                                  					;		Bit 3=1 if clock device
 15898 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15899                                  					; to device header if local device,
 15900                                  					; points to net device header if
 15901                                  					; remote
 15902 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15903                                  ;.sf_lstclus:	resw	1 ; *	
 15904 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15905 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15906 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15907 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15908                                  ;
 15909                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15910                                  ; ID
 15911                                  ;
 15912 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15913 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15914 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15915                                  ;
 15916                                  ; End of 7 bytes of file-system specific info.
 15917                                  ;
 15918 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15919                                  					; directory entry.  This is used by
 15920                                  					; close to detect file deleted and
 15921                                  					; disk changed errors.
 15922                                  ; SHARING INFO
 15923 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15924 0000002D ????                    .sf_UID:	resw	1
 15925 0000002F ????                    .sf_PID:	resw	1
 15926 00000031 ????                    .sf_MFT:	resw	1
 15927 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15928 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15929                                  .size:
 15930                                  endstruc
 15931                                  
 15932                                  ; ----------------------------------------------------------------------
 15933                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15934                                  ; ----------------------------------------------------------------------
 15935                                  ; 11/06/2018 - Retro DOS v3.0
 15936                                  
 15937                                  ;Equates for COUNTRY INFORMATION.
 15938                                  SetCountryInfo		EQU	1	;country info
 15939                                  SetUcase		EQU	2	;uppercase table
 15940                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15941                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15942                                  SetFileList		EQU	5	;valid file character list
 15943                                  SetCollate		EQU	6	;collating sequence
 15944                                  SetDBCS 		EQU	7	;double byte character set
 15945                                  SetALL			EQU	-1	;all the entries
 15946                                  
 15947                                  ;DOS country and code page information table structure.
 15948                                  ;Internally, IBMDOS gives a pointer to this table.
 15949                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15950                                  ;this structure.
 15951                                  
 15952                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15953 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15954 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15955 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15956 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15957 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15958 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15959                                  
 15960 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15961 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15962                                  
 15963 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15964 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15965                                  
 15966 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15967 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15968                                  
 15969 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15970 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15971 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15972 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15973 00000067 ????                    .ccDFormat:		resw	1	;date format
 15974 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15975                                  					;5 byte of (currency symbol+0)
 15976 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15977 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15978 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15979 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15980 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15981 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15982 00000078 ??                      .ccTFormat:		resb	1	;time format
 15983 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15984 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15985 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15986                                  .size:
 15987                                  endstruc
 15988                                  
 15989                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15990                                  
 15991                                  ; ======================================================================
 15992                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15993                                  ; ======================================================================
 15994                                  ; 21/03/2019 - Retro DOS v4.0
 15995                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15996                                  
 15997                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15998                                  ; 21/10/2022
 15999                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 16000                                  ; 22/10/2022
 16001                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 16002                                  ; 09/12/2022
 16003                                  DOSBIOCODESEG equ IOSYSCODESEG
 16004                                  
 16005                                  ; Note: These offset addresses must be chanqed when the code 
 16006                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 16007                                  
 16008                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 16009                                  
 16010                                  ; 09/12/2022
 16011                                  %if 0
 16012                                  
 16013                                  ; 13/05/2019
 16014                                  
 16015                                  ;IsWin386         equ 08CFh
 16016                                  ;V86_Crit_SetFocus equ 08D0h
 16017                                  ; 21/10/2022
 16018                                  IsWin386          equ 08D0h
 16019                                  V86_Crit_SetFocus equ 08D1h 
 16020                                  
 16021                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 16022                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16023                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 16024                                  
 16025                                  ;SysinitPresent	  equ 08FCh
 16026                                  ; 21/10/2022
 16027                                  SysinitPresent	  equ 08FDh
 16028                                  
 16029                                  inHMA		  equ 000Dh
 16030                                  xms		  equ 000Eh
 16031                                  ;FreeHMAPtr	  equ 08F6h
 16032                                  ;multrk_flag	  equ 0533h
 16033                                  ;ec35_flag	  equ 0535h
 16034                                  ;EOT		  equ 012Eh
 16035                                  ; 21/10/2022
 16036                                  FreeHMAPtr	  equ 08F7h
 16037                                  multrk_flag	  equ 052Fh
 16038                                  ec35_flag	  equ 0531h
 16039                                  EOT		  equ 012Ch
 16040                                  
 16041                                  ;NextStack	  equ 08BFh
 16042                                  ;IT_StackLoc	  equ 08C5h
 16043                                  ;IT_StackSize	  equ 08C9h
 16044                                  ; 21/10/2022
 16045                                  NextStack	  equ 08C0h
 16046                                  IT_StackLoc	  equ 08C6h
 16047                                  IT_StackSize	  equ 08CAh
 16048                                  
 16049                                  ;MoveDOSIntoHMA	  equ 08F8h
 16050                                  ; 21/10/2022
 16051                                  MoveDOSIntoHMA	  equ 08F9h
 16052                                  
 16053                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 16054                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 16055                                  ; 21/10/2022
 16056                                  INT19SEM equ 0640h ; (iosys5.txt)
 16057                                  I19_LST  equ 0641h ; (iosys5.txt)
 16058                                  
 16059                                  %endif
 16060                                  
 16061                                  ; 09/12/2022
 16062                                  seg_reinit equ _seg_reinit
 16063                                  ec35_flag  equ ec35flag		
 16064                                  INT19SEM   equ int19sem
 16065                                  I19_LST    equ i19_lst
 16066                                  
 16067                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 16068                                  INT19OLD08 equ I19_LST+6
 16069                                  INT19OLD09 equ I19_LST+11
 16070                                  INT19OLD0A equ I19_LST+16
 16071                                  INT19OLD0B equ I19_LST+21
 16072                                  INT19OLD0C equ I19_LST+26
 16073                                  INT19OLD0D equ I19_LST+31
 16074                                  INT19OLD0E equ I19_LST+36
 16075                                  INT19OLD70 equ I19_LST+41
 16076                                  INT19OLD72 equ I19_LST+46
 16077                                  INT19OLD73 equ I19_LST+51
 16078                                  INT19OLD74 equ I19_LST+56
 16079                                  INT19OLD76 equ I19_LST+61
 16080                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 16081                                  
 16082                                  ; 09/12/2022
 16083                                  %if 0
 16084                                  
 16085                                  ;keyrd_func	equ 04E9h
 16086                                  ;keysts_func	equ 04EAh
 16087                                  ;t_switch	equ 04F6h
 16088                                  ; 21/10/2022
 16089                                  keyrd_func	equ 04E5h
 16090                                  keysts_func	equ 04E6h
 16091                                  t_switch	equ 04F2h
 16092                                  
 16093                                  ; 22/10/2022
 16094                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 16095                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 16096                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 16097                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 16098                                  
 16099                                  %endif
 16100                                  
 16101                                  ; 09/12/2022
 16102                                  BCODESTART	equ BIOSDATAWORD
 16103                                  RE_INIT		equ re_init
 16104                                  
 16105                                  ; ----------------------------------------------------------------------
 16106                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 16107                                  ; ----------------------------------------------------------------------
 16108                                  ; 15/04/2019 - Retro DOS v4.0
 16109                                  
 16110                                  CONFIG_BEGIN        equ  '['
 16111                                  CONFIG_BREAK        equ  'C'
 16112                                  CONFIG_BUFFERS      equ  'B'
 16113                                  CONFIG_COMMENT      equ  'Y'
 16114                                  CONFIG_COUNTRY      equ  'Q'
 16115                                  CONFIG_DEVICE       equ  'D'
 16116                                  CONFIG_DEVICEHIGH   equ  'U'
 16117                                  CONFIG_DOS          equ  'H'
 16118                                  CONFIG_DRIVPARM     equ  'P'
 16119                                  CONFIG_FCBS         equ  'X'
 16120                                  CONFIG_FILES        equ  'F'
 16121                                  CONFIG_INCLUDE      equ  'J'
 16122                                  CONFIG_INSTALL      equ  'I'
 16123                                  CONFIG_INSTALLHIGH  equ  'W'
 16124                                  CONFIG_LASTDRIVE    equ  'L'
 16125                                  CONFIG_MENUCOLOR    equ  'R'
 16126                                  CONFIG_MENUDEFAULT  equ  'A'
 16127                                  CONFIG_MENUITEM     equ  'E'
 16128                                  CONFIG_MULTITRACK   equ  'M'
 16129                                  CONFIG_NUMLOCK      equ  'N'
 16130                                  CONFIG_REM          equ  '0'
 16131                                  CONFIG_SEMICOLON    equ  ';'
 16132                                  CONFIG_SET          equ  'V'
 16133                                  CONFIG_SHELL        equ  'S'
 16134                                  CONFIG_STACKS       equ  'K'
 16135                                  CONFIG_SUBMENU      equ  'O'
 16136                                  CONFIG_SWITCHES     equ  '1'
 16137                                  
 16138                                  CONFIG_UNKNOWN      equ  'Z'
 16139                                  
 16140                                  CONFIG_OPTION_QUERY equ 80h
 16141                                  
 16142                                  ; ----------------------------------------------------------------------
 16143                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16144                                  ; ----------------------------------------------------------------------
 16145                                  ; 21/03/2019 - Retro DOS v4.0
 16146                                  
 16147                                  true	equ	0FFFFh
 16148                                  false	equ	0
 16149                                  cr	equ	13
 16150                                  lf	equ	10
 16151                                  tab	equ	9
 16152                                  
 16153                                  multMULT	   equ	4Ah
 16154                                  multMULTGETHMAPTR  equ	1
 16155                                  multMULTALLOCHMA   equ	2
 16156                                  
 16157                                  ;NOEXEC    equ	FALSE
 16158                                  
 16159                                  stacksw    equ	true	;include switchable hardware stacks
 16160                                  mycds_size equ	88	;size of curdir_list. if it is not
 16161                                  			;the same, then will generate compile error.
 16162                                  
 16163                                  entrysize   equ     8
 16164                                  
 16165                                  mincount    equ     8
 16166                                  defaultcount equ    9
 16167                                  maxcount    equ     64
 16168                                  
 16169                                  minsize     equ     32
 16170                                  defaultsize equ     128
 16171                                  maxsize     equ     512
 16172                                  
 16173                                  ;%define allocbyte  byte [es:bp+0]
 16174                                  ;%define intlevel   byte [es:bp+1]
 16175                                  ;%define savedsp    word [es:bp+2]
 16176                                  ;%define savedss    word [es:bp+4]
 16177                                  ;%define newsp	    word [es:bp+6]
 16178                                  
 16179                                  allocbyte   equ     0
 16180                                  intlevel    equ     1
 16181                                  savedsp     equ     2
 16182                                  savedss     equ     4
 16183                                  newsp       equ     6
 16184                                  
 16185                                  free	    equ     0
 16186                                  allocated   equ     1
 16187                                  overflowed  equ     2
 16188                                  clobbered   equ     3
 16189                                  
 16190                                  ;---------------------------------------
 16191                                  ; external variable defined in ibmbio module for multi-track
 16192                                  
 16193                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16194                                  			  ; it on after handling config.sys file as a
 16195                                  			  ; default value,if multrk_flag = multrk_off1.
 16196                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16197                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16198                                  
 16199                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16200                                  
 16201                                  SYSINIT$:
 16202                                  	;IF	STACKSW 
 16203                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16204                                  	; include STKMES.INC	;Fatal stack error message
 16205                                  	;   public Endstackcode
 16206                                  ;Endstackcode	label byte
 16207                                  	;ENDIF
 16208                                  
 16209                                  ; 05/07/2018
 16210                                  ; ----------------------------------------------------------------------
 16211                                  ; 04/06/2018 - Retro DOS v3.0
 16212                                  
 16213                                  ; ----------------------------------------------------------------------
 16214                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16215                                  ; ----------------------------------------------------------------------
 16216                                  
 16217                                  ;	MSStack.inc
 16218                                  ;
 16219                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16220                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16221                                  ;	a standard header structure.
 16222                                  ;	Fyi, the following shows the relations between
 16223                                  ;	the interrupt vector and interrupt level.
 16224                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16225                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16226                                  ;	MSSTACK module modifies the following interrupt vectors
 16227                                  ;	to meet the standard Interrupt Sharing standard;
 16228                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16229                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16230                                  ;	should be initialized to indicat whether this interrupt handler is
 16231                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16232                                  ;	program header is initialized in STKINIT.INC module.
 16233                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16234                                  ;
 16235                                  
 16236                                  ;  User specifies the number of stack elements - default = 9
 16237                                  ;						 minimum = 8
 16238                                  ;						 maximum = 64
 16239                                  ;
 16240                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16241                                  ;
 16242                                  ;  Picks a stack from pool of stacks and switches to it
 16243                                  ;
 16244                                  ;  Calls the previously saved interrupt vector after pushing flags
 16245                                  ;
 16246                                  ;  On return, returns the stack to the stack pool
 16247                                  ;
 16248                                  
 16249                                  ; This is a modification of STACKS:
 16250                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16251                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16252                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16253                                  ;    . Allows system to work if the only stack that got too big was the most
 16254                                  ;      deeply nested one
 16255                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16256                                  ; 4. Does not intercept any interupts on a PCjr.
 16257                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16258                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16259                                  
 16260                                  		;EVEN
 16261                                  ;align 2
 16262                                  		; 21/10/2022
 16263                                  
 16264 00000000 0000                    		dw	0	; spare field but leave these in order
 16265 00000002 0000                    stackcount:	dw	0
 16266 00000004 0000                    stackat: 	dw	0
 16267 00000006 0000                    stacksize:	dw	0
 16268 00000008 0000                    stacks:		dw	0
 16269 0000000A 0000                    		dw	0
 16270                                  
 16271 0000000C [0800]                  firstentry:	dw	stacks
 16272 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16273 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16274                                  
 16275                                  ;***********************************************************************
 16276                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16277                                  
 16278                                  ; ----------------------------------------------------------------------
 16279                                  
 16280 00000012 00000000                old02:	dd	0
 16281                                  
 16282                                  int02:
 16283                                  
 16284                                  ; *********************************************************************
 16285                                  ;
 16286                                  ; this is special support for the pc convertible / nmi handler
 16287                                  ;
 16288                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16289                                  ;	caused by using the "out" instructions to certain ports. when this
 16290                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16291                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16292                                  ;	includes other type of interrupts (hardware and software), and
 16293                                  ;	also includes other type of nmi's. when any nmi has occured,
 16294                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16295                                  ;	the software takes specific steps to allow further interrupting.
 16296                                  ;
 16297                                  ;	for pc convertible, the situation where the nmi is generated by the
 16298                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16299                                  ;	otherwords, it is actually a "restartable exception". in this
 16300                                  ;	case, the software handler must be able to get to the stack in
 16301                                  ;	order to figure out what instruction caused the problem, where
 16302                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16303                                  ;	we will not switch stacks in this situation. this situation is
 16304                                  ;	detected by interrogating port 62h, and checking for a bit value
 16305                                  ;	of 80h. if set, *****do not switch stacks*****.
 16306                                  ;
 16307                                  ; *********************************************************************
 16308                                  
 16309 00000016 50                      	push	ax
 16310 00000017 06                      	push	es
 16311 00000018 B800F0                  	mov	ax,0F000h
 16312 0000001B 8EC0                    	mov	es,ax
 16313                                  	; 02/11/2022
 16314 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16315 00000023 07                      	pop	es
 16316 00000024 750C                    	jne	short normal02
 16317                                  
 16318 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16319                                  				; 0-3: values of DIP switches
 16320                                  				; 5: 1=Timer 2 channel out
 16321                                  				; 6: 1=I/O channel check
 16322                                  				; 7: 1=RAM parity check error occurred.
 16323 00000028 A880                    	test	al,80h
 16324 0000002A 7406                    	jz	short normal02
 16325                                  special02:
 16326 0000002C 58                      	pop	ax
 16327 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16328                                  normal02:
 16329 00000032 58                      	pop	ax
 16330 00000033 E81101                  	call	do_int_stacks
 16331 00000036 [1200]                  	dw	old02
 16332                                  
 16333                                  ; ----------------------------------------------------------------------
 16334                                  
 16335 00000038 00000000                old08:	dd	0
 16336                                  
 16337                                  int08:
 16338 0000003C E80801                  	call	do_int_stacks
 16339 0000003F [3800]                  	dw	old08
 16340                                  
 16341                                  ; ----------------------------------------------------------------------
 16342                                  
 16343 00000041 00000000                old09:	dd	0
 16344                                  
 16345                                  int09:
 16346                                  
 16347                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16348                                  ; as its first instruction for compatibility reasons
 16349                                  
 16350 00000045 EB02                    	jmp	short keyboard_lbl
 16351 00000047 90                      	nop
 16352 00000048 00                      	db	0
 16353                                  
 16354                                  keyboard_lbl:
 16355 00000049 E8FB00                  	call	do_int_stacks
 16356 0000004C [4100]                  	dw	old09
 16357                                  
 16358                                  ; ----------------------------------------------------------------------
 16359                                  
 16360 0000004E 00000000                old70:	dd	0
 16361                                  
 16362                                  int70:
 16363 00000052 E8F200                  	call	do_int_stacks
 16364 00000055 [4E00]                  	dw	old70
 16365                                  
 16366                                  ; ----------------------------------------------------------------------
 16367                                  
 16368                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16369                                  ;public	int&a
 16370                                  ;public	old&a
 16371                                  ;public	firstflag&a
 16372                                  ;int&a	proc	far
 16373                                  ;	jmp	short entry_int&a&_stk
 16374                                  ;old&a	dd	  0		;forward pointer
 16375                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16376                                  ;firstflag&a db   0		;the firstly hooked.
 16377                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16378                                  ;	db	7 dup (0)	;reserved for future.
 16379                                  ;entry_int&a&_stk:
 16380                                  ;	call	do_int_stacks
 16381                                  ;	dw	old&a
 16382                                  ;intret_&a:
 16383                                  ;	iret
 16384                                  ;int&a	endp
 16385                                  ;	endm
 16386                                  
 16387                                  ; ----------------------------------------------------------------------
 16388                                  
 16389                                  int0A:
 16390 00000057 EB10                    	jmp	short entry_int0A_stk
 16391 00000059 00000000                old0A:	dd	0	
 16392 0000005D 4B42                    	dw	424Bh
 16393                                  firstflag0A:
 16394 0000005F 00                      	db	0
 16395 00000060 EB0C                    	jmp	short intret_0A
 16396 00000062 00<rep 7h>              	times	7 db 0
 16397                                  
 16398                                  entry_int0A_stk:
 16399 00000069 E8DB00                  	call	do_int_stacks
 16400 0000006C [5900]                  	dw	old0A
 16401                                  intret_0A:
 16402 0000006E CF                      	iret
 16403                                  
 16404                                  ; ----------------------------------------------------------------------
 16405                                  
 16406                                  int0B:
 16407 0000006F EB10                    	jmp	short entry_int0B_stk
 16408 00000071 00000000                old0B:	dd	0	
 16409 00000075 4B42                    	dw	424Bh
 16410                                  firstflag0B:
 16411 00000077 00                      	db	0
 16412 00000078 EB0C                    	jmp	short intret_0B
 16413 0000007A 00<rep 7h>              	times	7 db 0
 16414                                  
 16415                                  entry_int0B_stk:
 16416 00000081 E8C300                  	call	do_int_stacks
 16417 00000084 [7100]                  	dw	old0B
 16418                                  intret_0B:
 16419 00000086 CF                      	iret
 16420                                  
 16421                                  ; ----------------------------------------------------------------------
 16422                                  
 16423                                  int0C:
 16424 00000087 EB10                    	jmp	short entry_int0C_stk
 16425 00000089 00000000                old0C:	dd	0	
 16426 0000008D 4B42                    	dw	424Bh
 16427                                  firstflag0C:
 16428 0000008F 00                      	db	0
 16429 00000090 EB0C                    	jmp	short intret_0C
 16430 00000092 00<rep 7h>              	times	7 db 0
 16431                                  
 16432                                  entry_int0C_stk:
 16433 00000099 E8AB00                  	call	do_int_stacks
 16434 0000009C [8900]                  	dw	old0C
 16435                                  intret_0C:
 16436 0000009E CF                      	iret
 16437                                  
 16438                                  ; ----------------------------------------------------------------------
 16439                                  
 16440                                  int0D:
 16441 0000009F EB10                    	jmp	short entry_int0D_stk
 16442 000000A1 00000000                old0D:	dd	0	
 16443 000000A5 4B42                    	dw	424Bh
 16444                                  firstflag0D:
 16445 000000A7 00                      	db	0
 16446 000000A8 EB0C                    	jmp	short intret_0D
 16447 000000AA 00<rep 7h>              	times	7 db 0
 16448                                  
 16449                                  entry_int0D_stk:
 16450 000000B1 E89300                  	call	do_int_stacks
 16451 000000B4 [A100]                  	dw	old0D
 16452                                  intret_0D:
 16453 000000B6 CF                      	iret
 16454                                  
 16455                                  ; ----------------------------------------------------------------------
 16456                                  
 16457                                  int0E:
 16458 000000B7 EB10                    	jmp	short entry_int0E_stk
 16459 000000B9 00000000                old0E:	dd	0	
 16460 000000BD 4B42                    	dw	424Bh
 16461                                  firstflag0E:
 16462 000000BF 00                      	db	0
 16463 000000C0 EB0C                    	jmp	short intret_0E
 16464 000000C2 00<rep 7h>              	times	7 db 0
 16465                                  
 16466                                  entry_int0E_stk:
 16467 000000C9 E87B00                  	call	do_int_stacks
 16468 000000CC [B900]                  	dw	old0E
 16469                                  intret_0E:
 16470 000000CE CF                      	iret
 16471                                  
 16472                                  ; ----------------------------------------------------------------------
 16473                                  
 16474                                  int72:
 16475 000000CF EB10                    	jmp	short entry_int72_stk
 16476 000000D1 00000000                old72:	dd	0	
 16477 000000D5 4B42                    	dw	424Bh
 16478                                  firstflag72:
 16479 000000D7 00                      	db	0
 16480 000000D8 EB0C                    	jmp	short intret_72
 16481 000000DA 00<rep 7h>              	times	7 db 0
 16482                                  
 16483                                  entry_int72_stk:
 16484 000000E1 E86300                  	call	do_int_stacks
 16485 000000E4 [D100]                  	dw	old72
 16486                                  intret_72:
 16487 000000E6 CF                      	iret
 16488                                  
 16489                                  ; ----------------------------------------------------------------------
 16490                                  
 16491                                  int73:
 16492 000000E7 EB10                    	jmp	short entry_int73_stk
 16493 000000E9 00000000                old73:	dd	0	
 16494 000000ED 4B42                    	dw	424Bh
 16495                                  firstflag73:
 16496 000000EF 00                      	db	0
 16497 000000F0 EB0C                    	jmp	short intret_73
 16498 000000F2 00<rep 7h>              	times	7 db 0
 16499                                  
 16500                                  entry_int73_stk:
 16501 000000F9 E84B00                  	call	do_int_stacks
 16502 000000FC [E900]                  	dw	old73
 16503                                  intret_73:
 16504 000000FE CF                      	iret
 16505                                  
 16506                                  ; ----------------------------------------------------------------------
 16507                                  
 16508                                  int74:
 16509 000000FF EB10                    	jmp	short entry_int74_stk
 16510 00000101 00000000                old74:	dd	0	
 16511 00000105 4B42                    	dw	424Bh
 16512                                  firstflag74:
 16513 00000107 00                      	db	0
 16514 00000108 EB0C                    	jmp	short intret_74
 16515 0000010A 00<rep 7h>              	times	7 db 0
 16516                                  
 16517                                  entry_int74_stk:
 16518 00000111 E83300                  	call	do_int_stacks
 16519 00000114 [0101]                  	dw	old74
 16520                                  intret_74:
 16521 00000116 CF                      	iret
 16522                                  
 16523                                  ; ----------------------------------------------------------------------
 16524                                  
 16525                                  int76:
 16526 00000117 EB10                    	jmp	short entry_int76_stk
 16527 00000119 00000000                old76:	dd	0	
 16528 0000011D 4B42                    	dw	424Bh
 16529                                  firstflag76:
 16530 0000011F 00                      	db	0
 16531 00000120 EB0C                    	jmp	short intret_76
 16532 00000122 00<rep 7h>              	times	7 db 0
 16533                                  
 16534                                  entry_int76_stk:
 16535 00000129 E81B00                  	call	do_int_stacks
 16536 0000012C [1901]                  	dw	old76
 16537                                  intret_76:
 16538 0000012E CF                      	iret
 16539                                  
 16540                                  ; ----------------------------------------------------------------------
 16541                                  
 16542                                  int77:
 16543 0000012F EB10                    	jmp	short entry_int77_stk
 16544 00000131 00000000                old77:	dd	0	
 16545 00000135 4B42                    	dw	424Bh
 16546                                  firstflag77:
 16547 00000137 00                      	db	0
 16548 00000138 EB0C                    	jmp	short intret_77
 16549 0000013A 00<rep 7h>              	times	7 db 0
 16550                                  
 16551                                  entry_int77_stk:
 16552 00000141 E80300                  	call	do_int_stacks
 16553 00000144 [3101]                  	dw	old77
 16554                                  intret_77:
 16555 00000146 CF                      	iret
 16556                                  
 16557                                  ; ----------------------------------------------------------------------
 16558                                  
 16559                                  ;********************************************************************
 16560                                  ;common routines
 16561                                  ;********************************************************************
 16562                                  
 16563                                  ; do interrupt stack switching. the fake return address holds
 16564                                  ; a pointer to the far-pointer of the actual interrupt
 16565                                  ; service routine
 16566                                  
 16567                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16568                                  ; 21/03/2019 - Retro DOS v4.0
 16569                                  
 16570                                  ;allocbyte   equ 0
 16571                                  ;intlevel    equ 1
 16572                                  ;savedsp     equ 2
 16573                                  ;savedss     equ 4
 16574                                  ;newsp       equ 6
 16575                                  
 16576                                  do_int_stacks:
 16577 00000147 50                      	push	ax
 16578 00000148 55                      	push	bp
 16579 00000149 06                      	push	es
 16580 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16581 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16582 00000154 B001                    	mov	al,allocated ; 1
 16583                                  	; 21/10/2022
 16584                                  	;xchg	[es:bp+allocbyte],al 
 16585                                  	; 11/12/2022
 16586 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16587 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16588 0000015C 754F                    	jne	short notfree02
 16589                                  
 16590 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16591                                  
 16592                                  found02:
 16593 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16594 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16595                                  
 16596 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16597                                  
 16598 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16599                                  	; 21/10/2022
 16600                                  	;mov	bp,[es:bp+6]
 16601                                  	; 11/12/2022
 16602                                  	;cmp	[es:bp+0],ax	
 16603 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16604 00000176 7542                    	jne	short foundbad02
 16605                                  
 16606                                  	;mov	ax,es			; point ss,sp to the new stack
 16607                                  	;mov	es,bp
 16608                                  	;mov	bp,sp
 16609                                  	;mov	bp,[bp+6]
 16610                                  	;mov	ss,ax
 16611                                  	;mov	sp,es
 16612                                  	;mov	es,ax
 16613                                  	;mov	bp,[cs:bp]
 16614                                  
 16615                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16616 00000178 55                      	push    bp
 16617 00000179 89E5                    	mov     bp,sp
 16618 0000017B 8B4608                  	mov     ax,[bp+8]
 16619 0000017E 5D                      	pop     bp
 16620 0000017F 06                      	push    es
 16621 00000180 17                      	pop     ss
 16622 00000181 89EC                    	mov     sp,bp
 16623 00000183 89C5                    	mov     bp,ax
 16624                                  	; 11/12/2022
 16625                                  	;mov	bp,[cs:bp+0]	
 16626 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16627                                  
 16628 00000189 9C                      	pushf				; go execute the real interrupt handler
 16629                                  	; 11/12/2022
 16630 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16631                                  	; 21/10/2022
 16632                                  	;call	far [cs:bp+0]
 16633                                  
 16634 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16635                                  	; 11/12/2022
 16636 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16637                                  	; 21/10/2022
 16638                                  	;mov	bp,[es:bp+0]
 16639 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16640 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16641                                  
 16642                                  	; 11/12/2022
 16643                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16644                                  	; 21/10/2022
 16645 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16646 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16647                                  
 16648 000001A6 07                      	pop	es
 16649 000001A7 5D                      	pop	bp			; saved on entry
 16650 000001A8 58                      	pop	ax			; saved on entry
 16651 000001A9 83C402                  	add	sp,2
 16652 000001AC CF                      	iret				; done with this interrupt
 16653                                  
 16654                                  notfree02:
 16655 000001AD 3C01                    	cmp	al,allocated		; error flag
 16656 000001AF 7404                    	je	short findnext02	;  no, continue
 16657                                  	; 11/12/2022
 16658                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16659                                  	; 21/10/2022
 16660 000001B1 26864600                	xchg	[es:bp],al
 16661                                  
 16662                                  findnext02:
 16663 000001B5 E81200                  	call	longpath
 16664 000001B8 EBAA                    	jmp	short found02
 16665                                  
 16666                                  foundbad02:
 16667 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16668 000001BF 72F4                    	jc	short findnext02
 16669 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16670                                  	; 11/12/2022
 16671                                  	;mov	byte [es:bp+allocbyte],clobbered
 16672                                  	; 21/10/2022
 16673 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16674 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16675                                  
 16676                                  ; ----------------------------------------------------------------------
 16677                                  
 16678                                  ; Common routines
 16679                                  
 16680                                  longpath:
 16681                                  	; 21/03/2019
 16682 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16683                                  lploopp:
 16684                                  	; 11/12/2022
 16685                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16686                                  	; 21/10/2022
 16687 000001CF 26807E0000              	cmp	byte [es:bp],free
 16688 000001D4 7512                    	jne	short inuse		;  no, try next one
 16689                                  
 16690 000001D6 B001                    	mov	al,allocated
 16691                                  	; 11/12/2022
 16692                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16693                                  	; 21/10/2022
 16694 000001D8 26864600                	xchg	[es:bp],al
 16695 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16696 000001DE 7414                    	je	short found		;  yes, go use it
 16697                                  
 16698 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16699 000001E2 7404                    	je	short inuse		;  no, check the next one
 16700                                  
 16701                                  	; 11/12/2022
 16702                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16703                                  	; 21/10/2022
 16704 000001E4 26884600                	mov	[es:bp],al
 16705                                  inuse:
 16706 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16707 000001ED 7406                    	je	short fatal
 16708 000001EF 83ED08                  	sub	bp,entrysize
 16709 000001F2 EBDB                    	jmp	short lploopp
 16710                                  found:
 16711 000001F4 C3                      	retn
 16712                                  fatal:
 16713 000001F5 1E                      	push	ds
 16714 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16715 000001F9 8ED8                    	mov	ds,ax
 16716 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16717 00000200 1F                      	pop	ds
 16718 00000201 7504                    	jne	short skip_nmis
 16719                                  
 16720 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16721 00000205 E672                    	out	72h,al
 16722                                  
 16723                                  skip_nmis:
 16724 00000207 FA                      	cli				; disable and mask
 16725 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16726 0000020A E621                    	out	021h,al
 16727 0000020C E6A1                    	out	0A1h,al
 16728                                  
 16729 0000020E 8CCE                    	mov	si,cs
 16730 00000210 8EDE                    	mov	ds,si
 16731 00000212 BE[3902]                	mov	si,fatal_msg
 16732                                  ;SR;
 16733                                  ;   We set all foci to this VM to issue the stack failure message
 16734                                  ;
 16735 00000215 50                      	push	ax
 16736 00000216 1E                      	push	ds
 16737                                  	;;mov	ax,Bios_Data ; 0070h
 16738                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16739                                  	; 21/10/2022
 16740 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16741 0000021A 8ED8                    	mov	ds,ax
 16742                                  
 16743                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16744 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16745 00000221 1F                      	pop	ds
 16746 00000222 58                      	pop	ax
 16747 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16748                                  
 16749                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16750                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16751                                  	; 21/10/2022
 16752 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16753                                  ;
 16754                                  ;SR; We do not bother about the returned status of this call. 
 16755                                  ;
 16756                                  fatal_loop:
 16757 0000022A AC                      	lodsb
 16758 0000022B 3C24                    	cmp	al,'$'
 16759 0000022D 7408                    	je	short fatal_done
 16760                                  
 16761 0000022F B307                    	mov	bl,7
 16762 00000231 B40E                    	mov	ah,14
 16763 00000233 CD10                    	int	10h			; whoops, this enables ints
 16764 00000235 EBF3                    	jmp	short fatal_loop
 16765                                  
 16766                                  fatal_done:
 16767 00000237 EBFE                    	jmp	short fatal_done
 16768                                  
 16769                                  
 16770                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16771                                  ; ----------------------------------------------------------------------
 16772                                  ;	include msbio.cl5		; fatal stack error message
 16773                                  
 16774                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16775                                  
 16776                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16777                                  ; ----------------------------------------------------------------------
 16778                                  ; 04/06/2018 - Retro DOS v3.0
 16779                                  
 16780                                  fatal_msg:
 16781 00000239 0D0A                    	db	0Dh,0Ah
 16782 0000023B 070D0A                  	db	7,0Dh,0Ah
 16783 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16783 00000247 737461636B206F7665-
 16783 00000250 72666C6F770D0A     
 16784 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16784 00000260 6C7465640D0A24     
 16785                                  
 16786                                  endstackcode:
 16787                                  
 16788                                  ; ----------------------------------------------------------------------
 16789                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16790                                  ; ----------------------------------------------------------------------
 16791                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16792                                  
 16793                                  ; 22/03/2019 - Retro DOS v4.0
 16794                                  
 16795                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16796                                  
 16797                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16798                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16799                                  
 16800                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16801                                  ; ----------------------------------------------------------------------
 16802                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16803                                  
 16804                                  SYSINIT:	
 16805 00000267 E91C02                          JMP	GOINIT
 16806                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16807                                  
 16808                                  ; ----------------------------------------------------------------------
 16809                                  
 16810                                  struc DDHighInfo
 16811 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16812 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16813 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16814                                  endstruc
 16815                                  
 16816                                  ; 22/03/2019 - Retro DOS v4.0
 16817                                  
 16818 0000026A 00                      runhigh: db	0
 16819                                  
 16820                                  ; 02/11/2022
 16821                                  ;align 4
 16822                                  
 16823                                  DOSINFO: 
 16824 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16825                                  ;MSDOS:
 16826                                  dos_temp_location: ; dword ; MSDOS 6.0
 16827                                  dosinit:		; MSDOS 6.0
 16828 0000026F 0000                    	dw	0
 16829                                  
 16830                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16831                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16832                                  ;	dw	0
 16833                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16834                                  
 16835                                  CURRENT_DOS_LOCATION:
 16836 00000271 0000                    	dw	0
 16837                                  
 16838                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16839                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16840                                  
 16841                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16842                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16843                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16844                                  
 16845                                  DEVICE_LIST:
 16846 00000273 00000000                	dd	0
 16847                                  
 16848                                  ; 04/06/2018 - Retro DOS v3.0
 16849                                  ; 28/03/2018
 16850                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16851                                  ;
 16852                                  sysi_country:	
 16853 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16854                                  
 16855                                  ; MSDOS 6.0
 16856 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16857                                  
 16858 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16859 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16860                                  
 16861 00000283 0000                    def_php:	dw	0
 16862                                  
 16863                                  ; M022--
 16864                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16865                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16866                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16867                                  ;  the new home.
 16868                                  
 16869                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16870                                  ; 21/10/2022
 16871                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16872                                  
 16873                                  ; 22/10/2022
 16874                                  seg_reinit_ptr:	; label dword
 16875 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16876                                  temp_bcode_seg:
 16877                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16878                                  		; 22/10/2022
 16879 00000287 9C02                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16880                                  
 16881                                  fake_floppy_drv:
 16882 00000289 00                      		db	0	; set to 1 if this machine
 16883                                  				; does not have any floppies!!!
 16884                                  
 16885                                  ; Internal Stack Parameters
 16886                                  
 16887 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16888 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16889 0000028E 00000000                stack_addr:	dd	0	
 16890                                  
 16891                                  ; 05/06/2018 - Retro DOS v3.0
 16892                                  
 16893                                  ; various default values
 16894                                  
 16895 00000292 0100                    MEMORY_SIZE:	dw	1
 16896                                  
 16897                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16898                                  
 16899 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16900 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16901 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16902 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16903 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16904                                  
 16905 0000029D 08                      FILES:	db	8	; enough files for pipe
 16906 0000029E 04                      FCBS:	db	4	; performance for recycling
 16907 0000029F 00                      KEEP:	db	0	; keep original set
 16908 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16909                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16910                                  ;CONFBOT: dw	0
 16911                                  ;ALLOCLIM: dw	0
 16912                                  CONFBOT: ; 02/11/2022
 16913 000002A1 0000                    top_of_cdss: dw 0
 16914                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16915 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16916                                  
 16917 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16918                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16919                                  ; (SYSINIT:02A9h)
 16920                                  command_line:
 16921 000002A9 0200                    	db	2,0
 16922 000002AB 50                      	db	'P'
 16923 000002AC 00                      	db	0
 16924 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16925                                  ; (SYSINIT:0329h)
 16926 00000329 00                      ZERO:	db	0
 16927 0000032A 00                      sepchr:	db	0
 16928 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16929 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16930 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16931                                  
 16932 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16933 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16934                                  
 16935 00000339 0000                    buf_prev_off:	dw	0
 16936                                  
 16937                                          ;IF      NOT NOEXEC
 16938                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16939                                          ;ENDIF
 16940                                  
 16941                                  ; 01/05/2018
 16942                                  COMEXE:
 16943 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16944 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16945 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16946 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16947 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16948 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16949 00000347 0000                    		dw	0
 16950                                  
 16951                                  ; variables for install= command.
 16952                                  
 16953 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16954                                  					;  indicating the pass number
 16955                                  					; 0 - do scan for DOS=HIGH/LOW
 16956                                  					; 1 - load device drivers
 16957                                  					; 2 - was to load IFS
 16958                                  					;      now it is unused
 16959                                  					; 3 - do install=
 16960                                  					; >3 - nop
 16961 0000034A 0000                    install_flag:	dw	0
 16962                                  
 16963                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16964                                  has_installed	equ	00000010b	; sysinit_base installed.
 16965                                  
 16966 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16967 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16968 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16969 00000356 0000                    checksum:	dw	0		; used by sum_up
 16970                                  
 16971 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16972 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16973 0000036D 20                      ldexec_start:	db	' '
 16974 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16975                                  
 16976                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16977                                  
 16978                                  instexe:
 16979 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16980 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16981 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16982 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16983 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16984 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16985 000003CA 0000                    		dw	0
 16986                                  
 16987                                  ; variables for comment=
 16988                                  
 16989 000003CC 00                      com_level:	db	0		; level of " " in command line
 16990 000003CD 00                      cmmt:		db	0		; length of comment string token
 16991 000003CE 00                      cmmt1:		db	0		; token
 16992 000003CF 00                      cmmt2:		db	0		; token
 16993 000003D0 00                      cmd_indicator:	db	0
 16994 000003D1 00                      donotshownum:	db	0
 16995                                  
 16996 000003D2 0000                    count:		dw	0
 16997 000003D4 0000                    org_count:	dw	0
 16998 000003D6 0000                    chrptr:		dw	0
 16999 000003D8 0000                    cntryfilehandle: dw	0
 17000 000003DA 0000                    old_area:	dw	0
 17001 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 17002                                  
 17003                                  bucketptr: ; label dword
 17004                                  bufptr:	   ; label dword		; leave this stuff in order!
 17005 000003DE 0000                    memlo:	dw	0
 17006                                  prmblk:	   ; label word
 17007 000003E0 0000                    memhi:	dw	0
 17008 000003E2 0000                    ldoff:	dw	0
 17009 000003E4 0000                    area:	dw	0
 17010                                  
 17011                                  ; Following is the request packet used to call INIT routines for 
 17012                                  ; all device drivers. Some fields may be accessed individually in
 17013                                  ; the code, and hence have individual labels, but they should not
 17014                                  ; be separated.
 17015                                  
 17016 000003E6 18                      packet:	db	24			; was 22
 17017 000003E7 00                      	db	0
 17018 000003E8 00                      	db	0			; initialize code
 17019 000003E9 0000                    	dw	0
 17020 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 17021                                  
 17022 000003F3 00                      unitcount:	db	0
 17023 000003F4 00000000                break_addr:	dd	0
 17024 000003F8 00000000                bpb_addr:	dd	0
 17025                                  drivenumber:	; 22/10/2022
 17026 000003FC 00                      devdrivenum:	db	0 
 17027 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 17028                                  
 17029                                  ; end of request packet
 17030                                  
 17031                                  ;drivenumber:	db	0  ; 22/03/2019
 17032                                  
 17033                                  toomanydrivesflag:
 17034 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 17035                                  align 2
 17036                                  
 17037                                  BCodeSeg:	; 21/10/2022
 17038 00000400 9C02                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 17039                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 17040                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 17041                                  
 17042                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17043                                  ;; 19/04/2019
 17044                                  ;_timer_lw_:
 17045                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 17046                                  	
 17047                                  ;SR;
 17048                                  ; This is the communication block between the DOS and the BIOS. It starts at
 17049                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 17050                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 17051                                  ;is passed to DOS as part of the DOSINIT call.
 17052                                  ;
 17053                                  
 17054                                  BiosComBlock:
 17055                                  	;dd	Bios_Data:SysinitPresent 
 17056                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 17057 00000402 [FA08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 17058                                  	;dw	KERNEL_SEGMENT ; 0070h
 17059                                  	; 21/10/2022
 17060 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 17061                                  
 17062                                  ;align 2
 17063                                  
 17064                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 17065                                  tempstack:	
 17066 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 17067                                  
 17068                                  ; ----------------------------------------------------------------------------
 17069                                  
 17070                                  	; 22/10/2022 - Retro DOS v4.0
 17071                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 17072                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 17073                                  	; 12/12/2022
 17074                                  	; 22/03/2019 - Retro DOS v4.0
 17075                                  	; 06/07/2018
 17076                                  	; 04/06/2018 - Retro DOS v3.0
 17077                                  ; before doing anything else, let's set the model byte
 17078 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 17079 00000488 CD15                    	int	15h			; *
 17080 0000048A 7216                    	jc	short no_rom_config
 17081                                  
 17082                                  	;cmp	ah,0			; double check
 17083                                  	;jne	short no_rom_config
 17084                                  	; 04/09/2023
 17085 0000048C 08E4                    	or	ah,ah
 17086 0000048E 7512                    	jnz	short no_rom_config
 17087 00000490 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 17088 00000494 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 17089 00000498 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 17090 0000049C 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 17091                                  	;jmp	short SYSIN
 17092                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17093 000004A0 EB2C                    	jmp	short move_myself
 17094                                  
 17095                                  no_rom_config:				; Old ROM
 17096 000004A2 B800F0                  	mov	ax,0F000h
 17097 000004A5 8ED8                    	mov	ds,ax
 17098 000004A7 A0FEFF                  	mov	al,[0FFFEh]
 17099 000004AA 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 17100                                  
 17101                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 17102                                  ; execute the equipment determination interrupt and then
 17103                                  ; check the returned value to see if we have any floppy drives
 17104                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 17105                                  ; see the at tech ref bios listings for help on the equipment
 17106                                  ; flag interrupt (11h)	
 17107                                  
 17108                                  	; 22/10/2022
 17109                                  check_for_fake_floppy:			; entry point for rom_config above
 17110 000004AE CD11                    	int	11h			; check equipment flag
 17111                                  
 17112                                  	; 12/12/2022
 17113 000004B0 A801                    	test	al,1		
 17114                                  	;test	ax,1			; have any floppies?
 17115 000004B2 751A                    	jnz	short move_myself	; yes,normal system
 17116                                  
 17117                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17118                                  ; whether it is an old ROM BIOS or a new one
 17119                                  ;
 17120                                  ; WARNING !!!
 17121                                  ;
 17122                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17123                                  ; here will require an equivalent modification in MSINIT.ASM also
 17124                                  
 17125 000004B4 06                      	push	es
 17126                                  
 17127 000004B5 30C9                    	xor	cl,cl	
 17128 000004B7 B408                    	mov	ah,8			; get disk parameters
 17129 000004B9 B200                    	mov	dl,0			; of drive 0
 17130 000004BB CD13                    	int	13h
 17131                                  
 17132 000004BD 07                      	pop	es
 17133                                  
 17134 000004BE 720E                    	jc	short move_myself	; if error lets assume that the
 17135                                  					;  ROM BIOS lied
 17136                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 17137                                  	;je	short move_myself
 17138                                  	; 04/09/2023
 17139 000004C0 08C9                    	or	cl,cl
 17140 000004C2 740A                    	jz	short move_myself
 17141                                  
 17142 000004C4 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17143 000004C6 7506                    	jnz	short move_myself
 17144                                  
 17145 000004C8 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17146                                  
 17147                                  move_myself:
 17148 000004CE FC                      	cld				; set up move
 17149 000004CF 31F6                    	xor	si,si
 17150 000004D1 89F7                    	mov	di,si
 17151                                  
 17152                                  	; 12/12/2022
 17153 000004D3 0E                      	push	cs
 17154 000004D4 1F                      	pop	ds
 17155                                  
 17156                                  	;mov	cx,[cs:MEMORY_SIZE]
 17157 000004D5 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17158                                  
 17159                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17160                                  ;;;	if	msver
 17161                                  ;	cmp	cx,1		; 1 means do scan
 17162                                  ;	jnz	short noscan
 17163                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17164                                  ;	xor	bx,bx
 17165                                  ;
 17166                                  ;memscan:inc	cx
 17167                                  ;	jz	setend
 17168                                  ;	mov	ds,cx
 17169                                  ;	mov	al,[bx]
 17170                                  ;	not	al
 17171                                  ;	mov	[bx],al
 17172                                  ;	cmp	al,[bx]
 17173                                  ;	not	al
 17174                                  ;	mov	[bx],al
 17175                                  ;	jz	short memscan
 17176                                  ;setend:
 17177                                  ;	mov	cs:[memory_size],cx
 17178                                  ;;;	endif
 17179                                  
 17180                                  ;noscan: 				; cx is mem size in para
 17181                                  ;;
 17182                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17183                                  ;;		  before we try to run.
 17184                                  ;;	       b) in any case, we should check for sufficient memory and give
 17185                                  ;;		  an appropriate error diagnostic if there isn't enough
 17186                                  ;
 17187                                  ;	push	cs
 17188                                  ;	pop	ds
 17189                                  ;
 17190                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17191                                  ;;	  that way it would be easier to slide them down home in a minimal
 17192                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17193                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17194                                  ;;	  temporary home and the final one.  the problem with doing that
 17195                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17196                                  ;
 17197                                  ;	dec	cx			; one para for an arena at end of mem
 17198                                  ;					; in case of UMBs
 17199                                  
 17200                                  	; 22/10/2022
 17201                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17202                                  
 17203                                  	; 12/12/2022
 17204                                  	;push	cs
 17205                                  	;pop	ds
 17206                                  
 17207 000004D9 49                      	dec	cx
 17208                                  
 17209                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17210                                  
 17211 000004DA 31DB                    	xor	bx,bx
 17212 000004DC 8EC3                    	mov	es,bx	; 0
 17213                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17214                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17215                                  	; 29/09/2023
 17216 000004DE 26C41EBC00              	les	bx,[es:(2Fh*4)]
 17217 000004E3 26817F035250            	cmp	word [es:bx+3],'RP'
 17218 000004E9 751B                    	jne	short NoRPL
 17219 000004EB 26807F054C              	cmp	byte [es:bx+5],'L'
 17220 000004F0 7514                    	jne	short NoRPL
 17221                                  
 17222 000004F2 89CA                    	mov	dx,cx			; get TOM into DX
 17223 000004F4 52                      	push	dx
 17224 000004F5 B8064A                  	mov	ax,4A06h
 17225                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17226 000004F8 CD2F                    	int	2Fh			; Get new TOM from any RPL
 17227 000004FA 58                      	pop	ax
 17228 000004FB 89D1                    	mov	cx,dx
 17229 000004FD 39C2                    	cmp	dx,ax
 17230 000004FF 7405                    	je	short NoRPL
 17231                                  	
 17232                                  	; 11/12/2022
 17233                                  	; ds = cs
 17234 00000501 8916[9402]              	mov	[RPLMemTop],dx
 17235                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17236                                  	;mov	[cs:RPLMemTop],dx
 17237                                  	
 17238 00000505 49                      	dec	cx
 17239                                  NoRPL:
 17240 00000506 B8[F037]                	mov	ax,SI_end		; need this much room for sysinit
 17241                                  					; (SI_end == sysinit code size)
 17242 00000509 E8B006                  	call	off_to_para
 17243 0000050C 29C1                    	sub	cx,ax
 17244                                  
 17245                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17246                                  ; code above sysinit in memory
 17247                                  ;
 17248 0000050E 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 17249                                  
 17250 00000512 B8D019                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17251 00000515 E8A406                  	call	off_to_para		; leave this much room for BIOS code
 17252 00000518 29C1                    	sub	cx,ax
 17253 0000051A 8EC1                    	mov	es,cx			; offset where sysinit will be located
 17254                                  
 17255 0000051C B9[F037]                	mov	cx,SI_end		; (sysinit code size)
 17256 0000051F D1E9                    	shr	cx,1			; divide by 2 to get words
 17257 00000521 F3A5                    	rep	movsw			; relocate sysinit
 17258                                  
 17259 00000523 06                      	push	es			; push relocated segment
 17260 00000524 B8[2905]                	mov	ax,SYSIN
 17261 00000527 50                      	push	ax			; push relocated entry point
 17262                                  
 17263 00000528 CB                      	retf				; far jump to relocated sysinit
 17264                                  
 17265                                  ; ----------------------------------------------------------------------------
 17266                                  
 17267                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17268                                  
 17269                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17270                                  	; (SYSINIT:0533h)
 17271                                  SYSIN:
 17272                                  	; Retro DOS 4.0 - 22/03/2019
 17273                                  	; Retro DOS 2.0 - 25/02/2018
 17274                                  
 17275                                  	; 23/04/2019
 17276                                  	;;mov	ax,Bios_Data
 17277                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17278                                  	; 21/10/2022
 17279 00000529 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17280 0000052C 8ED8                    	mov	ds,ax
 17281 0000052E 8C0E[F808]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17282 00000532 C606[FA08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17283                                  
 17284                                  ; first move the MSDOS.SYS image up to a harmless place 
 17285                                  ; on top of our new sysinitseg
 17286                                  
 17287                                  	; 22/10/2022
 17288 00000537 B8[F037]                	mov	ax,SI_end		; how big is sysinitseg?
 17289 0000053A E87F06                  	call	off_to_para
 17290 0000053D 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17291 0000053F 01C8                    	add	ax,cx
 17292 00000541 8EC0                    	mov	es,ax
 17293                                  	
 17294 00000543 31F6                    	xor	si,si
 17295 00000545 89F7                    	mov	di,si
 17296                                  
 17297 00000547 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17298                                  
 17299                                  	;mov	ax,cs	
 17300                                  	;mov	ds,ax
 17301                                  
 17302                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17303                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17304                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17305                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17306                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17307                                  
 17308                                  	; 22/10/2022
 17309 0000054C B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17310 0000054F F3A5                    	rep     movsw
 17311 00000551 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17312                                  
 17313                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17314                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17315                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17316                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17317                                  
 17318                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17319                                  	;mov	ax,cs
 17320                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17321                                  	;mov	ds,ax
 17322                                  
 17323                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17324                                  
 17325                                  ;	; 24/04/2019 
 17326                                  ;;ifndef ROMDOS
 17327                                  ;	mov	ax,[es:3] 		; get offset of dos
 17328                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17329                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17330                                  ;	call	off_to_para		; subtract this much from segment
 17331                                  ;	; 23/04/2019
 17332                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17333                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17334                                  ;;else
 17335                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17336                                  ;;
 17337                                  ;;endif ; ROMDOS
 17338                                  
 17339                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17340                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17341                                  
 17342                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17343                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17344                                  
 17345                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17346                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17347 00000556 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17348                                  
 17349 00000559 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17350                                  	; 02/11/2022
 17351 0000055D E85C06                  	call	off_to_para		; subtract this much from segment
 17352 00000560 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17353                                  
 17354                                  	; Current DOSCODE start address = dword [dosinit]
 17355                                  
 17356                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17357                                  ;; until it is determined whether it will be running in HIMEM or not.
 17358                                  
 17359                                  ;ifndef ROMDOS
 17360                                  
 17361                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17362                                  
 17363                                  	; 22/10/2022
 17364 00000565 8CC0                    	mov	ax,es
 17365 00000567 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17366 0000056A 8EC0                    	mov	es,ax
 17367 0000056C 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17368 00000571 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17369                                  
 17370                                  	;mov	si,BCODE_START ; mov si,30h
 17371                                  	; 09/12/2022
 17372 00000573 BE[3000]                	mov	si,BCODESTART
 17373                                  	; 02/11/2022
 17374 00000576 89F7                    	mov	di,si
 17375                                  	;mov	cx,BCODE_END   ; mov cx,1A60h
 17376                                  	;sub	cx,si
 17377                                  	; 29/09/2023
 17378                                  	BCODESIZE equ BCODEEND-BCODESTART
 17379 00000578 B9A019                  	mov	cx,BCODESIZE
 17380 0000057B D1E9                    	shr	cx,1
 17381 0000057D F3A5                    	rep	movsw			; move Bios_Code into place
 17382                                  
 17383 0000057F 8CC0                    	mov	ax,es			; tell it what segment it's in
 17384 00000581 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17385                                  
 17386                                  ;endif	; not ROMDOS
 17387                                  
 17388                                  ; now call dosinit while it's in its temporary home
 17389                                  
 17390                                  	;mov	ax,cs
 17391                                  	;mov	ds,ax	 
 17392                                  
 17393                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17394                                  
 17395                                  	; 22/10/2022
 17396                                  
 17397 00000586 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17398                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17399 0000058B 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17400                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17401                                  
 17402 00000590 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17403                                  
 17404 00000595 FA                      	cli
 17405 00000596 8CC8                    	mov	ax,cs
 17406 00000598 8ED0                    	mov	ss,ax
 17407                                  
 17408                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17409                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17410                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17411                                  ;SYSINIT:0532h:
 17412                                  
 17413                                  ; 22/10/2022
 17414                                  ; ----------------------------------------------------------------------------
 17415                                  ;SYSINIT:05A6h:
 17416                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17417                                  
 17418                                  	;mov	sp, 05A6h
 17419 0000059A BC9A05                  	mov     sp,locstack		; set stack
 17420                                  
 17421 0000059D FB                      	sti
 17422                                  
 17423                                  ;align 2
 17424                                  	; 30/03/2018
 17425                                  ;LOCSTACK:
 17426                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17427                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17428                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17429                                  
 17430                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17431                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17432                                  
 17433                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17434                                  ; at the top of memory, to its final location in low memory just above the
 17435                                  ; BIOS data. It will then build important DOS data structures in low 
 17436                                  ; memory following the DOS data. It returns (among many other things) the
 17437                                  ; new starting address of free memory.
 17438                                  
 17439 0000059E 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17440                                  			 ; es:di -> sysinitvars_ext
 17441                                  
 17442 000005A3 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17443                                  	
 17444                                  	; 11/12/2022
 17445                                  	; 22/03/2019
 17446 000005A8 0E                      	push	cs
 17447 000005A9 1F                      	pop	ds
 17448                                  	; 22/10/2022
 17449 000005AA A3[8102]                	mov	[hi_doscod_size],ax
 17450 000005AD 890E[7F02]              	mov	[lo_doscod_size],cx
 17451 000005B1 8916[7B02]              	mov	[dos_segreinit],dx
 17452                                  	
 17453                                  	; 11/12/2022
 17454                                  	; ds = cs
 17455                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17456                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17457                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17458                                  
 17459                                  	; 05/06/2018 - Retro DOS v3.0
 17460                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17461                                  
 17462                                  	; 11/12/2022
 17463                                  	; ds = cs
 17464                                  	; 22/10/2022
 17465                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17466 000005B5 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17467                                  	;mov	[cs:DOSINFO],ax
 17468 000005B8 A3[6B02]                	mov	[DOSINFO],ax
 17469                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17470 000005BB 268B4502                	mov	ax,[es:di+2]
 17471                                  	;mov	[cs:DOSINFO+2],ax
 17472 000005BF A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17473                                  
 17474                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17475 000005C2 268B4504                	mov	ax,[es:di+4]
 17476                                  	;mov	[cs:sysi_country],ax
 17477 000005C6 A3[7702]                	mov	[sysi_country],ax
 17478                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17479 000005C9 268B4506                	mov	ax,[es:di+6]
 17480                                  	;mov	[cs:sysi_country+2],ax
 17481 000005CD A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17482                                  
 17483                                  	; 20/04/2019
 17484                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17485                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17486                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17487                                  	; 22/10/2022
 17488                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17489                                  	;;;mov	[dos_segreinit+2],es
 17490                                  	;;mov	[dos_segreinit+2],ax
 17491                                  	;mov	[cs:dos_segreinit+2],ax
 17492                                  	; 11/12/2022
 17493                                  	; ds = cs
 17494 000005D0 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17495 000005D4 8C06[7D02]              	mov	[dos_segreinit+2],es
 17496                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17497                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17498                                  	;mov	[cs:dos_segreinit+2],es
 17499                                  
 17500                                  ; ----------------------------------------------------------------------------
 17501                                  
 17502                                  ;SYSINIT:0577h:
 17503                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17504                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17505                                  
 17506                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17507                                  ;------ Cover up RPL code with an arena
 17508                                  ;SYSINIT:05EBh:
 17509                                  	; 11/12/2022
 17510                                  	; ds = cs
 17511 000005D8 31DB                    	xor	bx,bx
 17512 000005DA 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17513                                  	;cmp	word [RPLMemTop],0
 17514                                  	;;cmp	word [cs:RPLMemTop],0
 17515 000005DE 7450                    	je	short NoRPLArena
 17516                                  
 17517                                  ;------ alloc all memory
 17518                                  
 17519                                  	; 11/12/2022
 17520                                  	;mov	bx,0FFFFh
 17521 000005E0 4B                      	dec	bx
 17522                                  	; bx = 0FFFFh
 17523 000005E1 B448                    	mov	ah,48h
 17524 000005E3 CD21                    	int	21h
 17525                                  			; DOS - 2+ - ALLOCATE MEMORY
 17526                                  			; BX = number of 16-byte paragraphs desired
 17527 000005E5 B448                    	mov	ah,48h
 17528 000005E7 CD21                    	int	21h
 17529                                  
 17530 000005E9 8EC0                    	mov	es,ax			; get it into ES and save it
 17531 000005EB 06                      	push	es
 17532                                  
 17533                                  ;------ resize upto RPL mem
 17534                                  
 17535                                  	; 11/12/2022
 17536                                  	; ds = cs
 17537                                  	;sub	ax,[cs:RPLMemTop]
 17538 000005EC 2B06[9402]              	sub	ax,[RPLMemTop]
 17539 000005F0 F7D8                    	neg	ax
 17540 000005F2 48                      	dec	ax
 17541 000005F3 89C3                    	mov	bx,ax
 17542 000005F5 B44A                    	mov	ah,4Ah
 17543 000005F7 CD21                    	int	21h
 17544                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17545                                  			; ES = segment address of block to change
 17546                                  			; BX = new size in paragraphs
 17547                                  
 17548                                  ;------ allocate the free (RPL MEM)
 17549                                  
 17550 000005F9 BBFFFF                  	mov	bx,0FFFFh
 17551 000005FC B448                    	mov	ah,48h
 17552 000005FE CD21                    	int	21h
 17553 00000600 B448                    	mov	ah,48h
 17554 00000602 CD21                    	int	21h
 17555                                  
 17556                                  ;----- mark that it belongs to RPL
 17557                                  
 17558 00000604 48                      	dec	ax
 17559 00000605 8EC0                    	mov	es,ax
 17560                                  	;mov	word [es:arena_owner],8
 17561 00000607 26C70601000800          	mov	word [es:1],8
 17562                                  	;mov	word [es:arena_name],'RP'
 17563 0000060E 26C70608005250          	mov	word [es:8],'RP'
 17564                                  	;mov	word [es:arena_name+2],'L'
 17565 00000615 26C7060A004C00          	mov	word [es:10],'L'
 17566                                  	;mov	word [es:arena_name+4],0
 17567 0000061C 26C7060C000000          	mov	word [es:12],0
 17568                                  	;mov	word [es:arena_name+6],0
 17569 00000623 26C7060E000000          	mov	word [es:14],0	
 17570                                  
 17571 0000062A 07                              pop     es                      ; get back ptr to first block
 17572 0000062B B449                            mov     ah,49h	; Dealloc	; and free it
 17573 0000062D CD21                    	int	21h		
 17574                                  					; DOS - 2+ - FREE MEMORY
 17575                                  					; ES = segment address of area to be freed
 17576                                  	; 11/12/2022
 17577 0000062F F8                      	clc
 17578                                  
 17579                                  ; ----------------------------------------------------------------------------
 17580                                  
 17581                                  NoRPLArena:
 17582                                  	; 11/12/2022
 17583                                  	; ds = cs
 17584                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17585 00000630 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17586                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17587                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17588                                  
 17589                                  	; 11/12/2022
 17590                                  	;clc				; get the extended memory size
 17591                                  
 17592                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17593                                  ;	if the function reports an error do nothing else store the extended
 17594                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17595                                  ;	currently pointed to by es:di. use the offsets specified in the
 17596                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17597                                  
 17598 00000634 B488                    	mov	ah,88h
 17599 00000636 CD15                    	int	15h			; check extended memory size
 17600 00000638 720B                    	jc	short no_ext_memory
 17601                                  			; Get Extended Memory Size
 17602                                  			; Return: CF clear on success
 17603                                  			; AX = size of memory above 1M in K	
 17604                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17605                                  	; 22/10/2022
 17606 0000063A 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17607 0000063E 09C0                    	or	ax,ax
 17608 00000640 7403                    	jz	short no_ext_memory
 17609 00000642 E8F004                  	call	ClrVDISKHeader
 17610                                  no_ext_memory:
 17611                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17612 00000645 268B4510                	mov	ax,[es:di+10h]
 17613                                  	;add	ax,bufinsiz
 17614 00000649 83C014                  	add	ax,20			; size of buffer header
 17615                                  	; 11/12/2022
 17616                                  	; ds = cs
 17617 0000064C A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17618                                  	;mov	[cs:singlebuffersize],ax	
 17619                                  	; 11/12/2022
 17620 0000064F A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17621                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17622                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17623 00000652 26884543                	mov	[es:di+43h],al
 17624                                  
 17625                                  ; determine if 386 system...
 17626                                  
 17627                                  	;get_cpu_type			; macro to determine cpu type
 17628                                  
 17629                                  get_cpu_type:
 17630                                  	; 11/12/2022
 17631 00000656 9C                      	pushf
 17632                                  	;push	bx
 17633                                  	;xor	bx,bx
 17634                                  	; 11/12/2022
 17635                                  	;xor	cx,cx
 17636                                  	;
 17637 00000657 31C0                    	xor	ax,ax
 17638                                  	; ax = 0
 17639 00000659 50                      	push    ax
 17640 0000065A 9D                      	popf
 17641 0000065B 9C                      	pushf
 17642 0000065C 58                      	pop	ax
 17643 0000065D 2500F0                  	and	ax,0F000h
 17644                                  	;cmp	ax,0F000h
 17645 00000660 80FCF0                  	cmp	ah,0F0h 
 17646 00000663 7410                    	je	short cpu_8086
 17647                                  	;mov	ax,0F000h
 17648 00000665 B4F0                    	mov	ah,0F0h
 17649                                  	; ax = 0F000h
 17650 00000667 50                      	push	ax
 17651 00000668 9D                      	popf
 17652 00000669 9C                      	pushf
 17653 0000066A 58                      	pop	ax
 17654                                  	;and	ax,0F000h
 17655 0000066B 80E4F0                  	and	ah,0F0h
 17656 0000066E 7405                    	jz	short cpu_286
 17657                                  cpu_386:
 17658                                  	; 11/12/2022
 17659                                  	;;inc	bx
 17660                                  	;inc	cx
 17661                                  	; 11/12/2022
 17662                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17663 00000670 26C6454401              	mov	byte [es:di+44h],1
 17664                                  cpu_286:
 17665                                  	;;;inc	bx
 17666                                  	;;inc	cx
 17667                                  cpu_8086:
 17668                                  	; 11/12/2022
 17669                                  	;;mov	ax,bx	
 17670                                  	;pop	bx
 17671 00000675 9D                      	popf
 17672                                  
 17673                                  	;...
 17674                                  
 17675                                  	; 11/12/2022
 17676                                  	;or	cl,cl
 17677                                  	;jz	short not_386_system
 17678                                  	; 11/12/202
 17679                                  	;cmp	cl,2
 17680                                  	;;cmp	ax,2			; is it a 386?
 17681                                  	;jne	short not_386_system	; no: don't mess with flag
 17682                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17683                                  	; 11/12/2022
 17684                                  	; 22/10/2022
 17685                                  	;mov	byte [es:di+44h],1
 17686                                  not_386_system:
 17687                                  	;mov	al,[es:di+SYSI_NUMIO]
 17688 00000676 268A4520                	mov	al,[es:di+20h]
 17689                                  	; 11/12/2022
 17690                                  	; ds = cs
 17691 0000067A A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17692                                  	;mov	[cs:drivenumber],al
 17693                                  
 17694 0000067D 8CC8                    	mov	ax,cs
 17695 0000067F 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17696                                  	; 11/12/2022
 17697                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17698                                  	;;mov	cx,[cs:singlebuffersize]
 17699                                  	;shr	cx,1			
 17700                                  	;shr	cx,1			; divide size by 16...
 17701                                  	;shr	cx,1
 17702                                  	;shr	cx,1			; ...to get paragraphs...
 17703                                  	;inc	cx			; ... and round up
 17704                                  	; 11/12/2022
 17705 00000682 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17706 00000686 B104                    	mov	cl,4
 17707 00000688 D3EB                    	shr	bx,cl
 17708 0000068A 43                      	inc	bx
 17709                                  
 17710                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17711                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17712                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17713                                  ;	  it is probably safe to assume that the sector size always will be.
 17714                                  ;
 17715                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17716                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17717                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17718                                  ;	  other code from ever causing a problem???
 17719                                  
 17720                                  	; 11/12/2022
 17721 0000068B 29D8                    	sub	ax,bx
 17722                                  	;sub	ax,cx
 17723 0000068D A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17724                                  	; 22/10/2022
 17725                                  	;mov	[cs:top_of_cdss],ax
 17726                                  
 17727                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17728                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17729                                  ;	for allocating memory for MagicDrv.
 17730                                  
 17731 00000690 06                      	push	es			; preserve pointer to dosinfo
 17732 00000691 57                      	push	di
 17733                                  
 17734                                  	; 22/10/2022
 17735                                  ;	mov	cx,ax			; save pointer for buffer
 17736                                  ;
 17737                                  ;;	now allocate space for 26 CDSs
 17738                                  ;
 17739                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17740                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17741                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17742                                  
 17743                                  ; setup and initialize the temporary buffer at cx
 17744                                  
 17745                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17746 00000692 26C47D12                	les	di,[es:di+12h]
 17747                                  	; 11/12/2022
 17748 00000696 31DB                    	xor	bx,bx
 17749                                  	;xor	ax,ax
 17750                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17751                                  	;mov	word [es:di+4],0
 17752 00000698 26895D04                	mov	[es:di+4],bx ; 0
 17753                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17754                                  	;mov	word [es:di],0
 17755 0000069C 26891D                  	mov	[es:di],bx ; 0
 17756                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17757                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17758 0000069F 26894502                	mov	[es:di+2],ax
 17759                                  
 17760                                  	;mov	es,cx
 17761 000006A3 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17762                                  
 17763                                  	; 11/12/2022
 17764                                  	;xor	ax,ax
 17765                                  	;mov	di,ax			; es:di -> single buffer
 17766 000006A5 89DF                    	mov	di,bx
 17767                                  	; di = 0
 17768                                  
 17769                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17770                                  	; 11/12/2022
 17771                                  	;mov	[es:di],ax ; 0
 17772 000006A7 26891D                  	mov	[es:di],bx ; 0
 17773                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17774                                  	; 11/12/2022
 17775                                  	;mov	[es:di+2],ax ; 0
 17776 000006AA 26895D02                	mov	[es:di+2],bx ; 0 
 17777                                  
 17778                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17779                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17780                                  
 17781                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17782 000006AE 26C74504FF00            	mov	word [es:di+4],00FFh
 17783                                  ;SYSINIT:06E6h
 17784                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17785                                  	;mov	word [es:di+6],0
 17786                                  	; 11/12/2022
 17787                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17788 000006B4 26895D06                	mov	[es:di+6],bx ; 0
 17789                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17790                                  	;mov	word [es:di+8],0
 17791                                  	; 11/12/2022
 17792                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17793 000006B8 26895D08                	mov	[es:di+8],bx ; 0
 17794                                  
 17795 000006BC 5F                      	pop	di			; restore pointer to DOSINFO data
 17796 000006BD 07                      	pop	es
 17797                                  
 17798                                  	; 11/12/2022
 17799                                  	; ds = cs
 17800                                  	; 22/10/2022
 17801                                  	;push	cs
 17802                                  	;pop	ds
 17803                                  
 17804 000006BE E80405                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17805                                  					;  can make disk system calls
 17806                                  					; tempcds trashes ds
 17807                                  	; 10/05/2019
 17808 000006C1 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17809                                  
 17810                                  	;if not ibmjapver
 17811                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17812                                  	;endif
 17813                                  
 17814                                  	; 22/10/2022
 17815                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17816                                  	;call	far ptr 70h:89Bh
 17817 000006C6 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17818                                  
 17819 000006CB FB                      	sti				; ints ok
 17820 000006CC FC                      	cld				; make sure
 17821                                  
 17822                                  ; 23/03/2019
 17823                                  
 17824                                  ;SYSINIT:069Ch
 17825                                  
 17826                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17827                                  ; of the way by putting it just below sysinit at end of memory.
 17828                                  
 17829 000006CD 8CCB                    	mov	bx,cs
 17830 000006CF 83EB10                  	sub	bx,10h
 17831 000006D2 8EC3                    	mov	es,bx
 17832 000006D4 31F6                    	xor	si,si
 17833 000006D6 89F7                    	mov	di,si
 17834 000006D8 B98000                  	mov	cx,128
 17835 000006DB F3A5                    	rep	movsw
 17836                                  
 17837                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17838                                  	; 22/10/2022
 17839 000006DD 268C063600              	mov	[es:36h],es
 17840                                  
 17841                                   	; Set Process Data Block - Program Segment Prefix address
 17842                                  	; BX = PDB/PSP segment
 17843 000006E2 B450                            mov	ah,50h ; SET_CURRENT_PDB
 17844 000006E4 CD21                    	int	21h			; tell DOS we moved it
 17845                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17846                                  			; BX = segment address of new PSP
 17847                                  	; 22/10/2022
 17848                                  	; 27/03/2019
 17849 000006E6 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17850                                  
 17851 000006E7 0E                      	push	cs	
 17852 000006E8 1F                      	pop	ds
 17853                                  
 17854                                  	; set up temp. critical error handler
 17855 000006E9 BA[B232]                	mov	dx,int24		; set up int 24 handler
 17856                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17857                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17858 000006EC B82425                  	mov	ax,2524h
 17859 000006EF CD21                    	int	21h
 17860                                  
 17861 000006F1 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17862 000006F6 7405                            je      short no_err		   ;  N: continue            M029
 17863 000006F8 BA[B037]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17864                                          ; 22/10/2022
 17865                                  	;call	print 			   ;		             M029
 17866                                  	; 12/12/2022
 17867 000006FB EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17868                                  no_err:
 17869                                  	; 12/05/2019
 17870                                  	;----------------------------------------------
 17871                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17872                                  	; 22/10/2022 - Retro DOS v4.0
 17873                                  	; 12/12/2022
 17874 000006FD BA[B632]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17875                                  p_dosinit_msg:
 17876 00000700 E88A2B                  	call	print			; Print message
 17877                                  	;----------------------------------------------
 17878                                  	
 17879                                  	; 11/12/2022
 17880                                  	; 22/10/2022
 17881                                  	; 23/03/2019 - Retro DOS v4.0
 17882                                  	;pop	ds			; start of free memory
 17883                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17884                                  	
 17885                                  	; 11/12/2022
 17886                                  	; 27/03/2019
 17887 00000703 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17888 00000707 1F                      	pop	ds ; */
 17889                                  
 17890 00000708 08D2                    	or	dl,dl
 17891                                  	;jz	short nodrvset		; bios didn't say
 17892 0000070A 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17893                                  	;dec	dl			; A = 0
 17894                                  	; 18/12/2022
 17895 0000070C 4A                      	dec	dx
 17896 0000070D B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17897 0000070F CD21                    	int	21h			; select the disk
 17898                                  			; DOS - SELECT DISK
 17899                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17900                                  			; Return: AL = number of logical drives
 17901                                  nodrvset:
 17902                                  	;ifdef	dblspace_hooks
 17903                                  	;	....
 17904                                  	;	....
 17905                                  	;endif	
 17906                                  
 17907                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17908                                  
 17909                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17910                                  ; ----------------------------------------------------------------------------
 17911                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17912                                  
 17913                                  ProcessConfig:
 17914                                  	;; ds = cs ; 27/03/2019
 17915                                  	; 11/12/2022
 17916                                  	; ds <> cs	
 17917                                  
 17918                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17919                                  
 17920 00000711 E87F17                  	call	doconf			; do pre-scan for dos=high/low
 17921                                  
 17922                                  	; 11/12/2022
 17923                                  	; 27/03/2019
 17924                                  	; ds = cs (at return from doconf)
 17925                                  
 17926                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17927                                  ; It will either be relocated to low memory, above the DOS data structures,
 17928                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17929                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17930                                  ; to tell the DOS data where the code has been placed, and to install the
 17931                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17932                                  ; must first initialize it in its present location and load the installable
 17933                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17934                                  ; relocate the DOS code into HiMem.
 17935                                  ;
 17936                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17937                                  ; to install the low memory stub (this must be done before allowing any
 17938                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17939                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17940                                  ; been patched.
 17941                                  
 17942                                  	; 22/10/2022 - Retro DOS v4.0
 17943                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17944                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17945                                  	; 11/12/2022
 17946 00000714 803E[6A02]00            	cmp	byte [runhigh],0
 17947 00000719 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17948                                  
 17949                                  ;------ user chose to load high
 17950                                  
 17951                                  	; 22/10/2022
 17952                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17953                                  	; 11/12/2022
 17954                                  	; ds = cs
 17955 0000071B 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17956                                  
 17957                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17958                                  	; 27/03/2019
 17959                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17960                                  
 17961 0000071F 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17962                                  	; 11/12/2022
 17963                                  	; ds = cs
 17964                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17965 00000721 FF1E[7B02]              	call	far [dos_segreinit]
 17966                                  
 17967 00000725 EB10                    	jmp	short do_multi_pass
 17968                                  
 17969                                  ;------ User chose to load dos low
 17970                                  
 17971                                  dont_install_stub:
 17972                                  	; 22/10/2022
 17973 00000727 31DB                    	xor	bx,bx			; M012
 17974                                  					; don't use int 21 call to alloc mem
 17975 00000729 E8D601                  	call	MovDOSLo		; move it !
 17976                                  
 17977 0000072C B80100                  	mov	ax,1			; dont install stub
 17978                                  	; 11/12/2022
 17979                                  	; ds = cs
 17980 0000072F 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17981                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17982                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17983                                  	; 27/03/2019
 17984                                  ;do_multi_pass:
 17985                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17986                                  
 17987                                  	; 11/12/2022
 17988                                  	; ds =cs
 17989                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17990 00000733 FF1E[7B02]              	call	far [dos_segreinit]
 17991                                  do_multi_pass:
 17992 00000737 E81201                  	call	AllocFreeMem		; allocate all the free mem
 17993                                  					; & update [memhi] & [area]
 17994                                  					; start of free memory.
 17995                                  	;ifdef	dblspace_hooks
 17996                                  	;mov	bx,0			; magic backdoor to place int hooks
 17997                                  	;call	cs:MagicBackdoor
 17998                                  	;endif
 17999                                  
 18000                                  ; Now, process config.sys some more.  
 18001                                  ; Load the device drivers and install programs
 18002                                  
 18003                                  	; 22/10/2022
 18004                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 18005                                  	; 11/12/2022
 18006                                  	; ds = cs
 18007 0000073A FE06[4903]              	inc	byte [multi_pass_id]
 18008 0000073E E8E517                  	call	multi_pass		; load device drivers
 18009 00000741 E87924                  	call	ShrinkUMB
 18010 00000744 E89F24                  	call	UnlinkUMB		; unlink all UMBs	;M002
 18011                                  	; 02/11/2022
 18012                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 18013                                  	; 11/12/2022
 18014                                  	; ds = cs
 18015 00000747 FE06[4903]              	inc	byte [multi_pass_id]
 18016 0000074B E8D817                  	call	multi_pass		; was load ifs (now does nothing)
 18017                                  
 18018                                  	;ifdef	dblspace_hooks
 18019                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 18020                                  	;endif
 18021                                  
 18022                                  	; ds = cs
 18023                                  	
 18024 0000074E E80A05                  	call	endfile			; setup fcbs, files, buffers etc
 18025                                  
 18026                                  	;ifdef	dblspace_hooks
 18027                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 18028                                  	;endif
 18029                                  
 18030                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 18031                                  ;to device drivers. This has been moved up to this point to avoid problems 
 18032                                  ;with overlays called from installed programs
 18033                                  
 18034                                  	; 11/12/2022
 18035                                  	; ds = cs
 18036                                  
 18037                                  	;;mov	ax,Bios_Data ; 0070h
 18038                                  	;mov	ax,KERNEL_SEGMENT
 18039                                  	; 21/10/2022
 18040 00000751 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 18041 00000754 8EC0                    	mov	es,ax			; point ES to bios data
 18042                                  
 18043 00000756 26C606[FA08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 18044                                  
 18045                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18046                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 18047                                  	;test	byte [cs:install_flag],1
 18048                                  	; 11/12/2022
 18049                                  	; ds = cs
 18050 0000075C F606[4A03]01            	test	byte [install_flag],1
 18051                                  	;test	byte [cs:install_flag],have_install_cmd
 18052                                  					; are there install commands?
 18053 00000761 7407                    	jz	short dolast		; no, no need for further processing
 18054                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 18055                                  	; 11/12/2022
 18056                                  	; ds =cs
 18057 00000763 FE06[4903]              	inc	byte [multi_pass_id]
 18058 00000767 E8BC17                  	call	multi_pass		; execute install= commands
 18059                                  
 18060                                  dolast:
 18061                                  	
 18062                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 18063                                  ;  free the confbot area used for config.sys and sysinit itself.
 18064                                  
 18065                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 18066                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 18067                                  ; anything, but just set up the ROM area for suballocation (or print
 18068                                  ; a message if HiMem is not available).
 18069                                  ;
 18070                                  ; There is also this little hack for CPM style DOS calls that needs to
 18071                                  ; be done when A20 is set...
 18072                                  
 18073                                  	; 11/12/2022
 18074                                  	; ds = cs
 18075                                  
 18076                                  	; 22/10/2022
 18077                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 18078                                  	; 11/12/2022
 18079 0000076A 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18080 0000076F 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 18081 00000771 E83D01                  	call	LoadDOSHiOrLo
 18082                                  _@@_:
 18083                                  	;cmp	byte [cs:runhigh],0	; are we running low
 18084                                  	; 11/12/2022
 18085                                  	; ds = cs
 18086 00000774 803E[6A02]00            	cmp	byte [runhigh],0
 18087                                  	;je	short _@@@
 18088 00000779 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 18089 0000077B E82804                  	call	CPMHack			; make ffff:d0 same as 0:c0
 18090                                  _@@@:
 18091                                  
 18092                                  ; We are now done with CONFIG.SYS processing
 18093                                  
 18094                                  ConfigDone:
 18095                                  	; 12/12/2022
 18096                                  	; 22/10/2022
 18097                                  	;mov	byte [cs:donotshownum],1 
 18098                                  					; done with config.sys.
 18099                                  					; do not show line number message.
 18100                                  	;mov	es,[cs:area]
 18101                                  	; 12/12/2022
 18102                                  	; ds = cs
 18103                                  	; 27/03/2019
 18104 0000077E C606[D103]01            	mov	byte [donotshownum],1
 18105 00000783 8E06[E403]              	mov	es,[area]
 18106                                  
 18107 00000787 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 18108 00000789 CD21                    	int	21h
 18109                                  			; DOS - 2+ - FREE MEMORY
 18110                                  			; ES = segment address of area to be freed
 18111                                  
 18112                                  	; 22/10/2022
 18113                                  	;test	word [cs:install_flag],2
 18114                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 18115                                  	;test	byte [cs:install_flag],has_installed
 18116                                  	; 11/12/2022
 18117                                  	; ds = cs
 18118 0000078B F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 18119                                  	;test	byte [install_flag],has_installed
 18120 00000790 741F                    	jz	short skip_free_sysinitbase ; no.
 18121                                  
 18122                                  ; set block from the old_area with impossible_owner_size.
 18123                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18124                                  ; handle install= command.
 18125                                  
 18126                                  	; 12/12/2022
 18127                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18128                                  	;push	bx
 18129                                  	
 18130                                  	; 22/10/2022
 18131                                  	;mov	es,[cs:old_area]
 18132                                  	;mov	bx,[cs:impossible_owner_size]
 18133                                  	; 12/12/2022
 18134                                  	; ds = cs
 18135 00000792 8E06[DA03]              	mov	es,[old_area]
 18136 00000796 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 18137                                  	
 18138 0000079A B44A                    	mov	ah,4Ah ; SETBLOCK
 18139 0000079C CD21                    	int	21h
 18140                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18141                                  			; ES = segment address of block to change
 18142                                  			; BX = new size in paragraphs
 18143 0000079E 8CC0                    	mov	ax,es
 18144 000007A0 48                      	dec	ax
 18145 000007A1 8EC0                    	mov	es,ax			; point to arena
 18146                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18147 000007A3 26C70601000800          	mov	word [es:1],8
 18148                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18149 000007AA 26C70608005344          	mov	word [es:8],'SD'
 18150                                  	
 18151                                  	; 12/12/2022
 18152                                  	;pop	bx
 18153                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18154                                  
 18155                                  skip_free_sysinitbase:
 18156                                  	; 22/10/2022
 18157                                  	;cmp	byte [cs:runhigh],0
 18158                                  	; 12/12/2022
 18159                                  	; ds = cs
 18160 000007B1 803E[6A02]00            	cmp	byte [runhigh],0	
 18161 000007B6 7403                    	je	short _@@@@
 18162                                  
 18163 000007B8 E8D202                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18164                                  
 18165                                  ; ----------------------------------------------------------------------------
 18166                                  
 18167                                  _@@@@:
 18168                                  	; 12/12/2022
 18169                                  	; ds = cs
 18170                                  	; 22/10/2022
 18171                                  	; 27/03/2019
 18172                                  	;push	cs
 18173                                  	;pop	ds			; point DS to sysinitseg
 18174                                  
 18175                                  ; set up the parameters for command
 18176                                  
 18177                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18178                                  ;;ifdef  MULTI_CONFIG
 18179                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18180                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18181                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18182                                  ;	; !!!
 18183                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18184                                  ;       ; !!!
 18185                                  ;	call    disable_autoexec        ; no, we should disable it
 18186                                  ;process_autoexec:
 18187                                  ;;endif	; !!!
 18188                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18189                                  ;	; !!!
 18190                                  
 18191                                  	; 22/10/2022 
 18192                                  	;mov     cl,[command_line]
 18193                                          ;mov     ch,0
 18194                                          ;inc     cx
 18195                                          ;mov     si,command_line	
 18196                                  	;add     si,cx
 18197                                          ;mov     byte [si],cr	; cr-terminate command line
 18198                                  
 18199                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18200                                  	; (SYSINIT:0809h)
 18201                                  	
 18202                                  	;mov	si,(offset command_line+1)
 18203 000007BB BE[AA02]                	mov	si,command_line+1
 18204 000007BE 1E                      	push    ds
 18205 000007BF 07                      	pop     es
 18206 000007C0 89F7                    	mov     di,si
 18207 000007C2 B1FF                    	mov     cl,0FFh ; -1
 18208                                  _@_loop:
 18209 000007C4 FEC1                    	inc     cl ; +1
 18210 000007C6 AC                      	lodsb
 18211 000007C7 AA                      	stosb
 18212 000007C8 08C0                    	or      al,al
 18213 000007CA 75F8                    	jnz     short _@_loop
 18214 000007CC 4F                      	dec     di
 18215 000007CD B00D                    	mov     al,0Dh
 18216 000007CF AA                      	stosb			; cr-terminate command line
 18217 000007D0 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 18218                                  
 18219                                  ; ----------------------------------------------------------------------------
 18220                                  
 18221                                  ;   Once we get to this point, the above code, which is below "retry"
 18222                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18223                                  ;   which follow....)
 18224                                  
 18225                                  retry:
 18226 000007D4 BA[6333]                	mov	dx,commnd	; now pointing to file description
 18227                                  
 18228                                  ; we are going to open the command interpreter and size it as is done in
 18229                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18230                                  ; there is not enough room for the command interpreter,exec will probably
 18231                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18232                                  ; here to catch it. this code is not perfect (for instance .exe command
 18233                                  ; interpreters are possible) because it does its sizing based on the
 18234                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18235                                  ; correctness to be usable.
 18236                                  
 18237                                  ; first, find out where the command interpreter is going to go.
 18238                                  
 18239 000007D7 52                      	push	dx		; save pointer to name
 18240 000007D8 BBFFFF                  	mov	bx,0FFFFh
 18241 000007DB B448                    	mov	ah,48h	; ALLOC
 18242 000007DD CD21                            int     21h             ; get biggest piece
 18243 000007DF B448                    	mov	ah,48h	; ALLOC
 18244 000007E1 CD21                    	int	21h		; second time gets it
 18245 000007E3 7243                    	jc	short memerrjx	; oooops
 18246                                  
 18247 000007E5 8EC0                    	mov	es,ax
 18248 000007E7 B449                    	mov	ah,49h	; DEALLOC
 18249 000007E9 CD21                    	int	21h		; give it right back
 18250 000007EB 89DD                    	mov	bp,bx
 18251                                  
 18252                                  ; es:0 points to block,and bp is the size of the block in para.
 18253                                  
 18254                                  ; we will now adjust the size in bp down by the size of sysinit.
 18255                                  ; we need to do this because exec might get upset if some of the exec
 18256                                  ; data in sysinit is overlayed during the exec.
 18257                                  
 18258                                  	; 22/10/2022
 18259                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18260 000007ED 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18261 000007F1 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18262                                  
 18263                                  ; Note that the "config_wrkseg" environment data is a segment in
 18264                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18265                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18266                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18267                                  ; we need to make sure that there's no way Exec will stomp on that data
 18268                                  ; before it can copy it, and one way to do that is to make the available
 18269                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18270                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18271                                  ; of the current sysinit CS....
 18272                                  ;
 18273                                  ; The reason I use the term "paranoid" is because this code should have
 18274                                  ; slid the data required by Exec up to the very top of memory, because as
 18275                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18276                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18277                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18278                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18279                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18280                                  
 18281                                  	; 22/10/2022
 18282                                  	;mov	cx,[config_envlen]
 18283                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18284                                          ;mov	ax,[config_wrkseg]
 18285                                  ;no_env:
 18286                                  	; 22/10/2022
 18287                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18288 000007F3 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18289 000007F5 83C311                  	add	bx,11h		; add the sysinit php
 18290 000007F8 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18291 000007FA 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18292                                  
 18293                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18294 000007FC B8003D                          mov	ax,3D00h
 18295 000007FF F9                      	stc                     ; in case of int 24
 18296 00000800 CD21                    	int	21h
 18297 00000802 7240                    	jc	short comerr	; ooops
 18298                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18299                                  			; DS:DX -> ASCIZ filename
 18300                                  			; AL = access mode
 18301                                  			; 0 - read
 18302                                  	; 22/10/2022
 18303                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18304 00000804 89C3                            mov     bx,ax           ; handle in bx
 18305                                  
 18306                                  ;   If the standard command interpreter is being used, verify it is correct
 18307                                  
 18308                                  	; 22/10/2022
 18309                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18310                                  	;jne	short skip_validation ; yes
 18311                                  	;mov	dx,retry-4
 18312                                  	;mov	cx,4		;
 18313                                  	;mov	ah,READ		;
 18314                                  	;int	21h		;
 18315                                  	;cmp	byte [retry-4],0E9h
 18316                                  	;jne	short comerr
 18317                                  	;; 20/04/2019 - Retro DOS v4.0
 18318                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18319                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18320                                  	;jne	short comerr	;
 18321                                  
 18322                                  ;skip_validation:
 18323                                  	; 22/10/2022
 18324                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18325 00000806 31C9                    	xor	cx,cx
 18326 00000808 31D2                    	xor	dx,dx
 18327                                  	;mov	ax,(LSEEK<<8)|2
 18328 0000080A B80242                  	mov	ax,4202h
 18329 0000080D F9                      	stc			;in case of int 24
 18330 0000080E CD21                    	int	21h		; get file size in dx:ax
 18331 00000810 7232                    	jc	short comerr
 18332                                  				; convert size in dx:ax to para in ax
 18333 00000812 83C00F                  	add	ax,15		; round up size for conversion to para
 18334 00000815 83D200                  	adc	dx,0
 18335 00000818 E8A103                  	call	off_to_para
 18336 0000081B B10C                    	mov	cl,12
 18337 0000081D D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18338 0000081F 09D0                    	or	ax,dx		; ax is now # of para for file
 18339 00000821 83C010                  	add	ax,10h		; 100h byte php
 18340 00000824 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18341 00000826 7203                    	jb	short okld	; jump if yes.
 18342                                  
 18343                                  	; 22/10/2022
 18344                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18345                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18346                                  	; 02/11/2022
 18347                                  	;jmp	mem_err
 18348                                  	; 11/12/2022
 18349                                  	; ds = cs
 18350 00000828 E92B28                  	jmp	mem_err2
 18351                                  
 18352                                  ;memerrjx:
 18353                                  ;	mov	dx,badmem
 18354                                  ;	call	print
 18355                                  ;       jmp     short continue
 18356                                  
 18357                                  okld:
 18358 0000082B B43E                    	mov	ah,3Eh ; CLOSE
 18359 0000082D CD21                    	int	21h		; close file
 18360                                  
 18361                                  	; 22/10/2022
 18362 0000082F 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18363                                  
 18364                                  	; 24/03/2019
 18365                                  
 18366 00000830 0E                      	push	cs		; point es to sysinitseg
 18367 00000831 07                      	pop	es
 18368 00000832 BB[3B03]                        mov     bx,COMEXE	; point to exec block
 18369                                  	; 22/10/2022
 18370                                  	;pop	dx              ; recover pointer to name
 18371                                  
 18372                                  ;;ifdef	MULTI_CONFIG
 18373                                  
 18374                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18375                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18376                                  ;   selection was made (in which case the CONFIG environment variable will be
 18377                                  ;   set to that selection).
 18378                                  
 18379                                  	; 23/10/2022
 18380                                  	;mov	cx,[config_envlen]
 18381                                  	;jcxz	no_envdata
 18382                                          ;mov	cx,[config_wrkseg]
 18383                                  ;no_envdata:
 18384                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18385                                  	;mov	[bx],cx
 18386                                  
 18387                                  ;;endif	;MULTI_CONFIG
 18388                                  
 18389                                  	; 23/10/2022
 18390                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18391                                  
 18392                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18393 00000835 8C4F04                  	mov	[bx+4],cs
 18394                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18395 00000838 8C4F08                  	mov	[bx+8],cs
 18396                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18397 0000083B 8C4F0C                  	mov	[bx+12],cs
 18398                                  
 18399                                  ;mov	ax,(EXEC<<8) + 0
 18400                                  	; 23/10/2022
 18401                                  	;xor	ax,ax
 18402                                  	;mov	ah,4Bh
 18403                                  	; 14/08/2023
 18404                                  	;mov	ax,4B00h
 18405 0000083E B8004B                  	mov	ax,(EXEC<<8)       
 18406                                  
 18407 00000841 F9                      	stc                     ; in case of int 24
 18408 00000842 CD21                            int     21h             ; go start up command
 18409                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18410                                  			; DS:DX -> ASCIZ filename
 18411                                  			; ES:BX -> parameter block
 18412                                  			; AL = subfunc: load & execute program
 18413                                  	;push	cs
 18414                                  	;pop	ds
 18415                                  
 18416                                  	; 23/10/2022
 18417                                  	;push	dx		; push to balance fall-through pop
 18418                                  
 18419                                  ; note fall through if exec returns (an error)
 18420                                  comerr:
 18421                                  	; 23/10/2022
 18422                                  ;;ifdef	MULTI_CONFIG
 18423                                  	;cmp	byte [commnd4],0
 18424                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18425                                  	;cmp	byte [newcmd],0
 18426                                  	;je	short continue	; don't print err msg for defaults just yet
 18427                                  ;comerr2:
 18428                                  ;;endif
 18429 00000844 BA[B336]                        mov     dx,badcom	; want to print command error
 18430 00000847 E8172A                  	call	badfil
 18431                                  continue:
 18432                                  	; 23/10/2022
 18433                                  	;pop	dx
 18434                                  
 18435                                  ;;ifndef MULTI_CONFIG
 18436                                  	;jmp	stall
 18437                                  	; 24/10/2022
 18438                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18439 0000084A EBFE                    	jmp	short stall
 18440                                  ;;else
 18441                                  	; 23/10/2022
 18442                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18443                                  	;int	21h             ;
 18444                                  	;add	al,'A'          ;
 18445                                  	;mov	dl,al           ; DL == default drive letter
 18446                                  	;mov	si,commnd2
 18447                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18448                                  	;jne	short do_def2	; then try the 2nd alternate;
 18449                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18450                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18451                                  ;do_def2:			
 18452                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18453                                          ;jne	short do_alt    ; no
 18454                                  ;do_def3:
 18455                                  	;mov	si,commnd3
 18456                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18457                                  	;jne	short do_alt	; no
 18458                                  	;mov	si,commnd4
 18459                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18460                                  	;jne	short do_alt	; no
 18461                                  	;push	dx              ;
 18462                                  	;mov	dx,badcomprmpt
 18463                                  	;call	print		;
 18464                                  	;pop	dx              ; recover default drive letter in DL
 18465                                  ;request_input:			;
 18466                                  	;mov	ah,STD_CON_OUTPUT
 18467                                  	;int	21h             ;
 18468                                  	;push	dx              ;
 18469                                  	;mov	dl,'>'          ;
 18470                                  	;int	21h             ;
 18471                                  	;mov	bl,[tmplate+1]	;
 18472                                  	;mov	bh,0            ;
 18473                                  	;mov	byte [commnd+bx],0Dh
 18474                                  	;mov	dx,tmplate
 18475                                  	;mov	ah,STD_CON_STRING_INPUT
 18476                                  	;int	21h             ; read a line of input
 18477                                  	;mov	dx,crlfm	;
 18478                                  	;call	print           ;
 18479                                  	;pop	dx              ;
 18480                                  	;mov	bl,[tmplate+1]	;
 18481                                  	;or	bl,bl           ; was anything typed?
 18482                                  	;jz	short request_input ;
 18483                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18484                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18485                                  	;mov	word [command_line],0D00h
 18486                                  	;jmp	short do_exec   ;
 18487                                  ;do_alt:
 18488                                  	;push	ds
 18489                                  	;pop	es
 18490                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18491                                  	;mov	di,commnd	;
 18492                                  ;do_alt1:
 18493                                  	;lodsb			; copy the alternate, zapping it as we go,
 18494                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18495                                  	;stosb 			;
 18496                                  	;or	al,al		;
 18497                                  	;jnz	short do_alt1	;
 18498                                  	;mov	di,command_line
 18499                                  	;cmp	byte [si+2],':'
 18500                                  	;jne	short do_alt2	;
 18501                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18502                                  ;do_alt2:			;
 18503                                  	;lodsb			;
 18504                                  	;stosb			;
 18505                                  	;or	al,al           ;
 18506                                  	;jnz	short do_alt2   ;
 18507                                  	;mov	byte [di-1],cr
 18508                                  
 18509                                  ;;   Last but not least, see if we need to call disable_autoexec
 18510                                  
 18511                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18512                                  	;;cmp	[command_line-1],0
 18513                                          ;;jne	short do_exec   ;
 18514                                          ;;mov	[command_line-1],'/'
 18515                                  	;;call	disable_autoexec ;
 18516                                  
 18517                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18518                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18519                                  	;call	disable_autoexec
 18520                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18521                                  ;do_exec:
 18522                                  	;jmp     retry		;
 18523                                  
 18524                                  ;;endif	;MULTI_CONFIG
 18525                                  
 18526                                  ; 24/03/2019 - Retro DOS v4.0
 18527                                  
 18528                                  ; ----------------------------------------------------------------------
 18529                                  ; procedure : AllocFreeMem
 18530                                  ;
 18531                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18532                                  ; DOS is at temporary location when this call is being made
 18533                                  ;
 18534                                  ; Inputs : None
 18535                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18536                                  ;	   [area] & [memhi] set to the para value of the start of the
 18537                                  ;	   free memory.
 18538                                  ;
 18539                                  ; Uses   : AX, BX
 18540                                  ;
 18541                                  ; ----------------------------------------------------------------------
 18542                                  
 18543                                  	; 23/10/2022
 18544                                  AllocFreeMem:
 18545 0000084C BBFFFF                  	mov	bx,0FFFFh
 18546 0000084F B448                    	mov	ah,48h ; ALLOC
 18547 00000851 CD21                    	int	21h			; first time fails
 18548 00000853 B448                    	mov	ah,48h ; ALLOC
 18549 00000855 CD21                    	int	21h			; second time gets it
 18550                                  	; 11/12/2022
 18551                                  	; ds = cs
 18552                                  	;mov	[cs:area],ax
 18553                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18554 00000857 A3[E403]                	mov	[area],ax
 18555 0000085A A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18556 0000085D C3                      	retn				; start of free memory
 18557                                  				
 18558                                  	; include msbio.cl6
 18559                                  ; ----------------------------------------------------------------------
 18560                                  DOSLOMSG:
 18561 0000085E 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18561 00000867 7661696C61626C653A-
 18561 00000870 204C6F6164696E6720-
 18561 00000879 444F53206C6F770D0A-
 18561 00000882 24                 
 18562                                  FEmsg:
 18563 00000883 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18563 0000088C 6F723A2043616E6E6F-
 18563 00000895 7420616C6C6F636174-
 18563 0000089E 65204D656D6F727920-
 18563 000008A7 666F7220444F530D0A-
 18563 000008B0 24                 
 18564                                  
 18565                                  ; ----------------------------------------------------------------------
 18566                                  ;
 18567                                  ; procedure : LoadDOSHiOrLo
 18568                                  ;
 18569                                  ;		Tries to move DOS into HMA. If it fails then loads
 18570                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18571                                  ;		moved; this just tries to allocate the HMA, and prints
 18572                                  ;		a message if this is not possible.
 18573                                  ;
 18574                                  ; ----------------------------------------------------------------------
 18575                                  
 18576                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18577                                  LoadDOSHiOrLo:
 18578                                  	; 27/03/2019 - Retro DOS v4.0
 18579                                  	; ds = cs
 18580 000008B1 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18581                                  	;jc	short LdngLo		; If that don't work...
 18582                                  	;retn
 18583                                  	; 18/12/2022
 18584 000008B4 731C                    	jnc	short LoadDosHi_ok
 18585                                  LdngLo:
 18586                                  	; 23/10/2022
 18587                                  	;push	cs
 18588                                  	;pop	ds
 18589                                  	; 11/12/2022
 18590                                  	; ds = cs
 18591 000008B6 B409                    	mov	ah,9
 18592 000008B8 BA[5E08]                	mov	dx,DOSLOMSG		; inform user that we are
 18593 000008BB CD21                    	int	21h			; loading low
 18594                                  
 18595                                  ;ifndef ROMDOS
 18596                                  	; actually move the dos, and reinitialize it.
 18597                                  
 18598 000008BD BB0100                  	mov	bx,1				; M012
 18599                                  						;  use int 21 alloc for mem
 18600 000008C0 E83F00                  	call	MovDOSLo
 18601                                  	; 11/12/2022
 18602                                  	; ds = cs
 18603                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18604                                  	; 23/10/2022
 18605 000008C3 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18606                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18607                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18608 000008C7 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18609                                  	; 11/12/2022
 18610                                  	; ds = cs
 18611                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18612 000008C9 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18613                                  	
 18614                                  ;endif ; ROMDOS
 18615                                  	; 23/10/2022
 18616                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18617                                  	; 11/12/2022
 18618                                  	; ds = cs
 18619 000008CD C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18620                                  LoadDosHi_ok:	; 18/12/2022
 18621 000008D2 C3                      	retn
 18622                                  
 18623                                  ; ----------------------------------------------------------------------
 18624                                  ;
 18625                                  ; procedure : TryToMovDOSHi
 18626                                  ;
 18627                                  ;		This tries to move DOS into HMA.
 18628                                  ;		Returns CY if it failed.
 18629                                  ;		If it succeeds returns with carry cleared.
 18630                                  ;
 18631                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18632                                  ;		the A20 switching code in the low mem stub to be installed.
 18633                                  ; 
 18634                                  ; ----------------------------------------------------------------------
 18635                                  
 18636                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18637                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18638                                  TryToMovDOSHi:
 18639                                  	; 11/12/2022
 18640                                  	; 27/03/2019 - Retro DOS v4.0
 18641                                  	; ds = cs
 18642 000008D3 E81300                  	call	MovDOSHi
 18643 000008D6 7210                    	jc	short ttldhx
 18644                                  
 18645                                  ;ifndef ROMDOS
 18646                                  	; 23/10/2022
 18647                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18648                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18649                                  	; 11/12/2022
 18650                                  	; ds = cs
 18651 000008D8 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18652                                  ;else
 18653                                  ;	..
 18654                                  ;endif ; ROMDOS
 18655                                  
 18656                                  	; 11/12/2022
 18657                                  	; ds = cs
 18658 000008DC 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18659                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18660 000008DE FF1E[7B02]              	call	far [dos_segreinit]
 18661                                  	;mov	byte [cs:runhigh],1
 18662 000008E2 C606[6A02]01            	mov	byte [runhigh],1
 18663 000008E7 F8                      	clc
 18664                                  ttldhx:
 18665 000008E8 C3                      	retn
 18666                                  
 18667                                  ; ----------------------------------------------------------------------
 18668                                  ;
 18669                                  ; procedure : MovDOSHi
 18670                                  ;
 18671                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18672                                  ;		For ROMDOS, the code is not actually moved, but the
 18673                                  ;		HMA is allocated and prepared for sub-allocation.
 18674                                  ;
 18675                                  ;		Returns : CY if it failed
 18676                                  ;
 18677                                  ; ----------------------------------------------------------------------
 18678                                  
 18679                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18680                                  MovDOSHi:
 18681                                  	; 14/05/2019
 18682                                  	; 27/03/2019 - Retro DOS v4.0
 18683                                  	; ds = cs
 18684 000008E9 E8D500                  	call	AllocHMA
 18685 000008EC 7213                    	jc	short mdhx			; did we get HMA?
 18686 000008EE B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18687 000008F1 8EC0                    	mov	es,ax
 18688                                  
 18689                                  ;ifndef ROMDOS
 18690                                  	; actually move the BIOS and DOS
 18691                                  
 18692                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18693                                  	; 24/03/2019
 18694                                  	
 18695                                  	; 23/10/2022
 18696 000008F3 E83200                  	call	MovBIOS				; First move BIOS into HMA
 18697                                  
 18698                                  	; ES:DI points to free HMA after BIOS
 18699                                  	
 18700                                  	; 14/05/2019
 18701                                  	; 24/03/2019 - Retro DOS v4.0
 18702                                  	;xor	di,di
 18703                                  	
 18704                                  	; 23/10/2022
 18705                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18706                                  	; 11/12/2022
 18707                                  	; ds = cs
 18708 000008F6 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18709 000008FA E81100                  	call	MovDOS				; and move it
 18710                                  
 18711                                  	; ES:DI points to free HMA after DOS
 18712                                  ;else
 18713                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18714                                  ;
 18715                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18716                                  ;
 18717                                  ;endif ; ROMDOS
 18718                                  
 18719 000008FD E85D02                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18720 00000900 F8                      	clc
 18721                                  mdhx:
 18722 00000901 C3                      	retn
 18723                                  
 18724                                  ; ----------------------------------------------------------------------
 18725                                  ;
 18726                                  ; procedure : MovDOSLo
 18727                                  ;
 18728                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18729                                  ;
 18730                                  ; ----------------------------------------------------------------------
 18731                                  
 18732                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18733                                  
 18734                                  ;ifndef ROMDOS
 18735                                  
 18736                                  MovDOSLo:
 18737                                  	; 14/05/2019
 18738                                  	; 27/03/2019 - Retro DOS v4.0
 18739                                  	; ds = cs
 18740 00000902 E84500                  	call	AllocMemForDOS			; incestuosly!!!
 18741                                  	
 18742                                  	; 23/10/2022
 18743                                  	; 14/05/2019
 18744                                  	;inc	ax  ; skip MCB
 18745                                  	
 18746 00000905 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18747                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18748                                  	; 24/03/2019
 18749                                  	
 18750                                  	; 23/10/2022
 18751 00000907 E81E00                  	call	MovBIOS
 18752                                  
 18753                                  ;------ ES:DI points memory immediately after BIOS
 18754                                  
 18755                                  	; 14/05/2019
 18756                                  	; NOTE: 
 18757                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18758                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18759                                  
 18760                                  	; 24/03/2019 - Retro DOS v4.0
 18761                                  	;xor	di,di	
 18762                                  
 18763                                  	; 23/10/2022
 18764                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18765                                  	; 11/12/2022
 18766                                  	; ds = cs
 18767 0000090A 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18768                                  	;call	MovDOS
 18769                                  	;retn
 18770                                  	; 11/12/2022
 18771                                  	;jmp	short MovDOS
 18772                                  
 18773                                  ;endif ; ROMDOS
 18774                                  
 18775                                  ; 11/12/2022
 18776                                  
 18777                                  ; ----------------------------------------------------------------------
 18778                                  ;
 18779                                  ; procedure : MovDOS
 18780                                  ;
 18781                                  ;		Moves DOS code into requested area
 18782                                  ;
 18783                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18784                                  ;	     CX    - size of DOS code to be moved
 18785                                  ;
 18786                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18787                                  ;
 18788                                  ; ----------------------------------------------------------------------
 18789                                  
 18790                                  	; 11/12/2022
 18791                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18792                                  
 18793                                  ;ifndef ROMDOS
 18794                                  
 18795                                  MovDOS:
 18796                                  	; 14/05/2019
 18797                                  	; 27/03/2019 - Retro DOS v4.0
 18798                                  
 18799                                  	; 11/12/2022
 18800                                  	; ds = cs
 18801                                  
 18802                                  	; 23/10/2022
 18803                                  	;push	ds ; *//
 18804                                  	
 18805 0000090E 06                      	push	es
 18806 0000090F 57                      	push	di
 18807                                  
 18808                                  	; 11/12/2022
 18809 00000910 1E                      	push	ds ; *// ; 11/12/202
 18810                                  
 18811                                  	; 29/04/2019
 18812 00000911 C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18813                                  	; 23/10/2022
 18814                                  	;lds	si,[cs:dosinit]
 18815                                  	; 04/09/2023
 18816 00000915 89F0                    	mov	ax,si
 18817                                  
 18818 00000917 F3A4                    	rep	movsb
 18819                                  
 18820 00000919 1F                      	pop	ds ; *// ; 11/12/2022
 18821                                  
 18822 0000091A 5B                      	pop	bx				; get back offset into which
 18823                                  						;  DOS was moved
 18824                                  	; 04/09/2023
 18825                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 18826                                  						;  wants to run
 18827                                  	; 04/09/2023
 18828                                  	;mov	ax,[dosinit]
 18829                                  	; ax = [dosinit]
 18830                                  
 18831 0000091B 29D8                    	sub	ax,bx
 18832 0000091D E89C02                  	call	off_to_para
 18833 00000920 5B                      	pop	bx				; get the segment at which
 18834                                  						;  we moved DOS into
 18835 00000921 29C3                    	sub	bx,ax				; Adjust segment
 18836                                  	
 18837                                  	; 11/12/2022
 18838                                  	; 23/10/2022
 18839                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18840                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18841                                  	; 11/12/2022
 18842 00000923 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18843                                  		
 18844                                  	; 27/03/2019
 18845                                  	;pop	ds ; *//
 18846                                  	; ds = cs
 18847                                  	;mov	[FINAL_DOS_LOCATION],bx
 18848                                  
 18849 00000927 C3                      	retn
 18850                                  
 18851                                  ;endif ;ROMDOS
 18852                                  
 18853                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18854                                  ; 24/03/2019
 18855                                  ; ----------------------------------------------------------------------
 18856                                  ;
 18857                                  ; procedure : MovBIOS
 18858                                  ;
 18859                                  ;		Moves BIOS code into requested segment
 18860                                  ;
 18861                                  ;	In : ES - segment to which BIOS is to be moved
 18862                                  ;		  ( it moves always into offset BCode_Start)
 18863                                  ;
 18864                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18865                                  ;
 18866                                  ; ----------------------------------------------------------------------
 18867                                  
 18868                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18869                                  
 18870                                  ;ifndef ROMDOS
 18871                                  
 18872                                  MovBIOS: ; proc	near
 18873                                  	; 11/12/2022
 18874 00000928 1E                      	push	ds ; ds = cs	
 18875                                  	;
 18876                                  	; 23/10/2022
 18877                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18878                                  	; 17/09/2023
 18879 00000929 8E1E[8702]              	mov	ds,[temp_bcode_seg]
 18880                                  	;mov	si,BCODE_START ; mov si,30h
 18881                                  	; 09/12/2022
 18882 0000092D BE[3000]                	mov	si,BCODESTART
 18883 00000930 89F7                    	mov	di,si
 18884 00000932 B9D019                  	mov	cx,BCODE_END ; mov cx,1A60h
 18885 00000935 29F1                    	sub	cx,si				; size of BIOS
 18886 00000937 D1E9                    	shr	cx,1				; Both the labels are para
 18887                                  						;  aligned
 18888 00000939 F3A5                    	rep	movsw
 18889                                  	
 18890                                  	; 11/12/2022
 18891 0000093B 1F                      	pop	ds ; ds = cs
 18892                                  	;
 18893 0000093C 06                      	push	es
 18894 0000093D 57                      	push	di				; save end of BIOS
 18895 0000093E 8CC0                    	mov	ax,es
 18896                                  	;
 18897                                  	; 11/12/2022
 18898                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18899                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18900                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18901                                  	; ds = cs
 18902 00000940 A3[0004]                	mov	[BCodeSeg],ax
 18903 00000943 FF1E[8502]              	call	far [seg_reinit_ptr]
 18904                                  	;
 18905 00000947 5F                      	pop	di
 18906 00000948 07                      	pop	es				; get back end of BIOS
 18907 00000949 C3                      	retn
 18908                                  
 18909                                  ;MovBIOS endp
 18910                                  
 18911                                  ;endif ; ROMDOS
 18912                                  
 18913                                  ; 11/12/2022
 18914                                  %if 0
 18915                                  
 18916                                  ; 24/03/2019
 18917                                  
 18918                                  ; ----------------------------------------------------------------------
 18919                                  ;
 18920                                  ; procedure : MovDOS
 18921                                  ;
 18922                                  ;		Moves DOS code into requested area
 18923                                  ;
 18924                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18925                                  ;	     CX    - size of DOS code to be moved
 18926                                  ;
 18927                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18928                                  ;
 18929                                  ; ----------------------------------------------------------------------
 18930                                  
 18931                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18932                                  
 18933                                  ;ifndef ROMDOS
 18934                                  
 18935                                  MovDOS:
 18936                                  	; 14/05/2019
 18937                                  	; 27/03/2019 - Retro DOS v4.0
 18938                                  
 18939                                  	; 11/12/2022
 18940                                  	; ds = cs
 18941                                  
 18942                                  	; 23/10/2022
 18943                                  	;push	ds ; *//
 18944                                  	
 18945                                  	push	es
 18946                                  	push	di
 18947                                  
 18948                                  	; 11/12/2022
 18949                                  	push	ds ; *// ; 11/12/202
 18950                                  
 18951                                  	; 29/04/2019
 18952                                  	lds	si,[dosinit] ; 11/12/2022
 18953                                  	; 23/10/2022
 18954                                  	;lds	si,[cs:dosinit]
 18955                                  	; 04/09/2023
 18956                                  	mov	ax,si
 18957                                  
 18958                                  	rep	movsb
 18959                                  
 18960                                  	pop	ds ; *// ; 11/12/2022
 18961                                  
 18962                                  	pop	bx				; get back offset into which
 18963                                  						;  DOS was moved
 18964                                  	;mov	ax,[dosinit] ; 04/09/2023
 18965                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 18966                                  						;  wants to run
 18967                                  	sub	ax,bx
 18968                                  	call	off_to_para
 18969                                  	pop	bx				; get the segment at which
 18970                                  						;  we moved DOS into
 18971                                  	sub	bx,ax				; Adjust segment
 18972                                  	
 18973                                  	; 11/12/2022
 18974                                  	; 23/10/2022
 18975                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18976                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18977                                  	; 11/12/2022
 18978                                  	mov	[CURRENT_DOS_LOCATION],bx
 18979                                  		
 18980                                  	; 27/03/2019
 18981                                  	;pop	ds ; *//
 18982                                  	; ds = cs
 18983                                  	;mov	[FINAL_DOS_LOCATION],bx
 18984                                  
 18985                                  	retn
 18986                                  
 18987                                  ;endif ;ROMDOS
 18988                                  
 18989                                  %endif
 18990                                  
 18991                                  ; ----------------------------------------------------------------------
 18992                                  ;
 18993                                  ; procedure : AllocMemForDOS
 18994                                  ;
 18995                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18996                                  ;
 18997                                  ;	Out : AX - seg of allocated memoryblock
 18998                                  ;
 18999                                  ; ----------------------------------------------------------------------
 19000                                  
 19001                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19002                                  
 19003                                  ;ifndef ROMDOS
 19004                                  
 19005                                  AllocMemForDOS:
 19006                                  	; 11/12/2022
 19007                                  	; 14/05/2019
 19008                                  	; 27/03/2019 - Retro DOS v4.0
 19009                                  	; ds = cs
 19010                                  	;mov	ax,BCode_end
 19011                                  	;sub	ax,BCode_start		; BIOS code size
 19012                                  	; 23/10/2022
 19013 0000094A B8D019                  	mov	ax,BCODE_END ; 1A60h
 19014                                  	;sub	ax,BCODE_START ; 30h
 19015                                  	; 09/12/2022
 19016 0000094D 2D[3000]                	sub	ax,BCODESTART 
 19017                                  	; 24/03/2019 - Retro DOS v4.0 
 19018                                  	; 02/11/2022
 19019                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 19020                                  	; 11/12/2022
 19021                                  	; ds = cs
 19022 00000950 0306[7F02]              	add	ax,[lo_doscod_size]
 19023 00000954 83C00F                  	add	ax,15
 19024 00000957 E86202                  	call	off_to_para			; convert to para
 19025                                  	; 23/10/2022
 19026                                  	; 14/05/2019
 19027                                  	;inc	ax ; + 1 paragraph for MCB
 19028 0000095A 09DB                    	or	bx,bx				; M012
 19029 0000095C 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 19030 0000095E 741A                    	jz	short update_arena		; M012
 19031 00000960 B448                    	mov	ah,48h				; request DOS
 19032 00000962 CD21                    	int	21h
 19033 00000964 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 19034                                   	; 23/10/2022
 19035                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 19036 00000966 83E803                  	sub	ax,3				; Take care ORG 30h of
 19037                                  						;  BIOS code
 19038 00000969 8EC0                    	mov	es,ax
 19039                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 19040                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 19041                                  	; 14/05/2019
 19042                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 19043                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 19044                                  	; 23/10/2022
 19045 0000096B 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 19046 00000972 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 19047                                  
 19048 00000979 C3                      	retn
 19049                                  
 19050                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 19051                                  ;	  using DOS itself causes an arena to be generated.
 19052                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 19053                                  ;	  assume that the device drivers are loaded into
 19054                                  ;	  the first arena. For this reason, MagicDrv's
 19055                                  ;	  main device driver header arena is manually
 19056                                  ;	  truncated from the arena chain, and the space
 19057                                  ;	  for DOS is allocated using the following
 19058                                  ;	  simple code, which also assumes that the
 19059                                  ;	  first arena is the free one where DOS's low
 19060                                  ;	  stub will go.
 19061                                  ;
 19062                                  ; M012 : BEGIN
 19063                                  
 19064                                  	; 23/10/2022
 19065                                  update_arena:
 19066 0000097A 1E                      	push	ds ; ds = cs
 19067 0000097B 57                      	push	di
 19068 0000097C 51                      	push	cx
 19069 0000097D 52                      	push	dx
 19070                                  	; 23/10/2022
 19071                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 19072                                  	; 11/12/2022
 19073                                  	; ds = cs 
 19074 0000097E C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 19075 00000982 4F                      	dec	di
 19076 00000983 4F                      	dec	di				; Arena head is immediately
 19077                                  						;  before sysvar
 19078 00000984 8E05                    	mov	es,[di]				; es = arena head
 19079                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 19080 00000986 268B0E0300              	mov	cx,[es:3]
 19081 0000098B 39D9                    	cmp	cx,bx				; is it sufficient ?
 19082 0000098D 7227                    	jb	short FatalErr			; no, fatal error
 19083                                  
 19084                                  	;mov	dl,[es:ARENA.SIGNATURE]
 19085 0000098F 268A160000              	mov	dl,[es:0]
 19086 00000994 8CC0                    	mov	ax,es
 19087 00000996 01D8                    	add	ax,bx				; ax = new arena head
 19088 00000998 8905                    	mov	[di],ax				; store it in DOS data area
 19089 0000099A 8ED8                    	mov	ds,ax
 19090                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 19091 0000099C 88160000                	mov	[0],dl
 19092                                  	;mov	word [ARENA.OWNER],0		; free
 19093 000009A0 C70601000000            	mov	word [1],0
 19094 000009A6 29D9                    	sub	cx,bx				; size of the new block
 19095                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 19096 000009A8 890E0300                	mov	[3],cx
 19097 000009AC 8CC0                    	mov	ax,es				; return seg to the caller
 19098                                  	; 23/10/2022
 19099                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 19100 000009AE 83E803                  	sub	ax,3				;  BIOS code
 19101 000009B1 5A                      	pop	dx
 19102 000009B2 59                      	pop	cx
 19103 000009B3 5F                      	pop	di
 19104 000009B4 1F                      	pop	ds ; ds = cs
 19105 000009B5 C3                      	retn
 19106                                  ;
 19107                                  ; M012 : END
 19108                                  ;
 19109                                  FatalErr:
 19110 000009B6 0E                      	push	cs
 19111 000009B7 1F                      	pop	ds
 19112 000009B8 BA[8308]                	mov	dx,FEmsg
 19113 000009BB B409                    	mov	ah,9
 19114 000009BD CD21                    	int	21h 		; DOS - PRINT STRING
 19115                                  				; DS:DX -> string terminated by "$"
 19116                                          ;jmp	stall
 19117                                  	; 23/10/2022
 19118 000009BF FA                      	cli
 19119 000009C0 F4                      	hlt
 19120                                  
 19121                                  ;endif ;ROMDOS
 19122                                  
 19123                                  ; 25/03/2019 - Retro DOS v4.0
 19124                                  
 19125                                  ; ----------------------------------------------------------------------
 19126                                  ;
 19127                                  ; procedure : AllocHMA
 19128                                  ;
 19129                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19130                                  ;	  up there. If it gets any sort of error, it will return with
 19131                                  ;	  carry set so that we can resort to running low.
 19132                                  ;
 19133                                  ;	It also returns ES: -> 0ffffh if it returns success
 19134                                  ;
 19135                                  ; ----------------------------------------------------------------------
 19136                                  
 19137                                  AllocHMA:
 19138                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19139                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19140                                  ;		   been deleted because it can be recycled for skipping the
 19141                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19142                                  ;		   in the case of a pre-286.
 19143                                  
 19144                                  ;;	see if we're running on a pre-286. If not, force low.
 19145                                  ;
 19146                                  ;	xor	ax,ax
 19147                                  ;	pushf			; save flags (like int)
 19148                                  ;	push	ax
 19149                                  ;	popf
 19150                                  ;	pushf
 19151                                  ;	pop	ax
 19152                                  ;	popf			; restore original flags (like int)
 19153                                  ;	and	ax,0F000h
 19154                                  ;	cmp	ax,0F000h	; 8088/8086?
 19155                                  ;	jz	short grab_hma_error
 19156                                  
 19157                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19158                                  	; (SYSINIT:0A26h)
 19159                                  
 19160 000009C1 1E                      	push	ds
 19161                                  	;;mov	ax,Bios_Data
 19162                                  	;mov	ax,KERNEL_SEGMENT
 19163                                  	; 21/10/2022
 19164 000009C2 B87000                  	mov	ax,DOSBIODATASEG
 19165 000009C5 8ED8                    	mov	ds,ax
 19166                                  
 19167 000009C7 E84A00                  	call	IsXMSLoaded
 19168 000009CA 7545                    	jnz	short grabhma_error
 19169                                  
 19170 000009CC B81043                  	mov	ax,4310h
 19171 000009CF CD2F                    	int	2Fh		; get the vector into es:bx
 19172                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19173                                  		; Return: ES:BX -> driver entry point
 19174                                  
 19175 000009D1 891E[0E00]              	mov	[xms],bx
 19176                                  	;mov	[0Eh], bx
 19177 000009D5 8C06[1000]              	mov	[xms+2],es
 19178                                  	;mov	[10h],es
 19179                                  
 19180 000009D9 B401                    	mov	ah,1		; request HMA
 19181 000009DB BAFFFF                  	mov	dx,0FFFFh
 19182                                  	;call	dword ptr ds:0Eh
 19183 000009DE FF1E[0E00]              	call	far [xms]
 19184 000009E2 48                      	dec	ax
 19185 000009E3 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19186                                  
 19187                                  ;------ Himem may be lying because it has allocated mem for int 15
 19188                                  
 19189 000009E5 B488                    	mov	ah,88h
 19190 000009E7 CD15                    	int	15h
 19191                                  		; Get Extended Memory Size
 19192                                  		; Return: CF clear on success
 19193                                  		; AX = size of memory above 1M in K
 19194 000009E9 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19195                                  	;jb	short grabhma_error
 19196                                  	; 11/12/2022
 19197 000009EC 7224                    	jb	short grabhma_err ; cf=1
 19198                                  allocHMA_1:
 19199 000009EE B405                    	mov	ah,5		; localenableA20
 19200                                  	;call	dword ptr ds:0Eh
 19201 000009F0 FF1E[0E00]              	call	far [xms]
 19202 000009F4 48                      	dec	ax
 19203 000009F5 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19204                                  
 19205 000009F7 E88501                  	call	IsVDiskInstalled
 19206 000009FA 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19207                                  
 19208 000009FC B8FFFF                  	mov	ax,0FFFFh
 19209 000009FF 8EC0                    	mov	es,ax
 19210 00000A01 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19211 00000A08 26813E10003412          	cmp	word [es:10h],1234h
 19212                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19213                                  	; 11/12/2022
 19214 00000A0F 7401                    	je	short allocHMA_ok	
 19215                                  
 19216                                  ; 11/12/2022
 19217                                  ;	; 11/12/2022
 19218                                  ;	; cf=0
 19219                                  ;	;clc
 19220                                  ;	pop	ds
 19221                                  ;	retn
 19222                                  
 19223                                  grabhma_error:
 19224 00000A11 F9                      	stc
 19225                                  	; 11/12/022
 19226                                  grabhma_err:	; cf=1
 19227                                  allocHMA_ok:	; cf=0
 19228 00000A12 1F                      	pop	ds
 19229 00000A13 C3                      	retn
 19230                                  
 19231                                  ; ----------------------------------------------------------------------
 19232                                  ;
 19233                                  ; procedure : IsXMSLoaded
 19234                                  ;
 19235                                  ;             Checks whether a XMS driver is loaded
 19236                                  ;
 19237                                  ; Returns : Z flag set if XMS driver loaded
 19238                                  ;           Z flag reset if no XMS drivers are present
 19239                                  ;
 19240                                  ; ----------------------------------------------------------------------
 19241                                  
 19242                                  IsXMSLoaded:
 19243 00000A14 B80043                  	mov	ax,4300h
 19244 00000A17 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19245                                  				; Return: AL = 80h XMS driver installed
 19246                                  				; AL <> 80h no driver
 19247 00000A19 3C80                    	cmp	al,80h		; XMS installed?
 19248 00000A1B C3                      	retn
 19249                                  
 19250                                  ; ----------------------------------------------------------------------
 19251                                  ; procedure : FTryToMovDOSHi
 19252                                  ;
 19253                                  ;		Called from HMA suballoc calls
 19254                                  ;	
 19255                                  ; ----------------------------------------------------------------------
 19256                                  
 19257                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19258                                  	; (SYSINIT:0A84h)
 19259                                  
 19260                                  FTryToMovDOSHi:	; proc	far
 19261                                  
 19262 00000A1C 50                      	push	ax
 19263 00000A1D 53                      	push	bx
 19264 00000A1E 51                      	push	cx
 19265 00000A1F 52                      	push	dx
 19266 00000A20 56                      	push	si
 19267 00000A21 57                      	push	di
 19268 00000A22 1E                      	push	ds
 19269 00000A23 06                      	push	es
 19270                                  
 19271                                  	; 23/10/2022
 19272                                  	; 27/03/2019 - Retro DOS v4.0
 19273                                  	; 11/12/2022
 19274 00000A24 0E                      	push	cs
 19275 00000A25 1F                      	pop	ds
 19276                                  
 19277                                  	;cmp	byte [cs:runhigh],0FFh
 19278                                  	; 11/12/2022
 19279 00000A26 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19280 00000A2B 7503                    	jne	short _ftymdh_1
 19281                                  
 19282                                  	; ds = cs
 19283 00000A2D E8A3FE                  	call	TryToMovDOSHi
 19284                                  _ftymdh_1:
 19285 00000A30 07                      	pop	es
 19286 00000A31 1F                      	pop	ds
 19287 00000A32 5F                      	pop	di
 19288 00000A33 5E                      	pop	si
 19289 00000A34 5A                      	pop	dx
 19290 00000A35 59                      	pop	cx
 19291 00000A36 5B                      	pop	bx
 19292 00000A37 58                      	pop	ax
 19293                                  
 19294 00000A38 CB                      	retf
 19295                                  
 19296                                  ; ----------------------------------------------------------------------
 19297                                  ;
 19298                                  ; following piece of code will be moved into a para boundary. And the para
 19299                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19300                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19301                                  ; to determine free extended memory.
 19302                                  ;
 19303                                  ; For more details read "power programming" column by Ray Duncan in the
 19304                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19305                                  ;
 19306                                  ; ----------------------------------------------------------------------
 19307                                  
 19308                                  StartVDHead:
 19309                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19310                                  
 19311 00000A39 00000000                	dd	0		; link to next device driver
 19312 00000A3D 0080                    	dw	8000h		; device attribute
 19313 00000A3F 0000                    	dw	0		; strategy routine offset
 19314 00000A41 0000                    	dw	0		; interrupt routine offset
 19315 00000A43 01                      	db	1		; number of units
 19316                                  	;db	7 dup(0) 
 19317 00000A44 00<rep 7h>              	times	7 db 0 		; reserved area
 19318                                  VDiskSig1:
 19319 00000A4B 564449534B              	db	'VDISK'
 19320                                  
 19321                                  VLEN1	equ	($-VDiskSig1)
 19322                                  
 19323 00000A50 202056332E33            	db	'  V3.3'	; vdisk label
 19324                                  	;db	15 dup (0)	; pad
 19325 00000A56 00<rep Fh>              	times	15 db 0
 19326 00000A65 0000                    	dw	0		; bits 0-15 of free HMA
 19327 00000A67 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19328                                  VDInt19:
 19329 00000A68 EA                      	db	0EAh		; jmp to old vector
 19330                                  OldVDInt19:
 19331 00000A69 00000000                	dd	0		; Saved int 19 vector
 19332                                  
 19333                                  EndVDHead: ; label byte
 19334                                  
 19335                                  VDiskHMAHead:	
 19336 00000A6D 000000                  	db	0,0,0		; non-bootable disk
 19337                                  VDiskSig2:
 19338 00000A70 564449534B              	db	'VDISK'
 19339                                  
 19340                                  VLEN2	equ	($-VDiskSig2)
 19341                                  
 19342 00000A75 332E33                  	db	'3.3'		; OEM - signature
 19343 00000A78 8000                    	dw	128		; number of bytes/sector
 19344 00000A7A 01                      	db	1		; sectors/cluster
 19345 00000A7B 0100                    	dw	1		; reserved sectors
 19346 00000A7D 01                      	db	1		; number of FAT copies
 19347 00000A7E 4000                    	dw	64		; number of root dir entries
 19348 00000A80 0002                    	dw	512		; number of sectors
 19349 00000A82 FE                      	db	0FEh		; media descriptor
 19350 00000A83 0600                    	dw	6		; number of sectors/FAT
 19351 00000A85 0800                    	dw	8		; sectors per track
 19352 00000A87 0100                    	dw	1		; number of heads
 19353 00000A89 0000                    	dw	0		; number of hidden sectors
 19354 00000A8B 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19355                                  
 19356                                  EndVDiskHMAHead: ; label byte
 19357                                  
 19358                                  ; ----------------------------------------------------------------------
 19359                                  ;
 19360                                  ; procedure : InstVDiskHeader
 19361                                  ;
 19362                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19363                                  ;	      It puts a 32 byte header at 10000:0 and
 19364                                  ;	      another header at (seg of int19):0
 19365                                  ;
 19366                                  ; Inputs : None
 19367                                  ;
 19368                                  ; Outputs : None
 19369                                  ;
 19370                                  ; USES : DS,SI,AX,CX,DX
 19371                                  ;
 19372                                  ; ----------------------------------------------------------------------
 19373                                  
 19374                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19375                                  
 19376                                  InstVDiskHeader:
 19377 00000A8D 31C0                    	xor	ax,ax
 19378 00000A8F 8ED8                    	mov	ds,ax			; seg of int vect table
 19379                                  
 19380                                  ;-------------- save old int 19 vector
 19381                                  
 19382                                  	; 23/10/2022
 19383 00000A91 A16400                  	mov	ax,[19h*4]
 19384                                  	;mov	[OldVDInt19],ax
 19385 00000A94 2EA3[690A]              	mov	[cs:OldVDInt19],ax
 19386 00000A98 A16600                  	mov	ax,[19h*4+2]
 19387                                  	;mov	[OldVDInt19+2],ax
 19388 00000A9B 2EA3[6B0A]              	mov	[cs:OldVDInt19+2],ax
 19389                                  
 19390                                  ;-------------- calculate seg of new int 19 handler
 19391                                  
 19392 00000A9F B448                    	mov	ah,48h			; allocate memory
 19393                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19394                                  	; 23/10/2022
 19395 00000AA1 BB0400                  	mov	bx,4
 19396 00000AA4 CD21                    	int	21h
 19397                                  
 19398                                  ;	if carry, fatal hanging error!!!!!
 19399                                  
 19400 00000AA6 48                      	dec	ax			; point to arena
 19401 00000AA7 8EC0                    	mov	es,ax
 19402                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19403 00000AA9 26C70601000800          	mov	word [es:1],8
 19404                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19405 00000AB0 26C70608005343          	mov	word [es:8],'SC'
 19406 00000AB7 40                      	inc	ax
 19407 00000AB8 8EC0                    	mov	es,ax			; get back to allocated memory
 19408                                  
 19409                                  ;-------------- install new int 19 vector
 19410                                  
 19411 00000ABA FA                      	cli				; no reboots at this time
 19412                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19413 00000ABB C70664002F00            	mov	word [19h*4],47
 19414 00000AC1 A36600                  	mov	[19h*4+2],ax
 19415                                  
 19416                                  ;-------------- move the code into proper place
 19417                                  
 19418                                  	;mov	cx,(EndVDHead-StartVDHead)
 19419 00000AC4 B93400                  	mov	cx,52
 19420 00000AC7 BE[390A]                	mov	si,StartVDHead
 19421 00000ACA 31FF                    	xor	di,di
 19422 00000ACC 0E                      	push	cs
 19423 00000ACD 1F                      	pop	ds
 19424 00000ACE FC                      	cld
 19425 00000ACF F3A4                    	rep	movsb
 19426 00000AD1 FB                      	sti				; BUGBUG is sti OK now?
 19427                                  
 19428                                  ;-------------- mov the HMA VDisk head into HMA
 19429                                  
 19430                                  	; 23/10/2022
 19431 00000AD2 57                      	push	di
 19432 00000AD3 06                      	push	es
 19433                                  
 19434                                  	;mov	ax,0FFFFh
 19435                                  	;mov	es,ax
 19436                                  	; 04/09/2023
 19437 00000AD4 49                      	dec	cx
 19438                                  	; cx = 0FFFFh
 19439 00000AD5 8EC1                    	mov	es,cx
 19440                                  
 19441 00000AD7 BF1000                  	mov	di,10h
 19442                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19443 00000ADA B92000                  	mov	cx,32
 19444 00000ADD BE[6D0A]                	mov	si,VDiskHMAHead
 19445 00000AE0 F3A4                    	rep	movsb			; ds already set to cs
 19446                                  
 19447 00000AE2 5F                      	pop	di
 19448 00000AE3 07                      	pop	es
 19449                                  
 19450 00000AE4 C3                      	retn
 19451                                  
 19452                                  ; ----------------------------------------------------------------------
 19453                                  ; procedure : ClrVDISKHeader
 19454                                  ;
 19455                                  ;		Clears the first 32 bytes at 1MB boundary
 19456                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19457                                  ;		left by previous DOS=HIGH session
 19458                                  ;
 19459                                  ; ----------------------------------------------------------------------
 19460                                  
 19461                                  struc desc
 19462 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19463 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19464 00000004 ??                       .hi_byte:	resb 	1		; address
 19465 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19466 00000006 ????                     .reserved:	resw	1		;
 19467                                   .size:
 19468                                  endstruc
 19469                                  
 19470                                  		; 23/10/2022
 19471                                  bmove:		;label byte
 19472                                  
 19473                                  dummy:		;times desc.size db 0	; desc	<>
 19474 00000AE5 00<rep 8h>              		times 8 db 0		 
 19475                                  gdt:		;times desc.size db 0	; desc	<>
 19476 00000AED 00<rep 8h>              		times 8 db 0
 19477 00000AF5 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19478 00000AF7 0000                    		dw	0
 19479 00000AF9 00                      		db	0
 19480 00000AFA 93                      		db	93h
 19481 00000AFB 0000                    		dw	0
 19482 00000AFD FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19483 00000AFF 0000                    		dw	0
 19484 00000B01 10                      		db	10h
 19485 00000B02 93                      		db	93h
 19486 00000B03 0000                    		dw	0
 19487                                  
 19488                                  rombios_code:	;times desc.size db 0	; desc	<>
 19489 00000B05 00<rep 8h>              		times 8 db 0
 19490                                  temp_stack:	;times desc.size db 0	; desc	<>
 19491 00000B0D 00<rep 8h>              		times 8 db 0
 19492                                  
 19493 00000B15 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19494                                  
 19495                                  
 19496                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19497                                  
 19498                                  ClrVDISKHeader:	; proc	near
 19499                                  
 19500                                  ;;-----------------------------------------------------------	      ;I070
 19501                                  ;; The following workaround get around a problem with the	      ;I070
 19502                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19503                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19504                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19505                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19506                                  ;; move crashes the system. We can do this because these	      ;I070
 19507                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19508                                  ;								      ;I070
 19509                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19510                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19511                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19512                                  ;                                      ; Check for Tortugas...	      ;I070
 19513                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19514                                  ;               je      short ClrVDISKno                              ;I070
 19515                                  ;                                      ; Check for mod 30-286	      ;I070
 19516                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19517                                  ;               jne     short ClrVDISKok			      ;I070
 19518                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19519                                  ;								      ;I070
 19520                                  ;ClrVDISKok:							      ;I070
 19521                                  ;-----------------------------------------------------------	      ;I070
 19522                                  
 19523                                  	; 12/12/2022
 19524                                  	; ds = cs
 19525                                  
 19526 00000B35 06                      	push	es
 19527 00000B36 8CC8                    	mov	ax,cs
 19528 00000B38 89C2                    	mov	dx,ax
 19529 00000B3A B10C                    	mov	cl,12
 19530 00000B3C D3EA                    	shr	dx,cl
 19531 00000B3E B104                    	mov	cl,4
 19532 00000B40 D3E0                    	shl	ax,cl
 19533 00000B42 05[150B]                	add	ax,ClrdVDISKHead
 19534 00000B45 80D200                  	adc	dl,0
 19535                                  
 19536                                  	;; 23/10/2022
 19537                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19538                                  	;mov	[cs:src_desc+2],ax
 19539                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19540                                  	;mov	[cs:src_desc+4],dl
 19541                                  	; 12/12/2022
 19542                                  	;mov	[src_desc+desc.lo_word],ax
 19543 00000B48 A3[F70A]                	mov	[src_desc+2],ax
 19544                                  	;mov	[src_desc+desc.hi_byte],dl
 19545 00000B4B 8816[F90A]              	mov	[src_desc+4],dl
 19546                                  
 19547 00000B4F B91000                  	mov	cx,16	; 16 words
 19548 00000B52 0E                      	push	cs
 19549 00000B53 07                      	pop	es
 19550 00000B54 BE[E50A]                	mov	si,bmove
 19551 00000B57 B487                    	mov	ah,87h
 19552 00000B59 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19553                                  			; CX = number of words to move 
 19554                                  			; ES:SI -> global descriptor table
 19555                                  			; Return: CF set on error, AH = status
 19556 00000B5B 07                      	pop	es
 19557 00000B5C C3                      	retn
 19558                                  
 19559                                  ; ----------------------------------------------------------------------
 19560                                  ;
 19561                                  ; procedure : SaveFreeHMAPtr
 19562                                  ;
 19563                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19564                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19565                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19566                                  ;		the offset.
 19567                                  ;
 19568                                  ; Inputs : ES:DI - pointer to free HMA
 19569                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19570                                  ;
 19571                                  ; ----------------------------------------------------------------------
 19572                                  
 19573                                  SaveFreeHMAPtr:
 19574                                  	; 04/09/2023
 19575 00000B5D 1E                      	push	ds
 19576 00000B5E B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19577 00000B61 8ED8                    	mov	ds,ax
 19578                                  	;
 19579 00000B63 8CC3                    	mov	bx,es
 19580 00000B65 B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 19581                                  	; 04/09/2023
 19582 00000B68 A2[0D00]                	mov	[inHMA],al ; 0FFh
 19583                                  	;
 19584 00000B6B 29D8                    	sub	ax,bx
 19585 00000B6D 83C70F                  	add	di,15		   ; para round
 19586 00000B70 83E7F0                  	and	di,0FFF0h
 19587 00000B73 B104                    	mov	cl,4
 19588 00000B75 D3E0                    	shl	ax,cl
 19589 00000B77 29C7                    	sub	di,ax
 19590                                  	;
 19591                                  	; 04/09/2023
 19592                                  	;push	ds
 19593                                  	;;mov	ax,Bios_Data ; 0070h
 19594                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19595                                  	; 21/10/2022
 19596                                  	; 04/09/2023
 19597                                  	;mov	ax,DOSBIODATASEG ; 0070h
 19598                                  	;mov	ds,ax
 19599 00000B79 893E[F408]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19600                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19601 00000B7D 1F                      	pop	ds
 19602 00000B7E C3                      	retn
 19603                                  
 19604                                  ; ----------------------------------------------------------------------
 19605                                  ;
 19606                                  ; procedure : IsVDiskInstalled
 19607                                  ;
 19608                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19609                                  ;		& INT 19 vector
 19610                                  ;
 19611                                  ; Inputs  : A20 flag should be ON
 19612                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19613                                  ;
 19614                                  ; ----------------------------------------------------------------------
 19615                                  
 19616                                  IsVDiskInstalled:
 19617 00000B7F 31C0                    	xor	ax,ax
 19618 00000B81 8ED8                    	mov	ds,ax
 19619 00000B83 8E1E4E00                	mov	ds,[19*4+2]
 19620                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19621                                  	; 23/10/2022
 19622 00000B87 BE1200                  	mov	si,18
 19623                                  	;mov	cx,VLEN1 ; 5
 19624 00000B8A B90500                  	mov	cx,5
 19625 00000B8D 0E                      	push	cs
 19626 00000B8E 07                      	pop	es
 19627 00000B8F BF[4B0A]                	mov	di,VDiskSig1
 19628 00000B92 F3A6                    	rep	cmpsb
 19629 00000B94 740F                    	je	short ivdins_retn
 19630 00000B96 B8FFFF                  	mov	ax,0FFFFh
 19631 00000B99 8ED8                    	mov	ds,ax
 19632                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19633 00000B9B BE1300                  	mov	si,13h
 19634 00000B9E BF[700A]                	mov	di,VDiskSig2
 19635                                  	;;mov	cx,VLEN2  ; 5
 19636                                  	;mov	cx,5
 19637                                  	; 04/09/2023
 19638 00000BA1 B105                    	mov	cl,5
 19639 00000BA3 F3A6                    	rep	cmpsb
 19640                                  ivdins_retn: 
 19641 00000BA5 C3                      	retn			; returns the Zero flag
 19642                                  
 19643                                  ; ----------------------------------------------------------------------
 19644                                  ;
 19645                                  ; procedure : CPMHack
 19646                                  ;
 19647                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19648                                  ;		for CPM compatibility
 19649                                  ;
 19650                                  ; ----------------------------------------------------------------------
 19651                                  
 19652                                  	; 11/12/2022
 19653                                  CPMHack:
 19654 00000BA6 1E                      	push	ds
 19655 00000BA7 B9FFFF                  	mov	cx,0FFFFh
 19656 00000BAA 8EC1                    	mov	es,cx		; ES = FFFF
 19657                                  	;xor	cx,cx
 19658                                  	; 11/12/2022
 19659 00000BAC 41                      	inc	cx  ; cx = 0
 19660 00000BAD 8ED9                    	mov	ds,cx		; DS = 0
 19661 00000BAF BEC000                  	mov	si,0C0h
 19662 00000BB2 BFD000                  	mov	di,0D0h
 19663                                  	;mov	cx,5
 19664 00000BB5 B105                    	mov	cl,5
 19665 00000BB7 FC                      	cld
 19666 00000BB8 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19667 00000BBA 1F                      	pop	ds
 19668 00000BBB C3                      	retn
 19669                                  
 19670                                  ; ----------------------------------------------------------------------
 19671                                  ;
 19672                                  ; procedure : off_to_para
 19673                                  ;
 19674                                  ; ----------------------------------------------------------------------
 19675                                  off_to_para:
 19676 00000BBC D1E8                    	shr	ax,1
 19677 00000BBE D1E8                    	shr	ax,1
 19678 00000BC0 D1E8                    	shr	ax,1
 19679 00000BC2 D1E8                    	shr	ax,1
 19680 00000BC4 C3                      	retn
 19681                                  
 19682                                  ; ----------------------------------------------------------------------
 19683                                  ;**	TempCDS - Create (Temporary?) CDS
 19684                                  ;
 19685                                  ;	ENTRY	?? BUGBUG
 19686                                  ;		(DS) = SysInitSeg
 19687                                  ;	EXIT	?? BUGBUG
 19688                                  ;	USES	?? BUGBUG
 19689                                  ; ----------------------------------------------------------------------
 19690                                  
 19691                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19692                                  TempCDS:
 19693 00000BC5 C43E[6B02]              	les	di,[DOSINFO]
 19694 00000BC9 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19695                                  	;mov	cl,[es:di+20h]
 19696 00000BCD 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19697                                  
 19698 00000BCF 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19699                                  	;mov	[es:di+21h],cl	
 19700                                  
 19701 00000BD3 88C8                    	mov	al,cl
 19702 00000BD5 B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19703                                  	;mov	ah,88
 19704 00000BD7 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19705 00000BD9 E8C804                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19706 00000BDC 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19707                                  
 19708                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19709                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19710                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19711                                  ;		   variable which has the top of free memory for
 19712                                  ;		   device driver loads, etc.
 19713                                  
 19714 00000BE0 29C6                    	sub	si,ax
 19715                                  
 19716                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19717                                  ;		that automatically updates alloclim every time we
 19718                                  ;		set up some new CDSs. Instead, I've added code
 19719                                  ;		which pre-allocates space for 26 CDSs. This
 19720                                  ;	        way we've got room for worst case CDSs before
 19721                                  ;		we place MagicDrv.sys
 19722                                  ;
 19723                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19724                                  
 19725                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19726                                  	; (SYSINIT:0C52h)
 19727 00000BE2 8936[A302]              	mov	[ALLOCLIM],si
 19728                                  
 19729 00000BE6 26897518                	mov	[es:di+SYSI_CDS+2],si
 19730                                  	;mov	[es:di+18h],si
 19731 00000BEA 89F0                    	mov	ax,si
 19732 00000BEC 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19733                                  	;mov	[word es:di+16h],0
 19734                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19735 00000BF2 26C535                  	lds	si,[es:di]
 19736 00000BF5 8EC0                    	mov	es,ax
 19737 00000BF7 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19738                                  
 19739                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19740                                  ;	info from the corresponding DPB.
 19741                                  ;
 19742                                  ;	(cx) = count of CDSs left to process
 19743                                  ;	(es:di) = address of next CDS
 19744                                  
 19745                                  fooset:
 19746                                  	; 23/10/2022
 19747 00000BF9 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19748 00000BFD AB                      	stosw				; setup the root as the curdir
 19749                                  
 19750                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19751                                  
 19752                                  ;	(ds:si) = address of DPB
 19753                                  ;		 (si) = -1 if no drive
 19754                                  
 19755 00000BFE 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19756 00000C02 AB                      	stosw
 19757 00000C03 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19758 00000C08 31C0                    	xor	ax,ax
 19759 00000C0A 51                      	push	cx
 19760                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19761 00000C0B B93F00                  	mov	cx,63	; 23/10/2022
 19762 00000C0E F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19763                                  
 19764                                  ;	should handle the system that does not have any floppies.
 19765                                  ;	in this case,we are going to pretended there are two dummy floppies
 19766                                  ;	in the system. still they have dpb and cds,but we are going to
 19767                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19768                                  ;	"invalid drive specification" message when the user try to
 19769                                  ;	access them.
 19770                                  ;
 19771                                  ;	(ax) = 0
 19772                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19773                                  ;	(ds:si) = Next DPB (-1 if none)
 19774                                  
 19775 00000C10 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19776 00000C13 7413                    	je	short fooset_zero	; don't have any physical drive.
 19777                                  
 19778                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19779                                  ;	if we are faking floppy drives then see if this cds being initialised
 19780                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19781                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19782                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19783                                  ;	for dpb offsets look at inc\dpb.inc.
 19784                                  
 19785                                  	; 04/09/2023
 19786 00000C15 41                      	inc	cx  ; cx = 1
 19787                                  
 19788 00000C16 2E380E[8902]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 04/09/2023
 19789                                  	;cmp	byte [cs:fake_floppy_drv],1
 19790 00000C1B 7512                    	jne	short normcds 		; machine has floppy drives
 19791                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19792                                  	;cmp	byte [si],1
 19793 00000C1D 380C                    	cmp	[si],cl ; 1 ; 04/09/2023
 19794 00000C1F 770E                    	ja	short normcds
 19795 00000C21 B103                    	mov	cl,3			; the next dbp pointer
 19796                                  					; AX should be zero here
 19797 00000C23 F3AB                    	rep	stosw
 19798 00000C25 59                      	pop	cx
 19799 00000C26 EB17                    	jmp	short get_next_dpb
 19800                                  
 19801                                  ;	(ax) = 0
 19802                                  
 19803                                  fooset_zero:
 19804 00000C28 B103                    	mov	cl,3
 19805 00000C2A F3AB                    	rep	stosw
 19806 00000C2C 59                      	pop	cx
 19807 00000C2D EB13                    	jmp	short fincds
 19808                                  
 19809                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19810                                  ;
 19811                                  ;	(ax) = 0
 19812                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19813                                  ;	(ds:si) = Next DPB (-1 if none)
 19814                                  
 19815                                  normcds:
 19816 00000C2F 59                      	pop	cx
 19817                                  
 19818                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19819                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19820                                  ;	this media is a non-fat based one.
 19821                                  
 19822                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19823                                  	; 23/10/2022
 19824                                  	;cmp	byte [si+8],0
 19825                                  	; 04/09/2023 (ax=0)
 19826 00000C30 384408                  	cmp	[si+8],al ; 0
 19827 00000C33 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19828 00000C35 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19829                                  	;mov	ax,4000h
 19830                                  setnormcds:
 19831 00000C38 AB                      	stosw				; curdir_flags
 19832 00000C39 89F0                    	mov	ax,si
 19833 00000C3B AB                      	stosw				; curdir_devptr
 19834 00000C3C 8CD8                    	mov	ax,ds
 19835 00000C3E AB                      	stosw
 19836                                  
 19837                                  get_next_dpb:				; entry point for fake_fooset_zero
 19838                                  	; 23/10/2022
 19839 00000C3F C57419                  	lds	si,[si+19h]
 19840                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19841                                  fincds:
 19842 00000C42 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19843 00000C45 AB                      	stosw				; curdir_id
 19844 00000C46 AB                      	stosw				; curdir_id
 19845 00000C47 AB                      	stosw				; curdir_user_word
 19846 00000C48 B80200                  	mov	ax,2
 19847 00000C4B AB                      	stosw				; curdir_end
 19848 00000C4C B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19849 00000C4E AA                      	stosb
 19850 00000C4F AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19851 00000C50 AB                      	stosw
 19852 00000C51 AB                      	stosw
 19853                                  
 19854 00000C52 E2A5                    	loop	fooset
 19855                                  	
 19856 00000C54 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19857                                  	
 19858 00000C5A C3                      	retn
 19859                                  
 19860                                  ; ----------------------------------------------------------------------
 19861                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19862                                  ;
 19863                                  ;	entry:
 19864                                  ;	   al == ASCII CAPS drive letter
 19865                                  ;
 19866                                  ;	exit:
 19867                                  ;	   ds:si -> DPB, or si = -1 if not found
 19868                                  ; ----------------------------------------------------------------------
 19869                                  
 19870                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19871                                  ;
 19872                                  ;get_dpb_for_drive_al:
 19873                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19874                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19875                                  ;	lds	si,[si]
 19876                                  ;	sub	al,'A'
 19877                                  ;
 19878                                  ;get_dpb_for_drive_1:
 19879                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19880                                  ;	cmp	al,[si]
 19881                                  ;	je	short got_dpb_for_drive	;  done if so
 19882                                  ;
 19883                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19884                                  ;	cmp	si,-1
 19885                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19886                                  ;
 19887                                  ;got_dpb_for_drive:
 19888                                  ;	retn
 19889                                  
 19890                                  ;=======================================================================
 19891                                  
 19892                                  ;**	EndFile - Build DOS structures
 19893                                  ;
 19894                                  ; This procedure is called after the config.sys has been processed and
 19895                                  ; installable device drivers have been loaded (but before "install="
 19896                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19897                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19898                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19899                                  ; above these structures is deallocated back to DOS.
 19900                                  ;
 19901                                  ;	ENTRY	?? BUGBUG
 19902                                  ;	EXIT	?? BUGBUG
 19903                                  ;	USES	?? BUGBUG
 19904                                  
 19905                                  ;=======================================================================
 19906                                  ; allocate files
 19907                                  ; ----------------------------------------------------------------------
 19908                                  
 19909                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19910                                  	; (SYSINIT:0CCDh)
 19911                                  
 19912                                  endfile:
 19913                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19914                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19915                                  ; to confbot.
 19916                                  
 19917                                  ;	if this procedure has been called to take care of install= command,
 19918                                  ;	   then we have to save es,si registers.
 19919                                  
 19920                                  	; 11/12/2022
 19921                                  	; ds = cs
 19922                                  
 19923                                  	; 23/10/2022
 19924                                  	; 31/03/2019
 19925 00000C5B 1E                      	push	ds
 19926                                  
 19927                                  	;;mov	ax,Bios_Data ; 0070h
 19928                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19929                                  	; 21/10/2022
 19930 00000C5C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19931 00000C5F 8ED8                    	mov	ds,ax
 19932                                  
 19933                                  	;cmp	word [052Fh],0
 19934 00000C61 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19935 00000C66 7505                    	jne	short multrk_flag_done
 19936                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19937                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19938                                  	; 12/12/2022
 19939 00000C68 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19940                                  multrk_flag_done:
 19941                                  	; 23/10/2022
 19942                                  	; 31/03/2019
 19943 00000C6D 1F                      	pop	ds
 19944                                  
 19945                                  	; 11/12/2022
 19946                                  	; ds = cs
 19947 00000C6E A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19948 00000C71 A3[A302]                	mov	[ALLOCLIM],ax
 19949                                  	; 23/10/2022
 19950                                  	;mov	ax, [cs:top_of_cdss]
 19951                                  	;mov	[cs:ALLOCLIM], ax 
 19952                                  
 19953                                  	; 11/12/2022
 19954                                  	; ds = cs
 19955                                  	;push	cs
 19956                                  	;pop	ds
 19957                                  	
 19958                                  	;mov	ax,[CONFBOT]
 19959                                  	;mov	[ALLOCLIM],ax
 19960                                  
 19961 00000C74 E8A023                  	call	round
 19962                                  	; 11/12/2022
 19963                                  	; ds = cs
 19964 00000C77 A0[9D02]                	mov	al,[FILES]
 19965                                  	; 23/10/2022
 19966                                  	;mov	al,[cs:FILES]
 19967 00000C7A 2C05                    	sub	al,5
 19968 00000C7C 764B                    	jbe	short dofcbs
 19969                                  
 19970 00000C7E 50                      	push	ax
 19971                                  	;mov	al,devmark_files ; 'F'
 19972 00000C7F B046                    	mov	al,'F'
 19973 00000C81 E86D07                  	call	setdevmark		; set devmark for sfts (files)
 19974 00000C84 58                      	pop	ax
 19975 00000C85 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19976                                  					;  it does sign extend.
 19977                                  	; 11/12/2022
 19978                                  	; ds = cs
 19979 00000C87 8B1E[DE03]              	mov	bx,[memlo]
 19980 00000C8B 8B16[E003]              	mov	dx,[memhi]
 19981 00000C8F C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19982                                  	; 23/10/2022
 19983                                  	;mov	bx,[cs:memlo]
 19984                                  	;mov	dx,[cs:memhi]
 19985                                  	;lds	di,[cs:DOSINFO]		
 19986                                  
 19987                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19988 00000C93 C57D04                  	lds	di,[di+4]
 19989                                  
 19990                                  	;mov	[di+SF.SFLink],bx
 19991 00000C96 891D                    	mov	[di],bx
 19992 00000C98 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19993                                  
 19994 00000C9B 0E                      	push	cs
 19995 00000C9C 1F                      	pop	ds
 19996                                  
 19997                                  	; 11/12/2022
 19998                                  	; ds = cs
 19999 00000C9D C43E[DE03]              	les	di,[memlo]		;point to new sft
 20000                                  	; 23/10/2022
 20001                                  	;les	di,[cs:memlo]
 20002                                  
 20003                                  	;mov	word [es:di+SF.SFLink],-1
 20004 00000CA1 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 20005                                  	;mov	[es:di+SF.SFCount],ax
 20006 00000CA6 26894504                	mov	[es:di+4],ax
 20007                                  	;mov	bl,SF_ENTRY.size ; 59
 20008 00000CAA B33B                    	mov	bl,59
 20009 00000CAC F6E3                    	mul	bl			;ax = number of bytes to clear
 20010 00000CAE 89C1                    	mov	cx,ax
 20011                                  	; 11/12/2022
 20012                                  	; ds = cs
 20013 00000CB0 0106[DE03]              	add	[memlo],ax		;allocate memory
 20014                                  	; 23/10/2022
 20015                                  	;add	[cs:memlo],ax
 20016 00000CB4 B80600                  	mov	ax,6
 20017                                  	; 11/12/2022
 20018 00000CB7 0106[DE03]              	add	[memlo],ax		;remember the header too
 20019                                  	;add	[cs:memlo],ax
 20020                                  	; 11/12/2022
 20021 00000CBB 800E[1014]02            	or	byte [setdevmarkflag],for_devmark ; 2
 20022                                  	; 23/10/2022
 20023                                  	;or	byte [cs:setdevmarkflag],2
 20024 00000CC0 E85423                  	call	round			; check for mem error before the stosb
 20025 00000CC3 01C7                    	add	di,ax
 20026 00000CC5 31C0                    	xor	ax,ax
 20027 00000CC7 F3AA                    	rep	stosb			;clean out the stuff
 20028                                  
 20029                                  ; allocate fcbs
 20030                                  ; ----------------------------------------------------------------------
 20031                                  
 20032                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20033                                  	; (SYSINIT:0D48h)
 20034                                  dofcbs:
 20035                                  	; 11/12/2022
 20036                                  	; ds = cs
 20037                                  	;push	cs
 20038                                  	;pop	ds
 20039 00000CC9 E84B23                  	call	round
 20040                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 20041 00000CCC B058                    	mov	al,'X'
 20042 00000CCE E82007                  	call	setdevmark
 20043                                  	; 11/12/2022
 20044                                  	; ds = cs
 20045 00000CD1 A0[9E02]                	mov	al,[FCBS]
 20046                                  	;mov	al,[cs:FCBS]
 20047 00000CD4 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20048                                  					;  it does sign extend.
 20049                                  	; 11/12/2022
 20050 00000CD6 8B1E[DE03]              	mov	bx,[memlo]
 20051 00000CDA 8B16[E003]              	mov	dx,[memhi]
 20052 00000CDE C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20053                                  	; 23/10/2022
 20054                                  	;mov	bx,[cs:memlo]
 20055                                  	;mov	dx,[cs:memhi]
 20056                                  	;lds	di,[cs:DOSINFO]
 20057                                  
 20058                                  	;mov	[di+SYSI_FCB],bx
 20059                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 20060                                  	; 23/10/2022
 20061 00000CE2 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 20062 00000CE5 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 20063                                  
 20064 00000CE8 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 20065 00000CED 30FF                    	xor	bh,bh
 20066                                  	;mov	[di+SYSI_KEEP],bx
 20067 00000CEF 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 20068                                  
 20069 00000CF2 0E                      	push	cs
 20070 00000CF3 1F                      	pop	ds
 20071                                  	
 20072 00000CF4 C43E[DE03]              	les	di,[memlo]		;point to new table
 20073                                  	;mov	word [es:di+SF.SFLink],-1
 20074 00000CF8 26C705FFFF              	mov	word [es:di],-1
 20075                                  	;mov	[es:di+SF.SFCount],ax
 20076                                  	; 02/11/2022
 20077 00000CFD 26894504                	mov	[es:di+4],ax
 20078 00000D01 B339                    	mov	bl,SF_ENTRY.size ; 59
 20079 00000D03 89C1                    	mov	cx,ax
 20080 00000D05 F6E3                    	mul	bl			;ax = number of bytes to clear
 20081 00000D07 0106[DE03]              	add	[memlo],ax		;allocate memory
 20082                                  	;mov	ax,6
 20083 00000D0B B80600                  	mov	ax,SF.size-2 ; 6
 20084 00000D0E 0106[DE03]              	add	[memlo],ax		;remember the header too
 20085                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20086 00000D12 800E[1014]02            	or	byte [setdevmarkflag],2
 20087 00000D17 E8FD22                  	call	round			; check for mem error before the stosb
 20088 00000D1A 01C7                    	add	di,ax			;skip over header
 20089 00000D1C B041                    	mov	al,'A'
 20090                                  fillloop:
 20091 00000D1E 51                      	push	cx			; save count
 20092 00000D1F B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 20093 00000D22 FC                      	cld
 20094 00000D23 F3AA                    	rep	stosb			; filled
 20095                                  
 20096                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 20097                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 20098                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 20099                                  
 20100                                  	; 18/12/2022
 20101                                  	;cx = 0
 20102 00000D25 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 20103 00000D29 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 20104 00000D2D 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 20105                                  	
 20106                                  	; 23/10/2022	
 20107                                  	;mov     word [es:di-3Bh],0
 20108                                  	;mov     word [es:di-26h],0
 20109                                  	;mov     word [es:di-24h],0
 20110                                  
 20111 00000D31 59                      	pop	cx
 20112 00000D32 E2EA                    	loop	fillloop
 20113                                  
 20114                                  ; allocate buffers
 20115                                  ; ----------------------------------------------------------------------
 20116                                  
 20117                                  ; search through the list of media supported and allocate 3 buffers if the
 20118                                  ; capacity of the drive is > 360kb
 20119                                  
 20120                                  	; 18/12/2022
 20121                                  	; cx = 0
 20122 00000D34 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 20123 00000D39 7403                    	je	short dodefaultbuff
 20124 00000D3B E98000                  	jmp	dobuff			; the user entered the buffers=.
 20125                                  
 20126                                  dodefaultbuff:
 20127                                  	; 18/12/2022
 20128 00000D3E 890E[9902]              	mov	[h_buffers],cx ; 0
 20129 00000D42 41                      	inc	cx
 20130 00000D43 41                      	inc	cx
 20131 00000D44 890E[9702]              	mov	[buffers],cx ; 2
 20132                                  	
 20133                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 20134                                  	;mov	word [buffers],2	; default to 2 buffers
 20135                                  
 20136                                  	; 23/10/2022
 20137                                  	; 04/09/2023
 20138                                  	;push	ax
 20139                                  	;push	ds ; 26/03/2019
 20140                                  
 20141                                  	; 04/09/2023
 20142                                  	; ds = cs
 20143 00000D48 C42E[6B02]              	les	bp,[DOSINFO]		; search through the dpb's
 20144                                  	;les	bp,[cs:DOSINFO]
 20145                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 20146                                  	; 11/12/2022
 20147 00000D4C 26C46E00                	les	bp,[es:bp]
 20148                                  	; 23/10/2022
 20149                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 20150                                  
 20151                                  	; 04/09/2023
 20152                                  	; ds = cs
 20153                                  	;push	cs
 20154                                  	;pop	ds
 20155                                  ;SYSINIT:0DE2h:
 20156                                  nextdpb:				; test if the drive supports removeable media
 20157                                  	;mov	bl,[es:bp+DPB.drive]
 20158                                  	; 11/12/2022
 20159 00000D50 268A5E00                	mov	bl,[es:bp]
 20160                                  	; 23/10/2022
 20161                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20162                                  
 20163                                  	;inc	bl
 20164                                  	; 18/12/2022
 20165 00000D54 43                      	inc	bx
 20166                                  
 20167                                  	;mov	ax,(IOCTL<<8)|8
 20168 00000D55 B80844                  	mov	ax,4408h
 20169 00000D58 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20170                                  
 20171                                  ; ignore fixed disks
 20172                                  
 20173 00000D5A 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20174 00000D5C 7534                    	jnz	short nosetbuf
 20175                                  
 20176                                  ; get parameters of drive
 20177                                  
 20178 00000D5E 31DB                    	xor	bx,bx
 20179                                  	;;mov	bl,[es:bp+DPB.drive]
 20180                                  	; 11/12/2022
 20181 00000D60 268A5E00                	mov	bl,[es:bp]
 20182                                  	; 23/10/2022
 20183                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20184                                  	
 20185                                  	;inc	bl
 20186                                  	; 18/12/2022
 20187 00000D64 43                      	inc	bx
 20188                                  
 20189 00000D65 BA[7434]                	mov	dx,deviceparameters
 20190                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20191 00000D68 B80D44                  	mov	ax,440Dh
 20192                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20193 00000D6B B96008                  	mov	cx,860h
 20194 00000D6E CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20195 00000D70 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20196                                  					; generic ioctl
 20197                                  ; determine capacity of drive
 20198                                  ; media capacity = #sectors * bytes/sector
 20199                                  
 20200                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20201                                  	; 23/10/2022
 20202 00000D72 8B1E[8334]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20203                                  	
 20204                                  ; to keep the magnitude of the media capacity within a word,
 20205                                  ; scale the sector size
 20206                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20207                                  
 20208                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20209                                  	; 23/10/2022
 20210 00000D76 A1[7B34]                	mov	ax, [deviceparameters+7] ; bytes per sector
 20211 00000D79 31D2                    	xor	dx,dx
 20212 00000D7B B90002                  	mov	cx,512
 20213 00000D7E F7F1                    	div	cx			; scale sector size in factor of
 20214                                  					; 512 bytes
 20215 00000D80 F7E3                    	mul	bx			; ax = #sectors * size factor
 20216 00000D82 09D2                    	or	dx,dx			; just in case of large floppies
 20217 00000D84 7505                    	jnz	short setbuf
 20218 00000D86 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20219 00000D89 7607                    	jbe	short nosetbuf
 20220                                  setbuf:
 20221                                  	; 18/12/2022
 20222                                  	; word [buffers] = 2
 20223 00000D8B C606[9702]03            	mov	byte [buffers],3
 20224                                  	;mov	word [buffers],3
 20225 00000D90 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20226                                  					; for default buffer count
 20227                                  nosetbuf:
 20228                                  	; 23/10/2022
 20229                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20230 00000D92 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20231 00000D97 7406                    	je	short chk_memsize_for_buffers
 20232                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20233 00000D99 26C46E19                	les	bp,[es:bp+19h]
 20234 00000D9D EBB1                    	jmp	short nextdpb
 20235                                  
 20236                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20237                                  ;memory size too.
 20238                                  ; default buffers = 2
 20239                                  ; if diskette media > 360 kb,then default buffers = 3
 20240                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20241                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20242                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20243                                  
 20244                                  chk_memsize_for_buffers:
 20245                                  	; 18/12/2022
 20246                                  	;cmp	word [MEMORY_SIZE],2000h
 20247                                  	;jbe	short bufset
 20248                                  	;mov	word [buffers],5
 20249                                  	;cmp	word [MEMORY_SIZE],4000h
 20250                                  	;jbe	short bufset
 20251                                  	;mov	word [buffers],10
 20252                                  	;cmp	word [MEMORY_SIZE],8000h
 20253                                  	;jbe	short bufset
 20254                                  	;mov	word [buffers],15
 20255                                  
 20256                                  	; 18/12/2022
 20257                                  	; word [buffers] = 3 or 2
 20258 00000D9F BB[9702]                	mov	bx,buffers
 20259 00000DA2 A1[9202]                	mov	ax,[MEMORY_SIZE]
 20260 00000DA5 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20261                                  
 20262 00000DA6 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20263 00000DA9 7213                    	jb	short bufset
 20264 00000DAB C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20265 00000DAE 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20266 00000DB1 730B                    	jnb	short bufset
 20267 00000DB3 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20268 00000DB6 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20269 00000DB9 7303                    	jnb	short bufset
 20270 00000DBB C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20271                                  bufset:
 20272                                  	; 23/10/2022
 20273                                  	; 26/03/2019
 20274                                  	; 04/09/2023
 20275                                  	;pop	ds
 20276                                  	;pop	ax
 20277                                  
 20278                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20279                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20280                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20281                                  
 20282                                  ; 26/03/2019
 20283                                  
 20284                                  ;*******************************************************************************
 20285                                  ;									       *
 20286                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20287                                  ; input :								       *
 20288                                  ;    memhi:memlo - start of the next available memory			       *
 20289                                  ;    buffers = number of buffers					       *
 20290                                  ;    h_buffers = number of secondary buffers				       *
 20291                                  ;									       *
 20292                                  ; output:								       *
 20293                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20294                                  ;	buffinfo set.							       *
 20295                                  ;	bufferqueue set.						       *
 20296                                  ;									       *
 20297                                  ; subroutines to be called:						       *
 20298                                  ;									       *
 20299                                  ;*******************************************************************************
 20300                                  
 20301                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20302                                  	; (SYSINIT:0E60h)
 20303                                  dobuff:
 20304                                  	; ds = cs ; 31/03/2019
 20305                                  	; 23/10/2022
 20306                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20307                                  	; 04/09/2023
 20308 00000DBE A1[9702]                	mov	ax,[buffers] ; 31/03/2019
 20309 00000DC1 8B0E[9902]              	mov	cx,[h_buffers] ; *
 20310 00000DC5 C51E[6B02]              	lds	bx,[DOSINFO]
 20311                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 20312                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20313 00000DC9 89473F                  	mov	[bx+3Fh],ax
 20314                                  	; 04/09/2023
 20315                                  	;mov	ax,[cs:h_buffers]
 20316                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20317                                  	;mov	[bx+41h],ax
 20318                                  	; 04/09/2023
 20319 00000DCC 894F41                  	mov	[bx+41h],cx ; *
 20320 00000DCF C55F12                  	lds	bx,[bx+12h]
 20321                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20322 00000DD2 E84222                  	call	round		; get [memhi]:[memlo]
 20323                                  	;mov	al,devmark_buf	; ='B'
 20324 00000DD5 B042                    	mov	al,'B'	
 20325 00000DD7 E81706                  	call	setdevmark
 20326                                  
 20327                                  ;allocate buffers
 20328                                  
 20329 00000DDA 1E                      	push	ds			; save buffer info. ptr.
 20330 00000DDB 53                      	push	bx
 20331                                  
 20332 00000DDC E85203                  	call	set_buffer
 20333                                  
 20334 00000DDF 5B                      	pop	bx
 20335 00000DE0 1F                      	pop	ds
 20336                                  
 20337                                  ;now set the secondary buffer if specified.
 20338                                  
 20339 00000DE1 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20340 00000DE7 742D                    	je	short xif16
 20341 00000DE9 E82B22                  	call	round
 20342                                  	; 23/10/2022
 20343 00000DEC 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 20344                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20345 00000DF1 894F06                  	mov	[bx+6],cx
 20346 00000DF4 2E8B0E[E003]            	mov	cx,[cs:memhi]
 20347                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20348 00000DF9 894F08                  	mov	[bx+8],cx
 20349 00000DFC 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20350                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20351 00000E01 894F0A                  	mov	[bx+10],cx
 20352 00000E04 B80002                  	mov	ax,512			; 512 byte
 20353 00000E07 F7E1                    	mul	cx
 20354 00000E09 2EA3[DE03]              	mov	[cs:memlo],ax
 20355                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20356 00000E0D 2E800E[1014]02          	or	byte [cs:setdevmarkflag],2
 20357 00000E13 E80122                  	call	round
 20358                                  xif16:
 20359                                  
 20360                                  ; ----------------------------------------------------------------------
 20361                                  ; allocate cdss
 20362                                  ; ----------------------------------------------------------------------
 20363                                  
 20364                                  buf1:
 20365 00000E16 E8FE21                  	call	round
 20366                                  
 20367 00000E19 50                      	push	ax
 20368                                  	; 23/10/2022
 20369                                  	;mov	ax,devmark_cds		;='L'
 20370 00000E1A B84C00                  	mov	ax, 'L'
 20371 00000E1D E8D105                  	call	setdevmark
 20372 00000E20 58                      	pop	ax
 20373                                  
 20374 00000E21 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20375                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20376 00000E26 268A4D20                	mov	cl,[es:di+20h]
 20377 00000E2A 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20378 00000E2F 7305                    	jae	short gotncds 		; user setting must be at least numio
 20379 00000E31 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20380                                  gotncds:
 20381 00000E36 30ED                    	xor	ch,ch
 20382                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20383 00000E38 26884D21                	mov	[es:di+21h],cl
 20384 00000E3C 2EA1[E003]              	mov	ax,[cs:memhi]
 20385                                  	;mov	[es:di+SYSI_CDS+2],ax
 20386 00000E40 26894518                	mov	[es:di+18h],ax
 20387 00000E44 2EA1[DE03]              	mov	ax,[cs:memlo]
 20388                                  	;mov	[es:di+SYSI_CDS],ax
 20389 00000E48 26894516                	mov	[es:di+16h],ax
 20390 00000E4C 88C8                    	mov	al,cl
 20391                                  	;mov	ah,curdirlen ; curdir_list.size
 20392 00000E4E B458                    	mov	ah,88
 20393 00000E50 F6E4                    	mul	ah
 20394 00000E52 E84F02                  	call	ParaRound
 20395 00000E55 2E0106[E003]            	add	[cs:memhi],ax
 20396                                  
 20397                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20398 00000E5A 2E800E[1014]02          	or	byte [cs:setdevmarkflag],2
 20399 00000E60 E8B421                  	call	round			; check for mem error before initializing
 20400                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20401 00000E63 26C535                  	lds	si,[es:di]
 20402                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20403 00000E66 26C47D16                	les	di,[es:di+16h]
 20404 00000E6A E88CFD                  	call	fooset
 20405                                  
 20406                                  ; ----------------------------------------------------------------------
 20407                                  ; allocate space for internal stack
 20408                                  ; ----------------------------------------------------------------------
 20409                                  
 20410 00000E6D 0E                      	push	cs
 20411 00000E6E 1F                      	pop	ds
 20412                                  
 20413                                  ;	if the user did not entered stacks= command, as a default, do not install
 20414                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20415                                  ;	otherwise,install it to the user specified value or to the default
 20416                                  ;	value of 9,128 for other systems.
 20417                                  
 20418 00000E6F 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20419 00000E74 740E                    	je	short doinstallstack	; then install as specified by the user
 20420 00000E76 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20421 00000E7B 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20422 00000E7D 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20423 00000E82 736D                    	jae	short skipstack
 20424                                  doinstallstack:
 20425 00000E84 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20426 00000E87 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20427 00000E89 7466                    	jz	short skipstack		; don't install stack.
 20428                                  
 20429                                  ;	dynamic relocation of stack code.
 20430                                  
 20431 00000E8B E88921                  	call	round			;[memhi] = seg. for stack code
 20432                                  					;[memlo] = 0
 20433                                  
 20434                                  ; set devmark block into memory for mem command
 20435                                  ; devmark_id = 's' for stack
 20436                                  
 20437                                  	;mov	al,devmark_stk	;='S'
 20438                                  	; 23/10/2022
 20439 00000E8E B053                    	mov	al,'S'
 20440 00000E90 E85E05                  	call	setdevmark
 20441                                  
 20442 00000E93 A1[E003]                	mov	ax,[memhi]
 20443 00000E96 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 20444                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20445                                  	; 11/12/2022
 20446                                  	; ds = cs
 20447                                  	;push	cs
 20448                                  	;pop	ds
 20449 00000E98 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 20450 00000E9A 31FF                    	xor	di,di
 20451 00000E9C B9[6702]                	mov	cx,endstackcode
 20452 00000E9F 890E[DE03]              	mov	[memlo],cx
 20453 00000EA3 E87121                  	call	round		;have enough space for relocation?
 20454 00000EA6 F3A4                    	rep	movsb
 20455                                  
 20456 00000EA8 1E                      	push	ds		; stick the location of the NextStack entry
 20457                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20458                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20459                                  	; 21/10/2022
 20460 00000EA9 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20461 00000EAC 8ED8                    	mov	ds,ax
 20462 00000EAE C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20463 00000EB4 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20464                                  
 20465 00000EB8 2EA1[DE03]              	mov	ax,[cs:memlo]
 20466 00000EBC 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20467 00000EC0 A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20468 00000EC3 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20469 00000EC7 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20470 00000ECB A3[C608]                	mov	[IT_StackLoc+2],ax
 20471                                  
 20472                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20473                                  
 20474                                  	;mov	ax,entrysize ; mov ax,8
 20475                                  	; 23/10/2022
 20476 00000ECE B80800                  	mov	ax,8
 20477 00000ED1 2E0306[8C02]            	add	ax,[cs:stack_size]
 20478 00000ED6 2EF726[8A02]            	mul	word [cs:stack_count]
 20479                                  
 20480 00000EDB A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20481                                  
 20482 00000EDE 1F                      	pop	ds		; no more need to access Instance Table
 20483                                  
 20484 00000EDF E8C201                  	call	ParaRound	; convert size to paragraphs
 20485                                  	
 20486                                  	; 11/12/2022
 20487                                  	; ds = cs
 20488                                  	;add	[cs:memhi],ax
 20489 00000EE2 0106[E003]              	add	[memhi],ax
 20490                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20491                                  	;or	byte [cs:setdevmarkflag],2
 20492 00000EE6 800E[1014]02            	or	byte [setdevmarkflag],2
 20493                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20494                                  				;to set the devmark_size for stack by round routine.
 20495 00000EEB E82921                  	call	round		; check for memory error before
 20496                                  				; continuing
 20497 00000EEE E8E702                  	call	stackinit	; initialize hardware stack. 
 20498                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20499                                  skipstack:
 20500                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20501                                  	; (SYSINIT:0F99h)
 20502                                  
 20503                                  	; 11/12/2022
 20504                                  	; ds = cs
 20505                                  	;push	cs
 20506                                  	;pop	ds
 20507                                  
 20508 00000EF1 A0[9D02]                	mov	al,[FILES]
 20509 00000EF4 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20510                                  				;  it does sign extend.
 20511 00000EF6 89C1                    	mov	cx,ax
 20512 00000EF8 31DB                    	xor	bx,bx		;close standard input
 20513 00000EFA B43E                    	mov	ah,3Eh ; CLOSE
 20514 00000EFC CD21                    	int	21h
 20515 00000EFE BB0200                  	mov	bx,2
 20516                                  rcclloop:			;close everybody but standard output
 20517 00000F01 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20518 00000F03 CD21                    	int	21h		; in case we can't get new one open.
 20519 00000F05 43                      	inc	bx
 20520 00000F06 E2F9                    	loop	rcclloop
 20521                                  
 20522 00000F08 BA[FE32]                	mov	dx,condev
 20523 00000F0B B002                    	mov	al,2
 20524 00000F0D B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20525 00000F0F F9                      	stc			; set for possible int 24
 20526 00000F10 CD21                    	int	21h
 20527 00000F12 7305                    	jnc	short goaux
 20528 00000F14 E84A23                  	call	badfil
 20529 00000F17 EB13                    	jmp	short goaux2
 20530                                  goaux:	
 20531 00000F19 50                      	push	ax
 20532 00000F1A BB0100                  	mov	bx,1		;close standard output
 20533 00000F1D B43E                    	mov	ah,3Eh ; CLOSE
 20534 00000F1F CD21                    	int	21h
 20535 00000F21 58                      	pop	ax
 20536                                  
 20537 00000F22 89C3                    	mov	bx,ax		;new device handle
 20538 00000F24 B445                    	mov	ah,45h ; XDUP
 20539 00000F26 CD21                    	int	21h		;dup to 1,stdout
 20540 00000F28 B445                    	mov	ah,45h ; XDUP
 20541 00000F2A CD21                    	int	21h		;dup to 2,stderr
 20542                                  goaux2: 
 20543 00000F2C BA[0233]                	mov	dx,auxdev
 20544 00000F2F B002                    	mov	al,2		;read/write access
 20545 00000F31 E85E23                  	call	open_dev
 20546                                  
 20547 00000F34 BA[0633]                	mov	dx,prndev
 20548 00000F37 B001                    	mov	al,1		;write only
 20549 00000F39 E85623                  	call	open_dev
 20550                                  
 20551                                  ;global rearm command for shared interrupt devices attached in the system;
 20552                                  ;shared interrupt attachment has some problem when it issues interrupt
 20553                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20554                                  ;no further interrupts on that level will be presented until a global rearm
 20555                                  ;is issued. by the request of the system architecture group, msbio will
 20556                                  ;issue a global rearm after every device driver is loaded.
 20557                                  ;to issue a global rearm:	;for pc1,xt,palace
 20558                                  ;
 20559                                  ;			  out 02f2h,xx  ; interrupt level 2
 20560                                  ;			  out 02f3h,xx  ; interrupt level 3
 20561                                  ;			  out 02f4h,xx  ; interrupt level 4
 20562                                  ;			  out 02f5h,xx  ; interrupt level 5
 20563                                  ;			  out 02f6h,xx  ; interrupt level 6
 20564                                  ;			  out 02f7h,xx  ; interrupt level 7
 20565                                  ;
 20566                                  ;	for pc at,in addition to the above commands,
 20567                                  ;	need to handle the secondary interrupt handler
 20568                                  ;
 20569                                  ;			  out 06f2h,xx  ; interrupt level 10
 20570                                  ;			  out 06f3h,xx  ; interrupt level 11
 20571                                  ;			  out 06f4h,xx  ; interrupt level 12
 20572                                  ;			  out 06f6h,xx  ; interrupt level 14
 20573                                  ;			  out 06f7h,xx  ; interrupt level 15
 20574                                  ;
 20575                                  ;	for round-up machine
 20576                                  ;
 20577                                  ;			  none.
 20578                                  
 20579                                  ; where xx stands for any value.
 20580                                  ;
 20581                                  ; for your information,after naples level machine,the system service bios
 20582                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20583                                  
 20584                                  	; 24/10/2022
 20585                                  
 20586 00000F3C 50                      	push	ax
 20587 00000F3D 53                      	push	bx
 20588 00000F3E 52                      	push	dx
 20589 00000F3F 06                      	push	es
 20590                                  
 20591 00000F40 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20592 00000F42 BAF202                  	mov	dx,2F2h 		;get starting address
 20593 00000F45 EE                      	out	dx,al			; out 02f2h,0ffh
 20594 00000F46 42                      	inc	dx
 20595 00000F47 EE                      	out	dx,al			; out 02f3h,0ffh
 20596 00000F48 42                      	inc	dx
 20597 00000F49 EE                      	out	dx,al			; out 02f4h,0ffh
 20598 00000F4A 42                      	inc	dx
 20599 00000F4B EE                      	out	dx,al			; out 02f5h,0ffh
 20600 00000F4C 42                      	inc	dx
 20601 00000F4D EE                      	out	dx,al			; out 02f6h,0ffh
 20602 00000F4E 42                      	inc	dx
 20603 00000F4F EE                      	out	dx,al			; out 02f7h,0ffh
 20604                                  
 20605                                  ;sb secondary global rearm
 20606                                  
 20607 00000F50 B800F0                  	mov	ax,0F000h		;get machine type
 20608 00000F53 8EC0                    	mov	es,ax
 20609 00000F55 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20610 00000F5B 740D                    	je	short startrearm	; *if at no need to check
 20611                                  
 20612 00000F5D B4C0                    	mov	ah,0C0h 		;get system configuration
 20613 00000F5F CD15                    	int	15h			; *
 20614 00000F61 7216                    	jc	short finishrearm	; *jmp if old rom
 20615                                  
 20616                                  ; test feature byte for secondary interrupt controller
 20617                                  
 20618 00000F63 26F6470540              	test	byte [es:bx+5],40h
 20619                                  	; 24/10/2022
 20620                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20621 00000F68 740F                    	je	short finishrearm	;jmp if it is there
 20622                                  
 20623                                  startrearm:
 20624 00000F6A B0FF                    	mov	al,0FFh 		;write any pattern to port
 20625 00000F6C BAF206                  	mov	dx,6F2h 		;get starting address
 20626 00000F6F EE                      	out	dx,al			;out 06f2h,0ffh
 20627 00000F70 42                      	inc	dx			;bump address
 20628 00000F71 EE                      	out	dx,al			;out 06f3h,0ffh
 20629 00000F72 42                      	inc	dx			;bump address
 20630 00000F73 EE                      	out	dx,al			;out 06f4h,0ffh
 20631 00000F74 42                      	inc	dx			;bump address
 20632 00000F75 42                      	inc	dx			;bump address
 20633 00000F76 EE                      	out	dx,al			;out 06f6h,0ffh
 20634 00000F77 42                      	inc	dx			;bump address
 20635 00000F78 EE                      	out	dx,al			;out 06f7h,0ffh
 20636                                  
 20637                                  finishrearm:
 20638 00000F79 07                      	pop	es
 20639 00000F7A 5A                      	pop	dx
 20640 00000F7B 5B                      	pop	bx
 20641 00000F7C 58                      	pop	ax
 20642                                  
 20643                                  ;    global rearm end *******************
 20644                                  
 20645                                  ; ----------------------------------------------------------------------
 20646                                  ; allocate sysinit_base for install= command
 20647                                  ; ----------------------------------------------------------------------
 20648                                  ; sysinit_base allocation.
 20649                                  ;   check if endfile has been called to handle install= command.
 20650                                  
 20651                                  set_sysinit_base:
 20652                                  
 20653                                  ; ----------------------------------------------------------------------
 20654                                  ;sysinit_base will be established in the secure area of
 20655                                  ;lower memory when it handles the first install= command.
 20656                                  ;sysinit_base is the place where the actual exec function will be called and
 20657                                  ;will check sysinit module in high memory if it is damaged by the application
 20658                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20659                                  ;is displayed by sysinit_base.
 20660                                  ; ----------------------------------------------------------------------
 20661                                  
 20662                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20663                                  	; (SYSINIT:1028h)
 20664                                  
 20665                                  	; 11/12/2022
 20666                                  	; ds = cs
 20667 00000F7D 50                      	push	ax			; set devmark for mem command
 20668 00000F7E A1[E003]                	mov	ax,[memhi]
 20669 00000F81 2B06[E403]              	sub	ax,[area]
 20670 00000F85 A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20671                                  	;mov	al,devmark_inst ; 'T'
 20672 00000F88 B054                    	mov	al,'T'
 20673 00000F8A E86404                  	call	setdevmark
 20674 00000F8D 58                      	pop	ax
 20675                                  
 20676 00000F8E 8B3E[E003]              	mov	di,[memhi]
 20677 00000F92 8EC7                    	mov	es,di
 20678 00000F94 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20679 00000F98 31FF                    	xor	di,di
 20680 00000F9A 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20681 00000F9E BE[B010]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20682 00000FA1 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20683                                  	; 24/10/2022 
 20684                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20685 00000FA4 010E[DE03]              	add	[memlo],cx
 20686                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20687                                  	; 11/12/2022
 20688                                  	; ds = cs
 20689                                  	;or	byte [cs:setdevmarkflag],2
 20690 00000FA8 800E[1014]02            	or	byte [setdevmarkflag],2
 20691                                  	;or	byte [setdevmarkflag],for_devmark
 20692 00000FAD E86720                  	call	round			; check mem error. also,readjust memhi for the next use.
 20693 00000FB0 F3A4                    	rep	movsb			; reallocate it.
 20694                                  
 20695 00000FB2 C706[5203][8910]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20696 00000FB8 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20697                                  	;or	word [install_flag],has_installed ; set the flag.
 20698                                  	;or	byte [install_flag],has_installed ; 2
 20699                                  	; 11/12/2022
 20700 00000FBC 800E[4A03]02            	or	byte [install_flag],2
 20701                                  	; 24/10/2022
 20702                                  	;or	word [install_flag],2	
 20703                                  
 20704                                  ; ----------------------------------------------------------------------
 20705                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20706                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20707                                  ; have_install_cmd.
 20708                                  ; ----------------------------------------------------------------------
 20709                                  
 20710 00000FC1 E85320                  	call	round
 20711 00000FC4 8B1E[E003]              	mov	bx,[memhi]
 20712 00000FC8 A1[E403]                	mov	ax,[area]
 20713 00000FCB A3[DA03]                	mov	[old_area],ax		; save [area]
 20714 00000FCE 8EC0                    	mov	es,ax			;calc what we needed
 20715 00000FD0 29C3                    	sub	bx,ax
 20716                                  	; 24/10/2022
 20717 00000FD2 B44A                    	mov	ah,4Ah ; SETBLOCK
 20718 00000FD4 CD21                    	int	21h			;give the rest back
 20719                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20720                                  		; ES = segment address of block to change
 20721                                  		; BX = new size in paragraphs
 20722 00000FD6 06                      	push	es
 20723 00000FD7 8CC0                    	mov	ax,es
 20724 00000FD9 48                      	dec	ax
 20725 00000FDA 8EC0                    	mov	es,ax			;point to arena
 20726                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20727                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20728                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20729                                  	; 24/10/2022
 20730 00000FDC 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20731 00000FE3 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20732 00000FEA 07                      	pop	es
 20733                                  
 20734 00000FEB BBFFFF                  	mov	bx,0FFFFh
 20735 00000FEE B448                    	mov	ah,48h ; ALLOC
 20736 00000FF0 CD21                    	int	21h
 20737 00000FF2 B448                    	mov	ah,48h ; ALLOC
 20738 00000FF4 CD21                    	int	21h			; allocate the rest of the memory
 20739                                  		; DOS - 2+ - ALLOCATE MEMORY
 20740                                  		; BX = number of 16-byte paragraphs desired
 20741 00000FF6 A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20742 00000FF9 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20743                                  
 20744                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20745                                  ;;;; allocated.
 20746                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20747                                  ;;;; this time) to the top-of-the memory),here we are going to
 20748                                  ;;;; 1). "setblock" from memhi to confbot.
 20749                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20750                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20751                                  
 20752                                  ;memory allocation for sysinit,confbot module.
 20753                                  
 20754 00000FFF 8EC0                    	mov	es,ax
 20755                                  	;mov	bx,[CONFBOT]
 20756                                  	; 24/10/2022
 20757 00001001 8B1E[A102]              	mov	bx,[top_of_cdss]
 20758 00001005 29C3                    	sub	bx,ax			; confbot - memhi
 20759 00001007 4B                      	dec	bx			; make a room for the memory block id.
 20760 00001008 4B                      	dec	bx			; make sure!!!.
 20761 00001009 B44A                    	mov	ah,4Ah ; SETBLOCK
 20762 0000100B CD21                    	int	21h			; this will free (confbot to top of memory)
 20763                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20764                                  		; ES = segment address of block to change
 20765                                  		; BX = new size in paragraphs
 20766 0000100D BBFFFF                  	mov	bx,0FFFFh
 20767 00001010 B448                    	mov	ah,48h ; ALLOC
 20768 00001012 CD21                    	int	21h
 20769 00001014 B448                    	mov	ah,48h ; ALLOC
 20770 00001016 CD21                    	int	21h			; allocate (confbot to top of memory)
 20771                                  		; DOS - 2+ - ALLOCATE MEMORY
 20772                                  		; BX = number of 16-byte paragraphs desired
 20773 00001018 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20774                                  					; need this to free this area for command.com.
 20775 0000101B 8E06[E003]              	mov	es,[memhi]
 20776 0000101F B449                    	mov	ah,49h			; free allocated memory.
 20777 00001021 CD21                    	int	21h			; free (memhi to confbot(=area))
 20778                                  		; DOS - 2+ - FREE MEMORY
 20779                                  		; ES = segment address of area to be freed
 20780                                  endfile_ret:
 20781 00001023 C3                      	retn
 20782                                  
 20783                                  ; End of "EndFile" DOS structure configuration.
 20784                                  
 20785                                  ; ----------------------------------------------------------------------
 20786                                  ; 26/03/2019 - Retro DOS v4.0
 20787                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20788                                  ; ----------------------------------------------------------------------
 20789                                  ; Do_Install_Exec
 20790                                  ;
 20791                                  ; This procedure is used to EXEC a program being loaded via the 
 20792                                  ; "install=" mechanism in config.sys. It does this by setting up
 20793                                  ; the parameters, and then jumping to sysinit_base, which has been
 20794                                  ; setup in low memory. When complete, sysinit_base will jump back
 20795                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20796                                  ; program).
 20797                                  
 20798                                  ;SYSINIT:10CFh:
 20799                                  
 20800                                  do_install_exec:			; now,handles install= command.
 20801                                  
 20802 00001024 56                      	push	si			; save si for config.sys again.
 20803                                  
 20804                                  ; we are going to call load/exec function.
 20805                                  ; set es:bx to the parameter block here;;;;;;;
 20806                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20807                                  ; after the filename. so parameter starts after that. if next
 20808                                  ; character is a line feed (i.e. 10),then assume that the 0
 20809                                  ; we already encountered used to be a carrage return. in this
 20810                                  ; case,let's set the length to 0 which will be followed by
 20811                                  ; carridge return.
 20812                                  
 20813                                  ; es:si -> command line in config.sys. points to the first non blank
 20814                                  ;character after =.
 20815                                  
 20816 00001025 06                      	push	es
 20817 00001026 1E                      	push	ds
 20818 00001027 07                      	pop	es
 20819 00001028 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20820 00001029 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20821                                  
 20822 0000102B 31C9                    	xor	cx,cx
 20823 0000102D FC                      	cld
 20824 0000102E 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20825 00001034 BF[6E03]                	mov	di,ldexec_parm
 20826                                  installfilename:			; skip the file name
 20827 00001037 AC                      	lodsb				; al = ds:si; si++
 20828 00001038 3C00                    	cmp	al,0
 20829 0000103A 7402                    	je	short got_installparm
 20830 0000103C EBF9                    	jmp	short installfilename
 20831                                  got_installparm:			; copy the parameters to ldexec_parm
 20832 0000103E AC                      	lodsb
 20833 0000103F 268805                  	mov	[es:di],al
 20834 00001042 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20835 00001044 7405                    	je	short done_installparm
 20836 00001046 FEC1                    	inc	cl			; # of char. in the parm.
 20837 00001048 47                      	inc	di
 20838 00001049 EBF3                    	jmp	short got_installparm
 20839                                  done_installparm:
 20840 0000104B 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20841 00001050 80F900                  	cmp	cl,0			; if no parm,then
 20842 00001053 7506                    	jne	short install_seg_set 	; let the parm area
 20843 00001055 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20844                                  					; starts with cr.
 20845                                  install_seg_set:
 20846 0000105B 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20847 00001062 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20848                                  
 20849                                  ;---------------------------------------------------M067----------------
 20850                                  ;
 20851                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20852                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20853                                  ;
 20854                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20855                                  ;
 20856                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20857                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20858                                  ; 	was fixed. 
 20859                                  ;
 20860                                  ; ----------------------------------------------------------------------
 20861                                  
 20862                                  ;;ifdef   MULTI_CONFIG
 20863                                  
 20864                                  ; If there's any environment data in "config_wrkseg", pass to app
 20865                                  
 20866                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20867                                          ;mov     cx,ax
 20868                                          ;cmp     word [cs:config_envlen],0
 20869                                          ;je      short no_envdata2
 20870                                          ;mov     cx,[cs:config_wrkseg]
 20871                                  ;no_envdata2:
 20872                                  ;;endif  ;MULTI_CONFIG
 20873                                  
 20874                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20875                                  	; 24/10/2022
 20876                                  	;mov	[cs:iexec.environ],cx
 20877                                  	; 02/11/2022
 20878 00001064 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20879                                  
 20880                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20881 00001068 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20882                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20883 0000106C 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20884                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20885 00001070 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20886 00001074 E86E00                  	call	sum_up
 20887 00001077 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20888 0000107B 31C0                    	xor	ax,ax
 20889 0000107D B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20890 0000107F BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20891 00001082 06                      	push	es			; save es,ds for load/exec
 20892 00001083 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20893 00001084 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20894                                  					; load/exec function and check sum.
 20895                                  
 20896                                  ;----------------------------------------
 20897                                  
 20898                                  ;j.k. this is the returning address from sysinit_base.
 20899                                  
 20900                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20901                                  
 20902                                  sysinitptr:				; returning far address from sysinit_base
 20903 00001089 5E                      	pop	si			; restore si for config.sys file.
 20904 0000108A 06                      	push	es
 20905 0000108B 1E                      	push	ds
 20906 0000108C 07                      	pop	es
 20907 0000108D 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20908 0000108E 7306                            jnc     short install_exit_ret
 20909                                  
 20910 00001090 56                      	push	si			; error in loading the file for install=.
 20911 00001091 E8D121                  	call	badload 		; es:si-> path,filename,0.
 20912 00001094 5E                      	pop	si
 20913                                  
 20914                                  	; 24/10/2022
 20915                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20916                                  	; 11/12/2022
 20917                                  	; ds = cs
 20918 00001095 C3                      	retn
 20919                                  
 20920                                  install_exit_ret:
 20921                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20922                                  
 20923                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20924                                  ;SYSINIT:1142h:
 20925 00001096 B44D                    	mov     ah,4Dh
 20926 00001098 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20927 0000109A 80FC03                  	cmp     ah,3
 20928 0000109D 7404                    	jz      short sysinitptr_retn
 20929 0000109F E80916                  	call    error_line
 20930 000010A2 F9                      	stc
 20931                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20932 000010A3 C3                      	retn		
 20933                                  
 20934                                  ; ----------------------------------------------------------------------
 20935                                  
 20936                                  ;**	ParaRound - Round Up length to paragraph multiple
 20937                                  ;
 20938                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20939                                  ;	by 16 yielding a "length in paragraphs" value.
 20940                                  ;
 20941                                  ;	ENTRY	(ax) = byte length
 20942                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20943                                  ;	USES	ax, flags
 20944                                  
 20945                                  ParaRound:
 20946 000010A4 83C00F                  	add	ax,15
 20947 000010A7 D1D8                    	rcr	ax,1
 20948 000010A9 D1E8                    	shr	ax,1
 20949 000010AB D1E8                    	shr	ax,1
 20950 000010AD D1E8                    	shr	ax,1
 20951 000010AF C3                      	retn
 20952                                  
 20953                                  ; ----------------------------------------------------------------------
 20954                                  ; sysinit_base module.
 20955                                  ;
 20956                                  ; This module is relocated by the routine EndFile to a location in low
 20957                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20958                                  ; that are being loaded by the "install=" command. After the EXEC call
 20959                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20960                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20961                                  ; If it did, then this module will print an error message and stop the
 20962                                  ; system. Otherwise, it returns control to SYSINIT.
 20963                                  ;
 20964                                  ;in: after relocation,
 20965                                  ;    ax = 4b00h - load and execute the program dos function.
 20966                                  ;    ds = confbot. segment of config.sys file image
 20967                                  ;    es = sysinitseg. segment of sysinit module itself.
 20968                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20969                                  ;    es:bx = pointer to a parameter block for load.
 20970                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20971                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20972                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20973                                  ;			word boundary moduler form.
 20974                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20975                                  ;
 20976                                  ;note: sysinit should save necessary registers and when the control is back
 20977                                  
 20978                                  	; 24/10/2022
 20979                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20980                                  sysinit_base:				
 20981 000010B0 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20982 000010B5 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20983 000010BA CD21                    	int	21h			; load/exec dos call.
 20984 000010BC 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20985 000010C1 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20986 000010C6 1F                      	pop	ds			; restore confbot seg
 20987 000010C7 07                      	pop	es			; restore sysinitseg
 20988 000010C8 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20989                                  					; at this time,i don't have to worry about
 20990                                  					; that sysinit module has been broken or not.
 20991 000010CA E81800                  	call	sum_up			; otherwise,check if it is good.
 20992 000010CD 263906[5603]            	cmp	[es:checksum],ax
 20993 000010D2 740C                    	je	short sysinit_base_end
 20994                                  
 20995                                  ;	memory broken. show "memory allocation error" message and stall.
 20996                                  
 20997 000010D4 B409                    	mov	ah,9
 20998 000010D6 0E                      	push	cs
 20999 000010D7 1F                      	pop	ds
 21000 000010D8 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 21001 000010DB CD21                    	int	21h
 21002                                  		; DOS - PRINT STRING
 21003                                  		; DS:DX -> string terminated by "$"
 21004                                  	; 24/10/2022
 21005                                  _stall: 
 21006                                  	; 11/12/2022
 21007 000010DD F4                      	hlt 
 21008                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21009                                  	;hlt				;use HLT to minimize energy consumption
 21010 000010DE EBFD                            jmp	short _stall
 21011                                  
 21012                                  sysinit_base_end: 
 21013 000010E0 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 21014                                  
 21015                                  ;-------------------------------------
 21016                                  
 21017                                  sum_up:
 21018                                  
 21019                                  ;in:   es - sysinitseg.
 21020                                  ;out:  ax - result
 21021                                  ;
 21022                                  ;remark: since this routine will only check starting from "locstack" to the end of
 21023                                  ;	 sysinit segment,the data area, and the current stack area are not
 21024                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 21025                                  ;	 gaurantee to be safe.
 21026                                  ;
 21027                                  ;first sum up confbot seg.
 21028                                  
 21029 000010E5 1E                      	push	ds
 21030                                  	;mov	ax,[es:CONFBOT]
 21031                                  	; 24/10/2022
 21032 000010E6 26A1[A102]              	mov	ax,[es:top_of_cdss]
 21033 000010EA 8ED8                    	mov	ds,ax
 21034 000010EC 31F6                    	xor	si,si
 21035 000010EE 31C0                    	xor	ax,ax
 21036 000010F0 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 21037                                  					;whole test better fail.
 21038 000010F5 D1E9                    	shr	cx,1			; make it a word count
 21039 000010F7 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 21040                                  sum1:
 21041 000010F9 0304                    	add	ax,[si]
 21042 000010FB 46                      	inc	si
 21043 000010FC 46                      	inc	si
 21044 000010FD E2FA                    	loop	sum1
 21045                                  ;now,sum up sysinit module.
 21046                                  sum_sys_code:
 21047                                  	; 24/10/2022
 21048 000010FF BEFE10                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 21049                                  				        ; starting after the stack.  M069
 21050                                  					;  this does not cover the possible stack code!!!
 21051                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 21052                                  	; 02/11/2022
 21053                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 21054                                  	; 30/12/2022 (BugFix)
 21055                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 21056 00001102 B9[F037]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 21057 00001105 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 21058 00001107 D1E9                    	shr	cx,1
 21059                                  sum2:
 21060 00001109 260304                  	add	ax,[es:si]
 21061 0000110C 46                      	inc	si
 21062 0000110D 46                      	inc	si
 21063 0000110E E2F9                    	loop	sum2
 21064 00001110 1F                      	pop	ds
 21065 00001111 C3                      	retn
 21066                                  
 21067                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21068                                  
 21069                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 21070                                  ;SYSINIT:11BDh:
 21071 00001112 0000                    	dw	0
 21072                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 21073                                  ;SYSINIT:11BFh:
 21074 00001114 0000                    	dw	0
 21075                                  
 21076                                  mem_alloc_err_msgx:
 21077                                  
 21078                                         ;include msbio.cl4		; memory allocation error message
 21079                                  
 21080                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 21081 00001116 0D0A                    	db	0Dh,0Ah
 21082 00001118 4D656D6F727920616C-     	db 	'Memory allocation error $'
 21082 00001121 6C6F636174696F6E20-
 21082 0000112A 6572726F722024     
 21083                                  
 21084                                  end_sysinit_base: ; label byte
 21085                                  	; 24/10/2022
 21086                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 21087                                  
 21088                                  ; ----------------------------------------------------------------------
 21089                                  ; Set_Buffer
 21090                                  ;
 21091                                  ;function: set buffers in the real memory.				  
 21092                                  ;	   lastly set the memhi,memlo for the next available free address.
 21093                                  ;
 21094                                  ;input:    ds:bx -> buffinfo.
 21095                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 21096                                  ;	   singlebuffersize = buffer header size + sector size		  
 21097                                  ;
 21098                                  ;output:   buffers Queue established.	       				   
 21099                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 21100                                  ; ----------------------------------------------------------------------
 21101                                  
 21102                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21103                                  	; (SYSINIT:11DCh)
 21104                                  
 21105                                  set_buffer:
 21106 00001131 30D2                    	xor	dl,dl				; assume buffers not in HMA
 21107 00001133 E85500                  	call	GetBufferAddr
 21108 00001136 7402                    	jz	short set_buff_1
 21109                                  	;mov	dl,1				; buffers in HMA
 21110                                  	; 17/09/2023
 21111 00001138 FEC2                    	inc	dl ; mov dl,1
 21112                                  set_buff_1:
 21113                                  	; 25/10/2022
 21114                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 21115 0000113A 893F                    	mov	[bx],di
 21116                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 21117 0000113C 8C4702                  	mov	[bx+2],es
 21118                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 21119 0000113F C747040000              	mov	word [bx+4],0
 21120                                  
 21121 00001144 89F8                    	mov	ax,di
 21122 00001146 2E8B0E[9702]            	mov	cx,[cs:buffers]
 21123 0000114B 57                      	push	di				; remember first buffer
 21124                                  
 21125                                  ;	for each buffer
 21126                                  
 21127                                  nxt_buff:
 21128 0000114C E86100                  	call	set_buffer_info 		; set buf_link,buf_id...
 21129 0000114F 89C7                    	mov	di,ax
 21130 00001151 E2F9                    	loop	nxt_buff
 21131                                  
 21132 00001153 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 21133                                  
 21134 00001158 59                      	pop	cx				; get first buffer
 21135                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 21136 00001159 26890D                  	mov	[es:di],cx
 21137 0000115C 87CF                    	xchg	cx,di
 21138                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 21139                                  	; 25/10/2022
 21140 0000115E 26894D02                	mov	[es:di+2],cx
 21141                                  
 21142 00001162 08D2                    	or	dl,dl				; In HMA ?
 21143 00001164 7417                    	jz	short set_buff_2		; no
 21144                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 21145 00001166 C6470C01                	mov	byte [bx+12],1
 21146 0000116A 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 21147                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 21148 0000116E C7470D0000              	mov	word [bx+13],0
 21149                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 21150 00001173 89470F                  	mov	word [bx+15],ax
 21151 00001176 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 21152                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 21153 0000117A 83E814                  	sub	ax,20
 21154                                  set_buff_2:
 21155 0000117D 2E0106[DE03]            	add	[cs:memlo],ax
 21156                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21157 00001182 2E800E[1014]02          	or	byte [cs:setdevmarkflag],2
 21158                                  	;call	round
 21159                                  	;retn
 21160                                  	; 12/12/2022
 21161 00001188 E98C1E                  	jmp	round
 21162                                  
 21163                                  ; ----------------------------------------------------------------------
 21164                                  ; procedure : GetBufferAddr
 21165                                  ;
 21166                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21167                                  ;
 21168                                  ; returns in es:di the buffer adress
 21169                                  ; returns NZ if allocated in HMA
 21170                                  ; ----------------------------------------------------------------------
 21171                                  
 21172                                  	; 25/10/2022 
 21173                                  GetBufferAddr:
 21174 0000118B 53                      	push	bx
 21175 0000118C 52                      	push	dx
 21176 0000118D 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21177 00001191 2EF726[9702]            	mul	word [cs:buffers]
 21178                                  	;add	ax,0Fh
 21179 00001196 83C00F                  	add	ax,15 
 21180                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21181                                  	;and	ax,~15	; 0FFF0h	; para round
 21182                                  	; 12/12/2022
 21183 00001199 24F0                    	and	al,~15	; 0F0h
 21184 0000119B 89C3                    	mov	bx,ax
 21185 0000119D B8024A                  	mov	ax,4A02h
 21186                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21187 000011A0 CD2F                    	int	2Fh
 21188 000011A2 83FFFF                  	cmp	di,0FFFFh
 21189 000011A5 7506                    	jne	short got_hma
 21190                                  
 21191                                  	;mov	di,0			; dont xor di,di Z flag needed
 21192                                  	; 05/09/2023
 21193                                  	; zf=1
 21194 000011A7 47                      	inc	di ; 0FFFFh -> 0
 21195                                  	; zf=1
 21196                                  
 21197                                  	;zf=1
 21198                                  	;xor	di,di	; 25/10/2022
 21199                                  	;zf=1
 21200 000011A8 2E8E06[E003]            	mov	es,[cs:memhi]
 21201                                  got_hma:
 21202 000011AD 5A                      	pop	dx
 21203 000011AE 5B                      	pop	bx
 21204 000011AF C3                      	retn
 21205                                  
 21206                                  ; ----------------------------------------------------------------------
 21207                                  
 21208                                  set_buffer_info:
 21209                                  
 21210                                  ;function: set buf_link,buf_id,buf_sector
 21211                                  ;
 21212                                  ;in: es:di -> buffer header to be set.
 21213                                  ;    ax = di
 21214                                  ;
 21215                                  ;out:
 21216                                  ;    above entries set.
 21217                                  
 21218                                  	; 25/10/2022 
 21219 000011B0 2EFF36[3903]            	push	word [cs:buf_prev_off]
 21220                                  	;pop	word [es:di+buffinfo.buf_prev]
 21221 000011B5 268F4502                	pop	word [es:di+2]
 21222 000011B9 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 21223 000011BD 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 21224                                  	;mov	[es:di+buffinfo.buf_next],ax
 21225 000011C2 268905                  	mov	[es:di],ax
 21226                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21227 000011C5 26C74504FF00            	mov	word [es:di+4],00FFh
 21228                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21229 000011CB 26C745060000            	mov	word [es:di+6],0
 21230                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21231 000011D1 26C745080000            	mov	word [es:di+8],0
 21232 000011D7 C3                      	retn
 21233                                  
 21234                                  ; ======================================================================
 21235                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21236                                  ; ----------------------------------------------------------------------
 21237                                  ; 27/03/2019 - Retro DOS v4.0
 21238                                  
 21239                                  ; ----------------------------------------------------------------------
 21240                                  ; ibmstack initialization routine.
 21241                                  ;
 21242                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21243                                  ;	has been modified. this initialization routine also has to
 21244                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21245                                  ;	should be set to signal that this interrupt handler is the
 21246                                  ;	first handler hooked to this interrupt vector.
 21247                                  ;	we determine this by looking at the instruction pointed by
 21248                                  ;	this vector. if it is iret, then this handler should be the
 21249                                  ;	first one. in our case, only the interrupt vector 77h is the
 21250                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21251                                  ;
 21252                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21253                                  ;	some design changes are needed to the above interrupt sharing
 21254                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21255                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21256                                  ;	interrupts would only be generated on levels 7 and 15.
 21257                                  ;	these assumptions are not true any more. we have to use the firstflag
 21258                                  ;	for every level of interrupt. we will set the firstflag on the following
 21259                                  ;	conditions:
 21260                                  ;
 21261                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21262                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21263                                  ;	 c. else if cs:ip points to an iret, then "first"
 21264                                  ;	 d. else if cs:ip points to dummy, then "first"
 21265                                  ;
 21266                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21267                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21268                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21269                                  ;	the bioses for all of the machines.
 21270                                  ;
 21271                                  ;	system design group requests bios to handle the phantom interrupts.
 21272                                  ;
 21273                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21274                                  ;	produced by the bogus adapter card even without interrupt request is
 21275                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21276                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21277                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21278                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21279                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21280                                  ;	interrupt line.
 21281                                  ;
 21282                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21283                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21284                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21285                                  ;	control. if it is the first, then the following action should be
 21286                                  ;	taken. we don't have to implement skack logic in this case.
 21287                                  ;
 21288                                  ;	to implement this logic, we rather choose a simple method.
 21289                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21290                                  ;	going to hook this interrupt vector. the reason is if the original
 21291                                  ;	vector points to "iret" and do nothing, we don't need
 21292                                  ;	to implement the stack logic for it. this will simplify implementation
 21293                                  ;	while maintaining compatibility with the old version of dos.
 21294                                  ;	this implies that in the main stack code, there might be a stack code
 21295                                  ;	that will never be used, a dead code.
 21296                                  ;
 21297                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21298                                  
 21299                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21300                                  	; (SYSINIT:1287h)
 21301                                  
 21302                                  	; 14/12/2022
 21303                                  stackinit:
 21304 000011D8 50                      	push	ax
 21305 000011D9 1E                      	push	ds
 21306 000011DA 06                      	push	es
 21307 000011DB 53                      	push	bx
 21308 000011DC 51                      	push	cx
 21309 000011DD 52                      	push	dx
 21310 000011DE 57                      	push	di
 21311 000011DF 56                      	push	si
 21312 000011E0 55                      	push	bp
 21313                                  
 21314                                  ;currently es -> stack code area
 21315                                  
 21316                                  	; 12/12/2022
 21317                                  	; ds = cs
 21318 000011E1 A1[8A02]                	mov	ax,[stack_count]
 21319 000011E4 89C1                    	mov	cx,ax  ; *!*!*  
 21320                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21321                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21322                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21323 000011E6 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21324                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21325 000011EA A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21326 000011ED 26A3[0600]              	mov	[es:stacksize],ax
 21327                                  	; 12/12/2022
 21328 000011F1 A1[8E02]                	mov	ax,[stack_addr]			; offset
 21329                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21330                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21331                                  	;mov	ax,[cs:stack_addr]  ; !!
 21332 000011F4 26A3[0800]              	mov	[es:stacks],ax
 21333                                  	; 12/12/2022
 21334 000011F8 89C5                    	mov	bp,ax ; *!*
 21335 000011FA A1[9002]                	mov	ax,[stack_addr+2]
 21336                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21337                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21338                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21339 000011FD 26A3[0A00]              	mov	[es:stacks+2],ax
 21340                                  
 21341                                  ; initialize the data fields with the parameters
 21342                                  
 21343                                  ; "firstentry" will always be at stacks
 21344                                  
 21345                                  	;mov	bp,[es:stacks]			; get offset of stack
 21346                                  	; 12/12/2022
 21347                                  	; bp = [es:stacks] ; *!*
 21348 00001201 26892E[0C00]            	mov	[es:firstentry],bp
 21349                                  
 21350                                  ; the stacks will always immediately follow the table entries
 21351                                  
 21352 00001206 B80800                  	mov	ax,entrysize ; 8
 21353                                  	;mov	cx,[es:stackcount]
 21354                                  	; 12/12/2022
 21355                                  	; cx = [es:stackcount] ; *!*!*
 21356 00001209 F7E1                    	mul	cx
 21357 0000120B 01E8                    	add	ax,bp
 21358 0000120D 26A3[0400]              	mov	[es:stackat],ax
 21359 00001211 89C3                    	mov	bx,ax
 21360 00001213 83EB02                  	sub	bx,2
 21361                                  
 21362                                  ; zero the entire stack area to start with
 21363                                  
 21364 00001216 268B3E[0400]            	mov	di,[es:stackat]
 21365 0000121B 26A1[0600]              	mov	ax,[es:stacksize]
 21366 0000121F F7E1                    	mul	cx
 21367 00001221 89C1                    	mov	cx,ax
 21368 00001223 31C0                    	xor	ax,ax
 21369 00001225 06                      	push	es
 21370 00001226 1F                      	pop	ds				;ds = relocated stack code seg.
 21371                                  
 21372                                  ;now, ds -> stack code area
 21373                                  
 21374 00001227 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21375 0000122B FC                      	cld
 21376 0000122C F3AA                    	rep	stosb
 21377                                  
 21378 0000122E 8B0E[0200]              	mov	cx,[stackcount]
 21379                                  
 21380                                  ; loop for "count" times, building a table entry
 21381                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21382                                  ;  cx = number of entries
 21383                                  ;  es:bp => base of stacks - 2
 21384                                  ;  es:bx => first table entry
 21385                                  
 21386                                  buildloop:
 21387                                  	; 11/12/2022
 21388                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21389                                  	; 25/10/2022
 21390                                  	;mov	byte [es:bp],free
 21391                                  	; 14/08/2023
 21392 00001232 26884600                	mov	[es:bp],al ; 0 ; free
 21393 00001236 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21394                                  	;mov	[es:bp+1],al
 21395 0000123A 26894602                	mov	[es:bp+savedsp],ax
 21396                                  	;mov	[es:bp2],ax
 21397 0000123E 26894604                	mov	[es:bp+savedss],ax
 21398                                  	;mov	[es:bp+4],ax
 21399 00001242 031E[0600]              	add	bx,[stacksize]
 21400 00001246 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21401                                  	;mov	[es:bp+6],bx
 21402 0000124A 26892F                  	mov	[es:bx],bp
 21403 0000124D 83C508                  	add	bp,entrysize ; 8
 21404                                  
 21405 00001250 E2E0                    	loop	buildloop
 21406                                  
 21407 00001252 83ED08                  	sub	bp,entrysize ; 8
 21408 00001255 892E[0E00]              	mov	[lastentry],bp
 21409 00001259 892E[1000]              	mov	[nextentry],bp
 21410                                  
 21411 0000125D 1E                      	push	ds
 21412                                  	;mov	ax,0F000h		;look at the model byte
 21413                                  	; 05/09/2023
 21414 0000125E B4F0                    	mov	ah,0F0h ; ax = 0F000h
 21415 00001260 8ED8                    	mov	ds,ax	
 21416 00001262 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 21417 00001267 1F                      	pop	ds
 21418 00001268 7504                    	jne	short skip_disablenmis
 21419                                  
 21420 0000126A B007                    	mov	al,07h			; disable convertible nmis
 21421 0000126C E672                    	out	72h,al
 21422                                  
 21423                                  skip_disablenmis:
 21424 0000126E 31C0                    	xor	ax,ax
 21425 00001270 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21426                                  					;ds - relocated stack code segment
 21427 00001272 FA                      	cli
 21428                                  
 21429                                  	;irp	aa,<02,08,09,70>
 21430                                  	;
 21431                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21432                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21433                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21434                                  	;mov	dx,offset int&aa	;pass where new handler is
 21435                                  	;call	new_init_loop		;adjust the vector to new handler,
 21436                                  	;				;saving pointer to original owner
 21437                                  	;endm
 21438                                  
 21439                                  stkinit_02:
 21440 00001273 BE0800                  	mov	si,02h*4 ; 8
 21441 00001276 BF[4206]                	mov	di,INT19OLD02
 21442 00001279 BB[1200]                	mov	bx,old02
 21443 0000127C BA[1600]                	mov	dx,int02
 21444 0000127F E84801                  	call	new_init_loop
 21445                                  stkinit_08:
 21446 00001282 BE2000                  	mov	si,08h*4 ; 32
 21447 00001285 BF[4706]                	mov	di,INT19OLD08
 21448 00001288 BB[3800]                	mov	bx,old08
 21449 0000128B BA[3C00]                	mov	dx,int08
 21450 0000128E E83901                  	call	new_init_loop
 21451                                  stkinit_09:
 21452 00001291 BE2400                  	mov	si,09h*4 ; 36
 21453 00001294 BF[4C06]                	mov	di,INT19OLD09
 21454 00001297 BB[4100]                	mov	bx,old09
 21455 0000129A BA[4500]                	mov	dx,int09
 21456 0000129D E82A01                  	call	new_init_loop
 21457                                  stkinit_70:
 21458 000012A0 BEC001                  	mov	si,70h*4 ; 448
 21459 000012A3 BF[6A06]                	mov	di,INT19OLD70
 21460 000012A6 BB[4E00]                	mov	bx,old70
 21461 000012A9 BA[5200]                	mov	dx,int70
 21462 000012AC E81B01                  	call	new_init_loop
 21463                                  
 21464                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21465                                  	;
 21466                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21467                                  	;push	ds			;save relocated stack code segment
 21468                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21469                                  	;push	ds
 21470                                  	;pop	dx			;dx = segment value
 21471                                  	;	
 21472                                  	;cmp	dx,0
 21473                                  	;jz	int&aa&_first
 21474                                  	;
 21475                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21476                                  	;jz	int&aa&_first
 21477                                  	;
 21478                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21479                                  	;jz	int&aa&_not_first
 21480                                  	;
 21481                                  	;cmp	dx,0f000h		;rom bios segment
 21482                                  	;jnz	int&aa&_not_first
 21483                                  	;
 21484                                  	;push	es
 21485                                  	;push	dx
 21486                                  	;mov	dx,0f000h
 21487                                  	;mov	es,dx
 21488                                  	;cmp	bx,word ptr es:0ff01h
 21489                                         	;pop	dx
 21490                                  	;pop	es
 21491                                  	;jz	int&aa&_first
 21492                                  	;
 21493                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21494                                  	;pop	ds
 21495                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21496                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21497                                  	;mov	dx, offset int&aa	;pass where new handler is
 21498                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21499                                  	;				;pointer to original owner.
 21500                                  	;jmp	short int&aa&_end
 21501                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21502                                  	;pop	ds
 21503                                  ;int&aa&_end:
 21504                                  	;
 21505                                  	;endm
 21506                                  
 21507                                  stkinit_0A:
 21508 000012AF BE2800                  	mov	si,0Ah*4 ; 40
 21509                                  	
 21510                                  ; 14/12/2022
 21511                                  %if 0	
 21512                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21513                                  	push	ds
 21514                                  	
 21515                                  	lds	bx,[es:si]
 21516                                  	push	ds
 21517                                  	pop	dx
 21518                                  		
 21519                                  	cmp	dx,0
 21520                                  	je	short int_0A_first
 21521                                  	
 21522                                  	cmp	byte [bx],0CFh
 21523                                  	je	short int_0A_first
 21524                                  	
 21525                                  	cmp	word [bx+6],424Bh
 21526                                  	je	short int_0A_not_first
 21527                                  	
 21528                                  	cmp	dx,0F000h
 21529                                  	jne	short int_0A_not_first
 21530                                  	
 21531                                  	push	es
 21532                                  	push	dx
 21533                                  	mov	dx,0F000h
 21534                                  	mov	es,dx
 21535                                  	cmp	bx,[es:0FF01h]
 21536                                         	pop	dx
 21537                                  	pop	es
 21538                                  	je	short int_0A_first
 21539                                  %Endif
 21540                                  
 21541                                  	; 14/12/2022
 21542                                  	; 25/10/2022
 21543 000012B2 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21544 000012B5 730C                    	jnc	short int_0A_first
 21545                                  	
 21546                                  int_0A_not_first:
 21547                                  	; 14/12/2022
 21548                                  	; 25/10/2022
 21549                                  	;pop	ds
 21550 000012B7 BF[5106]                	mov	di,INT19OLD0A
 21551 000012BA BB[5900]                	mov	bx,old0A
 21552 000012BD BA[5700]                	mov	dx,int0A
 21553 000012C0 E80701                  	call	new_init_loop
 21554                                  	
 21555                                  	; 14/12/2022	
 21556                                  	;jmp	short int_0A_end
 21557                                  ;int_0A_first:
 21558                                  	; 25/10/2022
 21559                                  	;pop	ds
 21560                                  
 21561                                  	; 14/12/2022
 21562                                  int_0A_first:
 21563                                  int_0A_end:
 21564                                  
 21565                                  stkinit_0B:
 21566 000012C3 BE2C00                  	mov	si,0Bh*4 ; 44
 21567                                  	
 21568                                  	; 14/12/2022
 21569                                  	; 25/10/2022
 21570 000012C6 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21571 000012C9 730C                    	jnc	short int_0B_end ; int_0B_first
 21572                                  
 21573                                  ; 14/12/2022
 21574                                  %if 0	
 21575                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21576                                  	push	ds
 21577                                  	lds	bx,[es:si]
 21578                                  	push	ds
 21579                                  	pop	dx
 21580                                  		
 21581                                  	cmp	dx,0
 21582                                  	je	short int_0B_first
 21583                                  
 21584                                  	cmp	byte [bx],0CFh
 21585                                  	je	short int_0B_first
 21586                                  	
 21587                                  	cmp	word [bx+6],424Bh
 21588                                  	je	short int_0B_not_first
 21589                                  	
 21590                                  	cmp	dx,0F000h
 21591                                  	jne	short int_0B_not_first
 21592                                  
 21593                                  	push	es
 21594                                  	push	dx
 21595                                  	mov	dx,0F000h
 21596                                  	mov	es,dx
 21597                                  	cmp	bx,[es:0FF01h]
 21598                                  	pop	dx
 21599                                  	pop	es
 21600                                  	je	short int_0B_first
 21601                                  %endif
 21602                                  
 21603                                  int_0B_not_first:
 21604                                  	; 14/12/2022
 21605                                  	; 25/10/2022
 21606                                  	;pop	ds
 21607 000012CB BF[5606]                	mov	di,INT19OLD0B
 21608 000012CE BB[7100]                	mov	bx,old0B
 21609 000012D1 BA[6F00]                	mov	dx,int0B
 21610 000012D4 E8F300                  	call	new_init_loop
 21611                                  
 21612                                  	; 14/12/2022
 21613                                  	;jmp	short int_0B_end
 21614                                  ;int_0B_first:
 21615                                  	; 25/10/2022
 21616                                  	;pop	ds
 21617                                  
 21618                                  int_0B_end:
 21619                                  	
 21620                                  stkinit_0C:
 21621 000012D7 BE3000                  	mov	si,0Ch*4 ; 48
 21622                                  	
 21623                                  	; 14/12/2022
 21624                                  	; 25/10/2022
 21625 000012DA E8C300                  	call	int_xx_first_check
 21626 000012DD 730C                    	jnc	short int_0C_end ; int_0C_first
 21627                                  
 21628                                  ; 14/12/2022
 21629                                  %if 0	
 21630                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21631                                  	push	ds
 21632                                  	lds	bx,[es:si]
 21633                                  	push	ds
 21634                                  	pop	dx
 21635                                  		
 21636                                  	cmp	dx,0
 21637                                  	je	short int_0C_first
 21638                                  
 21639                                  	cmp	byte [bx],0CFh
 21640                                  	je	short int_0C_first
 21641                                  	
 21642                                  	cmp	word [bx+6],424Bh
 21643                                  	je	short int_0C_not_first
 21644                                  	
 21645                                  	cmp	dx,0F000h
 21646                                  	jne	short int_0C_not_first
 21647                                  
 21648                                  	push	es
 21649                                  	push	dx
 21650                                  	mov	dx,0F000h
 21651                                  	mov	es,dx
 21652                                  	cmp	bx,[es:0FF01h]
 21653                                  	pop	dx
 21654                                  	pop	es
 21655                                  	je	short int_0C_first
 21656                                  %endif
 21657                                  	
 21658                                  int_0C_not_first:
 21659                                  	; 14/12/2022
 21660                                  	; 25/10/2022
 21661                                  	;pop	ds
 21662 000012DF BF[5B06]                	mov	di,INT19OLD0C
 21663 000012E2 BB[8900]                	mov	bx,old0C
 21664 000012E5 BA[8700]                	mov	dx,int0C
 21665 000012E8 E8DF00                  	call	new_init_loop
 21666                                  
 21667                                  	; 14/12/2022
 21668                                  	;jmp	short int_0C_end
 21669                                  ;int_0C_first:
 21670                                  	; 25/10/2022
 21671                                  	;pop	ds
 21672                                  
 21673                                  int_0C_end:
 21674                                  
 21675                                  stkinit_0D:
 21676 000012EB BE3400                  	mov	si,0Dh*4 ; 52
 21677                                  
 21678                                  	; 14/12/2022	
 21679                                  	; 25/10/2022
 21680 000012EE E8AF00                  	call	int_xx_first_check
 21681 000012F1 730C                    	jnc	short int_0D_end ; int_0D_first
 21682                                  
 21683                                  ; 14/12/2022
 21684                                  %if 0	
 21685                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21686                                  	push	ds
 21687                                  	lds	bx,[es:si]
 21688                                  	push	ds
 21689                                  	pop	dx
 21690                                  		
 21691                                  	cmp	dx,0
 21692                                  	je	short int_0D_first
 21693                                  
 21694                                  	cmp	byte [bx],0CFh
 21695                                  	je	short int_0D_first
 21696                                  	
 21697                                  	cmp	word [bx+6],424Bh
 21698                                  	je	short int_0D_not_first
 21699                                  	
 21700                                  	cmp	dx,0F000h
 21701                                  	jne	short int_0D_not_first
 21702                                  
 21703                                  	push	es
 21704                                  	push	dx
 21705                                  	mov	dx,0F000h
 21706                                  	mov	es,dx
 21707                                  	cmp	bx,[es:0FF01h]
 21708                                  	pop	dx
 21709                                  	pop	es
 21710                                  	je	short int_0D_first
 21711                                  %endif
 21712                                  	
 21713                                  int_0D_not_first:
 21714                                  	; 14/12/2022
 21715                                  	; 25/10/2022
 21716                                  	;pop	ds
 21717 000012F3 BF[6006]                	mov	di,INT19OLD0D
 21718 000012F6 BB[A100]                	mov	bx,old0D
 21719 000012F9 BA[9F00]                	mov	dx,int0D
 21720 000012FC E8CB00                  	call	new_init_loop
 21721                                  
 21722                                  	; 14/12/2022
 21723                                  	;jmp	short int_0D_end
 21724                                  	; 02/11/2022
 21725                                  ;int_0D_first:
 21726                                  	;pop	ds
 21727                                  
 21728                                  int_0D_end:
 21729                                  
 21730                                  stkinit_0E:
 21731 000012FF BE3800                  	mov	si,0Eh*4 ; 56
 21732                                  
 21733                                  	; 14/12/2022	
 21734                                  	; 25/10/2022
 21735 00001302 E89B00                  	call	int_xx_first_check
 21736 00001305 730C                    	jnc	short int_0E_end ; int_0E_first
 21737                                  
 21738                                  ; 14/12/2022
 21739                                  %if 0	
 21740                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21741                                  	push	ds
 21742                                  	lds	bx,[es:si]
 21743                                  	push	ds
 21744                                  	pop	dx
 21745                                  		
 21746                                  	cmp	dx,0
 21747                                  	je	short int_0E_first
 21748                                  
 21749                                  	cmp	byte [bx],0CFh
 21750                                  	je	short int_0E_first
 21751                                  	
 21752                                  	cmp	word [bx+6],424Bh
 21753                                  	je	short int_0E_not_first
 21754                                  	
 21755                                  	cmp	dx,0F000h
 21756                                  	jne	short int_0E_not_first
 21757                                  
 21758                                  	push	es
 21759                                  	push	dx
 21760                                  	mov	dx,0F000h
 21761                                  	mov	es,dx
 21762                                  	cmp	bx,[es:0FF01h]
 21763                                  	pop	dx
 21764                                  	pop	es
 21765                                  	je	short int_0E_first
 21766                                  %endif
 21767                                  	
 21768                                  int_0E_not_first:
 21769                                  	; 14/12/2022
 21770                                  	; 25/10/2022
 21771                                  	;pop	ds
 21772 00001307 BF[6506]                	mov	di,INT19OLD0E
 21773 0000130A BB[B900]                	mov	bx,old0E
 21774 0000130D BA[B700]                	mov	dx,int0E
 21775 00001310 E8B700                  	call	new_init_loop
 21776                                  
 21777                                  	; 14/12/2022
 21778                                  	;jmp	short int_0E_end
 21779                                  ;int_0E_first:
 21780                                  	; 25/10/2022
 21781                                  	;pop	ds	
 21782                                  
 21783                                  int_0E_end:
 21784                                  
 21785                                  stkinit_72:
 21786 00001313 BEC801                  	mov	si,72h*4 ; 456
 21787                                  	
 21788                                  	; 14/12/2022
 21789                                  	; 25/10/2022
 21790 00001316 E88700                  	call	int_xx_first_check
 21791 00001319 730C                    	jnc	short int_72_end ; int_72_first
 21792                                  
 21793                                  ; 14/12/2022
 21794                                  %if 0	
 21795                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21796                                  	push	ds
 21797                                  	lds	bx,[es:si]
 21798                                  	push	ds
 21799                                  	pop	dx
 21800                                  		
 21801                                  	cmp	dx,0
 21802                                  	je	short int_72_first
 21803                                  
 21804                                  	cmp	byte [bx],0CFh
 21805                                  	je	short int_72_first
 21806                                  	
 21807                                  	cmp	word [bx+6],424Bh
 21808                                  	je	short int_72_not_first
 21809                                  	
 21810                                  	cmp	dx,0F000h
 21811                                  	jne	short int_72_not_first
 21812                                  
 21813                                  	push	es
 21814                                  	push	dx
 21815                                  	mov	dx,0F000h
 21816                                  	mov	es,dx
 21817                                  	cmp	bx,[es:0FF01h]
 21818                                  	pop	dx
 21819                                  	pop	es
 21820                                  	je	short int_72_first
 21821                                  %endif
 21822                                  	
 21823                                  int_72_not_first:
 21824                                  	; 14/12/2022
 21825                                  	; 25/10/2022
 21826                                  	;pop	ds
 21827 0000131B BF[6F06]                	mov	di,INT19OLD72
 21828 0000131E BB[D100]                	mov	bx,old72
 21829 00001321 BA[CF00]                	mov	dx,int72
 21830 00001324 E8A300                  	call	new_init_loop
 21831                                  
 21832                                  	; 14/12/2022
 21833                                  	;jmp	short int_72_end
 21834                                  ;int_72_first:
 21835                                  	; 25/10/2022
 21836                                  	;pop	ds
 21837                                  
 21838                                  int_72_end:
 21839                                  
 21840                                  stkinit_73:
 21841 00001327 BECC01                  	mov	si,73h*4 ; 460
 21842                                  	
 21843                                  	; 14/12/2022
 21844                                  	; 25/10/2022
 21845 0000132A E87300                  	call	int_xx_first_check
 21846 0000132D 730C                    	jnc	short int_73_end ; int_73_first
 21847                                  
 21848                                  ; 14/12/2022
 21849                                  %if 0	
 21850                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21851                                  	push	ds
 21852                                  	lds	bx,[es:si]
 21853                                  	push	ds
 21854                                  	pop	dx
 21855                                  		
 21856                                  	cmp	dx,0
 21857                                  	je	short int_73_first
 21858                                  
 21859                                  	cmp	byte [bx],0CFh
 21860                                  	je	short int_73_first
 21861                                  	
 21862                                  	cmp	word [bx+6],424Bh
 21863                                  	je	short int_73_not_first
 21864                                  	
 21865                                  	cmp	dx,0F000h
 21866                                  	jne	short int_73_not_first
 21867                                  
 21868                                  	push	es
 21869                                  	push	dx
 21870                                  	mov	dx,0F000h
 21871                                  	mov	es,dx
 21872                                  	cmp	bx,[es:0FF01h]
 21873                                  	pop	dx
 21874                                  	pop	es
 21875                                  	je	short int_73_first
 21876                                  %endif	
 21877                                  	
 21878                                  int_73_not_first:
 21879                                  	; 14/12/2022
 21880                                  	; 25/10/2022
 21881                                  	;pop	ds
 21882 0000132F BF[7406]                	mov	di,INT19OLD73
 21883 00001332 BB[E900]                	mov	bx,old73
 21884 00001335 BA[E700]                	mov	dx,int73
 21885 00001338 E88F00                  	call	new_init_loop
 21886                                  
 21887                                  	; 14/12/2022
 21888                                  	;jmp	short int_73_end
 21889                                  ;int_73_first:
 21890                                  	; 25/10/2022
 21891                                  	;pop	ds
 21892                                  
 21893                                  int_73_end:
 21894                                  
 21895                                  stkinit_74:
 21896 0000133B BED001                  	mov	si,74h*4 ; 464
 21897                                  	
 21898                                  	; 14/12/2022
 21899                                  	; 25/10/2022
 21900 0000133E E85F00                  	call	int_xx_first_check
 21901 00001341 730C                    	jnc	short int_74_end ; int_74_first
 21902                                  
 21903                                  ; 14/12/2022
 21904                                  %if 0		
 21905                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21906                                  	push	ds
 21907                                  	lds	bx,[es:si]
 21908                                  	push	ds
 21909                                  	pop	dx
 21910                                  		
 21911                                  	cmp	dx,0
 21912                                  	je	short int_74_first
 21913                                  
 21914                                  	cmp	byte [bx],0CFh
 21915                                  	je	short int_74_first
 21916                                  	
 21917                                  	cmp	word [bx+6],424Bh
 21918                                  	je	short int_74_not_first
 21919                                  	
 21920                                  	cmp	dx,0F000h
 21921                                  	jne	short int_74_not_first
 21922                                  
 21923                                  	push	es
 21924                                  	push	dx
 21925                                  	mov	dx,0F000h
 21926                                  	mov	es,dx
 21927                                  	cmp	bx,[es:0FF01h]
 21928                                  	pop	dx
 21929                                  	pop	es
 21930                                  	je	short int_74_first
 21931                                  %endif
 21932                                  
 21933                                  int_74_not_first:
 21934                                  	; 14/12/2022
 21935                                  	; 25/10/2022
 21936                                  	;pop	ds
 21937 00001343 BF[7906]                	mov	di,INT19OLD74
 21938 00001346 BB[0101]                	mov	bx,old74
 21939 00001349 BA[FF00]                	mov	dx,int74
 21940 0000134C E87B00                  	call	new_init_loop
 21941                                  	
 21942                                  	; 14/12/2022
 21943                                  	;jmp	short int_74_end
 21944                                  ;int_74_first:
 21945                                  	; 25/10/2022
 21946                                  	;pop	ds
 21947                                  
 21948                                  int_74_end:
 21949                                  
 21950                                  stkinit_76:
 21951 0000134F BED801                  	mov	si,76h*4 ; 472
 21952                                  	
 21953                                  	; 14/12/2022
 21954                                  	; 25/10/2022
 21955 00001352 E84B00                  	call	int_xx_first_check
 21956 00001355 730E                    	jnc	short int_76_end ; int_76_first
 21957                                  
 21958                                  ; 14/12/2022
 21959                                  %if 0	
 21960                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21961                                  	push	ds
 21962                                  	lds	bx,[es:si]
 21963                                  	push	ds
 21964                                  	pop	dx
 21965                                  		
 21966                                  	cmp	dx,0
 21967                                  	je	short int_76_first
 21968                                  
 21969                                  	cmp	byte [bx],0CFh
 21970                                  	je	short int_76_first
 21971                                  	
 21972                                  	cmp	word [bx+6],424Bh
 21973                                  	je	short int_76_not_first
 21974                                  	
 21975                                  	cmp	dx,0F000h
 21976                                  	jne	short int_76_not_first
 21977                                  
 21978                                  	push	es
 21979                                  	push	dx
 21980                                  	mov	dx,0F000h
 21981                                  	mov	es,dx
 21982                                  	cmp	bx,[es:0FF01h]
 21983                                  	pop	dx
 21984                                  	pop	es
 21985                                  	je	short int_76_first
 21986                                  %endif
 21987                                  	
 21988                                  int_76_not_first:
 21989                                  	; 14/12/2022
 21990                                  	; 25/10/2022
 21991                                  	;pop	ds
 21992 00001357 BF[7E06]                	mov	di,INT19OLD76
 21993 0000135A BB[1901]                	mov	bx,old76
 21994 0000135D BA[1701]                	mov	dx,int76
 21995 00001360 E86700                  	call	new_init_loop
 21996                                  
 21997                                  	; 14/12/2022
 21998 00001363 EB00                    	jmp	short int_76_end
 21999                                  ;int_76_first:
 22000                                  	; 25/10/2022
 22001                                  	;pop	ds
 22002                                  
 22003                                  int_76_end:
 22004                                  
 22005                                  stkinit_77:
 22006 00001365 BEDC01                  	mov	si,77h*4 ; 476
 22007                                  	
 22008                                  	; 14/12/2022
 22009                                  	; 25/10/2022
 22010 00001368 E83500                  	call	int_xx_first_check
 22011 0000136B 730C                    	jnc	short int_77_end ; int_77_first
 22012                                  
 22013                                  ; 14/12/2022
 22014                                  %if 0	
 22015                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22016                                  	push	ds
 22017                                  	lds	bx,[es:si]
 22018                                  	push	ds
 22019                                  	pop	dx
 22020                                  		
 22021                                  	cmp	dx,0
 22022                                  	je	short int_77_first
 22023                                  
 22024                                  	cmp	byte [bx],0CFh
 22025                                  	je	short int_77_first
 22026                                  	
 22027                                  	cmp	word [bx+6],424Bh
 22028                                  	je	short int_77_not_first
 22029                                  	
 22030                                  	cmp	dx,0F000h
 22031                                  	jne	short int_77_not_first
 22032                                  
 22033                                  	push	es
 22034                                  	push	dx
 22035                                  	mov	dx,0F000h
 22036                                  	mov	es,dx
 22037                                  	cmp	bx,[es:0FF01h]
 22038                                  	pop	dx
 22039                                  	pop	es
 22040                                  	je	short int_77_first
 22041                                  %endif
 22042                                  	
 22043                                  int_77_not_first:
 22044                                  	; 14/12/2022
 22045                                  	; 25/10/2022
 22046                                  	;pop	ds
 22047 0000136D BF[8306]                	mov	di,INT19OLD77
 22048 00001370 BB[3101]                	mov	bx,old77
 22049 00001373 BA[2F01]                	mov	dx,int77
 22050 00001376 E85100                  	call	new_init_loop
 22051                                  
 22052                                  	; 14/12/2022
 22053                                  	;jmp	short int_77_end
 22054                                  ;int_77_first:
 22055                                  	; 25/10/2022
 22056                                  	;pop	ds
 22057                                  
 22058                                  int_77_end:
 22059 00001379 1E                      	push	ds
 22060 0000137A B800F0                  	mov	ax,0F000h		; look at the model byte
 22061 0000137D 8ED8                    	mov	ds,ax
 22062 0000137F 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 22063 00001384 1F                      	pop	ds
 22064 00001385 7504                    	jne	short skip_enablenmis
 22065                                  
 22066 00001387 B027                    	mov	al,27h			; enable convertible nmis
 22067 00001389 E672                    	out	72h,al
 22068                                  
 22069                                  ; 25/10/2022
 22070                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 22071                                  
 22072                                  skip_enablenmis:
 22073 0000138B FB                      	sti
 22074                                  	;;mov	ax,Bios_Data ; 70h
 22075                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22076                                  	; 21/10/2022
 22077 0000138C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22078 0000138F 8ED8                    	mov	ds,ax
 22079                                  
 22080                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 22081                                  
 22082 00001391 C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 22083                                  					; initialization is complete
 22084                                  
 22085 00001396 5D                      	pop	bp			; restore all
 22086 00001397 5E                      	pop	si
 22087 00001398 5F                      	pop	di
 22088 00001399 5A                      	pop	dx
 22089 0000139A 59                      	pop	cx
 22090 0000139B 5B                      	pop	bx
 22091 0000139C 07                      	pop	es
 22092 0000139D 1F                      	pop	ds
 22093 0000139E 58                      	pop	ax
 22094 0000139F C3                      	retn
 22095                                  
 22096                                  ; 14/12/2022
 22097                                  ; ----------------------------------------------------------------------
 22098                                  
 22099                                  	; 14/12/2022
 22100                                  	; 25/10/2022
 22101                                  ;%if 0
 22102                                  	; 27/03/2019 - Retro DOS v4.0
 22103                                  int_xx_first_check:
 22104 000013A0 1E                      	push	ds
 22105 000013A1 26C51C                  	lds	bx,[es:si]
 22106 000013A4 1E                      	push	ds
 22107 000013A5 5A                      	pop	dx
 22108                                  		
 22109                                  	;cmp	dx,0
 22110                                  	;je	short int_xx_first
 22111                                  	; 05/09/2023
 22112 000013A6 21D2                    	and	dx,dx
 22113 000013A8 741E                    	jz	short int_xx_first
 22114                                  
 22115 000013AA 803FCF                  	cmp	byte [bx],0CFh
 22116 000013AD 7419                    	je	short int_xx_first
 22117                                  	
 22118 000013AF 817F064B42              	cmp	word [bx+6],424Bh
 22119 000013B4 7411                    	je	short int_xx_not_first
 22120                                  	
 22121 000013B6 81FA00F0                	cmp	dx,0F000h
 22122 000013BA 750B                    	jne	short int_xx_not_first
 22123                                  
 22124 000013BC 06                      	push	es
 22125                                  	;push	dx
 22126                                  	;mov	dx,0F000h
 22127 000013BD 8EC2                    	mov	es,dx
 22128 000013BF 263B1E01FF              	cmp	bx,[es:0FF01h]
 22129                                        	;pop	dx
 22130 000013C4 07                      	pop	es
 22131 000013C5 7401                    	je	short int_xx_first
 22132                                  
 22133                                  int_xx_not_first:
 22134 000013C7 F9                      	stc
 22135                                  int_xx_first:
 22136 000013C8 1F                      	pop	ds
 22137 000013C9 C3                      	retn
 22138                                  
 22139                                  ;%endif
 22140                                  
 22141                                  ; ----------------------------------------------------------------------
 22142                                  ; 27/03/2019 - Retro DOS v4.0
 22143                                  
 22144                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22145                                  ; (SYSINIT:1610h)
 22146                                  
 22147                                  new_init_loop:
 22148                                  
 22149                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 22150                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 22151                                  ;	dx=ds:offset of intxx, the new interrupt handler
 22152                                  ;	di=offset value of int19old&aa variable in bios.
 22153                                  ;	es=zero, segid of vector table
 22154                                  ;	ds=relocated stack code segment
 22155                                  
 22156 000013CA 268B04                  	mov	ax,[es:si]		;remember offset in vector
 22157 000013CD 8907                    	mov	[bx],ax			; to original owner in ds
 22158 000013CF 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 22159 000013D3 894702                  	mov	[bx+2],ax		; to original owner in ds
 22160                                  
 22161 000013D6 1E                      	push	ds
 22162                                  	;;mov	ax,Bios_Data ; 70h
 22163                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22164                                  	; 21/10/2022
 22165 000013D7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22166 000013DA 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 22167 000013DC 268B04                  	mov	ax,[es:si]		;int 19 handler
 22168 000013DF 8905                    	mov	[di],ax
 22169 000013E1 268B4402                	mov	ax,[es:si+2]
 22170 000013E5 894502                  	mov	[di+2],ax
 22171 000013E8 1F                      	pop	ds
 22172                                  
 22173 000013E9 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 22174 000013EC 268C5C02                	mov	[es:si+2],ds
 22175 000013F0 C3                      	retn
 22176                                  
 22177                                  ; End of STACK initialization routine
 22178                                  ; ----------------------------------------------------------------------
 22179                                  
 22180                                  ; ----------------------------------------------------------------------
 22181                                  ;set the devmark for mem command.
 22182                                  ;in: [memhi] - the address to place devmark
 22183                                  ;    [memlo] = 0
 22184                                  ;    al = id for devmark_id
 22185                                  ;out: devmark established.
 22186                                  ;     the address saved in cs:[devmark_addr]
 22187                                  ;     [memhi] increase by 1.
 22188                                  ; ----------------------------------------------------------------------
 22189                                  
 22190                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22191                                  ; (SYSINIT:1637h)
 22192                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 22193                                  ; (SYSINIT:176Ch)
 22194                                  
 22195                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 22196                                  
 22197                                  setdevmark:
 22198                                  
 22199                                  	; 04/09/2023
 22200                                  	;push	es
 22201                                  	;push	cx
 22202                                  
 22203 000013F1 2E8B0E[E003]            	mov	cx,[cs:memhi]
 22204 000013F6 2E890E[0E14]            	mov	[cs:devmark_addr],cx
 22205 000013FB 8EC1                    	mov	es,cx
 22206                                  	; 25/10/2022
 22207                                  	;mov	[es:devmark.id],al
 22208 000013FD 26A20000                	mov	[es:0],al
 22209 00001401 41                      	inc	cx
 22210                                  	;mov	[es:devmark.seg],cx
 22211 00001402 26890E0100              	mov	[es:1],cx
 22212                                  
 22213                                  	; 04/09/2023
 22214                                  	;pop	cx
 22215                                  	;pop	es
 22216                                  	
 22217 00001407 2EFF06[E003]            	inc	word [cs:memhi]
 22218 0000140C C3                      	retn
 22219                                  
 22220                                  ; ----------------------------------------------------------------------
 22221                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22222                                  ; ----------------------------------------------------------------------
 22223                                  ; 27/03/2019 - Retro DOS v4.0
 22224                                  
 22225                                  ;MULTI_CONFIG	equ 1
 22226                                  
 22227                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22228                                                                          ; allocation strategy call
 22229                                  
 22230                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22231                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22232                                  
 22233                                  default_filenum equ 8
 22234                                  
 22235                                  ;stacksw	equ true		; include switchable hardware stacks
 22236                                  
 22237                                  ; external variable defined in ibmbio module for multi-track
 22238                                  
 22239                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22240                                  					; it on after handling config.sys file as a
 22241                                  					; default value,if multrk_flag = multrk_off1.
 22242                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22243                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22244                                  
 22245                                  ; if stacksw
 22246                                  
 22247                                  ; internal stack parameters
 22248                                  
 22249                                  ;entrysize	equ 8
 22250                                  
 22251                                  ;mincount	equ 8
 22252                                  ;defaultcount	equ 9
 22253                                  ;maxcount	equ 64
 22254                                  
 22255                                  ;minsize 	equ 32
 22256                                  ;defaultsize	equ 128
 22257                                  ;maxsize 	equ 512
 22258                                  
 22259                                  DOS_FLAG_OFFSET	equ 86h
 22260                                  
 22261                                  ;ifdef MULTI_CONFIG
 22262                                  ;
 22263                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22264                                  ;   may be loaded as a dword ptr
 22265                                  
 22266                                  ; 25/10/2022
 22267                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 22268                                  ;               			;  a scratch env, this is its length
 22269                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 22270                                  ;                   			;  segment of work area
 22271                                  ;
 22272                                  ;config_cmd:	db  0  			; current config cmd
 22273                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 22274                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 22275                                  
 22276                                  ;endif ; MULTI_CONFIG
 22277                                  
 22278 0000140D 00                      multdeviceflag:	db  0
 22279                                  
 22280 0000140E 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22281                                  
 22282 00001410 00                      setdevmarkflag: db  0			;flag used for devmark
 22283                                  
 22284                                  ; 12/12/2022
 22285                                  ;driver_units:	db  0			;total unitcount for driver
 22286                                  
 22287                                  ; 12/12/2022
 22288                                  ;ems_stub_installed:
 22289                                  ;		db  0
 22290                                  
 22291                                  ; 12/12/2022	
 22292                                  ;align 2
 22293                                  
 22294                                  badparm_ptr:	; label	dword
 22295 00001411 0000                    badparm_off:	dw  0
 22296 00001413 0000                    badparm_seg:	dw  0
 22297                                  
 22298                                  ;******************************************************************************
 22299                                  ;take care of config.sys file.
 22300                                  ;system parser data and code.
 22301                                  ;******************************************************************************
 22302                                  
 22303                                  ;*******************************************************************
 22304                                  ; parser options set for msbio sysconf module
 22305                                  ;*******************************************************************
 22306                                  ;
 22307                                  ;**** default assemble swiches definition **************************
 22308                                  
 22309                                  ;farsw	equ 0		; near call expected
 22310                                  ;datesw	equ 0		; check date format
 22311                                  ;timesw	equ 0		; check time format
 22312                                  ;filesw	equ 1		; check file specification
 22313                                  ;capsw	equ 0		; perform caps if specified
 22314                                  ;cmpxsw	equ 0		; check complex list
 22315                                  ;numsw	equ 1		; check numeric value
 22316                                  ;keysw	equ 0		; support keywords
 22317                                  ;swsw	equ 1		; support switches
 22318                                  ;val1sw	equ 1		; support value definition 1
 22319                                  ;val2sw	equ 0		; support value definition 2
 22320                                  ;val3sw	equ 1		; support value definition 3
 22321                                  ;drvsw	equ 1		; support drive only format
 22322                                  ;qussw	equ 0		; support quoted string format
 22323                                  
 22324                                  ; psdata_seg equ cs
 22325                                  
 22326                                  	;.xlist
 22327                                  	;include parse.asm		;together with psdata.inc
 22328                                  	;.list
 22329                                  
 22330                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22331                                  ; ======================================================================
 22332                                  ; 27/03/2019 - Retro DOS v4.0
 22333                                  
 22334                                  ; 30/03/2019
 22335                                  ; VERSION.INC (MSDOS 6.0) 
 22336                                  ; Set DBCS Blank constant
 22337                                  
 22338                                  ; ifndef DBCS
 22339                                  DB_SPACE EQU 2020h
 22340                                  DB_SP_HI EQU 20h
 22341                                  DB_SP_LO EQU 20h
 22342                                  ; else
 22343                                  
 22344                                  ;*******************************************************************
 22345                                  ; Parser include file
 22346                                  ;*******************************************************************
 22347                                  
 22348                                  ;**** Equation field
 22349                                  ;-------- Character code definition
 22350                                  
 22351                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22352                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22353                                  _$P_Period	   equ	"."             ;AN020;
 22354                                  _$P_Slash	   equ	"/"             ;AN020;
 22355                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22356                                  _$P_Comma	   equ	","             ;AN000;
 22357                                  _$P_Switch	   equ	"/"             ;AN000;
 22358                                  _$P_Keyword	   equ	"="             ;AN000;
 22359                                  _$P_Colon	   equ	":"             ;AN000;
 22360                                  _$P_Plus 	   equ	"+"             ;AN000;
 22361                                  _$P_Minus	   equ	"-"             ;AN000;
 22362                                  _$P_Rparen	   equ	")"             ;AN000;
 22363                                  _$P_Lparen	   equ	"("             ;AN000;
 22364                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22365                                  _$P_DQuote	   equ	'"'             ;AN000;
 22366                                  _$P_NULL 	   equ	0		;AN000;
 22367                                  _$P_TAB		   equ	9		;AN000;
 22368                                  _$P_CR		   equ	0Dh		;AN000;
 22369                                  _$P_LF		   equ	0Ah		;AN000;
 22370                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22371                                  
 22372                                  ;-------- Masks
 22373                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22374                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22375                                  
 22376                                  ;-------- DOS function call related equs
 22377                                  
 22378                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22379                                  					; by this call, following information
 22380                                  struc _$P_CDI	
 22381 00000000 ????                     .DateF: resw 1
 22382 00000002 ??????????               .Money: resb 5
 22383 00000007 ????                     .1000:	 resb 2
 22384 00000009 ????                     .Dec:	 resb 2
 22385 0000000B ????                     .DateS: resb 2
 22386 0000000D ????                     .TimeS: resb 2
 22387 0000000F ??                          	 resb 1
 22388 00000010 ??                      	 resb 1
 22389 00000011 ??                       .TimeF: resb 1	 
 22390 00000012 ????????                	 resw 2
 22391 00000016 ????                    	 resb 2
 22392 00000018 <res Ah>                	 resw 5
 22393                                   .size:
 22394                                  endstruc
 22395                                  
 22396                                  _$P_Date_MDY	   equ	0		;AN000;
 22397                                  _$P_Date_DMY	   equ	1		;AN000;
 22398                                  _$P_Date_YMD	   equ	2		;AN000;
 22399                                  ;-------------
 22400                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22401                                  					;AN000; DS:SI will points to DBCS EV
 22402                                  ;-------------
 22403                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22404                                  					;AN000; following parameters are set
 22405                                  					;AN000; to get casemap table.
 22406                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22407                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22408                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22409                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22410                                  					; By this call following information
 22411                                  					; is returned.
 22412                                  struc _$P_DOS_TBL
 22413 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22414 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22415 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22416                                  endstruc
 22417                                  
 22418                                  ; ----------------------------------------------------------------------------
 22419                                  ; PARMS 	LABEL	BYTE
 22420                                  ;		DW	PARMSX
 22421                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22422                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22423                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22424                                  ;					; TYPICAL ARE ";", "="
 22425                                  ;					; "," & WHITESPACE ALWAYS
 22426                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22427                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22428                                  ; ----------------------------------------------------------------------------
 22429                                  
 22430                                  ;-------------------------------- PARMS block structure
 22431                                  struc _$P_PARMS_Blk
 22432 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22433 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22434 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22435                                  endstruc
 22436                                  
 22437                                  _$P_Len_PARMS	   equ	4		;AN000;
 22438                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22439                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22440                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22441                                  
 22442                                  ; ----------------------------------------------------------------------------
 22443                                  ; PARMSX	LABEL	BYTE
 22444                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22445                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22446                                  ;		:			; REPEATS maxp-1 TIMES
 22447                                  ;		DB	maxs		; # OF SWITCHES
 22448                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22449                                  ;		:			; REPEATS maxs-1 TIMES
 22450                                  ;		DB	maxk		; # OF KEYWORD
 22451                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22452                                  ;		:			; REPEATS maxk-1 TIMES
 22453                                  ; ----------------------------------------------------------------------------
 22454                                  
 22455                                  ;-------------------------------- PARMSX block structure
 22456                                  struc _$P_PARMSX_Blk		;AN000;
 22457 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22458 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22459 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22460                                  endstruc
 22461                                  
 22462                                  ; ----------------------------------------------------------------------------
 22463                                  ; << Control field definition  >>
 22464                                  ;
 22465                                  ;
 22466                                  ;CONTROL   LABEL   BYTE
 22467                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22468                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22469                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22470                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22471                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22472                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22473                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22474                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22475                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22476                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22477                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22478                                  ;				   ; 0002H=REPEATS ALLOWED
 22479                                  ;				   ; 0001H=OPTIONAL
 22480                                  ;	   DW	   FUNCTION_FLAGS
 22481                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22482                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22483                                  ;				   ; 0010H=REMOVE ":" AT END
 22484                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22485                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22486                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22487                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22488                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22489                                  ;	   :
 22490                                  ;
 22491                                  ;Note:
 22492                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22493                                  ;      DATE bit simalteniously.
 22494                                  ;
 22495                                  ;      The parser examins each bit along with the following priority.
 22496                                  ;
 22497                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22498                                  ;      FILE SPEC -> SIMPLE STRING.
 22499                                  ;
 22500                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22501                                  ;      in the result buffer is capitalized.
 22502                                  ;
 22503                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22504                                  ;
 22505                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22506                                  ;      switch, for example, '/A', then STRING points to;
 22507                                  ;
 22508                                  ;			DB    1 	; number of following synonyms
 22509                                  ;			DB   '/A',0
 22510                                  ;
 22511                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22512                                  ;
 22513                                  ;			DB    1 	; number of following synonyms
 22514                                  ;			DB   'CODEPAGE=',0
 22515                                  ;
 22516                                  ;    - "..." must consist of upper case characters only because the parser
 22517                                  ;      performs pattern matching after converting input to upper case (by
 22518                                  ;      using the current country upper case table)
 22519                                  ;
 22520                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22521                                  ;      example /A and /B, the format will be;
 22522                                  ;
 22523                                  ;			DB    2 	; number of following synonyms
 22524                                  ;			DB    '/A',0
 22525                                  ;			DB    '/B',0
 22526                                  ; ----------------------------------------------------------------------------
 22527                                  
 22528                                  ;**** Match_Flags
 22529                                  
 22530                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22531                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22532                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22533                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22534                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22535                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22536                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22537                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22538                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22539                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22540                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22541                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22542                                  
 22543                                  ;**** Function flags
 22544                                  
 22545                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22546                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22547                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22548                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22549                                  
 22550                                  ;-------------------------------- Control block structure
 22551                                  struc _$P_Control_Blk
 22552 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22553 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22554 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22555 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22556 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22557 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22558                                  endstruc
 22559                                  
 22560                                  ; ----------------------------------------------------------------------------
 22561                                  ; << Value List Definition >>
 22562                                  ;
 22563                                  ;VALUES 	LABEL	BYTE
 22564                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22565                                  ;	     +-
 22566                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22567                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22568                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22569                                  ;	     |	:
 22570                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22571                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22572                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22573                                  ;	     |	:
 22574                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22575                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22576                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22577                                  ;	     +-	:
 22578                                  ;
 22579                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22580                                  ;
 22581                                  ;Note:
 22582                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22583                                  ;      when no choice lists are provided.
 22584                                  ;
 22585                                  ;    - STRING must consist of upper case characters only because the parser
 22586                                  ;      performs pattern matching after converting input to upper case (by
 22587                                  ;      using the current country upper case table)
 22588                                  ; ----------------------------------------------------------------------------
 22589                                  
 22590                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22591                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22592                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22593                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22594                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22595                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22596                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22597                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22598                                  
 22599                                  struc _$P_Val_List
 22600 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22601 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22602 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22603 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22604 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22605                                  endstruc
 22606                                  
 22607                                  ; ----------------------------------------------------------------------------
 22608                                  ; << Result Buffer Definition  >>
 22609                                  ;
 22610                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22611                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22612                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22613                                  ;						;	3=STRING, 4=COMPLEX,
 22614                                  ;						;	5=FILESPEC, 6=DRIVE
 22615                                  ;						;	7=DATE, 8=TIME
 22616                                  ;						;	9=QUOTED STRING
 22617                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22618                                  ;
 22619                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22620                                  ;
 22621                                  ;            +-
 22622                                  ;	    | DD	n			; VALUE IF NUMBER
 22623                                  ;	    | or
 22624                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22625                                  ;	    |					; (ES presents Segment address)
 22626                                  ;	    | or
 22627                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22628                                  ;	    | or
 22629                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22630                                  ;	    | or
 22631                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22632                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22633                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22634                                  ;	    | or
 22635                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22636                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22637                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22638                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22639                                  ;	    +-
 22640                                  ;
 22641                                  ;
 22642                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22643                                  ;      list.
 22644                                  ;
 22645                                  ;      YEAR: If the input value for the year is less than 100, parser
 22646                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22647                                  ;	     the year value, he returns 1987.
 22648                                  ; ----------------------------------------------------------------------------
 22649                                  
 22650                                  ;-------------------------------- Result block structure
 22651                                  struc _$P_Result_Blk
 22652 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22653 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22654 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22655 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22656                                  endstruc
 22657                                  
 22658                                  ;--------------------------------
 22659                                  ;**** values for the type field in the result block
 22660                                  
 22661                                  _$P_EOL		   equ	0		;AN000; End of line
 22662                                  _$P_Number	   equ	1		;AN000; Number
 22663                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22664                                  _$P_String	   equ	3		;AN000; String
 22665                                  _$P_Complex	   equ	4		;AN000; Complex
 22666                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22667                                  _$P_Drive	   equ	6		;AN000; Drive
 22668                                  _$P_Date_F	   equ	7		;AN000; Date
 22669                                  _$P_Time_F	   equ	8		;AN000; Time
 22670                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22671                                  
 22672                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22673                                  
 22674                                  ;**** Return code
 22675                                  ;
 22676                                  ; following return code will be returned in the AX register.
 22677                                  
 22678                                  _$P_No_Error	   equ	0		;AN000; No error
 22679                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22680                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22681                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22682                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22683                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22684                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22685                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22686                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22687                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22688                                  
 22689                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22690                                  
 22691                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22692                                  
 22693                                  ;********************** Local Data *************************************
 22694 00001415 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22695 00001417 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22696 00001419 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22697 0000141B 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22698 0000141D 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22699 0000141E 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22700 00001420 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22701 00001422 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22702                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22703                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22704                                  
 22705                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22706                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22707                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22708                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22709                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22710                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22711                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22712                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22713                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22714                                  
 22715                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22716                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22717                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22718                                  
 22719 00001424 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22720 00001426 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22721 00001428 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22722 0000142A 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22723                                  
 22724 0000142C 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22725                                  _$P_STRING_BUF_END equ	$		;AN000;
 22726                                  
 22727                                  ; 25/10/2022
 22728                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22729                                  
 22730 000014AC FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22731 000014AD 0000                    		   dw	0		;AN000; offset	of char case map table
 22732 000014AF 0000                    		   dw	0		;AN000; segment of char case map table
 22733                                  ; 25/10/2022
 22734                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22735                                  ;		   dw	0		;AN000; offset	of file case map table
 22736                                  ;		   dw	0		;AN000; segment of file case map table
 22737                                  
 22738                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22739                                  ;
 22740                                  
 22741                                  ;M029
 22742                                  ;!!!WARNING!!!
 22743                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22744                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22745                                  ;changes need to be made in SYSPARSE
 22746                                  
 22747                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22748                                  
 22749                                  ; 25/10/2022
 22750                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22751                                  
 22752 000014B1 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22753                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22754                                  
 22755                                  ;ENDIF					;AN000;(of FileSW)
 22756                                  
 22757                                  ; delimiter parsing
 22758                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22759                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22760                                  
 22761                                  ;filespec error flag
 22762 000014BA 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22763                                  					;AN033;  was detected.
 22764                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22765                                  
 22766                                  
 22767                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22768                                  ; ======================================================================
 22769                                  ; 27/03/2019 - Retro DOS v4.0
 22770                                  
 22771                                  ;***********************************************************************
 22772                                  ; SysParse;
 22773                                  ;
 22774                                  ;  Function : Parser Entry
 22775                                  ;
 22776                                  ;  Input: DS:SI -> command line
 22777                                  ;	  ES:DI -> parameter block
 22778                                  ;	  cs -> psdata.inc
 22779                                  ;	  CX = operand ordinal
 22780                                  ;
 22781                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22782                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22783                                  ;		 is in DS.
 22784                                  ;
 22785                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22786                                  ;		    invalid value list. But this parser does NOT implement
 22787                                  ;		    this feature. Therefore CY always zero.
 22788                                  ;
 22789                                  ;	   CY = 0   AX = return code
 22790                                  ;		    BL = terminated delimiter code
 22791                                  ;		    CX = new operand ordinal
 22792                                  ;		    SI = set past scaned operand
 22793                                  ;		    DX = selected result buffer
 22794                                  ;
 22795                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22796                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22797                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22798                                  ;
 22799                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22800                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22801                                  ;
 22802                                  ;-------- Modification History -----------------------------------------
 22803                                  ;
 22804                                  ;  4/04/87 : Created by K. K,
 22805                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22806                                  ;	   : JMP SHORT assemble error (tm02)
 22807                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22808                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22809                                  ;	     DateSW equ 1)	      (tm04)
 22810                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22811                                  ;				      (tm05) in PSDATA.INC
 22812                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22813                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22814                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22815                                  ;	     value-list block	      (tm07)
 22816                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22817                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22818                                  ;	     (tm08)
 22819                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22820                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22821                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22822                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22823                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22824                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22825                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22826                                  ;					  (tm12)
 22827                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22828                                  ;					  (tm13)
 22829                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22830                                  ;					  (tm14)
 22831                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22832                                  ;					  (tm15)
 22833                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22834                                  
 22835                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22836                                  
 22837                                  ;  7/28/87 : Kerry S (;AN018;)
 22838                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22839                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22840                                  ;	     affected: _$P_Chk_SW_Control.
 22841                                  
 22842                                  ;  7/29/87 : Kerry S (;AN019;)
 22843                                  ;	     Now allow the optional bit in match flags for switches.  This
 22844                                  ;	     allows the switch to be encountered with a value or without a
 22845                                  ;	     value and no error is returned.
 22846                                  ;
 22847                                  
 22848                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22849                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22850                                  ;	     within a date response, instead of checking just for the one
 22851                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22852                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22853                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22854                                  
 22855                                  ;  9/1/87  : Kerry S (;AN021)
 22856                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22857                                  ;	     the command line with the string in the control block the
 22858                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22859                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22860                                  ;	     string on the command line than in the synonym list in the control
 22861                                  ;	     block.  I put in a test for a null in the control block so the
 22862                                  ;	     string in the control block must be the same length as the string
 22863                                  ;	     preceeding the colon or equal on the command line.
 22864                                  
 22865                                  ;  8/28/87 : Kerry S (;AN022;)
 22866                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22867                                  ;	     problems for people who included it themselves in a segment other
 22868                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22869                                  ;	     segment.
 22870                                  
 22871                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22872                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22873                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22874                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22875                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22876                                  ;	     BL be used if TIME is being parsed.
 22877                                  
 22878                                  ;  9/24/87 : Ed K
 22879                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22880                                  ;	     invocations with their normally expanded code; made comments
 22881                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22882                                  
 22883                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22884                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22885                                  ;	     pointed to by non-existant CONTROL.
 22886                                  
 22887                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22888                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22889                                  ;	     support to frame quoted text string with single quote.
 22890                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22891                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22892                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22893                                  
 22894                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22895                                  ;	     quote chars within a quoted string is supposed to be reported as
 22896                                  ;	     one quote character, but is reported as two quotes.  This changed
 22897                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22898                                  
 22899                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22900                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22901                                  
 22902                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22903                                  
 22904                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22905                                  ;	     psdata buffer should have cs.
 22906                                  
 22907                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22908                                  ;	     positional missing.
 22909                                  
 22910                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22911                                  ;	     as a line delimiter, should use carriage return.
 22912                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22913                                  
 22914                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22915                                  
 22916                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22917                                  ;	     endless loop since SI is returned still pointing to start
 22918                                  ;	     of that parm.
 22919                                  
 22920                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22921                                  ;	     Vector to returned string has CS instead of cs, but
 22922                                  ;	     when tried to fix it on previous version, changed similar
 22923                                  ;	     but wrong place.
 22924                                  
 22925                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22926                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22927                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22928                                  
 22929                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22930                                  ;	     in a filespec, then flag an error.
 22931                                  
 22932                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22933                                  ;	     indexed off of the cs equate instead of the DS register.
 22934                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22935                                  ;  -->	     local parser data. Why were some references to local data changed
 22936                                  ;	     to do this before, but not all ?????
 22937                                  
 22938                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22939                                  
 22940                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22941                                  ;
 22942                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22943                                  
 22944                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22945                                  
 22946                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22947                                  ;	     separator in TIME before hundredths field.
 22948                                  ;
 22949                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22950                                  ;			strings as keywords.
 22951                                  ;
 22952                                  ;***********************************************************************
 22953                                  
 22954                                  ;IF FarSW				;AN000;(Check if need far return)
 22955                                  ;SysParse proc far			;AN000;
 22956                                  ;ELSE					;AN000;
 22957                                  ;SysParse proc near			;AN000;
 22958                                  ;ENDIF					;AN000;(of FarSW)
 22959                                  
 22960                                  ; 27/03/2019 - Retro DOS v4.0
 22961                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22962                                  
 22963                                  ; 25/10/2022 - Retro DOS v4.0
 22964                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22965                                  
 22966                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 22967                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 22968                                  
 22969                                  SysParse:
 22970                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 22971                                  	; dx = 0
 22972 000014BB 1E                      	push	ds ; *!*
 22973 000014BC 0E                      	push	cs
 22974 000014BD 1F                      	pop	ds 
 22975                                  
 22976                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22977                                  	;cld				;AN000; confirm forward direction
 22978                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22979                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22980                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22981                                  	;
 22982                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22983                                  
 22984                                  	; 06/09/2023
 22985 000014BE 8916[2214]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 22986 000014C2 FC                      	cld				;AN000; confirm forward direction
 22987 000014C3 890E[1514]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 22988 000014C7 8916[1714]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 22989 000014CB 8916[2A14]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 22990 000014CF 8916[1B14]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 22991                                  
 22992                                  ;M029 -- Begin changes
 22993                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22994                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22995                                  ;corrupts this table but does not corrupt the checksum region will leave
 22996                                  ;command.com parsing in an inconsistent state.
 22997                                  ; NB: The special characters string has been hardcoded here. If any change
 22998                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22999                                  
 23000                                  ;IF FileSW + DrvSW
 23001                                  	;mov	word [cs:_$P_FileSp_Char], ']['
 23002                                  	;mov	word [cs:_$P_FileSp_Char+2], '<|'
 23003                                  	;mov	word [cs:_$P_FileSp_Char+4], '+>'
 23004                                  	;mov 	word [cs:_$P_FileSp_Char+6], ';='
 23005                                  
 23006                                  	; 06/09/2023
 23007 000014D3 C706[B114]5D5B          	mov	word [_$P_FileSp_Char], ']['
 23008 000014D9 C706[B314]3C7C          	mov	word [_$P_FileSp_Char+2], '<|'
 23009 000014DF C706[B514]2B3E          	mov	word [_$P_FileSp_Char+4], '+>'
 23010 000014E5 C706[B714]3B3D          	mov 	word [_$P_FileSp_Char+6], ';='
 23011                                  ;ENDIF
 23012                                  	; 06/09/2023
 23013 000014EB 1F                      	pop	ds ; *!*
 23014                                  
 23015                                  ;M029 -- End of changes
 23016                                  
 23017 000014EC E88106                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 23018 000014EF 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 23019                                  ;--------------------------- End of Line
 23020 000014F1 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 23021 000014F4 53                      	push	bx			;AN000;
 23022                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 23023                                  					;AN000; Get the PARMSX address to
 23024 000014F5 268B1D                  	mov	bx,[es:di]
 23025                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 23026                                  					;AN000; check ORDINAL to see if the minimum
 23027 000014F8 263A0F                  	cmp	cl,[es:bx]	
 23028 000014FB 7303                    	jae	short _$P_Fin		;AN000; positional found.
 23029                                  
 23030 000014FD B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 23031                                  _$P_Fin: 				;AN000;
 23032 00001500 5B                      	pop	bx			;AN000;
 23033 00001501 E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 23034                                  ;---------------------------
 23035                                  _$P_Start:				;AN000;
 23036 00001504 2E8936[2414]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 23037 00001509 53                      	push	bx			;AN000; quoted string or file spec.
 23038 0000150A 57                      	push	di			;AN000;
 23039 0000150B 55                      	push	bp			;AN000;
 23040                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 23041                                  	; 02/11/2022
 23042                                  	;lea	bx,[_$P_STRING_BUF]
 23043                                  	; 07/09/2023
 23044 0000150C BB[2C14]                	mov	bx,_$P_STRING_BUF
 23045 0000150F 2EF606[2314]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 23046 00001515 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 23047                                  
 23048                                  _$P_Pack_Loop:				;AN000;
 23049 00001517 AC                      	lodsb				;AN000; Pick a operand from buffer
 23050 00001518 E8FA06                  	call	_$P_Chk_Switch		;AN000; Check switch character
 23051 0000151B 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 23052                                  
 23053 0000151D E87206                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 23054 00001520 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 23055                                  
 23056 00001522 E8A206                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 23057 00001525 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 23058                                  
 23059 00001527 2EF606[2314]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 23060                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 23061 0000152D 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 23062                                  
 23063 0000152F E83E06                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 23064 00001532 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 23065                                  
 23066                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 23067 00001534 2EF606[2314]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 23068 0000153A 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 23069                                  
 23070 0000153C 4E                      	dec	si			;AN000; (tm08)
 23071 0000153D EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 23072                                  
 23073                                  _$P_PL01:				;AN000;
 23074 0000153F 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 23075 00001542 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 23076 00001544 7506                    	jne	short _$P_PL00 		;AN000; then
 23077                                  
 23078 00001546 2E800E[2314]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 23079                                  _$P_PL00:				;AN000;
 23080 0000154C 43                      	inc	bx			;AN000; ready to see next byte
 23081 0000154D E8DE06                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 23082 00001550 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 23083                                  
 23084 00001552 AC                      	lodsb				;AN000; if yes, store
 23085 00001553 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 23086 00001556 43                      	inc	bx			;AN000; update pointer
 23087 00001557 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 23088                                  
 23089                                  _$P_Pack_End_BY_EOL:			;AN000;
 23090 00001559 4E                      	dec	si			;AN000; backup si pointer
 23091                                  _$P_Pack_End:				;AN000;
 23092 0000155A 2E8936[1914]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 23093                                  	; 07/09/2023
 23094                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 23095 0000155F 30E4                    	xor	ah,ah ; 0 ; *
 23096 00001561 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 23097                                  	;
 23098 00001564 2E891E[2814]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 23099                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 23100 00001569 268B1D                  	mov	bx,[es:di]
 23101                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 23102                                  	; 02/11/2022
 23103                                  	;lea	si,[_$P_STRING_BUF]
 23104                                  	; 07/09/2023
 23105 0000156C BE[2C14]                	mov	si,_$P_STRING_BUF
 23106 0000156F 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 23107 00001573 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 23108                                  
 23109 00001575 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 23110 00001579 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 23111                                  
 23112 0000157B 2EF606[2314]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 23113 00001581 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 23114                                  
 23115                                  _$P_Positional_Manager:			;AN000; else process as positional
 23116 00001583 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23117                                  	; 07/09/2023
 23118                                  	;xor	ah,ah			;AN000; ax = maxp
 23119 00001587 2E3906[1514]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 23120 0000158C 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 23121                                  
 23122 0000158E 2EA1[1514]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 23123 00001592 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 23124 00001594 43                      	inc	bx			;AC035; add '2' to
 23125 00001595 43                      	inc	bx			;AC035;  BX reg
 23126                                  					;AN000; now bx points to 1st CONTROL
 23127 00001596 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 23128 00001598 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 23129 0000159B E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 23130 0000159E EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23131                                  
 23132                                  _$P_Too_Many_Error:			;AN000;
 23133 000015A0 2EC706[1714]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 23134 000015A7 EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23135                                  
 23136                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 23137                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 23138                                  get_maxp:
 23139                                  	;mov	al,[es:bx+1]
 23140 000015A9 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23141                                  	; 07/09/2023
 23142                                  	; ah=0 ; *
 23143                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 23144 000015AD 30ED                    	xor	ch,ch ; **
 23145 000015AF 40                      	inc	ax			;AN000;
 23146 000015B0 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23147 000015B2 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23148 000015B4 C3                      	retn
 23149                                  
 23150                                  _$P_SW_Manager:				;AN000;
 23151                                  	; 07/09/2023
 23152                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23153                                  	;xor	ah,ah			;AN000; ax = maxp
 23154                                  	;inc	ax			;AN000;
 23155                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23156                                  	;add	bx,ax			;AN000; now bx points to maxs
 23157 000015B5 E8F1FF                  	call	get_maxp ; 07/09/2023
 23158                                  
 23159 000015B8 268A0F                  	mov	cl,[es:bx]		;AN000;
 23160                                  	; 07/09/2023
 23161                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 23162                                  	;or	cx,cx			;AN000; at least one switch ?
 23163                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 23164                                  	; 07/07/2023
 23165 000015BB E30F                    	jcxz	_$P_SW_Not_Found	; no
 23166                                  
 23167 000015BD 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 23168                                  
 23169                                  _$P_SW_Mgr_Loop: 			;AN000;
 23170 000015BE 53                      	push	bx			;AN000;
 23171 000015BF 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 23172 000015C2 E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 23173 000015C5 5B                      	pop	bx			;AN000;
 23174 000015C6 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 23175                                  
 23176 000015C8 43                      	inc	bx			;AC035; add '2' to
 23177 000015C9 43                      	inc	bx			;AC035;  BX reg
 23178                                  					;AN000; else bx points to the next CONTROL
 23179 000015CA E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 23180                                  
 23181                                  _$P_SW_Not_Found:			;AN000;
 23182 000015CC 2EC706[1714]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 23183 000015D3 EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 23184                                  
 23185                                  _$P_Key_Manager: 			;AN000;
 23186                                  	; 07/09/2023
 23187                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23188                                  	;xor	ah,ah			;AN000; ax = maxp
 23189                                  	;inc	ax			;AN000;
 23190                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23191                                  	;add	bx,ax			;AN000; now bx points to maxs
 23192 000015D5 E8D1FF                  	call	get_maxp ; 07/09/2023
 23193                                  	
 23194 000015D8 268A07                  	mov	al,[es:bx]		;AN000;
 23195 000015DB 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 23196 000015DD D1E0                    	shl	ax,1			;AN000;
 23197 000015DF 40                      	inc	ax			;AN000; ax = ax*2+1
 23198 000015E0 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 23199 000015E2 268A0F                  	mov	cl,[es:bx]		;AN000;
 23200                                  	; 07/09/2023
 23201                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 23202                                  	;or	cx,cx			;AN000; at least one keyword ?
 23203                                  	;jz	short _$P_Key_Not_Found	;AN000;
 23204                                  	; 07/07/2023
 23205 000015E5 E305                    	jcxz	_$P_Key_Not_Found	; no
 23206                                  
 23207 000015E7 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 23208                                  
 23209                                  _$P_Key_Mgr_Loop:			;AN000;
 23210                                  	; 07/09/2023
 23211                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 23212                                  	; (always returns with cf=1)
 23213                                  	;push	bx			;AN000;
 23214                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 23215                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 23216                                  	;pop	bx			;AN000;
 23217                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 23218                                  	; 07/09/2023
 23219                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 23220                                  
 23221 000015E8 43                      	inc	bx			;AC035; add '2' to
 23222 000015E9 43                      	inc	bx			;AC035;  BX reg
 23223                                  					;AN000; else bx points to the next CONTROL
 23224 000015EA E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 23225                                  
 23226                                  _$P_Key_Not_Found:			;AN000;
 23227 000015EC 2EC706[1714]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 23228                                  _$P_Return_to_Caller:			;AN000;
 23229 000015F3 5D                      	pop	bp			;AN000;
 23230 000015F4 5F                      	pop	di			;AN000;
 23231 000015F5 5B                      	pop	bx			;AN000;
 23232 000015F6 2E8B0E[1514]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 23233 000015FB 2EA1[1714]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 23234 000015FF 2E8B36[1914]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 23235 00001604 2E8B16[1B14]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 23236 00001609 2E8A1E[1D14]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 23237                                  _$P_Single_Exit: 			;AN000;
 23238 0000160E F8                      	clc				;AN000;
 23239 0000160F C3                      	retn				;AN000;
 23240                                  
 23241                                  ;***********************************************************************
 23242                                  ; _$P_Chk_Pos_Control
 23243                                  ;
 23244                                  ; Function: Parse CONTROL block for a positional
 23245                                  ;
 23246                                  ; Input:     ES:BX -> CONTROL block
 23247                                  ;	     cs:SI -> _$P_STRING_BUF
 23248                                  ;
 23249                                  ; Output:    None
 23250                                  ;
 23251                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23252                                  ;
 23253                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23254                                  ;***********************************************************************
 23255                                  
 23256                                  _$P_Chk_Pos_Control:
 23257 00001610 50                      	push	ax			;AN000;
 23258                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23259 00001611 268B07                  	mov	ax,[es:bx]
 23260                                  	; 12/12/2022
 23261 00001614 A802                    	test	al,_$P_Repeat
 23262                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23263 00001616 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23264                                  
 23265 00001618 2EFF06[1514]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23266                                  _$P_CPC00:				;AN000;
 23267 0000161D 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23268 00001621 7517                    	jne	short _$P_CPC01		;AN000;
 23269                                  
 23270                                  	; 12/12/2022
 23271 00001623 A801                    	test	al,_$P_Optional
 23272                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 23273 00001625 7509                    	jnz	short _$P_CPC02		;AN000;
 23274                                  
 23275 00001627 2EC706[1714]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 23276 0000162E EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 23277                                  
 23278                                  _$P_CPC02:				;AN000;
 23279 00001630 50                      	push	ax			;AN000;
 23280                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 23281                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 23282                                  	; 14/08/2023
 23283 00001631 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23284 00001634 E89600                  	call	_$P_Fill_Result		;AN000;
 23285 00001637 58                      	pop	ax			;AN000;
 23286 00001638 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 23287                                  
 23288                                  _$P_CPC01:				;AN000;
 23289 0000163A E81101                  	call	_$P_Check_Match_Flags	;AN000;
 23290                                  _$P_CPC_Exit:				;AN000;
 23291 0000163D 58                      	pop	ax			;AN000;
 23292 0000163E C3                      	retn				;AN000;
 23293                                  
 23294                                  ;***********************************************************************
 23295                                  ; _$P_Chk_Key_Control
 23296                                  ;
 23297                                  ; Function: Parse CONTROL block for a keyword
 23298                                  ;
 23299                                  ; Input:     ES:BX -> CONTROL block
 23300                                  ;	     cs:SI -> _$P_STRING_BUF
 23301                                  ;
 23302                                  ; Output:    CY = 1 : not match
 23303                                  ;
 23304                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23305                                  ;
 23306                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23307                                  ;***********************************************************************
 23308                                  
 23309                                  ; 07/09/2023
 23310                                  ;_$P_Chk_Key_Control:
 23311                                  ;	stc				;AN000; this logic works when the KeySW
 23312                                  ;	retn				;AN000; is reset.
 23313                                  
 23314                                  ;***********************************************************************
 23315                                  ; _$P_Search_KEYorSW:
 23316                                  ;
 23317                                  ; Function: Seach specified keyword or switch from CONTROL
 23318                                  ;
 23319                                  ; Input:     ES:BX -> CONTROL block
 23320                                  ;	     cs:SI -> _$P_STRING_BUF
 23321                                  ;
 23322                                  ; Output:    CY = 1 : not match
 23323                                  ;
 23324                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 23325                                  ;***********************************************************************
 23326                                  
 23327                                  	; 25/10/2022 - Retro DOS v4.0
 23328                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 23329                                  
 23330                                  _$P_Search_KEYorSW:			;AN000;
 23331 0000163F 55                      	push	bp			;AN000;
 23332 00001640 51                      	push	cx			;AN000;
 23333 00001641 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 23334 00001645 30ED                    	xor	ch,ch			;AN000; and set it to cx
 23335                                  	;or	cx,cx			;AN000; No synonyms specified ?
 23336                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 23337                                  	; 14/08/2023
 23338 00001647 E30D                    	jcxz	_$P_KEYorSW_Not_Found
 23339                                  
 23340                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 23341                                  	; 25/10/2022
 23342 00001649 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 23343                                  	;lea	bp,[bx+9]
 23344                                  _$P_KEYorSW_Loop:			;AN000;
 23345 0000164C E8BE03                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 23346 0000164F 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 23347                                  
 23348 00001651 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 23349 00001654 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 23350                                  _$P_KEYorSW_Not_Found:			;AN000;
 23351 00001656 F9                      	stc				;AN000; indicate not found in synonym list
 23352 00001657 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 23353                                  
 23354                                  _$P_KEYorSW_Found:			;AN000;
 23355 00001659 2E892E[2A14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 23356 0000165E F8                      	clc				;AN000; indicate found
 23357                                  _$P_KEYorSW_Exit:			;AN000;
 23358 0000165F 59                      	pop	cx			;AN000;
 23359 00001660 5D                      	pop	bp			;AN000;
 23360 00001661 C3                      	retn				;AN000;
 23361                                   
 23362                                  ;***********************************************************************
 23363                                  ; _$P_MoveBP_NUL
 23364                                  ;***********************************************************************
 23365                                  
 23366                                  _$P_MoveBP_NUL:
 23367                                  _$P_MBP_Loop:				;AN000;
 23368                                  	; 11/12/2022
 23369 00001662 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 23370                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 23371                                  	; (SYSINIT:18DBh)
 23372                                   	;cmp     byte [es:bp+0],0
 23373 00001667 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 23374                                  
 23375 00001669 45                      	inc	bp			;AN000; until
 23376 0000166A EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 23377                                  
 23378                                  _$P_MBP_Exit:				;AN000;
 23379 0000166C 45                      	inc	bp			;AN000; bp points to next to NULL
 23380 0000166D C3                      	retn				;AN000;
 23381                                  
 23382                                  ;***********************************************************************
 23383                                  ; _$P_Chk_SW_Control
 23384                                  ;
 23385                                  ; Function: Parse CONTROL block for a switch
 23386                                  ;
 23387                                  ; Input:     ES:BX -> CONTROL block
 23388                                  ;	     cs:SI -> _$P_STRING_BUF
 23389                                  ;
 23390                                  ; Output:    CY = 1 : not match
 23391                                  ;
 23392                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23393                                  ;
 23394                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23395                                  ;***********************************************************************
 23396                                  
 23397                                  _$P_Chk_SW_Control:
 23398                                  
 23399                                  ;IF SwSW				;AN000;(Check if switch is supported)
 23400                                  	;or	byte [cs:_$P_Flags+1],10h
 23401 0000166E 2E800E[2314]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23402 00001674 E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23403 00001677 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23404                                  
 23405                                  	;and	[cs:_$P_Flags+],0EFh
 23406 00001679 2E8026[2314]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23407                                  					;AC034; reset the indicator previously set
 23408 0000167F 50                      	push	ax			;AN000; 	      /switch:
 23409 00001680 2EA1[2614]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23410 00001684 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23411 00001686 2E0106[2414]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23412 0000168B 58                      	pop	ax			;AN000;
 23413                                  
 23414 0000168C 2E8B36[2614]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23415 00001691 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23416 00001695 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23417                                  
 23418 00001697 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23419 0000169C 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23420                                  
 23421 0000169E 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23422 000016A5 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23423                                  
 23424                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23425                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23426 000016A7 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23427 000016AB 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23428                                  
 23429                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23430                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23431                                  	;test	word [es:bx],1
 23432                                  	; 12/12/2022
 23433                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23434 000016AD 26F60701                	test	byte [es:bx],_$P_Optional
 23435 000016B1 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23436                                  
 23437 000016B3 2EC706[1714]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23438 000016BA EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23439                                  
 23440                                  _$P_CSW00:				;AN000;
 23441 000016BC E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23442 000016BF F8                      	clc				;AN000; indicate match
 23443                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23444                                  	; 12/12/2022
 23445 000016C0 C3                      	retn
 23446                                  
 23447                                  _$P_Chk_SW_Err0: 			;AN000;
 23448 000016C1 F9                      	stc				;AN000; not found in switch synonym list
 23449                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23450                                  	; 12/12/2022
 23451 000016C2 C3                      	retn	
 23452                                  
 23453                                  _$P_Chk_SW_Exit: 			;AN000;
 23454 000016C3 50                      	push	ax			;AN000;
 23455                                  	;mov	al,_$P_String		;AN000;
 23456                                  	;mov	ah,_$P_No_Tag		;AN000;
 23457                                  	; 14/08/2023
 23458 000016C4 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23459 000016C7 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 23460 000016CA 58                      	pop	ax			;AN000;
 23461 000016CB F8                      	clc				;AN000;
 23462                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23463 000016CC C3                      	retn				;AN000;
 23464                                  ;ELSE					;AN000;(of IF SwSW)
 23465                                  ;	stc				;AN000; this logic works when the SwSW
 23466                                  ;	retn				;AN000; is reset.
 23467                                  
 23468                                  ;***********************************************************************
 23469                                  ; _$P_Fill_Result
 23470                                  ;
 23471                                  ; Function: Fill the result buffer
 23472                                  ;
 23473                                  ; Input:    AH = Item tag
 23474                                  ;	    AL = type
 23475                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23476                                  ;		  AL = 2: DX has index(offset) into value list
 23477                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23478                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23479                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23480                                  ;			  amd CH has hundredths
 23481                                  ;		  AL = else: cs:SI points to returned string buffer
 23482                                  ;	    ES:BX -> CONTROL block
 23483                                  ;
 23484                                  ; Output:   None
 23485                                  ;
 23486                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23487                                  ;
 23488                                  ; Vars: _$P_DX(W)
 23489                                  ;***********************************************************************
 23490                                  
 23491                                  _$P_Fill_Result:
 23492 000016CD 57                      	push	di			;AN000;
 23493 000016CE 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23494                                  					;AN000; di points to result buffer
 23495 000016D2 2E893E[1B14]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23496                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23497                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23498                                  	; 07/09/2023
 23499                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 23500 000016D7 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 23501                                  
 23502 000016DA 50                      	push	ax			;AN000;
 23503 000016DB 2EA1[2A14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23504 000016DF 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23505                                  					;AN000;   then set it to the result
 23506 000016E3 58                      	pop	ax			;AN000;
 23507                                  _$P_RLT04:				;AN000;
 23508 000016E4 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23509 000016E6 750A                    	jne	short _$P_RLT00		;AN000;
 23510                                  
 23511                                  _$P_RLT02:				;AN000;
 23512 000016E8 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23513 000016EC 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23514 000016F0 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23515                                  
 23516                                  _$P_RLT00:				;AN000;
 23517 000016F2 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23518 000016F4 7506                    	jne	short _$P_RLT01		;AN000;
 23519                                  
 23520 000016F6 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 23521                                  					;AN000; then store list index
 23522 000016FA EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23523                                  
 23524                                  _$P_RLT01:				;AN000;
 23525 000016FC 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23526 000016FE 74E8                    	je	short _$P_RLT02		;AN000;
 23527                                  
 23528 00001700 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23529 00001702 74E4                    	je	short _$P_RLT02		;AN000;
 23530                                  
 23531 00001704 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23532 00001706 7506                    	jne	short _$P_RLT03		;AN000;
 23533                                  
 23534 00001708 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23535 0000170C EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23536                                  
 23537                                  _$P_RLT03:				;AN000;
 23538 0000170E 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23539 00001710 750F                    	jne	short _$P_RLT05		;AN000;
 23540                                  
 23541 00001712 2EA1[2414]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23542 00001716 40                      	inc	ax			;AN000; skip left Parentheses
 23543 00001717 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23544 0000171B 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23545 0000171F EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23546                                  
 23547                                  _$P_RLT05:				;AN000;
 23548                                  ;------------------------  AL = 3, 5, or 9
 23549 00001721 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23550                                  					;AN000; store offset of STRING_BUF
 23551 00001725 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23552                                  					;AN031; store segment of STRING_BUF
 23553 00001729 50                      	push	ax			;AN000;
 23554 0000172A 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23555                                  					;AN000; need CAPS by file table?
 23556 0000172F 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23557                                  
 23558 00001731 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23559 00001733 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23560                                  
 23561                                  _$P_RLT_CAP00:				;AN000;
 23562 00001735 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23563                                  					;AN000; need CAPS by char table ?
 23564 0000173A 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23565                                  
 23566 0000173C B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23567                                  _$P_RLT_CAP02:				;AN000;
 23568 0000173E E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23569                                  _$P_RLT_CAP01:				;AN000;
 23570 00001741 58                      	pop	ax			;AN000;
 23571 00001742 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23572                                  					;AN000; removing colon at end ?
 23573 00001747 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23574                                  
 23575 00001749 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23576                                  _$P_RLT_Exit:				;AN000;
 23577 0000174C 5F                      	pop	di			;AN000;
 23578 0000174D C3                      	retn				;AN000;
 23579                                  
 23580                                  ;***********************************************************************
 23581                                  ; _$P_Check_Match_Flags
 23582                                  ;
 23583                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23584                                  ;	     result buffer
 23585                                  ;
 23586                                  ;	    Check for types in this order:
 23587                                  ;		Complex
 23588                                  ;		Date
 23589                                  ;		Time
 23590                                  ;		Drive
 23591                                  ;		Filespec
 23592                                  ;		Quoted String
 23593                                  ;		Simple String
 23594                                  ;
 23595                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23596                                  ;	     ES:BX -> CONTROL block
 23597                                  ;
 23598                                  ; Output:    None
 23599                                  ;
 23600                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23601                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23602                                  ;	     _$P_Drive_Format
 23603                                  ;***********************************************************************
 23604                                  
 23605                                  	; 25/10/2022 - Retro DOS v4.0
 23606                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23607                                  
 23608                                  	; 12/12/2022
 23609                                  _$P_Check_Match_Flags:
 23610 0000174E 2EC606[BA14]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23611                                  					;AN033;AC034;; clear filespec error flag.
 23612 00001754 50                      	push	ax			;AN000;
 23613                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23614 00001755 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23615 00001758 09C0                    	or	ax,ax			;AC035; test ax for zero
 23616 0000175A 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 23617 0000175C 50                      	push	ax			;AN000; (tm12)
 23618 0000175D 53                      	push	bx			;AN000; (tm12)
 23619 0000175E 52                      	push	dx			;AN000; (tm12)
 23620 0000175F 57                      	push	di			;AN000; (tm12)
 23621 00001760 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23622                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 23623                                  	;mov	al,_$P_String		;AN000; (tm12)
 23624                                  	; 14/08/2023
 23625 00001767 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23626 0000176A E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23627 0000176D 5F                      	pop	di			;AN000; (tm12)
 23628 0000176E 5A                      	pop	dx			;AN000; (tm12)
 23629 0000176F 5B                      	pop	bx			;AN000; (tm12)
 23630 00001770 58                      	pop	ax			;AN000; (tm12)
 23631                                  	; 12/12/2022
 23632                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23633                                  	; 12/12/2022
 23634                                  ;_$P_Mat: 				;AN000; (tm12)
 23635                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23636                                  _$P_Bridge:
 23637 00001771 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23638                                  	
 23639                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23640                                  	; (SYSINIT:19F9h)
 23641                                  	; 12/12/2022
 23642                                  	;nop	; db 90h
 23643                                  
 23644                                  ; 12/12/2022
 23645                                  _$P_Mat:
 23646                                  _$P_Match03:				;AN000;
 23647                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 23648                                  	; 14/08/2023
 23649 00001773 F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 23650 00001776 7412                    	jz	short _$P_Match04	;AN000;
 23651                                  
 23652 00001778 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23653 0000177F E81E01                  	call	_$P_Value		;AN000; do process
 23654 00001782 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23655 00001788 7557                    	jne	short _$P_Match_Exit	;AN000;
 23656                                  _$P_Match04:				;AN000;
 23657                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 23658                                  	; 14/08/2023
 23659 0000178A F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 23660 0000178D 7412                    	jz	short _$P_Match05	;AN000;
 23661                                  
 23662 0000178F 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23663 00001796 E8E300                  	call	_$P_SValue		;AN000; do process
 23664 00001799 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23665 0000179F 7540                    	jne	short _$P_Match_Exit	;AN000;
 23666                                  _$P_Match05:				;AN000;
 23667                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 23668                                  	; 14/08/2023
 23669 000017A1 F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 23670 000017A4 7415                    	jz	short _$P_Match06	;AN000;
 23671                                  
 23672 000017A6 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23673 000017AD E8FB02                  	call	_$P_File_Format		;AN000; 1st, call file format
 23674 000017B0 E87B03                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23675 000017B3 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23676 000017B9 7526                    	jne	short _$P_Match_Exit	;AN000;
 23677                                  _$P_Match06:				;AN000;
 23678                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 23679                                  	; 14/08/2023
 23680 000017BB F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 23681 000017BE 7412                    	jz	short _$P_Match07	;AN000;
 23682                                  
 23683 000017C0 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23684 000017C7 E8E102                  	call	_$P_File_Format		;AN000; do process
 23685 000017CA 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23686 000017D0 750F                    	jne	short _$P_Match_Exit	;AN000;
 23687                                  _$P_Match07:				;AN000;
 23688                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 23689                                  	; 14/08/2023
 23690 000017D2 F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 23691 000017D5 740A                    	jz	short _$P_Match09	;AN000;
 23692                                  
 23693 000017D7 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23694 000017DE E8C301                  	call	_$P_Simple_String	;AN000; do process
 23695                                  _$P_Match09:				;AN000;
 23696                                  _$P_Match_Exit:				;AN000;
 23697 000017E1 2E833E[BA14]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23698 000017E7 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23699 000017E9 2E833E[1714]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23700 000017EF 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23701 000017F1 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23702                                  _$P_Match2_Exit: 			;AN033;
 23703 000017F8 58                      	pop	ax			;AN000;
 23704 000017F9 C3                      	retn				;AN000;
 23705                                  
 23706                                  ;***********************************************************************
 23707                                  ; _$P_Remove_Colon;
 23708                                  ;
 23709                                  ; Function: Remove colon at end
 23710                                  ;
 23711                                  ; Input:    cs:SI points to string buffer to be examineed
 23712                                  ;
 23713                                  ; Output:   None
 23714                                  ;
 23715                                  ; Use:	_$P_Chk_DBCS
 23716                                  ;***********************************************************************
 23717                                  
 23718                                  _$P_Remove_Colon:
 23719 000017FA 50                      	push	ax			;AN000;
 23720 000017FB 56                      	push	si			;AN000;
 23721                                  _$P_RCOL_Loop:				;AN000;
 23722 000017FC 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23723 000017FF 08C0                    	or	al,al			;AN000; end of string ?
 23724 00001801 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23725                                  
 23726 00001803 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23727 00001805 750D                    	jne	short _$P_RCOL00	;AN000;
 23728                                  
 23729 00001807 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23730 0000180C 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23731                                  
 23732 0000180E 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23733 00001812 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23734                                  
 23735                                  _$P_RCOL00:				;AN000;
 23736 00001814 E81704                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23737 00001817 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23738                                  
 23739 00001819 46                      	inc	si			;AN000; if yes, skip trailing byte
 23740                                  _$P_RCOL01:				;AN000;
 23741 0000181A 46                      	inc	si			;AN000; si points to next byte
 23742 0000181B EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23743                                  
 23744                                  _$P_RCOL_Exit:				;AN000;
 23745 0000181D 5E                      	pop	si			;AN000;
 23746 0000181E 58                      	pop	ax			;AN000;
 23747 0000181F C3                      	retn				;AN000;
 23748                                  
 23749                                  ;***********************************************************************
 23750                                  ; _$P_Do_CAPS_String;
 23751                                  ;
 23752                                  ; Function: Perform capitalization along with the file case map table
 23753                                  ;	    or character case map table.
 23754                                  ;
 23755                                  ; Input:    AL = 2 : Use character table
 23756                                  ;	    AL = 4 : Use file table
 23757                                  ;	    cs:SI points to string buffer to be capitalized
 23758                                  ;
 23759                                  ; Output:   None
 23760                                  ;
 23761                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23762                                  ;***********************************************************************
 23763                                  
 23764                                  _$P_Do_CAPS_String:
 23765 00001820 56                      	push	si			;AN000;
 23766 00001821 52                      	push	dx			;AN000;
 23767 00001822 88C2                    	mov	dl,al			;AN000; save info id
 23768                                  
 23769                                  _$P_DCS_Loop:				;AN000;
 23770 00001824 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23771 00001827 E80404                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23772 0000182A 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23773                                  
 23774 0000182C 08C0                    	or	al,al			;AN000; end of string ?
 23775 0000182E 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23776                                  
 23777 00001830 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23778 00001833 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23779 00001836 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23780                                  _$P_DCS00:				;AN000;
 23781 00001838 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23782                                  _$P_DCS01:				;AN000;
 23783 00001839 46                      	inc	si			;AN000; si point to next byte
 23784 0000183A EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23785                                  _$P_DCS_Exit:				;AN000;
 23786 0000183C 5A                      	pop	dx			;AN000;
 23787 0000183D 5E                      	pop	si			;AN000;
 23788 0000183E C3                      	retn
 23789                                  
 23790                                  ;***********************************************************************
 23791                                  ; _$P_Do_CAPS_Char;
 23792                                  ;
 23793                                  ; Function: Perform capitalization along with the file case map table
 23794                                  ;	    or character case map table.
 23795                                  ;
 23796                                  ; Input:    DL = 2 : Use character table
 23797                                  ;	    DL = 4 : Use file table
 23798                                  ;	    AL = character to be capitalized
 23799                                  ;
 23800                                  ; Output:   None
 23801                                  ;
 23802                                  ; Use:	INT 21h /w AH=65h
 23803                                  ;***********************************************************************
 23804                                  
 23805                                  _$P_Do_CAPS_Char:
 23806 0000183F 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23807 00001841 730B                    	jae	short _$P_DCC_Go	;AN000;
 23808                                  
 23809 00001843 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23810 00001845 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23811                                  
 23812 00001847 3C7A                    	cmp	al,"z"                  ;AN000;
 23813 00001849 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23814                                  
 23815 0000184B 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23816                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 23817                                  	; 14/08/2023
 23818 0000184D C3                      	retn
 23819                                  
 23820                                  _$P_DCC_Go:				;AN000;
 23821 0000184E 53                      	push	bx			;AN000;
 23822 0000184F 06                      	push	es			;AN000;
 23823 00001850 57                      	push	di			;AN000;
 23824                                  
 23825                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23826                                  	;lea	di,[_$P_Char_CAP_Ptr]
 23827                                  	; 07/09/2023
 23828 00001851 BF[AC14]                	mov	di,_$P_Char_CAP_Ptr
 23829                                  _$P_DCC00:				;AN000;
 23830 00001854 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23831 00001857 7415                    	je	short _$P_DCC01		;AN000; if no,
 23832                                  
 23833                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23834                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23835                                  ; call, regardless of what base register is currently be defined as cs.
 23836                                  
 23837 00001859 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23838 0000185A 51                      	push	cx			;AN000;
 23839 0000185B 52                      	push	dx			;AN000;
 23840                                  
 23841 0000185C 0E                      	push	cs			;AC036; pass current base seg into
 23842                                  					;(Note: this used to push CS.  BUG...
 23843 0000185D 07                      	pop	es			;AN000;   ES reg, required for
 23844                                  					;get extended country information
 23845                                  	;mov	al,dl ; function	;AN000; upper case table
 23846                                  	; 14/08/2023
 23847 0000185E 92                      	xchg	ax,dx
 23848 0000185F B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 23849 00001861 BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 23850 00001864 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 23851                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23852                                  	; 14/08/2023
 23853 00001867 89DA                    	mov	dx,bx ; 0FFFFh
 23854                                  					;DI already set to point to buffer
 23855 00001869 CD21                    	int	21h			;AN000; es:di point to buffer that
 23856                                  					;now has been filled in with info
 23857 0000186B 5A                      	pop	dx			;AN000;
 23858 0000186C 59                      	pop	cx			;AN000;
 23859 0000186D 58                      	pop	ax			;AN000;
 23860                                  
 23861                                  _$P_DCC01:				;AN000;
 23862                                  
 23863                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23864                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23865                                  ; regardless of which base reg is currently the cs reg.
 23866                                  
 23867                                  	; 14/08/2023
 23868                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23869                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23870 0000186E 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 23871 00001872 43                      	inc	bx			;AC035; add '2' to
 23872 00001873 43                      	inc	bx			;AC035;  BX reg
 23873                                  					;AN000; skip length field
 23874 00001874 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23875                                  	;xlat	es:[bx] 		;AN000; perform case map
 23876 00001876 26                      	es
 23877 00001877 D7                      	xlat
 23878 00001878 5F                      	pop	di			;AN000;
 23879 00001879 07                      	pop	es			;AN000;
 23880 0000187A 5B                      	pop	bx			;AN000;
 23881                                  _$P_CAPS_Ret:				;AN000;
 23882 0000187B C3                      	retn				;AN000;
 23883                                  
 23884                                  ;***********************************************************************
 23885                                  ; _$P_Value / _$P_SValue
 23886                                  ;
 23887                                  ; Function:  Make 32bit value from cs:SI and see value list
 23888                                  ;	     and make result buffer.
 23889                                  ;	     _$P_SValue is an entry point for the signed value
 23890                                  ;	     and this will simply call _$P_Value after the handling
 23891                                  ;	     of the sign character, "+" or "-"
 23892                                  ;
 23893                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23894                                  ;	     ES:BX -> CONTROL block
 23895                                  ;
 23896                                  ; Output:    None
 23897                                  ;
 23898                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23899                                  ;
 23900                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23901                                  ;***********************************************************************
 23902                                  
 23903                                  	; 26/10/2022 - Retro DOS v4.0
 23904                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23905                                  
 23906                                  _$P_SValue:				;AN000; when signed value here
 23907 0000187C 50                      	push	ax			;AN000;
 23908 0000187D 2E800E[2314]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23909 00001883 2E8026[2314]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23910 00001889 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23911 0000188C 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23912 0000188E 740A                    	je	short _$P_SVal00	;AN000;
 23913                                  
 23914 00001890 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23915 00001892 7507                    	jne	short _$P_Sval01	;AN000; else
 23916                                  
 23917 00001894 2E800E[2314]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23918                                  _$P_SVal00:				;AN000;
 23919 0000189A 46                      	inc	si			;AN000; skip sign char
 23920                                  _$P_Sval01:				;AN000;
 23921 0000189B E80200                  	call	_$P_Value		;AN000; and process value
 23922 0000189E 58                      	pop	ax			;AN000;
 23923 0000189F C3                      	retn
 23924                                  
 23925                                  ;***********************************************************************
 23926                                  
 23927                                  	; 26/10/2022
 23928                                  _$P_Value:				;AN000;
 23929 000018A0 50                      	push	ax			;AN000;
 23930 000018A1 51                      	push	cx			;AN000;
 23931 000018A2 52                      	push	dx			;AN000;
 23932 000018A3 56                      	push	si			;AN000;
 23933 000018A4 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23934 000018A6 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23935 000018A8 53                      	push	bx			;AN000; save control pointer
 23936                                  _$P_Value_Loop:				;AN000;
 23937 000018A9 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23938 000018AC 08C0                    	or	al,al			;AN000; end of line ?
 23939 000018AE 7442                    	jz	short _$P_Value00	;AN000;
 23940                                  
 23941 000018B0 E8E600                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23942 000018B3 7239                    	jc	short _$P_Value_Err0	;AN000;
 23943                                  
 23944 000018B5 30E4                    	xor	ah,ah			;AN000;
 23945 000018B7 89C5                    	mov	bp,ax			;AN000; save binary number
 23946 000018B9 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23947 000018BB D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23948 000018BD E8C700                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23949 000018C0 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23950                                  
 23951 000018C2 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23952 000018C4 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23953 000018C6 D1E2                    	shl	dx,1			;AN000; to have 4*x
 23954 000018C8 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23955 000018CA E8BA00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23956 000018CD 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23957                                  
 23958 000018CF D1E2                    	shl	dx,1			;AN000; to have 8*x
 23959 000018D1 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23960 000018D3 E8B100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23961 000018D6 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23962                                  
 23963 000018D8 01DA                    	add	dx,bx			;AN000; now have 10*x
 23964 000018DA 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23965 000018DC E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23966 000018DF 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23967                                  
 23968 000018E1 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23969 000018E3 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23970 000018E6 E89E00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23971 000018E9 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23972                                  
 23973 000018EB 46                      	inc	si			;AN000; update pointer
 23974 000018EC EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23975                                  ;
 23976                                  _$P_Value_Err0:				;AN000;
 23977 000018EE 5B                      	pop	bx			;AN000;
 23978 000018EF E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 23979                                  ;
 23980                                  _$P_Value00:				;AN000;
 23981 000018F2 5B                      	pop	bx			;AN000; restore control pointer
 23982 000018F3 2EF606[2314]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23983 000018F9 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23984                                  
 23985 000018FB F7D1                    	not	cx			;AN000; +
 23986 000018FD F7D2                    	not	dx			;AN000; |- Make 2's complement
 23987 000018FF 83C201                  	add	dx,1			;AN000; |
 23988 00001902 83D100                  	adc	cx,0			;AN000; +
 23989                                  
 23990                                  _$P_Value01:				;AN000; / nval = 0
 23991 00001905 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23992 00001909 268A04                  	mov	al,[es:si]		;AN000; get nval
 23993                                  	; 07/09/2023
 23994                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 23995                                  	;;*jne	short _$P_Value02	;AN000;
 23996                                  	;;* 07/07/2023
 23997                                  	;je	short _$P_Value05
 23998                                  	; 07/09/2023
 23999 0000190C 08C0                    	or	al,al
 24000 0000190E 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 24001                                  
 24002                                  	;mov	al,_$P_Number		;AN000; Set type
 24003                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24004                                  	; 07/07/2023
 24005                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24006                                  	;*jmp	short _$P_Value_Exit	;AN000;
 24007                                  
 24008                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 24009                                  	; (SYSINIT:1BA5h)
 24010                                  	; 12/12/2022
 24011                                  	;nop	; db  90h
 24012                                  
 24013                                  _$P_Value02:				;AN000; / nval = 1
 24014                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 24015                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 24016                                  ;(tm07) jne	short _$P_Value03	;AN000;
 24017                                  
 24018 00001910 46                      	inc	si			;AN000;
 24019 00001911 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 24020                                  	
 24021                                  	; 07/09/2023
 24022                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 24023                                  	;je	short _$P_Value03	;AN000; (tm07)
 24024 00001914 08C0                    	or	al,al
 24025 00001916 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 24026                                  
 24027 00001918 46                      	inc	si			;AN000; si points to 1st item_tag
 24028                                  _$P_Val02_Loop:				;AN000;
 24029 00001919 2EF606[2314]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 24030 0000191F 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 24031                                  
 24032 00001921 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 24033 00001925 7234                    	jb	short _$P_Val02_Next	;AN000;
 24034 00001927 7706                    	ja	short _$P_Val_In	;AN000;
 24035                                  
 24036 00001929 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 24037 0000192D 722C                    	jb	short _$P_Val02_Next	;AN000;
 24038                                  
 24039                                  _$P_Val_In:				;AN000;
 24040 0000192F 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 24041 00001933 7726                    	ja	short _$P_Val02_Next	;AN000;
 24042 00001935 7237                    	jb	short _$P_Val_Found	;AN000;
 24043                                  
 24044 00001937 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 24045 0000193B 771E                    	ja	short _$P_Val02_Next	;AN000;
 24046                                  
 24047 0000193D EB2F                    	jmp	short _$P_Val_Found	;AN000;
 24048                                  
 24049                                  _$P_Val02_Sign:				;AN000;
 24050 0000193F 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 24051 00001943 7C16                    	jl	short _$P_Val02_Next	;AN000;
 24052 00001945 7F06                    	jg	short _$P_SVal_In	;AN000;
 24053                                  
 24054 00001947 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 24055 0000194B 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 24056                                  
 24057                                  _$P_SVal_In:				;AN000;
 24058 0000194D 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 24059 00001951 7F08                    	jg	short _$P_Val02_Next	;AN000;
 24060                                  
 24061 00001953 7C19                    	jl	short _$P_Val_Found	;AN000;
 24062                                  
 24063 00001955 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 24064                                  	;jg	short _$P_Val02_Next	;AN000;
 24065                                  	;jmp	short _$P_Val_Found	;AN000;
 24066                                  	; 14/08/2023
 24067 00001959 7E13                    	jng	short _$P_Val_Found
 24068                                  
 24069                                  _$P_Val02_Next:				;AN000;
 24070 0000195B 83C609                  	add	si,_$P_Len_Range 	;AN000;
 24071 0000195E FEC8                    	dec	al			;AN000; loop nrng times in AL
 24072 00001960 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 24073                                  					; / Not found
 24074 00001962 2EC706[1714]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 24075                                  	;mov	al,_$P_Number		;AN000;
 24076                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24077                                  _$P_Value05:		;* 14/08/2023
 24078                                  	; 14/08/2023
 24079 00001969 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24080 0000196C EB11                    	jmp	short _$P_Value_Exit	;AN000;
 24081                                  
 24082                                  _$P_Val_Found:				;AN000;
 24083 0000196E B001                    	mov	al,_$P_Number		;AN000;
 24084 00001970 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 24085 00001973 EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 24086                                  
 24087                                  _$P_Value03:				;AN000; / nval = 2
 24088                                  
 24089                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 24090                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 24091                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 24092                                  ;(tm07) inc	si			;AN000;
 24093                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 24094                                  ;	mov	ah,$P_Len_Range 	;AN000;
 24095                                  ;	mul	ah			;AN000;  Skip nrng field
 24096                                  ;	inc	ax			;AN000;
 24097                                  ;	add	si,ax			;AN000; si points to nnval
 24098                                  ;	mov	al,es:[si]		;AN000; get nnval
 24099                                  ;	inc	si			;AN000; si points to 1st item_tag
 24100                                  ;$P_Val03_Loop:				;AN000;
 24101                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 24102                                  ;	jne	$P_Val03_Next		;AN000;
 24103                                  ;
 24104                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 24105                                  ;	je	$P_Val_Found		;AN000;
 24106                                  ;
 24107                                  ;$P_Val03_Next:				;AN000;
 24108                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 24109                                  ;	dec	al			;AN000; loop nval times in AL
 24110                                  ;	jne	$P_Val03_Loop		;AN000;
 24111                                  ;					;AN000; / Not found
 24112                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 24113                                  ;	mov	al,$P_Number		;AN000;
 24114                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 24115                                  ;	jmp	short $P_Value_Exit	;AN000;
 24116                                  ;
 24117                                  ;ENDIF					;AN000;(of Val2SW)
 24118                                  ;$P_Value04:
 24119                                  
 24120                                  _$P_Value_Err:				;AN000;
 24121 00001975 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24122                                  	;mov	al,_$P_String		;AN000; Set type
 24123                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24124                                  	; 14/08/2023
 24125 0000197C B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24126                                  _$P_Value_Exit:				;AN000;
 24127 0000197F E84BFD                  	call	_$P_Fill_Result		;AN000;
 24128 00001982 5E                      	pop	si			;AN000;
 24129 00001983 5A                      	pop	dx			;AN000;
 24130 00001984 59                      	pop	cx			;AN000;
 24131 00001985 58                      	pop	ax			;AN000;
 24132 00001986 C3                      	retn				;AN000;
 24133                                  
 24134                                  ; 28/03/2019 - Retro DOS v4.0
 24135                                  
 24136                                  ;***********************************************************************
 24137                                  ; _$P_Check_OVF
 24138                                  ;
 24139                                  ; Function:  Check if overflow is occurred with consideration of
 24140                                  ;	     signed or un-signed numeric value
 24141                                  ;
 24142                                  ; Input:     Flag register
 24143                                  ;
 24144                                  ; Output:    CY = 1  :	Overflow
 24145                                  ;
 24146                                  ; Vars:     _$P_Flags(R)
 24147                                  ;***********************************************************************
 24148                                  
 24149                                  	; 26/10/2022
 24150                                  _$P_Check_OVF:
 24151 00001987 9C                      	pushf				;AN000;
 24152 00001988 2EF606[2314]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 24153 0000198E 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 24154                                  
 24155 00001990 9D                      	popf				;AN000; by the CY bit
 24156 00001991 C3                      	retn				;AN000;
 24157                                  
 24158                                  _$P_COVF:				;AN000;
 24159 00001992 9D                      	popf				;AN000; else,
 24160 00001993 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 24161                                  
 24162 00001995 F8                      	clc				;AN000; indicate it with CY bit
 24163 00001996 C3                      	retn				;AN000; CY=0 means no overflow
 24164                                  
 24165                                  _$P_COVF00:				;AN000;
 24166                                  _$P_0099Err: ; 14/08/2023
 24167 00001997 F9                      	stc				;AN000; and CY=1 means overflow
 24168                                  _$P_0099Err2: ; 14/08/2023
 24169 00001998 C3                      	retn				;AN000;
 24170                                  
 24171                                  ;***********************************************************************
 24172                                  ; _$P_0099;
 24173                                  ;
 24174                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 24175                                  ;
 24176                                  ; Input:     AL = character code
 24177                                  ;
 24178                                  ; Output:    CY = 1 : AL is not number
 24179                                  ;	     CY = 0 : AL contains binary value
 24180                                  ;***********************************************************************
 24181                                  
 24182                                  _$P_0099:
 24183 00001999 3C30                    	cmp	al,"0"                  ;AN000;
 24184                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24185                                  	; 12/12/2022
 24186 0000199B 72FB                    	jb	short _$P_0099Err2  ; cf=1
 24187                                  
 24188 0000199D 3C39                    	cmp	al,"9"                  ;AN000;
 24189 0000199F 77F6                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24190                                  
 24191 000019A1 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 24192                                  	; 12/12/2022
 24193                                  	; cf=0	
 24194                                  	;clc				;AN000; indicate no error
 24195 000019A3 C3                      	retn				;AN000;
 24196                                  
 24197                                  	; 14/08/2023
 24198                                  ;_$P_0099Err:				;AN000;
 24199                                  ;	stc				;AN000; indicate error
 24200                                  ;_$P_0099Err2: ; 12/12/2022	
 24201                                  ;	retn				;AN000;
 24202                                  
 24203                                  ;***********************************************************************
 24204                                  ; _$P_Simple_String
 24205                                  ;
 24206                                  ; Function:  See value list for the simple string
 24207                                  ;	     and make result buffer.
 24208                                  ;
 24209                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24210                                  ;	     ES:BX -> CONTROL block
 24211                                  ;
 24212                                  ; Output:    None
 24213                                  ;
 24214                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 24215                                  ;
 24216                                  ; Vars: _$P_RC(W)
 24217                                  ;***********************************************************************
 24218                                  
 24219                                  _$P_Simple_String:
 24220 000019A4 50                      	push	ax			;AN000;
 24221 000019A5 53                      	push	bx			;AN000;
 24222 000019A6 52                      	push	dx			;AN000;
 24223 000019A7 57                      	push	di			;AN000;
 24224 000019A8 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 24225 000019AC 268A05                  	mov	al,[es:di]		;AN000; get nval
 24226 000019AF 08C0                    	or	al,al			;AN000; no value list ?
 24227 000019B1 7504                    	jnz	short _$P_Sim00		;AN000; then
 24228                                  
 24229 000019B3 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24230 000019B5 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 24231                                  
 24232                                  _$P_Sim00:				;AN000;
 24233                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 24234 000019B7 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 24235 000019B9 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 24236                                  
 24237 000019BB 47                      	inc	di			;AN000;
 24238 000019BC 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 24239 000019BF B409                    	mov	ah,_$P_Len_Range 	;AN000;
 24240 000019C1 F6E4                    	mul	ah			;AN000; Skip nrng field
 24241 000019C3 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 24242 000019C4 01C7                    	add	di,ax			;AN000; di points to nnval
 24243 000019C6 268A05                  	mov	al,[es:di]		;AN000; get nnval
 24244 000019C9 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 24245 000019CB F6E4                    	mul	ah			;AN000; Skip nnval field
 24246 000019CD 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 24247 000019CE 01C7                    	add	di,ax			;AN000; di points to nstrval
 24248 000019D0 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 24249 000019D3 47                      	inc	di			;AC035; add '2' to
 24250 000019D4 47                      	inc	di			;AC035;  DI reg
 24251                                  					;AN000; di points to 1st string in list
 24252                                  _$P_Sim_Loop:				;AN000;
 24253 000019D5 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 24254 000019D8 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 24255 000019DB 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 24256                                  
 24257 000019DD 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 24258 000019E0 FEC8                    	dec	al			;AN000; loop nstval times in AL
 24259 000019E2 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 24260                                  					;AN000; / Not found
 24261 000019E4 2EC706[1714]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 24262 000019EB B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24263 000019ED EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 24264                                  
 24265                                  _$P_Sim_Found:				;AN000;
 24266 000019EF 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 24267 000019F3 B002                    	mov	al,_$P_List_Idx		;AN000;
 24268 000019F5 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 24269 000019F8 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 24270                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 24271                                  _$P_Sim01:				;AN000;
 24272 000019FA 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24273 00001A01 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24274                                  _$P_Sim_Exit:				;AN000;
 24275 00001A03 B003                    	mov	al,_$P_String		;AN000; Set type
 24276                                  _$P_Sim_Exit0:				;AN000;
 24277 00001A05 E8C5FC                  	call	_$P_Fill_Result		;AN000;
 24278 00001A08 5F                      	pop	di			;AN000;
 24279 00001A09 5A                      	pop	dx			;AN000;
 24280 00001A0A 5B                      	pop	bx			;AN000;
 24281 00001A0B 58                      	pop	ax			;AN000;
 24282 00001A0C C3                      	retn				;AN000;
 24283                                  
 24284                                  ;***********************************************************************
 24285                                  ; _$P_String_Comp:
 24286                                  ;
 24287                                  ; Function:  Compare two string
 24288                                  ;
 24289                                  ; Input:     cs:SI -> 1st string
 24290                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 24291                                  ;	     ES:BX -> CONTROL block
 24292                                  ;
 24293                                  ; Output:    CY = 1 if not match
 24294                                  ;
 24295                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 24296                                  ;
 24297                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 24298                                  ;***********************************************************************
 24299                                  
 24300                                  _$P_String_Comp:
 24301 00001A0D 50                      	push	ax			;AN000;
 24302 00001A0E 55                      	push	bp			;AN000;
 24303 00001A0F 52                      	push	dx			;AN000;
 24304 00001A10 56                      	push	si			;AN000;
 24305 00001A11 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 24306                                  _$P_SCOM_Loop:				;AN000;
 24307 00001A13 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 24308 00001A16 E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 24309 00001A19 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 24310                                  
 24311 00001A1B E821FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 24312                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 24313 00001A1E 2EF606[2314]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 24314 00001A24 740D                    	jz	short _$P_SCOM04	;AN000;
 24315                                  
 24316 00001A26 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 24317 00001A28 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 24318                                  
 24319 00001A2A 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 24320 00001A2F 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 24321                                  
 24322 00001A31 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 24323                                  
 24324                                  _$P_SCOM04:				;AN000;
 24325 00001A33 2EF606[2314]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 24326 00001A39 740E                    	jz	short _$P_SCOM03	;AN000;
 24327                                  
 24328 00001A3B 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 24329 00001A3D 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 24330                                  
 24331                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24332                                  	;cmp	byte [es:bp+0],_$P_NULL
 24333                                  	; 11/12/2022
 24334 00001A3F 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 24335 00001A44 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 24336                                  
 24337                                  _$P_SCOM05:				;AN000;   found a match
 24338 00001A46 46                      	inc	si			;AN000; si points to just after "=" or ":"
 24339 00001A47 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 24340                                  
 24341                                  _$P_SCOM03:				;AN000;
 24342                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 24343                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24344                                  	;cmp	al,[es:bp+0]
 24345                                  	; 11/12/2022
 24346 00001A49 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 24347 00001A4D 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 24348                                  
 24349 00001A4F 08C0                    	or	al,al			;AN000; end of line
 24350 00001A51 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 24351                                  
 24352                                  	; 12/12/2022
 24353                                  	;inc	si			;AN000; update operand pointer
 24354                                  	;inc	bp			;AN000;    and synonym pointer
 24355                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24356 00001A53 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 24357                                  
 24358                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 24359                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24360                                  	;cmp	al,[es:bp+0]
 24361                                  	; 11/12/2022
 24362 00001A55 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 24363 00001A59 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 24364                                  
 24365 00001A5B 46                      	inc	si			;AN000; else, load next byte
 24366 00001A5C 2E8A04                  	mov	al,[cs:si]		;AN000; and
 24367 00001A5F 45                      	inc	bp			;AN000;
 24368                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24369                                  	;cmp	al,[es:bp+0]
 24370                                  	; 11/12/2022
 24371 00001A60 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 24372 00001A64 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 24373                                  
 24374                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24375                                  	; 12/12/2022
 24376                                  _$P_SCOM01:
 24377 00001A66 46                      	inc	si			;AN000; else update operand pointer
 24378 00001A67 45                      	inc	bp			;AN000; 		and synonym pointer
 24379                                  ;_$P_SCOM01:				;AN000;
 24380 00001A68 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 24381                                  
 24382                                  _$P_SCOM_Differ0:			;AN000;
 24383                                  ;IF SwSW				;AN000;(tm10)
 24384 00001A6A 2EF606[2314]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 24385 00001A70 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 24386                                  
 24387                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24388                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 24389                                  	; 12/12/2022
 24390 00001A72 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 24391 00001A77 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 24392                                  
 24393                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24394                                  	;cmp	byte [es:bp+0],_$P_NULL
 24395                                  	; 11/12/2022
 24396 00001A79 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 24397                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 24398 00001A7E 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 24399                                  
 24400                                  _$P_not_applicable:			;AN000;(tm10)
 24401                                  ;ENDIF					;AN000;(tm10)
 24402                                  
 24403                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24404                                  					;AN000; ignore colon option specified ?
 24405                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 24406                                  	; 12/12/2022
 24407 00001A80 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24408                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24409                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 24410 00001A84 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 24411                                  
 24412 00001A86 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 24413 00001A88 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 24414                                  
 24415                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24416                                  	;cmp	byte [es:bp+0],_$P_NULL
 24417                                  	; 11/12/2022
 24418 00001A8A 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 24419 00001A8F 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 24420                                  
 24421 00001A91 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 24422                                  
 24423                                  _$P_SCOM02:				;AN000;
 24424 00001A93 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 24425 00001A95 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 24426                                  
 24427                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24428                                  	;cmp	byte [es:bp+0],_$P_Colon
 24429                                  	; 11/12/2022
 24430 00001A97 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 24431 00001A9C 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 24432                                  
 24433                                  _$P_SCOM_Differ: 			;AN000;
 24434 00001A9E F9                      	stc				;AN000; indicate not found
 24435 00001A9F EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 24436                                  
 24437                                  _$P_SCOM_Same:				;AN000;
 24438                                  	; 12/12/2022
 24439                                  	; cf=0
 24440 00001AA1 2E8936[2614]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 24441                                  	; 12/12/2022
 24442                                  	;clc				;AN000; indicate found
 24443                                  _$P_SCOM_Exit:				;AN000;
 24444 00001AA6 5E                      	pop	si			;AN000;
 24445 00001AA7 5A                      	pop	dx			;AN000;
 24446 00001AA8 5D                      	pop	bp			;AN000;
 24447 00001AA9 58                      	pop	ax			;AN000;
 24448 00001AAA C3                      	retn
 24449                                  
 24450                                  ; 30/03/2019
 24451                                  
 24452                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24453                                  
 24454                                  ;***********************************************************************
 24455                                  ; _$P_File_Format;
 24456                                  ;
 24457                                  ; Function:  Check if the input string is valid file spec format.
 24458                                  ;	     And set the result buffer.
 24459                                  ;
 24460                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24461                                  ;	     ES:BX -> CONTROL block
 24462                                  ;
 24463                                  ; Output:    None
 24464                                  ;
 24465                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24466                                  ;
 24467                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24468                                  ;	_$P_SaveSI_Cmpx(R)
 24469                                  ;***********************************************************************
 24470                                  
 24471                                  _$P_File_Format:
 24472 00001AAB 50                      	push	ax			;AN000;
 24473 00001AAC 57                      	push	di			;AN000;
 24474 00001AAD 56                      	push	si			;AN000;
 24475 00001AAE 2E8B3E[2414]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24476                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24477 00001AB3 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24478 00001AB6 08C0                    	or	al,al			;AN000; end of line ?
 24479 00001AB8 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24480                                  
 24481 00001ABA E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24482 00001ABD 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24483                                  
 24484 00001ABF 2EC606[BA14]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24485                                  					;AN033;AC034;; set error flag- bad char.
 24486 00001AC5 5E                      	pop	si			;AN033;
 24487 00001AC6 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24488 00001ACA 5F                      	pop	di			;AN033;
 24489 00001ACB EB3E                    	jmp	short _$P_FileF02	;AN033;
 24490                                  
 24491                                  _$P_FileF_Err:				;AN000;
 24492 00001ACD 5E                      	pop	si			;AN000;
 24493 00001ACE 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24494 00001AD2 5F                      	pop	di			;AN000;
 24495                                  
 24496                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24497                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24498                                  	; 12/12/2022
 24499 00001AD3 26F60701                	test	byte [es:bx],_$P_Optional
 24500                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24501                                  	;test	word [es:bx],_$P_Optional
 24502 00001AD7 7532                    	jnz	short _$P_FileF02	;AN000;
 24503                                  
 24504 00001AD9 2EC706[1714]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24505 00001AE0 EB29                    	jmp	short _$P_FileF02	;AN000;
 24506                                  
 24507                                  _$P_FileF03:				;AN000;
 24508 00001AE2 58                      	pop	ax			;AN000; discard save si
 24509 00001AE3 56                      	push	si			;AN000; save new si
 24510                                  _$P_FileF_Loop1: 			;AN000;
 24511 00001AE4 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24512 00001AE7 08C0                    	or	al,al			;AN000; end of line ?
 24513 00001AE9 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24514                                  
 24515 00001AEB E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24516 00001AEE 740B                    	je	short _$P_FileF00	;AN000;
 24517                                  
 24518 00001AF0 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 24519 00001AF3 7302                    	jnc	short _$P_FileF01	;AN000;
 24520 00001AF5 47                      	inc	di			;AN000; if yes, skip next byte
 24521 00001AF6 46                      	inc	si			;AN000;
 24522                                  _$P_FileF01:				;AN000;
 24523 00001AF7 47                      	inc	di			;AN000;
 24524 00001AF8 46                      	inc	si			;AN000;
 24525 00001AF9 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24526                                  ;
 24527                                  _$P_FileF00:				;AN000;
 24528 00001AFB 2EA2[1D14]              	mov	[cs:_$P_Terminator],al	;AC034;
 24529 00001AFF 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24530 00001B03 47                      	inc	di			;AN000;
 24531 00001B04 2E893E[1914]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24532                                  _$P_FileF_RLT:				;AN000;
 24533 00001B09 5E                      	pop	si			;AN000;
 24534 00001B0A 5F                      	pop	di			;AN000;
 24535                                  _$P_FileF02:				;AN000;
 24536 00001B0B 58                      	pop	ax			;AN000; (tm14)
 24537                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 24538                                  	; 14/08/2023
 24539 00001B0C F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24540 00001B0F 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24541                                  
 24542 00001B11 50                      	push	ax			;AN000;  (tm14)
 24543                                  	;mov	ah,_$P_No_Tag		;AN000; set
 24544                                  	;mov	al,_$P_File_Spec 	;AN000; result
 24545                                  	; 14/08/2023
 24546 00001B12 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 24547                                  					      ; set result
 24548 00001B15 E8B5FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 24549 00001B18 58                      	pop	ax			;AN000;
 24550                                  
 24551                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24552 00001B19 C3                      	retn				;AN000;
 24553                                  
 24554                                  ;***********************************************************************
 24555                                  ; _$P_FileSp_Chk
 24556                                  ;
 24557                                  ; Function:  Check if the input byte is one of file special characters
 24558                                  ;
 24559                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24560                                  ;	     AL = character code to be examineed
 24561                                  ;
 24562                                  ; Output:    ZF = 1 , AL is one of special characters
 24563                                  ;***********************************************************************
 24564                                  
 24565                                  _$P_FileSp_Chk:
 24566 00001B1A 53                      	push	bx			;AN000;
 24567 00001B1B 51                      	push	cx			;AN000;
 24568                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24569                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 24570                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 24571                                  	; 07/09/2023
 24572 00001B1C BB[B114]                	mov	bx,_$P_FileSp_Char
 24573 00001B1F B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 24574                                  _$P_FileSp_Loop: 			;AN000;
 24575 00001B22 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24576 00001B25 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24577                                  
 24578 00001B27 43                      	inc	bx			;AN000;
 24579 00001B28 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24580                                  
 24581 00001B2A 41                      	inc	cx			;AN000; reset ZF
 24582                                  _$P_FileSp_Exit: 			;AN000;
 24583 00001B2B 59                      	pop	cx			;AN000;
 24584 00001B2C 5B                      	pop	bx			;AN000;
 24585 00001B2D C3                      	retn
 24586                                  
 24587                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24588                                  
 24589                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24590                                  
 24591                                  ;***********************************************************************
 24592                                  ; _$P_Drive_Format;
 24593                                  ;
 24594                                  ; Function:  Check if the input string is valid drive only format.
 24595                                  ;	     And set the result buffer.
 24596                                  ;
 24597                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24598                                  ;	     ES:BX -> CONTROL block
 24599                                  ;
 24600                                  ; Output:    None
 24601                                  ;
 24602                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24603                                  ;
 24604                                  ; Vars: _$P_RC(W)
 24605                                  ;***********************************************************************
 24606                                  
 24607                                  _$P_Drive_Format:
 24608 00001B2E 50                      	push	ax			;AN000;
 24609 00001B2F 52                      	push	dx			;AN000;
 24610 00001B30 2E8A04                  	mov	al,[cs:si]		;AN000;
 24611 00001B33 08C0                    	or	al,al			;AN000; if null string
 24612 00001B35 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24613                                  
 24614 00001B37 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24615 00001B3A 722A                    	jc	short _$P_Drv_Err	;AN000;
 24616                                  
 24617 00001B3C 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24618 00001B41 740D                    	je	short _$P_DrvF00	;AN000;
 24619                                  
 24620                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24621                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24622                                  	; 12/12/2022
 24623 00001B43 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24624                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24625                                  	;test	word [es:bx],_$P_Ig_Colon
 24626 00001B47 741D                    	jz	short _$P_Drv_Err	;AN000;
 24627                                  
 24628 00001B49 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24629 00001B4E 7516                    	jne	short _$P_Drv_Err	;AN000;
 24630                                  
 24631                                  _$P_DrvF00:				;AN000;
 24632 00001B50 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24633 00001B52 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24634 00001B54 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 24635                                  
 24636 00001B56 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24637 00001B58 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24638                                  
 24639 00001B5A 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24640 00001B5C 88C2                    	mov	dl,al			;AN000; set
 24641                                  	;mov	ah,_$P_No_Tag		;AN000; result
 24642                                  	;mov	al,_$P_Drive		;AN000; buffer
 24643                                  	; 08/07/2023
 24644 00001B5E B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 24645                                  					      ; set result buffer
 24646 00001B61 E869FB                  	call	_$P_Fill_Result		;AN000; to drive
 24647 00001B64 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24648                                  
 24649                                  _$P_Drv_Err:				;AN000;
 24650 00001B66 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24651                                  _$P_Drv_Exit:				;AN000;
 24652 00001B6D 5A                      	pop	dx			;AN000;
 24653 00001B6E 58                      	pop	ax			;AN000;
 24654 00001B6F C3                      	retn				;AN000;
 24655                                  
 24656                                  ;ENDIF					;AN000;(of DrvSW)
 24657                                  
 24658                                  ;***********************************************************************
 24659                                  ; _$P_Skip_Delim;
 24660                                  ;
 24661                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24662                                  ;	    and comma.
 24663                                  ;
 24664                                  ; Input:    DS:SI -> Command String
 24665                                  ;	    ES:DI -> Parameter List
 24666                                  ;
 24667                                  ; Output:   CY = 1 if the end of line encounterd
 24668                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24669                                  ;	    AL = Last examineed character
 24670                                  ;
 24671                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24672                                  ;
 24673                                  ; Vars:     _$P_Flags(R)
 24674                                  ;***********************************************************************
 24675                                  
 24676                                  _$P_Skip_Delim:
 24677                                  _$P_Skip_Delim_Loop:			;AN000;
 24678 00001B70 AC                      	lodsb				;AN000;
 24679 00001B71 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24680 00001B74 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24681                                  
 24682 00001B76 E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24683 00001B79 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24684                                  
 24685 00001B7B 2EF606[2314]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24686 00001B81 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24687                                  
 24688 00001B83 2EF606[2314]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24689                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24690                                  	; 14/08/2023
 24691                                  	; cf=0
 24692 00001B89 7505                    	jnz	short _$P_Skip_Delim_Exit
 24693 00001B8B C3                      	retn
 24694                                  
 24695                                  	;dec	si			;AN000; backup si for next call (tm08)
 24696                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24697                                  	; 12/12/2022
 24698                                  	; cf=0
 24699                                  	; 14/08/2023
 24700                                  	;jmp	short _$P_Skip_Delim_Exit
 24701                                  
 24702                                  _$P_Skip_Delim_CY:			;AN000;
 24703 00001B8C F9                      	stc				;AN000; indicate EOL
 24704 00001B8D EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24705                                  
 24706                                  _$P_Skip_Delim_NCY:			;AN000;
 24707 00001B8F F8                      	clc				;AN000; indicate non delim
 24708                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24709 00001B90 4E                      	dec	si			;AN000;  backup index pointer
 24710                                  	; 14/08/2023
 24711                                  	; 12/12/2022
 24712                                  ;_$P_Exit_At_Extra:	 ; cf=0
 24713 00001B91 C3                      	retn				;AN000;
 24714                                  
 24715                                  	; 12/12/2022
 24716                                  ;_$P_Exit_At_Extra:			;AN000;
 24717                                  	;clc				;AN000; indicate extra delim
 24718                                  	;retn				;AN000;
 24719                                  
 24720                                  ;***********************************************************************
 24721                                  ; _$P_Chk_EOL;
 24722                                  ;
 24723                                  ; Function: Check if AL is one of End of Line characters.
 24724                                  ;
 24725                                  ; Input:    AL = character code
 24726                                  ;	    ES:DI -> Parameter List
 24727                                  ;
 24728                                  ; Output:   ZF = 1 if one of End of Line characters
 24729                                  ;**********************************************************************
 24730                                  
 24731                                  _$P_Chk_EOL:
 24732 00001B92 53                      	push	bx			;AN000;
 24733 00001B93 51                      	push	cx			;AN000;
 24734 00001B94 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24735 00001B96 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24736                                  
 24737 00001B98 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24738 00001B9A 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24739                                  
 24740                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24741 00001B9C 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24742 00001B9E 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24743                                  ;ENDIF					;AN028;
 24744                                  
 24745 00001BA0 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24746                                  					;AN000; EOL character specified ?
 24747 00001BA5 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24748                                  
 24749 00001BA7 31DB                    	xor	bx,bx			;AN000;
 24750 00001BA9 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24751                                  					;AN000; get length of delimiter list
 24752 00001BAD 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24753                                  	; 14/08/2023
 24754 00001BB0 31C9                    	xor	cx,cx ; *
 24755 00001BB2 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24756 00001BB6 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24757                                  	; 14/08/2023
 24758                                  	;;xor	cx,cx			;AN000; Get number of extra character
 24759                                  	;xor	ch,ch ; *
 24760 00001BB8 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 24761                                  _$P_Chk_EOL_Loop:			;AN000;
 24762 00001BBB 43                      	inc	bx			;AN000;
 24763 00001BBC 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24764 00001BBF 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24765 00001BC1 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24766                                  	; 14/08/2023
 24767                                  	; cx=0
 24768                                  _$P_Chk_EOL_NZ:				;AN000;
 24769                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 24770                                  	; 14/08/2023
 24771 00001BC3 41                      	inc	cx  ; zf=0 (cx=1) ; *
 24772                                  _$P_Chk_EOL_Exit:			;AN000;
 24773 00001BC4 59                      	pop	cx			;AN000;
 24774 00001BC5 5B                      	pop	bx			;AN000;
 24775 00001BC6 C3                      	retn
 24776                                  
 24777                                  ;***********************************************************************
 24778                                  ; _$P_Chk_Delim;
 24779                                  ;
 24780                                  ; Function: Check if AL is one of delimiter characters.
 24781                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24782                                  ;	    blanks.
 24783                                  ;
 24784                                  ; Input:    AL = character code
 24785                                  ;	    DS:SI -> Next Character
 24786                                  ;	    ES:DI -> Parameter List
 24787                                  ;
 24788                                  ; Output:   ZF = 1 if one of delimiter characters
 24789                                  ;	    SI points to the next character
 24790                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24791                                  ;***********************************************************************
 24792                                  
 24793                                  _$P_Chk_Delim:
 24794 00001BC7 53                      	push	bx			;AN000;
 24795 00001BC8 51                      	push	cx			;AN000;
 24796 00001BC9 2EC606[1D14]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24797                                  					;AC034; Assume terminated by space
 24798                                  	;and	byte [cs:_$P_Flags20,0DFh
 24799 00001BCF 2E8026[2314]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24800 00001BD5 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24801 00001BD7 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24802                                  
 24803 00001BD9 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24804 00001BDB 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24805                                  
 24806 00001BDD 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24807 00001BDF 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24808                                  
 24809                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 24810                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 24811                                  ;        Erdogan Tan - 14/08/2023
 24812                                  ;_$P_Chk_Delim00:
 24813                                  %if 0
 24814                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24815                                  _$P_Chk_Delim00: 			;AN000;
 24816                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24817                                  	jne	short _$P_Chk_Delim01	;AN000;
 24818                                  
 24819                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24820                                  	jne	short _$P_Chk_Delim01	;AN000;
 24821                                  
 24822                                  	mov	al,_$P_Space		;AN000;
 24823                                  	inc	si			;AN000; make si point to next character
 24824                                  	cmp	al,al			;AN000; Set ZF
 24825                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24826                                  %endif
 24827                                  
 24828                                  _$P_Chk_Delim01: 			;AN000;
 24829 00001BE1 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24830                                  					;AN000; delimiter character specified ?
 24831 00001BE6 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24832                                  
 24833                                  	;xor	cx,cx			;AN000;
 24834 00001BE8 30ED                    	xor	ch,ch
 24835                                  	;mov	cl,[es:di+3]
 24836 00001BEA 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24837                                  					;AN000; get length of delimiter list
 24838                                  	;or	cx,cx			;AN000; No extra Delim character ?
 24839                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 24840                                  	; 14/08/2023
 24841 00001BEE E30B                    	jcxz	_$P_Chk_Delim_NZ
 24842                                  
 24843 00001BF0 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24844                                  _$P_Chk_Delim_Loop:			;AN000;
 24845 00001BF3 43                      	inc	bx			;AN000;
 24846 00001BF4 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24847 00001BF7 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24848                                  
 24849 00001BF9 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24850                                  
 24851                                  _$P_Chk_Delim_NZ:			;AN000;
 24852                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 24853                                  	; 14/08/2023
 24854                                  	; cx=0 here
 24855 00001BFB 41                      	inc	cx ; cx=1, zf=0
 24856                                  _$P_Chk_Delim_Exit:			;AN000;
 24857                                  _$P_ChkDfin:				;AN000;
 24858 00001BFC 59                      	pop	cx			;AN000;
 24859 00001BFD 5B                      	pop	bx			;AN000;
 24860 00001BFE C3                      	retn				;AN000;
 24861                                  
 24862                                  _$P_Chk_Delim_Exit0:			;AN000;
 24863 00001BFF 2EA2[1D14]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24864 00001C03 2EF606[2314]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24865 00001C09 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24866                                  
 24867 00001C0B 2E800E[2314]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24868                                  					;AC034; flag terminated extra delimiter or comma
 24869                                  _$P_No_Set_Extra:			;AN027;
 24870 00001C11 38C0                    	cmp	al,al			;AN000; set ZF
 24871 00001C13 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24872                                  
 24873                                  
 24874                                  ;***********************************************************************
 24875                                  ; _$P_Chk_Switch;
 24876                                  ;
 24877                                  ; Function: Check if AL is the switch character not in first position of
 24878                                  ;	    _$P_STRING_BUF
 24879                                  ;
 24880                                  ; Input:    AL = character code
 24881                                  ;	    BX = current pointer within _$P_String_Buf
 24882                                  ;	    SI =>next char on command line (following the one in AL)
 24883                                  ;
 24884                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24885                                  ;		 position, and has no chance of being part of a date string,
 24886                                  ;		 i.e. should be treated as a delimiter.
 24887                                  
 24888                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24889                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24890                                  ;		 should not be treated as a delimiter.
 24891                                  ;
 24892                                  ; Vars:  _$P_Terminator(W)
 24893                                  
 24894                                  ; Use:	 _$P_0099
 24895                                  ;***********************************************************************
 24896                                  
 24897                                  _$P_Chk_Switch:
 24898                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24899                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 24900                                  	; 14/08/2023
 24901 00001C15 BD[2C14]                	mov	bp,_$P_STRING_BUF
 24902                                  
 24903                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24904 00001C18 39EB                    	cmp	bx,bp			;AN000;
 24905 00001C1A 7406                    	je	short _$P_STRUC_L2	;AN000;
 24906                                  
 24907                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24908 00001C1C 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24909 00001C1E 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24910                                  
 24911 00001C20 F9                      	stc				;AN020;not in first position and is slash
 24912                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24913                                  	; 12/12/2022
 24914 00001C21 C3                      	retn
 24915                                  
 24916                                  ; 12/12/2022
 24917                                  ;_$P_STRUC_L5:				;AN000;
 24918                                  ;	CLC				;AN020;not a slash
 24919                                  ;;	    .ENDIF			;AN020;
 24920                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24921                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24922                                  
 24923                                  _$P_STRUC_L2:				;AN000;
 24924                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24925 00001C22 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24926 00001C24 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24927                                  
 24928 00001C26 2E800E[2314]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24929                                  ;	    .ENDIF			;AN020;
 24930                                  
 24931                                  	; 12/12/2022
 24932                                  	; cf=0
 24933                                  	;retn
 24934                                  
 24935                                  _$P_STRUC_L5:
 24936                                  	; 12/12/2022
 24937                                  _$P_STRUC_L12:				;AN000;
 24938 00001C2C F8                      	clc				;AN020;CF=0 indicating first char
 24939                                  ;	.ENDIF				;AN020;
 24940                                  _$P_STRUC_L1:				;AN000;
 24941 00001C2D C3                      	retn				;AN000;
 24942                                  
 24943                                  ;**************************************************************************
 24944                                  ; _$P_Chk_DBCS:
 24945                                  ;
 24946                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24947                                  ;
 24948                                  ;  Input:
 24949                                  ;	  AL	= Code to be examineed
 24950                                  ;
 24951                                  ;  Output:
 24952                                  ;	  If CF is on then a lead byte of DBCS
 24953                                  ;
 24954                                  ; Use: INT 21h w/AH=63
 24955                                  ;
 24956                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24957                                  ;***************************************************************************
 24958                                  
 24959                                  _$P_Chk_DBCS:
 24960 00001C2E 1E                      	push	ds			;AN000;
 24961 00001C2F 56                      	push	si			;AN000;
 24962 00001C30 53                      	push	bx			;AN000; (tm11)
 24963                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24964                                  	;jne	short _$P_DBCS00	;AN000;
 24965                                  	; 14/08/2023
 24966 00001C31 2E8B36[2014]            	mov	si,[cs:_$P_DBCSEV_SEG]
 24967 00001C36 21F6                    	and	si,si ; 0 ?
 24968 00001C38 7525                    	jnz	short _$P_DBCS00 ; already set
 24969 00001C3A 50                      	push	ax			;AN000;
 24970 00001C3B 1E                      	push	ds			;AN000; (tm11)
 24971 00001C3C 51                      	push	cx			;AN000;
 24972 00001C3D 52                      	push	dx			;AN000;
 24973 00001C3E 57                      	push	di			;AN000;
 24974 00001C3F 55                      	push	bp			;AN000;
 24975 00001C40 06                      	push	es			;AN000;
 24976                                  	; si = 0 ; 14/08/2023
 24977                                  	;xor	si,si			;AN000;
 24978 00001C41 8EDE                    	mov	ds,si ; 0		;AN000;
 24979 00001C43 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24980 00001C46 CD21                    	int	21h			;AN000;
 24981                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24982 00001C48 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24983 00001C4A 09DB                    	or	bx,bx			;AN000; (tm11)
 24984 00001C4C 07                      	pop	es			;AN000;
 24985 00001C4D 5D                      	pop	bp			;AN000;
 24986 00001C4E 5F                      	pop	di			;AN000;
 24987 00001C4F 5A                      	pop	dx			;AN000;
 24988 00001C50 59                      	pop	cx			;AN000;
 24989 00001C51 1F                      	pop	ds			;AN000; (tm11)
 24990 00001C52 58                      	pop	ax			;AN000;
 24991 00001C53 7424                    	jz	short _$P_NON_DBCS	;AN000;
 24992                                  _$P_DBCS02:				;AN000;
 24993 00001C55 2E8936[1E14]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24994 00001C5A 2E891E[2014]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24995                                  _$P_DBCS00:				;AN000;
 24996                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24997                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24998                                  	; 14/08/2023
 24999 00001C5F 2EC536[1E14]            	lds	si,[cs:_$P_DBCSEV_OFF]
 25000                                  _$P_DBCS_LOOP:				;AN000;
 25001 00001C64 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 25002 00001C67 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 25003 00001C69 3A04                    	cmp	al,[si] 		;AN000;
 25004 00001C6B 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 25005 00001C6D 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 25006 00001C70 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 25007 00001C72 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 25008 00001C73 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 25009                                  _$P_DBCS01:				;AN000;
 25010 00001C75 46                      	inc	si			;AC035; add '2' to
 25011 00001C76 46                      	inc	si			;AC035;  SI reg
 25012                                  					;AN000; get next vector
 25013 00001C77 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 25014                                  _$P_NON_DBCS:				;AN000;
 25015                                  	; 12/12/2022
 25016                                  	; cf=0
 25017                                  	;clc				;AN000; indicate SBCS
 25018                                  _$P_DBCS_EXIT:				;AN000;
 25019 00001C79 5B                      	pop	bx			;AN000; (tm11)
 25020 00001C7A 5E                      	pop	si			;AN000;
 25021 00001C7B 1F                      	pop	ds			;AN000;
 25022 00001C7C C3                      	retn				;AN000;
 25023                                  
 25024                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 25025                                  ; ======================================================================
 25026                                  ; 27/03/2019 - Retro DOS v4.0
 25027                                  
 25028                                  ;control block definitions for parser.
 25029                                  ;-----------------------------------------------------------------------
 25030                                  ; buffer = [n | n,m] {/e}
 25031                                  
 25032                                  ; 30/03/2019
 25033                                  
 25034                                  struc p_parms
 25035 00000000 ????                    	resw	1	; dw ?
 25036 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 25037 00000003 ??                      	resb	1	; db 1	; length is 1
 25038 00000004 ??                      	resb 	1	; db ';' ; delimiter
 25039                                  .size:
 25040                                  endstruc
 25041                                  
 25042                                  struc p_pos
 25043 00000000 ????                    	resw	1	; dw ?	; numeric value??
 25044 00000002 ????                    	resw	1	; dw ?	; function
 25045 00000004 ????                    	resw	1	; dw ?	; result value buffer
 25046                                  
 25047                                  ; note: by defining result_val before this structure, we could remove
 25048                                  ;  the "result_val" from every structure invocation
 25049                                  
 25050 00000006 ????                    	resw	1	; dw ?	; value list
 25051 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 25052                                  .size:
 25053                                  endstruc
 25054                                  
 25055                                  struc	p_range
 25056 00000000 ??                      	resb	1	; db 1	; range definition
 25057 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 25058 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 25059 00000003 ????????                	resd	1	; dd ?	; numeric min
 25060 00000007 ????????                	resd	1	; dd ?	; numeric max
 25061                                  .size:
 25062                                  endstruc
 25063                                  
 25064                                  ;-----------------------------------------------------------------------
 25065                                  
 25066                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25067                                  	; (SYSINIT:1F48h)
 25068                                  
 25069                                  ; buffer = [n | n,m] {/e}
 25070                                  
 25071                                  ;buf_parms p_parms <buf_parmsx>
 25072                                  buf_parms: 
 25073 00001C7D [821C]                  	dw	buf_parmsx
 25074 00001C7F 01                      	db	1	; an extra delimiter list
 25075 00001C80 01                      	db	1	; length is 1
 25076 00001C81 3B                      	db	';'	; delimiter
 25077                                  
 25078                                  buf_parmsx:
 25079 00001C82 0102[8C1C][A01C]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 25080 00001C88 01                      	db	1			; one switch
 25081 00001C89 [B41C]                  	dw	sw_x_ctrl
 25082 00001C8B 00                      	db	0			; no keywords
 25083                                  
 25084                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 25085                                  buf_pos1:
 25086 00001C8C 0080                    	dw	8000h	; numeric value??
 25087 00001C8E 0000                    	dw	0	; function
 25088 00001C90 [C61C]                  	dw	result_val ; result value buffer	
 25089 00001C92 [951C]                  	dw	buf_range_1 ; value list
 25090 00001C94 00                      	db	0  	; no switches/keywords
 25091                                  
 25092                                  ;buf_range_1 p_range <,,,1,99>		; M050
 25093                                  buf_range_1:
 25094 00001C95 01                      	db	1	; range definition
 25095 00001C96 01                      	db	1	; 1 definition of range
 25096 00001C97 01                      	db	1	; item tag for this range
 25097 00001C98 01000000                	dd	1	; numeric min
 25098 00001C9C 63000000                	dd	99	; numeric max
 25099                                  
 25100                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 25101                                  buf_pos2:
 25102 00001CA0 0180                    	dw	8001h
 25103 00001CA2 0000                    	dw	0
 25104 00001CA4 [C61C]                  	dw	result_val	
 25105 00001CA6 [A91C]                  	dw	buf_range_2
 25106 00001CA8 00                      	db	0
 25107                                  
 25108                                  ;buf_range_2 p_range <,,,0,8>
 25109                                  buf_range_2:
 25110 00001CA9 01                      	db	1
 25111 00001CAA 01                      	db	1
 25112 00001CAB 01                      	db	1
 25113 00001CAC 00000000                	dd	0
 25114 00001CB0 08000000                	dd	8
 25115                                  
 25116                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 25117                                  sw_x_ctrl:
 25118 00001CB4 0000                    	dw	0
 25119 00001CB6 0000                    	dw	0
 25120 00001CB8 [C61C]                  	dw	result_val	
 25121 00001CBA [C51C]                  	dw	noval
 25122 00001CBC 01                      	db	1	; 1 switch
 25123                                  	
 25124                                  switch_x:
 25125 00001CBD 2F5800                  	db	'/X',0		; M016
 25126                                  
 25127                                  p_buffers:
 25128 00001CC0 0000                    	dw	0	; local variables
 25129                                  p_h_buffers:
 25130 00001CC2 0000                    	dw	0
 25131                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25132                                  p_buffer_slash_x:
 25133 00001CC4 00                      	db	0 ; 31/03/2019
 25134                                  
 25135                                  ;-- common definitions -------------------------------------------------
 25136                                  
 25137 00001CC5 00                      noval:	db	0
 25138                                  
 25139                                  result_val: 	;label	byte
 25140 00001CC6 00                      	db	0		; type returned
 25141                                  result_val_itag:
 25142 00001CC7 00                      	db	0		; item tag returned
 25143                                  result_val_swoff:
 25144 00001CC8 0000                    	dw	0		; es:offset of the switch defined
 25145                                  rv_byte:	;label	byte
 25146 00001CCA 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 25147                                  
 25148                                  ;-----------------------------------------------------------------------
 25149                                  
 25150                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25151                                  	; (SYSINIT:1F99h)
 25152                                  
 25153                                  ; break = [ on | off ]
 25154                                  
 25155                                  ;brk_parms p_parms  <brk_parmsx>
 25156                                  brk_parms:
 25157 00001CCE [D31C]                  	dw	brk_parmsx
 25158 00001CD0 01                      	db	1	; an extra delimiter list
 25159 00001CD1 01                      	db	1	; length is 1
 25160 00001CD2 3B                      	db	';'	; delimiter
 25161                                  
 25162                                  brk_parmsx:
 25163 00001CD3 0101[D91C]              	dw	101h,brk_pos	; min,max = 1 positional
 25164 00001CD7 00                      	db	0		; no switches
 25165 00001CD8 00                      	db	0		; no keywords
 25166                                  
 25167                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25168                                  brk_pos:
 25169 00001CD9 0020                    	dw	2000h
 25170 00001CDB 0000                    	dw	0
 25171 00001CDD [C61C]                  	dw	result_val	
 25172 00001CDF [E21C]                  	dw	on_off_string
 25173 00001CE1 00                      	db	0
 25174                                  
 25175                                  on_off_string:	;label	byte
 25176 00001CE2 03                      	db	3		; signals that there is a string choice
 25177 00001CE3 00                      	db	0		; no range definition
 25178 00001CE4 00                      	db	0		; no numeric values choice
 25179 00001CE5 02                      	db	2		; 2 strings for choice
 25180 00001CE6 01                      	db	1		; the 1st string tag
 25181 00001CE7 [EC1C]                  	dw	on_string
 25182 00001CE9 02                      	db	2		; the 2nd string tag
 25183 00001CEA [EF1C]                  	dw	off_string
 25184                                  
 25185                                  on_string:
 25186 00001CEC 4F4E00                  	db	"ON",0
 25187                                  off_string:
 25188 00001CEF 4F464600                	db	"OFF",0
 25189                                  
 25190                                  p_ctrl_break:
 25191 00001CF3 00                      	db	0	; local variable
 25192                                  
 25193                                  ;-----------------------------------------------------------------------
 25194                                  
 25195                                  	; 27/10/2022
 25196                                  
 25197                                  ; country = n {m {path}}
 25198                                  ; or
 25199                                  ; country = n,,path
 25200                                  
 25201                                  ;cntry_parms p_parms <cntry_parmsx>
 25202                                  cntry_parms:
 25203 00001CF4 [F91C]                  	dw	cntry_parmsx
 25204 00001CF6 01                      	db	1
 25205 00001CF7 01                      	db	1
 25206 00001CF8 3B                      	db	';'
 25207                                  	
 25208                                  cntry_parmsx:
 25209 00001CF9 0103[031D][171D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 25209 00001CFF [201D]             
 25210 00001D01 00                      	db	0		; no switches
 25211 00001D02 00                      	db	0		; no keywords
 25212                                  
 25213                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 25214                                  cntry_pos1:
 25215 00001D03 0080                    	dw	8000h
 25216 00001D05 0000                    	dw	0
 25217 00001D07 [C61C]                  	dw	result_val	
 25218 00001D09 [0C1D]                  	dw	cc_range
 25219 00001D0B 00                      	db	0
 25220                                  
 25221                                  ;cc_range p_range <,,,1,999>
 25222                                  cc_range:
 25223 00001D0C 01                      	db	1
 25224 00001D0D 01                      	db	1
 25225 00001D0E 01                      	db	1
 25226 00001D0F 01000000                	dd	1
 25227 00001D13 E7030000                	dd	999
 25228                                  
 25229                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 25230                                  cntry_pos2:
 25231 00001D17 0180                    	dw	8001h
 25232 00001D19 0000                    	dw	0
 25233 00001D1B [C61C]                  	dw	result_val	
 25234 00001D1D [0C1D]                  	dw	cc_range
 25235 00001D1F 00                      	db	0
 25236                                  
 25237                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 25238                                  cntry_pos3:
 25239 00001D20 0102                    	dw	201h
 25240 00001D22 0000                    	dw	0
 25241 00001D24 [C61C]                  	dw	result_val	
 25242 00001D26 [C51C]                  	dw	noval
 25243 00001D28 00                      	db	0	
 25244                                  
 25245                                  p_cntry_code:
 25246 00001D29 0000                    	dw	0	; local variable
 25247                                  p_code_page:
 25248 00001D2B 0000                    	dw	0	; local variable
 25249                                  
 25250                                  ;-----------------------------------------------------------------------
 25251                                  
 25252                                  	; 27/10/2022
 25253                                  
 25254                                  ; files = n
 25255                                  
 25256                                  ;files_parms p_parms <files_parmsx>
 25257                                  files_parms:
 25258 00001D2D [321D]                  	dw	files_parmsx
 25259 00001D2F 01                      	db	1
 25260 00001D30 01                      	db	1
 25261 00001D31 3B                      	db	';'
 25262                                  
 25263                                  files_parmsx:
 25264 00001D32 0101[381D]              	dw	101h,files_pos	; min,max 1 positional
 25265 00001D36 00                      	db	0		; no switches
 25266 00001D37 00                      	db	0		; no keywords
 25267                                  
 25268                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 25269                                  files_pos:
 25270 00001D38 0080                    	dw	8000h
 25271 00001D3A 0000                    	dw	0
 25272 00001D3C [C61C]                  	dw	result_val	
 25273 00001D3E [411D]                  	dw	files_range
 25274 00001D40 00                      	db	0
 25275                                  
 25276                                  ;files_range p_range <,,,8,255>
 25277                                  files_range:
 25278 00001D41 01                      	db	1
 25279 00001D42 01                      	db	1
 25280 00001D43 01                      	db	1
 25281 00001D44 08000000                	dd	8
 25282 00001D48 FF000000                	dd	255
 25283                                  
 25284                                  p_files:
 25285 00001D4C 00                      	db	0		; local variable
 25286                                  
 25287                                  ;-----------------------------------------------------------------------
 25288                                  
 25289                                  	; 27/10/2022
 25290                                  
 25291                                  ; fcbs = n,m
 25292                                  
 25293                                  ;fcbs_parms p_parms <fcbs_parmsx>
 25294                                  fcbs_parms:
 25295 00001D4D [521D]                  	dw	fcbs_parmsx
 25296 00001D4F 01                      	db	1
 25297 00001D50 01                      	db	1
 25298 00001D51 3B                      	db	';'
 25299                                  
 25300                                  fcbs_parmsx:
 25301 00001D52 0102[5A1D][6E1D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 25302 00001D58 00                      	db	0		; no switches
 25303 00001D59 00                      	db	0		; no keywords
 25304                                  
 25305                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 25306                                  fcbs_pos_1:
 25307 00001D5A 0080                    	dw	8000h
 25308 00001D5C 0000                    	dw	0
 25309 00001D5E [C61C]                  	dw	result_val	
 25310 00001D60 [631D]                  	dw	fcbs_range
 25311 00001D62 00                      	db	0
 25312                                  
 25313                                  ;fcbs_range p_range <,,,1,255>
 25314                                  fcbs_range:
 25315 00001D63 01                      	db	1
 25316 00001D64 01                      	db	1
 25317 00001D65 01                      	db	1
 25318 00001D66 01000000                	dd	1
 25319 00001D6A FF000000                	dd	255
 25320                                  
 25321                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 25322                                  fcbs_pos_2:
 25323 00001D6E 0080                    	dw	8000h
 25324 00001D70 0000                    	dw	0
 25325 00001D72 [C61C]                  	dw	result_val	
 25326 00001D74 [771D]                  	dw	fcbs_keep_range
 25327 00001D76 00                      	db	0
 25328                                  
 25329                                  ;fcbs_keep_range p_range <,,,0,255>
 25330                                  fcbs_keep_range:
 25331 00001D77 01                      	db	1
 25332 00001D78 01                      	db	1
 25333 00001D79 01                      	db	1
 25334 00001D7A 00000000                	dd	0
 25335 00001D7E FF000000                	dd	255
 25336                                  
 25337 00001D82 00                      p_fcbs:	db	0		; local variable
 25338 00001D83 00                      p_keep:	db	0		; local variable
 25339                                  
 25340                                  ;-----------------------------------------------------------------------
 25341                                  
 25342                                  	; 27/10/2022
 25343                                  
 25344                                  ; lastdrive = x
 25345                                  
 25346                                  ;ldrv_parms p_parms <ldrv_parmsx>
 25347                                  ldrv_parms:
 25348 00001D84 [891D]                  	dw	ldrv_parmsx
 25349 00001D86 01                      	db	1
 25350 00001D87 01                      	db	1
 25351 00001D88 3B                      	db	';'
 25352                                  
 25353                                  ldrv_parmsx:
 25354 00001D89 0101[8F1D]              	dw	101h,ldrv_pos	; min,max = 1 positional
 25355 00001D8D 00                      	db	0		; no switches
 25356 00001D8E 00                      	db	0		; no keywords
 25357                                  
 25358                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 25359                                  ldrv_pos:				    ; remove colon at end
 25360 00001D8F 1001                    	dw	110h
 25361 00001D91 1000                    	dw	10h
 25362 00001D93 [C61C]                  	dw	result_val	
 25363 00001D95 [C51C]                  	dw	noval
 25364 00001D97 00                      	db	0
 25365                                  	
 25366 00001D98 00                      p_ldrv:	db	0		; local variable
 25367                                  
 25368                                  ;-----------------------------------------------------------------------
 25369                                  
 25370                                  	; 27/10/2022
 25371                                  
 25372                                  ; stacks = n,m
 25373                                  
 25374                                  ;stks_parms p_parms <stks_parmsx>
 25375                                  stks_parms:
 25376 00001D99 [9E1D]                  	dw	stks_parmsx
 25377 00001D9B 01                      	db	1
 25378 00001D9C 01                      	db	1
 25379 00001D9D 3B                      	db	';'
 25380                                  
 25381                                  stks_parmsx:
 25382 00001D9E 0202[A61D][BA1D]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 25383 00001DA4 00                      	db	0		; no switches
 25384 00001DA5 00                      	db	0		; no keywords
 25385                                  
 25386                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 25387                                  stks_pos_1:
 25388 00001DA6 0080                    	dw	8000h
 25389 00001DA8 0000                    	dw	0
 25390 00001DAA [C61C]                  	dw	result_val	
 25391 00001DAC [AF1D]                  	dw	stks_range
 25392 00001DAE 00                      	db	0
 25393                                  
 25394                                  ;stks_range p_range <,,,0,64>
 25395                                  stks_range:
 25396 00001DAF 01                      	db	1
 25397 00001DB0 01                      	db	1
 25398 00001DB1 01                      	db	1
 25399 00001DB2 00000000                	dd	0
 25400 00001DB6 40000000                	dd	64
 25401                                  
 25402                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 25403                                  stks_pos_2:
 25404 00001DBA 0080                    	dw	8000h
 25405 00001DBC 0000                    	dw	0
 25406 00001DBE [C61C]                  	dw	result_val	
 25407 00001DC0 [C31D]                  	dw	stk_size_range
 25408 00001DC2 00                      	db	0
 25409                                  
 25410                                  ;stk_size_range p_range <,,,0,512>
 25411                                  stk_size_range:
 25412 00001DC3 01                      	db	1
 25413 00001DC4 01                      	db	1
 25414 00001DC5 01                      	db	1
 25415 00001DC6 00000000                	dd	0
 25416 00001DCA 00020000                	dd	512	
 25417                                  
 25418                                  p_stack_count:
 25419 00001DCE 0000                    	dw	0	; local variable
 25420                                  p_stack_size:
 25421 00001DD0 0000                    	dw	0	; local variable
 25422                                  
 25423                                  ;-----------------------------------------------------------------------
 25424                                  
 25425                                  	; 27/10/2022
 25426                                  
 25427                                  ; multitrack = [ on | off ]
 25428                                  
 25429                                  ;mtrk_parms p_parms <mtrk_parmsx>
 25430                                  mtrk_parms:
 25431 00001DD2 [D71D]                  	dw	mtrk_parmsx
 25432 00001DD4 01                      	db	1
 25433 00001DD5 01                      	db	1
 25434 00001DD6 3B                      	db	';'
 25435                                  
 25436                                  mtrk_parmsx:
 25437 00001DD7 0101[DD1D]              	dw	101h,mtrk_pos	; min,max = 1 positional
 25438 00001DDB 00                      	db	0		; no switches
 25439 00001DDC 00                      	db	0		; no keywords
 25440                                  
 25441                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25442                                  mtrk_pos:
 25443 00001DDD 0020                    	dw	2000h
 25444 00001DDF 0000                    	dw	0
 25445 00001DE1 [C61C]                  	dw	result_val	
 25446 00001DE3 [E21C]                  	dw	on_off_string
 25447 00001DE5 00                      	db	0
 25448                                  
 25449 00001DE6 00                      p_mtrk:	db	0		; local variable
 25450                                  
 25451                                  ;-----------------------------------------------------------------------
 25452                                  
 25453                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25454                                  	; (SYSINIT:20B2h)
 25455                                  
 25456                                  ; switches=/k
 25457                                  
 25458                                  ;swit_parms p_parms <swit_parmsx>
 25459                                  swit_parms:
 25460 00001DE7 [EC1D]                  	dw	swit_parmsx
 25461 00001DE9 01                      	db	1
 25462 00001DEA 01                      	db	1
 25463 00001DEB 3B                      	db	';'
 25464                                  
 25465                                  swit_parmsx:
 25466 00001DEC 0000                    	dw	0		; no positionals
 25467                                  	;db	5               ; # of switches
 25468                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25469 00001DEE 03                      	db	3
 25470 00001DEF [F61D]                  	dw	swit_k_ctrl	; /k control
 25471                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 25472                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 25473 00001DF1 [021E]                  	dw	swit_t_ctrl     ; /t control
 25474 00001DF3 [0E1E]                  	dw	swit_w_ctrl     ; /w control
 25475 00001DF5 00                      	db	0		; no keywords
 25476                                  
 25477                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25478                                  swit_k_ctrl:
 25479 00001DF6 00000000[C61C]-         	dw	0,0,result_val,noval
 25479 00001DFC [C51C]             
 25480 00001DFE 01                      	db	1
 25481 00001DFF 2F4B00                  swit_k:	db	'/K',0
 25482                                  
 25483                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25484                                  ;
 25485                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25486                                  ;swit_n_ctrl:
 25487                                  ;	dw	0,0,result_val,noval
 25488                                  ;	db	1
 25489                                  ;swit_n: db	'/N',0
 25490                                  ;
 25491                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25492                                  ;swit_f_ctrl:
 25493                                  ;	dw	0,0,result_val,noval
 25494                                  ;	db	1
 25495                                  ;swit_f: db 	'/F',0
 25496                                  
 25497                                  	; 27/10/2022
 25498                                  
 25499                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25500                                  swit_t_ctrl:
 25501 00001E02 00000000[C61C]-         	dw	0,0,result_val,noval
 25501 00001E08 [C51C]             
 25502 00001E0A 01                      	db	1
 25503 00001E0B 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25504                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25505                                  swit_w_ctrl:
 25506 00001E0E 00000000[C61C]-         	dw	0,0,result_val,noval
 25506 00001E14 [C51C]             
 25507 00001E16 01                      	db	1
 25508 00001E17 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25509                                  
 25510                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 25511                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 25512                                  ;   in the above table to prevent the parsing code from complaining about them
 25513                                  
 25514 00001E1A 00                      p_swit_k:	db     0	; local variable
 25515 00001E1B 00                      p_swit_t:	db     0	; local variable			M059
 25516 00001E1C 00                      p_swit_w:	db     0	; local variable			M063
 25517                                  
 25518                                  ;-----------------------------------------------------------------------
 25519                                  
 25520                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25521                                  	; (SYSINIT:20E8h)
 25522                                  
 25523                                  ; DOS = [ high | low ]
 25524                                  
 25525                                  ;dos_parms p_parms  <dos_parmsx>
 25526                                  dos_parms:
 25527 00001E1D [221E]                  	dw	dos_parmsx
 25528 00001E1F 01                      	db	1
 25529 00001E20 01                      	db	1
 25530 00001E21 3B                      	db	';'
 25531                                  dos_parmsx:
 25532 00001E22 01                      	db	1		; min parameters
 25533 00001E23 02                      	db	2		; max parameters
 25534 00001E24 [2A1E]                  	dw	dos_pos		; 
 25535 00001E26 [2A1E]                  	dw	dos_pos		; 
 25536 00001E28 00                      	db	0		; no switches
 25537 00001E29 00                      	db	0		; no keywords
 25538                                  
 25539                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25540                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25541                                  dos_pos:
 25542 00001E2A 00200000[C61C]-         	dw	2000h,0,result_val,dos_strings
 25542 00001E30 [3C1E]             
 25543 00001E32 00                      	db	0
 25544 00001E33 00200000[C61C]-         	dw	2000h,0,result_val,dos_strings
 25544 00001E39 [3C1E]             
 25545 00001E3B 00                      	db	0	
 25546                                  
 25547                                  dos_strings:	;label	byte
 25548 00001E3C 03                      	db	3		; signals that there is a string choice
 25549 00001E3D 00                      	db	0		; no range definition
 25550 00001E3E 00                      	db	0		; no numeric values choice
 25551 00001E3F 04                      	db	4		; 4 strings for choice
 25552 00001E40 01                      	db	1		; the 1st string tag
 25553 00001E41 [4C1E]                  	dw	hi_string
 25554 00001E43 02                      	db	2		; the 2nd string tag
 25555 00001E44 [511E]                  	dw	lo_string
 25556 00001E46 03                      	db	3
 25557 00001E47 [551E]                  	dw	umb_string
 25558 00001E49 04                      	db	4
 25559 00001E4A [591E]                  	dw	noumb_string
 25560                                  
 25561 00001E4C 4849474800              hi_string:	db	"HIGH",0
 25562 00001E51 4C4F5700                lo_string:	db	"LOW",0
 25563 00001E55 554D4200                umb_string:	db	"UMB",0
 25564 00001E59 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25565                                  
 25566 00001E5F 00                      p_dos_hi:	db	0	; local variable
 25567                                  				; BUGBUG : I dont know whether PARSER uses
 25568                                  				;          this variable or not
 25569                                  
 25570                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25571                                  
 25572                                  %if 0
 25573                                  
 25574                                  ;****************************************************************** RICHID ****
 25575                                  
 25576                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25577                                  
 25578                                  ; 30/03/2019 - Retro DOS v4.0
 25579                                  ;------------------------------------------------------------------------------
 25580                                  
 25581                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25582                                  ;
 25583                                  ;   Date:     May 14, 1992
 25584                                  ;
 25585                                  ;******************************************************************************
 25586                                  ;
 25587                                  ;   Modification log:
 25588                                  ;
 25589                                  ;     DATE    WHO      DESCRIPTION
 25590                                  ;   --------  -------  --------------------------------------------------------
 25591                                  ;   05/14/92  t-richj  Original
 25592                                  ;   06/21/92  t-richj  Final revisions before check-in
 25593                                  ;
 25594                                  ;******************************************************************************
 25595                                  ;
 25596                                  ; There are two primary definitions which need to be made, selectively, before
 25597                                  ; this include file should be used.  These are:
 25598                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25599                                  ;                declared as external.  Otherwise, variables will be declared
 25600                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25601                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25602                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25603                                  ;                (as only one module, sysconf.asm, includes this file).
 25604                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25605                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25606                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25607                                  ;
 25608                                  ;******************************************************************************
 25609                                  
 25610                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25611                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25612                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25613                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25614                                  ; space problem (it's just such a nice round number, eh?).
 25615                                  
 25616                                  MAXUMB	equ	16
 25617                                  
 25618                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25619                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25620                                  
 25621                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25622                                  SystemPSPOwner	equ	8
 25623                                  ;JapanPSPOwner	equ	9
 25624                                  
 25625                                  ; for LoadHigh and DeviceHigh:
 25626                                  ;
 25627                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25628                                  ;	          UnHideUMBs().
 25629                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25630                                  ;	           line.
 25631                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25632                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25633                                  ;	          given a command-line like "/L:3,500;4"
 25634                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25635                                  ;	          matching its index number was specified on the command-line;
 25636                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25637                                  ;	          will be set to 1.  All others will be set to 0.
 25638                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25639                                  ;	          specified by the user for a UMB (in the above example, all
 25640                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25641                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25642                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25643                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25644                                  ;	           for details).
 25645                                  
 25646                                  fInHigh:  db	0
 25647                                  fUmbTiny: db	0
 25648                                  SegLoad:  dw	0
 25649                                  UmbLoad:  db	0
 25650                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25651                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25652                                  fm_umb:   db	0
 25653                                  fm_strat: db	0
 25654                                  fm_argc:  db	0	
 25655                                  
 25656                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25657                                  ; UmbLoad is set to the UMB number given.
 25658                                  
 25659                                  UNSPECIFIED	equ	-1
 25660                                  
 25661                                  %endif
 25662                                  
 25663                                  ;****************************************************************** RICHID ****
 25664                                  
 25665                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25666                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25667                                  
 25668                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25669                                  ; (SYSINIT:212Bh)	
 25670                                  
 25671                                  		;public	DevEntry
 25672                                  
 25673 00001E60 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25674 00001E62 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25675 00001E64 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25676 00001E66 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25677 00001E6A 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25678                                  ; 27/10/2022 
 25679                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25680                                  ;
 25681 00001E6E 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25682 00001E6F 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25683 00001E71 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25684 00001E73 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25685                                  ;
 25686 00001E75 00000000                DevXMSAddr:	dd	0
 25687                                  ;
 25688 00001E79 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25689 00001E7B 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25690                                  ;
 25691 00001E7D 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25692                                  				;  is being loaded into UMB
 25693 00001E7E 0000                    DevSizeOption:	dw	0	; SIZE= option
 25694                                  ;
 25695 00001E80 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25696 00001E81 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25697 00001E83 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25698                                  ;
 25699 00001E8B 00                      FirstUMBLinked:	db	0
 25700 00001E8C 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25701 00001E8E 00000000                DevCmdLine:	dd	0	; Current Command line
 25702 00001E92 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25703                                  				; to use the file name in the command line
 25704                                  ;
 25705                                  ;	ifdef	dblspace_hooks
 25706                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25707                                  ;	endif
 25708                                  
 25709                                  ; ===========================================================================
 25710                                  
 25711                                  ; 31/03/2019 - Retro DOS v4.0
 25712                                  
 25713                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25714                                  ; (SYSINIT:215Eh)
 25715                                  
 25716                                  ;----------------------------------------------------------------------------
 25717                                  ;
 25718                                  ; procedure : doconf
 25719                                  ;
 25720                                  ;             Config file is parsed initially with this routine. For the
 25721                                  ;             Subsequent passes 'multi_pass' entry is used .
 25722                                  ;
 25723                                  ;----------------------------------------------------------------------------
 25724                                  
 25725                                  	; 27/10/2022
 25726                                  doconf:
 25727 00001E93 0E                      	push	cs
 25728 00001E94 1F                      	pop	ds
 25729                                  
 25730 00001E95 B80037                  	mov	ax,3700h
 25731                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25732 00001E98 CD21                    	int	21h
 25733 00001E9A 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25734                                  
 25735                                  ; 27/10/2022
 25736                                  ;;ifdef	MULTI_CONFIG
 25737                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25738                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25739                                  ;;endif	;MULTI_CONFIG
 25740                                  
 25741 00001E9E BA[0A33]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25742 00001EA1 B8003D                  	mov	ax,3D00h
 25743                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25744 00001EA4 F9                      	stc				;in case of int 24
 25745 00001EA5 CD21                    	int	21h			;function request
 25746 00001EA7 7306                    	jnc	short noprob		; brif opened okay
 25747                                  
 25748                                  ; 27/10/2022
 25749                                  ;;ifdef	MULTI_CONFIG
 25750                                  ;      	call	kbd_read		; we still want to give the guy
 25751                                  ;					; a chance to select clean boot!
 25752                                  ;;endif					; (ie, no autoexec.bat processing)
 25753 00001EA9 C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25754 00001EAE C3                      	retn
 25755                                  noprob: 				;get file size (note < 64k!!)
 25756 00001EAF 89C3                    	mov	bx,ax  ; File handle
 25757 00001EB1 31C9                    	xor	cx,cx
 25758 00001EB3 31D2                    	xor	dx,dx
 25759                                  	;mov	ax,4202h
 25760 00001EB5 B80242                  	mov	ax,(LSEEK<<8)|2
 25761 00001EB8 CD21                    	int	21h
 25762 00001EBA A3[D203]                	mov	[count],ax
 25763                                  
 25764 00001EBD 31D2                    	xor	dx,dx
 25765                                  	;mov	ax,4200h
 25766 00001EBF B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25767 00001EC2 CD21                    	int	21h
 25768                                  
 25769                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25770                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25771 00001EC4 8B16[A102]              	mov	dx,[top_of_cdss] 
 25772                                  
 25773 00001EC8 A1[D203]                	mov	ax,[count]
 25774 00001ECB A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25775 00001ECE E8D3F1                  	call	ParaRound
 25776 00001ED1 29C2                    	sub	dx,ax
 25777                                  
 25778                                  ; 27/10/2022
 25779                                  ;;ifdef	MULTI_CONFIG
 25780                                  ;;
 25781                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25782                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25783                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25784                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25785                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25786                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25787                                  ;;  of extra space, so here we account for it (the worst case of course is
 25788                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25789                                  ;;
 25790                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25791                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25792                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25793                                  ;;endif	;MULTI_CONFIG
 25794                                  
 25795 00001ED3 83EA11                  	sub	dx,11h			;room for header
 25796                                  	
 25797                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25798                                  	;mov	[CONFBOT],dx
 25799                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25800 00001ED6 8916[A102]              	mov	[top_of_cdss],dx
 25801 00001EDA E8E8EC                  	call    TempCDS 
 25802                                  	; 11/12/2022
 25803                                  	; ds <> cs 
 25804 00001EDD 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25805                                   
 25806 00001EE2 8EDA                    	mov	ds,dx
 25807 00001EE4 8EC2                    	mov	es,dx
 25808                                  
 25809 00001EE6 31D2                    	xor	dx,dx
 25810 00001EE8 2E8B0E[D203]            	mov	cx,[cs:count]
 25811 00001EED B43F                    	mov	ah,3Fh
 25812                                  	;mov	ah,READ  ; 3Fh
 25813 00001EEF F9                      	stc				;in case of int 24
 25814 00001EF0 CD21                    	int	21h			;function request
 25815 00001EF2 9C                      	pushf
 25816                                  
 25817                                  ; find the eof mark in the file. if present,then trim length.
 25818                                  
 25819 00001EF3 50                      	push	ax
 25820 00001EF4 57                      	push	di
 25821 00001EF5 51                      	push	cx
 25822 00001EF6 B01A                    	mov	al,1Ah			; eof mark
 25823 00001EF8 89D7                    	mov	di,dx			; point to buffer
 25824 00001EFA E305                    	jcxz	puteol			; no chars
 25825 00001EFC F2AE                    	repnz	scasb			; find end
 25826 00001EFE 7501                    	jnz	short puteol		; none found and count exhausted
 25827                                  
 25828                                  ; we found a 1a. back up
 25829                                  
 25830 00001F00 4F                      	dec	di			; backup past 1Ah
 25831                                  
 25832                                  ;  just for the halibut, stick in an extra eol
 25833                                  
 25834                                  puteol:
 25835 00001F01 B00D                    	mov	al,cr ; 0Dh
 25836 00001F03 AA                      	stosb
 25837 00001F04 B00A                    	mov	al,lf  ;0Ah
 25838 00001F06 AA                      	stosb
 25839 00001F07 29D7                    	sub	di,dx			; difference moved
 25840                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25841                                  	;mov	[cs:count],di		; new count
 25842                                  
 25843                                  	; 11/12/2022	
 25844                                  	; 31/03/2019 - Retro DOS v4.0
 25845 00001F09 0E                      	push	cs
 25846 00001F0A 1F                      	pop	ds
 25847                                  
 25848 00001F0B 893E[D203]              	mov	[count],di		; new count
 25849                                  
 25850 00001F0F 59                      	pop	cx
 25851 00001F10 5F                      	pop	di
 25852 00001F11 58                      	pop	ax
 25853                                  
 25854                                  	; 11/12/2022
 25855                                  	; 27/10/2022
 25856                                  	;push	cs
 25857                                  	;pop	ds
 25858                                  
 25859 00001F12 50                      	push	ax
 25860                                  	;mov	ah,CLOSE
 25861 00001F13 B43E                    	mov	ah,3Eh
 25862 00001F15 CD21                    	int	21h
 25863 00001F17 58                      	pop	ax
 25864 00001F18 9D                      	popf
 25865 00001F19 7204                    	jc	short conferr 		;if not we've got a problem
 25866 00001F1B 39C1                    	cmp	cx,ax
 25867 00001F1D 742C                    	jz	short getcom		;couldn't read the file
 25868                                  conferr:
 25869 00001F1F BA[0A33]                	mov	dx,config		;want to print config error
 25870 00001F22 E83C13                  	call	badfil
 25871                                  endconv:
 25872 00001F25 C3                      	retn
 25873                                  
 25874                                  ;----------------------------------------------------------------------------
 25875                                  ;
 25876                                  ; entry : multi_pass
 25877                                  ;
 25878                                  ;             called to execute device=,install= commands
 25879                                  ;
 25880                                  ;----------------------------------------------------------------------------
 25881                                  
 25882                                  	; 27/10/2022
 25883                                  multi_pass:
 25884 00001F26 0E                      	push	cs
 25885 00001F27 1F                      	pop	ds
 25886                                  
 25887 00001F28 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25888                                  ;jae_endconv:
 25889 00001F2D 73F6                    	jae	short endconv 		; do nothing. just return.
 25890                                  
 25891                                  	;push	word [CONFBOT]
 25892                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25893 00001F2F FF36[A102]              	push	word [top_of_cdss]
 25894 00001F33 07                      	pop	es			; es -> confbot
 25895                                  
 25896 00001F34 8B36[D403]              	mov	si,[org_count]
 25897 00001F38 8936[D203]              	mov	[count],si		; set count
 25898 00001F3C 31F6                    	xor	si,si ; 0
 25899 00001F3E 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25900 00001F42 8936[2B03]                      mov     [linecount],si		; reset linecount
 25901                                  
 25902 00001F46 E89C10                  	call	getchr
 25903 00001F49 EB06                    	jmp	short conflp
 25904                                  
 25905                                  getcom:
 25906 00001F4B E8800E                          call    organize                ; organize the file
 25907 00001F4E E89410                  	call	getchr
 25908                                  conflp: 
 25909 00001F51 72D2                    	jc	short endconv
 25910                                  
 25911 00001F53 FF06[2B03]                      inc     word [linecount]	; increase linecount
 25912                                  
 25913 00001F57 C606[0D14]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25914 00001F5C C606[1014]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25915 00001F61 3C0A                    	cmp	al,lf			; linefeed?
 25916 00001F63 7416                    	je	short blank_line	;  then ignore this line.
 25917                                  
 25918                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25919                                  %if 0
 25920                                  
 25921                                  ;ifdef	MULTI_CONFIG
 25922                                  
 25923                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25924                                  ;   number immediately following it....
 25925                                  
 25926                                          mov     [config_cmd],al         ; save original command code
 25927                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25928                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25929                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25930                                          je      short not_final		; no, line number is not embedded
 25931                                  
 25932                                          push    ax                      ;
 25933                                          call    getchr                  ; ignore end-of-image errors,
 25934                                          mov     ah,al                   ; because if there's an error
 25935                                          call    getchr                  ; fetching the line number that's
 25936                                          xchg    al,ah                   ; supposed to be there, the next
 25937                                          mov     [linecount],ax          ; getchr call will get the same error
 25938                                          pop     ax
 25939                                  ;
 25940                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25941                                  ;   which to obtain its original program name, it grovels through all of
 25942                                  ;   memory to find the filename that was used to exec it; it wants to find
 25943                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25944                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25945                                  ;   immediately before the filename, but since we are now storing line # info
 25946                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25947                                  ;   spot.
 25948                                  ;
 25949                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25950                                  ;   over the line number info, since we no longer need that info anyway. This
 25951                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25952                                  ;   retrieved.
 25953                                  ;
 25954                                          cmp	byte [multi_pass_id],2	; final pass?
 25955                                          jb	short not_final		; no
 25956                                          ;test	word [install_flag],have_install_cmd
 25957                                  	test	byte [install_flag],have_install_cmd ; 1
 25958                                          jz	short final		; no install cmds, so yes it is
 25959                                          cmp	byte [multi_pass_id],3	; final pass?
 25960                                          jb	short not_final		; no
 25961                                  final:                                  ;
 25962                                  	mov	[es:si],al		; save backward-compatible command code
 25963                                  not_final:                              ;
 25964                                  ;endif
 25965                                  
 25966                                  %endif
 25967 00001F65 88C4                    	mov	ah,al
 25968 00001F67 E87B10                  	call	getchr
 25969 00001F6A 7314                    	jnc	short tryi
 25970                                  
 25971 00001F6C 803E[4903]02            	cmp	byte [multi_pass_id],2
 25972                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25973                                  	; 27/10/2022
 25974 00001F71 73B2                    	jnb	short endconv	
 25975 00001F73 E90107                  	jmp	badop
 25976                                  	
 25977                                  coff:	
 25978                                  	; 11/12/2022
 25979                                  	; ds = cs
 25980                                  	;push	cs
 25981                                  	;pop	ds
 25982 00001F76 E86310                  	call	newline
 25983 00001F79 EBD6                    	jmp	short conflp	; 13/05/2019
 25984                                  
 25985                                  blank_line:
 25986 00001F7B E86710                  	call	getchr
 25987 00001F7E EBD1                    	jmp	short conflp
 25988                                  
 25989                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25990                                  ; 11/12/2022
 25991                                  ; (there is not a jump or call to here from anywhere!)
 25992                                  ;coff_p:
 25993                                  	;push	cs
 25994                                  	;pop	ds
 25995                                  
 25996                                  ;to handle install= commands,we are going to use multi-pass.
 25997                                  ;the first pass handles the other commands and only set install_flag when
 25998                                  ;it finds any install command. the second pass will only handle the
 25999                                  ;install= command.
 26000                                  
 26001                                  ;------------------------------------------------------------------------------
 26002                                  ;install command
 26003                                  ;------------------------------------------------------------------------------
 26004                                  
 26005                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26006                                  	; (SYSINIT:2250h)
 26007                                  tryi:
 26008 00001F80 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 26009 00001F85 7503                    	jne	short not_init_pass
 26010 00001F87 E92301                  	jmp	multi_try_doshi
 26011                                  not_init_pass:
 26012 00001F8A 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 26013                                          ; 11/12/2022
 26014                                  	;je	short multi_pass_coff2	; now it is NOPs
 26015 00001F8F 74E5                    	je	short coff
 26016                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26017                                  	;je	short multi_pass_coff	
 26018                                  					; This pass can be made use of if
 26019                                  					; we want do some config.sys process
 26020                                  					; after device drivers are loaded
 26021                                  					; and before install= commands
 26022                                  					; are processed
 26023                                  
 26024 00001F91 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 26025 00001F96 7411                    	je	short multi_try_i
 26026 00001F98 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 26027                                  	; 11/12/2022
 26028                                  	;je	short multi_pass_coff2
 26029 00001F9B 74D9                    	je	short coff
 26030                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26031                                  	;je	short multi_pass_coff	
 26032                                  
 26033                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 26034                                  ;       but don't process them now.        
 26035                                          
 26036 00001F9D 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 26037                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 26038                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26039 00001FA0 752A                    	jne	short tryb	
 26040                                  	
 26041                                  	;or	word [install_flag],have_install_cmd ; set the flag
 26042 00001FA2 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 26043                                  multi_pass_coff2:
 26044 00001FA7 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 26045                                  
 26046                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26047                                  ;precheck_installhigh:
 26048                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 26049                                  ;       jne     short tryb		; carry on with normal processing
 26050                                  ;	;or	word [install_flag],have_install_cmd
 26051                                  ;	or	byte [install_flag],have_install_cmd ; 1
 26052                                  ;       jmp	short coff
 26053                                  
 26054                                  multi_try_i:
 26055 00001FA9 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 26056                                  	;jne	short multi_try_n	; no, check for installhigh
 26057                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26058 00001FAC 7505                    	jne	short multi_pass_filter
 26059                                  
 26060                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26061                                  ;;ifdef	MULTI_CONFIG
 26062                                  ;       call    query_user              ; query the user if config_cmd
 26063                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26064                                  ;;endif
 26065                                  
 26066 00001FAE E873F0                  	call	do_install_exec 	;install it.
 26067 00001FB1 EBC3                    	jmp	short coff		;to handle next install= command.
 26068                                  
 26069                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26070                                  %if 0
 26071                                  
 26072                                  multi_try_n:
 26073                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 26074                                          jne	short multi_pass_filter	; no. ignore this.
 26075                                  ;ifdef	MULTI_CONFIG
 26076                                          call    query_user              ; query the user if config_cmd
 26077                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26078                                  ;endif
 26079                                  
 26080                                  ;       The memory environment is in its normal DOS state, so do
 26081                                  ;       the standard calls to set the alloc strategy for loading high
 26082                                  
 26083                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 26084                                  	int	21h			;get alloc strategy
 26085                                  	mov	bx,ax
 26086                                          push    bx                      ; save for the return
 26087                                  
 26088                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 26089                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 26090                                  	int	21h			;set alloc strategy
 26091                                  
 26092                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 26093                                          int     21h                     ; get link state
 26094                                          xor     ah,ah                   ; clear top byte
 26095                                          push    ax                      ; save for return
 26096                                  
 26097                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 26098                                  	mov	bx,1
 26099                                  	int	21h			;link in UMBs
 26100                                  
 26101                                  	call	do_install_exec 	;install it.
 26102                                  
 26103                                          mov     ax,(ALLOCOPER<<8)|3
 26104                                          pop     bx                      ; recover original link state
 26105                                          int     21h
 26106                                          pop     bx                      ; recover original alloc strategy
 26107                                          mov     ax,(ALLOCOPER<<8)|1
 26108                                          int     21h
 26109                                  
 26110                                  	jmp	coff			;to handle next install= command.
 26111                                  
 26112                                  %endif
 26113                                  
 26114                                  multi_pass_filter:
 26115 00001FB3 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 26116 00001FB6 740A                    	je	short multi_pass_adjust
 26117 00001FB8 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 26118 00001FBB 7405                    	je	short multi_pass_adjust
 26119 00001FBD 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 26120 00001FC0 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 26121                                  
 26122                                  multi_pass_adjust:			; these commands need to
 26123 00001FC2 FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 26124 00001FC6 FF06[D203]              	inc	word [count]		;  for newline proc.
 26125                                  
 26126                                  multi_pass_coff:
 26127                                  	; 11/12/2022
 26128 00001FCA EBAA                    	jmp	short coff		; to handle next install= commands.
 26129                                  
 26130                                  ;------------------------------------------------------------------------------
 26131                                  ; buffer command
 26132                                  ;------------------------------------------------------------------------------
 26133                                  
 26134                                  ;******************************************************************************
 26135                                  ;									      *
 26136                                  ; function: parse the parameters of buffers= command.			      *
 26137                                  ;									      *
 26138                                  ; input :								      *
 26139                                  ;	es:si -> parameters in command line.				      *
 26140                                  ; output:								      *
 26141                                  ;	buffers set							      *
 26142                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 26143                                  ;	h_buffers set if secondary buffer cache specified.		      *
 26144                                  ;									      *
 26145                                  ; subroutines to be called:						      *
 26146                                  ;	sysinit_parse							      *
 26147                                  ; logic:								      *
 26148                                  ; {									      *
 26149                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 26150                                  ;	set dx,cx to 0; 						      *
 26151                                  ;	reset buffer_slash_x;						      *
 26152                                  ;	while (end of command line)					      *
 26153                                  ;	{ sysinit_parse;						      *
 26154                                  ;	  if (no error) then						      *
 26155                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 26156                                  ;		    buffer_slash_x = 1					      *
 26157                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 26158                                  ;			  buffers = result_val._$P_picked_val;		      *
 26159                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 26160                                  ;	  else	{show error message;error exit} 			      *
 26161                                  ;	};								      *
 26162                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 26163                                  ; };									      *
 26164                                  ;									      *
 26165                                  ;******************************************************************************
 26166                                  
 26167                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26168                                  	; (SYSINIT:229Ch)
 26169                                  tryb:
 26170 00001FCC 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 26171 00001FCF 7557                    	jne	short tryc
 26172                                  
 26173                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26174                                  ;;ifdef	MULTI_CONFIG
 26175                                  ;       call    query_user              ; query the user if config_cmd
 26176                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 26177                                  ;;endif
 26178                                  
 26179                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26180                                  	; 18/12/2022
 26181 00001FD1 31C9                    	xor	cx,cx
 26182                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 26183 00001FD3 880E[C41C]              	mov	[p_buffer_slash_x],cl ; 0
 26184                                  
 26185 00001FD7 BF[7D1C]                	mov	di,buf_parms
 26186                                  	;xor	cx,cx	; 18/12/2022
 26187                                  	; 04/01/2023
 26188                                  	;mov	dx,cx
 26189                                  do7:
 26190 00001FDA E87B06                  	call	sysinit_parse
 26191 00001FDD 7303                    	jnc	short if7		; parse error,
 26192                                  	; 04/01/2023
 26193                                  	;call	badparm_p		;  and show messages and end the search loop.
 26194                                  	;;jmp	short sr7
 26195                                  	; 31/12/2022
 26196                                  ;sr7:
 26197                                  	;jmp	coff
 26198                                  	; 04/01/2023
 26199 00001FDF E9F405                  	jmp	badparm_p_coff
 26200                                  if7:
 26201 00001FE2 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26202 00001FE5 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 26203                                  	;cmp	word [result_val_swoff],switch_x
 26204 00001FE7 813E[C81C][BD1C]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 26205                                  	;jne	short if11
 26206                                  	; 31/12/2022
 26207 00001FED 74EB                    	je	short do7 ;je short en11
 26208                                  
 26209                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 26210                                  	;jmp	short en11 ; 31/12/2022
 26211                                  if11:
 26212                                  	;mov	ax,[rv_dword]
 26213 00001FEF A1[CA1C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26214 00001FF2 83F901                  	cmp	cx,1
 26215 00001FF5 7505                    	jne	short if13
 26216                                  
 26217 00001FF7 A3[C01C]                	mov	[p_buffers],ax
 26218                                  	;jmp	short en11
 26219                                  	; 31/12/2022
 26220 00001FFA EBDE                    	jmp	short do7
 26221                                  if13:
 26222 00001FFC A3[C21C]                	mov	[p_h_buffers],ax
 26223                                  en11:
 26224 00001FFF EBD9                    	jmp	short do7
 26225                                  en7:
 26226 00002001 833E[C01C]63            	cmp	word [p_buffers],99
 26227 00002006 760B                    	jbe	short if18
 26228                                  
 26229                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 26230                                  ;	jne	short if18
 26231                                  
 26232 00002008 E87806                  	call	badparm_p
 26233 0000200B C706[C21C]0000          	mov	word [p_h_buffers],0
 26234 00002011 EB12                    	jmp	short sr7
 26235                                  if18:
 26236 00002013 A1[C01C]                	mov	ax,[p_buffers]	; we don't have any problem.
 26237 00002016 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 26238                                  
 26239 00002019 A1[C21C]                	mov	ax,[p_h_buffers]
 26240 0000201C A3[9902]                	mov	[h_buffers],ax
 26241                                  
 26242                                  ;	mov	al,[p_buffer_slash_x]	; M016
 26243                                  ;	mov	[buffer_slash_x],al
 26244                                  
 26245 0000201F A1[2B03]                	mov	ax,[linecount]
 26246 00002022 A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 26247                                  	; 31/12/2022
 26248                                  	;jmp	short sr7
 26249                                  	; 04/01/2023
 26250                                  sr7:
 26251 00002025 E94EFF                  	jmp	coff
 26252                                  
 26253                                  ;------------------------------------------------------------------------------
 26254                                  ; break command
 26255                                  ;------------------------------------------------------------------------------
 26256                                  
 26257                                  ;****************************************************************************
 26258                                  ;									    *
 26259                                  ; function: parse the parameters of break = command.			    *
 26260                                  ;									    *
 26261                                  ; input :								    *
 26262                                  ;	es:si -> parameters in command line.				    *
 26263                                  ; output:								    *
 26264                                  ;	turn the control-c check on or off.				    *
 26265                                  ;									    *
 26266                                  ; subroutines to be called:						    *
 26267                                  ;	sysinit_parse							    *
 26268                                  ; logic:								    *
 26269                                  ; {									    *
 26270                                  ;	set di to brk_parms;						    *
 26271                                  ;	set dx,cx to 0; 						    *
 26272                                  ;	while (end of command line)					    *
 26273                                  ;	{ sysinit_parse;						    *
 26274                                  ;	  if (no error) then						    *
 26275                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 26276                                  ;		   set p_ctrl_break,on;					    *
 26277                                  ;	       else					  /*off 	 */ *
 26278                                  ;		   set p_ctrl_break,off;				    *
 26279                                  ;	  else {show message;error_exit};				    *
 26280                                  ;	};								    *
 26281                                  ;	if (no error) then						    *
 26282                                  ;	   dos function call to set ctrl_break check according to	    *
 26283                                  ; };									    *
 26284                                  ;									    *
 26285                                  ;****************************************************************************
 26286                                  
 26287                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26288                                  	; (SYSINIT:22FFh)
 26289                                  tryc:
 26290 00002028 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 26291 0000202B 7534                    	jne	short trym
 26292                                  
 26293                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26294                                  ;;ifdef MULTI_CONFIG
 26295                                  ;       call    query_user              ; query the user if config_cmd
 26296                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 26297                                  ;;endif
 26298 0000202D BF[CE1C]                	mov	di,brk_parms
 26299 00002030 31C9                    	xor	cx,cx
 26300                                  	; 04/01/2023
 26301                                  	;mov	dx,cx
 26302                                  do22:
 26303 00002032 E82306                  	call	sysinit_parse
 26304 00002035 7303                    	jnc	short if22		; parse error
 26305                                  	;call	badparm_p		;  show message and end the search loop.
 26306                                  	;;jmp	short sr22
 26307                                  	; 31/12/2022
 26308                                  ;sr22:
 26309                                  	;jmp	coff
 26310                                  	; 04/01/2023
 26311 00002037 E99C05                  	jmp	badparm_p_coff
 26312                                  if22:
 26313 0000203A 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26314 0000203D 7415                    	je	short en22		; then end the $endloop
 26315                                  
 26316                                  	;cmp	byte [result_val_itag],1
 26317 0000203F 803E[C71C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26318 00002044 7507                    	jne	short if26
 26319                                  
 26320 00002046 C606[F31C]01            	mov	byte [p_ctrl_break],1	; turn it on
 26321                                  	;jmp	short en26
 26322                                  	; 31/12/2022
 26323 0000204B EBE5                    	jmp	short do22
 26324                                  if26:
 26325 0000204D C606[F31C]00            	mov	byte [p_ctrl_break],0	; turn it off
 26326                                  en26:
 26327 00002052 EBDE                    	jmp	short do22		; we actually set the ctrl break
 26328                                  en22:
 26329 00002054 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 26330 00002056 B001                    	mov	al,1
 26331 00002058 8A16[F31C]              	mov	dl,[p_ctrl_break]
 26332 0000205C CD21                    	int	21h
 26333                                  	; 31/12/2022
 26334                                  	;jmp	short sr22
 26335                                  	; 04/01/2023
 26336                                  sr22:
 26337 0000205E E915FF                  	jmp	coff
 26338                                  
 26339                                  ;------------------------------------------------------------------------------
 26340                                  ; multitrack command
 26341                                  ;------------------------------------------------------------------------------
 26342                                  
 26343                                  ;******************************************************************************
 26344                                  ;									      *
 26345                                  ; function: parse the parameters of multitrack= command.		      *
 26346                                  ;									      *
 26347                                  ; input :								      *
 26348                                  ;	es:si -> parameters in command line.				      *
 26349                                  ; output:								      *
 26350                                  ;	turn multrk_flag on or off.					      *
 26351                                  ;									      *
 26352                                  ; subroutines to be called:						      *
 26353                                  ;	sysinit_parse							      *
 26354                                  ; logic:								      *
 26355                                  ; {									      *
 26356                                  ;	set di to brk_parms;						      *
 26357                                  ;	set dx,cx to 0; 						      *
 26358                                  ;	while (end of command line)					      *
 26359                                  ;	{ sysinit_parse;						      *
 26360                                  ;	  if (no error) then						      *
 26361                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 26362                                  ;		   set p_mtrk,on;					      *
 26363                                  ;	       else					  /*off 	 */   *
 26364                                  ;		   set p_mtrk,off;					      *
 26365                                  ;	  else {show message;error_exit};				      *
 26366                                  ;	};								      *
 26367                                  ;	if (no error) then						      *
 26368                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 26369                                  ;									      *
 26370                                  ; };									      *
 26371                                  ;									      *
 26372                                  ;******************************************************************************
 26373                                  
 26374                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26375                                  trym:
 26376 00002061 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 26377 00002064 7569                    	jne	short tryu
 26378                                  
 26379                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26380                                  ;;ifdef	MULTI_CONFIG
 26381                                  ;       call    query_user      ; query the user if config_cmd
 26382                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 26383                                  ;;endif
 26384 00002066 BF[D21D]                	mov	di,mtrk_parms
 26385 00002069 31C9                    	xor	cx,cx
 26386                                  	; 04/01/2023
 26387                                  	;mov	dx,cx
 26388                                  do31:
 26389 0000206B E8EA05                  	call	sysinit_parse
 26390 0000206E 7303                    	jnc	short if31	; parse error
 26391                                  	;call	badparm_p	;  show message and end the search loop.
 26392                                  	;;jmp	short sr31
 26393                                  	; 31/12/2022
 26394                                  ;sr31:
 26395                                  	;jmp	coff
 26396                                  	; 04/01/2023
 26397 00002070 E96305                  	jmp	badparm_p_coff
 26398                                  if31:
 26399 00002073 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26400 00002076 7415                    	je	short en31	; then end the $endloop
 26401                                  
 26402                                  	;cmp	byte [result_val_itag],1
 26403 00002078 803E[C71C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26404 0000207D 7507                    	jne	short if35
 26405                                  
 26406 0000207F C606[E61D]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 26407                                  	;jmp	short en35
 26408                                  	; 31/12/2022
 26409 00002084 EBE5                    	jmp	short do31
 26410                                  if35:
 26411 00002086 C606[E61D]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 26412                                  en35:
 26413 0000208B EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 26414                                  en31:
 26415 0000208D 1E                      	push	ds
 26416                                  	;;mov	ax,Bios_Data ; 70h
 26417                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26418                                  	; 21/10/2022
 26419 0000208E B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26420 00002091 8ED8                    	mov	ds,ax
 26421                                  
 26422 00002093 2E803E[E61D]00          	cmp	byte [cs:p_mtrk],0
 26423 00002099 7508                    	jne	short if39
 26424                                  
 26425 0000209B C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 26426 000020A1 EB06                    	jmp	short en39
 26427                                  if39:
 26428 000020A3 C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 26429                                  en39:
 26430 000020A9 1F                      	pop	ds
 26431                                  	; 31/12/2022
 26432                                  	;jmp	short sr31
 26433                                  	; 04/01/2023
 26434                                  sr31:
 26435 000020AA E9C9FE                  	jmp	coff
 26436                                  
 26437                                  ;----------------------------------------------------------------------------
 26438                                  ; DOS=HIGH/LOW command
 26439                                  ;----------------------------------------------------------------------------
 26440                                  
 26441                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26442                                  multi_try_doshi:
 26443 000020AD 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 26444 000020B0 7403                    	je	short it_is_h
 26445                                  skip_it:
 26446 000020B2 E9FEFE                  	jmp	multi_pass_filter
 26447                                  it_is_h:				; M003 - removed initing DevUMB
 26448                                  					;	 & runhigh
 26449                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26450                                  ;;ifdef	MULTI_CONFIG
 26451                                  ;       call    query_user              ; query the user if config_cmd
 26452                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 26453                                  ;;endif
 26454 000020B5 BF[1D1E]                	mov	di,dos_parms
 26455 000020B8 31C9                    	xor	cx,cx
 26456                                  	; 04/01/2023
 26457                                  	;mov	dx,cx
 26458                                  h_do_parse:
 26459 000020BA E89B05                  	call	sysinit_parse
 26460 000020BD 7303                    	jnc	short h_parse_ok	; parse error
 26461                                  h_badparm:
 26462                                  	; 04/01/2023
 26463                                  	;call	badparm_p		; show message and end the search loop.
 26464                                  	;;jmp	short h_end
 26465                                  	; 11/12/2022
 26466                                  ;h_end:
 26467                                  	;jmp	coff
 26468                                  	; 04/01/2023
 26469 000020BF E91405                  	jmp	badparm_p_coff	
 26470                                  h_parse_ok:
 26471 000020C2 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26472 000020C5 7405                    	je	short h_end		; then end the $endloop
 26473 000020C7 E81006                  	call	ProcDOS
 26474 000020CA EBEE                    	jmp	short h_do_parse
 26475                                  	; 11/12/2022
 26476                                  	; 04/01/2023
 26477                                  h_end:
 26478 000020CC E9A7FE                  	jmp	coff
 26479                                  
 26480                                  ;-----------------------------------------------------------------------------
 26481                                  ; devicehigh command
 26482                                  ;-----------------------------------------------------------------------------
 26483                                  
 26484                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26485                                  tryu:
 26486 000020CF 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 26487 000020D2 7539                    	jne	short tryd
 26488                                  
 26489                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26490                                  ;;ifdef	MULTI_CONFIG
 26491                                  ;       call    query_user              ; query the user if config_cmd
 26492                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 26493                                  ;;endif
 26494                                  
 26495                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26496                                  ;	call	InitVar
 26497                                  ;	call	ParseSize		; process the size= option
 26498                                  ;	;jnc	short tryu_0
 26499                                  	
 26500                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 26501                                  
 26502                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26503                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 26504                                  	;mov	[cs:badparm_seg], es
 26505                                  	; 11/12/2022
 26506                                  	; ds = cs
 26507 000020D4 8936[1114]              	mov	[badparm_off], si
 26508 000020D8 8C06[1314]              	mov	[badparm_seg], es
 26509                                  	;
 26510 000020DC E86608                  	call	ParseSize
 26511 000020DF 7303                    	jnc	short tryu_2	; 28/10/2022
 26512                                  
 26513                                  	;call	badparm_p
 26514                                  	;jmp	coff
 26515                                  	; 04/01/2023
 26516 000020E1 E9F204                  	jmp	badparm_p_coff
 26517                                  
 26518                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26519                                  ;tryu_0:
 26520                                  ;	mov	ax,[cs:DevSizeOption]
 26521                                  ;	or	ax,ax
 26522                                  ;	jnz	short tryu_2
 26523                                  ;
 26524                                  ;	call	ParseVar
 26525                                  ;	jnc	short tryu_2
 26526                                  ;tryu_1:
 26527                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 26528                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 26529                                  ;	call	badparm_p		; so all we have to do is choke and
 26530                                  ;	jmp	coff			; die, rather verbosely.
 26531                                  
 26532                                  tryu_2:	
 26533 000020E4 56                      	push	si
 26534 000020E5 06                      	push	es
 26535                                  tryu_3:
 26536 000020E6 268A04                  	mov	al,[es:si]
 26537 000020E9 3C0D                    	cmp	al,cr
 26538 000020EB 740C                    	je	short tryu_4
 26539 000020ED 3C0A                    	cmp	al,lf
 26540 000020EF 7408                    	je	short tryu_4
 26541 000020F1 E8CC0E                  	call	delim
 26542 000020F4 7403                    	jz	short tryu_4
 26543 000020F6 46                      	inc	si
 26544 000020F7 EBED                    	jmp	short tryu_3
 26545                                  tryu_4:	
 26546                                  	; 11/12/2022
 26547                                  	; ds = cs
 26548 000020F9 A2[921E]                	mov	[DevSavedDelim],al
 26549                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 26550                                  					;  it with null
 26551                                  	; 18/12/2022
 26552 000020FC 29DB                    	sub	bx,bx
 26553 000020FE 26881C                  	mov	[es:si],bl ; 0
 26554                                   	;mov	byte [es:si],0
 26555                                  
 26556 00002101 07                      	pop	es
 26557 00002102 5E                      	pop	si
 26558                                  
 26559                                  ;------------------------------------------------------------------------------
 26560                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26561                                  ;------------------------------------------------------------------------------
 26562                                  
 26563                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26564                                  ;
 26565                                  ;	call	UmbTest			; See if UMBs are around...
 26566                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 26567                                  ;
 26568                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26569                                  ;	jmp	short LoadDevice
 26570                                  
 26571                                  ;------------------------------------------------------------------------------
 26572                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26573                                  ;------------------------------------------------------------------------------
 26574                                  
 26575                                  NrmTst:
 26576                                  	; 11/12/2022
 26577                                  	; ds = cs
 26578                                  	;;mov	byte [cs:DeviceHi],0
 26579                                  	;mov	byte [DeviceHi],0
 26580                                  	; 18/12/2022
 26581                                  	; bx = 0
 26582 00002103 381E[6E1E]              	cmp	[DevUMB],bl ; 0
 26583                                  	;cmp	byte [DevUMB],0
 26584                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26585 00002107 7417                    	je	short LoadDevice	; no, we don't
 26586                                  	;mov	byte [cs:DeviceHi],1
 26587                                  	; 11/12/2022
 26588                                  	;mov	byte [DeviceHi],1
 26589                                  	; 18/12/2022
 26590 00002109 FEC3                    	inc	bl ; mov bl,1 ; (*)
 26591                                  	; 11/12/2022
 26592                                  	;jmp	short LoadDevice2	; 11/12/2022
 26593 0000210B EB13                    	jmp	short LoadDevice
 26594                                  
 26595                                  ;------------------------------------------------------------------------------
 26596                                  ; device command
 26597                                  ;------------------------------------------------------------------------------
 26598                                  
 26599                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26600                                  	; (SYSINIT:2401h)
 26601                                  tryd:
 26602                                  	; 11/12/2022
 26603 0000210D 31DB                    	xor 	bx, bx
 26604                                  	;
 26605 0000210F 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 26606 00002112 7403                    	je	short gotd
 26607                                  skip_it2:
 26608 00002114 E93302                  	jmp	tryq
 26609                                  gotd:
 26610                                  
 26611                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26612                                  ;;ifdef	MULTI_CONFIG
 26613                                  ;       call    query_user              ; query the user if config_cmd
 26614                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26615                                  ;;endif
 26616                                  	; 11/12/2022
 26617                                  	; ds = cs
 26618                                  	;mov	byte [DeviceHi],0
 26619                                  	;mov	word [DevSizeOption],0
 26620 00002117 891E[7E1E]              	mov	[DevSizeOption],bx ; 0
 26621 0000211B C606[921E]20            	mov	byte [DevSavedDelim],' '
 26622                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 26623                                  	;mov	word [cs:DevSizeOption],0
 26624                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 26625                                  					;  be replaced with a ' '
 26626                                  LoadDevice:                             ; device= or devicehigh= command.
 26627                                  	; 11/12/2022
 26628                                  	;mov	byte [DeviceHi],0
 26629 00002120 881E[7D1E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26630                                  LoadDevice2:
 26631                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26632                                  	;
 26633                                  	;push    cs
 26634                                          ;pop     ds
 26635                                  	;
 26636                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26637                                  	;mov	[bpb_addr+2],es
 26638                                  	;
 26639                                  	;mov	[DevCmdLine],si		; save it for ourself
 26640                                  	;mov	[DevCmdLine+2],es
 26641                                  	;
 26642                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26643                                  
 26644                                  	; 11/12/2022
 26645                                  	; ds = cs
 26646                                  	;mov	bx,cs
 26647                                  	;mov	ds,bx
 26648                                  
 26649                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26650 00002124 8936[F803]              	mov	[bpb_addr],si
 26651                                  	;mov	[cs:bpb_addr+2],es
 26652 00002128 8C06[FA03]              	mov	[bpb_addr+2],es
 26653                                  
 26654                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26655 0000212C 8936[8E1E]              	mov	[DevCmdLine],si
 26656                                  	;mov	[cs:DevCmdLine+2],es	
 26657 00002130 8C06[901E]              	mov	[DevCmdLine+2],es	
 26658                                  
 26659 00002134 E8E00E                  	call	round
 26660                                  	
 26661 00002137 E81B07                  	call	SizeDevice
 26662 0000213A 7215                    	jc	short BadFile
 26663                                  
 26664                                  	; 11/12/2022
 26665                                  	; ds = cs
 26666                                  
 26667                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26668                                  
 26669                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26670                                  ;
 26671                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26672                                  ;
 26673                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26674                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26675                                  ;	jz	short DevConvLoad	; the actual load.
 26676                                  ;
 26677                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26678                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26679                                  ;
 26680                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26681                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26682                                  ;
 26683                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26684                                  ;
 26685                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26686                                  ;	or	ax,ax
 26687                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26688                                  ;
 26689                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26690                                  ;	jge	short DevConvLoad
 26691                                  ;
 26692                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26693                                  ;	call	StoLoadSize		; minsize for load UMB.
 26694                                  
 26695                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26696                                  
 26697                                  DevConvLoad:
 26698                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26699 0000213C E83206                  	call	InitDevLoad
 26700                                  
 26701                                  	; 11/12/2022
 26702                                  	; ds = cs
 26703 0000213F A1[621E]                	mov	ax,[DevLoadAddr]
 26704 00002142 0306[601E]              	add	ax,[DevSize]
 26705 00002146 7206                    	jc	short NoMem
 26706 00002148 3906[641E]              	cmp	[DevLoadEnd],ax
 26707 0000214C 7312                    	jae	short LoadDev
 26708                                  	
 26709                                  	; 11/12/2022
 26710                                  	;mov	ax,[cs:DevLoadAddr]
 26711                                  	;add	ax,[cs:DevSize]
 26712                                  	;jc	short NoMem
 26713                                  	;cmp	[cs:DevLoadEnd],ax
 26714                                  	;jae	short LoadDev
 26715                                  NoMem:
 26716                                  	; 11/12/2022
 26717                                  	; ds = cs
 26718                                  	;jmp	mem_err
 26719 0000214E E9050F                  	jmp	mem_err2
 26720                                  
 26721                                  BadFile:
 26722                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26723                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26724                                  	;cmp    byte [es:si],' '
 26725                                          ;jae	short tryd_2
 26726 00002151 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26727 00002155 7503                            jne	short tryd_2
 26728 00002157 E91D05                  	jmp	badop
 26729                                  tryd_2:
 26730 0000215A E80811                  	call	badload
 26731 0000215D E916FE                  	jmp	coff
 26732                                  
 26733                                  LoadDev:
 26734 00002160 06                      	push	es
 26735 00002161 1F                      	pop	ds
 26736                                  
 26737 00002162 89F2                    	mov	dx,si			;ds:dx points to file name
 26738 00002164 E83F07                  	call	ExecDev			; load device driver using exec call
 26739                                  badldreset:
 26740 00002167 1E                      	push	ds
 26741 00002168 07                      	pop	es			;es:si back to config.sys
 26742 00002169 0E                      	push	cs
 26743 0000216A 1F                      	pop	ds			;ds back to sysinit
 26744 0000216B 72E4                    	jc	short BadFile
 26745                                  goodld:
 26746                                  	; 11/12/2022
 26747                                  	; ds = cs
 26748                                  
 26749 0000216D 06                      	push	es
 26750 0000216E 56                      	push	si
 26751 0000216F E85107                  	call	RemoveNull
 26752 00002172 06                      	push	es
 26753 00002173 56                      	push	si
 26754                                  
 26755 00002174 0E                      	push	cs
 26756 00002175 07                      	pop	es
 26757                                  
 26758 00002176 1E                      	push	ds
 26759 00002177 56                      	push	si
 26760                                  
 26761                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26762                                  	; 31/12/2022
 26763                                  	; ds = cs
 26764 00002178 C536[661E]              	lds	si,[DevEntry]
 26765                                  	
 26766                                  	;test	word [si+4],8000h
 26767                                  	; 11/12/2022
 26768 0000217C F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26769                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26770 00002180 7511                    	jnz	short got_device_com_cont   ; no.
 26771                                  
 26772 00002182 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26773                                  	;cmp	byte [si+32],26
 26774 00002187 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26775 0000218B 7206                    	jb	short got_device_com_cont
 26776                                  
 26777 0000218D 5E                      	pop	si
 26778 0000218E 1F                      	pop	ds
 26779                                  
 26780 0000218F 5E                      	pop	si			; clear the stack
 26781 00002190 07                      	pop	es
 26782                                  
 26783                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26784                                  	;call	RetFromUM		; Do this before we leave
 26785                                  
 26786 00002191 EB55                    	jmp	short badnumblock
 26787                                  
 26788                                  got_device_com_cont:
 26789 00002193 5E                      	pop	si
 26790 00002194 1F                      	pop	ds
 26791                                  
 26792                                  	; 11/12/2022
 26793                                  	; ds = cs
 26794                                  
 26795 00002195 E86505                  	call	LieInt12Mem
 26796 00002198 E8C405                  	call	UpdatePDB		; update the PSP:2 value M020
 26797                                  
 26798                                  	; 11/12/2022
 26799                                  	; ds = cs
 26800                                  	; 08/09/2023
 26801 0000219B 31C0                    	xor	ax, ax ; 0
 26802 0000219D 3806[0D14]              	cmp	byte [multdeviceflag],al ; 0
 26803                                  	;cmp	byte [multdeviceflag],0
 26804                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26805                                  					;  driver in the file ; M027
 26806 000021A1 750B                    	jne	short skip_pass_limit	;		      ; M027
 26807                                  
 26808                                  	; 11/12/2022
 26809                                  	; ds = cs
 26810                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26811                                  	;mov	bx,[cs:DevLoadEnd]
 26812                                  	;mov	[cs:break_addr+2],bx
 26813                                  
 26814                                  	;mov	word [break_addr],0
 26815                                  	; 08/09/2023
 26816 000021A3 A3[F403]                	mov	[break_addr],ax ; 0
 26817 000021A6 8B1E[641E]              	mov	bx,[DevLoadEnd]
 26818 000021AA 891E[F603]              	mov	[break_addr+2],bx
 26819                                  
 26820                                  skip_pass_limit:
 26821                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26822                                  ;	number of installed devices (including DblSpace drives) where
 26823                                  ;	"drivenumber" is the number that the next block device will
 26824                                  ;	be assigned to. Because some naughty device drivers (like
 26825                                  ;	interlnk) look at the internal DOS variable instead of the
 26826                                  ;	value we pass it, we'll temporarily stick our value into
 26827                                  ;	DOS DATA while we're initializing the device drivers.
 26828                                  ;
 26829                                  ;	Note that this will make it impossible for this device
 26830                                  ;	driver to access the DblSpace drive letters, whether
 26831                                  ;	they are swapped-hosts or unswapped compressed drives,
 26832                                  ;	during its initialization phase.
 26833                                  
 26834                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26835                                  	;push	ds
 26836                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26837                                  	;
 26838                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26839                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26840                                  	;mov	ah,al
 26841                                  	;
 26842                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26843                                  	;pop	ds
 26844                                  	;
 26845                                  	;push	ax			; save real sysi_numio/ncds in ax
 26846                                  
 26847                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26848                                  	; (SYSINIT:24B9h)
 26849                                  
 26850 000021AE BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26851 000021B1 E8AB0E                  	call	calldev 		; calldev (sdevstrat);
 26852 000021B4 BB0800                  	mov	bx,SYSDEV.INT ; 8
 26853 000021B7 E8A50E                  	call	calldev 		; calldev (sdevint);
 26854                                  
 26855                                  	; 11/12/2022
 26856                                  	; ds <> cs
 26857                                  
 26858                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26859                                  	;pop	ax			; get real sysi_numio value
 26860                                  	;push	ds
 26861                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26862                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26863                                  	;pop	ds
 26864                                  
 26865                                  	; 11/12/2022
 26866 000021BA 0E                      	push	cs
 26867 000021BB 1F                      	pop	ds
 26868                                  
 26869 000021BC E86E05                  	call	TrueInt12Mem
 26870                                  
 26871                                  	; 11/12/2022
 26872                                  	; ds = cs
 26873                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26874                                  	;mov	[cs:DevBrkAddr],ax
 26875                                  	;mov	ax,[cs:break_addr+2]
 26876                                  	;mov	[cs:DevBrkAddr+2],ax
 26877 000021BF A1[F403]                	mov	ax,[break_addr]	
 26878 000021C2 A3[6A1E]                	mov	[DevBrkAddr],ax
 26879 000021C5 A1[F603]                	mov	ax,[break_addr+2]
 26880 000021C8 A3[6C1E]                	mov	[DevBrkAddr+2],ax
 26881                                  
 26882                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26883                                  	;call	RetFromUM		; There we go... all done.
 26884                                  
 26885                                  	; 11/12/2022
 26886 000021CB 803E[6E1E]00            	cmp	byte [DevUMB],0	
 26887                                  	;cmp	byte [cs:DevUMB],0
 26888 000021D0 7403                    	je	short tryd_3
 26889 000021D2 E8D208                  	call	AllocUMB
 26890                                  	; 31/12/2022
 26891                                  	; ds= cs
 26892                                  tryd_3:
 26893                                  
 26894                                  ;ifndef ROMDOS
 26895                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26896                                  
 26897                                  	; 11/12/2022
 26898                                  	; ds = cs
 26899                                  	
 26900                                  	;cmp	byte [cs:runhigh],0FFh
 26901 000021D5 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26902 000021DA 7503                    	jne	short tryd_4
 26903                                  	
 26904                                  	; 11/12/2022
 26905                                  	; ds = cs
 26906 000021DC E8F4E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26907                                  tryd_4:
 26908                                  ;endif ; ROMDOS
 26909                                  
 26910 000021DF 5E                      	pop	si
 26911 000021E0 1F                      	pop	ds
 26912 000021E1 C60400                  	mov	byte [si],0		; *p = 0;
 26913                                  
 26914 000021E4 0E                      	push	cs
 26915 000021E5 1F                      	pop	ds
 26916                                  
 26917 000021E6 EB1F                    	jmp	short was_device_com
 26918                                  
 26919                                  ;----------------------------------------------------------------------------
 26920                                  
 26921                                  ;02/04/2019 - Retro DOS v4.0
 26922                                  
 26923                                  badnumblock:
 26924 000021E8 0E                      	push	cs
 26925 000021E9 1F                      	pop	ds
 26926 000021EA BA[5E37]                	mov	dx,badblock
 26927 000021ED E89D10                  	call	print
 26928                                  
 26929                                  ;------ fall thru -----------------------------------------------------------
 26930                                  
 26931                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26932                                  	
 26933                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26934                                  	
 26935 000021F0 5E                      	pop	si
 26936 000021F1 07                      	pop	es
 26937                                  
 26938 000021F2 0E                      	push	cs
 26939 000021F3 1F                      	pop	ds
 26940                                  
 26941                                  skip1_resetmemhi:
 26942                                  	; 11/12/2022
 26943                                  	; ds = cs
 26944 000021F4 833E[FD03]00            	cmp	word [configmsgflag],0
 26945                                  	;cmp	word [cs:configmsgflag],0
 26946 000021F9 7409                    	je	short no_error_line_msg
 26947                                  
 26948 000021FB E8AD04                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26949                                  	; 11/12/2022
 26950                                  	; ds = cs
 26951                                  	;mov	word [cs:configmsgflag],0
 26952 000021FE C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26953                                  
 26954                                  no_error_line_msg:
 26955 00002204 E96FFD                  	jmp	coff
 26956                                  
 26957                                  ;----------------------------------------------------------------------------
 26958                                  
 26959                                  was_device_com:
 26960                                  	; 14/12/2022
 26961                                  	; ds = cs
 26962 00002207 A1[6C1E]                	mov	ax,[DevBrkAddr+2]
 26963                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26964 0000220A 3B06[641E]              	cmp	ax,[DevLoadEnd]
 26965                                  	;cmp	ax,[cs:DevLoadEnd]
 26966 0000220E 7605                    	jbe	short breakok
 26967                                  
 26968 00002210 5E                      	pop	si
 26969 00002211 07                      	pop	es
 26970 00002212 E93CFF                  	jmp	BadFile
 26971                                  
 26972                                  breakok:
 26973                                  	; 14/12/2022
 26974                                  	; ds = cs
 26975 00002215 C43E[6B02]              	les	di,[DOSINFO] 
 26976 00002219 C516[661E]              	lds	dx,[DevEntry]
 26977                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26978 0000221D 89D6                    	mov	si,dx
 26979                                  
 26980                                  	; 14/11/2022
 26981                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26982                                  
 26983                                  	; 14/12/2022
 26984                                  	; ds <> cs
 26985                                  	
 26986                                  	;mov	ax,[si+4]
 26987 0000221F 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26988                                  	; 12/12/2022
 26989 00002222 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26990                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26991 00002225 7426                    	jz	short isblock
 26992                                  
 26993                                  ;------ lets deal with character devices
 26994                                  
 26995 00002227 2E800E[1014]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26996 0000222D E8C606                  	call	DevSetBreak		;go ahead and alloc mem for device
 26997                                  jc_edd:
 26998 00002230 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26999                                  
 27000                                  	; 12/12/2022
 27001 00002232 A801                    	test	al,ISCIN
 27002                                  	;test	ax,ISCIN ; 1		;is it a console in?
 27003 00002234 7408                    	jz	short tryclk
 27004                                  
 27005 00002236 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 27006 0000223A 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 27007                                  tryclk: 
 27008                                  	; 12/12/2022
 27009 0000223E A808                    	test	al,ISCLOCK
 27010                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 27011 00002240 7408                    	jz	short golink
 27012                                  
 27013 00002242 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 27014 00002246 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 27015                                  golink: 
 27016 0000224A E9B000                  	jmp	linkit
 27017                                  
 27018                                  ;------ deal with block device drivers
 27019                                  
 27020                                  isblock:
 27021 0000224D 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 27022 00002251 08C0                    	or	al,al
 27023 00002253 749B                    	jz	short erase_dev_do
 27024                                  	;mov	[si+10],al
 27025 00002255 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 27026                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27027                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 27028                                  perdrv:
 27029 00002258 98                      	cbw				; warning no device > 127 units
 27030 00002259 89C1                    	mov	cx,ax
 27031 0000225B 88E6                    	mov	dh,ah
 27032                                  	;mov	dl,[es:di+32]
 27033 0000225D 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 27034 00002261 88D4                    	mov	ah,dl
 27035 00002263 00C4                    	add	ah,al			; check for too many devices
 27036 00002265 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 27037 00002268 7603                    	jbe	short ok_block
 27038 0000226A E97BFF                  	jmp	badnumblock
 27039                                  
 27040                                  ok_block:
 27041 0000226D 2E800E[1014]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27042 00002273 E88006                  	call	DevSetBreak		; alloc the device
 27043 00002276 72B8                    	jc	short jc_edd
 27044 00002278 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 27045                                  
 27046 0000227C 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 27047 00002281 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 27048                                  perunit:
 27049 00002286 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 27050                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 27051                                  	; 11/12/2022
 27052 0000228B 26C46E00                	les	bp,[es:bp]
 27053                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27054                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 27055                                  scandpb:
 27056                                  	;cmp	word [es:bp+25],-1
 27057 0000228F 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 27058 00002294 7406                    	je	short foundpb
 27059                                  	;les	bp,[es:bp+25]
 27060 00002296 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 27061 0000229A EBF3                    	jmp	short scandpb
 27062                                  foundpb:
 27063 0000229C 2EA1[6A1E]              	mov	ax,[cs:DevBrkAddr]
 27064 000022A0 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 27065 000022A4 2EA1[6C1E]              	mov	ax,[cs:DevBrkAddr+2]
 27066 000022A8 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 27067                                  
 27068 000022AC 2EC42E[6A1E]            	les	bp,[cs:DevBrkAddr]
 27069 000022B1 2E8306[6A1E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 27070                                  
 27071 000022B7 E81B06                  	call	RoundBreakAddr
 27072                                  
 27073 000022BA 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 27074 000022C0 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 27075                                  
 27076 000022C5 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 27077 000022C7 43                      	inc	bx
 27078 000022C8 43                      	inc	bx			;point to next guy
 27079                                  	;mov	[es:bp+DPB.DRIVE],dx
 27080                                  	; 11/12/2022
 27081 000022C9 26895600                	mov	[es:bp],dx ; 13/05/2019
 27082                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27083                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 27084                                  	
 27085 000022CD B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 27086 000022CF CD21                    	int	21h
 27087                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 27088                                  			; DS:SI -> BPB (BIOS Parameter Block)
 27089                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 27090                                  
 27091                                  	;mov	ax,[es:bp+2]
 27092 000022D1 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 27093 000022D5 06                      	push	es
 27094 000022D6 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 27095                                  	;cmp	ax,[es:di+10h]
 27096 000022DB 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 27097 000022DF 07                      	pop	es
 27098                                  	;jna	short iblk_1
 27099                                  	;jmp	short bad_bpb_size_sector
 27100                                  	; 29/10/2022
 27101 000022E0 775A                    	ja	short bad_bpb_size_sector
 27102                                  iblk_1:
 27103 000022E2 1E                      	push	ds
 27104 000022E3 52                      	push	dx
 27105                                  
 27106 000022E4 2EC516[661E]            	lds	dx,[cs:DevEntry]
 27107                                  	;mov	[es:bp+13h],dx
 27108 000022E9 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 27109                                  	;mov	[es:bp+15h],ds
 27110 000022ED 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 27111                                  
 27112 000022F1 5A                      	pop	dx
 27113 000022F2 1F                      	pop	ds
 27114                                  
 27115 000022F3 42                      	inc	dx
 27116 000022F4 FEC6                    	inc	dh
 27117 000022F6 E28E                    	loop	perunit
 27118                                  
 27119 000022F8 0E                      	push	cs
 27120 000022F9 1F                      	pop	ds
 27121                                  
 27122 000022FA E8C8E8                  	call	TempCDS 		; set cds for new drives
 27123                                  linkit:
 27124 000022FD 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 27125 00002302 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 27126 00002306 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 27127                                  
 27128 0000230A 2EC536[661E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 27129 0000230F 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 27130 00002313 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 27131 00002317 8B04                    	mov	ax,[si]			;get pointer to next device
 27132 00002319 2EA3[661E]              	mov	[cs:DevEntry],ax	;and save it
 27133                                  
 27134 0000231D 890C                    	mov	[si],cx			;link in the driver
 27135 0000231F 895402                  	mov	[si+2],dx
 27136                                  enddev:
 27137 00002322 5E                      	pop	si
 27138 00002323 07                      	pop	es
 27139 00002324 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 27140 00002325 740B                    	jz	short coffj3
 27141                                  
 27142 00002327 2EFE06[0D14]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 27143 0000232C E8E905                  	call	DevBreak		; M009
 27144                                  	; 11/12/2022
 27145                                  	; ds = cs (DevBreak)
 27146                                  
 27147                                  	; 03/04/2019 - Retro DOS v4.0
 27148                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 27149 0000232F E93BFE                  	jmp	goodld			; otherwise pretend we loaded it in
 27150                                  coffj3: 
 27151                                  	; 18/12/2022
 27152                                  	; ax = 0
 27153 00002332 2EA2[0D14]              	mov	[cs:multdeviceflag],al ; 0
 27154                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 27155 00002336 E8DF05                  	call	DevBreak
 27156                                  	; 11/12/2022
 27157                                  	; ds = cs (DevBreak)
 27158                                  	
 27159                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 27160                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 27161                                  ;					;  created a bogus arena to try
 27162                                  ;					;  to protect some of its resident-
 27163                                  ;					;  init code.
 27164                                  	;call	CheckDoubleSpace
 27165 00002339 E93AFC                  	jmp	coff
 27166                                  
 27167                                  ;----------------------------------------------------------------------------
 27168                                  
 27169                                  ;CheckDoubleSpace:
 27170                                  ;;;;	ifdef	dblspace_hooks
 27171                                  ;
 27172                                  ;;	Now check for two special MagicDrv cases:
 27173                                  ;;
 27174                                  ;;       a) the last driver load was MagicDrv final placement:
 27175                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 27176                                  ;;
 27177                                  ;;       b) MagicDrv is currently in temporary home:
 27178                                  ;;          -> call it to give it a chance to mount and shuffle drives
 27179                                  ;
 27180                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 27181                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 27182                                  ;
 27183                                  ;;	Now inquire of driver whether it is present, and final located
 27184                                  ;
 27185                                  ;	mov	ax,multMagicdrv ; 4A11h
 27186                                  ;	mov	bx,MD_VERSION ; 0
 27187                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 27188                                  ;	or	ax,ax			; is it there?
 27189                                  ;	jnz	short no_more_magic_calls ; done if not
 27190                                  ;
 27191                                  ;	test	dx,8000h		; is it final placed?
 27192                                  ;	jnz	short magic_not_yet_home ;  skip if not
 27193                                  ;
 27194                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 27195                                  ;;	don't keep checking it, and add its number of drive letters
 27196                                  ;;	to drivenumber.
 27197                                  ;
 27198                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 27199                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 27200                                  ;;					;  the drive number we'll pass to the
 27201                                  ;;					;  next loadable block device.
 27202                                  ;
 27203                                  ;	jmp	short no_more_magic_calls ; and finished.
 27204                                  ;
 27205                                  ;magic_not_yet_home:
 27206                                  ;	push	es
 27207                                  ;	push	si
 27208                                  ;
 27209                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 27210                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 27211                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 27212                                  ;
 27213                                  ;	mov	bx,2
 27214                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 27215                                  ;;					;   by this many units
 27216                                  ;
 27217                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 27218                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 27219                                  ;;					;  sees this, to prevent bad things
 27220                                  ;;					;  from happening if people run the
 27221                                  ;;					;  new driver with an old BIOS
 27222                                  ;	call	far [cs:MagicBackdoor]
 27223                                  ;
 27224                                  ;	pop	si
 27225                                  ;	pop	es
 27226                                  ;
 27227                                  ;no_more_magic_calls:
 27228                                  ;
 27229                                  ;;;;	endif
 27230                                  ;	retn
 27231                                  
 27232                                  ; 03/04/2019 - Retro DOS v4.0
 27233                                  
 27234                                  bad_bpb_size_sector:
 27235 0000233C 5E                      	pop	si
 27236 0000233D 07                      	pop	es
 27237 0000233E BA[8036]                	mov	dx,badsiz_pre
 27238 00002341 BB[5E36]                	mov	bx,crlfm
 27239 00002344 E8240F                  	call	prnerr
 27240                                  
 27241 00002347 E92CFC                  	jmp	coff
 27242                                  
 27243                                  ;------------------------------------------------------------------------------
 27244                                  ; country command
 27245                                  ;      the syntax is:
 27246                                  ;	country=country id {,codepage {,path}}
 27247                                  ;	country=country id {,,path}	:default codepage id in dos
 27248                                  ;------------------------------------------------------------------------------
 27249                                  
 27250                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27251                                  	; (SYSINIT:2663h)
 27252                                  tryq:
 27253 0000234A 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 27254 0000234D 7403                    	je	short tryq_cont
 27255                                  skip_it3:
 27256 0000234F E90801                  	jmp	tryf
 27257                                  tryq_cont:
 27258                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27259                                  ;;ifdef	MULTI_CONFIG
 27260                                  ;       call    query_user		; query the user if config_cmd
 27261                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 27262                                  ;;endif
 27263                                  	; 14/12/2022
 27264                                  	; ds = cs
 27265                                  	; bx = 0
 27266                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 27267                                  	;mov	word [cs:p_code_page],0
 27268 00002352 881E[1633]              	mov	[cntry_drv],bl ; 0
 27269 00002356 891E[2B1D]              	mov	[p_code_page],bx ; 0
 27270                                  	
 27271 0000235A BF[F41C]                	mov	di,cntry_parms
 27272 0000235D 31C9                    	xor	cx,cx
 27273                                  	; 04/01/2023
 27274                                  	;mov	dx,cx
 27275                                  do52:
 27276 0000235F E8F602                  	call	sysinit_parse
 27277 00002362 730B                    	jnc	short if52		; parse error,check error code and
 27278                                  
 27279 00002364 E8E000                  	call	cntry_error		; show message and end the search loop.
 27280                                  	; 14/12/2022
 27281                                  	; ds = cs
 27282 00002367 C706[291D]FFFF          	mov	word [p_cntry_code],-1
 27283                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 27284 0000236D EB34                    	jmp	short sr52
 27285                                  if52:
 27286 0000236F 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 27287 00002372 742F                    	jz	short sr52		; then end the search loop
 27288                                  
 27289                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 27290                                  	; 14/12/2022
 27291                                  	; ds = cs
 27292 00002374 803E[C61C]01            	cmp	byte [result_val],_$P_Number	
 27293                                  	;cmp	byte [cs:result_val],_$P_Number
 27294 00002379 7512                    	jnz	short if56
 27295                                  
 27296                                  	;;mov	ax,[cs:rw_dword]
 27297                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27298                                  	; 14/12/2022
 27299 0000237B A1[CA1C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27300 0000237E 83F901                  	cmp	cx,1
 27301 00002381 7505                    	jne	short if57
 27302                                  
 27303                                  	;mov	[cs:p_cntry_code],ax
 27304                                  	; 14/12/2022
 27305 00002383 A3[291D]                	mov	[p_cntry_code],ax
 27306                                  
 27307                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27308                                  	;jmp	short en57
 27309                                  	; 12/12/2022
 27310                                  	;jmp	short en56
 27311 00002386 EBD7                    	jmp	short do52
 27312                                  
 27313                                  if57:
 27314                                  	;mov	[cs:p_code_page],ax
 27315                                  	; 14/12/2022
 27316                                  	; ds = cs
 27317 00002388 A3[2B1D]                	mov	[p_code_page],ax
 27318                                  en57:
 27319                                  	;jmp	short en56		; path entered
 27320                                  	; 12/12/2022
 27321 0000238B EBD2                    	jmp	short do52
 27322                                  
 27323                                  if56:
 27324 0000238D 1E                      	push	ds
 27325 0000238E 06                      	push	es
 27326 0000238F 56                      	push	si
 27327 00002390 57                      	push	di
 27328                                  
 27329 00002391 0E                      	push	cs
 27330 00002392 07                      	pop	es
 27331                                  
 27332                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 27333                                  	; 14/12/2022
 27334 00002393 C536[CA1C]              	lds	si,[rv_dword]
 27335 00002397 BF[1633]                	mov	di,cntry_drv
 27336 0000239A E8BD0E                  	call	move_asciiz
 27337                                  
 27338 0000239D 5F                      	pop	di
 27339 0000239E 5E                      	pop	si
 27340 0000239F 07                      	pop	es
 27341 000023A0 1F                      	pop	ds
 27342                                  
 27343                                  en56:
 27344 000023A1 EBBC                    	jmp	short do52
 27345                                  
 27346                                  sr52:
 27347                                  	; 14/12/2022
 27348                                  	; ds = cs
 27349 000023A3 833E[291D]FF            	cmp	word [p_cntry_code],-1
 27350                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 27351 000023A8 7509                    	jne	short tryq_open
 27352 000023AA E9C9FB                  	jmp	coff
 27353                                  
 27354                                  tryqbad:				;"invalid country code or code page"
 27355 000023AD F9                      	stc
 27356 000023AE BA[C736]                	mov     dx,badcountry
 27357 000023B1 EB79                    	jmp     tryqchkerr
 27358                                  
 27359                                  tryq_open:
 27360                                  	; 14/12/2022
 27361                                  	; ds = cs
 27362 000023B3 803E[1633]00            	cmp	byte [cntry_drv],0
 27363                                  	;cmp	byte [cs:cntry_drv],0
 27364 000023B8 7405                    	je	short tryq_def
 27365 000023BA BA[1633]                	mov	dx,cntry_drv
 27366 000023BD EB03                    	jmp	short tryq_openit
 27367                                  
 27368                                  tryq_def:
 27369 000023BF BA[1833]                	mov	dx,cntry_root
 27370                                  tryq_openit:
 27371 000023C2 B8003D                  	mov	ax,3D00h		;open a file
 27372 000023C5 F9                      	stc
 27373 000023C6 CD21                    	int	21h
 27374 000023C8 7242                    	jc	short tryqfilebad	;open failure
 27375                                  
 27376                                  	; 14/12/2022
 27377                                  	; ds = cs
 27378 000023CA A3[D803]                	mov	[cntryfilehandle],ax
 27379                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 27380 000023CD 89C3                    	mov	bx,ax
 27381 000023CF A1[291D]                	mov	ax,[p_cntry_code]
 27382 000023D2 8B16[2B1D]              	mov	dx,[p_code_page]
 27383                                  	;mov	ax,[cs:p_cntry_code]
 27384                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 27385                                  	;mov	cx,[cs:memhi]
 27386 000023D6 8B0E[E003]              	mov	cx,[memhi]
 27387 000023DA 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 27388                                  					; M023
 27389                                  	; 14/12/2022
 27390                                  	; ds = cs
 27391 000023DE 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 27392                                  	;cmp	cx,[cs:ALLOCLIM]
 27393 000023E2 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 27394                                  
 27395 000023E4 BE[1633]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 27396 000023E7 803C00                  	cmp	byte [si],0 		;default path?
 27397 000023EA 7502                    	jne	short tryq_set_for_dos
 27398                                  
 27399 000023EC 46                      	inc	si
 27400 000023ED 46                      	inc	si			;ds:si -> cntry_root
 27401                                  
 27402                                  tryq_set_for_dos:
 27403                                  	; 14/12/2022
 27404                                  	; ds = cs
 27405 000023EE C43E[7702]              	les	di,[sysi_country]
 27406                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 27407 000023F2 57                      	push	di			;save di
 27408                                  	;add	di,8
 27409 000023F3 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 27410 000023F6 E8610E                  	call	move_asciiz		;set the path to country.sys in dos.
 27411 000023F9 5F                      	pop	di			;es:di -> country info tab again.
 27412                                  
 27413                                  	; 14/12/2022	
 27414 000023FA 8B0E[E003]              	mov	cx,[memhi]
 27415                                  	;mov	cx,[cs:memhi]
 27416 000023FE 8ED9                    	mov	ds,cx
 27417 00002400 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 27418 00002402 E8DD0C                  	call	setdoscountryinfo	;now do the job!!!
 27419                                  	; ds <> cs ; 14/12/2022
 27420 00002405 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 27421                                  
 27422 00002407 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 27423 0000240A 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 27424                                  
 27425                                  tryqfilebad:
 27426 0000240C 0E                      	push	cs
 27427 0000240D 07                      	pop	es
 27428 0000240E 2E803E[1633]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 27429 00002414 7405                    	je	short tryqdefbad
 27430                                  
 27431 00002416 BE[1633]                	mov	si,cntry_drv
 27432 00002419 EB03                    	jmp	short tryqbadload
 27433                                  
 27434                                  tryqdefbad:				;default file has been used.
 27435 0000241B BE[1833]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 27436                                  tryqbadload:
 27437 0000241E E8440E                  	call	badload 		;ds will be restored to sysinit_seg
 27438                                  	;mov	cx,[cs:CONFBOT]
 27439                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27440                                  	;mov	cx,[cs:top_of_cdss]
 27441                                  	; 11/12/2022
 27442                                  	; ds = cs
 27443 00002421 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 27444 00002425 8EC1                    	mov	es,cx			;restore es -> confbot.
 27445 00002427 EB13                    	jmp	short coffj4
 27446                                  
 27447                                  tryqmemory:
 27448 00002429 BA[0A37]                	mov	dx,insufmemory
 27449                                  tryqchkerr:
 27450                                  	;mov	cx,[cs:CONFBOT]
 27451                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27452                                  	;mov	cx,[cs:top_of_cdss]
 27453                                  	; 12/12/2022
 27454 0000242C 0E                      	push	cs
 27455 0000242D 1F                      	pop	ds
 27456 0000242E 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 27457 00002432 8EC1                    	mov	es,cx			;restore es -> confbot seg
 27458                                  	;push	cs
 27459                                  	;pop	ds			;restore ds to sysinit_seg
 27460 00002434 7306                    	jnc	short coffj4		;if no error,then exit
 27461                                  
 27462 00002436 E8540E                  	call	print			;else show error message
 27463 00002439 E86F02                  	call	error_line
 27464                                  coffj4:
 27465                                  	;mov	bx,[cs:cntryfilehandle]
 27466                                  	; 11/12/2022
 27467                                  	; ds = cs
 27468 0000243C 8B1E[D803]              	mov	bx,[cntryfilehandle]
 27469 00002440 B43E                    	mov	ah,3Eh
 27470 00002442 CD21                    	int	21h			;close a file. don't care even if it fails.
 27471 00002444 E92FFB                  	jmp	coff
 27472                                  
 27473                                  ;--------------------------------------------
 27474                                  
 27475                                  cntry_error:
 27476                                  
 27477                                  ;function: show "invalid country code or code page" messages,or
 27478                                  ;		"error in country command" depending on the error code
 27479                                  ;		in ax returned by sysparse;
 27480                                  ;in:	ax - error code
 27481                                  ;	ds - sysinitseg
 27482                                  ;	es - confbot
 27483                                  ;out:	show message.  dx destroyed.
 27484                                  
 27485 00002447 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 27486 0000244A 7505                    	jne	short if64
 27487 0000244C BA[C736]                	mov	dx,badcountry		;"invalid country code or code page"
 27488 0000244F EB03                    	jmp	short en64
 27489                                  if64:
 27490 00002451 BA[ED36]                	mov	dx,badcountrycom	;"error in contry command"
 27491                                  en64:
 27492 00002454 E8360E                  	call	print
 27493                                  	;call	error_line
 27494                                  	;retn
 27495                                  	; 11/12/2022
 27496 00002457 E95102                  	jmp	error_line
 27497                                  
 27498                                  ;------------------------------------------------------------------------------
 27499                                  ; files command
 27500                                  ;------------------------------------------------------------------------------
 27501                                  
 27502                                  ;******************************************************************************
 27503                                  ; function: parse the parameters of files= command.			      *
 27504                                  ;									      *
 27505                                  ; input :								      *
 27506                                  ;	es:si -> parameters in command line.				      *
 27507                                  ; output:								      *
 27508                                  ;	variable files set.						      *
 27509                                  ;									      *
 27510                                  ; subroutines to be called:						      *
 27511                                  ;	sysinit_parse							      *
 27512                                  ; logic:								      *
 27513                                  ; {									      *
 27514                                  ;	set di points to files_parms;					      *
 27515                                  ;	set dx,cx to 0; 						      *
 27516                                  ;	while (end of command line)					      *
 27517                                  ;	{ sysinit_parse;						      *
 27518                                  ;	  if (no error) then						      *
 27519                                  ;	     files = result_val._$P_picked_val				      *
 27520                                  ;	  else								      *
 27521                                  ;	     error exit;						      *
 27522                                  ;	};								      *
 27523                                  ; };									      *
 27524                                  ;									      *
 27525                                  ;******************************************************************************
 27526                                  
 27527                                  tryf:
 27528 0000245A 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 27529 0000245D 7523                    	jne	short tryl
 27530                                  
 27531                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27532                                  ;;ifdef	MULTI_CONFIG
 27533                                  ;       call    query_user              ; query the user if config_cmd
 27534                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 27535                                  ;;endif
 27536                                  
 27537                                  	; 14/12/2022
 27538                                  	; ds = cs
 27539                                  
 27540 0000245F BF[2D1D]                	mov	di,files_parms
 27541 00002462 31C9                    	xor	cx,cx
 27542                                  	; 04/01/2023
 27543                                  	;mov	dx,cx
 27544                                  do67:
 27545 00002464 E8F101                  	call	sysinit_parse
 27546 00002467 7303                    	jnc	short if67		; parse error
 27547                                  	;call	badparm_p		;  and show messages and end the search loop.
 27548                                  	;jmp	short sr67
 27549                                  	; 04/01/2023
 27550 00002469 E96A01                  	jmp	badparm_p_coff
 27551                                  if67:
 27552 0000246C 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27553 0000246F 7408                    	je	short en67		; then end the $endloop
 27554                                  
 27555                                  	; 14/12/2022
 27556                                  	; ds = cs
 27557                                  	;;mov	al,[cs:rv_dword]
 27558                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27559                                  	;mov	[cs:p_files],al		; save it temporarily
 27560                                  	;mov	al,[rv_dword]
 27561 00002471 A0[CA1C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27562 00002474 A2[4C1D]                	mov	[p_files],al
 27563                                  
 27564 00002477 EBEB                    	jmp	short do67
 27565                                  en67:
 27566                                  	; 14/12/2022
 27567                                  	; ds = cs
 27568 00002479 A0[4C1D]                	mov	al,[p_files]
 27569 0000247C A2[9D02]                	mov	[FILES],al	
 27570                                  	;mov	al,[cs:p_files]
 27571                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 27572                                  sr67:
 27573 0000247F E9F4FA                  	jmp	coff
 27574                                  
 27575                                  ; 04/04/2019 - Retro DOS v4.0
 27576                                  
 27577                                  ;------------------------------------------------------------------------------
 27578                                  ; lastdrive command
 27579                                  ;------------------------------------------------------------------------------
 27580                                  
 27581                                  ;******************************************************************************
 27582                                  ; function: parse the parameters of lastdrive= command. 		      *
 27583                                  ;									      *
 27584                                  ; input :								      *
 27585                                  ;	es:si -> parameters in command line.				      *
 27586                                  ; output:								      *
 27587                                  ;	set the variable num_cds.					      *
 27588                                  ;									      *
 27589                                  ; subroutines to be called:						      *
 27590                                  ;	sysinit_parse							      *
 27591                                  ; logic:								      *
 27592                                  ; {									      *
 27593                                  ;	set di points to ldrv_parms;					      *
 27594                                  ;	set dx,cx to 0; 						      *
 27595                                  ;	while (end of command line)					      *
 27596                                  ;	{ sysinit_parse;						      *
 27597                                  ;	  if (no error) then						      *
 27598                                  ;	     set num_cds to the returned value; 			      *
 27599                                  ;	  else	/*error exit*/						      *
 27600                                  ;	     error exit;						      *
 27601                                  ;	};								      *
 27602                                  ; };									      *
 27603                                  ;									      *
 27604                                  ;******************************************************************************
 27605                                  
 27606                                  tryl:
 27607 00002482 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 27608 00002485 7523                    	jne	short tryp
 27609                                  
 27610                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27611                                  ;;ifdef	MULTI_CONFIG
 27612                                  ;       call    query_user      ; query the user if config_cmd
 27613                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 27614                                  ;;endif
 27615                                  	; 14/12/2022
 27616                                  	; ds = cs
 27617                                  
 27618 00002487 BF[841D]                	mov	di,ldrv_parms
 27619 0000248A 31C9                    	xor	cx,cx
 27620                                  	; 04/01/2023
 27621                                  	;mov	dx,cx
 27622                                  do73:
 27623 0000248C E8C901                  	call	sysinit_parse
 27624 0000248F 7303                    	jnc	short if73	; parse error
 27625                                  	;call	badparm_p	;  and show messages and end the search loop.
 27626                                  	;jmp	short sr73
 27627                                  	; 04/01/2023
 27628 00002491 E94201                  	jmp	badparm_p_coff
 27629                                  if73:
 27630 00002494 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27631 00002497 7408                    	je	short en73	; then end the $endloop
 27632                                  
 27633                                  	; 14/12/2022
 27634                                  	; ds = cs
 27635                                  	;;mov	al,[cs:rv_dword]
 27636                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27637                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27638                                  
 27639                                  	;mov	al,[rv_dword]
 27640 00002499 A0[CA1C]                	mov	al,[rv_byte]
 27641 0000249C A2[981D]                	mov	[p_ldrv],al
 27642                                  
 27643 0000249F EBEB                    	jmp	short do73
 27644                                  en73:
 27645                                  	; 14/12/2022
 27646                                  	; ds = cs
 27647 000024A1 A0[981D]                	mov	al,[p_ldrv]
 27648 000024A4 A2[A002]                	mov	[NUM_CDS],al
 27649                                  	;mov	al,[cs:p_ldrv]
 27650                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27651                                  sr73:
 27652 000024A7 E9CCFA                  	jmp	coff
 27653                                  
 27654                                  ;--------------------------------------------------------------------------
 27655                                  ; setting drive parameters
 27656                                  ;--------------------------------------------------------------------------
 27657                                  
 27658                                  tryp:
 27659 000024AA 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27660 000024AD 7511                    	jne	short tryk
 27661                                  
 27662                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27663                                  ;;ifdef	MULTI_CONFIG
 27664                                  ;       call    query_user      ; query the user if config_cmd
 27665                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27666                                  ;;endif
 27667                                  
 27668 000024AF E83508                  	call	parseline
 27669 000024B2 7209                    	jc	short trypbad
 27670 000024B4 E85C07                  	call	setparms
 27671 000024B7 E89007                  	call	diddleback
 27672                                  
 27673                                  ; No error check here, because setparms and diddleback have no error 
 27674                                  ; returns, and setparms as coded now can return with carry set. 
 27675                                  ;       jc	short trypbad
 27676                                  
 27677                                  	; 12/12/2022
 27678                                  	; cf = 0
 27679                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27680                                  	;jc	short trypbad
 27681                                  	
 27682 000024BA E9B9FA                  	jmp	coff
 27683                                  trypbad:
 27684 000024BD E9B701                  	jmp	badop
 27685                                  
 27686                                  ;--------------------------------------------------------------------------
 27687                                  ; setting internal stack parameters
 27688                                  ; stacks=m,n where
 27689                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27690                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27691                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27692                                  ;	any combinations that are not within the specified limits will
 27693                                  ;	result in "unrecognized command" error.
 27694                                  ;--------------------------------------------------------------------------
 27695                                  
 27696                                  ;**************************************************************************
 27697                                  ;									  *
 27698                                  ; function: parse the parameters of stacks= command.			  *
 27699                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27700                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27701                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27702                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27703                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27704                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27705                                  ;	    (or if "0,0" pair has been entered.)			  *
 27706                                  ; input :								  *
 27707                                  ;	es:si -> parameters in command line.				  *
 27708                                  ; output:								  *
 27709                                  ;	set the variables stack_count,stack_size.			  *
 27710                                  ;									  *
 27711                                  ; subroutines to be called:						  *
 27712                                  ;	sysinit_parse							  *
 27713                                  ; logic:								  *
 27714                                  ; {									  *
 27715                                  ;	set di points to stks_parms;					  *
 27716                                  ;	set dx,cx to 0; 						  *
 27717                                  ;	while (end of command line)					  *
 27718                                  ;	{ sysinit_parse;						  *
 27719                                  ;	  if (no error) then						  *
 27720                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27721                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27722                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27723                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27724                                  ;	     }								  *
 27725                                  ;	  else	/*error exit*/						  *
 27726                                  ;	     error exit;						  *
 27727                                  ;	};								  *
 27728                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27729                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27730                                  ;	 else error_exit;						  *
 27731                                  ; };									  *
 27732                                  ;**************************************************************************
 27733                                  
 27734                                  tryk:
 27735                                          ;if      stacksw
 27736                                  
 27737 000024C0 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27738 000024C3 7402                    	je	short do_tryk
 27739                                  skip_it4:
 27740 000024C5 EB74                    	jmp	short trys	; 15/12/2022
 27741                                  do_tryk:
 27742                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27743                                  ;;ifdef	MULTI_CONFIG
 27744                                  ;       call    query_user              ; query the user if config_cmd
 27745                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27746                                  ;;endif
 27747                                  	; 14/12/2022
 27748                                  	; ds = cs
 27749                                  
 27750 000024C7 BF[991D]                	mov	di,stks_parms
 27751 000024CA 31C9                    	xor	cx,cx
 27752                                  	; 04/01/2023
 27753                                  	;mov	dx,cx
 27754                                  do79:
 27755 000024CC E88901                  	call	sysinit_parse
 27756 000024CF 730B                    	jnc	short if79		; parse error
 27757                                  
 27758 000024D1 BA[7937]                	mov	dx,badstack		; "invalid stack parameter"
 27759 000024D4 E8B60D                  	call	print			;  and show messages and end the search loop.
 27760 000024D7 E8D101                  	call	error_line
 27761                                  	;jmp	sr79
 27762                                  	; 11/12/2022
 27763 000024DA EB39                    	jmp	short sr79
 27764                                  if79:
 27765 000024DC 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27766 000024DF 7412                    	je	short en79		; then end the $endloop
 27767                                  
 27768                                  	; 14/12/2022
 27769                                  	; ds = cs
 27770                                  
 27771                                  	;;mov	ax,[cs:rv_dword]
 27772                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27773                                  	;mov	ax,[rv_dword]
 27774 000024E1 A1[CA1C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27775                                  
 27776 000024E4 83F901                  	cmp	cx,1
 27777 000024E7 7505                    	jne	short if83
 27778                                  
 27779                                  	; 14/12/2022
 27780                                  	;mov	[cs:p_stack_count],ax
 27781                                  	;jmp	short en83
 27782 000024E9 A3[CE1D]                	mov	[p_stack_count],ax
 27783 000024EC EBDE                    	jmp	short do79
 27784                                  if83:
 27785                                  	; 14/12/2022
 27786                                  	;mov	[cs:p_stack_size],ax
 27787 000024EE A3[D01D]                	mov	[p_stack_size],ax
 27788                                  en83:
 27789 000024F1 EBD9                    	jmp	short do79
 27790                                  en79:
 27791                                  	; 14/12/2022
 27792                                  	; ds = cs
 27793 000024F3 A1[CE1D]                	mov	ax,[p_stack_count]
 27794 000024F6 09C0                    	or	ax,ax
 27795 000024F8 741E                    	jz	short if87		
 27796                                  
 27797                                  	; 14/12/2022
 27798                                  	;cmp	word [p_stack_count],0
 27799                                  	;;cmp	word [cs:p_stack_count],0
 27800                                  	;je	short if87
 27801                                  
 27802                                  	; 14/12/2022
 27803 000024FA 83F808                  	cmp	ax, mincount ; 8
 27804                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27805                                  	; 15/12/2022
 27806 000024FD 721F                    	jb	short en87
 27807 000024FF 833E[D01D]20            	cmp	word [p_stack_size],minsize ; 32
 27808                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27809                                  	; 15/12/2022
 27810 00002504 7218                    	jb	short en87
 27811                                  if94:
 27812                                  	; 14/12/2022
 27813                                  	; ds = cs
 27814                                  	; ax = [p_stack_count]
 27815                                  	;mov	ax,[p_stack_count]
 27816                                  	;;mov	ax,[cs:p_stack_count]
 27817 00002506 A3[8A02]                	mov	[stack_count],ax
 27818                                  	;mov	[cs:stack_count],ax
 27819                                  	;mov	ax,[cs:p_stack_size]
 27820 00002509 A1[D01D]                	mov	ax,[p_stack_size]
 27821                                  	;mov	[cs:stack_size],ax
 27822 0000250C A3[8C02]                	mov	[stack_size],ax
 27823                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27824 0000250F C706[8E02]FFFF          	mov	word [stack_addr],-1
 27825                                  sr79:
 27826 00002515 E95EFA                  	jmp	coff
 27827                                  
 27828                                  if87:
 27829                                  	; 14/12/2022
 27830 00002518 3906[D01D]              	cmp	[p_stack_size],ax ; 0
 27831 0000251C 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27832                                  	;cmp	word [cs:p_stack_size],0
 27833                                  	;je	short if94
 27834                                  en87:
 27835                                  	; 15/12/2022
 27836                                  	; ([p_stack_count] is invalid, use default values)
 27837                                  	; 14/12/2022
 27838                                  	; ds = cs
 27839 0000251E C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27840 00002524 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27841 0000252A C706[8E02]0000          	mov	word [stack_addr],0
 27842                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27843                                  	;				; reset to default value.
 27844                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27845                                  	;mov	word [cs:stack_addr],0
 27846                                  
 27847 00002530 BA[7937]                	mov	dx,badstack
 27848 00002533 E8570D                  	call	print
 27849 00002536 E87201                  	call	error_line
 27850 00002539 EBDA                    	jmp	short sr79
 27851                                  
 27852                                  ; 15/12/2022
 27853                                  %if 0
 27854                                  	mov	di,stks_parms
 27855                                  	xor	cx,cx
 27856                                  	; 04/01/2023
 27857                                  	;mov	dx,cx
 27858                                  do79:
 27859                                  	call	sysinit_parse
 27860                                  	jnc	short if79		; parse error
 27861                                  
 27862                                  	mov	dx,badstack		; "invalid stack parameter"
 27863                                  	call	print			;  and show messages and end the search loop.
 27864                                  	call	error_line
 27865                                  	;jmp	sr79
 27866                                  	; 11/12/2022
 27867                                  	jmp	short sr79
 27868                                  if79:
 27869                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27870                                  	je	short en79		; then end the $endloop
 27871                                  
 27872                                  	;mov	ax,[cs:rv_dword]
 27873                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27874                                  	cmp	cx,1
 27875                                  	jne	short if83
 27876                                  
 27877                                  	mov	[cs:p_stack_count],ax
 27878                                  	jmp	short en83
 27879                                  if83:
 27880                                  	mov	[cs:p_stack_size],ax
 27881                                  en83:
 27882                                  	jmp	short do79
 27883                                  en79:
 27884                                  	cmp	word [cs:p_stack_count],0
 27885                                  	je	short if87
 27886                                  
 27887                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27888                                  	jb	short ll88
 27889                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27890                                  	jnb	short if88
 27891                                  ll88:
 27892                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27893                                  if88:
 27894                                  	jmp	short en87
 27895                                  
 27896                                  	; 11/12/2022
 27897                                  if94:
 27898                                  	mov	ax,[cs:p_stack_count]
 27899                                  	mov	[cs:stack_count],ax
 27900                                  	mov	ax,[cs:p_stack_size]
 27901                                  	mov	[cs:stack_size],ax
 27902                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27903                                  sr79:
 27904                                  	jmp	coff
 27905                                  
 27906                                  if87:
 27907                                  	cmp	word [cs:p_stack_size],0
 27908                                  	je	short en87
 27909                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27910                                  en87:
 27911                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27912                                  	jne	short if94
 27913                                  
 27914                                  	mov	word [cs:stack_count],defaultcount ; 9
 27915                                  					; reset to default value.
 27916                                  	mov	word [cs:stack_size],defaultsize ; 128
 27917                                  	mov	word [cs:stack_addr],0
 27918                                  
 27919                                  	mov	dx,badstack
 27920                                  	call	print
 27921                                  	call	error_line
 27922                                  	jmp	short sr79
 27923                                  
 27924                                  %endif
 27925                                  
 27926                                  ; 11/12/2022
 27927                                  %if 0 
 27928                                  
 27929                                  if94:
 27930                                  	mov	ax,[cs:p_stack_count]
 27931                                  	mov	[cs:stack_count],ax
 27932                                  	mov	ax,[cs:p_stack_size]
 27933                                  	mov	[cs:stack_size],ax
 27934                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27935                                  sr79:
 27936                                  	jmp	coff
 27937                                  
 27938                                  %endif
 27939                                  
 27940                                  	;endif
 27941                                  
 27942                                  ;------------------------------------------------------------------------
 27943                                  ; shell command
 27944                                  ;------------------------------------------------------------------------
 27945                                  
 27946                                  trys:
 27947 0000253B 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27948 0000253E 753C                    	jne	short tryx
 27949                                  
 27950                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27951                                  ;;ifdef	MULTI_CONFIG
 27952                                  ;       call    query_user              ; query the user if config_cmd
 27953                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27954                                  ;       mov	byte [cs:newcmd],1
 27955                                  ;;endif
 27956                                  
 27957                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27958                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27959                                  	;mov	byte [cs:command_line+1],0
 27960                                  	; 15/12/2022
 27961                                  	; ds = cs
 27962 00002540 C606[AA02]00            	mov	byte [command_line+1],0
 27963                                  
 27964 00002545 BF[6433]                        mov     di,commnd+1		; we already have the first char
 27965 00002548 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27966                                  storeshell:
 27967 0000254B E8970A                  	call	getchr
 27968 0000254E 08C0                            or      al,al                   ; this is the normal case: "organize"
 27969 00002550 7419                            jz	short getshparms	; put a ZERO right after the filename
 27970                                  
 27971 00002552 3C20                            cmp     al," "                  ; this may happen if there are no args
 27972 00002554 7205                            jb	short endofshell	; I suppose...
 27973 00002556 8805                    	mov	[di],al
 27974 00002558 47                      	inc	di
 27975                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27976                                          ;jb	short storeshell	; commnd (the filename)
 27977                                          ;jmp	short endofshell
 27978                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27979 00002559 EBF0                    	jmp	short storeshell
 27980                                  
 27981                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27982                                  ;getshparms:
 27983                                  ;	mov     byte [di],0		; zero-terminate the filename
 27984                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27985                                  ;
 27986                                  ;parmloop:
 27987                                  ;	call	getchr
 27988                                  ;	cmp	al," "
 27989                                  ;	jb	short endofparms
 27990                                  ;	mov	[di],al
 27991                                  ;	inc	di
 27992                                  ;	cmp     di,command_line+126
 27993                                  ;	jb	short parmloop
 27994                                  ;endofparms:
 27995                                  ;	mov     cx,di
 27996                                  ;	sub     cx,command_line+1
 27997                                  ;	mov     [cs:command_line],cl
 27998                                  ;
 27999                                  ;endofshell:
 28000                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 28001                                  ;					; the command-line as the case may be)
 28002                                  ;skipline:
 28003                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28004                                  ;       je	short endofline		; the line: watch for ever-present LF
 28005                                  ;call	getchr
 28006                                  ;       jnc	short skipline		; keep it up as long as there are chars
 28007                                  ;
 28008                                  ;endofline:
 28009                                  ;       jmp     conflp
 28010                                  
 28011                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28012                                  endofshell:
 28013 0000255B C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 28014                                  					; the command-line as the case may be)
 28015 0000255E E8840A                  	call	getchr
 28016                                  skipline:
 28017 00002561 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28018 00002563 7403                    	je	short endofline		; the line: watch for ever-present LF
 28019 00002565 E87D0A                  	call	getchr
 28020                                  endofline:
 28021 00002568 E9E6F9                  	jmp     conflp
 28022                                  
 28023                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28024                                  getshparms:
 28025                                  	; 18/12/2022
 28026                                  	; al = 0
 28027 0000256B 8805                    	mov	[di],al ; 0
 28028                                  	;mov	byte [di],0		; zero-terminate the filename
 28029 0000256D BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 28030                                  parmloop:
 28031 00002570 E8720A                  	call	getchr
 28032 00002573 3C20                    	cmp	al," " ; 20h
 28033 00002575 72E4                    	jb	short endofshell
 28034 00002577 8805                    	mov	[di],al
 28035 00002579 47                      	inc	di
 28036 0000257A EBF4                    	jmp	short parmloop
 28037                                  
 28038                                  ;------------------------------------------------------------------------
 28039                                  ; fcbs command
 28040                                  ;------------------------------------------------------------------------
 28041                                  
 28042                                  ;************************************************************************
 28043                                  ; function: parse the parameters of fcbs= command.			*
 28044                                  ;									*
 28045                                  ; input :								*
 28046                                  ;	es:si -> parameters in command line.				*
 28047                                  ; output:								*
 28048                                  ;	set the variables fcbs,keep.					*
 28049                                  ;									*
 28050                                  ; subroutines to be called:						*
 28051                                  ;	sysinit_parse							*
 28052                                  ; logic:								*
 28053                                  ; {									*
 28054                                  ;	set di points to fcbs_parms;					*
 28055                                  ;	set dx,cx to 0; 						*
 28056                                  ;	while (end of command line)					*
 28057                                  ;	{ sysparse;							*
 28058                                  ;	  if (no error) then						*
 28059                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 28060                                  ;		   fcbs = result_val._$P_picked_val;			*
 28061                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 28062                                  ;		   keep = result_val._$P_picked_val;			*
 28063                                  ;	     }								*
 28064                                  ;	  else	/*error exit*/						*
 28065                                  ;	     error exit;						*
 28066                                  ;	};								*
 28067                                  ; };									*
 28068                                  ;************************************************************************
 28069                                  
 28070                                  tryx:
 28071 0000257C 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 28072                                          ;jne	short try1
 28073                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28074 0000257F 752F                    	jne	short tryy	; comment command
 28075                                  
 28076                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28077                                  ;;ifdef	MULTI_CONFIG
 28078                                  ;       call    query_user      ; query the user if config_cmd
 28079                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 28080                                  ;;endif
 28081                                  
 28082 00002581 BF[4D1D]                	mov	di,fcbs_parms
 28083 00002584 31C9                    	xor	cx,cx
 28084                                  	; 04/01/2023
 28085                                  	;mov	dx,cx
 28086                                  do98:
 28087 00002586 E8CF00                  	call	sysinit_parse
 28088                                          ; 04/01/2023
 28089                                  	;jnc	short if98	; parse error
 28090                                          ;call	badparm_p	;  and show messages and end the search loop.
 28091                                  	;jmp	short sr98
 28092                                  	;------------------------
 28093                                  	; 04/01/2023
 28094 00002589 724B                    	jc	short badparm_p_coff
 28095                                  if98:
 28096 0000258B 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28097 0000258E 7412                    	je	short en98	; then end the $endloop
 28098                                  
 28099                                  	;;mov	al,[cs:rv_dword]
 28100                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28101                                  	; 15/12/2022
 28102                                  	; ds = cs
 28103 00002590 A0[CA1C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28104 00002593 83F901                  	cmp	cx,1		; the first positional?
 28105 00002596 7505                    	jne	short if102
 28106                                  	;mov	[cs:p_fcbs],al
 28107                                  	; 15/12/2022
 28108 00002598 A2[821D]                	mov	[p_fcbs],al
 28109                                  	;jmp	short en102
 28110 0000259B EBE9                    	jmp	short do98
 28111                                  if102:
 28112                                  	;mov	[cs:p_keep],al
 28113                                  	; 15/12/2022
 28114 0000259D A2[831D]                	mov	[p_keep],al
 28115                                  en102:
 28116 000025A0 EBE4                    	jmp	short do98
 28117                                  en98:
 28118                                  	; 15/12/2022
 28119                                  	; ds = cs
 28120 000025A2 A0[821D]                	mov	al,[p_fcbs]
 28121 000025A5 A2[9E02]                	mov	[FCBS],al
 28122 000025A8 C606[9F02]00            	mov	byte [KEEP],0
 28123                                  	;mov	al,[cs:p_fcbs]	 ; M017
 28124                                  	;mov	[cs:FCBS],al	 ; M017
 28125                                  	;mov	byte [cs:KEEP],0 ; M017
 28126                                  sr98:
 28127 000025AD E9C6F9                  	jmp	coff
 28128                                  
 28129                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28130                                  ;-------------------------------------------------------------------------
 28131                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 28132                                  ;		line number
 28133                                  ;-------------------------------------------------------------------------
 28134                                  
 28135                                  tryy:
 28136 000025B0 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28137 000025B3 750B                    	jne	short try0
 28138                                  
 28139                                  donothing:
 28140                                  	; 15/12/2022
 28141                                  	; ds = cs
 28142 000025B5 FF0E[D603]              	dec	word [chrptr]
 28143 000025B9 FF06[D203]              	inc	word [count]
 28144                                  	; 02/11/2022
 28145                                  	;dec	word [cs:chrptr]
 28146                                  	;inc	word [cs:count]
 28147                                  
 28148 000025BD E9B6F9                  	jmp	coff
 28149                                  
 28150                                  ;------------------------------------------------------------------------
 28151                                  ; rem command
 28152                                  ;------------------------------------------------------------------------
 28153                                  
 28154                                  try0:				; do nothing with this line.
 28155 000025C0 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 28156 000025C3 74F0                    	je	short donothing
 28157                                  
 28158                                  ; 07/04/2019 - Retro DOS v4.0
 28159                                  
 28160                                  ;-----------------------------------------------------------------------
 28161                                  ; switches command
 28162                                  ;-----------------------------------------------------------------------
 28163                                  
 28164                                  ;***********************************************************************
 28165                                  ;								       *
 28166                                  ; function: parse the option switches specified.		       *
 28167                                  ; note - this command is intended for the future use also.	       *
 28168                                  ; when we need to set system data flag,use this command.	       *
 28169                                  ;								       *
 28170                                  ; input :							       *
 28171                                  ;	es:si -> parameters in command line.			       *
 28172                                  ; output:							       *
 28173                                  ;	p_swit_k set if /k option chosen.			       *
 28174                                  ;								       *
 28175                                  ; subroutines to be called:					       *
 28176                                  ;	sysinit_parse						       *
 28177                                  ; logic:							       *
 28178                                  ; {								       *
 28179                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 28180                                  ;	set dx,cx to 0; 					       *
 28181                                  ;	while (end of command line)				       *
 28182                                  ;	{ sysinit_parse;					       *
 28183                                  ;	  if (no error) then					       *
 28184                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 28185                                  ;		    p_swit_k = 1				       *
 28186                                  ;	       endif						       *
 28187                                  ;	  else {show error message;error exit}			       *
 28188                                  ;	};							       *
 28189                                  ; };								       *
 28190                                  ;								       *
 28191                                  ;***********************************************************************
 28192                                  
 28193                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 28194                                  
 28195                                  try1:
 28196 000025C5 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 28197 000025C8 7402                    	je	short do_try1	; switches= command entered?
 28198                                  skip_it5:
 28199                                  	;jmp	tryv
 28200                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28201 000025CA EB7A                    	jmp	tryz
 28202                                  
 28203                                  do_try1:
 28204                                  
 28205                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28206                                  ;;ifdef	MULTI_CONFIG
 28207                                  ;       call    query_user      ; query the user if config_cmd
 28208                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 28209                                  ;;endif
 28210                                  
 28211 000025CC BF[E71D]                	mov	di,swit_parms
 28212 000025CF 31C9                    	xor	cx,cx
 28213                                  	; 04/01/2023
 28214                                  	;mov	dx,cx
 28215                                  do110:
 28216 000025D1 E88400                  	call	sysinit_parse
 28217 000025D4 7306                    	jnc	short if110	; parse error
 28218                                  	;call	badparm_p	;  and show messages and end the search loop.
 28219                                  	;jmp	short sr110
 28220                                  	; -----------------------
 28221                                  	; 04/01/2023
 28222                                  badparm_p_coff:
 28223 000025D6 E8AA00                  	call	badparm_p
 28224 000025D9 E99AF9                  	jmp	coff
 28225                                  	;------------------------
 28226                                  if110:
 28227 000025DC 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28228 000025DF 742D                    	je	short en110	; then jmp to $endloop for semantic check
 28229                                  
 28230                                  	; 15/12/2022
 28231                                  	; ds = cs
 28232                                  	;;cmp	word [cs:result_val_swoff],swit_k
 28233                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28234 000025E1 813E[C81C][FF1D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28235 000025E7 7507                    	jne	short if115	;				;M059
 28236                                  	; 15/12/2022
 28237 000025E9 C606[1A1E]01            	mov	byte [p_swit_k],1
 28238                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 28239 000025EE EBE1                    	jmp	short do110
 28240                                  if115:	
 28241                                  	; 15/12/2022							;M059
 28242                                  	;;cmp	word [cs:result_val_swoff],swit_t
 28243                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 28244 000025F0 813E[C81C][0B1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 28245 000025F6 7507                    	jne	short if116					;M059 M063
 28246                                  	; 15/12/2022
 28247 000025F8 C606[1B1E]01            	mov	byte [p_swit_t],1
 28248                                  	;mov	byte [cs:p_swit_t],1				;M059
 28249 000025FD EBD2                    	jmp	short do110					;M059
 28250                                  if116:
 28251                                  	; 15/12/2022
 28252                                  	;;cmp	word [cs:result_val_swoff],swit_w
 28253                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 28254 000025FF 813E[C81C][171E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 28255 00002605 75CA                    	jne	short do110					;M063
 28256                                  	; 15/12/2022
 28257 00002607 C606[1C1E]01            	mov	byte [p_swit_w],1
 28258                                  	;mov	byte [cs:p_swit_w],1				;M063
 28259 0000260C EBC3                    	jmp	short do110					;M063
 28260                                  en110:
 28261                                  	; 15/12/2022
 28262                                  	; ds = cs
 28263 0000260E 803E[1A1E]01            	cmp	byte [p_swit_k],1
 28264                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 28265 00002613 1E                      	push	ds
 28266                                  	;;mov	ax,Bios_Data
 28267                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 28268                                  	; 21/10/2022
 28269 00002614 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 28270 00002617 8ED8                    	mov	ds,ax
 28271 00002619 750A                    	jne	short if117
 28272 0000261B C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 28273 00002620 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 28274                                  if117:
 28275                                  	; 15/12/2022
 28276                                  	; ds <> cs
 28277 00002625 2EA0[1B1E]              	mov	al,[cs:p_swit_t]				;M059
 28278 00002629 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 28279                                  
 28280 0000262C 2E803E[1C1E]00          	cmp	byte [cs:p_swit_w],0				;M063
 28281 00002632 740E                    	je	short skip_dos_flag				;M063
 28282 00002634 06                      	push	es
 28283 00002635 53                      	push	bx
 28284 00002636 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 28285 00002638 CD21                    	int	21h						;M063
 28286                                  			; DOS - 2+ internal - GET LIST OF LISTS
 28287                                  			; Return: ES:BX -> DOS list of lists
 28288                                  	;or	bytes [es:86h],2
 28289 0000263A 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 28290 00002640 5B                      	pop	bx
 28291 00002641 07                      	pop	es
 28292                                  skip_dos_flag:							;M063
 28293 00002642 1F                      	pop	ds
 28294                                  sr110:
 28295 00002643 E930F9                  	jmp	coff
 28296                                  
 28297                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28298                                  ;
 28299                                  ;tryv:
 28300                                  ;
 28301                                  ;;ifdef	MULTI_CONFIG
 28302                                  ;;------------------------------------------------------------------------
 28303                                  ;; set command (as in "set var=value<cr/lf>")
 28304                                  ;;------------------------------------------------------------------------
 28305                                  ;
 28306                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 28307                                  ;       jne	short tryn
 28308                                  ;       call    query_user      ; query the user if config_cmd
 28309                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 28310                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 28311                                  ;       jnc	short sr110	; no error
 28312                                  ;err:    
 28313                                  ;	call    error_line      ; whoops, display error in line XXX
 28314                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 28315                                  ;
 28316                                  ;;------------------------------------------------------------------------
 28317                                  ;; numlock command (as in "numlock=on|off")
 28318                                  ;;------------------------------------------------------------------------
 28319                                  ;tryn:
 28320                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 28321                                  ;       jne	short tryy            ;
 28322                                  ;       call    query_user      ; query thye user if config_cmd
 28323                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 28324                                  ;       call    set_numlock
 28325                                  ;       jc	short err
 28326                                  ;       jmp	short sr110	; all done
 28327                                  ;
 28328                                  ;;endif	;MULTI_CONFIG
 28329                                  
 28330                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28331                                  ;;-------------------------------------------------------------------------
 28332                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 28333                                  ;;		line number
 28334                                  ;;-------------------------------------------------------------------------
 28335                                  ;
 28336                                  ;tryy:
 28337                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 28338                                  ;	jne	short try0
 28339                                  ;donothing:
 28340                                  ;	dec	word [chrptr]
 28341                                  ;	inc	word [count]
 28342                                  ;	jmp	coff
 28343                                  ;
 28344                                  ;;------------------------------------------------------------------------
 28345                                  ;; rem command
 28346                                  ;;------------------------------------------------------------------------
 28347                                  ;
 28348                                  ;try0:				;do nothing with this line.
 28349                                  ;	cmp     ah,CONFIG_REM ; '0'
 28350                                  ;	je	short donothing
 28351                                  
 28352                                  ; 30/10/2022
 28353                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 28354                                  
 28355                                  ;------------------------------------------------------------------------
 28356                                  ; bogus command
 28357                                  ;------------------------------------------------------------------------
 28358                                  
 28359                                  tryz:
 28360 00002646 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 28361                                  	;je	short donothing
 28362                                  	; 02/11/2022
 28363 00002649 740A                    	je	short tryz_donothing
 28364                                  
 28365 0000264B FF0E[D603]              	dec	word [chrptr]
 28366 0000264F FF06[D203]              	inc	word [count]
 28367 00002653 EB22                    	jmp	short badop
 28368                                  
 28369                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 28370                                  tryz_donothing:
 28371 00002655 E95DFF                  	jmp	donothing
 28372                                  
 28373                                  ; 07/04/2019 - Retro DOS v4.0
 28374                                  
 28375                                  ;------------------------------------------------------------------------------
 28376                                  
 28377                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28378                                  ;
 28379                                  ;
 28380                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 28381                                  ;;
 28382                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 28383                                  ;
 28384                                  ;CheckProtmanArena:
 28385                                  ;	push	es
 28386                                  ;	mov	ax,[cs:area]	; get our arena header
 28387                                  ;	dec	ax
 28388                                  ;	mov	es,ax
 28389                                  ;	add	ax,[es:3]	; find end of arena
 28390                                  ;	inc	ax
 28391                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 28392                                  ;	ja	short CheckProtmanDone
 28393                                  ;
 28394                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 28395                                  ;CheckProtmanDone:
 28396                                  ;	pop	es
 28397                                  ;	retn
 28398                                  
 28399                                  ;------------------------------------------------------------------------------
 28400                                  
 28401                                  sysinit_parse:
 28402                                  
 28403                                  ;------------------------------------------------------------------------------
 28404                                  ;set up registers for sysparse
 28405                                  ;in)	es:si -> command line in confbot
 28406                                  ;	di -> offset of the parse control definition.
 28407                                  ;
 28408                                  ;out)	calls sysparse.
 28409                                  ;	carry will set if parse error.
 28410                                  ;	*** the caller should check the eol condition by looking at ax
 28411                                  ;	*** after each call.
 28412                                  ;	*** if no parameters are found,then ax will contain a error code.
 28413                                  ;	*** if the caller needs to look at the synomym@ of the result,
 28414                                  ;	***  the caller should use cs:@ instead of es:@.
 28415                                  ;	cx register should be set to 0 at the first time the caller calls this
 28416                                  ;	 procedure.
 28417                                  ;	ax - exit code
 28418                                  ;	bl - terminated delimeter code
 28419                                  ;	cx - new positional ordinal
 28420                                  ;	si - set to pase scanned operand
 28421                                  ;	dx - selected result buffer
 28422                                  ;------------------------------------------------------------------------------
 28423                                  
 28424                                  	; 24/10/2022
 28425 00002658 06                      	push	es			;save es,ds
 28426 00002659 1E                      	push	ds
 28427                                  
 28428                                  	; 09/09/2023
 28429                                  	; ds = cs
 28430 0000265A 8C06[1314]              	mov	[badparm_seg],es	;save the pointer to the parm
 28431 0000265E 8936[1114]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 28432                                  
 28433 00002662 06                      	push	es
 28434 00002663 1F                      	pop	ds			;now ds:si -> command line
 28435                                  
 28436 00002664 0E                      	push	cs
 28437 00002665 07                      	pop	es			;now es:di -> control definition
 28438                                  
 28439                                  	; 09/09/2023
 28440                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 28441                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 28442                                  
 28443                                  	;mov	dx,0
 28444                                  	; 04/01/2023
 28445 00002666 29D2                    	sub	dx,dx ; 0
 28446 00002668 E850EE                  	call	SysParse
 28447                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 28448                                  	; 06/09/2023
 28449 0000266B 21C0                    	and	ax,ax
 28450                                  
 28451                                  ;**cas note: when zero true after cmp, carry clear
 28452                                  
 28453                                  	;je	short ll4
 28454                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 28455                                  	; 12/12/2022
 28456 0000266D 7405                    	je	short en4 ; cf=0
 28457 0000266F 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 28458                                  	;jne	short if4
 28459                                  	; 12/12/2022
 28460 00002672 7400                    	je	short en4 ; cf=0
 28461                                  	; 06/09/2023
 28462                                  	; cf=1
 28463                                  
 28464                                  ; 12/12/2022
 28465                                  ;ll4:
 28466                                  ;	; 12/12/2022
 28467                                  ;	; cf=0
 28468                                  ;	;clc
 28469                                  ;	jmp	short en4
 28470                                  
 28471                                  if4:
 28472                                  	; 24/10/2022
 28473                                  	; 06/09/2023 (cf=1)
 28474                                  	;stc
 28475                                  en4:
 28476 00002674 1F                      	pop	ds
 28477 00002675 07                      	pop	es
 28478 00002676 C3                      	retn
 28479                                  
 28480                                  ; 11/12/2022
 28481                                  %if 0
 28482                                  
 28483                                  ;----------------------------------------------------------------------------
 28484                                  ;
 28485                                  ; procedure : badop_p
 28486                                  ;
 28487                                  ;             same thing as badop,but will make sure to set ds register back
 28488                                  ;             to sysinitseg and return back to the caller.
 28489                                  ;
 28490                                  ;----------------------------------------------------------------------------
 28491                                  
 28492                                  badop_p:
 28493                                  	push	cs
 28494                                  	pop	ds		;set ds to configsys seg.
 28495                                  	mov	dx,badopm
 28496                                  	call	print
 28497                                          ;call	error_line
 28498                                  	;retn
 28499                                  	; 11/12/2022
 28500                                  	jmp	error_line
 28501                                  
 28502                                  %endif
 28503                                  
 28504                                  ;----------------------------------------------------------------------------
 28505                                  ;
 28506                                  ; label : badop
 28507                                  ;
 28508                                  ;----------------------------------------------------------------------------
 28509                                  
 28510                                  badop:	
 28511 00002677 BA[3A36]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 28512 0000267A E8100C                  	call	print
 28513 0000267D E82B00                  	call	error_line	;show "error in config.sys ..." .
 28514 00002680 E9F3F8                  	jmp	coff
 28515                                  
 28516                                  ;----------------------------------------------------------------------------
 28517                                  ;
 28518                                  ; procedure : badparm_p
 28519                                  ;
 28520                                  ;             show "bad command or parameters - xxxxxx"
 28521                                  ;             in badparm_seg,badparm_off -> xxxxx
 28522                                  ;
 28523                                  ;----------------------------------------------------------------------------
 28524                                  
 28525                                  	; 24/10/2022
 28526                                  badparm_p:
 28527                                  	; 11/12/2022
 28528                                  	; ds = cs
 28529                                  	; 11/12/2022
 28530                                  	;push	ds ; *
 28531 00002683 52                      	push	dx
 28532 00002684 56                      	push	si
 28533                                  
 28534                                  	; 11/12/2022
 28535                                  	; ds = cs
 28536                                  	;push	cs
 28537                                  	;pop	ds
 28538                                  
 28539 00002685 BA[6136]                	mov	dx,badparm
 28540 00002688 E8020C                  	call	print			; "bad command or parameters - "
 28541 0000268B C536[1114]              	lds	si,[badparm_ptr]
 28542                                  
 28543                                  ;	print "xxxx" until cr.
 28544                                  
 28545                                  do1:
 28546 0000268F 8A14                    	mov	dl,[si]			; get next character
 28547 00002691 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 28548 00002694 7407                    	je	short en1		; exit loop if so
 28549                                  
 28550 00002696 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 28551 00002698 CD21                    	int	21h			; display character
 28552 0000269A 46                      	inc	si			; next character
 28553 0000269B EBF2                    	jmp	short do1
 28554                                  en1:
 28555 0000269D 0E                      	push	cs
 28556 0000269E 1F                      	pop	ds
 28557                                  
 28558 0000269F BA[5E36]                	mov	dx,crlfm
 28559 000026A2 E8E80B                  	call	print
 28560 000026A5 E80300                  	call	error_line
 28561                                  
 28562 000026A8 5E                      	pop	si
 28563 000026A9 5A                      	pop	dx
 28564                                  	; 11/12/2022
 28565                                  	;pop	ds ; *
 28566                                  badparmp_ret:
 28567 000026AA C3                      	retn
 28568                                  
 28569                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 28570                                  %if 0
 28571                                  
 28572                                  ;----------------------------------------------------------------------------
 28573                                  ;
 28574                                  ; procedure : getchr
 28575                                  ;
 28576                                  ;----------------------------------------------------------------------------
 28577                                  
 28578                                  	; 24/10/2022
 28579                                  getchr:
 28580                                  	; 12/12/2022
 28581                                  	;push	cx
 28582                                  	;mov	cx,[count]
 28583                                  	;jcxz	nochar
 28584                                  	; 12/12/2022
 28585                                  	cmp	word [count],1 
 28586                                  	jb	short nochar ; cf=1 ([count] = 0)
 28587                                  	
 28588                                  	mov	si,[chrptr]
 28589                                  	mov	al,[es:si]
 28590                                  	dec	word [count]
 28591                                  	inc	word [chrptr]
 28592                                  	; 12/12/202
 28593                                  	; cf=0
 28594                                  	;clc
 28595                                  ;get_ret:
 28596                                  	;pop	cx
 28597                                  	;retn
 28598                                  nochar: 
 28599                                  	; 12/12/2022
 28600                                  	; cf=1
 28601                                  	;stc
 28602                                  	;jmp	short get_ret
 28603                                  	
 28604                                  	retn
 28605                                  %endif
 28606                                  
 28607                                  ; 11/12/2022
 28608                                  %if 0
 28609                                  
 28610                                  ;----------------------------------------------------------------------------
 28611                                  ;
 28612                                  ; procedure : incorrect_order
 28613                                  ;
 28614                                  ;             show "incorrect order in config.sys ..." message.
 28615                                  ;
 28616                                  ;----------------------------------------------------------------------------
 28617                                  
 28618                                  incorrect_order:
 28619                                  	mov	dx,badorder
 28620                                  	call	print
 28621                                  	call	showlinenum
 28622                                  	retn
 28623                                  
 28624                                  %endif
 28625                                  
 28626                                  ;----------------------------------------------------------------------------
 28627                                  ;
 28628                                  ; procedure : error_line
 28629                                  ;
 28630                                  ;             show "error in config.sys ..." message.
 28631                                  ;
 28632                                  ;----------------------------------------------------------------------------
 28633                                  
 28634                                  	; 11/12/2022
 28635                                  	; 24/10/2022
 28636                                  error_line:
 28637                                  	; 11/12/2022
 28638                                  	; ds = cs
 28639                                  	;push	cs
 28640                                  	;pop	ds
 28641                                  
 28642 000026AB BA[9637]                	mov	dx,errorcmd
 28643 000026AE E8DC0B                  	call	print
 28644                                  	;call	showlinenum
 28645                                  	;retn
 28646                                  	; 11/12/2022
 28647                                  	;jmp	short shortlinemum
 28648                                  
 28649                                  ;----------------------------------------------------------------------------
 28650                                  ;
 28651                                  ; procedure : showlinenum
 28652                                  ;
 28653                                  ; convert the binary linecount to decimal ascii string in showcount
 28654                                  ; and display showcount at the current curser position.
 28655                                  ; in.) linecount
 28656                                  ;
 28657                                  ; out) the number is printed.
 28658                                  ;
 28659                                  ;----------------------------------------------------------------------------
 28660                                  
 28661                                  	; 11/12/2022
 28662                                  	; ds = cs
 28663                                  	; 24/10/2022
 28664                                  showlinenum:
 28665 000026B1 06                      	push	es
 28666                                  	; 11/12/2022
 28667                                  	;push	ds
 28668 000026B2 57                      	push	di
 28669                                  
 28670 000026B3 0E                      	push	cs
 28671 000026B4 07                      	pop	es		; es=cs
 28672                                  
 28673                                  	; 11/12/2022
 28674                                  	;push	cs
 28675                                  	;pop	ds
 28676                                  
 28677 000026B5 BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28678 000026B8 B90A00                  	mov	cx,10		; decimal divide factor
 28679                                  	;mov	ax,[cs:linecount]
 28680                                  	; 11/12/2022
 28681 000026BB A1[2B03]                	mov	ax,[linecount]
 28682                                  sln_loop:
 28683                                  	; 11/12/2022
 28684 000026BE 39C8                    	cmp	ax,cx ; < 10 ?
 28685                                  	;cmp	ax,10		; < 10?
 28686 000026C0 720C                    	jb	short sln_last
 28687                                  
 28688 000026C2 31D2                    	xor	dx,dx
 28689 000026C4 F7F1                    	div	cx	; cx = 10
 28690 000026C6 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28691 000026C9 8815                    	mov	[di],dl
 28692 000026CB 4F                      	dec	di
 28693 000026CC EBF0                    	jmp	short sln_loop
 28694                                  
 28695                                  sln_last:
 28696 000026CE 0C30                    	or	al,30h	; "0"
 28697 000026D0 8805                    	mov	[di],al
 28698 000026D2 89FA                    	mov	dx,di
 28699 000026D4 E8B60B                  	call	print		; show it.
 28700 000026D7 5F                      	pop	di
 28701                                  	; 11/12/2022
 28702                                  	;pop	ds
 28703 000026D8 07                      	pop	es
 28704 000026D9 C3                      	retn
 28705                                  
 28706                                  ; 07/04/2019 - Retro DOS v4.0
 28707                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28708                                  
 28709                                  ;----------------------------------------------------------------------------
 28710                                  ;
 28711                                  ; procedure : ProcDOS
 28712                                  ;
 28713                                  ;	Process the result of DOS= parsing
 28714                                  ;
 28715                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28716                                  ;				= 2 for DOS=LOW
 28717                                  ;				= 3 for DOS=UMB
 28718                                  ;				= 4 for DOS=NOUMB
 28719                                  ;----------------------------------------------------------------------------
 28720                                  
 28721                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28722                                  	; (SYTSINIT:2AB5h)
 28723                                  ProcDOS:
 28724                                  	; 01/01/2023
 28725                                  	; ds = cs
 28726 000026DA 30E4                    	xor	ah,ah
 28727                                  	;;mov	al,[cs:result_val_itag]
 28728                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28729                                  	; 04/01/2023
 28730 000026DC A0[C71C]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28731 000026DF 48                      	dec	ax
 28732 000026E0 7415                    	jz	short pd_hi
 28733 000026E2 48                      	dec	ax
 28734 000026E3 740E                    	jz	short pd_lo
 28735 000026E5 48                      	dec	ax
 28736 000026E6 7405                    	jz	short pd_umb
 28737                                  	;;mov	byte [cs:DevUMB],0
 28738                                  	; 18/12/2022
 28739                                  	;mov	byte [cs:DevUMB],ah ; 0
 28740                                  	; 01/01/2023
 28741 000026E8 8826[6E1E]              	mov	byte [DevUMB],ah ; 0
 28742 000026EC C3                      	retn
 28743                                  pd_umb:
 28744                                  	; 04/01/2023
 28745 000026ED C606[6E1E]FF            	mov	byte [DevUMB],0FFh
 28746                                  	;mov	byte [cs:DevUMB],0FFh
 28747 000026F2 C3                      	retn
 28748                                  pd_lo:
 28749                                  	; 04/01/2023
 28750 000026F3 A2[6A02]                	mov	[runhigh],al ; 0
 28751                                  	; 18/12/2022
 28752                                  	;mov	[cs:runhigh],al ; 0
 28753                                  	;;mov	byte [cs:runhigh],0
 28754 000026F6 C3                      	retn
 28755                                  pd_hi:
 28756                                  	; 04/01/2023
 28757 000026F7 C606[6A02]FF            	mov	byte [runhigh],0FFh
 28758                                  	;mov	byte [cs:runhigh],0FFh
 28759                                  limx:	; 11/12/2022
 28760 000026FC C3                      	retn
 28761                                  
 28762                                  ;----------------------------------------------------------------------------
 28763                                  ;
 28764                                  ; procedure : LieInt12Mem
 28765                                  ;
 28766                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28767                                  ;		alloclim set to the limit of low memory.
 28768                                  ;
 28769                                  ;	Output : none
 28770                                  ;
 28771                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28772                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28773                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28774                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28775                                  ;	converted into Ks and stored in 40:13h
 28776                                  ;
 28777                                  ;----------------------------------------------------------------------------
 28778                                  
 28779                                  LieInt12Mem:
 28780                                  	; 11/12/2022
 28781                                  	; ds = cs
 28782 000026FD A1[A302]                	mov	ax,[ALLOCLIM]
 28783                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28784                                  					; assuming that it is 3Com
 28785 00002700 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28786 00002703 740A                    	jz	short lim_set		; yes, lie to him differently
 28787                                  	; 13/05/2019
 28788                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28789                                  	;je	short limx		; no, don't lie
 28790                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28791                                  	; 11/12/2022
 28792                                  	; ds = cs
 28793 00002705 803E[7D1E]00            	cmp	byte [DeviceHi],0
 28794 0000270A 74F0                    	je	short limx
 28795 0000270C A1[641E]                	mov	ax,[DevLoadEnd]
 28796                                  lim_set:
 28797                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28798                                  	; 11/12/2022
 28799                                  	;call	SetInt12Mem
 28800                                  ;limx:
 28801                                  	;retn
 28802                                  	
 28803                                  	;jmp	short SetInt12Mem 
 28804                                  
 28805                                  ;----------------------------------------------------------------------------
 28806                                  ;
 28807                                  ; procedure : SetInt12Mem
 28808                                  ;
 28809                                  ;	Input : AX = Memory size to be set (in paras)
 28810                                  ;	Output : none
 28811                                  ;
 28812                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28813                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28814                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28815                                  ;	restoring the value of 40:13
 28816                                  ;
 28817                                  ;----------------------------------------------------------------------------
 28818                                  
 28819                                  	; 01/11/2022
 28820                                  SetInt12Mem:
 28821 0000270F 1E                      	push	ds
 28822 00002710 BB4000                  	mov	bx,40h
 28823 00002713 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28824 00002715 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28825 00002719 2E891E[811E]            	mov	[cs:OldInt12Mem],bx	; save it
 28826 0000271E B106                    	mov	cl,6
 28827 00002720 D3E8                    	shr	ax,cl			; convert paras into Ks
 28828 00002722 A31300                  	mov	[13h],ax		; Lie
 28829 00002725 2EC606[801E]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28830 0000272B 1F                      	pop	ds
 28831                                  ;limx:
 28832 0000272C C3                      	retn
 28833                                  
 28834                                  ;----------------------------------------------------------------------------
 28835                                  ;
 28836                                  ; procedure : TrueInt12Mem
 28837                                  ;
 28838                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28839                                  ;			  = 0ffh if we are lying
 28840                                  ;		OldInt12Mem = Saved value of 40:13h
 28841                                  ;
 28842                                  ;	Output : none
 28843                                  ;
 28844                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28845                                  ;	and resets the flag which indicates that we were lying
 28846                                  ;
 28847                                  ;----------------------------------------------------------------------------
 28848                                  
 28849                                  TrueInt12Mem:
 28850                                  	; 11/12/2022
 28851                                  	; ds = cs
 28852 0000272D 803E[801E]00            	cmp	byte [Int12Lied],0
 28853                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28854                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28855                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28856 00002732 7412                    	je	short timx		; no, we weren't
 28857                                  	; 18/12/2022
 28858 00002734 B84000                  	mov	ax,40h
 28859 00002737 8826[801E]              	mov	[Int12Lied],ah ; 0
 28860                                  	;mov	byte [Int12Lied],0
 28861                                  	;mov	byte [cs:Int12Lied],0
 28862 0000273B 1E                      	push	ds
 28863                                  	;mov	ax,40h
 28864 0000273C 8ED8                    	mov	ds,ax
 28865 0000273E 2EA1[811E]              	mov	ax,[cs:OldInt12Mem]
 28866 00002742 A31300                  	mov	[13h],ax		; restore INT 12 memory
 28867 00002745 1F                      	pop	ds
 28868                                  timx:
 28869 00002746 C3                      	retn
 28870                                  
 28871                                  ;----------------------------------------------------------------------------
 28872                                  ;
 28873                                  ; procedure : IsIt3Com?
 28874                                  ;
 28875                                  ;	Input : DevEntry = Seg:0 of device driver
 28876                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28877                                  ;		 else Zero flag is reset
 28878                                  ;
 28879                                  ;----------------------------------------------------------------------------
 28880                                  
 28881                                  IsIt3Com:
 28882                                  	; 11/12/2022
 28883                                  	; ds = cs
 28884 00002747 1E                      	push	ds
 28885 00002748 06                      	push	es
 28886 00002749 56                      	push	si
 28887                                  	; 11/12/2022
 28888 0000274A C536[661E]              	lds	si,[DevEntry]
 28889                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28890 0000274E 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28891 00002751 0E                      	push	cs
 28892 00002752 07                      	pop	es
 28893 00002753 BF[831E]                	mov	di,ThreeComName
 28894 00002756 B90800                  	mov	cx,8			; name length
 28895 00002759 F3A6                    	rep	cmpsb
 28896 0000275B 5E                      	pop	si
 28897 0000275C 07                      	pop	es
 28898 0000275D 1F                      	pop	ds
 28899 0000275E C3                      	retn
 28900                                  
 28901                                  ;M020 : BEGIN
 28902                                  ;----------------------------------------------------------------------------
 28903                                  
 28904                                  UpdatePDB:
 28905 0000275F 1E                      	push	ds
 28906 00002760 B462                    	mov	ah,62h
 28907 00002762 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28908 00002764 8EDB                    	mov	ds,bx
 28909 00002766 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28910                                  	;mov	[2],bx
 28911 0000276B 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28912 0000276F 1F                      	pop	ds
 28913 00002770 C3                      	retn
 28914                                  
 28915                                  ; M020 : END
 28916                                  
 28917                                  ;----------------------------------------------------------------------------
 28918                                  
 28919                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28920                                  
 28921                                  %if 0
 28922                                  
 28923                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28924                                  ;include highexit.inc	; umb's, etc
 28925                                  
 28926                                  ; ----------------------------------------------------------------------
 28927                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28928                                  ; ----------------------------------------------------------------------
 28929                                  ; 07/04/2019 - Retro DOS v4.0
 28930                                  
 28931                                  ;******************************************************************************
 28932                                  ;
 28933                                  ; This file contains routines needed to parse and implement user-given
 28934                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28935                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28936                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28937                                  ;
 28938                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28939                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28940                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28941                                  ;    DH/LH module opts
 28942                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28943                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28944                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28945                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28946                                  ; available during the load.
 28947                                  ;
 28948                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28949                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28950                                  ; upper-memory block which was not specified by the user... in addition, if
 28951                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28952                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28953                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28954                                  ; free any UMBs so allocated.
 28955                                  ;
 28956                                  ; When a device driver loads, there is the additional problem of allocating its
 28957                                  ; initial load site; this should be restricted to the first UMB specified on
 28958                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28959                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28960                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28961                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28962                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28963                                  ;
 28964                                  ;******************************************************************************
 28965                                  
 28966                                  SWTCH	equ	'/'		; Switch character
 28967                                  
 28968                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28969                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28970                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28971                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28972                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28973                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28974                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28975                                  
 28976                                  CR	equ	0Dh		; Carriage Return
 28977                                  LF	equ	0Ah		; Line Feed
 28978                                  TAB	equ	09h		; Tab character (^I)
 28979                                  
 28980                                  ; -----------------------------------------------------------------------------
 28981                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28982                                  ; -----------------------------------------------------------------------------
 28983                                  ; ENTRY:       None
 28984                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28985                                  ; ERROR EXIT:  None
 28986                                  ; USES:        Flags, variables in highvar.inc
 28987                                  ; -----------------------------------------------------------------------------
 28988                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28989                                  ; are largely ignored, but it is initialized nonetheless.
 28990                                  ; -----------------------------------------------------------------------------
 28991                                  
 28992                                  InitVar:
 28993                                  	;pushreg <ax, cx, di, es>
 28994                                  	push	ax
 28995                                  	push	cx
 28996                                  	push	di
 28997                                  	push	es
 28998                                  
 28999                                  	;dataseg es			;Point ES into appropriate data segment
 29000                                  	push	cs
 29001                                  	pop	es
 29002                                  
 29003                                  	xor	ax,ax
 29004                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 29005                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 29006                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 29007                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 29008                                  					;Later is the # of the 1st spec'd UMB
 29009                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 29010                                  
 29011                                  	cld
 29012                                  
 29013                                  	mov	cx,MAXUMB ; 16		;For each entry
 29014                                  	mov	di,UmbUsed		;on the UmbUsed array,
 29015                                  	rep	stosb			;	Store 0
 29016                                  
 29017                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 29018                                  	mov	di,UmbSize		;on the UmbSize array,
 29019                                  	rep	stosw			;	Store 0
 29020                                  
 29021                                  	;normseg es			; Return ES
 29022                                  
 29023                                  	;popreg	<es, di, cx, ax>
 29024                                  	pop	es
 29025                                  	pop	di
 29026                                  	pop	cx
 29027                                  	pop	ax	 	
 29028                                  
 29029                                  	retn
 29030                                  
 29031                                  ; -----------------------------------------------------------------------------
 29032                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 29033                                  ; -----------------------------------------------------------------------------
 29034                                  ; ENTRY   : None
 29035                                  ; EXIT    : None
 29036                                  ; ERROR   : None
 29037                                  ; USES    : Flags, fm_umb, fm_strat
 29038                                  ; -----------------------------------------------------------------------------
 29039                                  
 29040                                  FixMem:
 29041                                  	push	ax
 29042                                  	push	bx
 29043                                  	push	cx
 29044                                  	push	dx
 29045                                  	push	es
 29046                                  
 29047                                  	call	fm_link		; Link in UMBs
 29048                                  
 29049                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 29050                                  	jc	short fmX	; (if couldn't get it, leave now).
 29051                                  
 29052                                  	mov	es,ax		; It returns in AX, so move it to ES.
 29053                                  
 29054                                  ; - Walk MCB Chain ------------------------------------------------------------
 29055                                  
 29056                                  	xor	dx,dx		; We're keeping the address of the last MCB
 29057                                  	mov 	cx,dx		; in CX... and the last owner
 29058                                  	inc	dx		; in dx as we go through the loop:
 29059                                  
 29060                                  ; ------------------------------------------
 29061                                  ; FM10--DX  = last MCB's owner's PSP address
 29062                                  ;       CX  = last MCB's address (segment)
 29063                                  ; ------------------------------------------
 29064                                  
 29065                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 29066                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 29067                                  	or	bx,dx			; dx was owner of previous MCB
 29068                                  	jnz	short fm30		; If not both zero, don't cat.
 29069                                  
 29070                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 29071                                  
 29072                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 29073                                  	mov	es,cx			; Go back to prev MCB's address
 29074                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 29075                                  
 29076                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 29077                                  	;add	bx,1			; And add one for the header
 29078                                  	; 14/08/2023
 29079                                  	inc	bx
 29080                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 29081                                  
 29082                                  	; ---------------------------------------------------------------------
 29083                                  
 29084                                  fm30:	mov	cx,es			; Put this address on the stack
 29085                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 29086                                  
 29087                                  	mov	bx,es			; Move to the next MCB
 29088                                  	add	bx,[es:ARENA.SIZE]
 29089                                  	inc	bx
 29090                                  	mov	es,bx
 29091                                  
 29092                                  	;cmp	al,'Z'
 29093                                  	cmp	al,arena_signature_end
 29094                                  	jne	short fm10		; If signature != 'Z', there are more.
 29095                                  fmX:	
 29096                                  	call	fm_unlink		; Unlink UMBs
 29097                                  
 29098                                  	pop	es
 29099                                  	pop	dx
 29100                                  	pop	cx
 29101                                  	pop	bx
 29102                                  	pop	ax
 29103                                  
 29104                                  	retn
 29105                                  
 29106                                  ; -----------------------------------------------------------------------------
 29107                                  ;*** fm_link - links UMBs not already linked in
 29108                                  ; -----------------------------------------------------------------------------
 29109                                  ; ENTRY:    None
 29110                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 29111                                  ; ERROR:    None
 29112                                  ; USES:     AX, BX, fm_umb
 29113                                  ; -----------------------------------------------------------------------------
 29114                                  
 29115                                  fm_link:
 29116                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 29117                                  	int	21h			; Current link-state is now in al
 29118                                  
 29119                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 29120                                  	;
 29121                                  	;push	es
 29122                                  	;push	cs
 29123                                  	;pop	es
 29124                                  	;mov	[es:fm_umb],al
 29125                                  	;pop	es
 29126                                  	
 29127                                  	mov	[cs:fm_umb],al
 29128                                  
 29129                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29130                                  	mov	bx,1
 29131                                  	int	21h
 29132                                  	retn
 29133                                  
 29134                                  ; -----------------------------------------------------------------------------
 29135                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 29136                                  ; -----------------------------------------------------------------------------
 29137                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 29138                                  ; EXIT:     None
 29139                                  ; ERROR:    None
 29140                                  ; USES:     AX, BX
 29141                                  ; -----------------------------------------------------------------------------
 29142                                  
 29143                                  fm_unlink:
 29144                                  	xor	bx,bx
 29145                                  	
 29146                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 29147                                  	;
 29148                                  	;push	ds
 29149                                  	;push	cs
 29150                                  	;pop	ds
 29151                                  	;mov	bl,[fm_umb]	
 29152                                  	;pop	ds
 29153                                  	
 29154                                  	mov	bl,[cs:fm_umb]
 29155                                  
 29156                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29157                                  	int	21h			; so just use that, and call int 21h
 29158                                  	retn
 29159                                  
 29160                                  ; 08/04/2019 - Retro DOS v4.0
 29161                                  
 29162                                  ; -----------------------------------------------------------------------------
 29163                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 29164                                  ; laid out in highvar.inc
 29165                                  ; -----------------------------------------------------------------------------
 29166                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 29167                                  ; EXIT:     ES:SI points to first character in child program name
 29168                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 29169                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 29170                                  ; -----------------------------------------------------------------------------
 29171                                  ; Error codes (in AX if carry set on return):
 29172                                  ;
 29173                                  PV_InvArg	equ	1	; Invalid argument passed
 29174                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 29175                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 29176                                  ;
 29177                                  ; This routine exects ES:SI to point to a string much like the following:
 29178                                  ;    "/S/L:1,200;2 module options"
 29179                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 29180                                  ; required, though that's what this routine is supposed to parse.
 29181                                  ;
 29182                                  optS		equ	'S'	; /S
 29183                                  optL		equ	'L'	; /L:...
 29184                                  ;
 29185                                  ; -----------------------------------------------------------------------------
 29186                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 29187                                  ; a command-line for spawning a child process. For a typical LH command, say,
 29188                                  ;     lh /l:1,1000;2 print/d:lpt2
 29189                                  ; the arguments would look like (one per line):
 29190                                  ;     lh
 29191                                  ;     /l
 29192                                  ;     1
 29193                                  ;     1000
 29194                                  ;     2
 29195                                  ;     print
 29196                                  ;     /d
 29197                                  ;     :lpt2
 29198                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 29199                                  ; arg was the filename. So, inside this routine, we keep a running counter
 29200                                  ; of the number of arguments LH will need to skip in order to get to the
 29201                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 29202                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 29203                                  ; for:
 29204                                  ;    Each /L
 29205                                  ;    Each /S (there should be only one)
 29206                                  ;    Each UMB number (they follow ":" or ";")
 29207                                  ;    Each UMB size   (they follow ",")
 29208                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 29209                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 29210                                  ; -----------------------------------------------------------------------------
 29211                                  
 29212                                  ParseVar:
 29213                                  	;pushreg <di, ds, es>
 29214                                  	push	di
 29215                                  	push	ds
 29216                                  	push	es
 29217                                  
 29218                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 29219                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 29220                                  	cld
 29221                                  
 29222                                  ; ------------------------------------------------
 29223                                  ; PV10--ES:SI = any whitespace on the command-line
 29224                                  ; ------------------------------------------------
 29225                                  
 29226                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 29227                                  	call	isWhite
 29228                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 29229                                  	;cmp	al,'/'
 29230                                  	cmp	al,SWTCH
 29231                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 29232                                  
 29233                                  	dec	si		; Backup--it's now "odule options", and we need
 29234                                  	clc			; that "m" we just read (or whatever it is).
 29235                                  	jmp	short pvX	; Then return with carry clear == we're done.
 29236                                  
 29237                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 29238                                  	;toUpper al		; So we make it upper-case, and...
 29239                                  	and	al,0DFh
 29240                                  	;cmp	al,'S'
 29241                                  	cmp	al,optS		; just read 'S'?
 29242                                  	jne	short pv30
 29243                                  
 29244                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 29245                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29246                                  
 29247                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 29248                                  	;
 29249                                  	;push	es
 29250                                  	;push	cs
 29251                                  	;pop	es
 29252                                  	;mov	[es:fUmbTiny],1	
 29253                                  	;pop	es
 29254                                  
 29255                                  	mov	byte [cs:fUmbTiny],1
 29256                                  
 29257                                  	jmp	short pv10	; possibly even "/L...".
 29258                                  
 29259                                  pv30:	;cmp	al,'L'
 29260                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 29261                                  	jne	short pvE1		; switch!
 29262                                  
 29263                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 29264                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29265                                  
 29266                                  	call	parseL
 29267                                  	jnc	short pv10	; If no carry, go back and look for more
 29268                                  
 29269                                  	dec	si		; Else, back up and exit.
 29270                                  	jmp	short pvErr	; AX has already been set by parseL
 29271                                  
 29272                                  pvE1:	;mov	ax,3
 29273                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 29274                                  pvErr:	dec	si
 29275                                  	dec	si
 29276                                  	stc
 29277                                  pvX:	;popreg	<es, ds, di>
 29278                                  	pop	es
 29279                                  	pop	ds
 29280                                  	pop	di
 29281                                  	retn
 29282                                  
 29283                                  ; -----------------------------------------------------------------------------
 29284                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 29285                                  ; -----------------------------------------------------------------------------
 29286                                  ; ENTRY:    ES:SI points to colon
 29287                                  ; EXIT:     ES:SI points to first character not parsed
 29288                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 29289                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 29290                                  ; -----------------------------------------------------------------------------
 29291                                  ; If the string here is terminated with anything other than whitespace or a
 29292                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 29293                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 29294                                  ; makes sure the app /L: is reported as being the culprit.
 29295                                  ; -----------------------------------------------------------------------------
 29296                                  
 29297                                  parseL:
 29298                                  	lodsb
 29299                                  	cmp	al,':'		; Make sure they did /L:
 29300                                  	jne	short plE1	; If they didn't, return with carry set.
 29301                                  
 29302                                  ; ------------------------------------------
 29303                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 29304                                  ; ------------------------------------------
 29305                                  
 29306                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 29307                                  	jc	short plE2	; And error if it's a bad number.
 29308                                  	call	convUMB		; Convert any address to a UMB number
 29309                                  
 29310                                  	mov	cl,al		; Remember the UMB number
 29311                                  	call	stowUMB		; Mark this UMB # as used;
 29312                                  	jc	short plE2	; If it was already marked, it'll error
 29313                                  
 29314                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 29315                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29316                                  
 29317                                  	lodsb
 29318                                  	cmp	al,';'		; Did "umb;" ?
 29319                                  	je	short pl10	; Yep: go back and get another UMB.
 29320                                  
 29321                                  	call	isWhite		; Did "umb " ?
 29322                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 29323                                  
 29324                                  	call	isEOL		; Did "umb" ?
 29325                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 29326                                  
 29327                                  	;cmp	al,'/'
 29328                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 29329                                  	je	short plSwX	; If so, back up ES:SI one character and return
 29330                                  
 29331                                  	cmp	al,','		; Did "umb," ?
 29332                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 29333                                  
 29334                                  ; --- Read a size -------------------------------------------------------------
 29335                                  
 29336                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 29337                                  	jc	short plE1	; And error if it's a bad size.
 29338                                  
 29339                                  	call	toPara		; Convert from bytes to paragraphs
 29340                                  
 29341                                  	call	stowSiz		; CL still has the UMB number for this routine
 29342                                  
 29343                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 29344                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29345                                  
 29346                                  	lodsb
 29347                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 29348                                  	je	short pl10	;
 29349                                  
 29350                                  	call	isWhite		; Did it end with whitespace?
 29351                                  	jz	short plX	; If so, we're done here--go back.
 29352                                  
 29353                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 29354                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 29355                                  
 29356                                  	;cmp	al,'/'
 29357                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 29358                                  	je	short plSwX	; If so, again, we're done here.
 29359                                  plE1:	
 29360                                  	;mov	ax,1
 29361                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 29362                                  	dec	si
 29363                                  	stc
 29364                                  	retn
 29365                                  
 29366                                  plE2:	;mov	ax,2
 29367                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 29368                                  	; 12/12/2022
 29369                                  	; cf=1
 29370                                  	;stc
 29371                                  	retn
 29372                                  plSwX:	
 29373                                  	dec	si		; If we hit a '/' character, back up one char
 29374                                  				; so the whitespace checker will see it too.
 29375                                  plX:	; 12/12/2022
 29376                                  	; cf=0
 29377                                  	;clc			; Then just return with carry clear, so
 29378                                  	retn			; ParseVar will go about its business.
 29379                                  
 29380                                  ; -----------------------------------------------------------------------------
 29381                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 29382                                  ; -----------------------------------------------------------------------------
 29383                                  ; ENTRY:    None
 29384                                  ; EXIT:     None
 29385                                  ; ERROR:    None
 29386                                  ; USES:     fm_argc, flags
 29387                                  ; -----------------------------------------------------------------------------
 29388                                  
 29389                                  ;incArgc:
 29390                                  	;push	ax
 29391                                  
 29392                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 29393                                  
 29394                                  	;mov	al,[cs:fm_argc]
 29395                                  
 29396                                  	;inc	al		; Increment it,
 29397                                  
 29398                                  	;;putdata fm_argc, al	; And store it right back.
 29399                                  
 29400                                  	;mov	[cs:fm_argc],al
 29401                                  
 29402                                  	;pop	ax
 29403                                  	;retn
 29404                                  
 29405                                  ; -----------------------------------------------------------------------------
 29406                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 29407                                  ; -----------------------------------------------------------------------------
 29408                                  ; ENTRY:    AL contains character to test
 29409                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 29410                                  ; ERROR:    None
 29411                                  ; USES:     ZF
 29412                                  ; -----------------------------------------------------------------------------
 29413                                  
 29414                                  isEOL:
 29415                                  	cmp	al,0		; Null-terminator
 29416                                  	je	short ieX
 29417                                  	cmp	al,CR ; 0Dh	; Carriage Return
 29418                                  	je	short ieX
 29419                                  	cmp	al,LF ; 0Ah	; LineFeed
 29420                                  ieX:	
 29421                                  	retn
 29422                                  
 29423                                  ; -----------------------------------------------------------------------------
 29424                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 29425                                  ; -----------------------------------------------------------------------------
 29426                                  ; ENTRY:    AL contains character to test
 29427                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 29428                                  ; ERROR:    None
 29429                                  ; USES:     ZF
 29430                                  ; -----------------------------------------------------------------------------
 29431                                  
 29432                                  isWhite:
 29433                                  	cmp	al,' '		; Space
 29434                                  	je	short iwX
 29435                                  	cmp	al,'='		; Equals (treat as whitespace)
 29436                                  	je	short iwX
 29437                                  	cmp	al,tab ; 9	; Tab
 29438                                  iwX:	
 29439                                  	retn
 29440                                  
 29441                                  ; -----------------------------------------------------------------------------
 29442                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 29443                                  ; -----------------------------------------------------------------------------
 29444                                  ; ENTRY:    AL contains UMB number
 29445                                  ; EXIT:     None
 29446                                  ; ERROR:    None
 29447                                  ; USES:     Flags, variables in highvar.inc
 29448                                  ; -----------------------------------------------------------------------------
 29449                                  
 29450                                  unMarkUMB:
 29451                                  	push	ax
 29452                                  	push	bx
 29453                                  	push	di
 29454                                  	push	es
 29455                                  
 29456                                  	push	cs
 29457                                  	pop	es
 29458                                  
 29459                                  	xor	ah,ah
 29460                                  	mov	bx,ax
 29461                                  
 29462                                  	; 19/04/2019
 29463                                  	
 29464                                  	;mov	byte [es:bx+UmbUsed],0
 29465                                  	mov	[es:bx+UmbUsed],ah ; 0
 29466                                  
 29467                                  	cmp	[es:UmbLoad],al
 29468                                  	jne	short umu10
 29469                                  
 29470                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 29471                                  	mov	[es:UmbLoad],ah ; 0
 29472                                  umu10:	
 29473                                  	pop	es
 29474                                  	pop	di
 29475                                  	pop	bx
 29476                                  	pop	ax
 29477                                  	retn
 29478                                  
 29479                                  ; -----------------------------------------------------------------------------
 29480                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 29481                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 29482                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 29483                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 29484                                  ; -----------------------------------------------------------------------------
 29485                                  ; ENTRY:    AL contains UMB number, as specified by the user
 29486                                  ; EXIT:     None
 29487                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 29488                                  ; USES:     AX, Flags, variables in highvar.inc
 29489                                  ; -----------------------------------------------------------------------------
 29490                                  
 29491                                  stowUMB:
 29492                                  	cmp	al,MAXUMB ; 16
 29493                                  	jb	short su10
 29494                                  	stc
 29495                                  	retn			; Ooops-- UMB>=MAXUMB
 29496                                  su10:	
 29497                                  	push	bx
 29498                                  	push	di
 29499                                  	push	si
 29500                                  	push	ds
 29501                                  	push	es
 29502                                  	push	cs
 29503                                  	pop	es
 29504                                  	push	cs
 29505                                  	pop	ds
 29506                                  	
 29507                                  	;cmp	byte [UmbLoad],0FFh
 29508                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 29509                                  	jne	short su20
 29510                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 29511                                  su20:	
 29512                                  	or	al,al		; If they gave UMB 0, there's really nothing
 29513                                  	jz	short su30	; that we should do here.
 29514                                  
 29515                                  	mov	bl,al
 29516                                  	xor	bh,bh
 29517                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 29518                                  
 29519                                  	xchg	[es:bx+UmbUsed],al
 29520                                  
 29521                                  	or	al,al		; If it was already 1, then al==1... and that
 29522                                  	jz	short su30	; means an error.
 29523                                  
 29524                                  	stc			; OOOPS!  This one's been used before.  :(
 29525                                  su30:	
 29526                                  	pop	es
 29527                                  	pop	ds
 29528                                  	pop	si
 29529                                  	pop	di
 29530                                  	pop	bx
 29531                                  	retn
 29532                                  
 29533                                  ; -----------------------------------------------------------------------------
 29534                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 29535                                  ; -----------------------------------------------------------------------------
 29536                                  ; ENTRY:    CL contains UMB number, AX contains size
 29537                                  ; EXIT:     None
 29538                                  ; ERROR:    None
 29539                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 29540                                  ; -----------------------------------------------------------------------------
 29541                                  
 29542                                  ; 13/05/2019
 29543                                  
 29544                                  stowSiz:
 29545                                  	push	bx
 29546                                  	;push	di ; ?
 29547                                  	push	es
 29548                                  
 29549                                  	push	cs
 29550                                  	pop	es	
 29551                                  
 29552                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 29553                                  	mov	bh,0			;     bx==UMB number, AX==size
 29554                                  	shl	bl,1			;     bx==offset into array, AX=size
 29555                                  	mov	[es:bx+UmbSize],ax	; Store the size
 29556                                  	
 29557                                  	pop	es
 29558                                  	;pop	di ; ?
 29559                                  	pop	bx
 29560                                  
 29561                                  	retn
 29562                                  
 29563                                  ; -----------------------------------------------------------------------------
 29564                                  ;*** toDigit - converts a character-digit to its binary counterpart
 29565                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 29566                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 29567                                  ; A-F are considered valid iff gnradix is 16.
 29568                                  ; -----------------------------------------------------------------------------
 29569                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 29570                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 29571                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 29572                                  ; USES:     CL, Flags
 29573                                  ; -----------------------------------------------------------------------------
 29574                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29575                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29576                                  ; will be 10 or 16.
 29577                                  ; -----------------------------------------------------------------------------
 29578                                  
 29579                                  gnradix:
 29580                                  	dw	0		; Must be a word--16x16 multiplication
 29581                                  
 29582                                  toDigit:
 29583                                  	cmp	word [cs:gnradix],16
 29584                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 29585                                  
 29586                                  toDigit_hex:
 29587                                  	cmp	cl,'a'	; 61h
 29588                                  	jb	short td10
 29589                                  	cmp	cl,'f'	; 66h
 29590                                  	ja	short tdE	; Nothing valid above 'z' at all...
 29591                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 29592                                  	;clc			; <- CLC is implicit from last SUB
 29593                                  	retn
 29594                                  td10:	
 29595                                  	cmp	cl,'A'  ; 41h
 29596                                  	jb	short td20	; Below 'A'?  Not a letter...
 29597                                  	cmp	cl,'F'	; 46h
 29598                                  	ja	short tdE	; Above 'F'?  Not a digit.
 29599                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 29600                                  	;clc			; <- CLC is implicit from last SUB
 29601                                  	retn
 29602                                  toDigit_dec:
 29603                                  td20:	
 29604                                  	cmp	cl,'0'		; If less than zero,
 29605                                  	;jb	short tdE	; Done.
 29606                                  	jb	short tdEr ; 08/04/2019
 29607                                  	cmp	cl,'9'		; Or, if greater than nine,
 29608                                  	ja	short tdE	; Done.
 29609                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 29610                                  	;clc			; <- CLC is implicit from last SUB
 29611                                  	retn
 29612                                  tdE:	
 29613                                  	stc
 29614                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 29615                                  	retn
 29616                                  
 29617                                  ; -----------------------------------------------------------------------------
 29618                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 29619                                  ; -----------------------------------------------------------------------------
 29620                                  ; ENTRY:    ES:SI points to an ascii string to scan
 29621                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 29622                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 29623                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 29624                                  ; -----------------------------------------------------------------------------
 29625                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29626                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29627                                  ; will be 10 or 16.
 29628                                  ; -----------------------------------------------------------------------------
 29629                                  
 29630                                  ; 08/04/2019 - Retro DOS v4.0
 29631                                  
 29632                                  GetXNum:
 29633                                  	;pushreg <bx, cx, ds>
 29634                                  	push	bx
 29635                                  	push	cx
 29636                                  	push	ds
 29637                                  
 29638                                  	cld
 29639                                  	xor	ax,ax
 29640                                  	xor	bx,bx
 29641                                  	xor	cx,cx
 29642                                  	xor	dx,dx			; Start with 0 (makes sense)
 29643                                  
 29644                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 29645                                  
 29646                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 29647                                  	;call	toDigit
 29648                                  	call	toDigit_dec
 29649                                  	jc	short gxnE		; If it's not a digit, leave now.
 29650                                  
 29651                                  	or	cl,cl
 29652                                  	jnz	short gxn20		; Doesn't have '0x'
 29653                                  	mov	cl,[es:si+1]
 29654                                  	cmp	cl,'x'			; Either 'x'...
 29655                                  	je	short gxn10
 29656                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29657                                  	jne	short gxn20
 29658                                  
 29659                                  gxn10:	
 29660                                  	mov	word [cs:gnradix], 16
 29661                                  	inc	si			; Since we read "0x", march over it.
 29662                                  	inc	si
 29663                                  
 29664                                  ; ------------------------------------------------------
 29665                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29666                                  ;        DX:AX = current total
 29667                                  ;        BX    = 0
 29668                                  ;        CH    = 0
 29669                                  ; ------------------------------------------------------
 29670                                  
 29671                                  gxn20:	
 29672                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29673                                  	inc	si
 29674                                  
 29675                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29676                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29677                                  
 29678                                  	call	mul32		; Multiply DX:AX by gnradix
 29679                                  	jc	short gxnX	; (if it's too big, error out)
 29680                                  
 29681                                  	add	ax,cx		; Add the digit
 29682                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29683                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29684                                  	;jmp	short gxn20
 29685                                  	jnc	short gxn20
 29686                                  gxnE:	
 29687                                  	;stc			; In this case, we need to set the carry
 29688                                  	jmp	short gxnX	; and leave--there were no digits given.
 29689                                  gxnQ:	
 29690                                  	dec	si		; Don't read in the offensive character.
 29691                                  	clc			; And clear carry, so they know it's okay.
 29692                                  gxnX:	
 29693                                  	pop	ds
 29694                                  	pop	cx
 29695                                  	pop	bx
 29696                                  	retn
 29697                                  
 29698                                  ; -----------------------------------------------------------------------------
 29699                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29700                                  ; -----------------------------------------------------------------------------
 29701                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29702                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29703                                  ; ERROR:   Carry set if number was too large
 29704                                  ; USES:    Flags, AX, DX
 29705                                  ; -----------------------------------------------------------------------------
 29706                                  
 29707                                  mul32:
 29708                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29709                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29710                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29711                                  	jc	short m32E	; Too big?
 29712                                  
 29713                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29714                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29715                                  
 29716                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29717                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29718                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29719                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29720                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29721                                  	retn
 29722                                  m32E:	
 29723                                  	pop	ax
 29724                                  	retn
 29725                                  
 29726                                  ; -----------------------------------------------------------------------------
 29727                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29728                                  ; -----------------------------------------------------------------------------
 29729                                  ; ENTRY:   DX:AX = the number to be divided
 29730                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29731                                  ; ERROR:   None
 29732                                  ; USES:    Flags, AX, DX
 29733                                  ; -----------------------------------------------------------------------------
 29734                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29735                                  ;       can't ensure a 386 host machine. Sorry.
 29736                                  ; -----------------------------------------------------------------------------
 29737                                  
 29738                                  toPara:
 29739                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29740                                  
 29741                                  	mov	cl,4		;
 29742                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29743                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29744                                  	mov	cl,12
 29745                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29746                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29747                                  
 29748                                  	pop	cx
 29749                                  	retn
 29750                                  
 29751                                  ; -----------------------------------------------------------------------------
 29752                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29753                                  ; -----------------------------------------------------------------------------
 29754                                  ; ENTRY:  Nothing
 29755                                  ; EXIT:   AX contains 0x9FFF for most systems
 29756                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29757                                  ; USES:   Flags, AX
 29758                                  ; -----------------------------------------------------------------------------
 29759                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29760                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29761                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29762                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29763                                  ; -----------------------------------------------------------------------------
 29764                                  
 29765                                  UmbHead:
 29766                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29767                                  
 29768                                  	;push	si ; ?
 29769                                  	;push	ds ; ? 
 29770                                  	;push	es
 29771                                  	;push	bx ; *	
 29772                                  
 29773                                  	; 09/04/2019
 29774                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29775                                  
 29776                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29777                                  	int	21h
 29778                                  
 29779                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29780                                  	cmp	ax,0FFFFh
 29781                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29782                                  
 29783                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29784                                  	;jmp	short uhX
 29785                                  	; 12/12/2022
 29786                                  	retn
 29787                                  uhE:	
 29788                                  	stc
 29789                                  uhX:	
 29790                                  	;pop	bx ; *
 29791                                  	;pop	es
 29792                                  	;pop	ds ; ?
 29793                                  	;pop	si ; ?
 29794                                  	retn
 29795                                  
 29796                                  ; -----------------------------------------------------------------------------
 29797                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29798                                  ; -----------------------------------------------------------------------------
 29799                                  ; ENTRY:  ES:0 should point to a valid MCB
 29800                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29801                                  ; USES:   Flags
 29802                                  ; -----------------------------------------------------------------------------
 29803                                  
 29804                                  isSysMCB:
 29805                                  	;push	ax
 29806                                  
 29807                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29808                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29809                                  	;je	short ism10
 29810                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29811                                  	;;je	short ism10
 29812                                  	;;jmp	short ismX		; Anything else isn't.
 29813                                  	;jne	short ismX
 29814                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29815                                  	jne	short ismX 
 29816                                  ism10:	
 29817                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29818                                  	;cmp	ax,'SC' ; 4353h
 29819                                  	cmp	word [es:ARENA.NAME],'SC'
 29820                                  ismX:	
 29821                                  	;pop	ax
 29822                                  	retn
 29823                                  
 29824                                  ; 09/04/2019 - Retro DOS v4.0
 29825                                  
 29826                                  ; -----------------------------------------------------------------------------
 29827                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29828                                  ; -----------------------------------------------------------------------------
 29829                                  ; ENTRY:  AX contains a segment address
 29830                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29831                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29832                                  ; USES:   Flags, AX
 29833                                  ; -----------------------------------------------------------------------------
 29834                                  ; An address in the following areas is treated as:
 29835                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29836                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29837                                  ;      ...
 29838                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29839                                  ; -----------------------------------------------------------------------------
 29840                                  
 29841                                  AddrToUmb:
 29842                                  	push	cx
 29843                                  	push	dx
 29844                                  	push	es
 29845                                  
 29846                                  	mov	dx,ax		; DX = address to search for
 29847                                  
 29848                                  	call	UmbHead		; AX = first segment
 29849                                  	jc	short atuE	; If it couldn't get it, error out.
 29850                                  
 29851                                  	; 14/08/2023
 29852                                  	;mov	es,ax ; *	; ES = first UMB segment
 29853                                  	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 29854                                  
 29855                                  	; 22/07/2023
 29856                                  atu10:
 29857                                  	mov	es,ax ; * ; ** ; 14/08/2023
 29858                                  ; ----------------------------------------
 29859                                  ; ATU10--ES - Current MCB address
 29860                                  ;        DX - Address given for conversion
 29861                                  ;        CX - Current UMB #
 29862                                  ; ----------------------------------------
 29863                                  
 29864                                  ;atu10:	
 29865                                  	;mov	ax,es ; * ; 14/08/2023
 29866                                          cmp	ax,dx		; Present segment >= given segment?
 29867                                  	jae	short atuX	; Yep--done.
 29868                                  
 29869                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29870                                  	jnz	short atu20
 29871                                  
 29872                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29873                                  atu20:	
 29874                                  	;mov	al,[es:ARENA.SIGNATURE]
 29875                                  	;cmp	al,arena_signature_end  ; 'Z'
 29876                                  	; 14/08/2023
 29877                                  	; ax = es
 29878                                  	;mov	ax,es ; **
 29879                                  	add	ax,[es:ARENA.SIZE]
 29880                                  	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 29881                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29882                                  
 29883                                  	;NextMCB es,ax
 29884                                  
 29885                                  	;mov	ax,es ; **
 29886                                  	;;add	ax,[es:3]
 29887                                  	;add	ax,[es:ARENA.SIZE]
 29888                                  	inc	ax
 29889                                  	; 14/08/2023
 29890                                  	;mov	es,ax ; *
 29891                                  	jmp	short atu10
 29892                                  
 29893                                  ; -----------------------------------------------------------------------------
 29894                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29895                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29896                                  ; -----------------------------------------------------------------------------
 29897                                  
 29898                                  atu30:	
 29899                                  	; 14/08/2023
 29900                                  	; ax = es + [es:ARENA.SIZE] 
 29901                                  	;mov	ax,es ; **
 29902                                  	;add	ax,[es:ARENA.SIZE] ; **
 29903                                  	cmp	ax,dx		; Present >= given?
 29904                                  	jae	short atuX	; Yep! It _was_ inside.
 29905                                  atuE:	
 29906                                  	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 29907                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29908                                  atuX:	
 29909                                  	mov	ax,cx		; Return the UMB number in AX
 29910                                  	
 29911                                  	pop	es	
 29912                                  	pop	dx
 29913                                  	pop	cx
 29914                                  	retn
 29915                                  
 29916                                  ; -----------------------------------------------------------------------------
 29917                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29918                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29919                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29920                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29921                                  ; -----------------------------------------------------------------------------
 29922                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29923                                  ; EXIT:   AX will contain a UMB number
 29924                                  ; ERROR:  None
 29925                                  ; USES:   Flags, AX
 29926                                  ; -----------------------------------------------------------------------------
 29927                                  
 29928                                  convUMB:
 29929                                  	cmp	word [cs:gnradix],16
 29930                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29931                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29932                                  ;cmp	ax,0FFFFh
 29933                                  	;jne	short cu10
 29934                                  	;inc	ax		; If too high, ignore it (make it conventional)
 29935                                  	; 14/08/2023
 29936                                  	inc	ax
 29937                                  	jz	short cu10	; If too high, ignore it (make it conventional)
 29938                                  	dec	ax
 29939                                  cu10:	
 29940                                  	retn
 29941                                  
 29942                                  ; -----------------------------------------------------------------------------
 29943                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29944                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29945                                  ; of the usual HIGH_FIRST.  See the code.
 29946                                  ; -----------------------------------------------------------------------------
 29947                                  ; ENTRY:  None
 29948                                  ; EXIT:   None
 29949                                  ; ERROR:  None
 29950                                  ; USES:   Flags, fm_umb, fm_strat
 29951                                  ; -----------------------------------------------------------------------------
 29952                                  
 29953                                  setUMBs:
 29954                                  	push	ax
 29955                                  	push	bx
 29956                                  	call	fm_link
 29957                                  	pop	bx
 29958                                  	pop	ax
 29959                                  	retn
 29960                                  
 29961                                  ; -----------------------------------------------------------------------------
 29962                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29963                                  ; -----------------------------------------------------------------------------
 29964                                  ; ENTRY:  None
 29965                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29966                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29967                                  ; ERROR:  None
 29968                                  ; USES:   Flags, fm_strat, fm_umb
 29969                                  ; -----------------------------------------------------------------------------
 29970                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29971                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29972                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29973                                  ; such that the load UMB is too small, and shouldn't be used.
 29974                                  ; -----------------------------------------------------------------------------
 29975                                  
 29976                                  loadLow:
 29977                                  	;push	ds
 29978                                  	;push	cs		; Point DS into appropriate data segment
 29979                                  	;pop	ds	
 29980                                  
 29981                                  	;mov	al,[UmbLoad]
 29982                                  	mov	al,[cs:UmbLoad]
 29983                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29984                                  	jne	short ll10
 29985                                  
 29986                                  	stc
 29987                                  ll15:
 29988                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29989                                  	;stc
 29990                                  	;jmp	short llX
 29991                                  	retn
 29992                                  ll10:	
 29993                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29994                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29995                                  
 29996                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29997                                  	retn
 29998                                  
 29999                                  	;mov	al,1
 30000                                  	;clc
 30001                                  ;llX:
 30002                                  	;pop	ds		; Return DS to where it was
 30003                                  	;retn
 30004                                  
 30005                                  ; -----------------------------------------------------------------------------
 30006                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 30007                                  ; -----------------------------------------------------------------------------
 30008                                  ; ENTRY:  None
 30009                                  ; EXIT:   None
 30010                                  ; ERROR:  None
 30011                                  ; USES:   Flags, fm_strat, fm_umb
 30012                                  ; -----------------------------------------------------------------------------
 30013                                  
 30014                                  HideUMBs:
 30015                                  	push	ax
 30016                                  	push	cx
 30017                                  	push	ds
 30018                                  	push	es
 30019                                  
 30020                                  	call	UmbTest		; See if we REALLY linked in anything...
 30021                                  	jc	short husX	; ...if not, there's nothing for us to do.
 30022                                  
 30023                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 30024                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 30025                                  
 30026                                  	;putdata fInHigh,1	; Remember that we're now running high
 30027                                  	mov	byte [cs:fInHigh],1
 30028                                  
 30029                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 30030                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 30031                                  
 30032                                  	cmp	al,UNSPECIFIED	; If they didn't,
 30033                                  	je	short husX	; then we shouldn't do this loop:
 30034                                  
 30035                                  	xor	cx,cx
 30036                                  
 30037                                  ; -----------------------------------------------
 30038                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 30039                                  ; -----------------------------------------------
 30040                                  
 30041                                  hus10:	inc	cx		; For each UMB:
 30042                                  	cmp	cx,MAXUMB ; 16
 30043                                  	jae	short hus20
 30044                                  
 30045                                  	mov	al,cl		; (stopping as soon as we're outside of the
 30046                                  	push	es
 30047                                  	call	findUMB		; valid range of UMBs)
 30048                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 30049                                  	jc	short hus20
 30050                                  
 30051                                  	call	_hideUMB_	; hide what we need to hide.
 30052                                  
 30053                                  	jmp	short hus10
 30054                                  hus20:	
 30055                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 30056                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 30057                                  
 30058                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 30059                                  	jnz	short husX	; If not, we're done.
 30060                                  
 30061                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 30062                                  husX:	
 30063                                  	pop	es
 30064                                  	pop	ds
 30065                                  	pop	cx
 30066                                  	pop	ax
 30067                                  	retn
 30068                                  
 30069                                  ; -----------------------------------------------------------------------------
 30070                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 30071                                  ; -----------------------------------------------------------------------------
 30072                                  ; ENTRY:  None
 30073                                  ; EXIT:   AL == load UMB
 30074                                  ; ERROR:  None
 30075                                  ; USES:   Flags, AX
 30076                                  ; -----------------------------------------------------------------------------
 30077                                  
 30078                                  ;GetLoadUMB:
 30079                                  ;	;getdata al, UmbLoad
 30080                                  ;	push	ds
 30081                                  ;	push	cs
 30082                                  ;	pop	ds
 30083                                  ;	mov	al,[UmLoad]
 30084                                  ;	pop	ds
 30085                                  ;	retn
 30086                                  
 30087                                  ; -----------------------------------------------------------------------------
 30088                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 30089                                  ; -----------------------------------------------------------------------------
 30090                                  ; ENTRY:  None
 30091                                  ; EXIT:   AX == load UMB minimum size
 30092                                  ; ERROR:  None
 30093                                  ; USES:   Flags, AX
 30094                                  ; -----------------------------------------------------------------------------
 30095                                  
 30096                                  GetLoadSize:
 30097                                  	; 09/04/2019 - Retro DOS v4.0
 30098                                  	mov	al,[cs:UmbLoad]
 30099                                  	jmp	short GetSize
 30100                                  
 30101                                  	;push	bx
 30102                                  	;;push	si
 30103                                  	;push	ds
 30104                                  	;push	cs
 30105                                  	;pop	ds
 30106                                  
 30107                                  	;mov	al,[UmbLoad]
 30108                                  
 30109                                  	;xor	ah,ah			;    ax==UMB
 30110                                  	;mov	bx,UmbSize		;    bx==array
 30111                                  	;shl	al,1	                ;    ax==offset
 30112                                  	;;add	ax,bx			;    ax==element index
 30113                                  	;;mov	si,ax			; ds:si==element index
 30114                                  
 30115                                  	;;lodsw				;    ax==size
 30116                                  
 30117                                  	;add	bx,ax
 30118                                  	;mov	ax,[bx]
 30119                                  
 30120                                  	;pop	ds
 30121                                  	;;pop	si
 30122                                  	;pop	bx
 30123                                  	;retn
 30124                                  
 30125                                  ; -----------------------------------------------------------------------------
 30126                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 30127                                  ; -----------------------------------------------------------------------------
 30128                                  ; ENTRY:  AL == a UMB number
 30129                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 30130                                  ; ERROR:  None
 30131                                  ; USES:   Flags, AX
 30132                                  ; -----------------------------------------------------------------------------
 30133                                  
 30134                                  GetSize:
 30135                                  	; 09/04/2019 - Retro DOS v4.0
 30136                                  
 30137                                  	push	bx
 30138                                  	;push	si
 30139                                  	;push	ds
 30140                                  	;push	cs
 30141                                  	;pop	ds
 30142                                  
 30143                                  	xor	ah,ah			;    ax==UMB
 30144                                  	mov	bx,UmbSize		;    bx==array
 30145                                  	shl	al,1	                ;    ax==offset
 30146                                  	;add	ax,bx			;    ax==element index
 30147                                  	;mov	si,ax			; ds:si==element index
 30148                                  
 30149                                  	;lodsw				;    ax==size
 30150                                  
 30151                                  	add	bx,ax
 30152                                  	;mov	ax,[bx]
 30153                                  	mov	ax,[cs:bx]
 30154                                  
 30155                                  	;pop	ds
 30156                                  	;pop	si
 30157                                  	pop	bx
 30158                                  	retn
 30159                                  
 30160                                  ; -----------------------------------------------------------------------------
 30161                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 30162                                  ; -----------------------------------------------------------------------------
 30163                                  ; ENTRY:   AL == new load UMB
 30164                                  ; EXIT:    None
 30165                                  ; ERROR:   None
 30166                                  ; USES:    Flags, AX
 30167                                  ; -----------------------------------------------------------------------------
 30168                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 30169                                  ;          time you would ever need this, so that's okay.
 30170                                  ; -----------------------------------------------------------------------------
 30171                                  
 30172                                  ;StoLoadUMB:
 30173                                  ;	;putdata UmbLoad, al
 30174                                  ;	push	es
 30175                                  ;	push	cs
 30176                                  ;	pop	es
 30177                                  ;	mov	[es:UmbLoad],al
 30178                                  ;	pop	es
 30179                                  ;	retn
 30180                                  
 30181                                  ; -----------------------------------------------------------------------------
 30182                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 30183                                  ; -----------------------------------------------------------------------------
 30184                                  ; ENTRY:  AL == new load size
 30185                                  ; EXIT:   None
 30186                                  ; ERROR:  None
 30187                                  ; USES:   Flags, AX
 30188                                  ; -----------------------------------------------------------------------------
 30189                                  
 30190                                  StoLoadSize:
 30191                                  	push	dx
 30192                                  
 30193                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 30194                                  	;
 30195                                  	;push	ds
 30196                                  	;push	cs
 30197                                  	;pop	ds
 30198                                  	;mov	dl,[UmbLoad]
 30199                                  	;pop	ds	
 30200                                  
 30201                                  	mov	dl,[cs:UmbLoad]
 30202                                  
 30203                                  	cmp	dl,UNSPECIFIED ; 0FFh
 30204                                  	je	short sls10
 30205                                  
 30206                                  	call	stowSiz			; We've got a function to do just this
 30207                                  sls10:	
 30208                                  	pop	dx
 30209                                  	retn
 30210                                  
 30211                                  ; -----------------------------------------------------------------------------
 30212                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 30213                                  ; -----------------------------------------------------------------------------
 30214                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 30215                                  ; EXIT:     None; free elements in UMB marked as hidden
 30216                                  ; ERROR:    None
 30217                                  ; USES:     Flags
 30218                                  ; -----------------------------------------------------------------------------
 30219                                  
 30220                                  hideUMB:
 30221                                  	push	ax
 30222                                  	push	es
 30223                                  
 30224                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 30225                                  	jc	short huX
 30226                                  
 30227                                  ; ------------------------------------------------
 30228                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 30229                                  ;            we're not in the same UMB, so exit.
 30230                                  ; ------------------------------------------------
 30231                                  
 30232                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30233                                  	jz	short huX	; If it is, we've finished the UMB.
 30234                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 30235                                  	or	word [es:ARENA.OWNER],0
 30236                                  	jnz	short hu20
 30237                                  
 30238                                  	call	hideMCB
 30239                                  hu20:	
 30240                                  	mov	al,[es:ARENA.SIGNATURE]
 30241                                  	cmp	al,arena_signature_end  ;'Z'
 30242                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 30243                                  
 30244                                  	;NextMCB es, ax		; Go on forward.
 30245                                  	mov     ax,es
 30246                                  	;add	ax,[es:3]
 30247                                  	add     ax,[es:ARENA.SIZE]
 30248                                  	inc     ax
 30249                                  	mov     es,ax
 30250                                  
 30251                                  	jmp	short hu10
 30252                                  huX:	
 30253                                  	pop	es
 30254                                  	pop	ax
 30255                                  	retn
 30256                                  
 30257                                  ; -----------------------------------------------------------------------------
 30258                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 30259                                  ; -----------------------------------------------------------------------------
 30260                                  ; ENTRY:    None
 30261                                  ; EXIT:     ZF set if user DIDN'T specify /S
 30262                                  ; ERROR:    None
 30263                                  ; USES:     Flags
 30264                                  ; -----------------------------------------------------------------------------
 30265                                  
 30266                                  isTiny:
 30267                                  	push	ax
 30268                                  
 30269                                  	;getdata al, fUmbTiny
 30270                                  	;
 30271                                  	;push	ds
 30272                                  	;push	cs
 30273                                  	;pop	ds
 30274                                  	;mov	al,[fUmbTiny]
 30275                                  	;pop	ds
 30276                                  
 30277                                  	mov	al,[cs:fUmbTiny]		
 30278                                  
 30279                                  	or	al,al
 30280                                  	pop	ax
 30281                                  	retn
 30282                                  
 30283                                  ; -----------------------------------------------------------------------------
 30284                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 30285                                  ; -----------------------------------------------------------------------------
 30286                                  ; ENTRY:    ES:0 should point to an MCB
 30287                                  ; EXIT:     ZF set if MCB is free, else !ZF
 30288                                  ; ERROR:    None
 30289                                  ; USES:     Flags
 30290                                  ; -----------------------------------------------------------------------------
 30291                                  
 30292                                  ;isFreeMCB:
 30293                                  ;	or	word [es:ARENA.OWNER],0
 30294                                  ;	retn
 30295                                  
 30296                                  ; -----------------------------------------------------------------------------
 30297                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 30298                                  ; -----------------------------------------------------------------------------
 30299                                  ; ENTRY:    ES:0 should point to an MCB
 30300                                  ; EXIT:     None; MCB marked as HIDDEN
 30301                                  ; ERROR:    None
 30302                                  ; USES:     None
 30303                                  ; -----------------------------------------------------------------------------
 30304                                  
 30305                                  hideMCB:
 30306                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30307                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 30308                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 30309                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 30310                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 30311                                  	retn
 30312                                  
 30313                                  ; -----------------------------------------------------------------------------
 30314                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 30315                                  ; -----------------------------------------------------------------------------
 30316                                  ; ENTRY:    ES:0 should point to an MCB
 30317                                  ; EXIT:     None; MCB marked as FREE
 30318                                  ; ERROR:    None
 30319                                  ; USES:     None
 30320                                  ; -----------------------------------------------------------------------------
 30321                                  
 30322                                  unHideMCB:
 30323                                  	push	ax
 30324                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 30325                                  	mov	ax,'  ' ; 2020h
 30326                                  	mov	[es:ARENA.NAME+0],ax
 30327                                  	mov	[es:ARENA.NAME+2],ax
 30328                                  	mov	[es:ARENA.NAME+4],ax
 30329                                  	mov	[es:ARENA.NAME+6],ax
 30330                                  	pop	ax
 30331                                  	retn
 30332                                  
 30333                                  ; -----------------------------------------------------------------------------
 30334                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 30335                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 30336                                  ; -----------------------------------------------------------------------------
 30337                                  ; ENTRY:    AL should be to a valid UMB number
 30338                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 30339                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 30340                                  ; USES:     Flags, ES
 30341                                  ; -----------------------------------------------------------------------------
 30342                                  
 30343                                  findUMB:
 30344                                  	push	ax
 30345                                  	push	cx
 30346                                  	push	dx
 30347                                  
 30348                                  	xor	ah,ah		; Zap ah, so al==ax
 30349                                  
 30350                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 30351                                  
 30352                                  	call	UmbHead		; Returns first UMB segment in AX
 30353                                  	mov	es,ax
 30354                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30355                                  
 30356                                  ; ---------------------------------------------
 30357                                  ; FU10--CX - This UMB number; 0 == conventional
 30358                                  ;       DX - The UMB number they're looking for
 30359                                  ;       ES - The current MCB address
 30360                                  ; ---------------------------------------------
 30361                                  
 30362                                  fu10:	
 30363                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 30364                                  	je	short fuX	; searching for--so exit.
 30365                                  
 30366                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30367                                  	jnz	short fu20
 30368                                  
 30369                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30370                                  fu20:	
 30371                                  	mov	al,[es:ARENA.SIGNATURE]
 30372                                  	cmp	al,arena_signature_end ; 'Z'
 30373                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 30374                                  
 30375                                  	;NextMCB es, ax		; Go on forward.
 30376                                  	mov     ax,es
 30377                                  	;add	ax,[es:3]
 30378                                  	add     ax,[es:ARENA.SIZE]
 30379                                  	inc     ax
 30380                                  	mov     es,ax
 30381                                  
 30382                                  	jmp	short fu10
 30383                                  fuE:	
 30384                                  	stc
 30385                                  fuX:
 30386                                  	pop	dx
 30387                                  	pop	cx
 30388                                  	pop	ax		; The address is already in ES.
 30389                                  	retn
 30390                                  
 30391                                  ; -----------------------------------------------------------------------------
 30392                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 30393                                  ; -----------------------------------------------------------------------------
 30394                                  ; ENTRY:    AL should be to a valid UMB number
 30395                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 30396                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 30397                                  ; USES:     Flags, ES
 30398                                  ; -----------------------------------------------------------------------------
 30399                                  
 30400                                  BigFree:
 30401                                  	push	bx
 30402                                  	push	cx
 30403                                  
 30404                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 30405                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 30406                                  
 30407                                  	xor	bx,bx			; Segment address of largest free MCB
 30408                                  	xor	cx,cx			; Size of largest free MCB
 30409                                  
 30410                                  ; ---------------------------------------------
 30411                                  ; BF10--ES - Current MCB address
 30412                                  ;       BX - Address of largest free MCB so far
 30413                                  ;       CX - Size of largest free MCB so far
 30414                                  ; ---------------------------------------------
 30415                                  
 30416                                  bf10:	
 30417                                  	call	isSysMCB		; If we've left the MCB, we're done.
 30418                                  	jz	short bf30
 30419                                  
 30420                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 30421                                  	or	word [es:ARENA.OWNER],0
 30422                                  	jnz	short bf20
 30423                                  
 30424                                  	mov	ax,[es:ARENA.SIZE]
 30425                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 30426                                  	cmp	cx,ax
 30427                                  	jg	short bf20		; Unless we're bigger,
 30428                                  
 30429                                  	mov	bx,es			; Store this new element's address,
 30430                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 30431                                  	mov	cx,ax
 30432                                  
 30433                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 30434                                  	cmp	al,arena_signature_end	; 'Z'
 30435                                  	jz	short bf30		; 'Z' means this was the last MCB.
 30436                                  
 30437                                  	;NextMCB es,ax		; Go on forward.
 30438                                  	mov     ax,es
 30439                                  	;add	ax,[es:3]
 30440                                  	add     ax,[es:ARENA.SIZE]
 30441                                  	inc     ax
 30442                                  	mov     es,ax
 30443                                  
 30444                                  	jmp	short bf10
 30445                                  
 30446                                  bf30:	mov	es,bx			; Return the address
 30447                                  	mov	ax,cx			; Return the size
 30448                                  	or	bx,bx
 30449                                  	jnz	short bfX		; (if size==0, there's nothing free)
 30450                                  bfE:	
 30451                                  	stc
 30452                                  bfX:
 30453                                  	pop	cx
 30454                                  	pop	bx
 30455                                  	retn
 30456                                  
 30457                                  ; -----------------------------------------------------------------------------
 30458                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 30459                                  ; -----------------------------------------------------------------------------
 30460                                  ; ENTRY:    AL should be to a valid UMB number
 30461                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 30462                                  ; ERROR:    None
 30463                                  ; USES:     Flags
 30464                                  ; -----------------------------------------------------------------------------
 30465                                  
 30466                                  isSpecified:
 30467                                  	push	ax
 30468                                  
 30469                                  	xor	bh,bh
 30470                                  	mov	bl,al
 30471                                  
 30472                                  	;getdata al, DS:UmbUsed[bx]
 30473                                  	;
 30474                                  	;push	ds
 30475                                  	;push	cs
 30476                                  	;pop	ds
 30477                                  	;mov	al,[bx+UmbUsed]
 30478                                  	;pop	ds
 30479                                  	
 30480                                  	mov	al,[cs:bx+UmbUsed]
 30481                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 30482                                  
 30483                                  	pop	ax
 30484                                  	retn
 30485                                  
 30486                                  ; -----------------------------------------------------------------------------
 30487                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 30488                                  ; -----------------------------------------------------------------------------
 30489                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 30490                                  ; EXIT:     None; MCB broken if carry clear
 30491                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 30492                                  ; USES:     Flags
 30493                                  ; -----------------------------------------------------------------------------
 30494                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 30495                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 30496                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 30497                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 30498                                  ; minimum for performing a split.
 30499                                  ; -----------------------------------------------------------------------------
 30500                                  
 30501                                  MIN_SPLIT_SIZE	equ	20h
 30502                                  
 30503                                  shrinkMCB:
 30504                                  	;pushreg <bx, cx, es>
 30505                                  	push	bx
 30506                                  	push	cx
 30507                                  	push	es
 30508                                  
 30509                                  	mov	bx,ax			; Move things around... and
 30510                                  	mov	ax,es			; save this one for later.
 30511                                  
 30512                                  	mov	cx,[es:ARENA.SIZE]
 30513                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 30514                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 30515                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 30516                                  	; 18/12/2022
 30517                                  	cmp	cx,bx
 30518                                  	jb	short smE ; (*)
 30519                                  
 30520                                  	mov	dl,[es:ARENA.SIGNATURE]
 30521                                  	mov	cx,[es:ARENA.SIZE]
 30522                                  
 30523                                  	mov	[es:ARENA.SIZE],bx
 30524                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 30525                                  
 30526                                  	add	ax,bx
 30527                                  	inc	ax
 30528                                  	mov	es,ax			; Move to new arena area
 30529                                  
 30530                                  	mov	ax,cx
 30531                                  	sub	ax,bx
 30532                                  	; 12/12/2022
 30533                                  	; ax > 0
 30534                                  	dec	ax			; And prepare the new size
 30535                                  
 30536                                  	; 18/12/2022
 30537                                  	mov	[es:ARENA.SIGNATURE],dl
 30538                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 30539                                  	mov	[es:ARENA.SIZE],ax
 30540                                  	;mov	ax,'  ' ; 2020h
 30541                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 30542                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 30543                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 30544                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 30545                                  
 30546                                  	; 18/12/2022
 30547                                  	call	freeMCB	; (**)
 30548                                  
 30549                                  	; 12/12/2022
 30550                                  	; cf=0
 30551                                  	;clc
 30552                                  	; 18/12/2022
 30553                                  	;jmp	short smX
 30554                                  smE:	
 30555                                  	; 18/12/2022
 30556                                  	; cf=1 (*)
 30557                                  	;stc
 30558                                  smX:	
 30559                                  	;popreg	<es, cx, bx>
 30560                                  	pop	es
 30561                                  	pop	cx
 30562                                  	pop	bx
 30563                                  	retn
 30564                                  
 30565                                  ; -----------------------------------------------------------------------------
 30566                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 30567                                  ; -----------------------------------------------------------------------------
 30568                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 30569                                  ; EXIT:     None; UMB is hidden as necessary
 30570                                  ; ERROR:    None
 30571                                  ; USES:     Flags, AX, CX
 30572                                  ; -----------------------------------------------------------------------------
 30573                                  ; PRIMARY LOGIC:
 30574                                  ;
 30575                                  ; If the UMB is specified in the DH/LH statement, then:
 30576                                  ;    If the largest free segment is too small (check specified size), then:
 30577                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 30578                                  ;    Else, if largest free segment is LARGER than specified size, then:
 30579                                  ;       If /S was given on the command-line, then:
 30580                                  ;          Break that element into two pieces
 30581                                  ;          Set a flag that we're shrinking
 30582                                  ;       Endif
 30583                                  ;    Endif
 30584                                  ; Endif
 30585                                  ; If the UMB is NOT specified (or was removed by the above):
 30586                                  ;    Hide all free elements in the UMB
 30587                                  ;    If the flag that we're shrinking was set, then:
 30588                                  ;       UN-hide the lower portion of the shrunken UMB
 30589                                  ;    ENDIF
 30590                                  ; ENDIF
 30591                                  ; -----------------------------------------------------------------------------
 30592                                  
 30593                                  _hideUMB_:
 30594                                  	push	bx
 30595                                  	push	dx
 30596                                  	push	es
 30597                                  
 30598                                  	mov	al,cl
 30599                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 30600                                  	jz	short hu_20
 30601                                  
 30602                                  	mov	al,cl		; Retrieve the size of the largest
 30603                                  	call	BigFree		; free element in AX; put its address in ES
 30604                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 30605                                  
 30606                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 30607                                  	mov	al,cl		; Retrieve the user's specified
 30608                                  	call	GetSize		; minimum size for this umb (into AX)
 30609                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 30610                                  
 30611                                  	or	ax,ax		; If they didn't specify one,
 30612                                  	jz	short hu_20	; Skip over all this.
 30613                                  
 30614                                  	cmp	ax,bx		; Ah... if (specified > max free)
 30615                                  	jbe	short hu_10
 30616                                  
 30617                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 30618                                  	call	unMarkUMB
 30619                                  	jmp	short hu_20
 30620                                  hu_10:	
 30621                                  	call	isTiny		; Returns ZF clear if user specified /S
 30622                                  	jz	short hu_20
 30623                                  
 30624                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 30625                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 30626                                  
 30627                                  	mov	dx,es
 30628                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 30629                                  
 30630                                  hu_20:	mov	ax,cx
 30631                                  	call	isSpecified	; If they specified this UMB, we're done...
 30632                                  	jnz	short hu_X	; so leave.
 30633                                  
 30634                                  	xor	dx,dx
 30635                                  hu_30:	
 30636                                  	mov	al,cl
 30637                                  
 30638                                  	call	hideUMB		; Hides everything in UMB #al
 30639                                  
 30640                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 30641                                  	jz	short hu_X	; So we should leave.
 30642                                  
 30643                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 30644                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 30645                                  hu_X:	
 30646                                  	pop	es
 30647                                  	pop	dx
 30648                                  	pop	bx
 30649                                  	retn
 30650                                  
 30651                                  ; -----------------------------------------------------------------------------
 30652                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 30653                                  ; -----------------------------------------------------------------------------
 30654                                  ; Entry:  None
 30655                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 30656                                  ; Error:  None
 30657                                  ; Uses:   Flags
 30658                                  ; -----------------------------------------------------------------------------
 30659                                  
 30660                                  UnFreeze:
 30661                                  	push	ax
 30662                                  	push	es
 30663                                  
 30664                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 30665                                  	jc	short ufX
 30666                                  
 30667                                  	mov	es,ax
 30668                                  
 30669                                  ; ------------------------------
 30670                                  ; UF10--ES - Current MCB address
 30671                                  ; ------------------------------
 30672                                  
 30673                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 30674                                  	jnz	short uf20
 30675                                  	call	unHideMCB
 30676                                  uf20:	
 30677                                  	mov	al,[es:ARENA.SIGNATURE]
 30678                                  
 30679                                  	cmp	al,arena_signature_end ; 'Z'
 30680                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30681                                  
 30682                                  	;NextMCB es, ax		; Go on forward.
 30683                                  	mov     ax,es
 30684                                  	;add	ax,[es:3]
 30685                                  	add     ax,[es:ARENA.SIZE]
 30686                                  	inc     ax
 30687                                  	mov     es,ax
 30688                                  
 30689                                  	jmp	short uf10
 30690                                  ufX:	
 30691                                  	pop	es
 30692                                  	pop	ax
 30693                                  	retn
 30694                                  
 30695                                  ; -----------------------------------------------------------------------------
 30696                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30697                                  ; -----------------------------------------------------------------------------
 30698                                  ; ENTRY:    ES:0 should point to an MCB
 30699                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30700                                  ; ERROR:    None
 30701                                  ; USES:     Flags
 30702                                  ; -----------------------------------------------------------------------------
 30703                                  
 30704                                  isFrozMCB:
 30705                                  	;push	ax
 30706                                  
 30707                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30708                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30709                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30710                                  	jne	short ifmX
 30711                                  
 30712                                  	;mov	ax,[es:ARENA.NAME+0]
 30713                                  	;cmp	ax,'FR' ; 5246h
 30714                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30715                                  	jne	short ifmX
 30716                                  	;mov	ax,[es:ARENA.NAME+2]
 30717                                  	;cmp	ax,'OZ' ; 5A4Fh
 30718                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30719                                  	jne	short ifmX
 30720                                  	;mov	ax,[es:ARENA.NAME+4]
 30721                                  	;cmp	ax,'EN' ; 4E45h
 30722                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30723                                  	jne	short ifmX
 30724                                  	;mov	ax,[es:ARENA.NAME+6]
 30725                                  	;cmp	ax,'  ' ; 2020h
 30726                                  	cmp	word [es:ARENA.NAME+6],'  '
 30727                                  ifmX:	
 30728                                  	;pop	ax
 30729                                  	retn
 30730                                  
 30731                                  ; -----------------------------------------------------------------------------
 30732                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30733                                  ; -----------------------------------------------------------------------------
 30734                                  ; ENTRY:    ES:0 should point to an MCB
 30735                                  ; EXIT:     None; MCB frozen
 30736                                  ; ERROR:    None
 30737                                  ; USES:     None
 30738                                  ; -----------------------------------------------------------------------------
 30739                                  
 30740                                  frezMCB:
 30741                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30742                                  	mov	word [es:ARENA.NAME+0],'FR'
 30743                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30744                                  	mov	word [es:ARENA.NAME+4],'EN'
 30745                                  	mov	word [es:ARENA.NAME+6],'  '
 30746                                  	retn
 30747                                  
 30748                                  ; -----------------------------------------------------------------------------
 30749                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30750                                  ; -----------------------------------------------------------------------------
 30751                                  ; Entry:  None
 30752                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30753                                  ; Error:  None
 30754                                  ; Uses:   Flags
 30755                                  ; -----------------------------------------------------------------------------
 30756                                  
 30757                                  FreezeUM:
 30758                                  	push	ax
 30759                                  	push	cx
 30760                                  	push	dx
 30761                                  	push	es
 30762                                  
 30763                                  	;call	GetLoadUMB
 30764                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30765                                  
 30766                                  	xor	ah,ah		; Zap ah, so al==ax
 30767                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30768                                  
 30769                                  	call	UmbHead		; Returns first UMB segment in AX
 30770                                  	mov	es,ax
 30771                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30772                                  
 30773                                  ; -----------------------------------------
 30774                                  ; FUM10--ES - Current MCB address
 30775                                  ;        CX - Current UMB number
 30776                                  ;        DX - UMB number to skip (load UMB)
 30777                                  ; -----------------------------------------
 30778                                  
 30779                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30780                                  	jnz	short fum20
 30781                                  
 30782                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30783                                  fum20:	
 30784                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30785                                  	je	short fum30	; freeze anything... so skip that section.
 30786                                  
 30787                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30788                                  	or	word [es:ARENA.OWNER],0
 30789                                  	jnz	short fum30	; either.
 30790                                  
 30791                                  	call	frezMCB
 30792                                  fum30:	
 30793                                  	mov	al,[es:ARENA.SIGNATURE]
 30794                                  	cmp	al,arena_signature_end ; 'Z'
 30795                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30796                                  
 30797                                  	;NextMCB es, ax		; Go on forward.
 30798                                  	mov     ax,es
 30799                                  	;add	ax,[es:3]
 30800                                  	add     ax,[es:ARENA.SIZE]
 30801                                  	inc     ax
 30802                                  	mov     es,ax
 30803                                  	
 30804                                  	jmp	short fum10
 30805                                  
 30806                                  fumX:	pop	es
 30807                                  	pop	dx
 30808                                  	pop	cx
 30809                                  	pop	ax
 30810                                  	retn
 30811                                  
 30812                                  ; -----------------------------------------------------------------------------
 30813                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30814                                  ; -----------------------------------------------------------------------------
 30815                                  ; ENTRY:    None
 30816                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30817                                  ; ERROR:    None
 30818                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30819                                  ; -----------------------------------------------------------------------------
 30820                                  
 30821                                  UmbTest:
 30822                                  	push	ax
 30823                                  	push	bx
 30824                                  	push	ds
 30825                                  	push	es
 30826                                  
 30827                                  	call	fm_link			; Link in UMBs (if not already linked)
 30828                                  	call	WalkMem			; Check to see if they're really linked
 30829                                  	pushf				; And remember what we found out
 30830                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30831                                  	popf				; And restore what we found out.
 30832                                  
 30833                                  	pop	es
 30834                                  	pop	ds
 30835                                  	pop	bx
 30836                                  	pop	ax
 30837                                  	retn
 30838                                  
 30839                                  ; -----------------------------------------------------------------------------
 30840                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30841                                  ; -----------------------------------------------------------------------------
 30842                                  ; ENTRY:    None
 30843                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30844                                  ; ERROR:    None
 30845                                  ; USES:     Flags
 30846                                  ; -----------------------------------------------------------------------------
 30847                                  
 30848                                  WalkMem:
 30849                                  	push	ax ; ?
 30850                                  	push	bx ; ?
 30851                                  	push	es ; ? no need to save contents of these registers ?
 30852                                  		   	
 30853                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30854                                  	int	21h
 30855                                  
 30856                                  	mov	ax,[es:bx-2]
 30857                                  	mov	es,ax
 30858                                  
 30859                                  ; ------------------------------
 30860                                  ; UM10: ES = Current MCB pointer
 30861                                  ; ------------------------------
 30862                                  
 30863                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30864                                  	cmp	al,arena_signature_end ;  'Z'
 30865                                  	je	short um20		; If signature == 'Z', hay no more.
 30866                                  
 30867                                  	;NextMCB es, bx			; Move to the next MCB
 30868                                  
 30869                                  	mov     bx,es
 30870                                  	;add	bx,[es:3]
 30871                                  	add     bx,[es:ARENA.SIZE]
 30872                                  	inc     bx
 30873                                  	mov     es,bx
 30874                                  		
 30875                                  	jmp	short um10		; And restart the loop.
 30876                                  um20:	
 30877                                  	mov	ax,es
 30878                                  
 30879                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30880                                  
 30881                                  	pop	es ; ?
 30882                                  	pop	bx ; ?
 30883                                  	pop	ax ; ?
 30884                                  	retn
 30885                                  
 30886                                  ; -----------------------------------------------------------------------------
 30887                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30888                                  ; -----------------------------------------------------------------------------
 30889                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30890                                  ; EXIT:     None
 30891                                  ; ERROR:    None
 30892                                  ; USES:     AX, BX
 30893                                  ; -----------------------------------------------------------------------------
 30894                                  
 30895                                  hl_unlink:
 30896                                  	xor	bh,bh
 30897                                  
 30898                                  	;getdata bl,fm_umb		; Restore original link-state
 30899                                  	;
 30900                                  	;push	ds
 30901                                  	;push	cs
 30902                                  	;pop	ds
 30903                                  	;mov	bl,[fm_umb]
 30904                                  	;pop	ds
 30905                                  
 30906                                  	mov	bl,[cs:fm_umb]
 30907                                  
 30908                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30909                                  	int	21h
 30910                                  	retn
 30911                                  
 30912                                  ; ----------------------------------------------------------------------
 30913                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30914                                  ; ----------------------------------------------------------------------
 30915                                  ; 09/04/2019 - Retro DOS v4.0
 30916                                  
 30917                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30918                                  ;   Date:     May 14, 1992
 30919                                  
 30920                                  ;   Modification log:
 30921                                  ;
 30922                                  ;     DATE    WHO      DESCRIPTION
 30923                                  ;   --------  -------  --------------------------------------------------------
 30924                                  ;   05/14/92  t-richj  Original
 30925                                  ;   06/21/92  t-richj  Final revisions before check-in
 30926                                  
 30927                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30928                                  
 30929                                  ; -----------------------------------------------------------------------------
 30930                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30931                                  ; -----------------------------------------------------------------------------
 30932                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30933                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30934                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30935                                  ; ERROR:  None
 30936                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30937                                  ; -----------------------------------------------------------------------------
 30938                                  
 30939                                  UnHideUMBs:
 30940                                  	push	ax		; Save ax for what we're about to do
 30941                                  
 30942                                  ; -----------------------------------------------------------------------------
 30943                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30944                                  ;    length of time. Those six constitute a check of whether or not we should
 30945                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30946                                  ;    will destroy the current link-state and memory-allocation strategy after
 30947                                  ;    every command execution.
 30948                                  ; -----------------------------------------------------------------------------
 30949                                  
 30950                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30951                                  	;
 30952                                  	;push	ds
 30953                                  	;push	cs
 30954                                  	;pop	ds
 30955                                  	;mov	al,[fInHigh]
 30956                                  	;pop	ds	
 30957                                  
 30958                                  	mov	al,[cs:fInHigh]
 30959                                  
 30960                                  	or	al,al
 30961                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30962                                  
 30963                                  	pop	ax		; then there's nothing to do here... so
 30964                                  	stc			; restore everything and return. Just like
 30965                                  	retn			; that.
 30966                                  uhu10:	
 30967                                  	call	linkumb		; Make sure UMBs are linked in.
 30968                                  	call	FreeUMBs
 30969                                  
 30970                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30971                                  	;
 30972                                  	;push	es
 30973                                  	;push	cs
 30974                                  	;pop	es
 30975                                  	;mov	byte [es:fInHigh],0
 30976                                  	;pop	ds	
 30977                                  
 30978                                  	mov	byte [cs:fInHigh],0	
 30979                                  
 30980                                  	call	he_unlink	; Unlink UMBs
 30981                                  
 30982                                  	pop	ax
 30983                                  	; 12/12/2022
 30984                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30985                                  	retn
 30986                                  
 30987                                  ; -----------------------------------------------------------------------------
 30988                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30989                                  ; -----------------------------------------------------------------------------
 30990                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30991                                  ; EXIT:     None
 30992                                  ; ERROR:    None
 30993                                  ; USES:     AX, BX
 30994                                  ; -----------------------------------------------------------------------------
 30995                                  
 30996                                  he_unlink:
 30997                                  	xor	bh, bh
 30998                                  
 30999                                  	;getdata bl, fm_umb	; Restore original link-state
 31000                                  	mov	bl,[cs:fm_umb]	
 31001                                  
 31002                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31003                                  	int	21h
 31004                                  	retn
 31005                                  
 31006                                  ; -----------------------------------------------------------------------------
 31007                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 31008                                  ; -----------------------------------------------------------------------------
 31009                                  ; ENTRY:    None
 31010                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 31011                                  ; ERROR:    None (ignore CF)
 31012                                  ; USES:     Flags
 31013                                  ; -----------------------------------------------------------------------------
 31014                                  
 31015                                  FreeUMBs:
 31016                                  	push	ax
 31017                                  	push	es
 31018                                  
 31019                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 31020                                  	jc	short fusX
 31021                                  
 31022                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 31023                                  fus10:	
 31024                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 31025                                  	jnz	short fus20
 31026                                  	call	freeMCB
 31027                                  fus20:	   
 31028                                  	mov	al,[es:ARENA.SIGNATURE]
 31029                                  	cmp	al,arena_signature_end ; 'Z'
 31030                                  	jz	short fusX	; That means this was the last MCB--that's it.
 31031                                  
 31032                                  	mov	ax,es
 31033                                  	add	ax,[es:ARENA.SIZE]
 31034                                  	inc	ax
 31035                                  	mov	es,ax		; Go on forward.
 31036                                  
 31037                                  	jmp	short fus10
 31038                                  fusX:	
 31039                                  	pop	es
 31040                                  	pop	ax
 31041                                  	retn
 31042                                  
 31043                                  ; -----------------------------------------------------------------------------
 31044                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 31045                                  ; -----------------------------------------------------------------------------
 31046                                  ; ENTRY:    ES:0 should point to an MCB
 31047                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 31048                                  ; ERROR:    None
 31049                                  ; USES:     Flags
 31050                                  ; -----------------------------------------------------------------------------
 31051                                  
 31052                                  isHideMCB:
 31053                                  	;push	ax
 31054                                  
 31055                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 31056                                  	jne	short ihm_x				; then check for HIDDEN
 31057                                  
 31058                                  	;mov	ax,[es:ARENA.NAME]
 31059                                  	;cmp	ax,'HI' ; 4948h
 31060                                  	cmp	word [es:ARENA.NAME+0],'HI'
 31061                                  	jne	short ihm_x
 31062                                  	;mov	ax,[es:ARENA.NAME+2]
 31063                                  	;cmp	ax,'DD' ; 4444h
 31064                                  	cmp	word [es:ARENA.NAME+2],'DD'
 31065                                  	jne	short ihm_x
 31066                                  	;mov	ax,[es:ARENA.NAME+4]
 31067                                  	;cmp	ax,'EN' ; 4E45h
 31068                                  	cmp	word [es:ARENA.NAME+4],'EN'
 31069                                  	jne	short ihm_x
 31070                                  	;mov	ax,[es:ARENA.NAME+6]
 31071                                  	;cmp	ax,'  ' ; 2020h
 31072                                  	cmp	word [es:ARENA.NAME+6],'  '
 31073                                  ihm_x:	
 31074                                  	;pop	ax
 31075                                  	retn
 31076                                  
 31077                                  ; -----------------------------------------------------------------------------
 31078                                  ;*** freeMCB - marks as free the MCB at ES:0
 31079                                  ; -----------------------------------------------------------------------------
 31080                                  ; ENTRY:    ES:0 should point to an MCB
 31081                                  ; EXIT:     None; MCB free'd
 31082                                  ; ERROR:    None
 31083                                  ; USES:     AX
 31084                                  ; -----------------------------------------------------------------------------
 31085                                  
 31086                                  freeMCB:
 31087                                  	mov	word [es:ARENA.OWNER],0
 31088                                  	mov	ax,'  '
 31089                                  	mov	[es:ARENA.NAME+0],ax
 31090                                  	mov	[es:ARENA.NAME+2],ax
 31091                                  	mov	[es:ARENA.NAME+4],ax
 31092                                  	mov	[es:ARENA.NAME+6],ax
 31093                                  	retn
 31094                                  
 31095                                  ; -----------------------------------------------------------------------------
 31096                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 31097                                  ; -----------------------------------------------------------------------------
 31098                                  ; ENTRY:  Nothing
 31099                                  ; EXIT:   AX contains 0x9FFF for most systems
 31100                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 31101                                  ; USES:   Flags, AX
 31102                                  ; -----------------------------------------------------------------------------
 31103                                  
 31104                                  HeadUmb:
 31105                                  	; 13/05/2019
 31106                                  
 31107                                  	;push	si ; ?
 31108                                  	;push	ds ; ?
 31109                                  	;push	es
 31110                                  	;push	bx ; *
 31111                                  
 31112                                  	; 09/04/2019
 31113                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 31114                                  
 31115                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31116                                  	int	21h
 31117                                  			; DOS - 2+ internal - GET LIST OF LISTS
 31118                                  			; Return: ES:BX -> DOS list of lists
 31119                                  	;mov	ax,[es:8Ch]
 31120                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 31121                                  	cmp	ax,0FFFFh
 31122                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 31123                                  
 31124                                  	;clc				; Else, it isn't.
 31125                                  	;jmp	short xhu_x
 31126                                  xhu_e:	
 31127                                  	;stc
 31128                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 31129                                  xhu_x:	
 31130                                  	;pop	bx ; *
 31131                                  	;pop	es	
 31132                                  	;pop	ds ; ?
 31133                                  	;pop	si ; ?
 31134                                  	retn
 31135                                  
 31136                                  ; -----------------------------------------------------------------------------
 31137                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 31138                                  ; -----------------------------------------------------------------------------
 31139                                  ; ENTRY:    None
 31140                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 31141                                  ; ERROR:    None
 31142                                  ; USES:     AX, BX, fm_umb
 31143                                  ; -----------------------------------------------------------------------------
 31144                                  
 31145                                  linkumb:
 31146                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 31147                                  	int	21h			; Current link-state is now in al
 31148                                  
 31149                                  	or	al,al			; BUGBUG: proper check?
 31150                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 31151                                  
 31152                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31153                                  	mov	bx,1
 31154                                  	int	21h
 31155                                  lumbX:
 31156                                  	retn
 31157                                  
 31158                                  %endif
 31159                                  
 31160                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31161                                  ; (SYSINIT:2B5Fh)
 31162                                  
 31163                                  ; ----------------------------------------------------------------------
 31164                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 31165                                  ; ----------------------------------------------------------------------
 31166                                  ; 09/04/2019 - Retro DOS v4.0
 31167                                  
 31168                                  ;----------------------------------------------------------------------------
 31169                                  ;
 31170                                  ; procedure : InitDevLoad
 31171                                  ;
 31172                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 31173                                  ;			 = 1 indicates load in UMB:
 31174                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 31175                                  ;		                    = 1 indicates a DOS 5-style load
 31176                                  ;		DevSize  = Size of the device driver file in paras
 31177                                  ;
 31178                                  ;	Output : none
 31179                                  ;
 31180                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 31181                                  ;	Also sets up a header for the Device driver entry for mem utility
 31182                                  ;
 31183                                  ;----------------------------------------------------------------------------
 31184                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 31185                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 31186                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 31187                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 31188                                  ;----------------------------------------------------------------------------
 31189                                  
 31190                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31191                                  InitDevLoad:
 31192                                  	; 11/12/2022
 31193                                  	; ds = cs
 31194 00002771 803E[7D1E]00            	cmp	byte [DeviceHi],0
 31195                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 31196                                  	;je	short InitForLo		; no, init for lo mem
 31197 00002776 741F                    	je	short initforlo_x ; 09/04/2019
 31198                                  
 31199                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31200                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 31201                                  ;	je	short InitForConv
 31202                                  ;
 31203                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 31204                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 31205                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 31206                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 31207                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 31208                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 31209                                  ;
 31210                                  ;	call	ShrinkUMB		; Stop using the old device arena
 31211                                  ;
 31212                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 31213                                  ;	call	FreezeUM		; Hide everything BUT the load area
 31214                                  ;	call	GetUMBForDev		; And grab that load area as needed
 31215                                  ;	pushf
 31216                                  ;	call	UnFreeze		; Then unhide everything frozen
 31217                                  ;	popf
 31218                                  ;
 31219                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 31220                                  ;
 31221                                  ;	jmp	short InitForHi
 31222                                  
 31223                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31224                                  	; (SYSINIT:2B67h)
 31225                                  InitForConv:
 31226                                  	; 11/12/2022
 31227                                  	; ds = cs
 31228 00002778 E83700                  	call	SpaceInUMB		; Do we have space left in the
 31229                                  					;  current UMB ?
 31230 0000277B 7308                    	jnc	short InitForHi		; yes, we have
 31231 0000277D E83D04                  	call	ShrinkUMB		; shrink the current UMB in use
 31232 00002780 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 31233 00002783 720D                    	jc	short InitForLo		; we didn't succeed, so load
 31234                                  					;  in low memory
 31235                                  InitForHi:
 31236                                  	; 11/12/2022
 31237                                  	; ds = cs
 31238                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 31239                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 31240                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 31241 00002785 A1[731E]                	mov	ax,[DevUMBFree]
 31242 00002788 8B16[6F1E]              	mov	dx,[DevUMBAddr]
 31243 0000278C 0316[711E]              	add	dx,[DevUMBSize]
 31244 00002790 EB0C                    	jmp	short idl1
 31245                                  
 31246                                  InitForLo:
 31247                                  	; 11/12/2022
 31248                                  	; ds = cs
 31249                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 31250 00002792 C606[7D1E]00            	mov	byte [DeviceHi],0
 31251                                  initforlo_x:
 31252                                  	; 11/12/2022
 31253                                  	; ds = cs
 31254                                  					;  into UMB indicate that
 31255                                  					;  we are loading low
 31256                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 31257                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 31258 00002797 A1[E003]                	mov	ax,[memhi]
 31259 0000279A 8B16[A302]              	mov	dx,[ALLOCLIM]
 31260                                  idl1:
 31261 0000279E E86600                  	call	DevSetMark		; setup a sub-arena for DD
 31262                                  	; 11/12/2022
 31263                                  	; ds = cs
 31264                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 31265                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 31266                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 31267                                  	;mov	[cs:DevEntry+2],ax
 31268 000027A1 A3[621E]                	mov	[DevLoadAddr],ax
 31269 000027A4 8916[641E]              	mov	[DevLoadEnd],dx
 31270 000027A8 C706[661E]0000          	mov	word [DevEntry],0
 31271 000027AE A3[681E]                	mov	[DevEntry+2],ax
 31272 000027B1 C3                      	retn
 31273                                  
 31274                                  ;----------------------------------------------------------------------------
 31275                                  ;
 31276                                  ; procedure : SpaceInUMB?
 31277                                  ;
 31278                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 31279                                  ;	Output : Carry set if no space in UMB
 31280                                  ;		 Carry clear if Space is available for the device in
 31281                                  ;		   current UMB
 31282                                  ;
 31283                                  ;----------------------------------------------------------------------------
 31284                                  
 31285                                  SpaceInUMB:
 31286                                  	; 11/12/2022
 31287                                  	; ds = cs
 31288                                  	;mov	ax,[cs:DevUMBSize]
 31289                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 31290                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 31291 000027B2 A1[711E]                	mov	ax,[DevUMBSize]
 31292 000027B5 0306[6F1E]              	add	ax,[DevUMBAddr]		; End of UMB
 31293 000027B9 2B06[731E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 31294                                  	; 11/12/2022
 31295                                  	;or	ax,ax			; Nospace ?
 31296                                  	;jnz	short spcinumb1
 31297                                  	;stc
 31298                                  	;retn
 31299                                  	; 11/12/2022
 31300 000027BD 83F801                  	cmp	ax,1
 31301 000027C0 7205                    	jb	short spcinumb2	; cf=1
 31302                                  spcinumb1:
 31303 000027C2 48                      	dec	ax			; space for sub-arena
 31304                                  	; 11/12/2022
 31305                                  	; ds = cs
 31306 000027C3 3B06[601E]              	cmp	ax,[DevSize]
 31307                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 31308                                  spcinumb2:
 31309 000027C7 C3                      	retn
 31310                                  
 31311                                  ;----------------------------------------------------------------------------
 31312                                  ;
 31313                                  ; procedure : PrepareMark
 31314                                  ;
 31315                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 31316                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 31317                                  ;
 31318                                  ;----------------------------------------------------------------------------
 31319                                  
 31320                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31321                                  ;
 31322                                  ;PrepareMark:
 31323                                  ;	push	ds
 31324                                  ;	mov	ds,ax
 31325                                  ;	mov	word [ARENA.OWNER],8
 31326                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 31327                                  ;	pop	ds
 31328                                  ;
 31329                                  ;	inc	ax
 31330                                  ;	mov	[cs:DevUMBAddr],ax
 31331                                  ;	mov	[cs:DevUMBFree],ax
 31332                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31333                                  ;	retn
 31334                                  
 31335                                  ;----------------------------------------------------------------------------
 31336                                  ;
 31337                                  ; procedure : GetUMBForDev
 31338                                  ;
 31339                                  ;	Input : DevSize
 31340                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 31341                                  ;		 the device.
 31342                                  ;		 If success carry clear
 31343                                  ;
 31344                                  ;	Allocates the biggest UMB for loading devices and updates
 31345                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 31346                                  ;	UMB.
 31347                                  ;
 31348                                  ;	This routine relies on the fact that all of the low memory
 31349                                  ;	is allocated, and any DOS alloc calls should return memory
 31350                                  ;	from the UMB pool.
 31351                                  ;
 31352                                  ;----------------------------------------------------------------------------
 31353                                  
 31354                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31355                                  	; (SYSINIT:2BC6h)
 31356                                  
 31357                                  GetUMBForDev:
 31358                                  	; 11/12/2022
 31359                                  	; ds = cs
 31360 000027C8 BBFFFF                  	mov	bx,0FFFFh
 31361 000027CB B80048                  	mov	ax,4800h
 31362 000027CE CD21                    	int	21h
 31363                                  		; DOS - 2+ - ALLOCATE MEMORY
 31364                                  		; BX = number of 16-byte paragraphs desired
 31365                                  
 31366 000027D0 09DB                    	or	bx,bx
 31367                                  	;jz	short gufd_err
 31368                                  	; 09/09/2023
 31369 000027D2 742E                    	jz	short gufd_error ; bx = 0
 31370                                  
 31371 000027D4 4B                      	dec	bx
 31372                                  	; 11/12/2022
 31373                                  	; ds = cs
 31374 000027D5 391E[601E]              	cmp	[DevSize],bx
 31375                                  	;cmp	[cs:DevSize],bx
 31376 000027D9 7725                    	ja	short gufd_err
 31377                                  
 31378 000027DB 43                      	inc	bx
 31379                                  
 31380 000027DC B80048                  	mov	ax,4800h
 31381 000027DF CD21                    	int	21h
 31382 000027E1 721D                    	jc	short gufd_err
 31383                                  
 31384                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31385                                  	;dec	ax
 31386                                  	;call	PrepareMark
 31387                                  	;
 31388                                  PrepareMark:
 31389 000027E3 1E                      	push	ds
 31390 000027E4 48                      	dec	ax
 31391 000027E5 8ED8                    	mov	ds,ax
 31392 000027E7 C70601000800            	mov	word [ARENA.OWNER],8
 31393 000027ED C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 31394 000027F3 40                      	inc	ax
 31395 000027F4 1F                      	pop	ds
 31396                                  	; 11/12/2022
 31397                                  	; ds = cs
 31398                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31399                                  	;mov	[cs:DevUMBAddr],ax
 31400                                  	;mov	[cs:DevUMBFree],ax
 31401                                  gufd_x:		; 09/09/2023
 31402 000027F5 891E[711E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 31403 000027F9 A3[6F1E]                	mov	[DevUMBAddr],ax
 31404 000027FC A3[731E]                	mov	[DevUMBFree],ax
 31405                                  	;
 31406                                  	; 11/12/2022
 31407                                  	; cf=0
 31408                                  	;clc				; mark no error
 31409 000027FF C3                      	retn
 31410                                  
 31411                                  	; 09/09/2023
 31412                                  %if 1
 31413                                  gufd_err:
 31414 00002800 31DB                    	xor	bx,bx ; 0
 31415                                  gufd_error:
 31416 00002802 31C0                    	xor	ax,ax ; 0
 31417 00002804 F9                      	stc	; cf=1
 31418 00002805 EBEE                    	jmp	short gufd_x	
 31419                                  %endif
 31420                                  
 31421                                  ; 09/09/2023
 31422                                  %if 0
 31423                                  gufd_err:
 31424                                  	xor	ax,ax ; 0
 31425                                  	; 11/12/2022
 31426                                  	; ds = cs
 31427                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 31428                                  	;mov	[cs:DevUMBAddr],ax
 31429                                  	;mov	[cs:DevUMBFree],ax
 31430                                  	mov	[DevUMBSize],ax		; erase the previous values
 31431                                  	mov	[DevUMBAddr],ax
 31432                                  	mov	[DevUMBFree],ax
 31433                                  	stc
 31434                                  	retn
 31435                                  %endif
 31436                                  
 31437                                  ;----------------------------------------------------------------------------
 31438                                  ;
 31439                                  ; procedure : DevSetMark
 31440                                  ;
 31441                                  ;	Input : AX - Free segment were device is going to be loaded
 31442                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 31443                                  ;
 31444                                  ;	Creates a sub-arena for the device driver
 31445                                  ;	puts 'D' marker in the sub-arena
 31446                                  ;	Put the owner of the sub-arena as (AX+1)
 31447                                  ;	Copies the file name into sub-arena name field
 31448                                  ;
 31449                                  ;	Size field of the sub-arena will be set only at succesful
 31450                                  ;	completion of Device load.
 31451                                  ;
 31452                                  ;----------------------------------------------------------------------------
 31453                                  
 31454                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31455                                  	; (SYSINIT:2C13h)
 31456                                  
 31457                                  DevSetMark:
 31458 00002807 06                      	push	es
 31459 00002808 57                      	push	di
 31460 00002809 1E                      	push	ds
 31461 0000280A 56                      	push	si
 31462 0000280B 8EC0                    	mov	es,ax
 31463 0000280D 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 31464 00002813 40                      	inc	ax
 31465 00002814 26A30100                	mov	[es:devmark.seg],ax
 31466                                  
 31467                                  ;-------------- Copy file name
 31468                                  
 31469 00002818 50                      	push	ax			; save load addr
 31470                                  
 31471                                  	; 09/09/2023
 31472                                  	; ds = cs
 31473                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 31474 00002819 C536[F803]              	lds	si,[bpb_addr]
 31475                                  
 31476 0000281D 89F7                    	mov	di,si
 31477 0000281F FC                      	cld
 31478                                  dsm_again:
 31479 00002820 AC                      	lodsb
 31480 00002821 3C3A                    	cmp	al,':'
 31481 00002823 7504                    	jne	short isit_slash
 31482 00002825 89F7                    	mov	di,si
 31483 00002827 EBF7                    	jmp	short dsm_again
 31484                                  isit_slash:
 31485 00002829 3C5C                    	cmp	al, '\'
 31486 0000282B 7504                    	jne	short isit_null
 31487 0000282D 89F7                    	mov	di,si
 31488 0000282F EBEF                    	jmp	short dsm_again
 31489                                  isit_null:
 31490 00002831 08C0                    	or	al,al
 31491 00002833 75EB                    	jnz	short dsm_again
 31492 00002835 89FE                    	mov	si,di
 31493                                  
 31494 00002837 BF0800                  	mov	di,devmark.filename ; 8
 31495 0000283A B90800                  	mov	cx,8			; maximum 8 characters
 31496                                  dsm_next_char:
 31497 0000283D AC                      	lodsb
 31498 0000283E 08C0                    	or	al, al
 31499 00002840 7407                    	jz	short blankout
 31500 00002842 3C2E                    	cmp	al, '.'
 31501 00002844 7403                    	je	short blankout
 31502 00002846 AA                      	stosb
 31503 00002847 E2F4                    	loop	dsm_next_char
 31504                                  blankout:
 31505 00002849 E304                    	jcxz	dsm_exit
 31506 0000284B B020                    	mov	al, ' '
 31507 0000284D F3AA                    	rep	stosb			; blank out the rest
 31508                                  dsm_exit:
 31509 0000284F 58                      	pop	ax			; restore load addr
 31510 00002850 5E                      	pop	si
 31511 00002851 1F                      	pop	ds
 31512 00002852 5F                      	pop	di
 31513 00002853 07                      	pop	es
 31514 00002854 C3                      	retn
 31515                                  
 31516                                  ;----------------------------------------------------------------------------
 31517                                  ;
 31518                                  ; procedure : SizeDevice
 31519                                  ;
 31520                                  ;	Input : ES:SI - points to device file to be sized
 31521                                  ;
 31522                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 31523                                  ;
 31524                                  ;	Calculates the size of the device file in paras and stores it
 31525                                  ;	in DevSize
 31526                                  ;
 31527                                  ;----------------------------------------------------------------------------
 31528                                  
 31529                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31530                                  SizeDevice:
 31531                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31532                                  	; 11/12/2022 ; *
 31533 00002855 1E                      	push	ds ; *
 31534 00002856 06                      	push	es
 31535 00002857 1F                      	pop	ds
 31536 00002858 89F2                    	mov	dx,si			; ds:dx -> file name
 31537 0000285A B8003D                  	mov	ax,3D00h		; open
 31538 0000285D CD21                    	int	21h
 31539 0000285F 7243                    	jc	short sd_err		; open failed
 31540                                  
 31541 00002861 89C3                    	mov	bx,ax			; BX - file handle
 31542 00002863 B80242                  	mov	ax,4202h		; seek
 31543 00002866 31C9                    	xor	cx,cx
 31544 00002868 89CA                    	mov	dx,cx			; to end of file
 31545 0000286A CD21                    	int	21h
 31546 0000286C 722F                    	jc	short sd_close		; did seek fail (impossible)
 31547 0000286E 83C00F                  	add	ax,15			; para convert
 31548 00002871 83D200                  	adc	dx,0
 31549 00002874 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 31550 00002878 7409                    	jz	short szdev1		; no
 31551 0000287A 2EC706[601E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 31552                                  					; assuming that we fail later
 31553 00002881 EB1A                    	jmp	short sd_close
 31554                                  szdev1:
 31555 00002883 B104                    	mov	cl,4			; convert it to paras
 31556 00002885 D3E8                    	shr	ax,cl
 31557 00002887 B10C                    	mov	cl,12
 31558 00002889 D3E2                    	shl	dx,cl
 31559 0000288B 09D0                    	or	ax,dx
 31560                                  	;
 31561                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31562 0000288D 2E3B06[7E1E]            	cmp     ax,[cs:DevSizeOption]
 31563                                  	;ja	short szdev2
 31564                                  	; 14/08/2023
 31565 00002892 7305                    	jnb	short szdev2
 31566                                  
 31567 00002894 2EA1[7E1E]              	mov     ax,[cs:DevSizeOption]
 31568                                  	; 12/12/2022
 31569 00002898 F8                      	clc
 31570                                  szdev2:
 31571 00002899 2EA3[601E]              	mov	[cs:DevSize],ax		; save file size
 31572                                  
 31573                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31574                                  	; 12/12/2022
 31575                                  	; cf=0
 31576                                  	;clc
 31577                                  sd_close:
 31578 0000289D 9C                      	pushf				; let close not spoil our
 31579                                  					;  carry flag
 31580 0000289E B8003E                  	mov	ax,3E00h		; close
 31581 000028A1 CD21                    	int	21h			; we are not checking for err
 31582 000028A3 9D                      	popf
 31583                                  sd_err:
 31584                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31585                                  	; 11/12/2022 ; *
 31586 000028A4 1F                      	pop     ds ; *
 31587 000028A5 C3                      	retn
 31588                                  
 31589                                  ;----------------------------------------------------------------------------
 31590                                  ;
 31591                                  ; procedure : ExecDev
 31592                                  ;
 31593                                  ;	Input : ds:dx -> device to be executed
 31594                                  ;		DevLoadAddr - contains where device has to be loaded
 31595                                  ;
 31596                                  ;	Output : Carry if error
 31597                                  ;		 Carry clear if no error
 31598                                  ;
 31599                                  ;	Loads a device driver using the 4b03h function call
 31600                                  ;
 31601                                  ;----------------------------------------------------------------------------
 31602                                  
 31603                                  	; 01/11/2022
 31604                                  ExecDev:
 31605 000028A6 2E8B1E[621E]            	mov	bx,[cs:DevLoadAddr]
 31606 000028AB 2E891E[791E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 31607                                  					;  block for exec with
 31608                                  					;  Load address
 31609 000028B0 2E891E[7B1E]            	mov	[cs:DevExecReloc],bx
 31610 000028B5 8CCB                    	mov	bx,cs
 31611 000028B7 8EC3                    	mov	es,bx
 31612 000028B9 BB[791E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 31613 000028BC B003                    	mov	al,3	; (load program only)
 31614 000028BE B44B                    	mov	ah,EXEC ; 4Bh
 31615 000028C0 CD21                    	int	21h			;load in the device driver
 31616                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 31617                                  		; DS:DX -> ASCIZ filename
 31618                                  		; ES:BX -> parameter block
 31619                                  		; AL = subfunction 
 31620 000028C2 C3                      	retn
 31621                                  
 31622                                  ;----------------------------------------------------------------------------
 31623                                  ;
 31624                                  ; procedure : RetFromUM
 31625                                  ;
 31626                                  ;	Input : None
 31627                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 31628                                  ;		 ConvLoad clear if did.
 31629                                  ;
 31630                                  ;	Prepares memory for more devices after returning from loading one
 31631                                  ;	using the DOS 6 options (/L:... etc).
 31632                                  ;
 31633                                  ;----------------------------------------------------------------------------
 31634                                  
 31635                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31636                                  ;RetFromUM:
 31637                                  ;	pushf
 31638                                  ;	mov	byte [cs:ConvLoad],1
 31639                                  ;	call	UnHideUMBs
 31640                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 31641                                  ;	mov	byte [cs:ConvLoad],0
 31642                                  ;rfUM1:	
 31643                                  ;	popf
 31644                                  ;	retn
 31645                                  
 31646                                  ;----------------------------------------------------------------------------
 31647                                  ;
 31648                                  ; procedure : RemoveNull
 31649                                  ;
 31650                                  ;	Input : ES:SI points to a null terminated string
 31651                                  ;
 31652                                  ;	Output : none
 31653                                  ;
 31654                                  ;	Replaces the null at the end of a string with blank
 31655                                  ;
 31656                                  ;----------------------------------------------------------------------------
 31657                                  
 31658                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31659                                  	; (SYSINIT:2CCEh)
 31660                                  RemoveNull:
 31661                                  	; 11/12/2022
 31662                                  	; ds = cs
 31663                                  rn_next:
 31664 000028C3 268A1C                  	mov	bl,[es:si]
 31665 000028C6 08DB                    	or	bl,bl			; null ?
 31666 000028C8 7403                    	jz	short rn_gotnull
 31667 000028CA 46                      	inc	si			; advance the pointer
 31668 000028CB EBF6                    	jmp	short rn_next
 31669                                  rn_gotnull:
 31670                                  	; 11/12/2022
 31671 000028CD 8A1E[921E]              	mov	bl,[DevSavedDelim]
 31672                                  	;mov	bl,[cs:DevSavedDelim]
 31673 000028D1 26881C                  	mov	[es:si],bl		; replace null with blank
 31674                                  	; 02/11/2022
 31675                                  ; 11/12/2022
 31676                                  rba_ok:		; 10/04/2019
 31677 000028D4 C3                      	retn
 31678                                  
 31679                                  ;----------------------------------------------------------------------------
 31680                                  ;
 31681                                  ; procedure : RoundBreakAddr
 31682                                  ;
 31683                                  ;	Input : DevBrkAddr
 31684                                  ;	Output : DevBrkAddr
 31685                                  ;
 31686                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 31687                                  ;
 31688                                  ;----------------------------------------------------------------------------
 31689                                  
 31690                                  RoundBreakAddr:
 31691 000028D5 2EA1[6A1E]              	mov	ax,[cs:DevBrkAddr]
 31692 000028D9 E8C8E7                  	call	ParaRound
 31693 000028DC 2E0106[6C1E]            	add	[cs:DevBrkAddr+2],ax
 31694 000028E1 2EC706[6A1E]0000        	mov	word [cs:DevBrkAddr],0
 31695 000028E8 2EA1[641E]              	mov	ax,[cs:DevLoadEnd]
 31696 000028EC 2E3906[6C1E]            	cmp	[cs:DevBrkAddr+2],ax
 31697 000028F1 76E1                    	jbe	short rba_ok
 31698 000028F3 E95E07                  	jmp	mem_err
 31699                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31700                                  	; 11/12/2022
 31701                                  ;rba_ok:
 31702                                  ;	retn
 31703                                  
 31704                                  ;----------------------------------------------------------------------------
 31705                                  ;
 31706                                  ; procedure : DevSetBreak
 31707                                  ;
 31708                                  ;	Input : DevBrkAddr
 31709                                  ;	Output : Carry set if Device returned Init failed
 31710                                  ;		 Else carry clear
 31711                                  ;
 31712                                  ;----------------------------------------------------------------------------
 31713                                  
 31714                                  DevSetBreak:
 31715 000028F6 50                      	push	ax
 31716                                  
 31717 000028F7 2EA1[6C1E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31718 000028FB 2E803E[0D14]00          	cmp	byte [cs:multdeviceflag],0
 31719 00002901 750F                    	jne	short set_break_continue ;do not check it.
 31720 00002903 2E3B06[621E]            	cmp	ax,[cs:DevLoadAddr]
 31721 00002908 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31722                                  
 31723                                  	;cmp	word [cs:DevBrkAddr],0
 31724                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31725                                  	; 12/12/2022
 31726 0000290A 2E833E[6A1E]01          	cmp	word [cs:DevBrkAddr],1
 31727 00002910 7204                    	jb	short break_failed
 31728                                  
 31729                                  set_break_continue:
 31730 00002912 E8C0FF                  	call	RoundBreakAddr
 31731                                  	; 12/12/2022
 31732 00002915 F8                      	clc
 31733                                  break_failed:
 31734 00002916 58                      	pop	ax
 31735                                  	;clc
 31736 00002917 C3                      	retn
 31737                                  
 31738                                  	; 12/12/2022
 31739                                  ;break_failed:
 31740                                  	;pop	ax
 31741                                  	;stc
 31742                                  	;retn
 31743                                  
 31744                                  ;----------------------------------------------------------------------------
 31745                                  ;
 31746                                  ; procedure : DevBreak
 31747                                  ;
 31748                                  ;	Input : DevLoadAddr & DevBrkAddr
 31749                                  ;	Output : none
 31750                                  ;
 31751                                  ;	Marks a succesful install of a device driver
 31752                                  ;	Sets device size field in sub-arena &
 31753                                  ;	Updates Free ptr in UMB or adjusts memhi
 31754                                  ;
 31755                                  ;----------------------------------------------------------------------------
 31756                                  
 31757                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31758                                  DevBreak:
 31759                                  	;push	ds ; 11/12/2022
 31760                                  
 31761                                  	; 11/12/2022
 31762 00002918 0E                      	push	cs
 31763 00002919 1F                      	pop	ds
 31764                                  	;mov	ax,[cs:DevLoadAddr]
 31765                                  	;mov	bx,[cs:DevBrkAddr+2]
 31766 0000291A A1[621E]                	mov	ax,[DevLoadAddr]
 31767 0000291D 8B1E[6C1E]              	mov	bx,[DevBrkAddr+2]
 31768                                  	; 11/12/2022
 31769 00002921 1E                      	push	ds
 31770                                  
 31771 00002922 48                      	dec	ax			; seg of sub-arena
 31772 00002923 8ED8                    	mov	ds,ax
 31773 00002925 40                      	inc	ax			; Back to Device segment
 31774 00002926 29D8                    	sub	ax,bx
 31775 00002928 F7D8                    	neg	ax			; size of device in paras
 31776 0000292A A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31777                                  	
 31778                                  	; 11/12/2022
 31779 0000292D 1F                      	pop	ds
 31780                                  	; ds = cs
 31781                                   	
 31782 0000292E 803E[7D1E]00            	cmp	byte [DeviceHi],0
 31783                                  	;cmp	byte [cs:DeviceHi],0
 31784 00002933 7405                    	je	short db_lo
 31785                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31786                                  	;jmp	short db_exit
 31787                                  	; 11/12/2022
 31788 00002935 891E[731E]              	mov	[DevUMBFree],bx
 31789 00002939 C3                      	retn	
 31790                                  db_lo:
 31791                                  	; 11/12/2022
 31792                                  	; ds = cs
 31793                                  	;mov	[cs:memhi],bx
 31794                                  	;mov	word [cs:memlo],0
 31795 0000293A 891E[E003]              	mov	[memhi],bx
 31796 0000293E C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31797                                  db_exit:
 31798                                  	;pop	ds ; 11/12/2022
 31799                                  	; 17/09/2023
 31800                                  ;sd_ret:	; 09/09/2023
 31801 00002944 C3                      	retn
 31802                                  
 31803                                  ; 10/04/2019 - Retro DOS v4.0
 31804                                  
 31805                                  ;----------------------------------------------------------------------------
 31806                                  ;
 31807                                  ; procedure : ParseSize
 31808                                  ;
 31809                                  ;	Parses the command line for SIZE= command
 31810                                  ;
 31811                                  ;	ES:SI = command line to parsed
 31812                                  ;
 31813                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31814                                  ;	updates the DevSizeOption variable with value supplied
 31815                                  ;	in SIZE=option
 31816                                  ;	Returns carry if the SIZE option was invalid
 31817                                  ;
 31818                                  ;----------------------------------------------------------------------------
 31819                                  
 31820                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31821                                  	; (SYSINIT:2D5Ah)
 31822                                  
 31823                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization & BugFix)
 31824                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 31825                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 31826                                  ParseSize:
 31827                                  	;push	bx
 31828                                  	;mov	bx,si
 31829                                  
 31830                                  	; 09/09/2023
 31831 00002945 56                      	push	si ; * ; mov bx,si
 31832                                  
 31833                                  	; 11/12/2022
 31834                                  	; ds = cs
 31835                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31836                                  	;mov	[cs:DevCmdLine],si
 31837                                  	;mov	[cs:DevCmdLine+2],es
 31838 00002946 C706[7E1E]0000          	mov	word [DevSizeOption],0 ; init the value
 31839 0000294C 8936[8E1E]              	mov	[DevCmdLine],si
 31840 00002950 8C06[901E]              	mov	[DevCmdLine+2],es	
 31841 00002954 E82400                  	call	SkipDelim
 31842 00002957 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31843 0000295C 7528                    	jne	short ps_no_size
 31844 0000295E 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31845 00002964 7520                    	jne	short ps_no_size
 31846 00002966 268A4404                	mov	al,[es:si+4]
 31847 0000296A E85306                  	call	delim
 31848                                  	;jne	short ps_no_size
 31849                                  	; 22/07/2023 - 09/09/2023 (cf=0)
 31850 0000296D 7518                    	jne	short ps_no_size_2 ; cf=0 here
 31851 0000296F 83C605                  	add	si,5
 31852 00002972 E81400                  	call	GetHexNum
 31853 00002975 7210                    	jc	short ps_err
 31854                                  	; 11/12/2022
 31855                                  	; ds = cs
 31856                                  	;mov	[cs:DevSizeOption],ax
 31857 00002977 A3[7E1E]                	mov	[DevSizeOption],ax
 31858                                  	
 31859                                  	; 09/09/2023
 31860 0000297A 58                      	pop	ax  ; * (discard previous si value on top of stack)
 31861                                  
 31862                                  ;	call	SkipDelim ; **
 31863                                  ;	
 31864                                  ;	; 22/07/2023
 31865                                  ;;ps_no_size_2:
 31866                                  ;	; cf = 0
 31867                                  ;	retn
 31868                                  
 31869                                  	; 09/09/2023
 31870                                  	;jmp	short SkipDelim
 31871                                  
 31872                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 31873                                  %if 1
 31874                                  	; 01/11/2022
 31875                                  SkipDelim:
 31876                                  sd_next_char:
 31877 0000297B 268A04                  	mov	al,[es:si]
 31878 0000297E E83F06                  	call	delim
 31879 00002981 7505                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 31880 00002983 46                      	inc	si
 31881 00002984 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31882                                  	; 11/12/2022
 31883                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31884                                  ;sd_ret:
 31885                                  	;retn
 31886                                  %endif
 31887                                  
 31888                                  	;;;call	SkipDelim ; **
 31889                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31890                                  	;mov	bx,si
 31891                                  ps_no_size:
 31892                                  	;mov	si,bx
 31893                                  	;pop	bx
 31894 00002986 F8                      	clc	; cf=0
 31895                                  	;retn
 31896                                  	; 11/12/2022
 31897                                  ps_err:		; cf=1
 31898                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 31899                                  	; 09/09/2023
 31900 00002987 5E                      	pop	si ; * ; mov si,bx
 31901                                  	; 17/09/2023
 31902                                  sd_ret:	; cf=?
 31903 00002988 C3                      	retn
 31904                                  
 31905                                  ;ps_err:
 31906                                  	; 02/11/2022
 31907                                  	;pop	bx
 31908                                  	;stc
 31909                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31910                                  	; 11/12/2022
 31911                                  	; cf=1
 31912                                  	;stc
 31913                                  	; 11/12/2022
 31914                                  ;sd_ret: 
 31915                                  	; 22/07/2023
 31916                                  	; 12/04/2019
 31917                                  	;retn
 31918                                  
 31919                                  ; 12/04/2019 - Retro DOS v4.0
 31920                                  
 31921                                  ;----------------------------------------------------------------------------
 31922                                  ;
 31923                                  ; procedure : SkipDelim
 31924                                  ;
 31925                                  ;	Skips delimiters in the string pointed to by ES:SI
 31926                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31927                                  ;
 31928                                  ;----------------------------------------------------------------------------
 31929                                  
 31930                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 31931                                  %if 0
 31932                                  	; 01/11/2022
 31933                                  SkipDelim:
 31934                                  sd_next_char:
 31935                                  	mov	al,[es:si]
 31936                                  	call	delim
 31937                                  	jnz	short sd_ret
 31938                                  	inc	si
 31939                                  	jmp	short sd_next_char ; 01/11/2022
 31940                                  	; 11/12/2022
 31941                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31942                                  ;sd_ret:
 31943                                  	;retn
 31944                                  %endif
 31945                                  
 31946                                  ;----------------------------------------------------------------------------
 31947                                  ;
 31948                                  ; procedure : GetHexNum
 31949                                  ;
 31950                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31951                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31952                                  ;
 31953                                  ;	Returns in AX the number number of paras equivalent to the
 31954                                  ;	hex number of bytes specified by the hexadecimal string.
 31955                                  ;
 31956                                  ;	Returns carry in case it encountered a non-hex character or
 31957                                  ;	if it encountered crlf
 31958                                  ;
 31959                                  ;----------------------------------------------------------------------------
 31960                                  
 31961                                  ; 13/05/2019
 31962                                  
 31963                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31964                                  	; (SYSINIT:2DA5h)
 31965                                  GetHexNum:
 31966 00002989 31C0                    	xor	ax,ax
 31967 0000298B 31D2                    	xor	dx,dx
 31968                                  ghn_next:
 31969 0000298D 268A1C                  	mov	bl,[es:si]
 31970 00002990 80FB0D                  	cmp	bl,cr  ; 0Dh
 31971 00002993 7436                    	je	short ghn_err
 31972 00002995 80FB0A                  	cmp	bl,lf  ; 0Ah
 31973 00002998 7431                    	je	short ghn_err
 31974 0000299A 50                      	push	ax
 31975 0000299B 88D8                    	mov	al,bl
 31976 0000299D E82006                  	call	delim
 31977 000029A0 58                      	pop	ax
 31978                                  	; 04/01/2023
 31979 000029A1 B90400                  	mov	cx,4
 31980 000029A4 7410                    	jz	short ghn_into_paras
 31981 000029A6 E82400                  	call	GetNibble
 31982                                  	;jc	short ghn_err
 31983                                  	; 11/12/2022
 31984 000029A9 7221                    	jc	short ghn_ret ; cf=1
 31985                                  	; 04/01/2023
 31986                                  	;mov	cx,4
 31987                                  ghn_shift1:
 31988 000029AB D1E0                    	shl	ax,1
 31989 000029AD D1D2                    	rcl	dx,1
 31990 000029AF E2FA                    	loop	ghn_shift1
 31991 000029B1 08D8                    	or	al,bl
 31992 000029B3 46                      	inc	si
 31993 000029B4 EBD7                    	jmp	short ghn_next
 31994                                  ghn_into_paras:
 31995 000029B6 83C00F                  	add	ax,15
 31996 000029B9 83D200                  	adc	dx,0
 31997 000029BC F7C2F0FF                	test	dx,0FFF0h
 31998 000029C0 7509                    	jnz	short ghn_err
 31999                                  	; 04/01/2023
 32000                                  	;mov	cx,4
 32001                                  ghn_shift2:
 32002 000029C2 F8                      	clc
 32003 000029C3 D1DA                    	rcr	dx,1
 32004 000029C5 D1D8                    	rcr	ax,1
 32005 000029C7 E2F9                    	loop	ghn_shift2
 32006 000029C9 F8                      	clc
 32007 000029CA C3                      	retn
 32008                                  	; 11/12/2022
 32009                                  ghn_err:
 32010                                  gnib_err:
 32011 000029CB F9                      	stc
 32012                                  ghn_ret:
 32013                                  gnib_ret:
 32014 000029CC C3                      	retn
 32015                                  
 32016                                  ;----------------------------------------------------------------------------
 32017                                  ;
 32018                                  ; procedure : GetNibble
 32019                                  ;
 32020                                  ;	Convert one nibble (hex digit) in BL into binary
 32021                                  ;
 32022                                  ;	Retruns binary value in BL
 32023                                  ;
 32024                                  ;	Returns carry if BL contains non-hex digit
 32025                                  ;
 32026                                  ;----------------------------------------------------------------------------
 32027                                  
 32028                                  GetNibble:
 32029 000029CD 80FB30                  	cmp	bl,'0'
 32030                                  	;jb	short gnib_err
 32031                                  	; 11/12/2022
 32032 000029D0 72FA                    	jb	short gnib_ret ; cf=1
 32033 000029D2 80FB39                  	cmp	bl,'9'
 32034 000029D5 7704                    	ja	short is_it_hex
 32035 000029D7 80EB30                  	sub	bl,'0'		; clc
 32036 000029DA C3                      	retn
 32037                                  is_it_hex:
 32038 000029DB 80FB41                  	cmp	bl,'A'
 32039                                  	;jb	short gnib_err
 32040                                  	; 11/12/2022
 32041 000029DE 72EC                    	jb	short gnib_ret ; cf=1
 32042 000029E0 80FB46                  	cmp	bl,'F'
 32043 000029E3 77E6                    	ja	short gnib_err ; 11/12/2022
 32044 000029E5 80EB37                  	sub	bl,'A'- 10	; clc
 32045 000029E8 C3                      	retn
 32046                                  
 32047                                  	; 11/12/2022
 32048                                  ;gnib_err:
 32049                                  ;	stc
 32050                                  ;gnib_ret:
 32051                                  ;	retn
 32052                                  
 32053                                  ;============================================================================
 32054                                  
 32055                                  ; 12/04/2019 - Retro DOS v4.0
 32056                                  
 32057                                  ; umb.inc (MSDOS 6.0, 1991)
 32058                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 32059                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 32060                                  
 32061                                  XMM_REQUEST_UMB	equ 10h
 32062                                  XMM_RELEASE_UMB	equ 11h
 32063                                  
 32064                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32065                                  
 32066                                  ;---------------------------------------------------------------------------
 32067                                  ;
 32068                                  ; Procedure Name	: umb_insert
 32069                                  ;
 32070                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 32071                                  ;			: BX = seg address of UMB to be linked in
 32072                                  ;			: DX = size of UMB to be linked in paras
 32073                                  ;			; DS = data
 32074                                  ;
 32075                                  ; Outputs		: links the UMB into the arena chain
 32076                                  ;
 32077                                  ; Uses			: AX, CX, ES, DX, BX
 32078                                  ;
 32079                                  ;---------------------------------------------------------------------------
 32080                                  
 32081                                  umb_insert:
 32082 000029E9 1E                      	push	ds
 32083                                  
 32084                                  	; 31/12/2022
 32085                                  	; ds = cs
 32086                                  
 32087                                  	;mov	ds,[cs:DevDOSData]
 32088 000029EA 8E1E[8C1E]              	mov	ds,[DevDOSData] ; 31/12/2022 
 32089                                  	;mov	ds,[8Ch]
 32090 000029EE 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 32091 000029F2 8CD8                    	mov	ax,ds
 32092 000029F4 8EC0                    	mov	es,ax
 32093                                  ui_next:
 32094 000029F6 39D8                    	cmp	ax,bx			; Q: is current block above
 32095                                  					;    new block
 32096 000029F8 770F                    	ja	short ui_insert		; Y: insert it
 32097                                  					; Q: is current block the
 32098                                  					;    last
 32099 000029FA 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32100 00002A00 745C                    	je	short ui_append		; Y: append new block to chain
 32101                                  					; N: get next block
 32102 00002A02 8ED8                    	mov	ds,ax			; M005
 32103                                  	;call	get_next		; ax = es = next block
 32104 00002A04 E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 32105 00002A07 EBED                    	jmp	short ui_next
 32106                                  
 32107                                  ui_insert:
 32108 00002A09 8CD9                    	mov	cx,ds			; ds = previous arena
 32109 00002A0B 41                      	inc	cx			; top of previous block
 32110                                  
 32111 00002A0C 29D9                    	sub	cx,bx
 32112 00002A0E F7D9                    	neg	cx			; cx = size of used block
 32113                                  	;mov	byte [0],'M'
 32114 00002A10 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32115                                  	;mov	word [1],8
 32116 00002A15 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 32117                                  	;mov	[3],cx
 32118 00002A1B 890E0300                	mov	[ARENA.SIZE],cx	
 32119                                  	;mov	word [8],4353h ; 'SC'
 32120 00002A1F C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 32121                                  
 32122                                  ; prepare the arena at start of new block
 32123                                  
 32124 00002A25 8EC3                    	mov	es,bx
 32125 00002A27 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32126 00002A2D 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 32127                                  					; mark as free
 32128 00002A34 83EA02                  	sub	dx,2			; make room for arena at
 32129                                  					; start & end of new block
 32130 00002A37 2689160300              	mov	[es:ARENA.SIZE],dx
 32131                                  
 32132                                  ; prepare arena at end of new block
 32133                                  	
 32134 00002A3C 01D3                    	add	bx,dx
 32135 00002A3E 43                      	inc	bx
 32136 00002A3F 8EC3                    	mov	es,bx			; es=arena at top of new block
 32137 00002A41 43                      	inc	bx			; bx=top of new block
 32138                                  
 32139                                  					; ax contains arena just above
 32140                                  					; this block
 32141 00002A42 29D8                    	sub	ax,bx			; ax = size of used block
 32142                                  	
 32143 00002A44 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32144 00002A4A 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32145 00002A51 26A30300                	mov	[es:ARENA.SIZE],ax	
 32146 00002A55 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32147                                  
 32148 00002A5C EB47                    	jmp	short ui_done
 32149                                  
 32150                                  ui_append:
 32151                                  					; es = arena of last block	
 32152 00002A5E 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 32153 00002A63 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 32154                                  					; going to rsrv on top of this 
 32155                                  					; block for the next arena.
 32156                                  	; 13/05/2019
 32157 00002A69 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32158                                  
 32159 00002A6F 89C1                    	mov	cx,ax			; cx=top of prev block-1
 32160 00002A71 40                      	inc	ax
 32161 00002A72 29D8                    	sub	ax,bx			; ax=top of prev block - 
 32162                                  					;    seg. address of new block
 32163 00002A74 F7D8                    	neg	ax
 32164                                  
 32165 00002A76 8EC1                    	mov	es,cx			; ds = arena of unused block
 32166                                  
 32167 00002A78 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32168 00002A7E 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32169 00002A85 26A30300                	mov	[es:ARENA.SIZE],ax	
 32170 00002A89 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 32171                                  
 32172                                  ; prepare the arena at start of new block
 32173 00002A90 8EC3                    	mov	es,bx
 32174 00002A92 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 32175 00002A98 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 32176                                  					; mark as free
 32177 00002A9F 4A                      	dec	dx			; make room for arena
 32178 00002AA0 2689160300              	mov	[es:ARENA.SIZE],dx	
 32179                                  ui_done:
 32180                                  uc_done: ; 31/12/2022 ; *!
 32181 00002AA5 1F                      	pop	ds
 32182                                  	; ds = cs ; 31/12/2022
 32183                                  ;uc_done:	; 18/12/2022
 32184                                  au_exit:	; 09/09/2023
 32185 00002AA6 C3                      	retn
 32186                                  
 32187                                  ;----------------------------------------------------------------------------
 32188                                  ;
 32189                                  ; procedure : AllocUMB
 32190                                  ;
 32191                                  ;	Allocate all UMBs and link it to DOS arena chain
 32192                                  ;
 32193                                  ;----------------------------------------------------------------------------
 32194                                  
 32195                                  AllocUMB:
 32196                                  	; 31/12/2022
 32197                                  	; ds = cs
 32198 00002AA7 E84700                  	call	InitAllocUMB		; link in the first UMB
 32199 00002AAA 72FA                    	jc	short au_exit		; quit on error
 32200                                  au_next:
 32201 00002AAC E87000                  	call	umb_allocate		; allocate
 32202 00002AAF 7205                    	jc	short au_coalesce
 32203 00002AB1 E835FF                  	call	umb_insert		; & insert till no UMBs
 32204 00002AB4 EBF6                    	jmp	short au_next
 32205                                  au_coalesce:
 32206                                  	; 09/09/2023
 32207                                  ;	call	umb_coalesce		; coalesce all UMBs
 32208                                  ;au_exit:
 32209                                  ;	; 31/12/2022
 32210                                  ;	; ds = cs
 32211                                  ;	retn
 32212                                  
 32213                                  	; 09/09/2023
 32214                                  	;jmp	short umb_coalesce
 32215                                  
 32216                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32217                                  
 32218                                  ;----------------------------------------------------------------------------
 32219                                  ;
 32220                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 32221                                  ;
 32222                                  ;	Coalesce adds the block following the argument to the argument block,
 32223                                  ;	iff it's free. Coalesce is usually used to join free blocks, but
 32224                                  ;	some callers (such as $setblock) use it to join a free block to it's
 32225                                  ;	preceeding allocated block.
 32226                                  ;
 32227                                  ;	EXIT	'C' clear if OK
 32228                                  ;		  (ds) unchanged, this block updated
 32229                                  ;		  (ax) = address of next block, IFF not at end
 32230                                  ;		'C' set if arena trashed
 32231                                  ;	USES	cx, di, ds, es
 32232                                  ;
 32233                                  ;----------------------------------------------------------------------------
 32234                                  
 32235                                  umb_coalesce:
 32236                                  	; 31/12/2022
 32237                                  	; ds = cs
 32238 00002AB6 1E                      	push	ds ; *!
 32239                                  
 32240 00002AB7 31FF                    	xor	di, di
 32241                                  
 32242                                  	;mov	es,[cs:DevDOSData]
 32243                                  	; 31/12/2022
 32244 00002AB9 8E06[8C1E]              	mov	es,[DevDOSData]
 32245 00002ABD 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 32246                                  uc_nextfree:
 32247 00002AC2 8CC0                    	mov	ax,es
 32248 00002AC4 8ED8                    	mov	ds,ax
 32249                                  	;cmp	[es:1],di
 32250 00002AC6 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 32251 00002ACB 7407                    	je	short uc_again		; Y: try to coalesce with next block
 32252                                  					; N: get next arena
 32253 00002ACD E86B00                  	call	get_next		; es, ax = next arena
 32254 00002AD0 72D3                    	jc	short uc_done	; *!
 32255 00002AD2 EBEE                    	jmp	short uc_nextfree
 32256                                  uc_again:
 32257 00002AD4 E86400                  	call	get_next		; ES, AX <- next block
 32258 00002AD7 72CC                    	jc	short uc_done	; *!
 32259                                  uc_check:
 32260 00002AD9 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 32261 00002ADE 75E2                    	jne	short uc_nextfree	; N: get next free arena
 32262                                  					; Y: coalesce
 32263 00002AE0 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 32264 00002AE5 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 32265                                  	;add	[3],cx
 32266 00002AE6 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 32267 00002AEA 268A0D                  	mov     cl,[es:di]              ; move up signature
 32268 00002AED 880D                    	mov     [di],cl
 32269 00002AEF EBE3                    	jmp     short uc_again		; try again
 32270                                  
 32271                                  	; 18/12/2022
 32272                                  ;uc_done:
 32273                                  	;retn
 32274                                  
 32275                                  ;----------------------------------------------------------------------------
 32276                                  ;
 32277                                  ; procedure : InitAllocUMB
 32278                                  ;
 32279                                  ;----------------------------------------------------------------------------
 32280                                  
 32281                                  InitAllocUMB:
 32282                                  	; 31/12/2022
 32283                                  	; ds = cs
 32284 00002AF1 E820DF                  	call	IsXMSLoaded
 32285 00002AF4 7527                    	jnz	short iau_err		; quit on no XMS driver
 32286 00002AF6 B452                    	mov	ah,52h
 32287 00002AF8 CD21                    	int	21h			; get DOS DATA seg
 32288                                  	; 31/12/2022
 32289                                  	; ds = cs
 32290                                  	;mov	[cs:DevDOSData],es	; & save it for later
 32291 00002AFA 8C06[8C1E]              	mov	[DevDOSData],es		; & save it for later
 32292 00002AFE B81043                  	mov	ax,4310h
 32293 00002B01 CD2F                    	int	2Fh
 32294                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 32295                                  	;mov	[cs:DevXMSAddr+2],es
 32296 00002B03 891E[751E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 32297 00002B07 8C06[771E]              	mov	[DevXMSAddr+2],es	
 32298                                  	; 31/12/2022
 32299 00002B0B 803E[8B1E]00            	cmp	byte [FirstUMBLinked],0 
 32300                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 32301                                  	;jne	short ia_1		; quit if we already did it
 32302                                  	; 12/12/2022
 32303 00002B10 770A                    	ja	short ia_1 ; cf=0
 32304 00002B12 E83900                  	call	LinkFirstUMB		; else link the first UMB
 32305                                  	;jc	short iau_err
 32306                                  	; 12/12/2022
 32307 00002B15 7207                    	jc	short iau_err2  ; cf=1
 32308                                  	; 31/12/2022
 32309                                  	; ds = cs
 32310 00002B17 C606[8B1E]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32311                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32312                                  ia_1:
 32313                                  	; 12/12/2022
 32314                                  	; cf=0
 32315                                  	;clc
 32316 00002B1C C3                      	retn
 32317                                  iau_err:
 32318 00002B1D F9                      	stc
 32319                                  iau_err2:
 32320 00002B1E C3                      	retn
 32321                                  
 32322                                  ;-------------------------------------------------------------------------
 32323                                  ;
 32324                                  ; Procedure Name	: umb_allocate
 32325                                  ;
 32326                                  ; Inputs		: DS = data
 32327                                  ;
 32328                                  ; Outputs		: if UMB available
 32329                                  ;				Allocates the largest available UMB and 
 32330                                  ;			  	BX = segment of allocated block
 32331                                  ;				DX = size of allocated block
 32332                                  ;				NC
 32333                                  ;			  else 
 32334                                  ;				CY
 32335                                  ;
 32336                                  ; Uses			: BX, DX
 32337                                  ;
 32338                                  ;-------------------------------------------------------------------------
 32339                                  
 32340                                  umb_allocate:
 32341                                  	; 31/12/2022
 32342                                  	; ds = cs
 32343 00002B1F 50                      	push	ax
 32344 00002B20 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32345 00002B22 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 32346                                  					;   possible
 32347                                  	; 31/12/2022
 32348 00002B25 FF1E[751E]              	call	far [DevXMSAddr]
 32349                                  	;call	far [cs:DevXMSAddr]
 32350                                  					; dx now contains the size of
 32351                                  					; the largest UMB
 32352 00002B29 09D2                    	or	dx,dx
 32353 00002B2B 740B                    	jz	short ua_err
 32354                                  	
 32355 00002B2D B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32356                                  
 32357                                  	; 31/12/2022
 32358 00002B2F FF1E[751E]              	call	far [DevXMSAddr]
 32359                                  	;call	far [cs:DevXMSAddr]
 32360                                  
 32361 00002B33 83F801                  	cmp	ax,1			; Q: was the reqst successful
 32362                                  	;jne	short ua_err		; N: error
 32363                                  	; 14/08/2023
 32364 00002B36 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 32365                                  ua_err:
 32366 00002B38 F9                      	stc	
 32367                                  
 32368                                  	;clc
 32369                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32370                                  	; 12/12/2022
 32371                                  	; cf=0
 32372                                  	;clc 
 32373                                  ua_done:
 32374 00002B39 58                      	pop	ax
 32375 00002B3A C3                      	retn
 32376                                  	; 14/08/2023
 32377                                  ;ua_err:
 32378                                  	;stc
 32379                                  	;jmp	short ua_done
 32380                                  
 32381                                  ; 13/04/2019 - Retro DOS v4.0
 32382                                  
 32383                                  ;----------------------------------------------------------------------------
 32384                                  ;
 32385                                  ;**	get_next - Find Next item in Arena
 32386                                  ;
 32387                                  ;	ENTRY	dS - pointer to block head
 32388                                  ;	EXIT	AX,ES - pointers to next head
 32389                                  ;		'C' set if arena damaged
 32390                                  ;
 32391                                  ;----------------------------------------------------------------------------
 32392                                  
 32393                                  	; 01/11/2022
 32394                                  get_next:
 32395 00002B3B 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 32396 00002B40 740A                    	je	short gn_err
 32397                                  _get_next_:
 32398 00002B42 8CD8                    	mov     ax,ds                   ; ax=current block
 32399 00002B44 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 32400 00002B48 40                      	inc     ax                      ; remember that header!
 32401 00002B49 8EC0                    	mov	es,ax
 32402                                  	;clc
 32403                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32404                                  	; 11/12/2022
 32405                                  	; cf=0
 32406                                  	;clc
 32407 00002B4B C3                      	retn
 32408                                  gn_err:
 32409 00002B4C F9                      	stc
 32410                                  	; 11/12/2022	
 32411                                  lfu_err:	 ; cf=1
 32412 00002B4D C3                      	retn
 32413                                  
 32414                                  ;----------------------------------------------------------------------------
 32415                                  ;
 32416                                  ; procedure : LinkFirstUMB
 32417                                  ;
 32418                                  ;----------------------------------------------------------------------------
 32419                                  
 32420                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32421                                  	; (SYSINIT:2F81h)
 32422                                  LinkFirstUMB:
 32423                                  	; 31/12/2022
 32424                                  	; ds = cs
 32425 00002B4E E8CEFF                  	call	umb_allocate
 32426 00002B51 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 32427                                  
 32428                                  ; bx = segment of allocated UMB
 32429                                  ; dx = size of UMB
 32430                                  
 32431                                  	; 31/12/2022
 32432                                  	; ds = cs
 32433                                  
 32434 00002B53 CD12                    	int	12h			; ax = size of memory
 32435 00002B55 B106                    	mov	cl,6
 32436 00002B57 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 32437                                  
 32438 00002B59 89C1                    	mov	cx,ax			; cx = size in paras
 32439 00002B5B 29D8                    	sub	ax,bx			; ax = - size of unused block
 32440                                  
 32441 00002B5D F7D8                    	neg	ax
 32442                                  
 32443                                  	;sub	cx,1			; cx = first umb_arena
 32444                                  	; 09/09/2023
 32445 00002B5F 49                      	dec	cx
 32446 00002B60 8EC1                    	mov	es,cx			; es = first umb_arena
 32447                                  	
 32448 00002B62 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32449 00002B68 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32450                                  					
 32451 00002B6F 26A30300                	mov	[es:ARENA.SIZE],ax	
 32452 00002B73 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32453                                  
 32454                                  ; put in the arena for the first UMB
 32455                                  
 32456 00002B7A 8EC3                    	mov	es,bx			; es has first free umb seg
 32457 00002B7C 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32458 00002B82 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 32459                                  					; mark as free 
 32460 00002B89 4A                      	dec	dx			; make room for arena
 32461 00002B8A 2689160300              	mov	[es:ARENA.SIZE],dx	
 32462                                  
 32463                                  	;mov	es,[cs:DevDOSData]
 32464                                  	; 31/12/2022
 32465 00002B8F 8E06[8C1E]              	mov	es,[DevDOSData] ; ds = cs
 32466                                  	; 18/09/2023
 32467 00002B93 26890E8C00              	mov	[es:UMB_ARENA],cx
 32468                                  	;mov	di,UMB_ARENA ; 8Ch
 32469                                  	;mov	[es:di],cx		; initialize umb_head in DOS
 32470                                  					;  data segment with the arena
 32471                                  					;  just below Top of Mem
 32472                                  
 32473                                  ; we must now scan the arena chain and update the size of the last arena
 32474                                  
 32475                                  	;mov	di,DOS_ARENA ; 24h
 32476                                  	;mov	es,[es:di]		; es = start arena
 32477                                  	; 18/09/2023
 32478 00002B98 268E062400              	mov	es,[es:DOS_ARENA]
 32479 00002B9D 31FF                    	xor	di,di
 32480                                  ;scan_next
 32481                                  ; 09/12/2022
 32482                                  scannext:
 32483 00002B9F 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 32484 00002BA3 740C                    	je	short got_last
 32485                                  	
 32486 00002BA5 8CC0                    	mov	ax,es
 32487 00002BA7 2603060300              	add	ax,[es:ARENA.SIZE]
 32488 00002BAC 40                      	inc	ax
 32489 00002BAD 8EC0                    	mov	es,ax
 32490                                  	;jmp	short scan_next
 32491                                  	; 09/12/2022
 32492 00002BAF EBEE                    	jmp	short scannext
 32493                                  got_last:
 32494                                  	;sub	word [es:ARENA.SIZE],1
 32495                                  	; 09/09/2023
 32496 00002BB1 26FF0E0300              	dec	word [es:ARENA.SIZE]
 32497                                  
 32498 00002BB6 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32499                                  	;clc
 32500                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32501                                  	; 11/12/2022
 32502                                  	; cf=0
 32503                                  	;clc
 32504 00002BBC C3                      	retn
 32505                                  
 32506                                  ; 11/12/2022
 32507                                  ;;lfu_err:
 32508                                  ;	;stc
 32509                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32510                                  ;	; 11/12/2022
 32511                                  ;	; cf=1
 32512                                  ;	;stc
 32513                                  ;	retn
 32514                                  
 32515                                  ;----------------------------------------------------------------------------
 32516                                  ;
 32517                                  ; procedure : ShrinkUMB
 32518                                  ;
 32519                                  ;	Shrinks the current UMB in use, so that the unused portions
 32520                                  ;	of the UMB is given back to the DOS free mem pool
 32521                                  ;
 32522                                  ;----------------------------------------------------------------------------
 32523                                  
 32524                                  ShrinkUMB:
 32525                                  	; 12/12/2022
 32526                                  	; ds = cs
 32527 00002BBD 833E[6F1E]00            	cmp	word [DevUMBAddr],0
 32528                                  	;cmp	word [cs:DevUMBAddr],0
 32529 00002BC2 7421                    	je	short su_exit
 32530 00002BC4 06                      	push	es
 32531 00002BC5 53                      	push	bx
 32532                                  	; 12/12/2022
 32533                                  	;mov	bx,[cs:DevUMBFree]
 32534                                  	;sub	bx,[cs:DevUMBAddr]
 32535                                  	;mov	es,[cs:DevUMBAddr]
 32536 00002BC6 8B1E[731E]              	mov	bx,[DevUMBFree]
 32537 00002BCA 2B1E[6F1E]              	sub	bx,[DevUMBAddr]
 32538 00002BCE 8E06[6F1E]              	mov	es,[DevUMBAddr]
 32539                                  	
 32540 00002BD2 B8004A                  	mov	ax,4A00h
 32541 00002BD5 CD21                    	int	21h
 32542                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 32543                                  		; ES = segment address of block to change
 32544                                  		; BX = new size in paragraphs
 32545 00002BD7 8CC0                    	mov	ax,es
 32546 00002BD9 48                      	dec	ax
 32547 00002BDA 8EC0                    	mov	es,ax
 32548 00002BDC 26C70601000800          	mov	word [es:ARENA.OWNER],8
 32549 00002BE3 5B                      	pop	bx
 32550 00002BE4 07                      	pop	es
 32551                                  su_exit:
 32552 00002BE5 C3                      	retn
 32553                                  
 32554                                  ;----------------------------------------------------------------------------
 32555                                  ;
 32556                                  ; procedure : UnlinkUMB
 32557                                  ;
 32558                                  ;	Unlinks the UMBs from the DOS arena chain
 32559                                  ;
 32560                                  ;----------------------------------------------------------------------------
 32561                                  
 32562                                  UnlinkUMB:
 32563                                  	; 12/12/2022
 32564                                  	; ds = cs
 32565 00002BE6 1E                      	push	ds
 32566 00002BE7 06                      	push	es
 32567                                  	; 12/12/2022
 32568 00002BE8 803E[8B1E]00            	cmp	byte [FirstUMBLinked],0
 32569                                  	;cmp	byte [cs:FirstUMBLinked],0
 32570 00002BED 7420                    	je	short ulu_x		; nothing to unlink
 32571                                  	; 12/12/2022
 32572 00002BEF 8E06[8C1E]              	mov	es,[DevDOSData]
 32573                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 32574 00002BF3 268E1E2400              	mov	ds,[es:DOS_ARENA]
 32575 00002BF8 268B3E8C00              	mov	di,[es:UMB_ARENA]
 32576                                  ulu_next:
 32577 00002BFD E83BFF                  	call	get_next
 32578 00002C00 720D                    	jc	short ulu_x
 32579 00002C02 39C7                    	cmp	di,ax			; is the next one UMB ?
 32580 00002C04 7404                    	je	short ulu_found
 32581 00002C06 8ED8                    	mov	ds,ax
 32582 00002C08 EBF3                    	jmp	short ulu_next
 32583                                  ulu_found:
 32584                                  	;mov	byte [0],'Z'
 32585 00002C0A C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32586                                  ulu_x:
 32587 00002C0F 07                      	pop	es
 32588 00002C10 1F                      	pop	ds
 32589 00002C11 C3                      	retn
 32590                                  
 32591                                  ; ----------------------------------------------------------------------
 32592                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 32593                                  ; ----------------------------------------------------------------------
 32594                                  ; 14/04/2019 - Retro DOS v4.0
 32595                                  
 32596                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 32597                                  ;
 32598                                  ; Summary:
 32599                                  ;
 32600                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 32601                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 32602                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 32603                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 32604                                  ;   and/or config.inc for the full list.
 32605                                  ;
 32606                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 32607                                  ;   configuration support. blockname is either MENU, which contains one
 32608                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 32609                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 32610                                  ;   INCLUDE allows the current block to name another block for inclusion
 32611                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 32612                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 32613                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 32614                                  ;
 32615                                  ; Example:
 32616                                  ;
 32617                                  ;   [menu]
 32618                                  ;   menuitem=misc,Miscellaneous
 32619                                  ;   menuitem=network,Network Configuration
 32620                                  ;   menudefault=network,15
 32621                                  ;
 32622                                  ;   [network]
 32623                                  ;   include misc
 32624                                  ;   device=foo
 32625                                  ;
 32626                                  ;   [misc]
 32627                                  ;   device=bar
 32628                                  ;   include alternate
 32629                                  ;
 32630                                  ;   [alternate]
 32631                                  ;   device=tar
 32632                                  ;
 32633                                  ;
 32634                                  ;   When the menu is displayed
 32635                                  ;
 32636                                  ;    1. Miscellaneous
 32637                                  ;    2. Network Configuration
 32638                                  ;
 32639                                  ;   #2 is highlighted as the default option, and will be automatically
 32640                                  ;   selected after 15 seconds. It will invoke the following lines in the
 32641                                  ;   following order:
 32642                                  ;
 32643                                  ;       DEVICE=BAR
 32644                                  ;       DEVICE=TAR
 32645                                  ;       DEVICE=FOO
 32646                                  ;
 32647                                  
 32648                                  ;MULTI_CONFIG equ 1
 32649                                  
 32650                                  ; the following depend on the positions of the various letters in switchlist
 32651                                  
 32652                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 32653                                  
 32654                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 32655                                  flagdrive	equ 00001000b ; 8 
 32656                                  flagcyln	equ 00010000b ; 16
 32657                                  flagseclim	equ 00100000b ; 32
 32658                                  flagheads	equ 01000000b ; 64
 32659                                  flagff		equ 10000000b ; 128
 32660                                  
 32661                                  ;----------------------------------------------------------------------------
 32662                                  ; 19/04/2019 - Retro DOS v4.0
 32663                                  
 32664                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 32665                                  
 32666                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32667                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 32668                                  
 32669 00002C12 00                      insert_blank:	db 	0
 32670                                  
 32671                                  ;----------------------------------------------------------------------------
 32672                                  ;
 32673                                  ; procedure : setparms
 32674                                  ;
 32675                                  ; the following set of routines is used to parse the drivparm = command in
 32676                                  ; the config.sys file to change the default drive parameters.
 32677                                  ;
 32678                                  ;----------------------------------------------------------------------------
 32679                                  
 32680                                  setparms:
 32681 00002C13 1E                      	push	ds
 32682 00002C14 50                      	push	ax
 32683 00002C15 53                      	push	bx
 32684 00002C16 51                      	push	cx
 32685 00002C17 52                      	push	dx
 32686                                  
 32687 00002C18 0E                      	push	cs
 32688 00002C19 1F                      	pop	ds
 32689                                  
 32690 00002C1A 31DB                    	xor	bx,bx
 32691 00002C1C 8A1E[9C35]              	mov	bl,[drive]
 32692                                  	; 18/12/2022
 32693 00002C20 43                      	inc	bx
 32694                                  	;inc	bl			; get it correct for ioctl call
 32695                                  					; (1=a,2=b...)
 32696 00002C21 BA[7434]                	mov	dx,deviceparameters
 32697                                  	;mov	ah,IOCTL ; 44h
 32698                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 32699                                  	; 14/08/2023
 32700 00002C24 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 32701                                  	;mov	ch,RAWIO ; 8
 32702                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 32703                                  	; 14/08/2023
 32704 00002C27 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 32705 00002C2A CD21                    	int	21h
 32706                                  
 32707                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32708                                  ;
 32709                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 32710                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 32711                                  ;	; 21/10/2022
 32712                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 32713                                  ;	mov	ds,ax			; set Bios_Data segment
 32714                                  ;
 32715                                  ;	test	word [cs:switches],flagec35 ; 4
 32716                                  ;	jz	short not_ec35
 32717                                  
 32718                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32719                                  	;test	word [switches],flagec35 ; 4
 32720                                  	; 12/12/2022
 32721 00002C2C F606[9D35]04            	test	byte [switches],flagec35 ; 4
 32722 00002C31 7411                    	jz	short eot_ok
 32723                                  
 32724                                  	;mov	cl,[cs:drive]		; which drive was this for?
 32725                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32726 00002C33 8A0E[9C35]              	mov	cl,[drive]
 32727 00002C37 B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 32728 00002C3A 8ED8                    	mov	ds,ax	
 32729                                  
 32730 00002C3C B001                    	mov	al,1			; assume drive 0
 32731 00002C3E D2E0                    	shl	al,cl			; set proper bit depending on drive
 32732                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 32733 00002C40 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 32734                                  
 32735                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32736                                  ;
 32737                                  ;not_ec35:
 32738                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 32739                                  ;;	sectors per track than any old ones.
 32740                                  ;
 32741                                  ;	;mov	al,[cs:deviceparameters+20]
 32742                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32743                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 32744                                  ;	cmp	al,[EOT]
 32745                                  ;	jbe	short eot_ok
 32746                                  ;	mov	[EOT],al
 32747                                  
 32748                                  eot_ok:
 32749 00002C44 5A                      	pop	dx			; fix up all the registers
 32750 00002C45 59                      	pop	cx
 32751 00002C46 5B                      	pop	bx
 32752 00002C47 58                      	pop	ax
 32753 00002C48 1F                      	pop	ds ; 13/05/2019
 32754 00002C49 C3                      	retn
 32755                                  
 32756                                  ;----------------------------------------------------------------------------
 32757                                  ;
 32758                                  ; procedure : diddleback
 32759                                  ;
 32760                                  ; replace default values for further drivparm commands
 32761                                  ;
 32762                                  ;----------------------------------------------------------------------------
 32763                                  
 32764                                  diddleback:
 32765 00002C4A 1E                      	push	ds
 32766 00002C4B 0E                      	push	cs
 32767 00002C4C 1F                      	pop	ds
 32768                                  	;mov	word [deviceparameters+4],80
 32769 00002C4D C706[7834]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32770                                  	;mov	byte [deviceparameters+1],2
 32771 00002C53 C606[7534]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 32772                                  	;mov	word [deviceparameters+2],0
 32773 00002C58 C706[7634]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 32774 00002C5E C706[9D35]0000          	mov	word [switches],0	    ; zero all switches
 32775 00002C64 1F                      	pop	ds
 32776 00002C65 C3                      	retn
 32777                                  
 32778                                  ; 04/01/2023
 32779                                  %if 0
 32780                                  
 32781                                  ; 15/04/2019 - Retro DOS v4.0
 32782                                  
 32783                                  ;----------------------------------------------------------------------------
 32784                                  ;
 32785                                  ; procedure : parseline
 32786                                  ;
 32787                                  ; entry point is parseline. al contains the first character in command line.
 32788                                  ;
 32789                                  ;----------------------------------------------------------------------------
 32790                                  
 32791                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32792                                  	; (SYSINIT:30ACh)
 32793                                  
 32794                                  parseline:
 32795                                  	push	ds
 32796                                  
 32797                                  	push	cs
 32798                                  	pop	ds
 32799                                  
 32800                                  nextswtch:
 32801                                  	cmp	al,cr			; carriage return?
 32802                                  	je	short done_line
 32803                                  	cmp	al,lf			; linefeed?
 32804                                  	je	short put_back		; put it back and done
 32805                                  
 32806                                  ; anything less or equal to a space is ignored.
 32807                                  
 32808                                  	cmp	al,' '                  ; space?
 32809                                  	jbe	short getnext		; skip over space
 32810                                  	cmp	al,'/'
 32811                                  	je	short getparm
 32812                                  	stc				; mark error invalid-character-in-input
 32813                                  	jmp	short exitpl
 32814                                  
 32815                                  getparm:
 32816                                  	call	check_switch
 32817                                  	mov	[switches],bx		; save switches read so far
 32818                                  	jc	short swterr
 32819                                  getnext:
 32820                                  	call	getchr
 32821                                  	jc	short done_line
 32822                                  	jmp	short nextswtch
 32823                                  swterr:
 32824                                  	jmp	short exitpl		; exit if error
 32825                                  
 32826                                  done_line:
 32827                                  	; 12/12/2022
 32828                                  	test	byte [switches],flagdrive ; 8
 32829                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32830                                  	jnz	short okay
 32831                                  	stc				; mark error no-drive-specified
 32832                                  	jmp	short exitpl
 32833                                  
 32834                                  okay:
 32835                                  	mov	ax,[switches]
 32836                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32837                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32838                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32839                                  	;clc			    ; everything is fine
 32840                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32841                                  	; 12/12/2022
 32842                                  	; cf=0
 32843                                  	;clc
 32844                                  	call	setdeviceparameters
 32845                                  exitpl:
 32846                                  	pop	ds
 32847                                  	retn
 32848                                  put_back:
 32849                                  	inc	word [count]		; one more char to scan
 32850                                  	dec	word [chrptr]		; back up over linefeed
 32851                                  	jmp	short done_line
 32852                                  
 32853                                  %endif
 32854                                  
 32855                                  ;----------------------------------------------------------------------------
 32856                                  ;
 32857                                  ; procedure : check_switch
 32858                                  ;
 32859                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32860                                  ; gets the number, if any required, following the switch. the switch and the
 32861                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32862                                  ; error.
 32863                                  ;
 32864                                  ;----------------------------------------------------------------------------
 32865                                  
 32866                                  ; 09/09/2023
 32867                                  
 32868                                  err_swtch:
 32869 00002C66 31CB                    	xor	bx,cx			; remove this switch from the records
 32870                                  err_check:
 32871 00002C68 F9                      	stc
 32872                                  err_chk:
 32873                                  done_swtch:	; 09/09/2023 (cf=0)
 32874 00002C69 C3                      	retn
 32875                                  
 32876                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32877                                  
 32878                                  check_switch:
 32879 00002C6A E87803                  	call	getchr
 32880                                  	;jc	short err_check
 32881 00002C6D 72FA                    	jc	short err_chk
 32882 00002C6F 24DF                            and     al,0DFh                 ; convert it to upper case
 32883 00002C71 3C41                    	cmp	al,'A'
 32884                                  	;jb	short err_check
 32885 00002C73 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32886 00002C75 3C5A                    	cmp	al,'Z'
 32887 00002C77 77EF                    	ja	short err_check
 32888                                  
 32889 00002C79 06                      	push	es
 32890                                  
 32891 00002C7A 0E                      	push	cs
 32892 00002C7B 07                      	pop	es
 32893                                  
 32894                                  	;mov	cl,[switchlist]		; get number of valid switches
 32895                                  	;mov	ch,0
 32896                                  	;mov	di,1+switchlist		; point to string of valid switches
 32897                                  	; 09/09/2023
 32898 00002C7C BF[3036]                	mov	di,switchlist
 32899 00002C7F 8A0D                    	mov	cl,[di]
 32900 00002C81 B500                    	mov	ch,0
 32901 00002C83 47                      	inc	di	; 1+switchlist
 32902                                  
 32903 00002C84 F2AE                    	repne	scasb
 32904                                  
 32905 00002C86 07                      	pop	es
 32906 00002C87 75DF                    	jnz	short err_check
 32907                                  
 32908 00002C89 B80100                  	mov	ax,1
 32909 00002C8C D3E0                    	shl	ax,cl			; set bit to indicate switch
 32910 00002C8E 8B1E[9D35]              	mov	bx,[switches]		; get switches so far
 32911 00002C92 09C3                    	or	bx,ax			; save this with other switches
 32912 00002C94 89C1                    	mov	cx,ax
 32913                                  	; 12/12/2022
 32914 00002C96 A8F8                    	test	al,switchnum ; 0F8h
 32915                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32916 00002C98 74CF                    	jz	short done_swtch
 32917                                  
 32918 00002C9A E84803                  	call	getchr
 32919 00002C9D 72C7                    	jc	short err_swtch
 32920                                  
 32921 00002C9F 3C3A                    	cmp	al,':'
 32922 00002CA1 75C3                    	jne	short err_swtch
 32923                                  
 32924 00002CA3 E83F03                  	call	getchr
 32925 00002CA6 53                      	push	bx			; preserve switches
 32926                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32927                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32928                                  	; 12/12/2022
 32929                                  	; ds = cs
 32930 00002CA7 C606[2A03]20            	mov	byte [sepchr],' '
 32931 00002CAC E8DB03                  	call	getnum
 32932                                  	;mov	byte [cs:sepchr],0
 32933                                  	; 12/12/2022
 32934 00002CAF C606[2A03]00            	mov	byte [sepchr],0
 32935 00002CB4 5B                      	pop	bx			; restore switches
 32936                                  
 32937                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32938                                  ; not check for carry set here. if there is an error, it will be detected
 32939                                  ; further on (hopefully).
 32940                                  
 32941                                  	; 09/09/2023
 32942                                  	;call	process_num
 32943                                  	;jmp	short process_num
 32944                                  
 32945                                  ;done_swtch:
 32946                                  ;	;clc
 32947                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32948                                  ;	; 12/12/2022
 32949                                  ;	; cf=0
 32950                                  ;	;clc
 32951                                  ;	retn
 32952                                  
 32953                                  ;----------------------------------------------------------------------------
 32954                                  ;
 32955                                  ; procedure : process_num
 32956                                  ;
 32957                                  ; this routine takes the switch just input, and the number following (if any),
 32958                                  ; and sets the value in the appropriate variable. if the number input is zero
 32959                                  ; then it does nothing - it assumes the default value that is present in the
 32960                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32961                                  ;
 32962                                  ;----------------------------------------------------------------------------
 32963                                  
 32964                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32965                                  	; (SYSINIT:3156h)
 32966                                  process_num:
 32967 00002CB5 850E[9D35]              	test	[switches],cx		; if this switch has been done before,
 32968 00002CB9 752B                    	jnz	short done_ret		; ignore this one.
 32969                                  	; 12/12/2022
 32970 00002CBB F6C108                  	test	cl,flagdrive ; 8
 32971                                  	;test	cx,flagdrive ; 8
 32972 00002CBE 7404                    	jz	short try_f
 32973 00002CC0 A2[9C35]                	mov	byte [drive],al
 32974                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32975                                  	;jmp	short done_ret
 32976                                  	; 12/12/2022
 32977                                  	; cf=0
 32978 00002CC3 C3                      	retn	; 13/05/2019
 32979                                  try_f:
 32980                                  	; 12/12/2022
 32981 00002CC4 F6C180                  	test	cl,flagff ; 80h
 32982                                  	;test	cx,flagff ; 80h
 32983 00002CC7 7404                    	jz	short try_t
 32984                                  
 32985                                  ; ensure that we do not get bogus form factors that are not supported
 32986                                  
 32987                                  	;mov	[deviceparameters+1],al
 32988 00002CC9 A2[7534]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32989                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32990                                  	;jmp	short done_ret
 32991                                  	; 12/12/2022
 32992                                  	; cf=0
 32993 00002CCC C3                      	retn	; 13/05/2019
 32994                                  try_t:
 32995 00002CCD 09C0                    	or	ax,ax
 32996 00002CCF 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32997                                  	; 12/12/2022
 32998 00002CD1 F6C110                  	test	cl,flagcyln ; 10h
 32999                                  	;test	cx,flagcyln ; 10h
 33000 00002CD4 7404                    	jz	short try_s
 33001                                  
 33002                                  	;mov	[deviceparameters+4],ax
 33003 00002CD6 A3[7834]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 33004                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33005                                  	;jmp	short done_ret
 33006                                  	; 12/12/2022
 33007                                  	; cf=0
 33008 00002CD9 C3                      	retn	; 13/05/2019
 33009                                  try_s:
 33010                                  	; 12/12/2022
 33011 00002CDA F6C120                  	test	cl,flagseclim ; 20h
 33012                                  	;test	cx,flagseclim ; 20h
 33013 00002CDD 7404                    	jz	short try_h
 33014 00002CDF A3[9A35]                	mov	[slim],ax
 33015                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33016                                  	;jmp	short done_ret
 33017                                  	; 12/12/2022
 33018                                  	; cf=0
 33019 00002CE2 C3                      	retn	; 13/05/2019
 33020                                  
 33021                                  ; must be for number of heads
 33022                                  
 33023                                  try_h:
 33024 00002CE3 A3[9835]                	mov	[hlim],ax
 33025                                  done_ret:
 33026                                  	;clc
 33027                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33028                                  	; 12/12/2022
 33029                                  	; cf=0 (test instruction resets cf)
 33030                                  	;clc
 33031 00002CE6 C3                      	retn
 33032                                  
 33033                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33034                                  %if 1
 33035                                  
 33036                                  ; 15/04/2019 - Retro DOS v4.0
 33037                                  
 33038                                  ;----------------------------------------------------------------------------
 33039                                  ;
 33040                                  ; procedure : parseline
 33041                                  ;
 33042                                  ; entry point is parseline. al contains the first character in command line.
 33043                                  ;
 33044                                  ;----------------------------------------------------------------------------
 33045                                  
 33046                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33047                                  	; (SYSINIT:30ACh)
 33048                                  parseline:
 33049                                  	; 04/01/2023
 33050                                  	; ds = cs ; *
 33051                                  
 33052                                  	;push	ds ; *
 33053                                  
 33054                                  	;push	cs ; *
 33055                                  	;pop	ds ; *
 33056                                  
 33057                                  nextswtch:
 33058 00002CE7 3C0D                    	cmp	al,cr			; carriage return?
 33059 00002CE9 741C                    	je	short done_line
 33060 00002CEB 3C0A                    	cmp	al,lf			; linefeed?
 33061 00002CED 7421                    	je	short put_back		; put it back and done
 33062                                  
 33063                                  ; anything less or equal to a space is ignored.
 33064                                  
 33065 00002CEF 3C20                    	cmp	al,' '                  ; space?
 33066 00002CF1 760F                    	jbe	short getnext		; skip over space
 33067 00002CF3 3C2F                    	cmp	al,'/'
 33068 00002CF5 7402                    	je	short getparm
 33069 00002CF7 F9                      	stc				; mark error invalid-character-in-input
 33070                                  	;jmp	short exitpl
 33071                                  	; 04/01/2023
 33072                                  swterr:
 33073 00002CF8 C3                      	retn
 33074                                  
 33075                                  getparm:
 33076 00002CF9 E86EFF                  	call	check_switch
 33077 00002CFC 891E[9D35]              	mov	[switches],bx		; save switches read so far
 33078 00002D00 72F6                    	jc	short swterr
 33079                                  getnext:
 33080 00002D02 E8E002                  	call	getchr
 33081                                  	;jc	short done_line
 33082                                  	;jmp	short nextswtch
 33083                                  	; 04/01/2023
 33084 00002D05 73E0                    	jnc	short nextswtch
 33085                                  ;swterr:
 33086                                  	;jmp	short exitpl		; exit if error
 33087                                  
 33088                                  done_line:
 33089                                  	; 12/12/2022
 33090 00002D07 F606[9D35]08            	test	byte [switches],flagdrive ; 8
 33091                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33092 00002D0C 750C                    	jnz	short okay
 33093 00002D0E F9                      	stc				; mark error no-drive-specified
 33094                                  	;jmp	short exitpl
 33095                                  	; 04/01/2023
 33096 00002D0F C3                      	retn
 33097                                  
 33098                                  ;exitpl:
 33099                                  	; 04/01/2023
 33100                                  	; ds = cs
 33101                                  	;;pop	ds ; *
 33102                                  	;retn
 33103                                  
 33104                                  put_back:
 33105 00002D10 FF06[D203]              	inc	word [count]		; one more char to scan
 33106 00002D14 FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 33107 00002D18 EBED                    	jmp	short done_line
 33108                                  
 33109                                  okay:
 33110 00002D1A A1[9D35]                	mov	ax,[switches]
 33111 00002D1D 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33112 00002D20 A3[7634]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33113 00002D23 C706[9A34]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33114                                  	;clc			    ; everything is fine
 33115                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33116                                  	; 12/12/2022
 33117                                  	; cf=0
 33118                                  	;clc
 33119                                  	;call	setdeviceparameters
 33120                                  	; 04/01/2023
 33121                                  	;jmp	short setdeviceparameters
 33122                                  
 33123                                  %endif
 33124                                  
 33125                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 33126                                  
 33127                                  ;----------------------------------------------------------------------------
 33128                                  ;
 33129                                  ; procedure : setdeviceparameters
 33130                                  ;
 33131                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 33132                                  ; system based on the form factor. it is assumed that the bpbs for the
 33133                                  ; various form factors are present in the bpbtable. for hard files,
 33134                                  ; the recommended bpb is the same as the bpb on the drive.
 33135                                  ; no attempt is made to preserve registers since we are going to jump to
 33136                                  ; sysinit straight after this routine.
 33137                                  ;
 33138                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 33139                                  ;	  we always return no carry
 33140                                  ;
 33141                                  ;	note:  there is a routine by the same name in msdioctl.asm
 33142                                  ;
 33143                                  ;----------------------------------------------------------------------------
 33144                                  
 33145                                  ; 15/04/2019 - Retro DOS v4.0
 33146                                  
 33147                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33148                                  setdeviceparameters:
 33149                                  	; 04/01/2023
 33150                                  	; ds = cs
 33151                                  	
 33152 00002D29 06                      	push	es
 33153                                  
 33154 00002D2A 0E                      	push	cs
 33155 00002D2B 07                      	pop	es
 33156                                  
 33157 00002D2C 31DB                    	xor	bx,bx
 33158 00002D2E 8A1E[7534]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 33159 00002D32 80FB00                  	cmp	bl,DEV_5INCH ; 0
 33160 00002D35 7506                    	jne	short got_80
 33161                                  
 33162 00002D37 C706[7834]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33163                                  							; 48 tpi=40 cyl
 33164                                  got_80:
 33165 00002D3D D1E3                    	shl	bx,1			; get index into bpb table
 33166 00002D3F 8BB7[1C36]              	mov	si,[bpbtable+bx]	; get address of bpb
 33167                                  
 33168                                  	;mov	di,deviceparameters+7	
 33169                                  	; 02/11/2022
 33170 00002D43 BF[7B34]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 33171 00002D46 B91F00                  	mov	cx,A_BPB.size ; 31
 33172 00002D49 FC                      	cld
 33173                                  	;repe	movsb
 33174                                  	; 02/11/2022
 33175 00002D4A F3A4                    	rep	movsb
 33176                                  
 33177 00002D4C 07                      	pop	es
 33178                                  
 33179                                  	; 12/12/2022
 33180 00002D4D F606[9D35]20            	test	byte [switches],flagseclim ; 20h
 33181                                  	;test	word [switches],flagseclim ; 20h
 33182 00002D52 7406                    	jz	short see_heads
 33183                                  
 33184 00002D54 A1[9A35]                	mov	ax,[slim]
 33185                                  	;mov	[deviceparameters+20],ax
 33186 00002D57 A3[8834]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 33187                                  
 33188                                  see_heads:
 33189                                  	; 12/12/2022
 33190 00002D5A F606[9D35]40            	test	byte [switches],flagheads ; 40h
 33191                                  	;test	word [switches],flagheads ; 40h
 33192 00002D5F 7406                    	jz	short heads_not_altered
 33193                                  
 33194 00002D61 A1[9835]                	mov	ax,[hlim]
 33195                                  	;mov	[deviceparameters+22],ax	
 33196 00002D64 A3[8A34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 33197                                  
 33198                                  heads_not_altered:
 33199                                  
 33200                                  ; set up correct media descriptor byte and sectors/cluster
 33201                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 33202                                  
 33203                                  	;mov	byte [deviceparameters+9],2
 33204                                  	; 02/11/2022
 33205                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 33206                                  	; 04/01/2023
 33207 00002D67 B80200                  	mov	ax,2	
 33208 00002D6A A2[7D34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 33209                                  
 33210 00002D6D B3F0                    	mov	bl,0F0h			; get default mediabyte
 33211                                  
 33212                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 33213                                  
 33214                                  	;mov	bh,[deviceparameters+17]
 33215                                  	; 02/11/2022
 33216 00002D6F 8A3E[8534]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 33217                                  
 33218                                  	; 04/01/2023
 33219                                  	; ax = 2
 33220 00002D73 3906[8A34]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 33221                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 33222 00002D77 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 33223                                  
 33224 00002D79 7524                    	jne	short only_one_head	; one head, do one head stuff
 33225                                  
 33226                                  ;	two head drives will use the mediadescriptor from the bpb
 33227                                  
 33228 00002D7B 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 33229                                  
 33230                                  ;	two sided drives have two special cases to look for. One is
 33231                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 33232                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 33233                                  ;	   one sector/cluster.
 33234                                  
 33235                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 33236                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 33237                                  ;	   type of 2 headed drive is all set.
 33238                                  
 33239 00002D7D 833E[8834]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 33240 00002D82 7509                    	jne	short not_144m
 33241 00002D84 833E[7834]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33242 00002D89 7502                    	jne	short not_144m
 33243                                  
 33244                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 33245                                  
 33246 00002D8B EB24                    	jmp	short got_one_secperclus_drive
 33247                                  
 33248                                  ;	check for 320K
 33249                                  
 33250                                  not_144m:
 33251 00002D8D 833E[7834]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33252 00002D92 7521                    	jne	short got_correct_mediad
 33253 00002D94 833E[8834]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33254 00002D99 751A                    	jne	short got_correct_mediad
 33255                                  
 33256 00002D9B B3FC                    	mov	bl,0FCh
 33257 00002D9D EB16                    	jmp	short got_correct_mediad
 33258                                  
 33259                                  only_one_head:
 33260                                  
 33261                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 33262                                  
 33263 00002D9F 803E[7534]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 33264 00002DA4 740B                    	je	short got_one_secperclus_drive
 33265                                  
 33266                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 33267                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 33268                                  ;	  besides 8 will be considered 0fch
 33269                                  
 33270 00002DA6 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 33271 00002DA8 833E[8834]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33272                                  	; 12/12/2022
 33273 00002DAD 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 33274                                  
 33275 00002DAF B3FE                    	mov	bl,0FEh			; 160K mediaid
 33276                                  
 33277                                  ;	we've either got a one sided drive, or a 1.44M drive
 33278                                  ;	  either case we'll use 1 sector per cluster instead of 2
 33279                                  
 33280                                  got_one_secperclus_drive:
 33281                                  	; 04/01/2023
 33282                                  	; ax = 2
 33283 00002DB1 48                      	dec	ax  ; ax = 1
 33284 00002DB2 A2[7D34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 33285                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 33286                                  
 33287                                  got_correct_mediad:
 33288 00002DB5 881E[8534]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 33289                                  
 33290                                  ;	 Calculate the correct number of Total Sectors on medium
 33291                                  
 33292 00002DB9 A1[7834]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 33293 00002DBC F726[8A34]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 33294 00002DC0 F726[8834]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33295 00002DC4 A3[8334]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 33296 00002DC7 F8                      	clc				; we currently return no errors
 33297                                  
 33298 00002DC8 C3                      	retn
 33299                                  
 33300                                  ;	M047 -- end rewritten routine
 33301                                  
 33302                                  ;----------------------------------------------------------------------------
 33303                                  ;
 33304                                  ; procedure : organize
 33305                                  ;
 33306                                  ;----------------------------------------------------------------------------
 33307                                  
 33308                                  ; 09/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 33309                                  %if 1
 33310                                  end_commd_line:
 33311 00002DC9 AA                      	stosb				; store line feed char in buffer for the linecount.
 33312                                  	;mov	byte [cs:com_level],0	; reset the command level.
 33313                                  	; 03/01/2023
 33314                                  	; ds = cs
 33315                                  	;mov	byte [com_level],0
 33316                                  	;jmp	short org1
 33317                                  	; 09/09/2023
 33318 00002DCA EB11                    	jmp	short org0
 33319                                  nochar1:
 33320 00002DCC F9                      	stc
 33321 00002DCD C3                      	retn
 33322                                  %endif
 33323                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33324                                  	; (SYSINIT:3234h)
 33325                                  
 33326                                  organize:
 33327                                  	; 04/01/2023
 33328                                  	; ds = cs
 33329 00002DCE 8B0E[D203]              	mov	cx,[count]
 33330                                  	;mov	cx,[cs:count]
 33331 00002DD2 E3F8                    	jcxz	nochar1
 33332                                  
 33333                                  ;ifndef	MULTI_CONFIG
 33334                                  ;
 33335                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 33336                                  ;;   because we the case of values in SET commands preserved
 33337                                  ;
 33338                                  ;	call	mapcase
 33339                                  ;endif
 33340                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33341 00002DD4 E82502                  	call	mapcase
 33342                                  
 33343 00002DD7 31F6                    	xor	si,si
 33344 00002DD9 89F7                    	mov	di,si
 33345 00002DDB 31C0                    	xor	ax,ax
 33346                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 33347                                  	;;mov	byte [cs:com_level],0
 33348                                  	; 12/12/2022
 33349                                  	;mov	[cs:com_level],al ; 0
 33350                                  	; 04/01/2023
 33351                                  	; ds = cs
 33352                                  	; 09/09/2023
 33353                                  	;mov	[com_level],al ; 0
 33354                                  org0:
 33355 00002DDD C606[CC03]00            	mov	byte [com_level],0 ; 09/09/2023
 33356                                  org1:
 33357 00002DE2 E8A501                  	call	skip_comment
 33358 00002DE5 74E2                    	jz	short end_commd_line	; found a comment string and skipped.
 33359 00002DE7 E88A01                  	call	get2			; not a comment string. then get a char.
 33360 00002DEA 3C0A                    	cmp	al,lf ; 0Ah
 33361 00002DEC 74DB                    	je	short end_commd_line	; starts with a blank line.
 33362 00002DEE 3C20                    	cmp	al,' ' ; 20h
 33363 00002DF0 76F0                    	jbe	short org1		; skip leading control characters
 33364                                  	; 09/09/2023
 33365                                  	;jmp	short findit
 33366                                  
 33367                                  ; 09/09/2023
 33368                                  %if 0
 33369                                  end_commd_line:
 33370                                  	stosb				; store line feed char in buffer for the linecount.
 33371                                  	;mov	byte [cs:com_level],0	; reset the command level.
 33372                                  	; 03/01/2023
 33373                                  	; ds = cs
 33374                                  	mov	byte [com_level],0
 33375                                  	jmp	short org1
 33376                                  
 33377                                  nochar1:
 33378                                  	stc
 33379                                  	retn
 33380                                  %endif
 33381                                  
 33382                                  findit:
 33383 00002DF2 51                      	push	cx
 33384 00002DF3 56                      	push	si
 33385 00002DF4 57                      	push	di
 33386 00002DF5 89F5                    	mov	bp,si
 33387 00002DF7 4D                      	dec	bp
 33388 00002DF8 BE[E333]                        mov     si,comtab		; prepare to search command table
 33389 00002DFB B500                    	mov	ch,0
 33390                                  findcom:
 33391 00002DFD 89EF                    	mov	di,bp
 33392 00002DFF 8A0C                    	mov	cl,[si]
 33393 00002E01 46                      	inc	si
 33394 00002E02 E324                    	jcxz	nocom
 33395                                  
 33396                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33397                                  
 33398                                  ;ifdef	MULTI_CONFIG
 33399                                  ;
 33400                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 33401                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 33402                                  ;;   anything in particular)
 33403                                  ;
 33404                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 33405                                  ;       je	short semicolon
 33406                                  ;loopcom:
 33407                                  ;       mov     al,[es:di]
 33408                                  ;       inc     di
 33409                                  ;       and     al,~20h ; 0DFh		; force upper case
 33410                                  ;       inc     si                      ; compare to byte @es:di
 33411                                  ;       cmp     al,[si-1]
 33412                                  ;       loope   loopcom
 33413                                  ;;else
 33414                                  ;;	repe	cmpsb
 33415                                  ;endif
 33416                                  	; 02/11/2022
 33417 00002E04 F3A6                    	repe	cmpsb
 33418                                  
 33419 00002E06 9F                      	lahf
 33420 00002E07 01CE                            add     si,cx                   ; bump to next position without affecting flags
 33421 00002E09 9E                      	sahf
 33422 00002E0A AC                              lodsb                           ; get indicator letter
 33423 00002E0B 75F0                    	jnz	short findcom
 33424 00002E0D 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 33425 00002E11 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 33426 00002E13 26803D0A                	cmp	byte [es:di],lf
 33427 00002E17 740A                    	je	short gotcom0
 33428                                  
 33429                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33430                                  ;
 33431                                  ;;ifdef	MULTI_CONFIG
 33432                                  ;
 33433                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 33434                                  ;
 33435                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 33436                                  ;       je	short gotcom0
 33437                                  ;;endif
 33438                                  ;	push	ax
 33439                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 33440                                  ;
 33441                                  ;;ifdef	MULTI_CONFIG
 33442                                  ;
 33443                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 33444                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 33445                                  ;;   stored in the CONFIG.SYS memory image.
 33446                                  ;
 33447                                  ;       cmp     al,'?'                  ; explicit interactive command?
 33448                                  ;       jne	short no_query		; no
 33449                                  ;       pop     ax                      ; yes, so retrieve the original code
 33450                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 33451                                  ;       jmp     short gotcom0           ;
 33452                                  ;semicolon:
 33453                                  ;       mov     al,CONFIG_REM
 33454                                  ;       jmp     short gotcom0
 33455                                  ;no_query:
 33456                                  ;;endif  ;MULTI_CONFIG
 33457                                  
 33458                                  	; 02/11/2022
 33459 00002E19 50                      	push	ax
 33460 00002E1A 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 33461                                  
 33462 00002E1D E8A001                  	call	delim
 33463                                  no_delim:
 33464 00002E20 58                      	pop	ax
 33465 00002E21 75DA                    	jnz	short findcom
 33466                                  gotcom0:
 33467 00002E23 5F                      	pop	di
 33468 00002E24 5E                      	pop	si
 33469 00002E25 59                      	pop	cx
 33470 00002E26 EB0F                    	jmp	short gotcom
 33471                                  nocom:
 33472 00002E28 5F                      	pop	di
 33473 00002E29 5E                      	pop	si
 33474 00002E2A 59                      	pop	cx
 33475 00002E2B B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 33476 00002E2D AA                      	stosb				; save indicator char.
 33477                                  _skipline:
 33478 00002E2E E84301                  	call	get2
 33479 00002E31 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 33480 00002E33 75F9                            jne     short _skipline
 33481 00002E35 EB92                    	jmp	short end_commd_line	; handle next command line
 33482                                  gotcom:
 33483 00002E37 AA                              stosb                           ; save indicator char in buffer
 33484                                  
 33485                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33486                                  ;;ifdef	MULTI_CONFIG
 33487                                  ;
 33488                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 33489                                  ;;   it screws up the direct comparisons below.
 33490                                  ;
 33491                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33492                                  ;;endif
 33493                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 33494                                  ;
 33495                                  ;;ifdef	MULTI_CONFIG
 33496                                  ;
 33497                                  ;;   There is no whitespace/delimiter between the "begin block" character
 33498                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 33499                                  ;;   skipping code
 33500                                  ;
 33501                                  ;       cmp     al,CONFIG_BEGIN
 33502                                  ;       je	short org31
 33503                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 33504                                  ;       je      short no_mapcase
 33505                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 33506                                  ;       je      short no_mapcase
 33507                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 33508                                  ;       je      short no_mapcase
 33509                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 33510                                  ;       je      short no_mapcase
 33511                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 33512                                  ;no_mapcase:
 33513                                  ;;endif
 33514                                  
 33515                                  	; 02/11/2022
 33516                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 33517                                  	; 04/01/2023
 33518                                  	; ds = cs
 33519 00002E38 A2[D003]                	mov	[cmd_indicator],al
 33520                                  org2:	
 33521 00002E3B E83601                  	call    get2                    ; skip the command name until delimiter
 33522 00002E3E 3C0A                            cmp     al,lf
 33523 00002E40 740B                    	je	short org21
 33524 00002E42 3C0D                    	cmp	al,cr
 33525 00002E44 7407                    	je	short org21
 33526                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33527                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 33528                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 33529                                  
 33530 00002E46 E87701                  	call	delim
 33531 00002E49 75F0                            jnz	short org2
 33532 00002E4B EB02                    	jmp	short org3
 33533                                  org21:					;if cr or lf then
 33534 00002E4D 4E                      	dec	si			; undo si, cx register
 33535 00002E4E 41                      	inc	cx			;  and continue
 33536                                  org3:	
 33537                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 33538                                  	;je	short get_cmt_token
 33539                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33540                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33541                                  	;;je	short org_file
 33542                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 33543                                  	;je	short org_file
 33544                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33545                                          ;;je	short org_file
 33546                                  	;; 02/11/2022
 33547                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33548                                  	;je	short org_file
 33549                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 33550                                  	;je	short org_file
 33551                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 33552                                  	;je	short org_switch
 33553                                  
 33554                                  	; 04/01/2023
 33555                                  	; ds = cs
 33556                                  
 33557 00002E4F 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 33558 00002E54 7456                    	je	short get_cmt_token
 33559                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33560                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33561                                  	;je	short org_file
 33562 00002E56 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 33563 00002E5B 7429                    	je	short org_file
 33564                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33565                                          ;je	short org_file
 33566                                  	; 02/11/2022
 33567 00002E5D 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33568 00002E62 7422                    	je	short org_file
 33569 00002E64 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 33570 00002E69 741B                    	je	short org_file
 33571 00002E6B 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 33572 00002E70 7403                    	je	short org_switch
 33573                                  	
 33574                                  org31:
 33575 00002E72 E99500                  	jmp	org4
 33576                                  
 33577                                  org_switch:
 33578 00002E75 E81201                  	call	skip_comment
 33579 00002E78 7472                    	jz	short end_commd_line_brdg
 33580                                  
 33581 00002E7A E8F700                  	call	get2
 33582 00002E7D E84801                  	call	org_delim
 33583 00002E80 74F3                    	jz	short org_switch
 33584                                  
 33585 00002E82 AA                      	stosb
 33586 00002E83 E99300                  	jmp	org5
 33587                                  
 33588                                  org_file:			; get the filename and put 0 at end
 33589 00002E86 E80101                  	call	skip_comment
 33590 00002E89 7464                    	jz	short org_put_zero
 33591                                  
 33592 00002E8B E8E600                  	call	get2		; not a comment
 33593 00002E8E E82F01                  	call	delim
 33594 00002E91 74F3                    	jz	short org_file	; skip the possible delimiters
 33595                                  
 33596 00002E93 AA                      	stosb			; copy the first non delim char found in buffer
 33597                                  
 33598                                  org_copy_file:
 33599 00002E94 E8F300                  	call	skip_comment	; comment char in the filename?
 33600 00002E97 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 33601                                  
 33602 00002E99 E8D800                  	call	get2
 33603 00002E9C 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 33604 00002E9E 7457                    	je	short end_file_slash ; this will be the special case.
 33605                                  
 33606 00002EA0 AA                      	stosb			; save the char. in buffer
 33607 00002EA1 E81C01                  	call	delim
 33608 00002EA4 7459                    	jz	short end_copy_file
 33609                                  
 33610 00002EA6 3C20                    	cmp	al, ' '
 33611 00002EA8 77EA                    	ja	short org_copy_file ; keep copying
 33612 00002EAA EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 33613                                  
 33614                                  get_cmt_token:			; get the token. just max. 2 char.
 33615 00002EAC E8C500                  	call	get2
 33616 00002EAF 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 33617 00002EB1 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 33618 00002EB3 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 33619 00002EB5 74F5                    	je	short get_cmt_token ;  character.)
 33620 00002EB7 3C3D                    	cmp	al,'='		; = is special in this case.
 33621 00002EB9 74F1                    	je	short get_cmt_token
 33622 00002EBB 3C0D                    	cmp	al,cr
 33623 00002EBD 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 33624 00002EBF 3C0A                    	cmp	al,lf
 33625 00002EC1 7422                    	je	short get_cmt_end
 33626                                  
 33627                                  	; 04/01/2023
 33628                                  	; ds = cs
 33629                                  	;mov	[cs:cmmt1],al	; store it
 33630                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 33631 00002EC3 A2[CE03]                	mov	[cmmt1],al	; store it
 33632 00002EC6 C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 33633 00002ECB E8A600                  	call	get2
 33634 00002ECE 3C20                    	cmp	al,' ' ; 20h
 33635 00002ED0 7413                    	je	short get_cmt_end
 33636 00002ED2 3C09                    	cmp	al,tab ; 9
 33637 00002ED4 740F                    	je	short get_cmt_end
 33638 00002ED6 3C0D                    	cmp	al,cr  ; 0Dh
 33639 00002ED8 740B                    	je	short get_cmt_end
 33640 00002EDA 3C0A                    	cmp	al,lf  ; 0Ah
 33641 00002EDC 740E                    	je	short end_commd_line_brdg
 33642                                  
 33643                                  	;mov	[cs:cmmt2],al
 33644                                  	;inc	byte [cs:cmmt]
 33645                                  	; 04/01/2023
 33646 00002EDE A2[CF03]                	mov	[cmmt2],al
 33647 00002EE1 FE06[CD03]              	inc	byte [cmmt]
 33648                                  
 33649                                  get_cmt_end:
 33650 00002EE5 E88C00                  	call	get2
 33651 00002EE8 3C0A                    	cmp	al,lf
 33652 00002EEA 75F9                    	jne	short get_cmt_end	; skip it.
 33653                                  end_commd_line_brdg: 
 33654 00002EEC E9DAFE                  	jmp	end_commd_line		; else jmp to end_commd_line
 33655                                  
 33656                                  org_put_zero:				; make the filename in front of
 33657 00002EEF 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 33658 00002EF3 47                      	inc	di
 33659 00002EF4 E9D2FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 33660                                  
 33661                                  end_file_slash: 			; al = "/" option char.
 33662 00002EF7 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 33663 00002EFB 47                      	inc	di			; and
 33664 00002EFC AA                      	stosb				; store "/" after that.
 33665 00002EFD EB1A                    	jmp	short org5		; continue with the rest of the line
 33666                                  
 33667                                  end_copy_file:
 33668 00002EFF 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 33669 00002F04 3C0A                    	cmp	al,lf
 33670 00002F06 74E4                    	je	short end_commd_line_brdg
 33671 00002F08 EB0F                    	jmp	short org5
 33672                                  
 33673                                  org4:					; org4 skips all delimiters after the command name except for '/'
 33674 00002F0A E87D00                  	call	skip_comment
 33675 00002F0D 74DD                    	jz	short end_commd_line_brdg
 33676                                  
 33677 00002F0F E86200                  	call	get2
 33678 00002F12 E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 33679 00002F15 74F3                    	jz	short org4
 33680 00002F17 EB08                    	jmp	short org51
 33681                                  
 33682                                  org5:					; rest of the line
 33683 00002F19 E86E00                  	call	skip_comment		; comment?
 33684 00002F1C 74CE                    	jz	short end_commd_line_brdg
 33685 00002F1E E85300                  	call	get2			; not a comment.
 33686                                  
 33687                                  org51:
 33688 00002F21 AA                      	stosb				; copy the character
 33689 00002F22 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 33690 00002F24 743A                    	je	short at_quote
 33691 00002F26 3C20                    	cmp	al,' '  ; 20h
 33692 00002F28 77EF                    	ja	short org5
 33693                                  					; M051 - Start
 33694                                  	; 04/01/2023
 33695                                  	; ds = cs
 33696 00002F2A 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 33697                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 33698 00002F2F 7514                    	jne	short not_dh		; N: 
 33699 00002F31 3C0A                    	cmp	al,lf			; Q: is this line feed
 33700 00002F33 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 33701 00002F35 3C0D                    	cmp	al,cr			; Q: is this a cr
 33702 00002F37 75E0                    	jne	short org5		; N: 
 33703 00002F39 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 33704 00002F3E AA                      	stosb				; put cr after blank
 33705 00002F3F FE06[122C]              	inc	byte [insert_blank]
 33706                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 33707                                  					; inserted
 33708 00002F43 EBD4                    	jmp	short org5
 33709                                  not_dh:					; M051 - End
 33710                                  
 33711 00002F45 3C0A                    	cmp	al,lf			; line feed?
 33712 00002F47 740F                    	je	short org1_brdg		; handles the next command line.
 33713 00002F49 EBCE                    	jmp	short org5		; handles next char in this line.
 33714                                  
 33715                                  org_dhlf:				; M051 - Start
 33716                                  	; 04/01/2023
 33717                                  	; ds = cs
 33718 00002F4B 803E[122C]01            	cmp	byte [insert_blank],1
 33719                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 33720 00002F50 7406                    	je	short org1_brdg		; Y:
 33721 00002F52 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 33722 00002F57 AA                      	stosb				; put lf after blank
 33723                                  					; M051 - End
 33724                                  org1_brdg:
 33725 00002F58 C606[122C]00            	mov	byte [insert_blank],0 
 33726                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 33727                                  					; M051: devicehigh
 33728 00002F5D E982FE                  	jmp	org1
 33729                                  
 33730                                  at_quote:
 33731 00002F60 803E[CC03]00            	cmp	byte [com_level],0
 33732                                  	;cmp	byte [cs:com_level],0
 33733 00002F65 7407                    	je	short up_level
 33734                                  	;mov	byte [cs:com_level],0	; reset it.
 33735 00002F67 C606[CC03]00            	mov	byte [com_level],0
 33736 00002F6C EBAB                    	jmp	short org5
 33737                                  
 33738                                  up_level:
 33739                                  	;inc	byte [cs:com_level]	; set it.
 33740 00002F6E FE06[CC03]              	inc	byte [com_level]
 33741 00002F72 EBA5                    	jmp	short org5
 33742                                  
 33743                                  ;----------------------------------------------------------------------------
 33744                                  ;
 33745                                  ; procedure : get2
 33746                                  ;
 33747                                  ;----------------------------------------------------------------------------
 33748                                  
 33749                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33750                                  	; (SYSINIT:33FAh)
 33751                                  	; 04/01/2023
 33752                                  get2:
 33753 00002F74 E304                    	jcxz	noget
 33754                                  	;
 33755                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33756                                  	;;lods	byte ptr es:[si]
 33757                                  	; 12/12/2022
 33758 00002F76 26                      	es	
 33759 00002F77 AC                      	lodsb
 33760                                  	;mov	al, [es:si]
 33761                                  	;inc	si
 33762                                  	;
 33763 00002F78 49                      	dec	cx
 33764 00002F79 C3                      	retn
 33765                                  noget:
 33766 00002F7A 59                      	pop	cx
 33767                                  	; 04/01/2023
 33768                                  	; ds = cs
 33769                                  	;mov	[cs:count],di ; 13/05/2019
 33770                                  	;mov	[cs:org_count],di
 33771 00002F7B 893E[D203]              	mov	[count],di
 33772 00002F7F 893E[D403]              	mov	[org_count],di
 33773 00002F83 31F6                    	xor	si,si
 33774                                  	;mov	[cs:chrptr],si
 33775 00002F85 8936[D603]              	mov	[chrptr],si
 33776                                  
 33777                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33778                                  ;;ifndef MULTI_CONFIG
 33779                                  ;;	retn
 33780                                  ;;else
 33781                                  ;
 33782                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 33783                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 33784                                  ;;   and the new boot menu stuff...
 33785                                  ;
 33786                                  ;	mov     cx,di
 33787                                  ;	jmp     menu_check
 33788                                  ;;endif
 33789                                  
 33790                                  	; 02/11/2022
 33791 00002F89 C3                      	retn
 33792                                  
 33793                                  ;----------------------------------------------------------------------------
 33794                                  ;
 33795                                  ; procedure : skip_comment
 33796                                  ;
 33797                                  ;skip the commented string until lf, if current es:si-> a comment string.
 33798                                  ;in) es:si-> string
 33799                                  ;	 cx -> length.
 33800                                  ;out) zero flag not set if not found a comment string.
 33801                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 33802                                  ;	  the line feed character at this moment when return.
 33803                                  ;	  ax register destroyed.
 33804                                  ;	  if found, si, cx register adjusted accordingly.
 33805                                  ;
 33806                                  ;----------------------------------------------------------------------------
 33807                                  
 33808                                  	; 04/01/2023 - Retro DOS v4.0
 33809                                  
 33810                                  skip_comment:
 33811 00002F8A E3EE                    	jcxz	noget		; get out of the organize routine.
 33812                                  
 33813                                  	; 04/01/2023
 33814                                  	; ds = cs	
 33815                                  
 33816 00002F8C 803E[CC03]00            	cmp	byte [com_level],0
 33817                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33818 00002F91 752C                    	jne	short no_commt	 ; (not inside quotations)
 33819                                  
 33820 00002F93 803E[CD03]01            	cmp	byte [cmmt],1
 33821                                  	;cmp	byte [cs:cmmt],1
 33822 00002F98 7225                    	jb	short no_commt
 33823                                  
 33824 00002F9A 268A04                  	mov	al,[es:si]
 33825                                  	
 33826 00002F9D 3806[CE03]              	cmp	[cmmt1],al
 33827                                  	;cmp	[cs:cmmt1],al
 33828 00002FA1 751C                    	jne	short no_commt
 33829                                  
 33830 00002FA3 803E[CD03]02            	cmp	byte [cmmt],2
 33831                                  	;cmp	byte [cs:cmmt],2
 33832 00002FA8 750A                    	jne	short skip_cmmt
 33833                                  
 33834 00002FAA 268A4401                	mov	al,[es:si+1]
 33835                                  	
 33836 00002FAE 3806[CF03]              	cmp	[cmmt2],al
 33837                                  	;cmp	[cs:cmmt2],al
 33838 00002FB2 750B                    	jne	short no_commt
 33839                                  skip_cmmt:
 33840 00002FB4 E3C4                    	jcxz	noget		; get out of organize routine.
 33841 00002FB6 268A04                  	mov	al,[es:si]
 33842 00002FB9 46                      	inc	si
 33843 00002FBA 49                      	dec	cx
 33844 00002FBB 3C0A                    	cmp	al,lf		; line feed?
 33845 00002FBD 75F5                    	jne	short skip_cmmt
 33846                                  no_commt:
 33847 00002FBF C3                      	retn
 33848                                  
 33849                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33850                                  %if 0
 33851                                  
 33852                                  ;ifdef	MULTI_CONFIG
 33853                                  
 33854                                  ;----------------------------------------------------------------------------
 33855                                  ;
 33856                                  ;   kbd_read: wait for keystroke
 33857                                  ;
 33858                                  ;   INPUT
 33859                                  ;       DS == CS == sysinitseg
 33860                                  ;
 33861                                  ;   OUTPUT
 33862                                  ;       Carry SET to clean boot, CLEAR otherwise
 33863                                  ;
 33864                                  ;   OTHER REGS USED
 33865                                  ;       All
 33866                                  ;
 33867                                  ;   HISTORY
 33868                                  ;       Created 16-Nov-1992 by JeffPar
 33869                                  ;
 33870                                  ;----------------------------------------------------------------------------
 33871                                  
 33872                                  kbd_read:
 33873                                          test    byte [bDisableUI],2
 33874                                          jnz     short kbd_nodelay
 33875                                  
 33876                                          push    ds              ; the bios timer tick count is incremented
 33877                                          sub     ax,ax           ; 18.2 times per second;
 33878                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33879                                  	;mov	dx,[046Ch]	; get initial value
 33880                                  kbd_loop:
 33881                                          mov     ah,1            ;
 33882                                          int     16h             ; peek the keyboard
 33883                                          jnz	short kbd_loopdone ; something's there, get out
 33884                                          mov     ah,2            ; peek the shift states
 33885                                          int     16h             ;
 33886                                          test    al,03h          ; either right or left shift key bits set?
 33887                                          jnz	short kbd_loopdone ; yes
 33888                                          mov     ax,[046Ch]	;
 33889                                  	;sub	ax,dx           ; get difference
 33890                                  	; 15/04/2019 - Retro DOS v4.0
 33891                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33892                                  
 33893                                  	cmp     al,37           ; reached limit?
 33894                                          jb	short kbd_loop	; not yet
 33895                                  kbd_loopdone:
 33896                                          pop     ds              ; delay complete!
 33897                                  kbd_nodelay:
 33898                                          sub     bx,bx           ; assume clean boot
 33899                                          mov     ah,2            ; peek the shift states
 33900                                          int     16h             ;
 33901                                          test    al,03h          ; either right or left shift key bits set?
 33902                                          jz      short kbd_notshift ; no
 33903                                          inc     bx              ; yes
 33904                                          inc     bx
 33905                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33906                                  	or	byte [bQueryOpt],4
 33907                                  kbd_notshift:                   ;
 33908                                          mov     ah,1            ; peek the keyboard
 33909                                          int     16h             ;
 33910                                          jz	short kbd_test	; no key present
 33911                                          or      al,al           ; is it a function key?
 33912                                          jnz	short kbd_test	; no
 33913                                  
 33914                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33915                                          cmp     ah,62h          ; CTRL F5
 33916                                          je	short kbd_cfg_bypass
 33917                                  	
 33918                                          cmp     ah,3Fh          ; F5 function key?
 33919                                          jne	short kbd_notf5	; no
 33920                                  kbd_cfg_bypass:
 33921                                          mov     dx,_$CleanMsg
 33922                                          call    print
 33923                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33924                                  	or	byte [bQueryOpt],4           ;
 33925                                          jmp     short kbd_eat   ; yes, clean boot selected
 33926                                  kbd_notf5:
 33927                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33928                                          cmp     ah,65h          ; CTRL F8
 33929                                          je	short kbd_cfg_confirm
 33930                                  
 33931                                          cmp     ah,42h          ; F8 function key?
 33932                                          jne	short kbd_exit	; no
 33933                                  kbd_cfg_confirm:
 33934                                          mov     dx,_$InterMsg
 33935                                          call    print           ;
 33936                                          mov     bl,1            ; yes, interactive-boot option enabled
 33937                                          mov     [bQueryOpt],bl  ; change default setting
 33938                                  kbd_eat:                        ;
 33939                                          mov     ah,0            ;
 33940                                          int     16h             ; eat the key we assumed was a signal
 33941                                          mov	byte [secElapsed],-1
 33942                                          or      bx,bx           ;
 33943                                          jz	short kbd_clean	;
 33944                                  kbd_test:                       ;
 33945                                          cmp     bl,2            ;
 33946                                          jb	short kbd_exit	;
 33947                                  kbd_clean:                      ;
 33948                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33949                                          stc                     ; set carry to indicate abort
 33950                                          retn			;
 33951                                  kbd_exit:                       ;
 33952                                          clc                     ; clear carry to indicate success
 33953                                          retn			;
 33954                                  
 33955                                  ;----------------------------------------------------------------------------
 33956                                  ;
 33957                                  ;   set_numlock: set numlock LED
 33958                                  ;
 33959                                  ;   INPUT
 33960                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33961                                  ;
 33962                                  ;   OUTPUT
 33963                                  ;       None
 33964                                  ;
 33965                                  ;   OTHER REGS USED
 33966                                  ;       None
 33967                                  ;
 33968                                  ;   HISTORY
 33969                                  ;       Created 16-Nov-1992 by JeffPar
 33970                                  ;
 33971                                  ;----------------------------------------------------------------------------
 33972                                  
 33973                                  set_numlock:
 33974                                          push    ax
 33975                                          push    ds
 33976                                          sub     ax,ax
 33977                                          mov     ds,ax
 33978                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33979                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33980                                          jne	short not_off	; no
 33981                                          and     byte [0417h],~20h ; 0DFh
 33982                                          jmp     short set_done
 33983                                  not_off:
 33984                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33985                                          stc
 33986                                          jne	short set_done	; no
 33987                                          or      byte [0417h],20h
 33988                                  set_done:
 33989                                          pop     ds
 33990                                          pop     ax
 33991                                          retn
 33992                                  
 33993                                  ; 16/04/2019 - Retro DOS v4.0
 33994                                  
 33995                                  ;----------------------------------------------------------------------------
 33996                                  ;
 33997                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33998                                  ;
 33999                                  ;   INPUT
 34000                                  ;       CX == "organized" config.sys memory image length
 34001                                  ;    ES:SI -> "organized" config.sys memory image
 34002                                  ;       DS == CS == sysinitseg
 34003                                  ;
 34004                                  ;   OUTPUT
 34005                                  ;       Same as above;  the idea is that menu_check simply transforms
 34006                                  ;       a block-structured config.sys image into a conventional image,
 34007                                  ;       based on the user's block selection and any other boot-time options
 34008                                  ;       the user may have employed...
 34009                                  ;
 34010                                  ;   OTHER REGS USED
 34011                                  ;       All
 34012                                  ;
 34013                                  ;   NOTES
 34014                                  ;       [count] and [org_count] are set to the new config.sys image length
 34015                                  ;
 34016                                  ;   HISTORY
 34017                                  ;       Created 16-Mar-1992 by JeffPar
 34018                                  ;
 34019                                  ;----------------------------------------------------------------------------
 34020                                  
 34021                                  menu_check:
 34022                                  
 34023                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 34024                                  ;   disable clean/interactive boot options
 34025                                  
 34026                                          push    cx              ;
 34027                                          push    si              ;
 34028                                          sub     bx,bx           ; remains ZERO until first block
 34029                                  swchk_loop:                     ;
 34030                                          call    get_char        ; get first char of current line
 34031                                          jc	short swchk_end	; hit eof
 34032                                          cmp     al,CONFIG_BEGIN ;
 34033                                          jne	short swchk_next1 ;
 34034                                          inc     bx              ; remember that we've seen a block
 34035                                          jmp     short swchk_nextline
 34036                                  swchk_next1:                    ;
 34037                                          cmp     al,CONFIG_NUMLOCK
 34038                                          jne	short swchk_next2 ;
 34039                                          or      bx,bx           ; only do NUMLOCK commands that exist
 34040                                          jnz	short swchk_nextline ; before the first block
 34041                                          call    set_numlock     ; REM it out so we don't act on it later, too
 34042                                          mov     byte [es:si-1],CONFIG_REM
 34043                                          jmp     short swchk_nextline
 34044                                  swchk_next2:                    ;
 34045                                          cmp     al,CONFIG_SWITCHES
 34046                                          jne	short swchk_nextline ; this line ain't it
 34047                                  swchk_scan:                     ;
 34048                                          call    get_char        ; look for /N or /F
 34049                                  swchk_scan1:                    ;
 34050                                          cmp     al,LF           ; end of line?
 34051                                          je	short swchk_nextline ; yes
 34052                                          cmp     al,'/'          ; switch-char?
 34053                                          jne	short swchk_scan ; no
 34054                                          call    get_char        ;
 34055                                          and     al,~20h ; 0DFh	; convert to upper case
 34056                                          cmp     al,[swit_n+1]
 34057                                          jne	short swchk_scan2 ; no
 34058                                          or      byte [bDisableUI],1
 34059                                          jmp	short swchk_scan ; continue looking for switches of interest
 34060                                  swchk_scan2:                    ;
 34061                                          cmp     al,[swit_f+1]
 34062                                          jne	short swchk_scan1 ; no
 34063                                          or      byte [bDisableUI],2
 34064                                          jmp     short swchk_scan ; continue looking for switches of interest
 34065                                  swchk_nextline:                 ;
 34066                                          call    skip_opt_line   ;
 34067                                          jmp     short swchk_loop ;
 34068                                  swchk_end:                      ;
 34069                                          pop     si              ;
 34070                                          pop     cx              ;
 34071                                  
 34072                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 34073                                  ;   the DisableUI flag is still clear
 34074                                  
 34075                                          test    byte [bDisableUI],1
 34076                                          jnz	short menu_search
 34077                                  ;
 34078                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 34079                                  ;   there is anything at all in the keyboard buffer
 34080                                  ;
 34081                                          call    kbd_read
 34082                                          jnc	short menu_search
 34083                                          jmp	menu_abort
 34084                                  
 34085                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 34086                                  
 34087                                  menu_search:
 34088                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 34089                                          mov     di,szMenu	;
 34090                                          call    find_block      ; find the MENU block
 34091                                          jnc	short menu_found ;
 34092                                          mov     byte [szBoot],0
 34093                                          jmp	no_selection ; not found
 34094                                  
 34095                                  ;   Process the requested menu color(s)
 34096                                  
 34097                                  menu_color:
 34098                                          push    cx              ;
 34099                                          push    dx              ;
 34100                                          mov     dx,0007h        ; default color setting
 34101                                          call    get_number	; get first number
 34102                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 34103                                          mov     ch,bl           ; save it in CH
 34104                                          and     dl,0F0h         ;
 34105                                          or      dl,bl           ;
 34106                                          call    delim           ; did we hit a delimiter
 34107                                          jne	short check_color ; no, all done
 34108                                          call    get_number	; get next number
 34109                                          and     bl,0Fh		; second # is background color (for high nibble)
 34110                                          mov     dh,bl           ; save it in DH
 34111                                          and     dl,0Fh		;
 34112                                          mov     cl,4            ;
 34113                                          shl     bl,cl           ;
 34114                                          or      dl,bl           ;
 34115                                  check_color:                    ;
 34116                                          cmp     ch,dh           ; are foreground/background the same?
 34117                                          jne	short set_color	; no
 34118                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 34119                                  set_color:
 34120                                          mov     [bMenuColor],dl ;
 34121                                          pop     dx              ;
 34122                                          pop     cx              ;
 34123                                          jmp	menu_nextitem
 34124                                  
 34125                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 34126                                  ;   above is there simply to alleviate short jump problems)
 34127                                  
 34128                                  menu_found:
 34129                                          mov     byte [bDefBlock],1
 34130                                          mov     word [offDefBlock],0
 34131                                          mov     byte [secTimeOut],-1
 34132                                          and     byte [bQueryOpt],~2 ; 0FDh
 34133                                  
 34134                                          call    skip_opt_line   ; skip to next line
 34135                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 34136                                  
 34137                                  ;   Process the menu block now
 34138                                  
 34139                                  menu_process:
 34140                                          call    get_char        ; get first char of current line
 34141                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 34142                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34143                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 34144                                          je	short to_menu_getdefault
 34145                                          cmp     al,CONFIG_SUBMENU
 34146                                          je	short menu_item	; go process sub-menu
 34147                                          cmp     al,CONFIG_MENUITEM
 34148                                          je	short menu_item	; go process menu item
 34149                                          cmp     al,CONFIG_MENUDEFAULT
 34150                                          je	short menu_default ; go process menu default
 34151                                          cmp     al,CONFIG_MENUCOLOR
 34152                                          je	short menu_color ; go process menu color
 34153                                          cmp     al,CONFIG_NUMLOCK
 34154                                          je	short menu_numlock ;
 34155                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 34156                                          je	short menu_nextitem ;
 34157                                          call    any_delim       ; allow blank lines and such
 34158                                          je	short menu_nextitem ;
 34159                                          stc                     ;
 34160                                          call    print_error     ; non-MENU command!
 34161                                          jmp     short menu_nextitem
 34162                                  menu_numlock:
 34163                                          call    set_numlock
 34164                                          jmp     short menu_nextitem
 34165                                  to_menu_getdefault:
 34166                                          jmp     short menu_getdefault
 34167                                  
 34168                                  ;   Save the offset of the default block name, we'll need it later
 34169                                  
 34170                                  menu_default:
 34171                                          mov     [offDefBlock],si; save address of default block name
 34172                                          cmp     byte [secElapsed],0
 34173                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 34174                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 34175                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 34176                                          call    skip_delim      ; something is typed
 34177                                          jc	short menu_nextitem ;
 34178                                          mov     si,bx           ;
 34179                                          call    get_number      ; get number (of seconds for timeout)
 34180                                          cmp     bl,90           ; limit it to a reasonable number
 34181                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 34182                                          mov     bl,90           ;  display function can handle)
 34183                                  timeout_ok:                     ;
 34184                                          mov     [secTimeOut],bl ;
 34185                                  timeout_skip:
 34186                                          jmp     short menu_nextitem
 34187                                  
 34188                                  ;   Verify that this is a valid menu item by searching for the named block
 34189                                  
 34190                                  menu_item:
 34191                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 34192                                          jae	short menu_nextitem ;
 34193                                          mov     di,si           ; DS:DI -> block name to search for
 34194                                          call    srch_block      ;
 34195                                          je	short menu_itemfound ;
 34196                                          stc                     ;
 34197                                          call    print_error     ; print error and pause
 34198                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 34199                                  
 34200                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 34201                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 34202                                  ;   and CX are unmodified
 34203                                  
 34204                                  menu_itemfound:
 34205                                          inc     dx              ; otherwise, increment total block count
 34206                                          mov     bx,dx           ; and use it to index the arrays of offsets
 34207                                          mov	[abBlockType+bx],al
 34208                                          add     bx,bx           ; of recorded block names and descriptions
 34209                                  
 34210                                  ;   There should be a description immediately following the block name on
 34211                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 34212                                  ;   description...
 34213                                  
 34214                                          mov     [aoffBlockName+bx],si
 34215                                          mov     [aoffBlockDesc+bx],si
 34216                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 34217                                          call    skip_token      ;
 34218                                          jc	short menu_nextitem ; hit eol/eof
 34219                                          call    skip_delim      ;
 34220                                          jc	short menu_nextitem ; hit eol/eof
 34221                                          xchg    bx,di           ;
 34222                                          mov     [aoffBlockDesc+bx],di
 34223                                  
 34224                                  menu_nextitem:
 34225                                          call    skip_opt_line   ;
 34226                                          jmp     menu_process    ; go back for more lines
 34227                                  
 34228                                  ;   Display menu items now, after determining which one is default
 34229                                  
 34230                                  menu_getdefault:
 34231                                          or      dl,dl           ; where there any valid blocks at all?
 34232                                          jnz	short menu_valid ; yes
 34233                                          sub     bx,bx           ; no, so force autoselect of 0
 34234                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 34235                                  menu_valid:
 34236                                          sub     bx,bx           ;
 34237                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 34238                                          mov     di,[offDefBlock];
 34239                                          or      di,di           ; does a default block exist?
 34240                                          jz	short menu_nodefault ; no
 34241                                          inc     bx              ; yes, walk name table, looking for default
 34242                                  menu_chkdefault:
 34243                                          push    bx              ;
 34244                                          add     bx,bx           ;
 34245                                          mov     si,[aoffBlockName+bx]
 34246                                          mov     cx,128          ; arbitrary maximum length of a name
 34247                                          push    ds              ;
 34248                                          push    es              ;
 34249                                          pop     ds              ;
 34250                                          call    comp_names      ; is this block the same as the default?
 34251                                          pop     ds              ;
 34252                                          pop     bx              ;
 34253                                          je	short menu_setdefault ; yes
 34254                                          inc     bx              ;
 34255                                          cmp     bl,[bMaxBlock]  ; all done searching?
 34256                                          jbe	short menu_chkdefault ; not yet
 34257                                  menu_nodefault:
 34258                                          mov     bl,1            ; if no default, force default to #1
 34259                                  menu_setdefault:
 34260                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 34261                                  
 34262                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 34263                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 34264                                  ;   supposed to skip menu display and run with the specified default block;
 34265                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 34266                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 34267                                  ;   with no timeout)
 34268                                  
 34269                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 34270                                          jne	short menu_display ; no
 34271                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 34272                                          jnz	short menu_display ; yes, so *don't* assume default after all
 34273                                          jmp     not_topmenu	;
 34274                                  
 34275                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 34276                                  
 34277                                  menu_display:
 34278                                          mov     ah,0Fh          ; get current video mode
 34279                                          int     10h             ;
 34280                                          mov     ah,00h          ; just re-select that mode
 34281                                          int     10h             ;
 34282                                          push    es              ;
 34283                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 34284                                          mov     es,ax           ; and save the current (default) video page
 34285                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 34286                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 34287                                          mov     al,[es:0062h]   ;
 34288                                          mov     [bCRTPage],al   ;
 34289                                          mov     ax,[bMenuPage]	; select new page for menu
 34290                                          int     10h             ;
 34291                                          mov     ax,0600h        ; clear entire screen
 34292                                          mov     bh,[bMenuColor] ; using this color
 34293                                          sub     cx,cx           ; upper left row/col
 34294                                          ;mov	dl,[es:CRT_Cols] 
 34295                                          mov	dl,[es:4Ah]
 34296                                  	dec     dl              ;
 34297                                          ;mov	dh,[es:CRT_Rows];
 34298                                          mov	dh,[es:84h]
 34299                                  	or      dh,dh           ; # of rows valid?
 34300                                          jnz	short menu_clear ; hopefully
 34301                                          mov     dh,[bLastRow]   ; no, use a default
 34302                                  menu_clear:
 34303                                          int     10h             ; clear the screen using the req. attribute
 34304                                          pop     es              ;
 34305                                          mov     [bLastRow],dh   ; save DH
 34306                                          mov     dx,_$MenuHeader
 34307                                          call    print           ; cursor now on row 3 (numbered from 0)
 34308                                  
 34309                                          test    byte [bDisableUI],1
 34310                                          jnz     short menu_nostatus
 34311                                          mov     bh,[bMenuPage]  ;
 34312                                          mov     dh,[bLastRow]   ; restore DH
 34313                                          mov     dl,0            ; print the status line on row DH, col 0,
 34314                                          mov     ah,02h          ; now that we can trash the cursor position
 34315                                          int     10h             ;
 34316                                          mov     dx,_$StatusLine
 34317                                          call    print           ;
 34318                                          mov     ah,3            ; get cursor position
 34319                                          int     10h             ;
 34320                                          sub     dl,2            ;
 34321                                          mov     [bLastCol],dl   ; save column where status char will go
 34322                                  
 34323                                  menu_nostatus:
 34324                                          mov     bx,1            ; now prepare to display all the menu items
 34325                                  menu_disploop:
 34326                                          call    print_item	; print item #BL
 34327                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 34328                                          cmp     bl,[bMaxBlock]  ; all done?
 34329                                          jbe	short menu_disploop ; not yet
 34330                                  
 34331                                  ;   Set cursor position to just below the menu items
 34332                                  
 34333                                          mov     dl,0            ; select column
 34334                                          mov     dh,bl           ;
 34335                                          add     dh,4            ; select row below menu
 34336                                          mov     bh,[bMenuPage]  ;
 34337                                          mov     ah,02h          ; set cursor position beneath the block list
 34338                                          int     10h             ;
 34339                                  
 34340                                          mov     dx,_$MenuPrmpt
 34341                                          call    print           ;
 34342                                          call    select_item     ; make a selection, return # in BX
 34343                                          mov     dx,crlfm	
 34344                                          call    print           ;
 34345                                          push    word [bDisableUI]
 34346                                          or      byte [bDisableUI],1
 34347                                          call    show_status     ; clear the status line now
 34348                                          pop     word [bDisableUI]
 34349                                  
 34350                                  ;   Now begins the "re-organization" process...
 34351                                  
 34352                                  menu_autoselect:
 34353                                          cmp     bx,-1           ; clean boot requested?
 34354                                          jne	short normal_boot ; no
 34355                                          call    disable_autoexec; basically, add a /D to the command.com line
 34356                                  menu_abort:
 34357                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 34358                                          jmp	menu_exit	;
 34359                                  
 34360                                  normal_boot:
 34361                                          cmp     bx,-2           ; back to top-level menu?
 34362                                          jne	short not_topmenu ; no
 34363                                          mov     cx,[count]      ; yes, start all over
 34364                                          sub     si,si           ;
 34365                                          jmp     menu_search
 34366                                  
 34367                                  not_topmenu:
 34368                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 34369                                          jne	short not_submenu
 34370                                          add     bx,bx           ;
 34371                                          mov     di,[aoffBlockName+bx]
 34372                                          call    srch_block      ; THIS CANNOT FAIL!
 34373                                          mov     si,di           ;
 34374                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 34375                                          jmp     menu_found
 34376                                  
 34377                                  not_submenu:
 34378                                          add     bx,bx           ; get BX -> name of selected block
 34379                                          mov     bx,[aoffBlockName+bx]
 34380                                  
 34381                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 34382                                  ;   the offset relative to ES of the block name to be processed (along with
 34383                                  ;   all the "common" lines of course)
 34384                                  
 34385                                  no_selection:
 34386                                          mov     [offDefBlock],bx; save selection
 34387                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 34388                                          sub     si,si           ;
 34389                                          push    ds              ;
 34390                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 34391                                          sub     di,di           ;
 34392                                  
 34393                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 34394                                  ;
 34395                                  ;   Work our way through the config.sys image again, this time copying
 34396                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 34397                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 34398                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 34399                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 34400                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 34401                                  ;
 34402                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 34403                                  ;   stack we're running on, then we should check it inside copy_block
 34404                                  
 34405                                  copyblock_loop:
 34406                                          push    bx              ; save selected block name
 34407                                          call    copy_block      ; process (named or common) block
 34408                                          pop     bx              ;
 34409                                          jc	short move_config ; hit eof
 34410                                  
 34411                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 34412                                  
 34413                                  copyblock_begin:
 34414                                          push    ax              ;
 34415                                          push    cx              ;
 34416                                          push    si              ;
 34417                                          push    di              ; always do "common" blocks
 34418                                          mov     di,szCommon
 34419                                          push    ds              ;
 34420                                          push    cs              ;
 34421                                          pop     ds              ;
 34422                                          call    comp_names      ;
 34423                                          pop     ds              ;
 34424                                          pop     di              ;
 34425                                          pop     si              ;
 34426                                          pop     cx              ;
 34427                                          pop     ax              ;
 34428                                          je	short copyblock_check
 34429                                          or      bx,bx           ; is there a block name to check?
 34430                                          jz	short copyblock_skip ; no
 34431                                          push    di              ;
 34432                                          mov     di,bx           ; check block against given block name
 34433                                          push    ds              ;
 34434                                          push    es              ;
 34435                                          pop     ds              ;
 34436                                          call    comp_names      ; is this the block we really want to do?
 34437                                          pop     ds              ;
 34438                                          pop     di              ;
 34439                                  copyblock_check:
 34440                                          jc	short move_config ; hit eof
 34441                                          jne	short copyblock_skip  ;
 34442                                          call    skip_opt_line   ;
 34443                                          jmp	short copyblock_loop 
 34444                                  
 34445                                  copyblock_skip:                 ;
 34446                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 34447                                          call    get_char        ;
 34448                                          jc	short move_config ; hit eof
 34449                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34450                                          cmp     al,CONFIG_BEGIN ;
 34451                                          je	short copyblock_begin
 34452                                          jmp     short copyblock_skip ; anything else is just skipped
 34453                                  ;
 34454                                  ;   To create as little risk to the rest of SysInit as little as possible,
 34455                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 34456                                  ;   copy the new config.sys image to "confbot"
 34457                                  ;
 34458                                  move_config:
 34459                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 34460                                          push    cx              ;
 34461                                  ;
 34462                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 34463                                  ;   since the configuration name only currently exists in the "confbot" area
 34464                                  ;
 34465                                   	;mov	cx,7
 34466                                  	mov     cx,szMenu-szBoot-1
 34467                                          mov     si,szBoot	; first copy the CONFIG= part
 34468                                          inc     di              ; skip a byte, in case absolutely nothing
 34469                                                                  ; was copied to the workspace, because we always
 34470                                                                  ; zero the first byte of the workspace (below)
 34471                                  copy_boot: 
 34472                                  	;lods    byte ptr cs:[si];
 34473                                          cs
 34474                                  	lodsb
 34475                                  	mov     [di],al         ;
 34476                                          inc     di              ;
 34477                                          loop    copy_boot       ;
 34478                                  
 34479                                          push    es              ; then copy the configuration name
 34480                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 34481                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 34482                                          or      si,si           ; valid?
 34483                                          jnz	short l1	; yes
 34484                                          push    cs              ;
 34485                                          pop     es              ;
 34486                                          mov     si,szCommon
 34487                                  l1:     mov     al,[es:si]      ;
 34488                                          call    any_delim       ;
 34489                                          je	short l2	;
 34490                                          mov     [di],al         ;
 34491                                          inc     si              ;
 34492                                          inc     di              ;
 34493                                          loop    l1              ;
 34494                                  l2:     mov     byte [di],lf	; terminate the configuration string
 34495                                          pop     es              ;
 34496                                  
 34497                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 34498                                  
 34499                                          sub     di,di           ;
 34500                                          mov     [cs:config_envlen],di
 34501                                          sub     si,si           ;
 34502                                          pop     cx              ; recover the size of "config_wrkseg"
 34503                                  
 34504                                          push    cx              ;
 34505                                          rep     movsb           ; moved!
 34506                                          pop     cx              ;
 34507                                          mov     ax,ds           ;
 34508                                          pop     ds              ;
 34509                                  
 34510                                  ;   Now that the config_wrkseg is available once again, we shall
 34511                                  ;   use it to create an environment. The first thing to go in will be
 34512                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 34513                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 34514                                  ;   is empty.
 34515                                  
 34516                                          push    es              ;
 34517                                          mov     es,ax           ;
 34518                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 34519                                          mov     byte [es:0],0	;empty the environment block
 34520                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 34521                                          pop     es
 34522                                  
 34523                                  ;   Before returning, restore the default video page setting but do NOT
 34524                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 34525                                  ;   displayed on a different page, then it's because we don't want to see
 34526                                  ;   all the device driver/TSR goop (which goes to the default page)
 34527                                  
 34528                                  menu_done:
 34529                                          cmp     byte [bMenuPage],0
 34530                                          je	short menu_exit	;
 34531                                          push    es              ;
 34532                                          mov     ax,40h          ;
 34533                                          mov     es,ax           ;
 34534                                          mov     ax,[wCRTStart]  ;
 34535                                          mov     [es:004Eh],ax   ;
 34536                                          mov     al,[bCRTPage]   ;
 34537                                          mov     [es:0062h],al   ;
 34538                                          pop     es              ;
 34539                                  menu_exit:
 34540                                          mov     [count],cx      ; set new counts
 34541                                          mov     [org_count],cx  ;
 34542                                          sub     si,si           ; always return ES:SI pointing to config.sys
 34543                                          retn
 34544                                  
 34545                                  ;----------------------------------------------------------------------------
 34546                                  ;
 34547                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 34548                                  ;
 34549                                  ;   INPUT
 34550                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 34551                                  ;
 34552                                  ;   OUTPUT
 34553                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 34554                                  ;       carry set if error (eg, missing =); clear otherwise
 34555                                  ;
 34556                                  ;   OTHER REGS USED
 34557                                  ;       None
 34558                                  ;
 34559                                  ;   NOTES
 34560                                  ;       None
 34561                                  ;
 34562                                  ;   HISTORY
 34563                                  ;       Created 29-Mar-1992 by JeffPar
 34564                                  ;
 34565                                  ;----------------------------------------------------------------------------
 34566                                  
 34567                                  copy_envvar:
 34568                                          push    cx              ;
 34569                                          push    si              ;
 34570                                          push    ds              ;
 34571                                          push    es              ;
 34572                                          push    es              ;
 34573                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 34574                                          pop     ds                 ; DS:SI to point to envvar
 34575                                  
 34576                                  ;   Have to calculate the length of the variable name (and if we hit
 34577                                  ;   the end of the line before we hit '=', then it's curtains for this
 34578                                  ;   config.sys line)
 34579                                  ;
 34580                                  ;   The check for NULL is important because copy_envvar is also used to copy
 34581                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 34582                                  ;   menu block existed (in order to prevent the creation of an environment)
 34583                                  
 34584                                          sub     cx,cx           ;
 34585                                  copy_varlen:                    ;
 34586                                          lodsb                   ;
 34587                                          or      al,al           ; NULL?
 34588                                          stc                     ;
 34589                                          jz	short copy_envexit ; yes, abort
 34590                                          cmp     al,cr          ;
 34591                                          stc                     ;
 34592                                          je	short copy_envexit
 34593                                          cmp     al,lf          ;
 34594                                          stc                     ;
 34595                                          je	short copy_envexit
 34596                                          inc     cx              ;
 34597                                          cmp     al,'='          ;
 34598                                          jne	short copy_varlen
 34599                                          mov     al,0            ;
 34600                                          mov     ah,[si]         ; save char after '='
 34601                                          sub     si,cx           ; back up to given varname
 34602                                          dec     cx              ; CX == # of bytes in varname
 34603                                          sub     di,di           ; start looking for DS:SI at ES:0
 34604                                  copy_varsrch:
 34605                                          cmp     byte [es:di],al
 34606                                          je	short copy_envprep ; search failed, just copy var
 34607                                          mov     bx,di           ; ES:BX -> start of this varname
 34608                                          push    cx              ;
 34609                                          push    si              ;
 34610                                          repe    cmpsb           ;
 34611                                          pop     si              ;
 34612                                          pop     cx              ;
 34613                                          jne	short copy_varnext ; no match, skip to next varname
 34614                                          cmp     byte [es:di],'='
 34615                                          jne     short copy_varnext ; no match, there's more characters
 34616                                  
 34617                                  ;   Previous occurrence of variable has been found; determine the
 34618                                  ;   entire length and then destroy it
 34619                                  
 34620                                          mov     cx,-1           ;
 34621                                          repne   scasb           ; guaranteed to get null (since we put it there)
 34622                                          push    si              ;
 34623                                          mov     si,di           ;
 34624                                          mov     di,bx           ;
 34625                                          mov     cx,[cs:config_envlen]
 34626                                          sub     cx,si           ; destroy variable now
 34627                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 34628                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 34629                                  
 34630                                  	rep	; 0F3h
 34631                                  	es	; 26h
 34632                                  	movsb	; 0A4h
 34633                                  
 34634                                  	pop     si
 34635                                  copy_envprep:
 34636                                          cmp     ah,cr          ; if there is nothing after the '='
 34637                                          je	short copy_envdel ; then just exit with variable deleted
 34638                                          cmp     ah,lf           ;
 34639                                          je	short copy_envdel
 34640                                          jmp     short copy_envloop
 34641                                  
 34642                                  copy_varnext:                   ;
 34643                                          push    cx              ;
 34644                                          mov     cx,-1           ;
 34645                                          repne   scasb           ;
 34646                                          pop     cx              ;
 34647                                          jmp	short copy_varsrch
 34648                                  
 34649                                  copy_envloop:                   ;
 34650                                          lodsb                   ;
 34651                                          cmp     al,cr           ;
 34652                                          je	short copy_envdone
 34653                                          cmp     al,lf           ;
 34654                                          je	short copy_envdone
 34655                                          stosb                   ;
 34656                                          jmp     short copy_envloop
 34657                                  
 34658                                  copy_envdone:                   ;
 34659                                          sub     al,al           ; do SUB to clear carry as well
 34660                                          stosb                   ; always null-terminate these puppies
 34661                                  copy_envdel:                    ;
 34662                                          mov     [es:di],al      ; and stick another null to terminate the env.
 34663                                          mov     [cs:config_envlen],di
 34664                                  
 34665                                  copy_envexit:                   ;
 34666                                          pop     es              ;
 34667                                          pop     ds              ;
 34668                                          pop     si              ;
 34669                                          pop     cx              ;
 34670                                  
 34671                                  copy_done:	; 18/12/2022
 34672                                          retn
 34673                                  
 34674                                  ;----------------------------------------------------------------------------
 34675                                  ;
 34676                                  ;   copy_block:  copy the current block to the new config.sys workspace
 34677                                  ;
 34678                                  ;   INPUT
 34679                                  ;       CX == remaining bytes in "organized" config.sys memory image
 34680                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 34681                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 34682                                  ;             config.sys image) where the current block is to be copied
 34683                                  ;
 34684                                  ;   OUTPUT
 34685                                  ;       Same as above
 34686                                  ;       AL also equals the last character read from the organized image
 34687                                  ;
 34688                                  ;   OTHER REGS USED
 34689                                  ;       All
 34690                                  ;
 34691                                  ;   NOTES
 34692                                  ;       None
 34693                                  ;
 34694                                  ;   HISTORY
 34695                                  ;       Created 16-Mar-1992 by JeffPar
 34696                                  ;
 34697                                  ;----------------------------------------------------------------------------
 34698                                  
 34699                                  copy_block:
 34700                                          call    get_char        ; check for include
 34701                                          jc	short copy_done	;
 34702                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34703                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 34704                                          je	short copy_done ;
 34705                                  
 34706                                          cmp     al,CONFIG_INCLUDE ; 'J'
 34707                                          mov     al,ah           ; AL == the original line code
 34708                                          jne	short copy_line	; not an "include" line
 34709                                  
 34710                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 34711                                  ;   never try to include the block again (no infinite include loops please),
 34712                                  ;   then search for the named block and call copy_block again.
 34713                                  
 34714                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 34715                                          push    di              ;
 34716                                  
 34717                                          mov     di,szMenu
 34718                                          call    comp_names_safe ; don't allow INCLUDE MENU
 34719                                          je	short copy_skip	;
 34720                                  
 34721                                          mov     di,szCommon
 34722                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 34723                                          je	short copy_skip	;
 34724                                  
 34725                                          mov     di,si           ; try to find the block
 34726                                          call    srch_block      ;
 34727                                          mov     dx,di           ;
 34728                                          pop     di              ;
 34729                                          jne	short copy_error ; no such block
 34730                                          push    cx              ;
 34731                                          mov     cx,bx           ;
 34732                                          push    si              ;
 34733                                          dec     dx              ;
 34734                                          mov     si,dx           ;
 34735                                          call    skip_line       ; skip the rest of the "block name" line
 34736                                          call    copy_block      ; and copy in the rest of that block
 34737                                          pop     si              ;
 34738                                          pop     cx              ;
 34739                                          sub     al,al           ; force skip_opt_line to skip...
 34740                                          jmp     short copy_nextline
 34741                                  
 34742                                  copy_skip:
 34743                                          pop     di
 34744                                  copy_error:
 34745                                          clc                     ;
 34746                                          call    print_error     ; note that carry is clear, no pause
 34747                                          jmp     short copy_nextline
 34748                                  
 34749                                  ;   Copy the line at ES:SI to the current location at DS:DI
 34750                                  
 34751                                  copy_line:
 34752                                          mov     [di],al         ;
 34753                                          inc     di              ;
 34754                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 34755                                          jb	short copy_nextline ; no
 34756                                          cmp     byte [cs:config_multi],0
 34757                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 34758                                          call    get_linenum	; BX == line # of line @ES:SI
 34759                                          mov     [di],bx         ; stash it immediately following the line code
 34760                                          inc     di              ;
 34761                                          inc     di              ;
 34762                                          jmp     short copy_next ;
 34763                                  copy_loop:                      ;
 34764                                          call    get_char        ;
 34765                                          jc	short copy_done ; end of file
 34766                                          mov     [di],al         ;
 34767                                          inc     di              ;
 34768                                  copy_next:
 34769                                          cmp     al,lf ; 0Ah	; done with line?
 34770                                          jne	short copy_loop	; nope
 34771                                  
 34772                                  copy_nextline:
 34773                                          call    skip_opt_line   ;
 34774                                          jmp     short copy_block
 34775                                  
 34776                                  	; 18/12/2022
 34777                                  ;copy_done:
 34778                                          ;retn
 34779                                  
 34780                                  ;----------------------------------------------------------------------------
 34781                                  ;
 34782                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 34783                                  ;
 34784                                  ;   INPUT
 34785                                  ;    ES:SI -> some line in the config.sys memory image
 34786                                  ;
 34787                                  ;   OUTPUT
 34788                                  ;       BX == line # (relative to 1)
 34789                                  ;
 34790                                  ;   OTHER REGS USED
 34791                                  ;       DX
 34792                                  ;
 34793                                  ;   NOTES
 34794                                  ;       None
 34795                                  ;
 34796                                  ;   HISTORY
 34797                                  ;       Created 16-Mar-1992 by JeffPar
 34798                                  ;
 34799                                  ;----------------------------------------------------------------------------
 34800                                  
 34801                                  get_linenum:
 34802                                          push    ax              ;
 34803                                          sub     bx,bx           ; BX == line # (to be returned)
 34804                                          push    cx              ;
 34805                                          mov     dx,si           ; DX == the offset we're looking for
 34806                                          push    si              ;
 34807                                          mov     cx,[cs:count]   ;
 34808                                          sub     si,si           ; prepare to scan entire file
 34809                                  get_linenum_loop:               ;
 34810                                          call    skip_line       ;
 34811                                          jc	short get_linenum_done
 34812                                          inc     bx              ;
 34813                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 34814                                          jb	short get_linenum_loop ; no
 34815                                  get_linenum_done:               ;
 34816                                          pop     si              ;
 34817                                          pop     cx              ;
 34818                                          pop     ax              ;
 34819                                          retn
 34820                                  
 34821                                  ;----------------------------------------------------------------------------
 34822                                  ;
 34823                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34824                                  ;
 34825                                  ;   INPUT
 34826                                  ;       ES -> config.sys image
 34827                                  ;    ES:DI -> block name to find
 34828                                  ;
 34829                                  ;   OUTPUT
 34830                                  ;       ZF flag set, if found
 34831                                  ;    ES:DI -> just past the name in the block heading, if found
 34832                                  ;       BX == # bytes remaining from that point, if found
 34833                                  ;
 34834                                  ;   OTHER REGS USED
 34835                                  ;       None
 34836                                  ;
 34837                                  ;   NOTES
 34838                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34839                                  ;       config.sys image, not merely the remaining portion, and that it
 34840                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34841                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34842                                  ;
 34843                                  ;   HISTORY
 34844                                  ;       Created 16-Mar-1992 by JeffPar
 34845                                  ;
 34846                                  ;----------------------------------------------------------------------------
 34847                                  
 34848                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34849                                          push    ax              ;
 34850                                          push    cx              ;
 34851                                          mov     cx,[cs:count]   ;
 34852                                          push    si              ;
 34853                                          sub     si,si           ;
 34854                                          push    ds              ;
 34855                                          push    es              ;
 34856                                          pop     ds              ;
 34857                                          call    find_block      ;
 34858                                          mov     di,si           ;
 34859                                          mov     bx,cx           ;
 34860                                          pop     ds              ;
 34861                                          pop     si              ;
 34862                                          pop     cx              ;
 34863                                          pop     ax              ;
 34864                                  find_exit: ; 16/04/2019
 34865                                          retn			;
 34866                                  
 34867                                  ;----------------------------------------------------------------------------
 34868                                  ;
 34869                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34870                                  ;
 34871                                  ;   INPUT
 34872                                  ;    DS:DI -> block name to find
 34873                                  ;    ES:SI -> remainder of config.sys image
 34874                                  ;       CX == remaining size of config.sys image
 34875                                  ;
 34876                                  ;   OUTPUT
 34877                                  ;       ZF flag set, if found (also, CF set if EOF)
 34878                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34879                                  ;       CX == # bytes remaining from that point
 34880                                  ;
 34881                                  ;   OTHER REGS USED
 34882                                  ;       AX
 34883                                  ;
 34884                                  ;   NOTES
 34885                                  ;       This differs from "srch_block" in that it searches only the
 34886                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34887                                  ;       pointing to where the search left off, and that it takes a pointer
 34888                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34889                                  ;
 34890                                  ;   HISTORY
 34891                                  ;       Created 16-Mar-1992 by JeffPar
 34892                                  ;
 34893                                  ;----------------------------------------------------------------------------
 34894                                  
 34895                                  find_block:
 34896                                          call    get_char        ; get line code
 34897                                          jc	short find_exit	; end of file
 34898                                          and     al,~CONFIG_OPTION_QUERY
 34899                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34900                                          je	short check_line ; no
 34901                                          cmp     al,CONFIG_INCLUDE
 34902                                          jne	short next_line	;
 34903                                          or	byte [cs:config_multi],1
 34904                                          jmp     short next_line ;
 34905                                  check_line:
 34906                                          or      byte [cs:config_multi],1
 34907                                          call    comp_names      ; compare block names
 34908                                          jbe	short find_exit	; end of file, or names matched
 34909                                  next_line:
 34910                                          call    skip_opt_line   ; no, so skip to next line
 34911                                          jmp	short find_block  ;
 34912                                  ;find_exit:
 34913                                  ;	retn
 34914                                  
 34915                                  ;----------------------------------------------------------------------------
 34916                                  ;
 34917                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34918                                  ;
 34919                                  ;   INPUT
 34920                                  ;    DS:DI -> keyword to compare
 34921                                  ;    ES:SI -> position in config.sys
 34922                                  ;       CX == remaining bytes in config.sys
 34923                                  ;
 34924                                  ;   OUTPUT
 34925                                  ;       ZF flag set, if match (also, CF set if EOF)
 34926                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34927                                  ;       CX == # bytes remaining from that point
 34928                                  ;
 34929                                  ;   OTHER REGS USED
 34930                                  ;       AX
 34931                                  ;
 34932                                  ;   NOTES
 34933                                  ;       None
 34934                                  ;
 34935                                  ;   HISTORY
 34936                                  ;       Created 16-Mar-1992 by JeffPar
 34937                                  ;
 34938                                  ;----------------------------------------------------------------------------
 34939                                  
 34940                                  comp_names:
 34941                                          push    di              ;
 34942                                  comp_loop:                      ;
 34943                                          call    get_char        ;
 34944                                          jc	short comp_exit	;
 34945                                          call    any_delim       ; is next character a delimiter?
 34946                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34947                                          je	short comp_almost ; yes, it *could* be a match
 34948                                          inc     di              ;
 34949                                          and     ax,~2020h ; 0DFDFh 
 34950                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34951                                          cmp     al,ah           ; match?
 34952                                          je	short comp_loop ; yes, keep looking at the characters
 34953                                          clc                     ; prevent erroneous eof indication: clear carry
 34954                                  comp_exit:                      ;
 34955                                          pop     di              ;
 34956                                          retn			;
 34957                                  comp_almost:                    ;
 34958                                          xchg    al,ah           ; we don't know for sure if it's a match
 34959                                          call    any_delim       ; until we verify that the second string has
 34960                                          xchg    al,ah           ; been exhausted also...
 34961                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34962                                  
 34963                                  ;----------------------------------------------------------------------------
 34964                                  
 34965                                  comp_names_safe:
 34966                                          push    ax
 34967                                          push    cx
 34968                                          push	si
 34969                                          push    ds
 34970                                          push    cs
 34971                                          pop     ds
 34972                                          call    comp_names
 34973                                          pop     ds
 34974                                  	pop	si
 34975                                          pop     cx
 34976                                          pop     ax
 34977                                          retn
 34978                                  
 34979                                  ;----------------------------------------------------------------------------
 34980                                  ;
 34981                                  ;   print_item:  display menu item #BL
 34982                                  ;
 34983                                  ;   INPUT
 34984                                  ;       BL == menu item # to display
 34985                                  ;
 34986                                  ;   OUTPUT
 34987                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34988                                  ;
 34989                                  ;   OTHER REGS USED
 34990                                  ;       None
 34991                                  ;
 34992                                  ;   NOTES
 34993                                  ;       This function saves/restores the current cursor position, so you
 34994                                  ;       needn't worry about it.
 34995                                  ;
 34996                                  ;   HISTORY
 34997                                  ;       Created 16-Mar-1992 by JeffPar
 34998                                  ;
 34999                                  ;----------------------------------------------------------------------------
 35000                                  
 35001                                  print_item:		; prints menu item #BL (1 to N)
 35002                                          push    ax              ;
 35003                                          push    bx              ;
 35004                                          push    cx              ;
 35005                                          push    dx              ;
 35006                                          push    si              ;
 35007                                          mov     ah,03h          ; get cursor position
 35008                                          mov     bh,[bMenuPage]  ; always page zero
 35009                                          int     10h             ; DH/DL = row/column
 35010                                          push    dx              ; save it
 35011                                          mov     ah,02h          ; set cursor position
 35012                                          mov     dh,bl           ;
 35013                                          add     dh,3            ;
 35014                                          mov     dl,5            ;
 35015                                          int     10h             ; set cursor position for correct row/col
 35016                                          mov     al,bl           ;
 35017                                          add     al,'0'          ; convert menu item # to ASCII digit
 35018                                          mov     ah,[bMenuColor] ; normal attribute
 35019                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 35020                                          jne	short print_other ; no
 35021                                          or      ah,70h          ; yes, set bgnd color to white
 35022                                          mov     ch,ah           ;
 35023                                          mov     cl,4            ;
 35024                                          rol     ch,cl           ;
 35025                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 35026                                          jne	short print_other ; no
 35027                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 35028                                  print_other:                    ;
 35029                                          mov     bh,0            ;
 35030                                          add     bx,bx           ;
 35031                                          mov     di,[aoffBlockDesc+bx]
 35032                                          mov     bl,ah           ; put the attribute in the correct register now
 35033                                          mov     bh,[bMenuPage]  ; get correct video page #
 35034                                          mov     ah,09h          ; write char/attr
 35035                                          mov     cx,1            ;
 35036                                          int     10h             ;
 35037                                          inc     dl              ; increment column
 35038                                          mov     ah,02h          ;
 35039                                          int     10h             ;
 35040                                          ;mov	ax,0900h+'.'    ;
 35041                                          mov	ax,092Eh
 35042                                  	int     10h             ; display '.'
 35043                                          inc     dl              ; increment column
 35044                                          mov     ah,02h          ;
 35045                                          int     10h             ;
 35046                                          ;mov	ax,0900h+' '    ;
 35047                                          mov	ax,0920h
 35048                                  	int     10h             ; display ' '
 35049                                          inc     dl              ; increment column
 35050                                          mov     ah,02h          ;
 35051                                          int     10h             ;
 35052                                          push    es              ;
 35053                                  print_loop:                     ;
 35054                                          mov     al,[es:di]	; get a character of the description
 35055                                          inc     di              ;
 35056                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 35057                                          jne	short print_nontab ;
 35058                                          mov     al,' '          ;
 35059                                  print_nontab:                   ;
 35060                                          cmp     al,' '          ;
 35061                                          jb	short print_done ; stop at the 1st character < space
 35062                                          cmp     al,'$'          ;
 35063                                          je	short print_done ; also stop on $
 35064                                          mov     ah,09h          ; display function #
 35065                                          int     10h             ;
 35066                                          inc     dl              ; increment column
 35067                                          cmp     dl,78           ; far enough?
 35068                                          jae	short print_done ; yes
 35069                                          mov     ah,02h          ;
 35070                                          int     10h             ;
 35071                                          jmp     print_loop      ;
 35072                                  print_done:                     ;
 35073                                          pop     es              ;
 35074                                          pop     dx              ;
 35075                                          mov     ah,02h          ;
 35076                                          int     10h             ; restore previous row/col
 35077                                          pop     si              ;
 35078                                          pop     dx              ;
 35079                                          pop     cx              ;
 35080                                          pop     bx              ;
 35081                                          pop     ax              ;
 35082                                          retn			;
 35083                                  
 35084                                  ;----------------------------------------------------------------------------
 35085                                  ;
 35086                                  ;   select_item:  wait for user to select menu item, with time-out
 35087                                  ;
 35088                                  ;   INPUT
 35089                                  ;       None
 35090                                  ;
 35091                                  ;   OUTPUT
 35092                                  ;       BX == menu item # (1-N), or -1 for clean boot
 35093                                  ;       Selected menu item highlighted
 35094                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 35095                                  ;
 35096                                  ;   OTHER REGS USED
 35097                                  ;       None
 35098                                  ;
 35099                                  ;   NOTES
 35100                                  ;       None
 35101                                  ;
 35102                                  ;   HISTORY
 35103                                  ;       Created 16-Mar-1992 by JeffPar
 35104                                  ;
 35105                                  ;----------------------------------------------------------------------------
 35106                                  
 35107                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 35108                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 35109                                          mov     al,bl           ;
 35110                                          call    disp_num        ;
 35111                                          call    show_status     ; display current interactive status
 35112                                          cmp     byte [secTimeOut],-1
 35113                                          je	short input_key	; no time-out, just go to input
 35114                                          mov     ah,GET_TIME ; 2Ch
 35115                                          int     21h             ;
 35116                                          mov     bh,dh           ; BH = initial # of seconds
 35117                                  check_time:
 35118                                          mov     al,[secTimeOut] ;
 35119                                          sub     al,[secElapsed] ;
 35120                                          jae	short show_time	;
 35121                                          or      byte [bQueryOpt],2  ; disable all further prompting
 35122                                          mov     byte [secElapsed],0
 35123                                          jmp	select_done	; time's up!
 35124                                  show_time:
 35125                                          push    bx              ;
 35126                                          mov     bl,al           ; save # in BL
 35127                                          mov     bh,[bMenuPage]  ;
 35128                                          mov     ah,03h          ; get cursor position
 35129                                          int     10h             ;
 35130                                          push    dx              ;
 35131                                  	add	dl,8		; move cursor to the right
 35132                                          mov     ah,02h          ; set cursor position
 35133                                          int     10h             ;
 35134                                          mov     dx,_$TimeOut
 35135                                          call    print           ; print the "Time remaining: " prompt
 35136                                          mov     al,bl           ; recover # from BL
 35137                                          cbw                     ; this works because AL is always <= 90
 35138                                          mov     cl,10           ;
 35139                                          div     cl              ; AL = tens digit, AH = ones digit
 35140                                          mov     cl,ah           ;
 35141                                          add     al,'0'          ;
 35142                                          mov     ah,0Eh          ;
 35143                                          int     10h             ; write TTY tens digit
 35144                                          mov     al,cl           ;
 35145                                          add     al,'0'          ;
 35146                                          mov     ah,0Eh          ;
 35147                                          int     10h             ; write TTY ones digit
 35148                                          pop     dx
 35149                                          mov     ah,02h          ; set cursor position back to where it was
 35150                                          int     10h             ;
 35151                                          pop     bx              ;
 35152                                  input_key:
 35153                                          mov     ah,RAW_CON_IO ; 6
 35154                                          mov     dl,0FFh         ; input request
 35155                                          int     21h             ;
 35156                                          jnz	short got_key	;
 35157                                          cmp     byte [secTimeOut],-1; is there a time-out?
 35158                                          je	short input_key	; no, just go back to input
 35159                                          mov     ah,GET_TIME     ;
 35160                                          int     21h             ; DH = seconds
 35161                                          mov     ah,dh           ;
 35162                                          sub     dh,bh           ; should generally be zero or one
 35163                                          mov     bh,ah           ;
 35164                                          jnc	short got_time	;
 35165                                          mov     dh,1            ; it wrapped back to zero, so assume one
 35166                                  got_time:
 35167                                          or      dh,dh           ; any change?
 35168                                          jz	short input_key	; no
 35169                                          add     [secElapsed],dh ;
 35170                                          jmp	short check_time ;
 35171                                  got_key:
 35172                                          push    ax              ;
 35173                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 35174                                          xchg    [secTimeOut],ax
 35175                                          cmp     al,-1           ; was time-out already disabled?
 35176                                          je	short timeout_disabled ; yes
 35177                                          push    bx              ; let's disable # seconds display
 35178                                          mov     ax,0A20h        ; write multiple spaces
 35179                                          mov     bx,[bMenuColor]
 35180                                          mov     cx,80           ; 80 of them, to be safe
 35181                                          int     10h             ; to completely obliterate # seconds display
 35182                                          pop     bx   		;
 35183                                  
 35184                                  timeout_disabled:
 35185                                          pop     ax              ;
 35186                                          or      al,al           ; extended key pressed?
 35187                                          jnz	short normal_key ; no
 35188                                          int     21h             ; get the next part of the key then
 35189                                          jz	short input_key	; hmmm, what happened to the second part?
 35190                                  
 35191                                          cmp     al,48h          ; up arrow?
 35192                                          jne	short not_up	; no
 35193                                          cmp     bl,1            ; are we as up as up can get?
 35194                                          jbe	short input_key	; yes, ignore it
 35195                                          dec     byte [bDefBlock] ;
 35196                                          call    print_item      ; re-print the current item
 35197                                          dec     bl              ; and then print the new current item
 35198                                          jmp     short print1
 35199                                  not_up:
 35200                                          cmp     al,50h          ; down arrow?
 35201                                          jne	short not_down	; no
 35202                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 35203                                          jae	short to_input_key ; yes, ignore it
 35204                                          inc     byte [bDefBlock] ;
 35205                                          call    print_item      ; re-print the current item
 35206                                          inc     bx              ; and then print the new current item
 35207                                  print1: 
 35208                                  	mov     al,bl           ;
 35209                                  print2: 
 35210                                  	call    print_item      ;
 35211                                          call    disp_num        ;
 35212                                  to_input_key:
 35213                                          jmp     input_key       ;
 35214                                  not_down:
 35215                                          test    byte [bDisableUI],1
 35216                                          jnz	short to_input_key ; don't allow F8 or F5
 35217                                          cmp     al,42h          ; F8 function key?
 35218                                          jne	short not_f8	; no
 35219                                          xor     byte [bQueryOpt],1
 35220                                          call    show_status     ;
 35221                                          jmp     input_key	;
 35222                                  not_f8:
 35223                                          cmp     al,3Fh          ; F5 function key?
 35224                                          jne	short to_input_key ; no
 35225                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 35226                                          mov     al,' '          ; don't want to display anything really;
 35227                                          jmp     short disp_input; just want to display the cr/lf sequence...
 35228                                  
 35229                                  normal_key:
 35230                                          cmp     al,0Dh          ; Enter?
 35231                                          je	short select_done ; yes
 35232                                          cmp     al,08h          ; backspace?
 35233                                          jne	short not_backspace ; no
 35234                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 35235                                          retn			;
 35236                                  not_backspace:
 35237                                          sub     al,'0'          ; is greater than '0'?
 35238                                          jbe	short to_input_key ; no
 35239                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 35240                                          ja	short to_input_key ; no
 35241                                          mov	[bDefBlock],al  ;
 35242                                          call    print_item      ; redisplay the current selection
 35243                                          mov     bl,al           ; set new selection
 35244                                          jmp	short print2
 35245                                  
 35246                                  select_done:
 35247                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 35248                                          mov     al,bl           ;
 35249                                          add     al,'0'          ; convert it into a digit, then display it
 35250                                  
 35251                                  	; fall into disp_input
 35252                                  
 35253                                  ; 16/04/2019 - Retro DOS v4.0
 35254                                  
 35255                                  ;----------------------------------------------------------------------------
 35256                                  ;
 35257                                  ;   disp_input:  display a single character + cr/lf
 35258                                  ;
 35259                                  ;   INPUT
 35260                                  ;       AL == character to display
 35261                                  ;
 35262                                  ;   OUTPUT
 35263                                  ;       None
 35264                                  ;
 35265                                  ;   OTHER REGS USED
 35266                                  ;       None
 35267                                  ;
 35268                                  ;   NOTES
 35269                                  ;       This function is used not only for the menu input selection but
 35270                                  ;       also for the interactive line prompting (the y/n/a thing).
 35271                                  ;
 35272                                  ;   HISTORY
 35273                                  ;       Created 16-Mar-1992 by JeffPar
 35274                                  ;
 35275                                  ;----------------------------------------------------------------------------
 35276                                  
 35277                                  disp_input:
 35278                                          push    ax
 35279                                          cmp     al,' '
 35280                                          jae	short disp_ok
 35281                                          mov     al,' '
 35282                                  disp_ok:
 35283                                          mov     dl,al
 35284                                          mov     ah,STD_CON_OUTPUT ; 2
 35285                                          int     21h
 35286                                          mov     dx,crlfm
 35287                                          call    print
 35288                                          pop     ax
 35289                                          retn
 35290                                  
 35291                                  ;----------------------------------------------------------------------------
 35292                                  
 35293                                  disp_num:
 35294                                          push    bx
 35295                                          add     al,'0'
 35296                                          mov     ah,0Ah
 35297                                          mov     bx,[bMenuColor]
 35298                                          mov     cx,1
 35299                                          int     10h
 35300                                          pop     bx
 35301                                          retn
 35302                                  
 35303                                  ;----------------------------------------------------------------------------
 35304                                  ;
 35305                                  ;   show_status:  display current interactive mode setting (on/off/none)
 35306                                  ;
 35307                                  ;   INPUT
 35308                                  ;       None
 35309                                  ;
 35310                                  ;   OUTPUT
 35311                                  ;       None
 35312                                  ;
 35313                                  ;   OTHER REGS USED
 35314                                  ;       None
 35315                                  ;
 35316                                  ;   NOTES
 35317                                  ;       None
 35318                                  ;
 35319                                  ;   HISTORY
 35320                                  ;       Created 16-Mar-1992 by JeffPar
 35321                                  ;
 35322                                  ;----------------------------------------------------------------------------
 35323                                  
 35324                                  show_status:
 35325                                          push    bx              ; BL = video page #
 35326                                          mov     bx,[bMenuColor]
 35327                                          mov     ah,03h          ; get cursor position
 35328                                          int     10h             ;
 35329                                          push    dx              ; save it
 35330                                          mov     ah,02h          ; set cursor position
 35331                                          mov     dx,[bLastCol]   ; set correct row/col
 35332                                          test    byte [bDisableUI],1
 35333                                          jz	short show_onoff ; just show on/off
 35334                                          mov     dl,0            ;
 35335                                          int     10h             ;
 35336                                          mov     ax,0A20h        ; write multiple spaces
 35337                                          mov     cx,80           ; 80 of them, to be exact
 35338                                          int     10h             ; to obliterate the status line
 35339                                          jmp     short show_done ;
 35340                                  show_onoff: 
 35341                                          int     10h
 35342                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 35343                                  		; AL = character, BH = display page - alpha mode
 35344                                  		; BL = color of character (graphics mode, PCjr only)
 35345                                  		; CX = number of times to write character
 35346                                  
 35347                                          mov     al,[_$NO]	; assume OFF
 35348                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 35349                                          jne	short show_noton ; no
 35350                                          mov     al,[_$YES]	; yes
 35351                                  show_noton:                     ;
 35352                                          mov     ah,0Eh          ; write TTY
 35353                                          int     10h             ;
 35354                                  show_done:                      ;
 35355                                          pop     dx              ;
 35356                                          mov     ah,02h          ;
 35357                                          int     10h             ; restore original cursor position
 35358                                          pop     bx              ;
 35359                                          retn			;
 35360                                  
 35361                                  ; 16/04/2019 - Retro DOS v4.0
 35362                                  
 35363                                  ;----------------------------------------------------------------------------
 35364                                  ;
 35365                                  ;   skip_token: advances ES:SI/CX past the current token
 35366                                  ;
 35367                                  ;   INPUT
 35368                                  ;    ES:SI -> position in config.sys
 35369                                  ;       CX == remaining bytes in config.sys
 35370                                  ;
 35371                                  ;   OUTPUT
 35372                                  ;       CF set if EOL/EOF hit
 35373                                  ;       AL == 1st char of delimiter
 35374                                  ;    ES:SI -> just past the delimiter
 35375                                  ;       CX == # bytes remaining from that point
 35376                                  ;
 35377                                  ;   OTHER REGS USED
 35378                                  ;       AX
 35379                                  ;
 35380                                  ;   NOTES
 35381                                  ;       None
 35382                                  ;
 35383                                  ;   HISTORY
 35384                                  ;       Created 16-Mar-1992 by JeffPar
 35385                                  ;
 35386                                  ;----------------------------------------------------------------------------
 35387                                  
 35388                                  skip_token:
 35389                                          call    get_char
 35390                                          jc	short skip_token_done
 35391                                          call    any_delim
 35392                                          jne	short skip_token
 35393                                  skip_check_eol:
 35394                                          cmp     al,cr ; 0Dh
 35395                                          je	short skip_token_eol
 35396                                          cmp     al,lf ; 0Ah
 35397                                          je	short skip_token_eol
 35398                                          clc
 35399                                          ;jmp	short skip_token_done
 35400                                  	retn
 35401                                  skip_token_eol:
 35402                                          stc
 35403                                  skip_token_done:
 35404                                          retn
 35405                                  
 35406                                  ;----------------------------------------------------------------------------
 35407                                  ;
 35408                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 35409                                  ;
 35410                                  ;   INPUT
 35411                                  ;    ES:SI -> position in config.sys
 35412                                  ;       CX == remaining bytes in config.sys
 35413                                  ;
 35414                                  ;   OUTPUT
 35415                                  ;       CF set if EOF hit
 35416                                  ;       AL == 1st char of token
 35417                                  ;    ES:SI -> just past the token
 35418                                  ;       CX == # bytes remaining from that point
 35419                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 35420                                  ;
 35421                                  ;   OTHER REGS USED
 35422                                  ;       AX
 35423                                  ;
 35424                                  ;   NOTES
 35425                                  ;       None
 35426                                  ;
 35427                                  ;   HISTORY
 35428                                  ;       Created 16-Mar-1992 by JeffPar
 35429                                  ;
 35430                                  ;----------------------------------------------------------------------------
 35431                                  
 35432                                  skip_delim:       ; returns carry set if eol/eof
 35433                                          call    get_char        ;
 35434                                          lea     bx,[si-1]       ; also returns BX -> next token
 35435                                          jc	short skip_token_done ;
 35436                                          call    delim           ;
 35437                                          je	short skip_delim ;
 35438                                          jmp	short skip_check_eol  ; 13/05/2019
 35439                                  
 35440                                  ;----------------------------------------------------------------------------
 35441                                  ;
 35442                                  ;   skip_opt_line: same as skip_line provided AL != LF
 35443                                  ;
 35444                                  ;   INPUT
 35445                                  ;       AL == last character read
 35446                                  ;    ES:SI -> position in config.sys
 35447                                  ;       CX == remaining bytes in config.sys
 35448                                  ;
 35449                                  ;   OUTPUT
 35450                                  ;       CF set if EOF hit
 35451                                  ;       AL == 1st char of new line
 35452                                  ;    ES:SI -> just past 1st char of new line
 35453                                  ;       CX == # bytes remaining from that point
 35454                                  ;
 35455                                  ;   OTHER REGS USED
 35456                                  ;       AX
 35457                                  ;
 35458                                  ;   NOTES
 35459                                  ;       In other words, the purpose here is to skip to the next line,
 35460                                  ;       unless ES:SI is already sitting at the front of the next line (which
 35461                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 35462                                  ;
 35463                                  ;   HISTORY
 35464                                  ;       Created 16-Mar-1992 by JeffPar
 35465                                  ;
 35466                                  ;----------------------------------------------------------------------------
 35467                                  
 35468                                  skip_opt_line:
 35469                                          cmp     al,lf ; 0Ah
 35470                                          je	short skip_line_done
 35471                                       
 35472                                  	; fall into skip_line
 35473                                  
 35474                                  ;----------------------------------------------------------------------------
 35475                                  ;
 35476                                  ;   skip_line: skip to the next line
 35477                                  ;
 35478                                  ;   INPUT
 35479                                  ;    ES:SI -> position in config.sys
 35480                                  ;       CX == remaining bytes in config.sys
 35481                                  ;
 35482                                  ;   OUTPUT
 35483                                  ;       CF set if EOF hit
 35484                                  ;    ES:SI -> just past 1st char of new line
 35485                                  ;       CX == # bytes remaining from that point
 35486                                  ;
 35487                                  ;   OTHER REGS USED
 35488                                  ;       AX
 35489                                  ;
 35490                                  ;   NOTES
 35491                                  ;       None
 35492                                  ;
 35493                                  ;   HISTORY
 35494                                  ;       Created 16-Mar-1992 by JeffPar
 35495                                  ;
 35496                                  ;----------------------------------------------------------------------------
 35497                                  
 35498                                  skip_line:
 35499                                          call    get_char
 35500                                          jc	short skip_line_done
 35501                                          cmp     al,lf ; 0Ah
 35502                                          jne	short skip_line
 35503                                  skip_line_done:
 35504                                  num_done:	; 18/12/2022
 35505                                          retn
 35506                                  
 35507                                  ;----------------------------------------------------------------------------
 35508                                  ;
 35509                                  ;   get_number: return binary equivalent of numeric string
 35510                                  ;
 35511                                  ;   INPUT
 35512                                  ;    ES:SI -> position in config.sys
 35513                                  ;       CX == remaining bytes in config.sys
 35514                                  ;
 35515                                  ;   OUTPUT
 35516                                  ;       AL == non-digit encountered
 35517                                  ;       BX == binary #
 35518                                  ;    ES:SI -> just past 1st non-digit
 35519                                  ;       CX == # bytes remaining from that point
 35520                                  ;
 35521                                  ;   OTHER REGS USED
 35522                                  ;       AX
 35523                                  ;
 35524                                  ;   NOTES
 35525                                  ;       None
 35526                                  ;
 35527                                  ;   HISTORY
 35528                                  ;       Created 16-Mar-1992 by JeffPar
 35529                                  ;
 35530                                  ;----------------------------------------------------------------------------
 35531                                  
 35532                                  ; 13/05/2019
 35533                                  
 35534                                  get_number:
 35535                                          sub     bx,bx           ; BX = result
 35536                                  num_loop:
 35537                                          call    get_char        ;
 35538                                          jc	short num_done	;
 35539                                          cmp     al,'0'          ; convert to value
 35540                                          jb	short num_done	; no more number
 35541                                          cmp     al,'9'          ;
 35542                                          ja	short num_done	;
 35543                                          push    ax              ;
 35544                                          mov     ax,10           ;
 35545                                          push    dx              ;
 35546                                          mul     bx              ;
 35547                                          pop     dx              ;
 35548                                          mov     bx,ax           ;
 35549                                          pop     ax              ;
 35550                                          sub     al,'0'          ;
 35551                                          cbw                     ;
 35552                                          add     bx,ax           ;
 35553                                          jmp	short num_loop	;
 35554                                  
 35555                                  	; 18/12/2022
 35556                                  ;num_done:
 35557                                          ;retn
 35558                                  
 35559                                  ;----------------------------------------------------------------------------
 35560                                  ;
 35561                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 35562                                  ;
 35563                                  ;   INPUT
 35564                                  ;    ES:SI -> position in config.sys
 35565                                  ;       CX == remaining bytes in config.sys
 35566                                  ;
 35567                                  ;   OUTPUT
 35568                                  ;       AL == next character
 35569                                  ;    ES:SI -> just past next character
 35570                                  ;       CX == # bytes remaining from that point
 35571                                  ;
 35572                                  ;   OTHER REGS USED
 35573                                  ;       AX
 35574                                  ;
 35575                                  ;   NOTES
 35576                                  ;       None
 35577                                  ;
 35578                                  ;   HISTORY
 35579                                  ;       Created 16-Mar-1992 by JeffPar
 35580                                  ;
 35581                                  ;----------------------------------------------------------------------------
 35582                                  
 35583                                  get_char:
 35584                                          sub     cx,1            ; use SUB to set carry,zero
 35585                                          jb	short get_fail	; out of data
 35586                                          ;lods	byte ptr es:[si] ;
 35587                                  	es	
 35588                                  	lodsb
 35589                                          mov     ah,al           ;
 35590                                          retn			;
 35591                                  get_fail:                       ; restore CX to zero
 35592                                          mov     cx,0            ; leave carry set, zero not set
 35593                                  nearby_ret:
 35594                                          retn
 35595                                  
 35596                                  ;----------------------------------------------------------------------------
 35597                                  ;
 35598                                  ;   query_user: ask user whether to execute current config.sys command
 35599                                  ;
 35600                                  ;   INPUT
 35601                                  ;       AL == current command code
 35602                                  ;    ES:SI -> current command line in config.sys
 35603                                  ;    config_cmd == current command code, but with QUERY bit intact
 35604                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 35605                                  ;
 35606                                  ;   OUTPUT
 35607                                  ;       CF set if command should be ignored (it is also REM'ed out)
 35608                                  ;
 35609                                  ;   OTHER REGS USED
 35610                                  ;       BX, CX, DX, DI
 35611                                  ;
 35612                                  ;   NOTES
 35613                                  ;       None
 35614                                  ;
 35615                                  ;   HISTORY
 35616                                  ;       Created 16-Mar-1992 by JeffPar
 35617                                  ;
 35618                                  ;----------------------------------------------------------------------------
 35619                                  
 35620                                  	; 12/12/2022
 35621                                  query_user:
 35622                                          test    byte [bQueryOpt],4	; answer no to everything?
 35623                                          ;jz	short qu_1		;
 35624                                          ; 12/12/2022
 35625                                  	;jmp	short skip_all		;
 35626                                  	jnz	short skip_all
 35627                                  qu_1:
 35628                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 35629                                          jnz	short nearby_ret	; yes (and return carry clear!)
 35630                                          push    ax                      ;
 35631                                          mov     al,[config_cmd]         ;
 35632                                          test    byte [bQueryOpt],1	; query every command?
 35633                                          jnz	short query_all		; yes
 35634                                          test    al,CONFIG_OPTION_QUERY  ;
 35635                                          ;jnz	short query_all		;
 35636                                          ; 12/12/2022
 35637                                  	;jmp	short do_cmd		;
 35638                                  	jz	short do_cmd ; cf=0
 35639                                  query_all:
 35640                                  
 35641                                  ;   Search for the command code (AL) in "comtab", and then print
 35642                                  ;   out the corresponding keyword, followed by the rest of the actual
 35643                                  ;   line pointed to by ES:SI
 35644                                  
 35645                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 35646                                          mov     dx,_$AutoPrmpt    	;
 35647                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35648                                          jz	short generic_prompt	; config_cmd must have been 0
 35649                                  
 35650                                          mov     dh,al                   ; save config_cmd in DH
 35651                                          sub     bx,bx                   ;
 35652                                          mov     di,comtab		;
 35653                                  find_match:                             ;
 35654                                          mov     bl,[di]                 ; get size of current keyword
 35655                                          or      bl,bl                   ;
 35656                                          jz	short line_print	; end of table
 35657                                          inc     di                      ;
 35658                                          cmp     al,[di+bx]              ; match?
 35659                                          je	short cmd_match		; yes
 35660                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 35661                                  	; 13/05/2019	
 35662                                          jmp	short find_match	; loop
 35663                                  cmd_match:                              ;
 35664                                          mov     cl,[di-1]               ;
 35665                                          mov     ch,0                    ;
 35666                                          mov     ah,STD_CON_OUTPUT ; 2
 35667                                  cmd_print:                              ;
 35668                                          mov     al,[di]                 ;
 35669                                          inc     di                      ;
 35670                                          mov     dl,al                   ;
 35671                                          int     21h                     ;
 35672                                          loop    cmd_print               ;
 35673                                          mov     dl,'='                  ;
 35674                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 35675                                          jne	short cmd_notset	;
 35676                                          mov     dl,' '                  ;
 35677                                  cmd_notset:
 35678                                          int     21h                     ; '=' looks funny on SET commands
 35679                                  line_print:                             ;
 35680                                  	;lods	byte ptr es:[si]        ;
 35681                                          es
 35682                                  	lodsb
 35683                                  	or      al,al                   ;
 35684                                          jnz	short non_null		;
 35685                                          mov     al,' '                  ;
 35686                                  non_null:                               ;
 35687                                          cmp     al,' '                  ; control code?
 35688                                          jb	short prompt_user	; yes, assume end of line
 35689                                          jne	short non_space		;
 35690                                          cmp     byte [es:si],' '	;
 35691                                          jb	short prompt_user	;
 35692                                  non_space:                              ;
 35693                                          mov     dl,al                   ;
 35694                                          mov     ah,STD_CON_OUTPUT ; 2	;
 35695                                          int     21h                     ;
 35696                                          jmp	short line_print	;
 35697                                  prompt_user:                            ;
 35698                                          mov     dx,_$InterPrmpt		;
 35699                                  
 35700                                  generic_prompt:
 35701                                          call    print                   ;
 35702                                  input_loop:                             ;
 35703                                          mov     ah,0                    ; read a key
 35704                                          int     16h                     ;
 35705                                          or      al,al                   ; is it a function key?
 35706                                          jnz	short not_func		; no
 35707                                          cmp     ah,3Fh                  ; F5 function key?
 35708                                          jne	short input_loop	; no
 35709                                          mov     al,[_$NO]                  ;
 35710                                          or      byte [bQueryOpt],4	; no more queries
 35711                                          jmp     short legal_char        ;
 35712                                  not_func:
 35713                                          and     al,~20h ; 0DFh		; converting to upper case
 35714                                          cmp     al,[_$NO]		; verify character is legal
 35715                                          je	short legal_char	;
 35716                                          cmp     al,[_$YES]		;
 35717                                          je	short legal_char	;
 35718                                          cmp     byte [config_cmd],0	;
 35719                                          je	short input_loop	; don't allow Esc on this query
 35720                                          cmp     al,1Bh                  ; Esc?
 35721                                          jne	short input_loop	;
 35722                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 35723                                          mov     al,[_$YES]
 35724                                  legal_char:                             ;
 35725                                          call    disp_input              ;
 35726                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 35727                                  
 35728                                          cmp     al,[_$NO]		; process line?
 35729                                          je	short skip_cmd		; no
 35730                                  	; 12/12/2022
 35731                                  	clc
 35732                                  do_cmd:
 35733                                  	pop     ax			;
 35734                                  	; 12/12/2022
 35735                                  	; cf=0
 35736                                  	;clc				; just do the command
 35737                                  	retn
 35738                                  
 35739                                  skip_cmd:
 35740                                  	pop     ax			;
 35741                                  skip_all:
 35742                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 35743                                  	stc
 35744                                  	retn
 35745                                  
 35746                                  ;----------------------------------------------------------------------------
 35747                                  ;
 35748                                  ;   print_error: displays multi-config error conditions
 35749                                  ;
 35750                                  ;   INPUT
 35751                                  ;    Carry set to pause, clear to not
 35752                                  ;    ES:SI -> current command line in config.sys
 35753                                  ;
 35754                                  ;   OUTPUT
 35755                                  ;       None
 35756                                  ;
 35757                                  ;   OTHER REGS USED
 35758                                  ;       None
 35759                                  ;
 35760                                  ;   NOTES
 35761                                  ;       None
 35762                                  ;
 35763                                  ;   HISTORY
 35764                                  ;       Created 16-Mar-1992 by JeffPar
 35765                                  ;
 35766                                  ;----------------------------------------------------------------------------
 35767                                  
 35768                                  print_error:
 35769                                          push    ax
 35770                                          push    bx
 35771                                          push    cx
 35772                                          push    dx
 35773                                          push    ds
 35774                                          push    cs
 35775                                          pop     ds
 35776                                          pushf
 35777                                          call    get_linenum
 35778                                          mov     [linecount],bx
 35779                                          call    error_line
 35780                                          popf
 35781                                          jnc	short pe_ret
 35782                                          mov     dx,_$PauseMsg
 35783                                          call    print
 35784                                          mov     ax,0C07h		; flush input buffer, then wait for key
 35785                                          int     21h			; wait for a key
 35786                                          or      al,al			; extended key?
 35787                                          jnz	short pe_1		; no
 35788                                          mov     ah,07h			; yes
 35789                                          int     21h			; eat it too
 35790                                  pe_1:     
 35791                                  	mov     dx,crlfm
 35792                                          call    print
 35793                                  pe_ret: 
 35794                                  	pop     ds
 35795                                          pop     dx
 35796                                          pop     cx
 35797                                          pop     bx
 35798                                          pop     ax
 35799                                  	retn
 35800                                  
 35801                                  ;----------------------------------------------------------------------------
 35802                                  
 35803                                  ;   This function is very simple:  it merely prepends a "/D" to the
 35804                                  ;   command-line for the shell;  this (undocumented) switch disables
 35805                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 35806                                  ;   displayed when there's no AUTOEXEC.BAT.
 35807                                  
 35808                                  disable_autoexec:
 35809                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 35810                                  	; 17/04/2019 - Retro DOS v4.0
 35811                                  
 35812                                  	test	byte [bQueryOpt],4
 35813                                  	jz	short disable_exit
 35814                                  	test	byte [dae_flag],1
 35815                                  	jnz	short disable_exit
 35816                                  	or	byte [dae_flag],1
 35817                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35818                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35819                                  	mov     dx,'D ' ; 2044h
 35820                                  dae_1:
 35821                                          ;mov	al,[def_swchr]
 35822                                  	mov     al,[command_line-1]     ; get default switchchar
 35823                                          or      al,al                   ; anything there?
 35824                                          jz	short disable_exit	; no, disable_autoexec already called
 35825                                          mov     bl,[command_line]       ;
 35826                                          mov     bh,0                    ; BX == command-line length
 35827                                          mov     cx,bx                   ;
 35828                                          add     bl,3                    ;
 35829                                          cmp     bl,126                  ;
 35830                                          ja	short disable_exit	;
 35831                                          mov     [command_line],bl       ; update length
 35832                                          add     bx,command_line+1	; make sure we move the NULL too
 35833                                          inc     cx                      ; (just for consistency sake)
 35834                                  disable_loop:                           ;
 35835                                          mov     ah,[bx-3]               ;
 35836                                          mov     [bx],ah                 ;
 35837                                          dec     bx                      ;
 35838                                          loop    disable_loop            ;
 35839                                          mov     [bx-2],al               ;
 35840                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35841                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35842                                          ;mov	byte [command_line-1],0 ;
 35843                                  disable_exit:                           ;
 35844                                          retn
 35845                                  
 35846                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35847                                  	cmp     byte [bQueryOpt],1
 35848                                  	jnz     short disable_exit
 35849                                  	test	byte [dae_flag],2
 35850                                  	jnz     short disable_exit
 35851                                  	or      byte [dae_flag],2
 35852                                  	mov     dx,'Y ' ; 2059h ; 11/09/2023
 35853                                  	jmp     short dae_1
 35854                                  
 35855                                  ;endif  ;MULTI_CONFIG
 35856                                  
 35857                                  %endif	; 02/11/2022
 35858                                  
 35859                                  
 35860                                  ; 19/04/2019 - Retro DOS v4.0
 35861                                  
 35862                                  ;----------------------------------------------------------------------------
 35863                                  ;
 35864                                  ; procedure : delim
 35865                                  ;
 35866                                  ;----------------------------------------------------------------------------
 35867                                  
 35868                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35869                                  ;
 35870                                  ;;ifdef	MULTI_CONFIG
 35871                                  ;
 35872                                  ;any_delim:
 35873                                  ;       cmp     al,cr
 35874                                  ;       je	short delim_ret
 35875                                  ;       cmp     al,lf
 35876                                  ;       je	short delim_ret
 35877                                  ;       cmp     al,'['
 35878                                  ;       je	short delim_ret
 35879                                  ;       cmp     al,']'
 35880                                  ;       je	short delim_ret
 35881                                  ;
 35882                                  ;;endif  ;MULTI_CONFIG
 35883                                  
 35884                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35885                                  	; (SYSINIT:3450h)	
 35886                                  delim:
 35887 00002FC0 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35888 00002FC2 7417                    	je	short delim_ret
 35889                                  
 35890 00002FC4 3C00                    	cmp	al,0		; special case for sysinit!!!
 35891 00002FC6 7413                    	je	short delim_ret
 35892                                  
 35893                                  org_delim:			; used by organize routine except for getting
 35894 00002FC8 3C20                    	cmp	al,' '          ; the filename.
 35895 00002FCA 740F                    	je	short delim_ret
 35896 00002FCC 3C09                            cmp     al,tab ; 9
 35897 00002FCE 740B                    	je	short delim_ret
 35898 00002FD0 3C3D                    	cmp	al,'='
 35899 00002FD2 7407                    	je	short delim_ret
 35900 00002FD4 3C2C                    	cmp	al,','
 35901 00002FD6 7403                    	je	short delim_ret
 35902 00002FD8 3C3B                    	cmp	al,';'
 35903                                  
 35904                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35905                                  ;ifdef	MULTI_CONFIG
 35906                                  ;   Make sure there's no chance of a false EOF indication
 35907 00002FDA F8                      	clc	; 09/09/2023 ('SkipDelim' must not be return with cf=1)
 35908                                  ;endif
 35909                                  	; 02/11/2022
 35910                                  delim_ret:
 35911                                  nl_ret:	; 10/09/2023
 35912 00002FDB C3                      	retn
 35913                                  
 35914                                  ;----------------------------------------------------------------------------
 35915                                  ;
 35916                                  ; procedure : newline
 35917                                  ;
 35918                                  ;  newline returns with first character of next line
 35919                                  ;
 35920                                  ;----------------------------------------------------------------------------
 35921                                  
 35922                                  newline:
 35923 00002FDC E80600                  	call	getchr			;skip non-control characters
 35924 00002FDF 72FA                    	jc	short nl_ret
 35925 00002FE1 3C0A                    	cmp	al,lf			;look for line feed
 35926 00002FE3 75F7                    	jne	short newline
 35927                                  
 35928                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 35929                                  	;call	getchr
 35930                                  ;nl_ret:
 35931                                  	;retn
 35932                                  	; 10/09/2023
 35933                                  	;jmp	short getchr
 35934                                  
 35935                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 35936                                  %if 1
 35937                                  
 35938                                  ;----------------------------------------------------------------------------
 35939                                  ;
 35940                                  ; procedure : getchr
 35941                                  ;
 35942                                  ;----------------------------------------------------------------------------
 35943                                  
 35944                                  	; 24/10/2022
 35945                                  getchr:
 35946                                  	; 12/12/2022
 35947                                  	;push	cx
 35948                                  	;mov	cx,[count]
 35949                                  	;jcxz	nochar
 35950                                  	; 12/12/2022
 35951 00002FE5 833E[D203]01            	cmp	word [count],1 
 35952 00002FEA 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 35953                                  	
 35954 00002FEC 8B36[D603]              	mov	si,[chrptr]
 35955 00002FF0 268A04                  	mov	al,[es:si]
 35956 00002FF3 FF0E[D203]              	dec	word [count]
 35957 00002FF7 FF06[D603]              	inc	word [chrptr]
 35958                                  	; 12/12/202
 35959                                  	; cf=0
 35960                                  	;clc
 35961                                  ;get_ret:
 35962                                  	;pop	cx
 35963                                  	;retn
 35964                                  nochar: 
 35965                                  	; 12/12/2022
 35966                                  	; cf=1
 35967                                  	;stc
 35968                                  	;jmp	short get_ret
 35969                                  	
 35970 00002FFB C3                      	retn
 35971                                  %endif
 35972                                  
 35973                                  ;----------------------------------------------------------------------------
 35974                                  ; 
 35975                                  ; procedure : mapcase
 35976                                  ;
 35977                                  ;----------------------------------------------------------------------------
 35978                                  
 35979                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35980                                  mapcase:
 35981 00002FFC 51                      	push	cx
 35982 00002FFD 56                      	push	si
 35983 00002FFE 1E                      	push	ds
 35984                                  
 35985 00002FFF 06                      	push	es
 35986 00003000 1F                      	pop	ds
 35987                                  
 35988                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35989                                  ;;ifdef	MULTI_CONFIG
 35990                                  ;
 35991                                  ;	mov	bl,al                   ; same cmd code this line
 35992                                  ;;else
 35993                                  ;;	xor	si,si
 35994                                  ;;endif
 35995                                  	; 02/11/2022
 35996 00003001 31F6                    	xor	si, si
 35997                                  
 35998                                  convloop:
 35999 00003003 AC                      	lodsb
 36000 00003004 3C61                    	cmp	al,'a'
 36001 00003006 7209                    	jb	short noconv
 36002 00003008 3C7A                    	cmp	al,'z'
 36003 0000300A 7705                    	ja	short noconv
 36004 0000300C 2C20                    	sub	al,20h
 36005 0000300E 8844FF                  	mov	[si-1],al
 36006                                  noconv:
 36007                                  
 36008                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36009                                  ;;ifdef	MULTI_CONFIG
 36010                                  ;;
 36011                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 36012                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 36013                                  ;;   the line is a SET command or not (since we don't want to upper-case
 36014                                  ;;   anything after the "=" in a SET)
 36015                                  ;;
 36016                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 36017                                  ;       jne	short check_eol		; no, just check for end-of-line
 36018                                  ;       cmp     al,'='                  ; separator between SET var and value?
 36019                                  ;       je	short convdone		; yes
 36020                                  ;check_eol:
 36021                                  ;       cmp     al,cr
 36022                                  ;       je	short convdone
 36023                                  ;       cmp     al,lf
 36024                                  ;       je	short convdone
 36025                                  ;;endif
 36026                                  	
 36027                                  	; 02/11/2022
 36028 00003011 E2F0                    	loop	convloop
 36029                                  convdone:
 36030 00003013 1F                      	pop	ds
 36031 00003014 5E                      	pop	si
 36032 00003015 59                      	pop	cx
 36033 00003016 C3                      	retn
 36034                                  
 36035                                  ;----------------------------------------------------------------------------
 36036                                  ;
 36037                                  ; procedure : round
 36038                                  ;
 36039                                  ; round the values in memlo and memhi to paragraph boundary.
 36040                                  ; perform bounds check.
 36041                                  ;
 36042                                  ;----------------------------------------------------------------------------
 36043                                  
 36044                                  round:
 36045                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36046 00003017 1E                      	push	ds
 36047 00003018 0E                      	push	cs
 36048 00003019 1F                      	pop	ds
 36049                                  
 36050 0000301A 50                      	push	ax
 36051                                  	;mov	ax,[cs:memlo]
 36052 0000301B A1[DE03]                	mov	ax,[memlo]
 36053                                  
 36054 0000301E E883E0                  	call	ParaRound		; para round up
 36055                                  
 36056                                  	;add	[cs:memhi],ax
 36057 00003021 0106[E003]              	add	[memhi],ax
 36058                                  	;mov	word [cs:memlo],0
 36059 00003025 C706[DE03]0000          	mov	word [memlo],0
 36060                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 36061 0000302B A1[E003]                	mov	ax,[memhi]
 36062                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 36063 0000302E 3B06[A302]              	cmp	ax,[ALLOCLIM]
 36064                                  	;jae	short mem_err
 36065                                  	; 17/09/2023
 36066 00003032 7322                    	jae	short mem_err2 ; ds = cs
 36067                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 36068 00003034 F606[1014]02            	test	byte [setdevmarkflag],for_devmark ; 2
 36069 00003039 7416                    	jz	short skip_set_devmarksize
 36070 0000303B 06                      	push	es
 36071 0000303C 56                      	push	si
 36072                                  	;mov	si,[cs:devmark_addr]
 36073 0000303D 8B36[0E14]              	mov	si,[devmark_addr]
 36074 00003041 8EC6                    	mov	es,si
 36075 00003043 29F0                    	sub	ax,si
 36076 00003045 48                      	dec	ax
 36077                                  	;mov	[es:3],ax
 36078 00003046 26A30300                	mov	[es:devmark.size],ax	; paragraph
 36079                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 36080 0000304A 8026[1014]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 36081 0000304F 5E                      	pop	si
 36082 00003050 07                      	pop	es
 36083                                  skip_set_devmarksize:
 36084 00003051 58                      	pop	ax
 36085                                  
 36086                                  	; 10/09/2023
 36087 00003052 1F                      	pop	ds
 36088                                  
 36089                                  	; 11/12/2022
 36090                                  	; cf = 0
 36091                                  	; 02/11/2022
 36092                                  	;clc	; ? (not needed here)	; clear carry
 36093 00003053 C3                      	retn
 36094                                  
 36095                                  ;----------------------------------------------------------------------------
 36096                                  
 36097                                  mem_err:
 36098                                  	; 11/12/2022
 36099 00003054 0E                      	push	cs
 36100 00003055 1F                      	pop	ds
 36101                                  mem_err2:
 36102 00003056 BA[3737]                	mov	dx,badmem
 36103                                  	;push	cs
 36104                                  	;pop	ds
 36105 00003059 E83102                  	call	print
 36106 0000305C E9EBD7                  	jmp	stall
 36107                                  
 36108                                  ;----------------------------------------------------------------------------
 36109                                  ;
 36110                                  ; procedure : calldev
 36111                                  ;
 36112                                  ;----------------------------------------------------------------------------
 36113                                  
 36114                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36115                                  	; (SYSINIT:34E0h)
 36116                                  calldev:
 36117 0000305F 2E8E1E[681E]            	mov	ds,[cs:DevEntry+2]
 36118 00003064 2E031E[661E]            	add	bx,[cs:DevEntry]	; do a little relocation
 36119 00003069 8B07                    	mov	ax,[bx]
 36120                                  
 36121 0000306B 2EFF36[661E]            	push	word [cs:DevEntry]
 36122 00003070 2EA3[661E]              	mov	[cs:DevEntry],ax
 36123 00003074 BB[E603]                	mov	bx,packet
 36124 00003077 2EFF1E[661E]            	call	far [cs:DevEntry]
 36125 0000307C 2E8F06[661E]            	pop	word [cs:DevEntry]
 36126 00003081 C3                      	retn
 36127                                  
 36128                                  ;----------------------------------------------------------------------------
 36129                                  ;
 36130                                  ; procedure : todigit
 36131                                  ;
 36132                                  ;----------------------------------------------------------------------------
 36133                                  
 36134                                  todigit:
 36135 00003082 2C30                    	sub	al,'0'
 36136                                  	;jb	short notdig  ; 02/11/2022
 36137                                  	; 12/12/2022
 36138 00003084 7203                    	jb	short notdig2
 36139                                  	;cmp	al,9
 36140                                  	;ja	short notdig
 36141                                  	;clc
 36142                                  	;retn
 36143                                  	; 12/12/2022
 36144 00003086 3C0A                    	cmp	al,10
 36145 00003088 F5                      	cmc
 36146                                  notdig:
 36147                                  	;stc
 36148                                  notdig2:
 36149 00003089 C3                      	retn
 36150                                  
 36151                                  ;----------------------------------------------------------------------------
 36152                                  ;
 36153                                  ; procedure : getnum
 36154                                  ;
 36155                                  ; getnum parses a decimal number.
 36156                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 36157                                  ; error), if number is bad carry is set, zero is set, ax=0.
 36158                                  ;
 36159                                  ;----------------------------------------------------------------------------
 36160                                  
 36161                                  getnum:
 36162 0000308A 53                      	push	bx
 36163 0000308B 31DB                    	xor	bx,bx			; running count is zero
 36164                                  b2:
 36165 0000308D E8F2FF                  	call	todigit 		; do we have a digit ?
 36166 00003090 7247                    	jc	short badnum		; no, bomb
 36167                                  
 36168 00003092 93                      	xchg	ax,bx			; put total in ax
 36169 00003093 53                      	push	bx			; save digit (0 to 9)
 36170                                  	;mov	bx,10			; base of arithmetic
 36171                                  	; 12/12/2022
 36172 00003094 B30A                    	mov	bl,10
 36173 00003096 F7E3                    	mul	bx			; shift by one decimal digit
 36174 00003098 5B                      	pop	bx			; get back digit (0 to 9)
 36175 00003099 00D8                    	add	al,bl			; get total
 36176 0000309B 80D400                  	adc	ah,0			; make that 16 bits
 36177 0000309E 7239                    	jc	short badnum		; too big a number
 36178                                  
 36179 000030A0 93                      	xchg	ax,bx			; stash total
 36180                                  
 36181 000030A1 E841FF                  	call	getchr			;get next digit
 36182 000030A4 722D                    	jc	short b1		; no more characters
 36183 000030A6 3C20                    	cmp	al,' ' 			; space?
 36184 000030A8 741F                    	je	short b15		; then end of digits
 36185 000030AA 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 36186 000030AC 741B                    	je	short b15		; then end of digits.
 36187 000030AE 3C09                    	cmp	al, tab ; 9		; tab
 36188 000030B0 7417                    	je	short b15
 36189 000030B2 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 36190 000030B7 7410                    	je	short b15
 36191 000030B9 3C2F                    	cmp	al,'/'			; see if another switch follows
 36192                                  	;nop				; cas - remnant of old bad code
 36193                                  	;nop
 36194                                  	; 12/12/2022
 36195                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36196                                  	;nop
 36197                                  	;nop
 36198 000030BB 740C                    	je	short b15
 36199 000030BD 3C0A                    	cmp	al,lf			; line-feed?
 36200 000030BF 7408                    	je	short b15
 36201 000030C1 3C0D                    	cmp	al,cr			; carriage return?
 36202 000030C3 7404                    	je	short b15
 36203 000030C5 08C0                    	or	al,al			; end of line separator?
 36204 000030C7 75C4                    	jnz	short b2		; no, try as a valid char...
 36205                                  b15:
 36206 000030C9 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 36207 000030CE 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 36208                                  b1:
 36209 000030D3 89D8                    	mov	ax,bx			; get proper count
 36210 000030D5 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 36211 000030D7 5B                      	pop	bx
 36212 000030D8 C3                      	retn
 36213                                  badnum:
 36214                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36215                                  	;mov	byte [cs:sepchr],0
 36216 000030D9 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 36217                                  	; 12 /12/2022
 36218 000030DB 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 36219 000030DF 5B                      	pop	bx
 36220 000030E0 F9                      	stc				; and carry set
 36221 000030E1 C3                      	retn
 36222                                  
 36223                                  ;****************************************************************************
 36224                                  
 36225                                  setdoscountryinfo:
 36226                                  
 36227                                  ;----------------------------------------------------------------------------
 36228                                  ;input: es:di -> pointer to dos_country_cdpg_info
 36229                                  ;	ds:0  -> buffer.
 36230                                  ;	si = 0
 36231                                  ;	ax = country id
 36232                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 36233                                  ;	bx = file handle
 36234                                  ;	this routine can handle maximum 438 country_data entries.
 36235                                  ;
 36236                                  ;output: dos_country_cdpg_info set.
 36237                                  ;	 carry set if any file read failure or wrong information in the file.
 36238                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 36239                                  ;	 codepage_id in the file.
 36240                                  ;----------------------------------------------------------------------------
 36241                                  
 36242                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36243                                  
 36244 000030E2 57                      	push	di
 36245 000030E3 50                      	push	ax
 36246 000030E4 52                      	push	dx
 36247                                  
 36248 000030E5 31C9                    	xor	cx,cx
 36249 000030E7 31D2                    	xor	dx,dx
 36250 000030E9 B80002                  	mov	ax,512			;read 512 bytes
 36251 000030EC E84301                  	call	readincontrolbuffer	;read the file header
 36252 000030EF 724A                    	jc	short setdosdata_fail
 36253                                  
 36254 000030F1 06                      	push	es
 36255 000030F2 56                      	push	si
 36256                                  
 36257 000030F3 0E                      	push	cs
 36258 000030F4 07                      	pop	es
 36259                                  
 36260 000030F5 BF[5933]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 36261 000030F8 B90800                  	mov	cx,8			;length of the signature
 36262 000030FB F3A6                    	repz	cmpsb
 36263                                  
 36264 000030FD 5E                      	pop	si
 36265 000030FE 07                      	pop	es
 36266 000030FF 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 36267                                  
 36268 00003101 83C612                  	add	si,18			;si -> county info type
 36269 00003104 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 36270 00003107 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 36271                                  
 36272 00003109 46                      	inc	si			;si -> file offset
 36273 0000310A 8B14                    	mov	dx,[si]			;get the info file offset.
 36274 0000310C 8B4C02                  	mov	cx,[si+2]
 36275 0000310F B80018                  	mov	ax,6144			;read 6144 bytes.
 36276 00003112 E81D01                  	call	readincontrolbuffer	;read info
 36277 00003115 7224                    	jc	short setdosdata_fail
 36278                                  
 36279 00003117 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 36280 00003119 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 36281 0000311D 771C                    	ja	short setdosdata_fail
 36282                                  
 36283 0000311F 46                      	inc	si
 36284 00003120 46                      	inc	si			;si -> entry information packet
 36285 00003121 5A                      	pop	dx			;restore code page id
 36286 00003122 58                      	pop	ax			;restore country id
 36287 00003123 5F                      	pop	di
 36288                                  
 36289                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 36290 00003124 3B4402                  	cmp	ax,[si+2]		;compare country_id
 36291 00003127 7509                    	jne	short setdoscntry_next
 36292                                  
 36293                                  	;cmp	dx,0			;no user specified code page ?
 36294                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 36295                                  	; 10/09/2023
 36296 00003129 09D2                    	or	dx,dx ; cmp dx,0
 36297 0000312B 7413                    	jz	short setdoscntry_any_codepage
 36298 0000312D 3B5404                  	cmp	dx,[si+4]		;compare code page id
 36299 00003130 7411                    	je	short setdoscntry_got_it
 36300                                  
 36301                                  setdoscntry_next:
 36302 00003132 0334                    	add	si,[si]			;next entry
 36303 00003134 46                      	inc	si
 36304 00003135 46                      	inc	si			;take a word for size of entry itself
 36305 00003136 E2EC                    	loop	setdoscntry_find
 36306                                  
 36307                                  	;mov	cx,-1			;signals that bad country id entered.
 36308                                  	; 10/09/2023
 36309 00003138 49                      	dec	cx ; 0 -> -1
 36310                                  setdoscntry_fail:
 36311 00003139 F9                      	stc
 36312 0000313A C3                      	retn
 36313                                  
 36314                                  setdosdata_fail:
 36315 0000313B 5E                      	pop	si
 36316 0000313C 59                      	pop	cx
 36317 0000313D 5F                      	pop	di
 36318 0000313E EBF9                    	jmp	short setdoscntry_fail
 36319                                  
 36320                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 36321 00003140 8B5404                  	mov	dx,[si+4]
 36322                                  
 36323                                  setdoscntry_got_it:			;found the matching entry
 36324 00003143 2E8916[6133]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 36325 00003148 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 36326 0000314B 8B4C0C                  	mov	cx,[si+12]
 36327 0000314E B80002                  	mov	ax,512 			;read 512 bytes
 36328 00003151 E8DE00                  	call	readincontrolbuffer
 36329 00003154 72E3                    	jc	short setdoscntry_fail
 36330                                  
 36331 00003156 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 36332 00003158 46                      	inc	si
 36333 00003159 46                      	inc	si			;si -> first entry
 36334                                  
 36335                                  setdoscntry_data:
 36336 0000315A 57                      	push	di			;es:di -> dos_country_cdpg_info
 36337 0000315B 51                      	push	cx			;save # of entry left
 36338 0000315C 56                      	push	si			;si -> current entry in control buffer
 36339                                  
 36340 0000315D 8A4402                  	mov	al,[si+2]		;get data entry id
 36341 00003160 E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 36342 00003163 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 36343                                  
 36344 00003165 8B5404                  	mov	dx,[si+4]		;get offset of data
 36345 00003168 8B4C06                  	mov	cx,[si+6]
 36346 0000316B B80042                  	mov	ax,4200h
 36347 0000316E F9                      	stc
 36348 0000316F CD21                    	int	21h			;move pointer
 36349 00003171 72C8                    	jc	short setdosdata_fail
 36350                                  
 36351 00003173 BA0002                  	mov	dx,512			;start of data buffer
 36352 00003176 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 36353 00003179 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 36354 0000317B F9                      	stc
 36355 0000317C CD21                    	int	21h			;read the country.sys data
 36356 0000317E 72BB                    	jc	short setdosdata_fail 	;read failure
 36357                                  
 36358 00003180 39C8                    	cmp	ax,cx
 36359 00003182 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 36360                                  
 36361 00003184 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 36362 00003187 8B4C06                  	mov	cx,[si+6]
 36363 0000318A B80042                  	mov	ax,4200h
 36364 0000318D F9                      	stc
 36365 0000318E CD21                    	int	21h			;move pointer back again
 36366 00003190 72A9                    	jc	short setdosdata_fail
 36367                                  
 36368 00003192 56                      	push	si
 36369 00003193 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 36370 00003196 8B0C                    	mov	cx,[si]
 36371 00003198 5E                      	pop	si
 36372 00003199 BA0002                  	mov	dx,512			;start of data buffer
 36373 0000319C 83C10A                  	add	cx,10			;signature + a word for the length itself
 36374 0000319F B43F                    	mov	ah,3Fh			;read the data from the file.
 36375 000031A1 F9                      	stc
 36376 000031A2 CD21                    	int	21h
 36377 000031A4 7295                    	jc	short setdosdata_fail
 36378                                  
 36379 000031A6 39C8                    	cmp	ax,cx
 36380 000031A8 7591                    	jne	short setdosdata_fail
 36381                                  
 36382 000031AA 8A4402                  	mov	al,[si+2]		;save data id for future use.
 36383 000031AD BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 36384 000031B0 8B0C                    	mov	cx,[si]			;get the length of the file
 36385 000031B2 41                      	inc	cx			;take care of a word for lenght of tab
 36386 000031B3 41                      	inc	cx			;itself.
 36387 000031B4 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 36388 000031B8 7781                    	ja	short setdosdata_fail
 36389                                  
 36390                                  	;if	bugfix
 36391 000031BA E83100                  	call	setdbcs_before_copy
 36392                                  	;endif
 36393                                  
 36394 000031BD 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 36395 000031BF 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 36396                                  
 36397 000031C1 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 36398                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 36399 000031C5 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 36400                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 36401                                  	
 36402 000031C9 57                      	push	di			;save di
 36403                                  
 36404                                  	;push	ax
 36405                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 36406                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 36407                                  	;pop	ax
 36408                                  	; 10/09/2023
 36409 000031CA 2EFF36[6133]            	push	word [cs:cntrycodepage_id]
 36410 000031CF 8F4404                  	pop	word [si+4]
 36411                                  
 36412                                  setdoscntry_mov:
 36413 000031D2 F3A4                    	rep	movsb			;copy the table into dos
 36414 000031D4 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 36415 000031D6 7509                    	jne	short setdoscntry_data_next
 36416                                  
 36417 000031D8 5F                      	pop	di			;restore di
 36418 000031D9 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 36419                                  	;pop	word [es:di+26]		;restore
 36420 000031DD 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 36421                                  	;pop	word [es:di+24]
 36422                                  
 36423                                  setdoscntry_data_next:
 36424 000031E1 5E                      	pop	si			;restore control buffer pointer
 36425 000031E2 59                      	pop	cx			;restore # of entries left
 36426 000031E3 5F                      	pop	di			;restore pointer to dso_country_cdpg
 36427 000031E4 0334                    	add	si,[si]			;try to get the next entry
 36428 000031E6 46                      	inc	si
 36429 000031E7 46                      	inc	si			;take a word of entry length itself
 36430 000031E8 49                      	dec	cx
 36431                                  	; 10/09/2023
 36432 000031E9 741B                    	jz	short setdoscntry_ok 
 36433                                  	;cmp	cx,0
 36434                                  	;je	short setdoscntry_ok
 36435 000031EB E96CFF                  	jmp	setdoscntry_data
 36436                                  
 36437                                  	; 18/12/2022
 36438                                  ;setdoscntry_ok:
 36439                                  	;retn
 36440                                  
 36441                                  ;----------------------------------------------------------------------------
 36442                                  
 36443                                  	;if	bugfix
 36444                                  
 36445                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36446                                  
 36447                                  setdbcs_before_copy:
 36448 000031EE 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 36449 000031F0 7514                    	jne	short sdbcsbc		; jump if not
 36450                                  	
 36451                                  	; 10/09/2023
 36452 000031F2 50                      	push	ax
 36453 000031F3 31C0                    	xor	ax,ax
 36454 000031F5 263905                  	cmp	[es:di],ax ; 0
 36455 000031F8 740B                    	je	short sdbcsbc_pop
 36456                                  	
 36457                                  	;cmp	word [es:di],0		; zero byte data block?
 36458                                  	;je	short sdbcsbc		; jump if so
 36459                                  
 36460 000031FA 57                      	push	di
 36461                                  	; 10/09/2023
 36462                                  	;push	ax
 36463 000031FB 51                      	push	cx
 36464 000031FC 268B0D                  	mov	cx,[es:di]		; load block length
 36465                                  	;add	di,2			; points actual data
 36466 000031FF 47                      	inc	di
 36467 00003200 47                      	inc	di
 36468                                  	;xor	al,al			; fill bytes
 36469 00003201 F3AA                    	rep	stosb			; clear data block
 36470 00003203 59                      	pop	cx
 36471                                  	;pop	ax
 36472 00003204 5F                      	pop	di
 36473                                  
 36474                                  sdbcsbc_pop:	; 10/09/2023
 36475 00003205 58                      	pop	ax
 36476                                  sdbcsbc:
 36477                                  setdoscntry_ok:	; 18/12/2022
 36478 00003206 C3                      	retn
 36479                                  
 36480                                  	;endif
 36481                                  
 36482                                  ;----------------------------------------------------------------------------
 36483                                  
 36484                                  getcountrydestination:
 36485                                  
 36486                                  ;----------------------------------------------------------------------------
 36487                                  ;get the destination address in the dos country info table.
 36488                                  ;
 36489                                  ;input: al - data id
 36490                                  ;	es:di -> dos_country_cdpg_info
 36491                                  ;on return:
 36492                                  ;	es:di -> destination address of the matching data id
 36493                                  ;	carry set if no matching data id found in dos.
 36494                                  ;----------------------------------------------------------------------------
 36495                                  
 36496                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36497                                  
 36498 00003207 51                      	push	cx
 36499                                  	;add	di,74
 36500 00003208 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 36501                                  					;skip the reserved area, syscodepage etc.
 36502 0000320B 268B0D                  	mov	cx,[es:di]		;get the number of entries
 36503 0000320E 47                      	inc	di
 36504 0000320F 47                      	inc	di			;si -> the first start entry id
 36505                                  
 36506                                  getcntrydest:
 36507 00003210 263805                  	cmp	byte [es:di],al
 36508 00003213 7413                    	je	short getcntrydest_ok
 36509                                  
 36510 00003215 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 36511 00003219 7405                    	je	short getcntrydest_1
 36512                                  
 36513 0000321B 83C705                  	add	di,5			;next data id
 36514 0000321E EB03                    	jmp	short getcntrydest_loop
 36515                                  
 36516                                  getcntrydest_1:
 36517                                  	;add	di,41
 36518 00003220 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 36519                                  getcntrydest_loop:
 36520 00003223 E2EB                    	loop	getcntrydest
 36521 00003225 F9                      	stc
 36522                                  	;jmp	short getcntrydest_exit
 36523                                  getcntrydest_exit:
 36524                                  	; 10/09/2023
 36525 00003226 59                      	pop	cx
 36526 00003227 C3                      	retn
 36527                                  
 36528                                  getcntrydest_ok:
 36529                                  	; 10/09/2023
 36530 00003228 47                      	inc	di
 36531                                  
 36532                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 36533                                  ;	jne	short getcntrydest_ok1
 36534                                  ;
 36535                                  ;	;inc	di			;now di -> cccountryinfolen
 36536                                  ;	jmp	short getcntrydest_exit
 36537                                  
 36538                                  	; 10/09/2023
 36539 00003229 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 36540 0000322B 74F9                    	je	short getcntrydest_exit
 36541                                  
 36542                                  getcntrydest_ok1:
 36543                                  	;les	di,[es:di+1]		;get the destination in es:di
 36544                                  	; 10/09/2023
 36545 0000322D 26C43D                  	les	di,[es:di]
 36546                                  ;getcntrydest_exit:
 36547 00003230 59                      	pop	cx
 36548 00003231 C3                      	retn
 36549                                  
 36550                                  ;----------------------------------------------------------------------------
 36551                                  
 36552                                  readincontrolbuffer:
 36553                                  
 36554                                  ;----------------------------------------------------------------------------
 36555                                  ;move file pointer to cx:dx
 36556                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 36557                                  ;si will be set to 0 hence ds:si points to the control buffer.
 36558                                  ;
 36559                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 36560                                  ;	 be moved.
 36561                                  ;	 ax - # of bytes to read
 36562                                  ;	 bx - file handle
 36563                                  ;	 ds - buffer seg.
 36564                                  ;return: the control data information is read into ds:0 - ds:0200.
 36565                                  ;	 cx,dx value destroyed.
 36566                                  ;	 carry set if error in reading file.
 36567                                  ;----------------------------------------------------------------------------
 36568                                  
 36569 00003232 50                      	push	ax			;# of bytes to read
 36570 00003233 B80042                  	mov	ax,4200h
 36571 00003236 F9                      	stc
 36572 00003237 CD21                    	int	21h			;move pointer
 36573 00003239 59                      	pop	cx			;# of bytes to read
 36574 0000323A 7209                    	jc	short ricb_exit
 36575                                  
 36576 0000323C 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 36577 0000323E 31F6                    	xor	si,si
 36578 00003240 B43F                    	mov	ah,3Fh			;read into the buffer
 36579 00003242 F9                      	stc
 36580 00003243 CD21                    	int	21h			;should be less than 1024 bytes.
 36581                                  ricb_exit:
 36582 00003245 C3                      	retn
 36583                                  
 36584                                  ;----------------------------------------------------------------------------
 36585                                  
 36586                                  ;! set_country_path procedure is not called from anywhere !
 36587                                  ; Erdogan Tan - 04/08/2023 (Retro DOS v4.2)
 36588                                  %if 0
 36589                                  
 36590                                  set_country_path:
 36591                                  
 36592                                  ;----------------------------------------------------------------------------
 36593                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 36594                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 36595                                  ;     assumes current directory is the root directory.
 36596                                  ;out: ds:di -> full path (cntry_drv).
 36597                                  ;     set the cntry_drv string from the country=,,path command.
 36598                                  ;     ds, es, si value saved.
 36599                                  ;----------------------------------------------------------------------------
 36600                                  
 36601                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 36602                                  	; (SYSINIT:4EF4h)
 36603                                  
 36604                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 36605                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:36DDh)
 36606                                  
 36607                                  	push	si
 36608                                  
 36609                                  	push	ds			;switch ds, es
 36610                                  	push	es
 36611                                  	pop	ds
 36612                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 36613                                  
 36614                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 36615                                  	jc	short scp_default_drv 	;no, use current default drive.
 36616                                  
 36617                                  	mov	al,[si]
 36618                                  	inc	si
 36619                                  	inc	si			;si -> next char after ":"
 36620                                  	jmp	short scp_setdrv
 36621                                  
 36622                                  scp_default_drv:
 36623                                  	mov	ah,19h
 36624                                  	int	21h
 36625                                  	add	al,"A"			;convert it to a character.
 36626                                  
 36627                                  scp_setdrv:
 36628                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 36629                                  	mov	di,cntry_path
 36630                                  	mov	al,[si]
 36631                                  	cmp	al, "\"
 36632                                  	je	short scp_root_dir
 36633                                  
 36634                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 36635                                  	;je	short scp_root_dir
 36636                                  	;jmp	short scp_path
 36637                                  	; 04/01/2023
 36638                                  	jne	short scp_path
 36639                                  
 36640                                  scp_root_dir:
 36641                                  	dec	di			;di -> cntry_root
 36642                                  scp_path:
 36643                                  	call	move_asciiz		;copy it
 36644                                  
 36645                                  	mov	di,cntry_drv
 36646                                  scpath_exit:
 36647                                  
 36648                                  	push	ds			;switch ds, es
 36649                                  	push	es
 36650                                  	pop	ds
 36651                                  	pop	es			;ds, es value restored
 36652                                  
 36653                                  	pop	si
 36654                                  	retn
 36655                                  
 36656                                  %endif
 36657                                  
 36658                                  ;----------------------------------------------------------------------------
 36659                                  
 36660                                  chk_drive_letter:
 36661                                  
 36662                                  ;check if ds:[si] is a drive letter followed by ":".
 36663                                  ;assume that every alpha character is already converted to upper case.
 36664                                  ;carry set if not.
 36665                                  
 36666                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 36667                                  
 36668 00003246 50                      	push	ax
 36669 00003247 803C41                  	cmp	byte [si],"A"
 36670                                  	;jb	short cdletter_no
 36671 0000324A 720C                    	jb	short cdletter_exit
 36672 0000324C 803C5A                  	cmp	byte [si],"Z"
 36673 0000324F 7706                    	ja	short cdletter_no
 36674 00003251 807C013A                	cmp	byte [si+1],":"
 36675                                  	;jne	short cdletter_no
 36676                                  	;jmp	short cdletter_exit
 36677                                  	; 10/09/2023
 36678 00003255 7401                    	je	short cdletter_exit
 36679                                  
 36680                                  cdletter_no:
 36681 00003257 F9                      	stc
 36682                                  cdletter_exit:
 36683 00003258 58                      	pop	ax
 36684 00003259 C3                      	retn
 36685                                  
 36686                                  ;----------------------------------------------------------------------------
 36687                                  
 36688                                  move_asciiz:
 36689                                  
 36690                                  ;in: ds:si -> source es:di -> target
 36691                                  ;out: copy the string until 0.
 36692                                  ;assumes there exists a 0.
 36693                                  
 36694                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 36695                                  
 36696                                  masciiz_loop:
 36697                                  	; 10/09/2023
 36698 0000325A F604FF                  	test	byte [si],0FFh
 36699 0000325D A4                      	movsb
 36700                                  	;cmp	byte [si-1],0	; was it 0?
 36701                                  	;jne	short masciiz_loop
 36702 0000325E 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 36703 00003260 C3                      	retn
 36704                                  
 36705                                  
 36706                                  ;----------------------------------------------------------------------------
 36707                                  
 36708                                  ;	ds:dx points to string to output (asciz)
 36709                                  ;
 36710                                  ;	prints <badld_pre> <string> <badld_post>
 36711                                  
 36712                                  badfil:
 36713 00003261 0E                      	push	cs
 36714 00003262 07                      	pop	es
 36715                                  
 36716 00003263 89D6                    	mov	si,dx
 36717                                  badload:
 36718 00003265 BA[A136]                	mov	dx,badld_pre	; want to print config error
 36719 00003268 BB[5E36]                	mov	bx,crlfm
 36720                                  prnerr:
 36721 0000326B 0E                      	push	cs
 36722 0000326C 1F                      	pop	ds ; *
 36723 0000326D E81D00                  	call	print
 36724                                  prn1:
 36725 00003270 268A14                  	mov	dl,[es:si]
 36726 00003273 08D2                    	or	dl,dl
 36727 00003275 7407                    	jz	short prn2
 36728 00003277 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 36729 00003279 CD21                    	int	21h
 36730 0000327B 46                      	inc	si
 36731 0000327C EBF2                    	jmp	short prn1
 36732                                  prn2:
 36733 0000327E 89DA                    	mov	dx,bx
 36734 00003280 E80A00                  	call	print
 36735                                  	; 11/12/2022
 36736                                  	; ds = cs ; *
 36737 00003283 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 36738                                  	;cmp	byte [cs:donotshownum],1 
 36739 00003288 7407                    	je	short prnexit
 36740                                  	
 36741                                  	; 18/12/2022
 36742                                  	;call	error_line
 36743 0000328A E91EF4                  	jmp	error_line
 36744                                  ;prnexit:
 36745                                  	;retn
 36746                                  
 36747                                  ;----------------------------------------------------------------------------
 36748                                  
 36749                                  print:
 36750 0000328D B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 36751 0000328F CD21                    	int	21h
 36752                                  prnexit:	; 18/12/2022
 36753 00003291 C3                      	retn
 36754                                  
 36755                                  ;----------------------------------------------------------------------------
 36756                                  
 36757                                  ;  open device pointed to by dx, al has access code
 36758                                  ;   if unable to open do a device open null device instead
 36759                                  
 36760                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36761                                  	; (SYSINIT:3764h)
 36762                                  open_dev:
 36763 00003292 E80500                  	call	open_file
 36764 00003295 7309                    	jnc	short open_dev3
 36765                                  
 36766                                  open_dev1:
 36767 00003297 BA[FA32]                	mov	dx,nuldev
 36768                                  	; 18/12/2022
 36769                                  	;call	open_file
 36770                                  ;of_retn:
 36771                                  	;retn
 36772                                  	; 18/12/2022
 36773                                  	;jmp	short open_file
 36774                                  open_file:
 36775 0000329A B43D                    	mov	ah,OPEN	; 3Dh
 36776 0000329C F9                      	stc
 36777 0000329D CD21                    	int	21h
 36778                                  of_retn:	; 18/12/2022
 36779 0000329F C3                      	retn
 36780                                  
 36781                                  open_dev3:
 36782 000032A0 89C3                    	mov	bx,ax			; handle from open to bx
 36783                                  	;;xor	ax,ax			; get device info
 36784                                  	;;mov	ah,IOCTL ; 44h
 36785                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 36786                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36787                                  	;xor	ax,ax
 36788                                  	;mov	ah,44h	; IOCTL
 36789                                  	; 11/12/2022
 36790 000032A2 B80044                  	mov	ax,4400h ; IOCTL<<8 
 36791                                  
 36792 000032A5 CD21                    	int	21h
 36793                                  
 36794 000032A7 F6C280                  	test	dl,10000000b ; 80h
 36795 000032AA 75F3                    	jnz	short of_retn
 36796                                  
 36797 000032AC B43E                    	mov	ah,CLOSE ; 3Eh
 36798 000032AE CD21                    	int	21h
 36799 000032B0 EBE5                    	jmp	short open_dev1
 36800                                  
 36801                                  ;----------------------------------------------------------------------------
 36802                                  
 36803                                  ; 18/12/2022
 36804                                  %if 0
 36805                                  open_file:
 36806                                  	mov	ah,OPEN	; 3Dh
 36807                                  	stc
 36808                                  	int	21h
 36809                                  	retn
 36810                                  %endif
 36811                                  
 36812                                  ;----------------------------------------------------------------------------
 36813                                  
 36814                                  ; test int24. return back to dos with the fake user response of "fail"
 36815                                  
 36816                                  int24:
 36817 000032B2 B003                    	mov	al,3			; fail the system call
 36818 000032B4 CF                      	iret				; return back to dos.
 36819                                  
 36820                                  ; 19/04/2019 - Retro DOS v4.0
 36821                                  
 36822                                  ;----------------------------------------------------------------------------
 36823                                  ; DATA
 36824                                  ;----------------------------------------------------------------------------
 36825                                  
 36826                                  ;include copyrigh.inc			; copyright statement
 36827                                  
 36828                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 36829                                  
 36830                                  ;MsDosVersion6Copyr:
 36831                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 36832                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 36833                                  
 36834                                  ; 22/10/2022
 36835                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 36836                                  
 36837                                  ; 28/12/2022
 36838                                  %if 0
 36839                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36840                                  MsDosVersion5Copyr:
 36841                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 36842                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 36843                                  %endif
 36844                                  
 36845                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36846                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36847                                  ; 20/04/2019 - Retro DOS v4.0
 36848                                  ;BOOTMES:
 36849                                  ;	db      13
 36850                                  ;	db      10
 36851                                  ;	db      "MS-DOS version "
 36852                                  ;	db      MAJOR_VERSION + "0"
 36853                                  ;	db      "."
 36854                                  ;	db      (MINOR_VERSION / 10) + "0"
 36855                                  ;	db      (MINOR_VERSION % 10) + "0"
 36856                                  ;	db      13,10
 36857                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 36858                                  ;	; 22/10/2022
 36859                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 36860                                  ;	;
 36861                                  ;	db	0
 36862                                  
 36863                                  	; 12/12/2022
 36864 000032B5 00                      	db	0
 36865                                  ; 12/12/2022
 36866                                  BOOTMES:
 36867 000032B6 0D0A                    	db	13,10
 36868                                  	;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 36869                                  	; 28/12/2022
 36870 000032B8 526574726F20444F53-     	db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 36870 000032C1 2076342E3120284D6F-
 36870 000032CA 646966696564204D53-
 36870 000032D3 444F5320352E302920 
 36871 000032DC 0D0A                    	db	13,10
 36872                                  	;db	"by Erdogan Tan [2022] "
 36873 000032DE 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 36873 000032E7 6E2054616E205B3230-
 36873 000032F0 32335D20           
 36874 000032F4 0D0A                    	db	13,10
 36875 000032F6 0D0A2400                	db	13,10,"$",0
 36876                                  
 36877 000032FA 4E554C00                nuldev:	db	"NUL",0
 36878 000032FE 434F4E00                condev:	db	"CON",0
 36879 00003302 41555800                auxdev:	db	"AUX",0
 36880 00003306 50524E00                prndev:	db	"PRN",0
 36881                                  
 36882                                  ;IFDEF	CONFIGPROC
 36883 0000330A 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 36883 00003313 595300             
 36884                                  
 36885 00003316 413A                    cntry_drv:  db	"A:"
 36886 00003318 5C                      cntry_root: db	"\"
 36887 00003319 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 36887 00003322 595300             
 36888                                  	    ;db	52 dup (0)
 36889 00003325 00<rep 34h>             	    times 52 db 0	
 36890                                  
 36891                                  country_file_signature:
 36892 00003359 FF434F554E545259        	db	0FFh,'COUNTRY'
 36893                                  
 36894                                  cntrycodepage_id: 
 36895 00003361 0000                    	dw	0 	
 36896                                  
 36897                                  ;ENDIF ; CONFIGPROC
 36898                                  
 36899                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36900                                  ;;ifdef	MULTI_CONFIG
 36901                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 36902                                  ;tmplate: db	64                      ; must precede commnd
 36903                                  ;;endif
 36904                                  	; 02/11/2022
 36905                                  	;db	12                      ; size of commnd line (excl. null)
 36906                                  
 36907 00003363 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 36907 0000336C 434F4D00           
 36908                                  	;db	51 dup (0)
 36909 00003370 00<rep 33h>             	times	51 db 0
 36910                                  ;endif
 36911                                  
 36912                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36913                                  ;;ifdef	MULTI_CONFIG
 36914                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 36915                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 36916                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 36917                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 36918                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 36919                                  ;	 db	9,"A:\DOS /P",0		;
 36920                                  ;def_swchr:	
 36921                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 36922                                  ;;endif
 36923                                  
 36924                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36925                                  ;command_line:
 36926                                  ;	db	2,"/P"			; default command.com args
 36927                                  ;	;db	125 dup (0)
 36928                                  ;	times	125 db 0
 36929                                  
 36930                                  pathstring:
 36931                                  	;db	64 dup (0)
 36932 000033A3 00<rep 40h>             	times	64 db 0
 36933                                  
 36934                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36935                                  %if 0
 36936                                  
 36937                                  dae_flag:
 36938                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 36939                                  
 36940                                  ;ifdef	MULTI_CONFIG
 36941                                  
 36942                                  MAX_MULTI_CONFIG equ 10
 36943                                  
 36944                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 36945                                  
 36946                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 36947                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36948                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36949                                  bLastCol:	db      0               ; ending column on status line
 36950                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36951                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 36952                                                                          ; 2=disable default 2-second delay
 36953                                  bCRTPage:	db      0               ; value saved from BIOS data area
 36954                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 36955                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36956                                  bDefBlock:	db      1               ; default block #
 36957                                  bMaxBlock:	db      0               ; maxmimum block #
 36958                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36959                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36960                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36961                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36962                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36963                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36964                                  
 36965                                  szBoot:		db      "CONFIG=",0
 36966                                  szMenu:		db      "MENU",0
 36967                                  szCommon:	db      "COMMON",0
 36968                                  
 36969                                  ;endif	;MULTI_CONFIG
 36970                                  
 36971                                  comtab:	 ; label byte
 36972                                  
 36973                                  ;            cmd len    command         cmd code
 36974                                  ;            -------    -------         --------
 36975                                  
 36976                                  ;ifdef MULTI_CONFIG
 36977                                          db      1,      "[",            CONFIG_BEGIN
 36978                                  ;endif
 36979                                          db      5,      "BREAK",        CONFIG_BREAK
 36980                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36981                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36982                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36983                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36984                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36985                                          db      3,      "DOS",          CONFIG_DOS
 36986                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36987                                          db      4,      "FCBS",         CONFIG_FCBS
 36988                                          db      5,      "FILES",        CONFIG_FILES
 36989                                  ;ifdef MULTI_CONFIG
 36990                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36991                                  ;endif
 36992                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36993                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36994                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36995                                  ;ifdef MULTI_CONFIG
 36996                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36997                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36998                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36999                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 37000                                  ;endif
 37001                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37002                                  ;ifdef MULTI_CONFIG
 37003                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 37004                                  ;endif
 37005                                          db      3,      "REM",          CONFIG_REM
 37006                                  ;ifdef MULTI_CONFIG
 37007                                          db      3,      "SET",          CONFIG_SET
 37008                                  ;endif
 37009                                          db      5,      "SHELL",        CONFIG_SHELL
 37010                                  ;if    STACKSW
 37011                                          db      6,      "STACKS",       CONFIG_STACKS
 37012                                  ;endif
 37013                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 37014                                  	db	0
 37015                                  %endif
 37016                                  
 37017                                  comtab:
 37018                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37019                                  	; (SYSINIT:38EDh)
 37020 000033E3 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 37021 000033EC 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 37022 000033F3 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 37023 000033FB 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37023 00003404 474855             
 37024 00003407 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 37025 0000340E 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 37026 00003414 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37026 0000341D 454C               
 37027 0000341F 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37027 00003428 434B4D             
 37028 0000342B 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37028 00003434 50                 
 37029 00003435 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 37030 0000343D 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 37031 00003446 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 37032 0000344D 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 37033 00003456 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 37034 0000345F 0352454D30              	db      3,      "REM",          CONFIG_REM
 37035 00003464 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 37035 0000346D 31                 
 37036 0000346E 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 37037 00003473 00                      	db	0
 37038                                  
 37039                                  deviceparameters:	
 37040                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 37041                                  devp.specialfunc:	; deviceparameters +
 37042 00003474 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 37043                                  devp.devtype:
 37044 00003475 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 37045                                  devp.devattr:
 37046 00003476 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 37047                                  devp.cylinders:
 37048 00003478 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 37049                                  
 37050 0000347A 00<rep 11Eh>            	times	286	db 0
 37051                                  	
 37052 00003598 0200                    hlim:	dw	2
 37053 0000359A 0900                    slim:	dw	9
 37054                                  
 37055 0000359C 00                      drive:	db	0
 37056                                  
 37057                                  switches:
 37058 0000359D 0000                    	dw	0
 37059                                  
 37060                                  ; the following are the recommended bpbs for the media that
 37061                                  ; we know of so far.
 37062                                  
 37063                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37064                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 37065                                  
 37066                                  ; 48 tpi diskettes
 37067                                  
 37068 0000359F 0002                    bpb48t	dw	512
 37069 000035A1 02                      	db	2
 37070 000035A2 0100                    	dw	1
 37071 000035A4 02                      	db	2
 37072 000035A5 7000                    	dw	112
 37073 000035A7 D002                    	dw	2*9*40 ; 720
 37074 000035A9 FD                      	db	0FDh
 37075 000035AA 0200                    	dw	2
 37076 000035AC 0900                    	dw	9
 37077 000035AE 0200                    	dw	2
 37078 000035B0 00000000                	dd	0
 37079 000035B4 00000000                        dd      0
 37080                                  
 37081                                  ; 96tpi diskettes
 37082                                  
 37083 000035B8 0002                    bpb96t:	dw	512
 37084 000035BA 01                      	db	1
 37085 000035BB 0100                    	dw	1
 37086 000035BD 02                      	db	2
 37087 000035BE E000                    	dw	224
 37088 000035C0 6009                    	dw	2*15*80 ; 2400
 37089 000035C2 F9                      	db	0F9h
 37090 000035C3 0700                    	dw	7
 37091 000035C5 0F00                    	dw	15
 37092 000035C7 0200                    	dw	2
 37093 000035C9 00000000                	dd	0
 37094 000035CD 00000000                        dd      0
 37095                                  
 37096                                  ; 3 1/2 inch diskette bpb
 37097                                  
 37098 000035D1 0002                    bpb35:	dw	512
 37099 000035D3 02                      	db	2
 37100 000035D4 0100                    	dw	1
 37101 000035D6 02                      	db	2
 37102 000035D7 7000                    	dw	112
 37103 000035D9 A005                    	dw	2*9*80 ; 1440
 37104 000035DB F9                      	db	0F9h
 37105 000035DC 0300                    	dw	3
 37106 000035DE 0900                    	dw	9
 37107 000035E0 0200                    	dw	2
 37108 000035E2 00000000                	dd	0
 37109 000035E6 00000000                        dd      0
 37110                                        
 37111 000035EA 0002                    bpb35h:	dw	512
 37112 000035EC 01                      	db	1
 37113 000035ED 0100                    	dw	1
 37114 000035EF 02                      	db	2
 37115 000035F0 E000                    	dw	224
 37116 000035F2 400B                    	dw	2*18*80 ; 2880
 37117 000035F4 F0                      	db	0F0h
 37118 000035F5 0900                    	dw	9
 37119 000035F7 1200                    	dw	18
 37120 000035F9 0200                    	dw	2
 37121 000035FB 00000000                	dd	0
 37122 000035FF 00000000                        dd      0
 37123                                  
 37124                                  ; m037 - BEGIN
 37125                                  
 37126 00003603 0002                    bpb288:	dw	512
 37127 00003605 02                      	db	2
 37128 00003606 0100                    	dw	1
 37129 00003608 02                      	db	2
 37130 00003609 F000                    	dw	240
 37131 0000360B 8016                    	dw	2*36*80 ; 5760
 37132 0000360D F0                      	db	0F0h
 37133 0000360E 0900                    	dw	9
 37134 00003610 2400                    	dw	36
 37135 00003612 0200                    	dw	2
 37136 00003614 00000000                	dd	0
 37137 00003618 00000000                        dd      0
 37138                                  
 37139                                  ; m037 - END
 37140                                  
 37141                                  ; 12/05/2019
 37142                                  
 37143                                  align 2
 37144                                  
 37145                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37146                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 37147                                  
 37148 0000361C [9F35]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 37149 0000361E [B835]                  	    dw	    bpb96t		; 96tpi drives
 37150 00003620 [D135]                  	    dw	    bpb35		; 3.5" drives
 37151                                  ; the following are not supported, so default to 3.5" media layout
 37152 00003622 [D135]                  	    dw	    bpb35		; not used - 8" drives
 37153 00003624 [D135]                  	    dw	    bpb35		; not used - 8" drives
 37154 00003626 [D135]                  	    dw	    bpb35		; not used - hard files
 37155 00003628 [D135]                  	    dw	    bpb35		; not used - tape drives
 37156 0000362A [EA35]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 37157 0000362C [D135]                  	    dw	    bpb35		; ERIMO				m037
 37158 0000362E [0336]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 37159                                  
 37160                                  switchlist: 
 37161 00003630 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 37162                                  
 37163                                  ;----------------------------------------------------------------------------
 37164                                  ; Messages
 37165                                  ;----------------------------------------------------------------------------
 37166                                  
 37167                                  ; 19/04/2019 - Retro DOS v4.0
 37168                                  
 37169                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 37170                                  
 37171 00003639 00                      	db 	0
 37172                                  
 37173                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37174                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 37175                                  
 37176                                  badopm:
 37177 0000363A 0D0A                    	db	0Dh,0Ah 
 37178 0000363C 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 37178 00003645 7A656420636F6D6D61-
 37178 0000364E 6E6420696E20434F4E-
 37178 00003657 4649472E535953     
 37179                                  crlfm:
 37180 0000365E 0D0A24                  	db	0Dh,0Ah,'$'
 37181                                  badparm:
 37182 00003661 0D0A                    	db	0Dh,0Ah
 37183 00003663 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 37183 0000366C 6E64206F7220706172-
 37183 00003675 616D6574657273202D-
 37183 0000367E 2024               
 37184                                  badsiz_pre:
 37185 00003680 0D0A                    	db	0Dh,0Ah
 37186 00003682 536563746F72207369-     	db	'Sector size too large in file $'
 37186 0000368B 7A6520746F6F206C61-
 37186 00003694 72676520696E206669-
 37186 0000369D 6C652024           
 37187                                  badld_pre:
 37188 000036A1 0D0A                    	db	0Dh,0Ah
 37189 000036A3 426164206F72206D69-     	db	'Bad or missing $'
 37189 000036AC 7373696E672024     
 37190                                  badcom:
 37191 000036B3 436F6D6D616E642049-     	db	'Command Interpreter',0
 37191 000036BC 6E7465727072657465-
 37191 000036C5 7200               
 37192                                  badcountry:
 37193 000036C7 0D0A                    	db	0Dh,0Ah
 37194 000036C9 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 37194 000036D2 6F756E74727920636F-
 37194 000036DB 6465206F7220636F64-
 37194 000036E4 6520706167650D0A24 
 37195                                  badcountrycom:
 37196 000036ED 0D0A                    	db	0Dh,0Ah
 37197 000036EF 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 37197 000036F8 434F554E5452592063-
 37197 00003701 6F6D6D616E640D0A24 
 37198                                  insufmemory:
 37199 0000370A 0D0A                    	db	0Dh,0Ah
 37200 0000370C 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 37200 00003715 656E74206D656D6F72-
 37200 0000371E 7920666F7220434F55-
 37200 00003727 4E5452592E53595320-
 37200 00003730 66696C650D0A24     
 37201                                  badmem:
 37202 00003737 0D0A                    	db	0Dh,0Ah
 37203 00003739 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 37203 00003742 74696F6E20746F6F20-
 37203 0000374B 6C6172676520666F72-
 37203 00003754 206D656D6F72790D0A-
 37203 0000375D 24                 
 37204                                  badblock:
 37205 0000375E 0D0A                    	db	0Dh,0Ah
 37206 00003760 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 37206 00003769 626C6F636B20646576-
 37206 00003772 696365730D0A24     
 37207                                  badstack:
 37208 00003779 0D0A                    	db	0Dh,0Ah
 37209 0000377B 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 37209 00003784 5441434B2070617261-
 37209 0000378D 6D65746572730D0A24 
 37210                                  	; 18/12/2022
 37211                                  ;badorder:
 37212                                  	;db	0Dh,0Ah
 37213                                  	;db	'Incorrect order in CONFIG.SYS line $'
 37214                                  errorcmd:
 37215 00003796 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 37215 0000379F 434F4E4649472E5359-
 37215 000037A8 53206C696E652024   
 37216                                  
 37217                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37218                                  %if 0
 37219                                  
 37220                                  OnOff:	db	'ON'
 37221                                  OnOff2:	db	'OFF'
 37222                                  
 37223                                  StartMsg:
 37224                                  	db	'Starting MS-DOS...',0Dh,0Ah
 37225                                  	db	0Ah,0
 37226                                  _$PauseMsg:
 37227                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 37228                                  _$CleanMsg:
 37229                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 37230                                  _$InterMsg:
 37231                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 37232                                  _$MenuHeader:
 37233                                  	db	0Dh,0Ah
 37234                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 37235                                  	db	'  =======================',0Dh,0Ah,'$'
 37236                                  _$MenuPrmpt:
 37237                                  	db	'  Enter a choice: $'
 37238                                  _$StatusLine:
 37239                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 37240                                  	db	'and AUTOEXEC.BAT [ ]$'
 37241                                  _$InterPrmpt:
 37242                                  	db	' [Y,N]?$'
 37243                                  _$YES:	db	'YES$'
 37244                                  _$NO:	db	'NO $'
 37245                                  _$TimeOut:
 37246                                  	db	'Time remaining: $'
 37247                                  badcomprmpt:
 37248                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 37249                                  	db	0Dh,0Ah,'$'
 37250                                  _$AutoPrmpt:
 37251                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 37252                                  
 37253                                  %endif
 37254                                  
 37255                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37256                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 37257                                  
 37258                                  TooManyDrivesMsg:
 37259 000037B0 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 37259 000037B9 4C6F676963616C2064-
 37259 000037C2 726976657320706173-
 37259 000037CB 74205A3A2065786973-
 37259 000037D4 7420616E642077696C-
 37259 000037DD 6C2062652069676E6F-
 37259 000037E6 7265640D0A24       
 37260                                  
 37261                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 37262                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 37263                                  	;db	7 dup(0)
 37264                                  
 37265                                  	;times	7 db 0
 37266                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37267                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 37268                                  	; 09/12/2022
 37269                                  	;times 4 db 0
 37270                                  
 37271                                  ;----------------------------------------------------------------------------
 37272                                  		; 09/12/2022
 37273                                  		;db 0
 37274                                  
 37275                                  number3div	equ ($-SYSINIT$)
 37276                                  number3mod	equ (number3div % 16)
 37277                                  
 37278                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 37279 000037EC 00<rep 4h>              		times (16-number3mod) db 0
 37280                                  %endif
 37281                                  
 37282                                  ;----------------------------------------------------------------------------
 37283                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 37284                                  ;----------------------------------------------------------------------------
 37285                                  
 37286                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 37287                                  
 37288                                  ;----------------------------------------------------------------------------
 37289                                  ; 20/04/2019 - Retro DOS v4.0
 37290                                  
 37291                                  ; 09/12/2022
 37292                                  ;
 37293                                  ;bss_start:
 37294                                  ;
 37295                                  ;ABSOLUTE bss_start
 37296                                  ;
 37297                                  ;alignb 16
 37298                                  
 37299                                  SI_end:  ; SI_end equ $
 37300                                  
 37301                                  ;----------------------------------------------------------------------------
 37302                                  
 37303                                  ;sysinitseg	ends
 37304                                  
 37305                                  ; ***************************************************************************
 37306                                  
 37307                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 37308                                  
 37309                                  SYSINITSIZE	equ SI_end - SYSINIT$
 37310                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 37311                                  
 37312                                  ;----------------------------------------------------------------------------
 37313                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 37314                                  ;----------------------------------------------------------------------------
 37315                                  
 37316                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 37317                                  ;----------------------------------------------------------------------------
 37318                                  ;----------------------------------------------------------------------------
 37319                                  
 37320                                  ; ----------------------------------------------------------------------------
 37321                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 37322                                  ; ----------------------------------------------------------------------------
 37323                                  ; 18/03/2019 - Retro DOS v4.0 
 37324                                  ; 11/06/2018 - Retro DOS v3.0 
 37325                                  
 37326                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 37327                                  		;; 28/06/2019 ('msdos6.s') 
 37328                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 37329                                  		
 37330                                  		; 27/09/2023 (BugFix)
 37331                                  		; 25/09/2023
 37332                                  		; 29/12/2022
 37333 000037F0 <bin 8E5Ah>             		incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 37334                                  		
 37335                                  		;; 28/12/2022 (BugFix)
 37336                                  		;; 22/12/2022
 37337                                  		;; 21/12/2022 ('msdos5.s')
 37338                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 37339                                  	
 37340                                  ; 28/09/2023	
 37341                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 37342                                  
 37343                                  align 2
 37344                                  
 37345                                  ; 21/12/2022
 37346                                  ;;END_OF_KERNEL:
 37347                                  ;END_OF_KERNEL equ $
 37348                                  
 37349                                  ; 28/09/2023
 37350                                  S3SIZE equ $-$$
 37351                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 37352                                  
 37353                                  ;=============================================================================
 37354                                  ;	END
 37355                                  ;=============================================================================
 37356                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 37357                                  ; ------------------------------
 37358                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
